diff --git a/demos/mobile/quickhit/plugins/LevelTemplate/leveltemplate.cpp b/demos/mobile/quickhit/plugins/LevelTemplate/leveltemplate.cpp
index a08a27c..47598c8 100644
--- a/demos/mobile/quickhit/plugins/LevelTemplate/leveltemplate.cpp
+++ b/demos/mobile/quickhit/plugins/LevelTemplate/leveltemplate.cpp
@@ -118,9 +118,6 @@ QVariant LevelTemplate::graphSize(QVariant pathToGraph)
     return ret;
 }
 
-// This Qt macro exports the plugin class level with the name levelplugins.
-// There should be exactly one occurrence of this macro in a Qt plugin's source code.
-Q_EXPORT_PLUGIN2(levelplugins, LevelTemplate);
 
 
 
diff --git a/demos/mobile/quickhit/plugins/LevelTemplate/leveltemplate.h b/demos/mobile/quickhit/plugins/LevelTemplate/leveltemplate.h
index 96fceeb..5501903 100644
--- a/demos/mobile/quickhit/plugins/LevelTemplate/leveltemplate.h
+++ b/demos/mobile/quickhit/plugins/LevelTemplate/leveltemplate.h
@@ -56,6 +56,10 @@ class LevelTemplate : public LevelPluginInterface
 {
     Q_OBJECT
 
+    // This Qt macro exports the plugin.
+    // There should be exactly one occurrence of this macro in a Qt plugin's source code.
+    Q_PLUGIN_METADATA(IID "Forum.Nokia.com.QuickHit.LevelPluginInterface/1.0")
+
     // This macro tells Qt which interfaces the class implements.
     // This is used when implementing plugins.
     Q_INTERFACES(LevelPluginInterface)
diff --git a/src/declarative/qml/qdeclarativeextensionplugin.cpp b/src/declarative/qml/qdeclarativeextensionplugin.cpp
index 1634588..2067bc2 100644
--- a/src/declarative/qml/qdeclarativeextensionplugin.cpp
+++ b/src/declarative/qml/qdeclarativeextensionplugin.cpp
@@ -58,7 +58,7 @@ QT_BEGIN_NAMESPACE
     
     \list
     \li Subclass QDeclarativeExtensionPlugin, implement registerTypes() method
-    to register types using qmlRegisterType(), and export the class using the Q_EXPORT_PLUGIN2() macro
+    to register types using qmlRegisterType(), and export the class using the Q_PLUGIN_METADATA() macro
     \li Write an appropriate project file for the plugin
     \li Create a \l{Writing a qmldir file}{qmldir file} to describe the plugin
     \endlist
@@ -139,7 +139,7 @@ QT_BEGIN_NAMESPACE
     Constructs a QML extension plugin with the given \a parent.
 
     Note that this constructor is invoked automatically by the
-    Q_EXPORT_PLUGIN2() macro, so there is no need for calling it
+    plugin loader, so there is no need for calling it
     explicitly.
 */
 QDeclarativeExtensionPlugin::QDeclarativeExtensionPlugin(QObject *parent)
diff --git a/tools/designer/src/plugins/qdeclarativeview/qdeclarativeview_plugin.cpp b/tools/designer/src/plugins/qdeclarativeview/qdeclarativeview_plugin.cpp
index baf69af..310d7df 100644
--- a/tools/designer/src/plugins/qdeclarativeview/qdeclarativeview_plugin.cpp
+++ b/tools/designer/src/plugins/qdeclarativeview/qdeclarativeview_plugin.cpp
@@ -127,6 +127,4 @@ QString QDeclarativeViewPlugin::domXml() const
     </ui>");
 }
 
-Q_EXPORT_PLUGIN2(customwidgetplugin, QDeclarativeViewPlugin)
-
 QT_END_NAMESPACE
diff --git a/tools/designer/src/plugins/qdeclarativeview/qdeclarativeview_plugin.h b/tools/designer/src/plugins/qdeclarativeview/qdeclarativeview_plugin.h
index b189c85..be7a4ed 100644
--- a/tools/designer/src/plugins/qdeclarativeview/qdeclarativeview_plugin.h
+++ b/tools/designer/src/plugins/qdeclarativeview/qdeclarativeview_plugin.h
@@ -49,6 +49,7 @@ QT_BEGIN_NAMESPACE
 class QDeclarativeViewPlugin: public QObject, public QDesignerCustomWidgetInterface
 {
     Q_OBJECT
+    Q_PLUGIN_METADATA(IID "org.qt-project.QDesignerCustomWidgetInterface")
     Q_INTERFACES(QDesignerCustomWidgetInterface)
 public:
     QDeclarativeViewPlugin(QObject *parent = 0);