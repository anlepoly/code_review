diff --git a/src/plugins/accessible/quick/qaccessiblequickitem.cpp b/src/plugins/accessible/quick/qaccessiblequickitem.cpp
index d282b04..99db9fa 100644
--- a/src/plugins/accessible/quick/qaccessiblequickitem.cpp
+++ b/src/plugins/accessible/quick/qaccessiblequickitem.cpp
@@ -211,7 +211,7 @@ QString QAccessibleQuickItem::text(QAccessible::Text textType) const
 #ifdef Q_ACCESSIBLE_QUICK_ITEM_ENABLE_DEBUG_DESCRIPTION
     case QAccessible::DebugDescription: {
         QString debugString;
-        debugString = QString::fromAscii(object()->metaObject()->className()) + QLatin1Char(' ');
+        debugString = QString::fromLatin1(object()->metaObject()->className()) + QLatin1Char(' ');
         debugString += isAccessible() ? QLatin1String("enabled") : QLatin1String("disabled");
         return debugString;
         break; }
diff --git a/src/plugins/accessible/quick/qaccessiblequickview.cpp b/src/plugins/accessible/quick/qaccessiblequickview.cpp
index ed8167f..5f66f00 100644
--- a/src/plugins/accessible/quick/qaccessiblequickview.cpp
+++ b/src/plugins/accessible/quick/qaccessiblequickview.cpp
@@ -102,7 +102,7 @@ QString QAccessibleQuickView::text(QAccessible::Text text) const
 {
 #ifdef Q_ACCESSIBLE_QUICK_ITEM_ENABLE_DEBUG_DESCRIPTION
     if (text == QAccessible::DebugDescription) {
-        return QString::fromAscii(object()->metaObject()->className()) ;
+        return QString::fromLatin1(object()->metaObject()->className()) ;
     }
 #else
     Q_UNUSED(text)
diff --git a/src/qml/qml/qqmlboundsignal.cpp b/src/qml/qml/qqmlboundsignal.cpp
index b8b74ac..358e945 100644
--- a/src/qml/qml/qqmlboundsignal.cpp
+++ b/src/qml/qml/qqmlboundsignal.cpp
@@ -287,7 +287,7 @@ void QQmlBoundSignal::subscriptionCallback(QQmlNotifierEndpoint *e, void **a)
         return;
 
     if (QQmlDebugService::isDebuggingEnabled())
-        QV8DebugService::instance()->signalEmitted(QString::fromAscii(s->m_scope->metaObject()->method(s->m_index).methodSignature()));
+        QV8DebugService::instance()->signalEmitted(QString::fromLatin1(s->m_scope->metaObject()->method(s->m_index).methodSignature()));
 
     QQmlHandlingSignalProfiler prof(*(s->m_scope), s->m_index, s->m_expression);
 
diff --git a/src/qml/qml/qqmlglobal.cpp b/src/qml/qml/qqmlglobal.cpp
index c5228d0..6f49429 100644
--- a/src/qml/qml/qqmlglobal.cpp
+++ b/src/qml/qml/qqmlglobal.cpp
@@ -318,7 +318,7 @@ QObject *QQmlGuiProvider::inputMethod()
 {
     // We don't have any input method code by default
     QObject *o = new QObject();
-    o->setObjectName(QString::fromAscii("No inputMethod available"));
+    o->setObjectName(QString::fromLatin1("No inputMethod available"));
     return o;
 }
 
diff --git a/src/qml/qml/v8/qjsvalue.cpp b/src/qml/qml/v8/qjsvalue.cpp
index 3cde607..726ec82 100644
--- a/src/qml/qml/v8/qjsvalue.cpp
+++ b/src/qml/qml/v8/qjsvalue.cpp
@@ -156,7 +156,7 @@ QJSValue::QJSValue(const QLatin1String &value)
 */
 #ifndef QT_NO_CAST_FROM_ASCII
 QJSValue::QJSValue(const char *value)
-    : d_ptr(new QJSValuePrivate(QString::fromAscii(value)))
+    : d_ptr(new QJSValuePrivate(QString::fromLatin1(value)))
 {
 }
 #endif
diff --git a/src/qmltest/quicktestevent.cpp b/src/qmltest/quicktestevent.cpp
index 9405171..9e401c9 100644
--- a/src/qmltest/quicktestevent.cpp
+++ b/src/qmltest/quicktestevent.cpp
@@ -142,7 +142,7 @@ namespace QtQuickTest
             static const char *mouseActionNames[] =
                 { "MousePress", "MouseRelease", "MouseClick", "MouseDoubleClick", "MouseMove" };
             QString warning = QString::fromLatin1("Mouse event \"%1\" not accepted by receiving window");
-            QWARN(warning.arg(QString::fromLatin1(mouseActionNames[static_cast<int>(action)])).toAscii().data());
+            QWARN(warning.arg(QString::fromLatin1(mouseActionNames[static_cast<int>(action)])).toLatin1().data());
         }
     }
 
diff --git a/src/quick/items/context2d/qquickcanvasitem.cpp b/src/quick/items/context2d/qquickcanvasitem.cpp
index c98c4bc..0e5a3a0 100644
--- a/src/quick/items/context2d/qquickcanvasitem.cpp
+++ b/src/quick/items/context2d/qquickcanvasitem.cpp
@@ -933,7 +933,7 @@ QString QQuickCanvasItem::toDataURL(const QString& mimeType) const
         else
             return QLatin1Literal("data:,");
 
-        image.save(&buffer, type.toAscii());
+        image.save(&buffer, type.toLatin1());
         buffer.close();
         QString dataUrl = QLatin1Literal("data:%1;base64,%2");
         return dataUrl.arg(mime).arg(QLatin1String(ba.toBase64().constData()));
diff --git a/src/quick/util/qquickglobal.cpp b/src/quick/util/qquickglobal.cpp
index 6869d48..99caf21 100644
--- a/src/quick/util/qquickglobal.cpp
+++ b/src/quick/util/qquickglobal.cpp
@@ -171,8 +171,8 @@ private:
 
     static inline uchar fromHex(const QString &s, int idx)
     {
-        uchar c = s.at(idx).toAscii();
-        uchar c2 = s.at(idx + 1).toAscii();
+        uchar c = s.at(idx).toLatin1();
+        uchar c2 = s.at(idx + 1).toLatin1();
         return fromHex(c, c2);
     }
 };
diff --git a/tests/auto/qml/debugger/qqmldebugclient/tst_qqmldebugclient.cpp b/tests/auto/qml/debugger/qqmldebugclient/tst_qqmldebugclient.cpp
index 1ff4575..01b1e7f 100644
--- a/tests/auto/qml/debugger/qqmldebugclient/tst_qqmldebugclient.cpp
+++ b/tests/auto/qml/debugger/qqmldebugclient/tst_qqmldebugclient.cpp
@@ -73,7 +73,7 @@ private slots:
 void tst_QQmlDebugClient::initTestCase()
 {
     const QString waitingMsg = QString("QML Debugger: Waiting for connection on port %1...").arg(PORT);
-    QTest::ignoreMessage(QtDebugMsg, waitingMsg.toAscii().constData());
+    QTest::ignoreMessage(QtDebugMsg, waitingMsg.toLatin1().constData());
     new QQmlEngine(this);
 
     m_conn = new QQmlDebugConnection(this);
diff --git a/tests/auto/qml/debugger/qqmldebugservice/tst_qqmldebugservice.cpp b/tests/auto/qml/debugger/qqmldebugservice/tst_qqmldebugservice.cpp
index 2a561b1..3d931e6 100644
--- a/tests/auto/qml/debugger/qqmldebugservice/tst_qqmldebugservice.cpp
+++ b/tests/auto/qml/debugger/qqmldebugservice/tst_qqmldebugservice.cpp
@@ -79,7 +79,7 @@ private slots:
 void tst_QQmlDebugService::initTestCase()
 {
     const QString waitingMsg = QString("QML Debugger: Waiting for connection on port %1...").arg(PORT);
-    QTest::ignoreMessage(QtDebugMsg, waitingMsg.toAscii().constData());
+    QTest::ignoreMessage(QtDebugMsg, waitingMsg.toLatin1().constData());
     new QQmlEngine(this);
 
     m_conn = new QQmlDebugConnection(this);
diff --git a/tests/auto/qml/qqmlecmascript/tst_qqmlecmascript.cpp b/tests/auto/qml/qqmlecmascript/tst_qqmlecmascript.cpp
index 781d594..435724c 100644
--- a/tests/auto/qml/qqmlecmascript/tst_qqmlecmascript.cpp
+++ b/tests/auto/qml/qqmlecmascript/tst_qqmlecmascript.cpp
@@ -3594,11 +3594,11 @@ void tst_qqmlecmascript::moduleApi()
     QQmlComponent component(&engine, testfile);
 
     if (!errorMessage.isEmpty())
-        QTest::ignoreMessage(QtWarningMsg, errorMessage.toAscii().constData());
+        QTest::ignoreMessage(QtWarningMsg, errorMessage.toLatin1().constData());
 
     if (warningMessages.size())
         foreach (const QString &warning, warningMessages)
-            QTest::ignoreMessage(QtWarningMsg, warning.toAscii().constData());
+            QTest::ignoreMessage(QtWarningMsg, warning.toLatin1().constData());
 
     QObject *object = component.create();
     if (!errorMessage.isEmpty()) {
@@ -3606,11 +3606,11 @@ void tst_qqmlecmascript::moduleApi()
     } else {
         QVERIFY(object != 0);
         for (int i = 0; i < readProperties.size(); ++i)
-            QCOMPARE(object->property(readProperties.at(i).toAscii().constData()), readExpectedValues.at(i));
+            QCOMPARE(object->property(readProperties.at(i).toLatin1().constData()), readExpectedValues.at(i));
         for (int i = 0; i < writeProperties.size(); ++i)
-            QVERIFY(object->setProperty(writeProperties.at(i).toAscii().constData(), writeValues.at(i)));
+            QVERIFY(object->setProperty(writeProperties.at(i).toLatin1().constData(), writeValues.at(i)));
         for (int i = 0; i < readBackProperties.size(); ++i)
-            QCOMPARE(object->property(readBackProperties.at(i).toAscii().constData()), readBackExpectedValues.at(i));
+            QCOMPARE(object->property(readBackProperties.at(i).toLatin1().constData()), readBackExpectedValues.at(i));
         delete object;
     }
 }
@@ -3736,11 +3736,11 @@ void tst_qqmlecmascript::importScripts()
     QQmlComponent component(&engine, testfile);
 
     if (!errorMessage.isEmpty())
-        QTest::ignoreMessage(QtWarningMsg, errorMessage.toAscii().constData());
+        QTest::ignoreMessage(QtWarningMsg, errorMessage.toLatin1().constData());
 
     if (warningMessages.size())
         foreach (const QString &warning, warningMessages)
-            QTest::ignoreMessage(QtWarningMsg, warning.toAscii().constData());
+            QTest::ignoreMessage(QtWarningMsg, warning.toLatin1().constData());
 
     QObject *object = component.create();
     if (!errorMessage.isEmpty()) {
@@ -3748,7 +3748,7 @@ void tst_qqmlecmascript::importScripts()
     } else {
         QVERIFY(object != 0);
         for (int i = 0; i < propertyNames.size(); ++i)
-            QCOMPARE(object->property(propertyNames.at(i).toAscii().constData()), propertyValues.at(i));
+            QCOMPARE(object->property(propertyNames.at(i).toLatin1().constData()), propertyValues.at(i));
         delete object;
     }
 }
@@ -4933,7 +4933,7 @@ void tst_qqmlecmascript::stringArg()
     QVERIFY(object->property("returnValue").toBool());
 
     QString w1 = testFileUrl("stringArg.qml").toString() + QLatin1String(":45: Error: String.arg(): Invalid arguments");
-    QTest::ignoreMessage(QtWarningMsg, w1.toAscii().constData());
+    QTest::ignoreMessage(QtWarningMsg, w1.toLatin1().constData());
     QMetaObject::invokeMethod(object, "failure");
     QVERIFY(object->property("returnValue").toBool());
 
@@ -5021,8 +5021,8 @@ void tst_qqmlecmascript::sequenceConversionRead()
         // we haven't registered QList<QPoint> as a sequence type.
         QString warningOne = QLatin1String("QMetaProperty::read: Unable to handle unregistered datatype 'QList<QPoint>' for property 'MySequenceConversionObject::pointListProperty'");
         QString warningTwo = qmlFile.toString() + QLatin1String(":18: TypeError: Cannot read property 'length' of undefined");
-        QTest::ignoreMessage(QtWarningMsg, warningOne.toAscii().constData());
-        QTest::ignoreMessage(QtWarningMsg, warningTwo.toAscii().constData());
+        QTest::ignoreMessage(QtWarningMsg, warningOne.toLatin1().constData());
+        QTest::ignoreMessage(QtWarningMsg, warningTwo.toLatin1().constData());
 
         QMetaObject::invokeMethod(object, "performTest");
 
@@ -5072,7 +5072,7 @@ void tst_qqmlecmascript::sequenceConversionWrite()
 
         // we haven't registered QList<QPoint> as a sequence type, so writing shouldn't work.
         QString warningOne = qmlFile.toString() + QLatin1String(":16: Error: Cannot assign QVariantList to an unregistered type");
-        QTest::ignoreMessage(QtWarningMsg, warningOne.toAscii().constData());
+        QTest::ignoreMessage(QtWarningMsg, warningOne.toLatin1().constData());
 
         QMetaObject::invokeMethod(object, "performTest");
 
@@ -5179,7 +5179,7 @@ void tst_qqmlecmascript::sequenceConversionBindings()
     {
         QUrl qmlFile = testFileUrl("sequenceConversion.bindings.error.qml");
         QString warning = QString(QLatin1String("%1:17: Unable to assign QList<int> to QList<bool>")).arg(qmlFile.toString());
-        QTest::ignoreMessage(QtWarningMsg, warning.toAscii().constData());
+        QTest::ignoreMessage(QtWarningMsg, warning.toLatin1().constData());
         QQmlComponent component(&engine, qmlFile);
         QObject *object = component.create();
         QVERIFY(object != 0);
diff --git a/tests/auto/quick/qquickloader/tst_qquickloader.cpp b/tests/auto/quick/qquickloader/tst_qquickloader.cpp
index 3bb06f7..69c75d6 100644
--- a/tests/auto/quick/qquickloader/tst_qquickloader.cpp
+++ b/tests/auto/quick/qquickloader/tst_qquickloader.cpp
@@ -695,7 +695,7 @@ void tst_QQuickLoader::initialPropertyValues()
     server.serveDirectory(dataDirectory());
 
     foreach (const QString &warning, expectedWarnings)
-        QTest::ignoreMessage(QtWarningMsg, warning.toAscii().constData());
+        QTest::ignoreMessage(QtWarningMsg, warning.toLatin1().constData());
 
     QQmlComponent component(&engine, qmlFile);
     QObject *object = component.create();
@@ -704,7 +704,7 @@ void tst_QQuickLoader::initialPropertyValues()
     QTest::qWait(50);
 
     for (int i = 0; i < propertyNames.size(); ++i)
-        QCOMPARE(object->property(propertyNames.at(i).toAscii().constData()), propertyValues.at(i));
+        QCOMPARE(object->property(propertyNames.at(i).toLatin1().constData()), propertyValues.at(i));
 
     delete object;
 }
diff --git a/tests/benchmarks/qml/holistic/tst_holistic.cpp b/tests/benchmarks/qml/holistic/tst_holistic.cpp
index db8cc1c..988b398 100644
--- a/tests/benchmarks/qml/holistic/tst_holistic.cpp
+++ b/tests/benchmarks/qml/holistic/tst_holistic.cpp
@@ -398,8 +398,8 @@ void tst_holistic::dynamicity()
             usedFirst = true;
         }
 
-        obj->setProperty(writeProperty.toAscii().constData(), writeValue);
-        readValue = obj->property(readProperty.toAscii().constData());
+        obj->setProperty(writeProperty.toLatin1().constData(), writeValue);
+        readValue = obj->property(readProperty.toLatin1().constData());
     }
 
     delete obj;
@@ -593,7 +593,7 @@ void tst_holistic::typeResolution()
             }
 
             for (int j = 0; j < writeProperty.size(); ++j) {
-                obj->setProperty(writeProperty.at(j).toAscii().constData(), writeValue.at(j));
+                obj->setProperty(writeProperty.at(j).toLatin1().constData(), writeValue.at(j));
             }
         }
     }
diff --git a/tools/qmlplugindump/main.cpp b/tools/qmlplugindump/main.cpp
index b3cc721..37c2583 100644
--- a/tools/qmlplugindump/main.cpp
+++ b/tools/qmlplugindump/main.cpp
@@ -717,10 +717,10 @@ int main(int argc, char *argv[])
 
         // find all QMetaObjects reachable when the specified module is imported
         if (action != Path) {
-            importCode += QString("import %0 %1\n").arg(pluginImportUri, pluginImportVersion).toAscii();
+            importCode += QString("import %0 %1\n").arg(pluginImportUri, pluginImportVersion).toLatin1();
         } else {
             // pluginImportVersion can be empty
-            importCode += QString("import \".\" %2\n").arg(pluginImportVersion).toAscii();
+            importCode += QString("import \".\" %2\n").arg(pluginImportVersion).toLatin1();
         }
 
         // create a component with these imports to make sure the imports are valid