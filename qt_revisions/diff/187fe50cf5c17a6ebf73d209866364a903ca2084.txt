diff --git a/src/qml/qml/v4/qv4bindings.cpp b/src/qml/qml/v4/qv4bindings.cpp
index 3084f92..97d3740 100644
--- a/src/qml/qml/v4/qv4bindings.cpp
+++ b/src/qml/qml/v4/qv4bindings.cpp
@@ -78,6 +78,10 @@ struct Register {
     double getnumber() const { return numberValue; }
     double &getnumberref() { return numberValue; }
 
+    void setfloat(float v) { floatValue = v; dataType = FloatType; }
+    float getfloat() const { return floatValue; }
+    float &getfloatref() { return floatValue; }
+
     void setint(int v) { intValue = v; dataType = IntType; }
     int getint() const { return intValue; }
     int &getintref() { return intValue; }
@@ -107,6 +111,7 @@ struct Register {
     union {
         QObject *qobjectValue;
         double numberValue;
+        float floatValue;
         int intValue;
         bool boolValue;
         void *data[sizeof(QVariant)];
@@ -713,13 +718,21 @@ void QV4Bindings::run(int instrIndex, quint32 &executedBlocks,
                 sub->bindings = this;
                 sub->method = subIdx;
             }
-            reg.init((Register::Type)instr->fetchAndSubscribe.valueType);
+
+            const Register::Type valueType = (Register::Type)instr->fetchAndSubscribe.valueType;
+            reg.init(valueType);
             if (instr->fetchAndSubscribe.valueType >= FirstCleanupType)
                 MARK_REGISTER(instr->fetchAndSubscribe.reg);
             QQmlAccessors *accessors = instr->fetchAndSubscribe.property.accessors;
             accessors->read(object, instr->fetchAndSubscribe.property.accessorData,
                             reg.typeDataPtr());
 
+            if (valueType == FloatType) {
+                // promote floats
+                const double v = reg.getfloat();
+                reg.setnumber(v);
+            }
+
             if (accessors->notifier) {
                 QQmlNotifier *notifier = 0;
                 accessors->notifier(object, instr->fetchAndSubscribe.property.accessorData, &notifier);
@@ -902,7 +915,7 @@ void QV4Bindings::run(int instrIndex, quint32 &executedBlocks,
         if (src.isUndefined()) {
             output.setUndefined();
         } else {
-            new (output.getstringptr()) QString(QString::number(src.getnumber()));
+            new (output.getstringptr()) QString(QString::number(src.getnumber(), 'g', 16));
             STRING_REGISTER(instr->unaryop.output);
         }
     }
@@ -1551,11 +1564,17 @@ void QV4Bindings::run(int instrIndex, quint32 &executedBlocks,
         if (!object) {
             THROW_EXCEPTION(instr->fetch.exceptionId);
         } else {
-            reg.init((Register::Type)instr->fetch.valueType);
+            const Register::Type valueType = (Register::Type)instr->fetch.valueType;
+            reg.init(valueType);
             if (instr->fetch.valueType >= FirstCleanupType)
                 MARK_REGISTER(instr->fetch.reg);
             void *argv[] = { reg.typeDataPtr(), 0 };
             QMetaObject::metacall(object, QMetaObject::ReadProperty, instr->fetch.index, argv);
+            if (valueType == FloatType) {
+                // promote floats
+                const double v = reg.getfloat();
+                reg.setnumber(v);
+            }
         }
     }
     QML_V4_END_INSTR(Fetch, fetch)
@@ -1593,6 +1612,12 @@ void QV4Bindings::run(int instrIndex, quint32 &executedBlocks,
             }
         }
 
+        if (instr->store.valueType == FloatType) {
+            // cast numbers to floats
+            const float v = (float) data.getnumber();
+            data.setfloat(v);
+        }
+
         int status = -1;
         void *argv[] = { data.typeDataPtr(), 0, &status, &storeFlags };
         QMetaObject::metacall(output, QMetaObject::WriteProperty,
diff --git a/src/qml/qml/v4/qv4compiler.cpp b/src/qml/qml/v4/qv4compiler.cpp
index f046a56..9afbb7e 100644
--- a/src/qml/qml/v4/qv4compiler.cpp
+++ b/src/qml/qml/v4/qv4compiler.cpp
@@ -226,6 +226,7 @@ void QV4CompilerPrivate::visitConst(IR::Const *e)
         gen(i);
         } break;
 
+    case IR::FloatType:
     case IR::NumberType: {
         Instr::LoadNumber i;
         i.reg = currentReg;
@@ -351,6 +352,9 @@ void QV4CompilerPrivate::visitName(IR::Name *e)
         QQmlRegisterType regType;
 
         switch (propTy) {
+        case QMetaType::Float:
+            regType = FloatType;
+            break;
         case QMetaType::Double:
             regType = NumberType;
             break;
@@ -458,7 +462,7 @@ void QV4CompilerPrivate::visitUnop(IR::Unop *e)
         } break;
 
     case IR::OpUMinus:
-        if (e->expr->type == IR::NumberType) {
+        if (IR::isRealType(e->expr->type)) {
             Instr::UnaryMinusNumber i;
             i.output = currentReg;
             i.src = src;
@@ -475,7 +479,7 @@ void QV4CompilerPrivate::visitUnop(IR::Unop *e)
         break;
 
     case IR::OpUPlus:
-        if (e->expr->type == IR::NumberType) {
+        if (IR::isRealType(e->expr->type)) {
             Instr::UnaryPlusNumber i;
             i.output = currentReg;
             i.src = src;
@@ -540,6 +544,7 @@ void QV4CompilerPrivate::convertToNumber(IR::Expr *expr, int reg)
         gen(i);
         } break;
 
+    case IR::FloatType:
     case IR::NumberType:
         // nothing to do
         return;
@@ -566,6 +571,7 @@ void QV4CompilerPrivate::convertToInt(IR::Expr *expr, int reg)
         // nothing to do
         return;
 
+    case IR::FloatType:
     case IR::NumberType: {
         Instr::ConvertNumberToInt i;
         i.output = i.src = reg;
@@ -594,6 +600,7 @@ void QV4CompilerPrivate::convertToBool(IR::Expr *expr, int reg)
         gen(i);
         } break;
 
+    case IR::FloatType:
     case IR::NumberType: {
         Instr::ConvertNumberToBool i;
         i.output = i.src = reg;
@@ -813,7 +820,7 @@ void QV4CompilerPrivate::visitCall(IR::Call *call)
 {
     if (IR::Name *name = call->base->asName()) {
         IR::Expr *arg = call->onlyArgument();
-        if (arg != 0 && arg->type == IR::NumberType) {
+        if (arg != 0 && IR::isRealType(arg->type)) {
             traceExpression(arg, currentReg);
 
             switch (name->builtin) {
@@ -869,8 +876,8 @@ void QV4CompilerPrivate::visitCall(IR::Call *call)
                     IR::Expr *arg1 = call->args->expr;
                     IR::Expr *arg2 = call->args->next->expr;
 
-                    if (arg1 != 0 && arg1->type == IR::NumberType &&
-                        arg2 != 0 && arg2->type == IR::NumberType) {
+                    if (arg1 != 0 && IR::isRealType(arg1->type) &&
+                        arg2 != 0 && IR::isRealType(arg2->type)) {
 
                         traceExpression(arg1, currentReg);
                         traceExpression(arg2, currentReg + 1);
@@ -917,7 +924,17 @@ void QV4CompilerPrivate::visitMove(IR::Move *s)
 
     quint8 dest = target->index;
 
-    if (target->type != s->source->type) {
+    IR::Type targetTy = s->target->type;
+    IR::Type sourceTy = s->source->type;
+
+    // promote the floats
+    if (sourceTy == IR::FloatType)
+        sourceTy = IR::NumberType;
+
+    if (targetTy == IR::FloatType)
+        targetTy = IR::NumberType;
+
+    if (sourceTy != targetTy) {
         quint8 src = dest;
 
         if (IR::Temp *t = s->source->asTemp()) 
@@ -926,8 +943,6 @@ void QV4CompilerPrivate::visitMove(IR::Move *s)
             traceExpression(s->source, dest);
 
         V4Instr::Type opcode = V4Instr::Noop;
-        IR::Type targetTy = s->target->type;
-        IR::Type sourceTy = s->source->type;
 
         if (sourceTy == IR::UrlType) {
             switch (targetTy) {
@@ -972,7 +987,7 @@ void QV4CompilerPrivate::visitMove(IR::Move *s)
             case IR::StringType: opcode = V4Instr::ConvertStringToInt; break;
             default: break;
             } // switch
-        } else if (targetTy == IR::NumberType) {
+        } else if (IR::isRealType(targetTy)) {
             switch (sourceTy) {
             case IR::BoolType: opcode = V4Instr::ConvertBoolToNumber; break;
             case IR::IntType: opcode = V4Instr::ConvertIntToNumber; break;
@@ -1093,6 +1108,7 @@ void QV4CompilerPrivate::visitRet(IR::Ret *s)
         case IR::IntType:
             test.regType = QMetaType::Int;
             break;
+        case IR::FloatType:
         case IR::NumberType:
             test.regType = QMetaType::Double;
             break;
@@ -1107,6 +1123,7 @@ void QV4CompilerPrivate::visitRet(IR::Ret *s)
     store.output = 0;
     store.index = expression->property->index;
     store.reg = storeReg;
+    store.valueType = s->type == IR::FloatType ? FloatType : 0;
     store.exceptionId = exceptionId(s->line, s->column);
     gen(store);
 }
diff --git a/src/qml/qml/v4/qv4instruction_p.h b/src/qml/qml/v4/qv4instruction_p.h
index a2a466e..49ac65c 100644
--- a/src/qml/qml/v4/qv4instruction_p.h
+++ b/src/qml/qml/v4/qv4instruction_p.h
@@ -241,6 +241,7 @@ union Q_AUTOTEST_EXPORT V4Instr {
         qint8 output;
         qint8 reg;
         quint8 exceptionId;
+        quint8 valueType;
         quint32 index;
     };
 
diff --git a/src/qml/qml/v4/qv4ir.cpp b/src/qml/qml/v4/qv4ir.cpp
index d2b9605..982742c 100644
--- a/src/qml/qml/v4/qv4ir.cpp
+++ b/src/qml/qml/v4/qv4ir.cpp
@@ -101,6 +101,10 @@ IR::Type maxType(IR::Type left, IR::Type right)
         return IR::InvalidType;
 }
 
+bool isRealType(IR::Type type)
+{
+    return type == IR::NumberType || type == IR::FloatType;
+}
 
 const char *opname(AluOp op)
 {
diff --git a/src/qml/qml/v4/qv4ir_p.h b/src/qml/qml/v4/qv4ir_p.h
index 0f5128e..d670876 100644
--- a/src/qml/qml/v4/qv4ir_p.h
+++ b/src/qml/qml/v4/qv4ir_p.h
@@ -154,6 +154,7 @@ enum Type {
     NumberType
 };
 Type maxType(IR::Type left, IR::Type right);
+bool isRealType(IR::Type type);
 
 struct ExprVisitor {
     virtual ~ExprVisitor() {}
diff --git a/src/qml/qml/v4/qv4program_p.h b/src/qml/qml/v4/qv4program_p.h
index 659f9f2..664ccde 100644
--- a/src/qml/qml/v4/qv4program_p.h
+++ b/src/qml/qml/v4/qv4program_p.h
@@ -88,6 +88,7 @@ enum QQmlRegisterType {
     NullType,
     QObjectStarType,
     NumberType,
+    FloatType,
     IntType,
     BoolType,
 
diff --git a/tests/auto/qml/v4/tst_v4.cpp b/tests/auto/qml/v4/tst_v4.cpp
index ccd7ea7..8c23b05 100644
--- a/tests/auto/qml/v4/tst_v4.cpp
+++ b/tests/auto/qml/v4/tst_v4.cpp
@@ -821,22 +821,22 @@ void tst_v4::debuggingDumpInstructions()
     expectedPreAddress << "\t\tLoadModuleObject\t\t) -> Output_Reg(0)";
     expectedPreAddress << "\t\tLoadAttached\t\tObject_Reg(0) Attached_Index(0) -> Output_Reg(0)";
     expectedPreAddress << "\t\tUnaryNot\t\tInput_Reg(0) -> Output_Reg(0)";
-    expectedPreAddress << "\t\tUnaryMinusReal\t\tInput_Reg(0) -> Output_Reg(0)";
+    expectedPreAddress << "\t\tUnaryMinusNumber\t\tInput_Reg(0) -> Output_Reg(0)";
     expectedPreAddress << "\t\tUnaryMinusInt\t\tInput_Reg(0) -> Output_Reg(0)";
-    expectedPreAddress << "\t\tUnaryPlusReal\t\tInput_Reg(0) -> Output_Reg(0)";
+    expectedPreAddress << "\t\tUnaryPlusNumber\t\tInput_Reg(0) -> Output_Reg(0)";
     expectedPreAddress << "\t\tUnaryPlusInt\t\tInput_Reg(0) -> Output_Reg(0)";
     expectedPreAddress << "\t\tConvertBoolToInt\tInput_Reg(0) -> Output_Reg(0)";
-    expectedPreAddress << "\t\tConvertBoolToReal\tInput_Reg(0) -> Output_Reg(0)";
+    expectedPreAddress << "\t\tConvertBoolToNumber\tInput_Reg(0) -> Output_Reg(0)";
     expectedPreAddress << "\t\tConvertBoolToString\tInput_Reg(0) -> Output_Reg(0)";
     expectedPreAddress << "\t\tConvertIntToBool\tInput_Reg(0) -> Output_Reg(0)";
-    expectedPreAddress << "\t\tConvertIntToReal\tInput_Reg(0) -> Output_Reg(0)";
+    expectedPreAddress << "\t\tConvertIntToNumber\tInput_Reg(0) -> Output_Reg(0)";
     expectedPreAddress << "\t\tConvertIntToString\tInput_Reg(0) -> Output_Reg(0)";
-    expectedPreAddress << "\t\tConvertRealToBool\tInput_Reg(0) -> Output_Reg(0)";
-    expectedPreAddress << "\t\tConvertRealToInt\tInput_Reg(0) -> Output_Reg(0)";
-    expectedPreAddress << "\t\tConvertRealToString\tInput_Reg(0) -> Output_Reg(0)";
+    expectedPreAddress << "\t\tConvertNumberToBool\tInput_Reg(0) -> Output_Reg(0)";
+    expectedPreAddress << "\t\tConvertNumberToInt\tInput_Reg(0) -> Output_Reg(0)";
+    expectedPreAddress << "\t\tConvertNumberToString\tInput_Reg(0) -> Output_Reg(0)";
     expectedPreAddress << "\t\tConvertStringToBool\tInput_Reg(0) -> Output_Reg(0)";
     expectedPreAddress << "\t\tConvertStringToInt\tInput_Reg(0) -> Output_Reg(0)";
-    expectedPreAddress << "\t\tConvertStringToReal\tInput_Reg(0) -> Output_Reg(0)";
+    expectedPreAddress << "\t\tConvertStringToNumber\tInput_Reg(0) -> Output_Reg(0)";
     expectedPreAddress << "\t\tConvertStringToUrl\tInput_Reg(0) -> Output_Reg(0)";
     expectedPreAddress << "\t\tConvertStringToColor\tInput_Reg(0) -> Output_Reg(0)";
     expectedPreAddress << "\t\tConvertUrlToBool\tInput_Reg(0) -> Output_Reg(0)";
@@ -846,15 +846,15 @@ void tst_v4::debuggingDumpInstructions()
     expectedPreAddress << "\t\tConvertObjectToBool\tInput_Reg(0) -> Output_Reg(0)";
     expectedPreAddress << "\t\tConvertNullToObject\tInput_Reg(0) -> Output_Reg(0)";
     expectedPreAddress << "\t\tResolveUrl\t\tInput_Reg(0) -> Output_Reg(0)";
-    expectedPreAddress << "\t\tMathSinReal\t\tInput_Reg(0) -> Output_Reg(0)";
-    expectedPreAddress << "\t\tMathCosReal\t\tInput_Reg(0) -> Output_Reg(0)";
-    expectedPreAddress << "\t\tMathAbsReal\t\tInput_Reg(0) -> Output_Reg(0)";
-    expectedPreAddress << "\t\tMathRoundReal\t\tInput_Reg(0) -> Output_Reg(0)";
-    expectedPreAddress << "\t\tMathFloorReal\t\tInput_Reg(0) -> Output_Reg(0)";
-    expectedPreAddress << "\t\tMathCeilReal\t\tInput_Reg(0) -> Output_Reg(0)";
-    expectedPreAddress << "\t\tMathPIReal\t\tInput_Reg(0) -> Output_Reg(0)";
+    expectedPreAddress << "\t\tMathSinNumber\t\tInput_Reg(0) -> Output_Reg(0)";
+    expectedPreAddress << "\t\tMathCosNumber\t\tInput_Reg(0) -> Output_Reg(0)";
+    expectedPreAddress << "\t\tMathAbsNumber\t\tInput_Reg(0) -> Output_Reg(0)";
+    expectedPreAddress << "\t\tMathRoundNumber\t\tInput_Reg(0) -> Output_Reg(0)";
+    expectedPreAddress << "\t\tMathFloorNumber\t\tInput_Reg(0) -> Output_Reg(0)";
+    expectedPreAddress << "\t\tMathCeilNumber\t\tInput_Reg(0) -> Output_Reg(0)";
+    expectedPreAddress << "\t\tMathPINumber\t\tInput_Reg(0) -> Output_Reg(0)";
     expectedPreAddress << "\t\tLoadNull\t\tConstant(null) -> Output_Reg(0)";
-    expectedPreAddress << "\t\tLoadReal\t\tConstant(0) -> Output_Reg(0)";
+    expectedPreAddress << "\t\tLoadNumber\t\tConstant(0) -> Output_Reg(0)";
     expectedPreAddress << "\t\tLoadInt\t\t\tConstant(0) -> Output_Reg(0)";
     expectedPreAddress << "\t\tLoadBool\t\tConstant(false) -> Output_Reg(0)";
     expectedPreAddress << "\t\tLoadString\t\tString_DataIndex(0) String_Length(0) -> Output_Register(0)";
@@ -863,23 +863,23 @@ void tst_v4::debuggingDumpInstructions()
     expectedPreAddress << "\t\tBitAndInt\t\tInput_Reg(0) Input_Reg(0) -> Output_Reg(0)";
     expectedPreAddress << "\t\tBitOrInt\t\tInput_Reg(0) Input_Reg(0) -> Output_Reg(0)";
     expectedPreAddress << "\t\tBitXorInt\t\tInput_Reg(0) Input_Reg(0) -> Output_Reg(0)";
-    expectedPreAddress << "\t\tAddReal\t\t\tInput_Reg(0) Input_Reg(0) -> Output_Reg(0)";
+    expectedPreAddress << "\t\tAddNumber\t\t\tInput_Reg(0) Input_Reg(0) -> Output_Reg(0)";
     expectedPreAddress << "\t\tAddString\t\tInput_Reg(0) Input_Reg(0) -> Output_Reg(0)";
-    expectedPreAddress << "\t\tSubReal\t\t\tInput_Reg(0) Input_Reg(0) -> Output_Reg(0)";
-    expectedPreAddress << "\t\tMulReal\t\t\tInput_Reg(0) Input_Reg(0) -> Output_Reg(0)";
-    expectedPreAddress << "\t\tDivReal\t\t\tInput_Reg(0) Input_Reg(0) -> Output_Reg(0)";
-    expectedPreAddress << "\t\tModReal\t\t\tInput_Reg(0) Input_Reg(0) -> Output_Reg(0)";
+    expectedPreAddress << "\t\tSubNumber\t\t\tInput_Reg(0) Input_Reg(0) -> Output_Reg(0)";
+    expectedPreAddress << "\t\tMulNumber\t\t\tInput_Reg(0) Input_Reg(0) -> Output_Reg(0)";
+    expectedPreAddress << "\t\tDivNumber\t\t\tInput_Reg(0) Input_Reg(0) -> Output_Reg(0)";
+    expectedPreAddress << "\t\tModNumber\t\t\tInput_Reg(0) Input_Reg(0) -> Output_Reg(0)";
     expectedPreAddress << "\t\tLShiftInt\t\tInput_Reg(0) Input_Reg(0) -> Output_Reg(0)";
     expectedPreAddress << "\t\tRShiftInt\t\tInput_Reg(0) Input_Reg(0) -> Output_Reg(0)";
     expectedPreAddress << "\t\tURShiftInt\t\tInput_Reg(0) Input_Reg(0) -> Output_Reg(0)";
-    expectedPreAddress << "\t\tGtReal\t\t\tInput_Reg(0) Input_Reg(0) -> Output_Reg(0)";
-    expectedPreAddress << "\t\tLtReal\t\t\tInput_Reg(0) Input_Reg(0) -> Output_Reg(0)";
-    expectedPreAddress << "\t\tGeReal\t\t\tInput_Reg(0) Input_Reg(0) -> Output_Reg(0)";
-    expectedPreAddress << "\t\tLeReal\t\t\tInput_Reg(0) Input_Reg(0) -> Output_Reg(0)";
-    expectedPreAddress << "\t\tEqualReal\t\tInput_Reg(0) Input_Reg(0) -> Output_Reg(0)";
-    expectedPreAddress << "\t\tNotEqualReal\t\tInput_Reg(0) Input_Reg(0) -> Output_Reg(0)";
-    expectedPreAddress << "\t\tStrictEqualReal\t\tInput_Reg(0) Input_Reg(0) -> Output_Reg(0)";
-    expectedPreAddress << "\t\tStrictNotEqualReal\tInput_Reg(0) Input_Reg(0) -> Output_Reg(0)";
+    expectedPreAddress << "\t\tGtNumber\t\t\tInput_Reg(0) Input_Reg(0) -> Output_Reg(0)";
+    expectedPreAddress << "\t\tLtNumber\t\t\tInput_Reg(0) Input_Reg(0) -> Output_Reg(0)";
+    expectedPreAddress << "\t\tGeNumber\t\t\tInput_Reg(0) Input_Reg(0) -> Output_Reg(0)";
+    expectedPreAddress << "\t\tLeNumber\t\t\tInput_Reg(0) Input_Reg(0) -> Output_Reg(0)";
+    expectedPreAddress << "\t\tEqualNumber\t\tInput_Reg(0) Input_Reg(0) -> Output_Reg(0)";
+    expectedPreAddress << "\t\tNotEqualNumber\t\tInput_Reg(0) Input_Reg(0) -> Output_Reg(0)";
+    expectedPreAddress << "\t\tStrictEqualNumber\t\tInput_Reg(0) Input_Reg(0) -> Output_Reg(0)";
+    expectedPreAddress << "\t\tStrictNotEqualNumber\tInput_Reg(0) Input_Reg(0) -> Output_Reg(0)";
     expectedPreAddress << "\t\tGtString\t\tInput_Reg(0) Input_Reg(0) -> Output_Reg(0)";
     expectedPreAddress << "\t\tLtString\t\tInput_Reg(0) Input_Reg(0) -> Output_Reg(0)";
     expectedPreAddress << "\t\tGeString\t\tInput_Reg(0) Input_Reg(0) -> Output_Reg(0)";
@@ -892,8 +892,8 @@ void tst_v4::debuggingDumpInstructions()
     expectedPreAddress << "\t\tNotEqualObject\t\tInput_Reg(0) Input_Reg(0) -> Output_Reg(0)";
     expectedPreAddress << "\t\tStrictEqualObject\tInput_Reg(0) Input_Reg(0) -> Output_Reg(0)";
     expectedPreAddress << "\t\tStrictNotEqualObject\tInput_Reg(0) Input_Reg(0) -> Output_Reg(0)";
-    expectedPreAddress << "\t\tMathMaxReal\tInput_Reg(0) Input_Reg(0) -> Output_Reg(0)";
-    expectedPreAddress << "\t\tMathMinReal\tInput_Reg(0) Input_Reg(0) -> Output_Reg(0)";
+    expectedPreAddress << "\t\tMathMaxNumber\tInput_Reg(0) Input_Reg(0) -> Output_Reg(0)";
+    expectedPreAddress << "\t\tMathMinNumber\tInput_Reg(0) Input_Reg(0) -> Output_Reg(0)";
     expectedPreAddress << "\t\tNewString\t\tRegister(0)";
     expectedPreAddress << "\t\tNewUrl\t\t\tRegister(0)";
     expectedPreAddress << "\t\tCleanupRegister\t\tRegister(0)";