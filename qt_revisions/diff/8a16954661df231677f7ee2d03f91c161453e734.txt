diff --git a/src/corelib/global/qglobal.cpp b/src/corelib/global/qglobal.cpp
index 7321b3b..b5d42b2 100644
--- a/src/corelib/global/qglobal.cpp
+++ b/src/corelib/global/qglobal.cpp
@@ -967,6 +967,7 @@ bool qSharedBuild()
     \value WV_2003  Windows Server 2003, Windows Server 2003 R2, Windows Home Server, Windows XP Professional x64 Edition (operating system version 5.2)
     \value WV_VISTA Windows Vista, Windows Server 2008 (operating system version 6.0)
     \value WV_WINDOWS7 Windows 7, Windows Server 2008 R2 (operating system version 6.1)
+    \value WV_WINDOWS8 Windows 8 (operating system version 6.2)
 
     Alternatively, you may use the following macros which correspond directly to the Windows operating system version number:
 
@@ -976,6 +977,7 @@ bool qSharedBuild()
     \value WV_5_2   Operating system version 5.2, corresponds to Windows Server 2003, Windows Server 2003 R2, Windows Home Server, and Windows XP Professional x64 Edition
     \value WV_6_0   Operating system version 6.0, corresponds to Windows Vista and Windows Server 2008
     \value WV_6_1   Operating system version 6.1, corresponds to Windows 7 and Windows Server 2008 R2
+    \value WV_6_2   Operating system version 6.2, corresponds to Windows 8
 
     CE-based versions:
 
@@ -1011,6 +1013,7 @@ bool qSharedBuild()
     \value MV_10_5     Mac OS X 10.5
     \value MV_10_6     Mac OS X 10.6
     \value MV_10_7     Mac OS X 10.7
+    \value MV_10_8     Mac OS X 10.8
     \value MV_Unknown  An unknown and currently unsupported platform
 
     \value MV_CHEETAH  Apple codename for MV_10_0
diff --git a/src/corelib/kernel/qabstracteventdispatcher.cpp b/src/corelib/kernel/qabstracteventdispatcher.cpp
index 40c70f7..28ae334 100644
--- a/src/corelib/kernel/qabstracteventdispatcher.cpp
+++ b/src/corelib/kernel/qabstracteventdispatcher.cpp
@@ -135,10 +135,7 @@ void QAbstractEventDispatcherPrivate::releaseTimerId(int timerId)
     values to control which events should be delivered.
 
     QAbstractEventDispatcher also allows the integration of an
-    external event loop with the Qt event loop. For example, the
-    \l{Motif Extension}
-    includes a reimplementation of QAbstractEventDispatcher that merges Qt and
-    Motif events together.
+    external event loop with the Qt event loop.
 
     \sa QEventLoop, QCoreApplication, QThread
 */
@@ -472,9 +469,12 @@ bool QAbstractEventDispatcher::filterNativeEvent(const QByteArray &eventType, vo
 }
 
 /*! \fn bool QAbstractEventDispatcher::filterEvent(void *message)
-  \deprecated
+    \deprecated
 
-  Simply calls filterNativeEvent() with an empty eventType and \a message.
+    Calls filterNativeEvent() with an empty eventType and \a message.
+    This function returns true as soon as an
+    event filter returns true, and false otherwise to indicate that
+    the processing of the event should continue.
 */
 
 /*! \fn bool QAbstractEventDispatcher::registerEventNotifier(QWinEventNotifier *notifier);
@@ -482,6 +482,8 @@ bool QAbstractEventDispatcher::filterNativeEvent(const QByteArray &eventType, vo
   This pure virtual method exists on windows only and has to be reimplemented by a Windows specific
   event dispatcher implementation. \a notifier is the QWinEventNotifier instance to be registered.
 
+  The method should return true if the registration of \a notifier was sucessful, otherwise false.
+
   QWinEventNotifier calls this method in it's constructor and there should never be a need to call this
   method directly.
 
diff --git a/src/corelib/kernel/qcoreapplication.cpp b/src/corelib/kernel/qcoreapplication.cpp
index d57ed54..eb2b256 100644
--- a/src/corelib/kernel/qcoreapplication.cpp
+++ b/src/corelib/kernel/qcoreapplication.cpp
@@ -502,7 +502,7 @@ void QCoreApplicationPrivate::initLocale()
     right after initializing QApplication or QCoreApplication to reset
     the locale that is used for number formatting to "C"-locale.
 
-    \sa QApplication, QAbstractEventDispatcher, QEventLoop,
+    \sa QGuiApplication, QAbstractEventDispatcher, QEventLoop,
     {Semaphores Example}, {Wait Conditions Example}
 */
 
@@ -1684,7 +1684,7 @@ QString QCoreApplication::translate(const char *context, const char *sourceText,
     return result;
 }
 
-/*! \fn static QString QCoreApplication::translate(const char * context, const char * key, const char * disambiguation, Encoding, int n = -1)
+/*! \fn static QString QCoreApplication::translate(const char *context, const char *key, const char *disambiguation, Encoding encoding, int n = -1)
 
   \obsolete
 */
diff --git a/src/corelib/kernel/qeventdispatcher_unix.cpp b/src/corelib/kernel/qeventdispatcher_unix.cpp
index 6eb96b8..237d8ca 100644
--- a/src/corelib/kernel/qeventdispatcher_unix.cpp
+++ b/src/corelib/kernel/qeventdispatcher_unix.cpp
@@ -662,7 +662,9 @@ void QEventDispatcherUNIX::flush()
 
 
 
-
+/*!
+  \internal
+*/
 void QCoreApplication::watchUnixSignal(int sig, bool watch)
 {
     if (sig < NSIG) {
diff --git a/src/corelib/kernel/qobject.cpp b/src/corelib/kernel/qobject.cpp
index 6ac2987..61604c6 100644
--- a/src/corelib/kernel/qobject.cpp
+++ b/src/corelib/kernel/qobject.cpp
@@ -1020,9 +1020,17 @@ void QObject::setObjectName(const QString &name)
     Returns true if the object is a widget; otherwise returns false.
 
     Calling this function is equivalent to calling
-    inherits("QWidget"), except that it is much faster.
+    \c{inherits("QWidget")}, except that it is much faster.
 */
 
+/*!
+    \fn bool QObject::isWindowType() const
+
+    Returns true if the object is a window; otherwise returns false.
+
+    Calling this function is equivalent to calling
+    \c{inherits("QWindow")}, except that it is much faster.
+*/
 
 /*!
     This virtual function receives events to an object and should
@@ -1031,8 +1039,8 @@ void QObject::setObjectName(const QString &name)
     The event() function can be reimplemented to customize the
     behavior of an object.
 
-    \sa installEventFilter(), timerEvent(), QApplication::sendEvent(),
-    QApplication::postEvent(), QWidget::event()
+    \sa installEventFilter(), timerEvent(), QCoreApplication::sendEvent(),
+    QCoreApplication::postEvent()
 */
 
 bool QObject::event(QEvent *e)
@@ -1518,22 +1526,22 @@ void QObject::killTimer(int id)
     ancestors, it is undefined which one will be returned. In that
     case, findChildren() should be used.
 
-    This example returns a child \l{QPushButton} of \c{parentWidget}
+    This example returns a child \c{QPushButton} of \c{parentWidget}
     named \c{"button1"}, even if the button isn't a direct child of
     the parent:
 
     \snippet code/src_corelib_kernel_qobject.cpp 10
 
-    This example returns a \l{QListWidget} child of \c{parentWidget}:
+    This example returns a \c{QListWidget} child of \c{parentWidget}:
 
     \snippet code/src_corelib_kernel_qobject.cpp 11
 
-    This example returns a child \l{QPushButton} of \c{parentWidget}
+    This example returns a child \c{QPushButton} of \c{parentWidget}
     (its direct parent) named \c{"button1"}:
 
     \snippet code/src_corelib_kernel_qobject.cpp 41
 
-    This example returns a \l{QListWidget} child of \c{parentWidget},
+    This example returns a \c{QListWidget} child of \c{parentWidget},
     its direct parent:
 
     \snippet code/src_corelib_kernel_qobject.cpp 42
@@ -1550,7 +1558,7 @@ void QObject::killTimer(int id)
     The search is performed recursively, unless \a options specifies the
     option FindDirectChildrenOnly.
 
-    The following example shows how to find a list of child \l{QWidget}s of
+    The following example shows how to find a list of child \c{QWidget}s of
     the specified \c{parentWidget} named \c{widgetname}:
 
     \snippet code/src_corelib_kernel_qobject.cpp 12
@@ -1733,9 +1741,8 @@ QObject *qt_qFindChild_helper(const QObject *parent, const QString &name, const
 /*!
     Makes the object a child of \a parent.
 
-    \sa QWidget::setParent()
+    \sa parent(), children()
 */
-
 void QObject::setParent(QObject *parent)
 {
     Q_D(QObject);
@@ -1960,12 +1967,13 @@ void QObject::deleteLater()
     translators while performing translations is not supported. Doing
     so will probably result in crashes or other undesirable behavior.
 
-    \sa trUtf8(), QApplication::translate(), {Internationalization with Qt}
+    \sa trUtf8(), QCoreApplication::translate(), {Internationalization with Qt}
 */
 
 /*!
     \fn QString QObject::trUtf8(const char *sourceText, const char *disambiguation, int n)
     \reentrant
+    \obsolete
 
     Returns a translated version of \a sourceText, or
     QString::fromUtf8(\a sourceText) if there is no appropriate
@@ -1983,7 +1991,7 @@ void QObject::deleteLater()
 
     \snippet code/src_corelib_kernel_qobject.cpp 20
 
-    \sa tr(), QApplication::translate(), {Internationalization with Qt}
+    \sa tr(), QCoreApplication::translate(), {Internationalization with Qt}
 */
 
 
@@ -3199,7 +3207,7 @@ bool QMetaObjectPrivate::disconnect(const QObject *sender,
 
     \snippet code/src_corelib_kernel_qobject.cpp 33
 
-    Let's assume our object has a child object of type QPushButton with
+    Let's assume our object has a child object of type \c{QPushButton} with
     the \l{QObject::objectName}{object name} \c{button1}. The slot to catch the
     button's \c{clicked()} signal would be:
 
diff --git a/src/corelib/kernel/qsocketnotifier.cpp b/src/corelib/kernel/qsocketnotifier.cpp
index 9876109..947093a 100644
--- a/src/corelib/kernel/qsocketnotifier.cpp
+++ b/src/corelib/kernel/qsocketnotifier.cpp
@@ -69,9 +69,8 @@ public:
     \ingroup io
 
     The QSocketNotifier makes it possible to integrate Qt's event
-    loop with other event loops based on file descriptors. For
-    example, the \l{CORBA Framework} uses it to process CORBA
-    events.  File descriptor action is detected in Qt's main event
+    loop with other event loops based on file descriptors. File
+    descriptor action is detected in Qt's main event
     loop (QCoreApplication::exec()).
 
     \target write notifiers
diff --git a/src/corelib/kernel/qtranslator.cpp b/src/corelib/kernel/qtranslator.cpp
index 045c792..34bc601 100644
--- a/src/corelib/kernel/qtranslator.cpp
+++ b/src/corelib/kernel/qtranslator.cpp
@@ -337,7 +337,7 @@ public:
     Translation files are created using \l{Qt Linguist}.
 
     The most common use of QTranslator is to: load a translation
-    file, install it using QApplication::installTranslator(), and use
+    file, install it using QCoreApplication::installTranslator(), and use
     it via QObject::tr(). Here's the \c main() function from the
     \l{linguist/hellotr}{Hello tr()} example:
 
@@ -353,7 +353,7 @@ public:
     \section1 Looking up Translations
 
     It is possible to look up a translation using translate() (as tr()
-    and QApplication::translate() do). The translate() function takes
+    and QCoreApplication::translate() do). The translate() function takes
     up to three parameters:
 
     \list
@@ -391,12 +391,12 @@ public:
     This mechanism makes it possible for a specific translation to be
     "selected" or given priority over the others; simply uninstall the
     translator from the application by passing it to the
-    QApplication::removeTranslator() function and reinstall it with
-    QApplication::installTranslator(). It will then be the first
+    QCoreApplication::removeTranslator() function and reinstall it with
+    QCoreApplication::installTranslator(). It will then be the first
     translation to be searched for matching strings.
 
-    \sa QApplication::installTranslator(), QApplication::removeTranslator(),
-        QObject::tr(), QApplication::translate(), {I18N Example},
+    \sa QCoreApplication::installTranslator(), QCoreApplication::removeTranslator(),
+        QObject::tr(), QCoreApplication::translate(), {I18N Example},
         {Hello tr() Example}, {Arrow Pad Example}, {Troll Print Example}
 */
 
diff --git a/src/corelib/kernel/qwineventnotifier.cpp b/src/corelib/kernel/qwineventnotifier.cpp
index d81d1ec..3ab916c 100644
--- a/src/corelib/kernel/qwineventnotifier.cpp
+++ b/src/corelib/kernel/qwineventnotifier.cpp
@@ -121,7 +121,7 @@ QWinEventNotifier::QWinEventNotifier(QObject *parent)
 
 /*!
     Constructs an event notifier with the given \a parent. It enables
-    the \a notifier, and watches for the event \a hEvent.
+    the notifier, and watches for the event \a hEvent.
 
     The notifier is enabled by default, i.e. it emits the activated() signal
     whenever the corresponding event is signalled. However, it is generally
diff --git a/src/corelib/plugin/quuid.cpp b/src/corelib/plugin/quuid.cpp
index 952e418..dc8958d 100644
--- a/src/corelib/plugin/quuid.cpp
+++ b/src/corelib/plugin/quuid.cpp
@@ -427,8 +427,8 @@ QUuid::QUuid(const QByteArray &text)
   \since 5.0
   \fn QUuid QUuid::createUuidV3(const QUuid &ns, const QByteArray &baseData);
 
-  This functions returns a new UUID with variant QUuid::DCE and version QUuid::MD5.
-  \a ns is the namespace and \a name is the name as described by RFC 4122.
+  This functions returns a new UUID with variant QUuid::DCE and version QUuid::Md5.
+  \a ns is the namespace and \a baseData is the basic data as described by RFC 4122.
 
   \sa variant(), version(), createUuidV5()
 */
@@ -437,8 +437,8 @@ QUuid::QUuid(const QByteArray &text)
   \since 5.0
   \fn QUuid QUuid::createUuidV5(const QUuid &ns, const QByteArray &baseData);
 
-  This functions returns a new UUID with variant QUuid::DCE and version QUuid::SHA1.
-  \a ns is the namespace and \a name is the name as described by RFC 4122.
+  This functions returns a new UUID with variant QUuid::DCE and version QUuid::Sha1.
+  \a ns is the namespace and \a baseData is the basic data as described by RFC 4122.
 
   \sa variant(), version(), createUuidV3()
 */
@@ -457,7 +457,7 @@ QUuid QUuid::createUuidV5(const QUuid &ns, const QByteArray &baseData)
 /*!
   Creates a QUuid object from the binary representation of the UUID, as
   specified by RFC 4122 section 4.1.2. See toRfc4122() for a further
-  explanation of the order of bytes required.
+  explanation of the order of \a bytes required.
 
   The byte array accepted is NOT a human readable format.
 
@@ -757,7 +757,9 @@ bool QUuid::isNull() const
     MAC network card address (if available) for the node sections
     \value EmbeddedPOSIX DCE Security version, with embedded POSIX UUIDs
     \value Name Name-based, by using values from a name for all sections
+    \value Md5 Alias for Name
     \value Random Random-based, by using random numbers for all sections
+    \value Sha1
 */
 
 /*!