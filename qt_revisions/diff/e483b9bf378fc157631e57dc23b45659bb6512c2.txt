diff --git a/src/corelib/json/qjsonvalue.cpp b/src/corelib/json/qjsonvalue.cpp
index 3be7089..7459524 100644
--- a/src/corelib/json/qjsonvalue.cpp
+++ b/src/corelib/json/qjsonvalue.cpp
@@ -548,6 +548,16 @@ QJsonValueRef &QJsonValueRef::operator =(const QJsonValue &val)
     return *this;
 }
 
+QJsonValueRef &QJsonValueRef::operator =(const QJsonValueRef &ref)
+{
+    if (is_object)
+        o->setValueAt(index, ref);
+    else
+        a->replace(index, ref);
+
+    return *this;
+}
+
 QJsonArray QJsonValueRef::toArray() const
 {
     return toValue().toArray();
diff --git a/src/corelib/json/qjsonvalue.h b/src/corelib/json/qjsonvalue.h
index 386bee2..9d4ad1d 100644
--- a/src/corelib/json/qjsonvalue.h
+++ b/src/corelib/json/qjsonvalue.h
@@ -147,6 +147,7 @@ public:
 
     inline operator QJsonValue() const { return toValue(); }
     QJsonValueRef &operator = (const QJsonValue &val);
+    QJsonValueRef &operator = (const QJsonValueRef &val);
 
     inline QJsonValue::Type type() const { return toValue().type(); }
     inline bool isNull() const { return type() == QJsonValue::Null; }
diff --git a/tests/auto/corelib/json/tst_qtjson.cpp b/tests/auto/corelib/json/tst_qtjson.cpp
index 73b79b1..7a11b5a 100644
--- a/tests/auto/corelib/json/tst_qtjson.cpp
+++ b/tests/auto/corelib/json/tst_qtjson.cpp
@@ -550,6 +550,11 @@ void TestQtJson::testValueRef()
     QJsonValue val = object[QLatin1String("null")];
     QCOMPARE(val.toDouble(), 100.);
     QCOMPARE(object.size(), 2);
+
+    array[1] = array[2] = object[QLatin1String("key")] = 42;
+    QCOMPARE(array[1], array[2]);
+    QCOMPARE(array[2], object[QLatin1String("key")]);
+    QCOMPARE(object.value(QLatin1String("key")), QJsonValue(42));
 }
 
 void TestQtJson::testObjectIteration()