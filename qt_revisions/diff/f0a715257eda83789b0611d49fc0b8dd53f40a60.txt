diff --git a/examples/examples.pro b/examples/examples.pro
index 4930289..32e50b2 100644
--- a/examples/examples.pro
+++ b/examples/examples.pro
@@ -4,5 +4,5 @@ SUBDIRS = cenumerator
 greaterThan(QT_MAJOR_VERSION, 4) {
     !isEmpty(QT.widgets.name):SUBDIRS += enumerator terminal blockingmaster blockingslave
 } else {
-    SUBDIRS += enumerator terminal blockingmaster blockingslave
+    SUBDIRS += enumerator terminal blockingmaster blockingslave master slave
 }
diff --git a/examples/master/dialog.cpp b/examples/master/dialog.cpp
new file mode 100644
index 0000000..766c7dd
--- /dev/null
+++ b/examples/master/dialog.cpp
@@ -0,0 +1,178 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Denis Shienkov <scapig@yandex.ru>
+** Contact: http://www.qt-project.org/
+**
+** This file is part of the QtSerialPort module of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** GNU Lesser General Public License Usage
+** This file may be used under the terms of the GNU Lesser General Public
+** License version 2.1 as published by the Free Software Foundation and
+** appearing in the file LICENSE.LGPL included in the packaging of this
+** file. Please review the following information to ensure the GNU Lesser
+** General Public License version 2.1 requirements will be met:
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** In addition, as a special exception, Nokia gives you certain additional
+** rights. These rights are described in the Nokia Qt LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU General
+** Public License version 3.0 as published by the Free Software Foundation
+** and appearing in the file LICENSE.GPL included in the packaging of this
+** file. Please review the following information to ensure the GNU General
+** Public License version 3.0 requirements will be met:
+** http://www.gnu.org/copyleft/gpl.html.
+**
+** Other Usage
+** Alternatively, this file may be used in accordance with the terms and
+** conditions contained in a signed written agreement between you and Nokia.
+**
+**
+**
+**
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#include "dialog.h"
+
+#include <QLabel>
+#include <QLineEdit>
+#include <QComboBox>
+#include <QSpinBox>
+#include <QPushButton>
+#include <QGridLayout>
+
+#include <QtAddOnSerialPort/serialportinfo.h>
+
+QT_USE_NAMESPACE_SERIALPORT
+
+Dialog::Dialog(QWidget *parent)
+    : QDialog(parent)
+    , transactionCount(0)
+    , serialPortLabel(new QLabel(tr("Serial port:")))
+    , serialPortComboBox(new QComboBox())
+    , waitResponseLabel(new QLabel(tr("Wait response, msec:")))
+    , waitResponseSpinBox(new QSpinBox())
+    , requestLabel(new QLabel(tr("Request:")))
+    , requestLineEdit(new QLineEdit(tr("Who are you?")))
+    , trafficLabel(new QLabel(tr("No traffic.")))
+    , statusLabel(new QLabel(tr("Status: Not running.")))
+    , runButton(new QPushButton(tr("Start")))
+{
+    foreach (const SerialPortInfo &info, SerialPortInfo::availablePorts())
+        serialPortComboBox->addItem(info.portName());
+
+    waitResponseSpinBox->setRange(0, 10000);
+    waitResponseSpinBox->setValue(100);
+
+    QGridLayout *mainLayout = new QGridLayout;
+    mainLayout->addWidget(serialPortLabel, 0, 0);
+    mainLayout->addWidget(serialPortComboBox, 0, 1);
+    mainLayout->addWidget(waitResponseLabel, 1, 0);
+    mainLayout->addWidget(waitResponseSpinBox, 1, 1);
+    mainLayout->addWidget(runButton, 0, 2, 2, 1);
+    mainLayout->addWidget(requestLabel, 2, 0);
+    mainLayout->addWidget(requestLineEdit, 2, 1, 1, 3);
+    mainLayout->addWidget(trafficLabel, 3, 0, 1, 4);
+    mainLayout->addWidget(statusLabel, 4, 0, 1, 5);
+    setLayout(mainLayout);
+
+    setWindowTitle(tr("Master"));
+    serialPortComboBox->setFocus();
+
+    timer.setSingleShot(true);
+
+    connect(runButton, SIGNAL(clicked()),
+            this, SLOT(sendRequest()));
+    connect(&serial, SIGNAL(readyRead()),
+            this, SLOT(readResponse()));
+    connect(&timer, SIGNAL(timeout()),
+            this, SLOT(processTimeout()));
+}
+
+void Dialog::sendRequest()
+{
+    if (serial.portName() != serialPortComboBox->currentText()) {
+        serial.close();
+        serial.setPort(serialPortComboBox->currentText());
+
+        if (!serial.open(QIODevice::ReadWrite)) {
+            processError(tr("Can't open %1, error code %2")
+                         .arg(serial.portName()).arg(serial.error()));
+            return;
+        }
+
+        if (!serial.setRate(9600)) {
+            processError(tr("Can't set rate 9600 baud to port %1, error code %2")
+                         .arg(serial.portName()).arg(serial.error()));
+            return;
+        }
+
+        if (!serial.setDataBits(SerialPort::Data8)) {
+            processError(tr("Can't set 8 data bits to port %1, error code %2")
+                         .arg(serial.portName()).arg(serial.error()));
+            return;
+        }
+
+        if (!serial.setParity(SerialPort::NoParity)) {
+            processError(tr("Can't set no patity to port %1, error code %2")
+                         .arg(serial.portName()).arg(serial.error()));
+            return;
+        }
+
+        if (!serial.setStopBits(SerialPort::OneStop)) {
+            processError(tr("Can't set 1 stop bit to port %1, error code %2")
+                         .arg(serial.portName()).arg(serial.error()));
+            return;
+        }
+
+        if (!serial.setFlowControl(SerialPort::NoFlowControl)) {
+            processError(tr("Can't set no flow control to port %1, error code %2")
+                         .arg(serial.portName()).arg(serial.error()));
+            return;
+        }
+    }
+
+    setControlsEnabled(false);
+    statusLabel->setText(tr("Status: Running, connected to port %1.")
+                         .arg(serialPortComboBox->currentText()));
+
+    serial.write(requestLineEdit->text().toLocal8Bit());
+    timer.start(waitResponseSpinBox->value());
+}
+
+void Dialog::readResponse()
+{
+    response.append(serial.readAll());
+}
+
+void Dialog::processTimeout()
+{
+    setControlsEnabled(true);
+    trafficLabel->setText(tr("Traffic, transaction #%1:"
+                             "\n\r-request: %2"
+                             "\n\r-response: %3")
+                          .arg(++transactionCount).arg(requestLineEdit->text()).arg(QString(response)));
+    response.clear();
+}
+
+void Dialog::processError(const QString &error)
+{
+    setControlsEnabled(true);
+    statusLabel->setText(tr("Status: Not running, %1.").arg(error));
+    trafficLabel->setText(tr("No traffic."));
+}
+
+void Dialog::setControlsEnabled(bool enable)
+{
+    runButton->setEnabled(enable);
+    serialPortComboBox->setEnabled(enable);
+    waitResponseSpinBox->setEnabled(enable);
+    requestLineEdit->setEnabled(enable);
+}
diff --git a/examples/master/dialog.h b/examples/master/dialog.h
new file mode 100644
index 0000000..0d6fdb0
--- /dev/null
+++ b/examples/master/dialog.h
@@ -0,0 +1,91 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Denis Shienkov <scapig@yandex.ru>
+** Contact: http://www.qt-project.org/
+**
+** This file is part of the QtSerialPort module of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** GNU Lesser General Public License Usage
+** This file may be used under the terms of the GNU Lesser General Public
+** License version 2.1 as published by the Free Software Foundation and
+** appearing in the file LICENSE.LGPL included in the packaging of this
+** file. Please review the following information to ensure the GNU Lesser
+** General Public License version 2.1 requirements will be met:
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** In addition, as a special exception, Nokia gives you certain additional
+** rights. These rights are described in the Nokia Qt LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU General
+** Public License version 3.0 as published by the Free Software Foundation
+** and appearing in the file LICENSE.GPL included in the packaging of this
+** file. Please review the following information to ensure the GNU General
+** Public License version 3.0 requirements will be met:
+** http://www.gnu.org/copyleft/gpl.html.
+**
+** Other Usage
+** Alternatively, this file may be used in accordance with the terms and
+** conditions contained in a signed written agreement between you and Nokia.
+**
+**
+**
+**
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#ifndef DIALOG_H
+#define DIALOG_H
+
+#include <QDialog>
+#include <QTimer>
+
+#include <QtAddOnSerialPort/serialport.h>
+
+QT_USE_NAMESPACE_SERIALPORT
+
+class QLabel;
+class QLineEdit;
+class QSpinBox;
+class QPushButton;
+class QComboBox;
+
+class Dialog : public QDialog
+{
+    Q_OBJECT
+
+public:
+    Dialog(QWidget *parent = 0);
+
+private slots:
+    void sendRequest();
+    void readResponse();
+    void processTimeout();
+
+private:
+    void setControlsEnabled(bool enable);
+    void processError(const QString &error);
+
+private:
+    int transactionCount;
+    QLabel *serialPortLabel;
+    QComboBox *serialPortComboBox;
+    QLabel *waitResponseLabel;
+    QSpinBox *waitResponseSpinBox;
+    QLabel *requestLabel;
+    QLineEdit *requestLineEdit;
+    QLabel *trafficLabel;
+    QLabel *statusLabel;
+    QPushButton *runButton;
+
+    SerialPort serial;
+    QByteArray response;
+    QTimer timer;
+};
+
+#endif // DIALOG_H
diff --git a/examples/master/main.cpp b/examples/master/main.cpp
new file mode 100644
index 0000000..695d85c
--- /dev/null
+++ b/examples/master/main.cpp
@@ -0,0 +1,52 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Denis Shienkov <scapig@yandex.ru>
+** Contact: http://www.qt-project.org/
+**
+** This file is part of the QtSerialPort module of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** GNU Lesser General Public License Usage
+** This file may be used under the terms of the GNU Lesser General Public
+** License version 2.1 as published by the Free Software Foundation and
+** appearing in the file LICENSE.LGPL included in the packaging of this
+** file. Please review the following information to ensure the GNU Lesser
+** General Public License version 2.1 requirements will be met:
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** In addition, as a special exception, Nokia gives you certain additional
+** rights. These rights are described in the Nokia Qt LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU General
+** Public License version 3.0 as published by the Free Software Foundation
+** and appearing in the file LICENSE.GPL included in the packaging of this
+** file. Please review the following information to ensure the GNU General
+** Public License version 3.0 requirements will be met:
+** http://www.gnu.org/copyleft/gpl.html.
+**
+** Other Usage
+** Alternatively, this file may be used in accordance with the terms and
+** conditions contained in a signed written agreement between you and Nokia.
+**
+**
+**
+**
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#include <QApplication>
+
+#include "dialog.h"
+
+int main(int argc, char *argv[])
+{
+    QApplication app(argc, argv);
+    Dialog dialog;
+    dialog.show();
+    return app.exec();
+}
diff --git a/examples/master/master.pro b/examples/master/master.pro
new file mode 100644
index 0000000..810c942
--- /dev/null
+++ b/examples/master/master.pro
@@ -0,0 +1,15 @@
+greaterThan(QT_MAJOR_VERSION, 4) {
+    QT       += widgets serialport
+} else {
+    include($$SERIALPORT_PROJECT_ROOT/src/serialport/qt4support/serialport.prf)
+}
+
+TARGET = master
+TEMPLATE = app
+
+HEADERS += \
+    dialog.h
+
+SOURCES += \
+    main.cpp \
+    dialog.cpp
diff --git a/examples/slave/dialog.cpp b/examples/slave/dialog.cpp
new file mode 100644
index 0000000..3e69ca4
--- /dev/null
+++ b/examples/slave/dialog.cpp
@@ -0,0 +1,182 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Denis Shienkov <scapig@yandex.ru>
+** Contact: http://www.qt-project.org/
+**
+** This file is part of the QtSerialPort module of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** GNU Lesser General Public License Usage
+** This file may be used under the terms of the GNU Lesser General Public
+** License version 2.1 as published by the Free Software Foundation and
+** appearing in the file LICENSE.LGPL included in the packaging of this
+** file. Please review the following information to ensure the GNU Lesser
+** General Public License version 2.1 requirements will be met:
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** In addition, as a special exception, Nokia gives you certain additional
+** rights. These rights are described in the Nokia Qt LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU General
+** Public License version 3.0 as published by the Free Software Foundation
+** and appearing in the file LICENSE.GPL included in the packaging of this
+** file. Please review the following information to ensure the GNU General
+** Public License version 3.0 requirements will be met:
+** http://www.gnu.org/copyleft/gpl.html.
+**
+** Other Usage
+** Alternatively, this file may be used in accordance with the terms and
+** conditions contained in a signed written agreement between you and Nokia.
+**
+**
+**
+**
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#include "dialog.h"
+
+#include <QLabel>
+#include <QLineEdit>
+#include <QComboBox>
+#include <QSpinBox>
+#include <QPushButton>
+#include <QGridLayout>
+
+#include <QtAddOnSerialPort/serialportinfo.h>
+
+QT_USE_NAMESPACE_SERIALPORT
+
+Dialog::Dialog(QWidget *parent)
+    : QDialog(parent)
+    , transactionCount(0)
+    , serialPortLabel(new QLabel(tr("Serial port:")))
+    , serialPortComboBox(new QComboBox())
+    , waitRequestLabel(new QLabel(tr("Wait request, msec:")))
+    , waitRequestSpinBox(new QSpinBox())
+    , responseLabel(new QLabel(tr("Response:")))
+    , responseLineEdit(new QLineEdit(tr("Hello, I'm Slave.")))
+    , trafficLabel(new QLabel(tr("No traffic.")))
+    , statusLabel(new QLabel(tr("Status: Not running.")))
+    , runButton(new QPushButton(tr("Start")))
+{
+    waitRequestSpinBox->setRange(0, 10000);
+    waitRequestSpinBox->setValue(20);
+
+    foreach (const SerialPortInfo &info, SerialPortInfo::availablePorts())
+        serialPortComboBox->addItem(info.portName());
+
+    QGridLayout *mainLayout = new QGridLayout;
+    mainLayout->addWidget(serialPortLabel, 0, 0);
+    mainLayout->addWidget(serialPortComboBox, 0, 1);
+    mainLayout->addWidget(waitRequestLabel, 1, 0);
+    mainLayout->addWidget(waitRequestSpinBox, 1, 1);
+    mainLayout->addWidget(runButton, 0, 2, 2, 1);
+    mainLayout->addWidget(responseLabel, 2, 0);
+    mainLayout->addWidget(responseLineEdit, 2, 1, 1, 3);
+    mainLayout->addWidget(trafficLabel, 3, 0, 1, 4);
+    mainLayout->addWidget(statusLabel, 4, 0, 1, 5);
+    setLayout(mainLayout);
+
+    setWindowTitle(tr("Slave"));
+    serialPortComboBox->setFocus();
+
+    timer.setSingleShot(true);
+
+    connect(runButton, SIGNAL(clicked()),
+            this, SLOT(startSlave()));
+    connect(&serial, SIGNAL(readyRead()),
+            this, SLOT(readRequest()));
+    connect(&timer, SIGNAL(timeout()),
+            this, SLOT(processTimeout()));
+
+    connect(serialPortComboBox, SIGNAL(currentIndexChanged(QString)),
+            this, SLOT(activateRunButton()));
+    connect(waitRequestSpinBox, SIGNAL(valueChanged(int)),
+            this, SLOT(activateRunButton()));
+    connect(responseLineEdit, SIGNAL(textChanged(QString)),
+            this, SLOT(activateRunButton()));
+}
+
+void Dialog::startSlave()
+{
+    if (serial.portName() != serialPortComboBox->currentText()) {
+        serial.close();
+        serial.setPort(serialPortComboBox->currentText());
+
+        if (!serial.open(QIODevice::ReadWrite)) {
+            processError(tr("Can't open %1, error code %2")
+                         .arg(serial.portName()).arg(serial.error()));
+            return;
+        }
+
+        if (!serial.setRate(9600)) {
+            processError(tr("Can't set rate 9600 baud to port %1, error code %2")
+                         .arg(serial.portName()).arg(serial.error()));
+            return;
+        }
+
+        if (!serial.setDataBits(SerialPort::Data8)) {
+            processError(tr("Can't set 8 data bits to port %1, error code %2")
+                         .arg(serial.portName()).arg(serial.error()));
+            return;
+        }
+
+        if (!serial.setParity(SerialPort::NoParity)) {
+            processError(tr("Can't set no patity to port %1, error code %2")
+                         .arg(serial.portName()).arg(serial.error()));
+            return;
+        }
+
+        if (!serial.setStopBits(SerialPort::OneStop)) {
+            processError(tr("Can't set 1 stop bit to port %1, error code %2")
+                         .arg(serial.portName()).arg(serial.error()));
+            return;
+        }
+
+        if (!serial.setFlowControl(SerialPort::NoFlowControl)) {
+            processError(tr("Can't set no flow control to port %1, error code %2")
+                         .arg(serial.portName()).arg(serial.error()));
+            return;
+        }
+    }
+
+    runButton->setEnabled(false);
+    statusLabel->setText(tr("Status: Running, connected to port %1.")
+                         .arg(serialPortComboBox->currentText()));
+}
+
+void Dialog::readRequest()
+{
+    if (!timer.isActive())
+        timer.start(waitRequestSpinBox->value());
+    request.append(serial.readAll());
+}
+
+void Dialog::processTimeout()
+{
+    serial.write(responseLineEdit->text().toLocal8Bit());
+
+    trafficLabel->setText(tr("Traffic, transaction #%1:"
+                             "\n\r-request: %2"
+                             "\n\r-response: %3")
+                          .arg(++transactionCount).arg(QString(request)).arg(responseLineEdit->text()));
+    request.clear();
+}
+
+void Dialog::activateRunButton()
+{
+    runButton->setEnabled(true);
+}
+
+void Dialog::processError(const QString &s)
+{
+    activateRunButton();
+    statusLabel->setText(tr("Status: Not running, %1.").arg(s));
+    trafficLabel->setText(tr("No traffic."));
+}
diff --git a/examples/slave/dialog.h b/examples/slave/dialog.h
new file mode 100644
index 0000000..a8d2e26
--- /dev/null
+++ b/examples/slave/dialog.h
@@ -0,0 +1,91 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Denis Shienkov <scapig@yandex.ru>
+** Contact: http://www.qt-project.org/
+**
+** This file is part of the QtSerialPort module of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** GNU Lesser General Public License Usage
+** This file may be used under the terms of the GNU Lesser General Public
+** License version 2.1 as published by the Free Software Foundation and
+** appearing in the file LICENSE.LGPL included in the packaging of this
+** file. Please review the following information to ensure the GNU Lesser
+** General Public License version 2.1 requirements will be met:
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** In addition, as a special exception, Nokia gives you certain additional
+** rights. These rights are described in the Nokia Qt LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU General
+** Public License version 3.0 as published by the Free Software Foundation
+** and appearing in the file LICENSE.GPL included in the packaging of this
+** file. Please review the following information to ensure the GNU General
+** Public License version 3.0 requirements will be met:
+** http://www.gnu.org/copyleft/gpl.html.
+**
+** Other Usage
+** Alternatively, this file may be used in accordance with the terms and
+** conditions contained in a signed written agreement between you and Nokia.
+**
+**
+**
+**
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#ifndef DIALOG_H
+#define DIALOG_H
+
+#include <QDialog>
+#include <QTimer>
+
+#include <QtAddOnSerialPort/serialport.h>
+
+QT_USE_NAMESPACE_SERIALPORT
+
+class QLabel;
+class QLineEdit;
+class QComboBox;
+class QSpinBox;
+class QPushButton;
+
+class Dialog : public QDialog
+{
+    Q_OBJECT
+
+public:
+    Dialog(QWidget *parent = 0);
+
+private slots:
+    void startSlave();
+    void readRequest();
+    void processTimeout();
+    void activateRunButton();
+
+private:
+    void processError(const QString &s);
+
+private:
+    int transactionCount;
+    QLabel *serialPortLabel;
+    QComboBox *serialPortComboBox;
+    QLabel *waitRequestLabel;
+    QSpinBox *waitRequestSpinBox;
+    QLabel *responseLabel;
+    QLineEdit *responseLineEdit;
+    QLabel *trafficLabel;
+    QLabel *statusLabel;
+    QPushButton *runButton;
+
+    SerialPort serial;
+    QByteArray request;
+    QTimer timer;
+};
+
+#endif // DIALOG_H
diff --git a/examples/slave/main.cpp b/examples/slave/main.cpp
new file mode 100644
index 0000000..695d85c
--- /dev/null
+++ b/examples/slave/main.cpp
@@ -0,0 +1,52 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Denis Shienkov <scapig@yandex.ru>
+** Contact: http://www.qt-project.org/
+**
+** This file is part of the QtSerialPort module of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** GNU Lesser General Public License Usage
+** This file may be used under the terms of the GNU Lesser General Public
+** License version 2.1 as published by the Free Software Foundation and
+** appearing in the file LICENSE.LGPL included in the packaging of this
+** file. Please review the following information to ensure the GNU Lesser
+** General Public License version 2.1 requirements will be met:
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** In addition, as a special exception, Nokia gives you certain additional
+** rights. These rights are described in the Nokia Qt LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU General
+** Public License version 3.0 as published by the Free Software Foundation
+** and appearing in the file LICENSE.GPL included in the packaging of this
+** file. Please review the following information to ensure the GNU General
+** Public License version 3.0 requirements will be met:
+** http://www.gnu.org/copyleft/gpl.html.
+**
+** Other Usage
+** Alternatively, this file may be used in accordance with the terms and
+** conditions contained in a signed written agreement between you and Nokia.
+**
+**
+**
+**
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#include <QApplication>
+
+#include "dialog.h"
+
+int main(int argc, char *argv[])
+{
+    QApplication app(argc, argv);
+    Dialog dialog;
+    dialog.show();
+    return app.exec();
+}
diff --git a/examples/slave/slave.pro b/examples/slave/slave.pro
new file mode 100644
index 0000000..b990275
--- /dev/null
+++ b/examples/slave/slave.pro
@@ -0,0 +1,15 @@
+greaterThan(QT_MAJOR_VERSION, 4) {
+    QT       += widgets serialport
+} else {
+    include($$SERIALPORT_PROJECT_ROOT/src/serialport/qt4support/serialport.prf)
+}
+
+TARGET = slave
+TEMPLATE = app
+
+HEADERS += \
+    dialog.h
+
+SOURCES += \
+    main.cpp \
+    dialog.cpp
diff --git a/examples/slave/slavethread.cpp b/examples/slave/slavethread.cpp
new file mode 100644
index 0000000..3ff370e
--- /dev/null
+++ b/examples/slave/slavethread.cpp
@@ -0,0 +1,167 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Denis Shienkov <scapig@yandex.ru>
+** Contact: http://www.qt-project.org/
+**
+** This file is part of the QtSerialPort module of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** GNU Lesser General Public License Usage
+** This file may be used under the terms of the GNU Lesser General Public
+** License version 2.1 as published by the Free Software Foundation and
+** appearing in the file LICENSE.LGPL included in the packaging of this
+** file. Please review the following information to ensure the GNU Lesser
+** General Public License version 2.1 requirements will be met:
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** In addition, as a special exception, Nokia gives you certain additional
+** rights. These rights are described in the Nokia Qt LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU General
+** Public License version 3.0 as published by the Free Software Foundation
+** and appearing in the file LICENSE.GPL included in the packaging of this
+** file. Please review the following information to ensure the GNU General
+** Public License version 3.0 requirements will be met:
+** http://www.gnu.org/copyleft/gpl.html.
+**
+** Other Usage
+** Alternatively, this file may be used in accordance with the terms and
+** conditions contained in a signed written agreement between you and Nokia.
+**
+**
+**
+**
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#include "slavethread.h"
+
+#include <QtAddOnSerialPort/serialport.h>
+
+#include <QTime>
+
+QT_USE_NAMESPACE_SERIALPORT
+
+SlaveThread::SlaveThread(QObject *parent)
+    : QThread(parent), waitTimeout(0), quit(false)
+{
+}
+
+SlaveThread::~SlaveThread()
+{
+    mutex.lock();
+    quit = true;
+    mutex.unlock();
+    wait();
+}
+
+void SlaveThread::startSlave(const QString &portName, int waitTimeout, const QString &response)
+{
+    QMutexLocker locker(&mutex);
+    this->portName = portName;
+    this->waitTimeout = waitTimeout;
+    this->response = response;
+
+    if (!isRunning())
+        start();
+}
+
+void SlaveThread::run()
+{
+    bool currentPortNameChanged = false;
+
+    mutex.lock();
+    QString currentPortName;
+    if (currentPortName != portName) {
+        currentPortName = portName;
+        currentPortNameChanged = true;
+    }
+
+    int currentWaitTimeout = waitTimeout;
+    QString currentRespone = response;
+    mutex.unlock();
+
+    SerialPort serial;
+
+    while (!quit) {
+
+        if (currentPortNameChanged) {
+            serial.close();
+            serial.setPort(currentPortName);
+
+            if (!serial.open(QIODevice::ReadWrite)) {
+                emit error(tr("Can't open %1, error code %2")
+                           .arg(portName).arg(serial.error()));
+                return;
+            }
+
+            if (!serial.setRate(9600)) {
+                emit error(tr("Can't set rate 9600 baud to port %1, error code %2")
+                           .arg(portName).arg(serial.error()));
+                return;
+            }
+
+            if (!serial.setDataBits(SerialPort::Data8)) {
+                emit error(tr("Can't set 8 data bits to port %1, error code %2")
+                           .arg(portName).arg(serial.error()));
+                return;
+            }
+
+            if (!serial.setParity(SerialPort::NoParity)) {
+                emit error(tr("Can't set no patity to port %1, error code %2")
+                           .arg(portName).arg(serial.error()));
+                return;
+            }
+
+            if (!serial.setStopBits(SerialPort::OneStop)) {
+                emit error(tr("Can't set 1 stop bit to port %1, error code %2")
+                           .arg(portName).arg(serial.error()));
+                return;
+            }
+
+            if (!serial.setFlowControl(SerialPort::NoFlowControl)) {
+                emit error(tr("Can't set no flow control to port %1, error code %2")
+                           .arg(portName).arg(serial.error()));
+                return;
+            }
+        }
+
+        if (serial.waitForReadyRead(currentWaitTimeout)) {
+
+            // read all request
+            QByteArray requestData = serial.readAll();
+            while (serial.waitForReadyRead(10))
+                requestData += serial.readAll();
+
+            // write all response
+            QByteArray responseData = currentRespone.toLocal8Bit();
+            serial.write(responseData);
+            if (serial.waitForBytesWritten(waitTimeout)) {
+                QString request(requestData);
+                emit this->request(request);
+            } else {
+                emit timeout(tr("Wait write response timeout %1")
+                             .arg(QTime::currentTime().toString()));
+            }
+        } else {
+            emit timeout(tr("Wait read request timeout %1")
+                         .arg(QTime::currentTime().toString()));
+        }
+
+        mutex.lock();
+        if (currentPortName != portName) {
+            currentPortName = portName;
+            currentPortNameChanged = true;
+        } else {
+            currentPortNameChanged = false;
+        }
+        currentWaitTimeout = waitTimeout;
+        currentRespone = response;
+        mutex.unlock();
+    }
+}
diff --git a/examples/slave/slavethread.h b/examples/slave/slavethread.h
new file mode 100644
index 0000000..a29cb3a
--- /dev/null
+++ b/examples/slave/slavethread.h
@@ -0,0 +1,73 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Denis Shienkov <scapig@yandex.ru>
+** Contact: http://www.qt-project.org/
+**
+** This file is part of the QtSerialPort module of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** GNU Lesser General Public License Usage
+** This file may be used under the terms of the GNU Lesser General Public
+** License version 2.1 as published by the Free Software Foundation and
+** appearing in the file LICENSE.LGPL included in the packaging of this
+** file. Please review the following information to ensure the GNU Lesser
+** General Public License version 2.1 requirements will be met:
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** In addition, as a special exception, Nokia gives you certain additional
+** rights. These rights are described in the Nokia Qt LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU General
+** Public License version 3.0 as published by the Free Software Foundation
+** and appearing in the file LICENSE.GPL included in the packaging of this
+** file. Please review the following information to ensure the GNU General
+** Public License version 3.0 requirements will be met:
+** http://www.gnu.org/copyleft/gpl.html.
+**
+** Other Usage
+** Alternatively, this file may be used in accordance with the terms and
+** conditions contained in a signed written agreement between you and Nokia.
+**
+**
+**
+**
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#ifndef SLAVETHREAD_H
+#define SLAVETHREAD_H
+
+#include <QThread>
+#include <QMutex>
+#include <QWaitCondition>
+
+class SlaveThread : public QThread
+{
+    Q_OBJECT
+
+public:
+    SlaveThread(QObject *parent = 0);
+    ~SlaveThread();
+
+    void startSlave(const QString &portName, int waitTimeout, const QString &response);
+    void run();
+
+signals:
+    void request(const QString &s);
+    void error(const QString &s);
+    void timeout(const QString &s);
+
+private:
+    QString portName;
+    QString response;
+    int waitTimeout;
+    QMutex mutex;
+    bool quit;
+};
+
+#endif // SLAVETHREAD_H