diff --git a/src/tools/qdoc/htmlgenerator.cpp b/src/tools/qdoc/htmlgenerator.cpp
index 0662303..c31a736 100644
--- a/src/tools/qdoc/htmlgenerator.cpp
+++ b/src/tools/qdoc/htmlgenerator.cpp
@@ -1331,6 +1331,8 @@ void HtmlGenerator::generateClassLikeNode(const InnerNode *inner,
                         names << prop->setters().first()->name();
                     if (!prop->resetters().isEmpty())
                         names << prop->resetters().first()->name();
+                    if (!prop->notifiers().isEmpty())
+                        names << prop->notifiers().first()->name();
                 }
                 else if ((*m)->type() == Node::Enum) {
                     const EnumNode *enume = reinterpret_cast<const EnumNode*>(*m);
diff --git a/src/tools/qdoc/node.h b/src/tools/qdoc/node.h
index 8c6eb67..5b1eb21 100644
--- a/src/tools/qdoc/node.h
+++ b/src/tools/qdoc/node.h
@@ -907,6 +907,7 @@ inline void PropertyNode::addFunction(FunctionNode* function, FunctionRole role)
 inline void PropertyNode::addSignal(FunctionNode* function, FunctionRole role)
 {
     funcs[(int)role].append(function);
+    function->setAssociatedProperty(this);
 }
 
 inline NodeList PropertyNode::functions() const
diff --git a/src/tools/qdoc/tree.cpp b/src/tools/qdoc/tree.cpp
index 4b2a8ba..450f2d7 100644
--- a/src/tools/qdoc/tree.cpp
+++ b/src/tools/qdoc/tree.cpp
@@ -1739,7 +1739,7 @@ bool Tree::generateIndexSection(QXmlStreamWriter& writer,
                 const FunctionNode* functionNode = static_cast<const FunctionNode*>(fnNode);
                 writer.writeStartElement("setter");
                 writer.writeAttribute("name", functionNode->name());
-                writer.writeEndElement(); // getter
+                writer.writeEndElement(); // setter
             }
         }
         foreach (const Node* fnNode, propertyNode->resetters()) {
@@ -1747,7 +1747,15 @@ bool Tree::generateIndexSection(QXmlStreamWriter& writer,
                 const FunctionNode* functionNode = static_cast<const FunctionNode*>(fnNode);
                 writer.writeStartElement("resetter");
                 writer.writeAttribute("name", functionNode->name());
-                writer.writeEndElement(); // getter
+                writer.writeEndElement(); // resetter
+            }
+        }
+        foreach (const Node* fnNode, propertyNode->notifiers()) {
+            if (fnNode) {
+                const FunctionNode* functionNode = static_cast<const FunctionNode*>(fnNode);
+                writer.writeStartElement("notifier");
+                writer.writeAttribute("name", functionNode->name());
+                writer.writeEndElement(); // notifier
             }
         }
     }