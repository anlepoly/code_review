diff --git a/tests/auto/integration/qaudiodecoderbackend/qaudiodecoderbackend.pro b/tests/auto/integration/qaudiodecoderbackend/qaudiodecoderbackend.pro
index 7d6e33a..8c88578 100644
--- a/tests/auto/integration/qaudiodecoderbackend/qaudiodecoderbackend.pro
+++ b/tests/auto/integration/qaudiodecoderbackend/qaudiodecoderbackend.pro
@@ -4,7 +4,7 @@ QT += multimedia multimedia-private testlib
 CONFIG += no_private_qt_headers_warning
 
 # This is more of a system test
-# CONFIG += testcase
+CONFIG += testcase insignificant_test
 TESTDATA += testdata/*
 
 INCLUDEPATH += \
diff --git a/tests/auto/integration/qaudiodeviceinfo/qaudiodeviceinfo.pro b/tests/auto/integration/qaudiodeviceinfo/qaudiodeviceinfo.pro
index ffe9829..7138206 100644
--- a/tests/auto/integration/qaudiodeviceinfo/qaudiodeviceinfo.pro
+++ b/tests/auto/integration/qaudiodeviceinfo/qaudiodeviceinfo.pro
@@ -4,7 +4,7 @@ QT += core multimedia-private testlib
 CONFIG += no_private_qt_headers_warning
 
 # This is more of a system test
-# CONFIG += testcase
+CONFIG += testcase insignificant_test
 
 SOURCES += tst_qaudiodeviceinfo.cpp
 
diff --git a/tests/auto/integration/qaudioinput/qaudioinput.pro b/tests/auto/integration/qaudioinput/qaudioinput.pro
index 3283971..d8568a9 100644
--- a/tests/auto/integration/qaudioinput/qaudioinput.pro
+++ b/tests/auto/integration/qaudioinput/qaudioinput.pro
@@ -4,7 +4,7 @@ QT += core multimedia-private testlib
 CONFIG += no_private_qt_headers_warning
 
 # This is more of a system test
-# CONFIG += testcase
+CONFIG += testcase insignificant_test
 
 HEADERS += wavheader.h
 SOURCES += wavheader.cpp tst_qaudioinput.cpp
diff --git a/tests/auto/integration/qaudioinput/tst_qaudioinput.cpp b/tests/auto/integration/qaudioinput/tst_qaudioinput.cpp
index c1ca6cd..c716d57 100755
--- a/tests/auto/integration/qaudioinput/tst_qaudioinput.cpp
+++ b/tests/auto/integration/qaudioinput/tst_qaudioinput.cpp
@@ -115,6 +115,8 @@ private:
 
     QScopedPointer<QByteArray> m_byteArray;
     QScopedPointer<QBuffer> m_buffer;
+
+    bool m_inCISystem;
 };
 
 QString tst_QAudioInput::formatToFileName(const QAudioFormat &format)
@@ -205,6 +207,7 @@ void tst_QAudioInput::initTestCase()
         const QString fileName = temporaryAudioPath + formatToFileName(format) + QStringLiteral(".wav");
         audioFiles.append(FilePtr(new QFile(fileName)));
     }
+    qgetenv("QT_TEST_CI").toInt(&m_inCISystem,10);
 }
 
 void tst_QAudioInput::format()
@@ -475,6 +478,10 @@ void tst_QAudioInput::pull()
 
         WavHeader::writeDataLength(*audioFile, audioFile->pos() - WavHeader::headerLength());
         audioFile->close();
+
+        // Only run first format in CI system to reduce test times
+        if (m_inCISystem)
+            break;
     }
 }
 
@@ -569,6 +576,10 @@ void tst_QAudioInput::pullSuspendResume()
 
         WavHeader::writeDataLength(*audioFiles.at(i),audioFiles.at(i)->pos()-WavHeader::headerLength());
         audioFile->close();
+
+        // Only run first format in CI system to reduce test times
+        if (m_inCISystem)
+            break;
     }
 }
 
@@ -648,6 +659,10 @@ void tst_QAudioInput::push()
 
         WavHeader::writeDataLength(*audioFiles.at(i),audioFiles.at(i)->pos()-WavHeader::headerLength());
         audioFiles.at(i)->close();
+
+        // Only run first format in CI system to reduce test times
+        if (m_inCISystem)
+            break;
     }
 }
 
@@ -768,6 +783,10 @@ void tst_QAudioInput::pushSuspendResume()
 
         WavHeader::writeDataLength(*audioFiles.at(i),audioFiles.at(i)->pos()-WavHeader::headerLength());
         audioFiles.at(i)->close();
+
+        // Only run first format in CI system to reduce test times
+        if (m_inCISystem)
+            break;
     }
 }
 
@@ -839,6 +858,9 @@ void tst_QAudioInput::reset()
             QVERIFY2((audioInput.state() == QAudio::StoppedState), "didn't transitions to StoppedState after reset()");
             QVERIFY2((audioInput.bytesReady() == 0), "buffer not cleared after reset()");
         }
+        // Only run first format in CI system to reduce test times
+        if (m_inCISystem)
+            break;
     }
 }
 
diff --git a/tests/auto/integration/qaudiooutput/qaudiooutput.pro b/tests/auto/integration/qaudiooutput/qaudiooutput.pro
index d6a618e..a3f52b3 100644
--- a/tests/auto/integration/qaudiooutput/qaudiooutput.pro
+++ b/tests/auto/integration/qaudiooutput/qaudiooutput.pro
@@ -4,7 +4,7 @@ QT += core multimedia-private testlib
 CONFIG += no_private_qt_headers_warning
 
 # This is more of a system test
-# CONFIG += testcase
+CONFIG += testcase insignificant_test
 
 HEADERS += wavheader.h
 SOURCES += wavheader.cpp tst_qaudiooutput.cpp
diff --git a/tests/auto/integration/qaudiooutput/tst_qaudiooutput.cpp b/tests/auto/integration/qaudiooutput/tst_qaudiooutput.cpp
index 66056db..aa226c2 100755
--- a/tests/auto/integration/qaudiooutput/tst_qaudiooutput.cpp
+++ b/tests/auto/integration/qaudiooutput/tst_qaudiooutput.cpp
@@ -113,6 +113,8 @@ private:
 
     QScopedPointer<QByteArray> m_byteArray;
     QScopedPointer<QBuffer> m_buffer;
+
+    bool m_inCISystem;
 };
 
 QString tst_QAudioOutput::formatToFileName(const QAudioFormat &format)
@@ -258,6 +260,7 @@ void tst_QAudioOutput::initTestCase()
         file->close();
         audioFiles.append(file);
     }
+    qgetenv("QT_TEST_CI").toInt(&m_inCISystem,10);
 }
 
 void tst_QAudioOutput::format()
@@ -532,6 +535,10 @@ void tst_QAudioOutput::pull()
                 QString("too many notify() signals emitted (%1)").arg(notifySignal.count()).toLocal8Bit().constData());
 
         audioFile->close();
+
+        // Only run first format in CI system to reduce test times
+        if (m_inCISystem)
+            break;
     }
 }
 
@@ -622,6 +629,10 @@ void tst_QAudioOutput::pullSuspendResume()
         QVERIFY2((audioOutput.elapsedUSecs() == (qint64)0), "elapsedUSecs() not equal to zero in StoppedState");
 
         audioFile->close();
+
+        // Only run first format in CI system to reduce test times
+        if (m_inCISystem)
+            break;
     }
 }
 
@@ -710,6 +721,10 @@ void tst_QAudioOutput::push()
                 QString("too many notify() signals emitted (%1)").arg(notifySignal.count()).toLocal8Bit().constData());
 
         audioFile->close();
+
+        // Only run first format in CI system to reduce test times
+        if (m_inCISystem)
+            break;
     }
 }
 
@@ -838,6 +853,10 @@ void tst_QAudioOutput::pushSuspendResume()
         QVERIFY2((audioOutput.elapsedUSecs() == (qint64)0), "elapsedUSecs() not equal to zero in StoppedState");
 
         audioFile->close();
+
+        // Only run first format in CI system to reduce test times
+        if (m_inCISystem)
+            break;
     }
 }
 
@@ -955,6 +974,10 @@ void tst_QAudioOutput::pushUnderrun()
         QVERIFY2((audioOutput.elapsedUSecs() == (qint64)0), "elapsedUSecs() not equal to zero in StoppedState");
 
         audioFile->close();
+
+        // Only run first format in CI system to reduce test times
+        if (m_inCISystem)
+            break;
     }
 }
 
diff --git a/tests/auto/integration/qmediaplayerbackend/qmediaplayerbackend.pro b/tests/auto/integration/qmediaplayerbackend/qmediaplayerbackend.pro
index 6b56a9b..7f1a44e 100644
--- a/tests/auto/integration/qmediaplayerbackend/qmediaplayerbackend.pro
+++ b/tests/auto/integration/qmediaplayerbackend/qmediaplayerbackend.pro
@@ -4,7 +4,7 @@ QT += multimedia-private testlib
 CONFIG += no_private_qt_headers_warning
 
 # This is more of a system test
-# CONFIG += testcase
+CONFIG += testcase insignificant_test
 
 
 SOURCES += \
diff --git a/tests/auto/integration/qsound/qsound.pro b/tests/auto/integration/qsound/qsound.pro
index 049bd4b..daa1ae3 100644
--- a/tests/auto/integration/qsound/qsound.pro
+++ b/tests/auto/integration/qsound/qsound.pro
@@ -4,7 +4,7 @@ QT += core multimedia-private testlib
 CONFIG += no_private_qt_headers_warning
 
 # This is more of a system test
-# CONFIG += testcase
+CONFIG += testcase insignificant_test
 
 SOURCES += tst_qsound.cpp
 
diff --git a/tests/auto/integration/qsoundeffect/qsoundeffect.pro b/tests/auto/integration/qsoundeffect/qsoundeffect.pro
index 8506c3f..95b6c5a 100644
--- a/tests/auto/integration/qsoundeffect/qsoundeffect.pro
+++ b/tests/auto/integration/qsoundeffect/qsoundeffect.pro
@@ -4,7 +4,7 @@ QT += core multimedia-private testlib
 CONFIG += no_private_qt_headers_warning
 
 # This is more of a system test
-# CONFIG += testcase
+CONFIG += testcase insignificant_test
 
 SOURCES += tst_qsoundeffect.cpp