diff --git a/src/tools/qdoc/ditaxmlgenerator.cpp b/src/tools/qdoc/ditaxmlgenerator.cpp
index 74dfe14..38c3d1b 100644
--- a/src/tools/qdoc/ditaxmlgenerator.cpp
+++ b/src/tools/qdoc/ditaxmlgenerator.cpp
@@ -5987,98 +5987,6 @@ void DitaXmlGenerator::writeTopicrefs(NodeMultiMap* nmm, const QString& navtitle
         xmlWriter().writeAttribute("navtitle",i.key());
         xmlWriter().writeAttribute("href",fileName(i.value()));
         switch (i.value()->type()) {
-        case Node::Fake: {
-            const FakeNode* fn = static_cast<const FakeNode*>(i.value());
-            switch (fn->subType()) {
-            case Node::Group: {
-                const NodeList& members = fn->groupMembers();
-                for (int j=0; j<members.size(); ++j) {
-                    writeStartTag(DT_topicref);
-                    xmlWriter().writeAttribute("navtitle",members[j]->name());
-                    xmlWriter().writeAttribute("href",fileName(members[j]));
-                    writeEndTag(); // </topicref>
-                }
-                break;
-            }
-            case Node::QmlModule: {
-                const NodeList& members = fn->qmlModuleMembers();
-                for (int j=0; j<members.size(); ++j) {
-                    writeStartTag(DT_topicref);
-                    xmlWriter().writeAttribute("navtitle",members[j]->name());
-                    xmlWriter().writeAttribute("href",fileName(members[j]));
-                    writeEndTag(); // </topicref>
-                }
-                break;
-            }
-            case Node::Example: {
-                const ExampleNode* en = static_cast<const ExampleNode*>(fn);
-                if (!en->imageFileName().isEmpty()) {
-                    writeStartTag(DT_topicref);
-                    xmlWriter().writeAttribute("navtitle","image");
-                    xmlWriter().writeAttribute("href",en->imageFileName());
-                    writeEndTag(); // </topicref>
-                }
-                const NodeList& files = en->childNodes();
-                for (int j=0; j<files.size(); ++j) {
-                    writeStartTag(DT_topicref);
-                    xmlWriter().writeAttribute("href",files[j]->name());
-                    writeEndTag(); // </topicref>
-                }
-                break;
-            }
-            case Node::Module: {
-                if (moduleNamespaceMap.contains(fn->name())) {
-                    const NodeMap& nodeMap = moduleNamespaceMap[fn->name()];
-                    foreach (const QString& name, nodeMap.keys()) {
-                        const Node* node = nodeMap[name];
-                        if (node->status() == Node::Obsolete ||
-                                node->isInternal() ||
-                                node->access() == Node::Private ||
-                                node->doc().isEmpty())
-                            continue;
-                        writeStartTag(DT_topicref);
-                        xmlWriter().writeAttribute("navtitle",node->name());
-                        xmlWriter().writeAttribute("href",fileName(node));
-                        writeEndTag(); // </topicref>
-                    }
-                }
-                if (moduleClassMap.contains(fn->name())) {
-                    const NodeMap& nodeMap = moduleClassMap[fn->name()];
-                    foreach (const QString& name, nodeMap.keys()) {
-                        const Node* node = nodeMap[name];
-                        if (node->status() == Node::Obsolete ||
-                                node->isInternal() ||
-                                node->access() == Node::Private ||
-                                node->doc().isEmpty())
-                            continue;
-                        writeStartTag(DT_topicref);
-                        xmlWriter().writeAttribute("navtitle",node->name());
-                        xmlWriter().writeAttribute("href",fileName(node));
-                        writeEndTag(); // </topicref>
-                    }
-                }
-                break;
-            }
-            default:
-                break;
-            }
-            break;
-        }
-        case Node::Namespace: {
-            const NamespaceNode* nn = static_cast<const NamespaceNode*>(i.value());
-            const NodeList& c = nn->childNodes();
-            for (int j=0; j<c.size(); ++j) {
-                if (c[j]->isInternal() || c[j]->access() == Node::Private || c[j]->doc().isEmpty())
-                    continue;
-                if (c[j]->type() == Node::Class) {
-                    writeStartTag(DT_topicref);
-                    xmlWriter().writeAttribute("navtitle",c[j]->name());
-                    xmlWriter().writeAttribute("href",fileName(c[j]));
-                    writeEndTag(); // </topicref>
-                }
-            }
-            break;
-        }
         case Node::Class: {
             const NamespaceNode* nn = static_cast<const NamespaceNode*>(i.value());
             const NodeList& c = nn->childNodes();