diff --git a/src/corelib/kernel/qcoreapplication.cpp b/src/corelib/kernel/qcoreapplication.cpp
index 6f26be2..e105100 100644
--- a/src/corelib/kernel/qcoreapplication.cpp
+++ b/src/corelib/kernel/qcoreapplication.cpp
@@ -1405,9 +1405,18 @@ void QCoreApplicationPrivate::sendPostedEvents(QObject *receiver, int event_type
             if (!allowDeferredDelete) {
                 // cannot send deferred delete
                 if (!event_type && !receiver) {
-                    // don't lose the event
-                    data->postEventList.addEvent(pe);
+                    // we must copy it first; we want to re-post the event
+                    // with the event pointer intact, but we can't delay
+                    // nulling the event ptr until after re-posting, as
+                    // addEvent may invalidate pe.
+                    QPostEvent pe_copy = pe;
+
+                    // null out the event so if sendPostedEvents recurses, it
+                    // will ignore this one, as it's been re-posted.
                     const_cast<QPostEvent &>(pe).event = 0;
+
+                    // re-post the copied event so it isn't lost
+                    data->postEventList.addEvent(pe_copy);
                 }
                 continue;
             }
@@ -1509,7 +1518,7 @@ void QCoreApplication::removePostedEvents(QObject *receiver, int eventType)
             const_cast<QPostEvent &>(pe).event = 0;
         } else if (!data->postEventList.recursion) {
             if (i != j)
-                data->postEventList.swap(i, j);
+                qSwap(data->postEventList[i], data->postEventList[j]);
             ++j;
         }
     }
diff --git a/src/corelib/thread/qthread_p.h b/src/corelib/thread/qthread_p.h
index bbaf664..8be9f13 100644
--- a/src/corelib/thread/qthread_p.h
+++ b/src/corelib/thread/qthread_p.h
@@ -81,6 +81,8 @@ public:
         : receiver(r), event(e), priority(p)
     { }
 };
+Q_DECLARE_TYPEINFO(QPostEvent, Q_MOVABLE_TYPE);
+
 inline bool operator<(int priority, const QPostEvent &pe)
 {
     return pe.priority < priority;
@@ -92,7 +94,7 @@ inline bool operator<(const QPostEvent &pe, int priority)
 
 // This class holds the list of posted events.
 //  The list has to be kept sorted by priority
-class QPostEventList : public QList<QPostEvent>
+class QPostEventList : public QVector<QPostEvent>
 {
 public:
     // recursion == recursion count for sendPostedEvents()
@@ -106,12 +108,14 @@ public:
     QMutex mutex;
 
     inline QPostEventList()
-        : QList<QPostEvent>(), recursion(0), startOffset(0), insertionOffset(0)
+        : QVector<QPostEvent>(), recursion(0), startOffset(0), insertionOffset(0)
     { }
 
     void addEvent(const QPostEvent &ev) {
         int priority = ev.priority;
-        if (isEmpty() || last().priority >= priority) {
+        if (isEmpty() ||
+            last().priority >= priority ||
+            begin() + insertionOffset >= end()) {
             // optimization: we can simply append if the last event in
             // the queue has higher or equal priority
             append(ev);
@@ -125,8 +129,8 @@ public:
     }
 private:
     //hides because they do not keep that list sorted. addEvent must be used
-    using QList<QPostEvent>::append;
-    using QList<QPostEvent>::insert;
+    using QVector<QPostEvent>::append;
+    using QVector<QPostEvent>::insert;
 };
 
 #ifndef QT_NO_THREAD
diff --git a/tests/benchmarks/corelib/kernel/kernel.pro b/tests/benchmarks/corelib/kernel/kernel.pro
index da3f0d6..8b7d8c8 100644
--- a/tests/benchmarks/corelib/kernel/kernel.pro
+++ b/tests/benchmarks/corelib/kernel/kernel.pro
@@ -4,4 +4,5 @@ SUBDIRS = \
         qmetaobject \
         qmetatype \
         qobject \
-        qvariant
+        qvariant \
+        qcoreapplication
diff --git a/tests/benchmarks/corelib/kernel/qcoreapplication/main.cpp b/tests/benchmarks/corelib/kernel/qcoreapplication/main.cpp
new file mode 100644
index 0000000..e1e4e2c
--- /dev/null
+++ b/tests/benchmarks/corelib/kernel/qcoreapplication/main.cpp
@@ -0,0 +1,82 @@
+/****************************************************************************
+**
+** Copyright (C) 2011 Robin Burchell <robin+qt@viroteck.net>
+** All rights reserved.
+** Contact: Nokia Corporation (qt-info@nokia.com)
+**
+** This file is part of the test suite of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** GNU Lesser General Public License Usage
+** This file may be used under the terms of the GNU Lesser General Public
+** License version 2.1 as published by the Free Software Foundation and
+** appearing in the file LICENSE.LGPL included in the packaging of this
+** file. Please review the following information to ensure the GNU Lesser
+** General Public License version 2.1 requirements will be met:
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** In addition, as a special exception, Nokia gives you certain additional
+** rights. These rights are described in the Nokia Qt LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU General
+** Public License version 3.0 as published by the Free Software Foundation
+** and appearing in the file LICENSE.GPL included in the packaging of this
+** file. Please review the following information to ensure the GNU General
+** Public License version 3.0 requirements will be met:
+** http://www.gnu.org/copyleft/gpl.html.
+**
+** Other Usage
+** Alternatively, this file may be used in accordance with the terms and
+** conditions contained in a signed written agreement between you and Nokia.
+**
+**
+**
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+#include <QtCore>
+#include <qtest.h>
+#include <qcoreapplication.h>
+
+class QCoreApplicationBenchmark : public QObject
+{
+Q_OBJECT
+private slots:
+    void event_posting_benchmark_data();
+    void event_posting_benchmark();
+};
+
+void QCoreApplicationBenchmark::event_posting_benchmark_data()
+{
+    QTest::addColumn<int>("size");
+    QTest::newRow("50 events") << 50;
+    QTest::newRow("100 events") << 100;
+    QTest::newRow("200 events") << 200;
+    QTest::newRow("1000 events") << 1000;
+    QTest::newRow("10000 events") << 10000;
+    QTest::newRow("100000 events") << 100000;
+    QTest::newRow("1000000 events") << 1000000;
+}
+
+void QCoreApplicationBenchmark::event_posting_benchmark()
+{
+    QFETCH(int, size);
+
+    int type = QEvent::registerEventType();
+    QCoreApplication *app = QCoreApplication::instance();
+
+    // benchmark posting & sending events
+    QBENCHMARK {
+        for (int i = 0; i < size; ++i)
+            QCoreApplication::postEvent(app, new QEvent(QEvent::Type(type)));
+        QCoreApplication::sendPostedEvents();
+    }
+}
+
+QTEST_MAIN(QCoreApplicationBenchmark)
+
+#include "main.moc"
diff --git a/tests/benchmarks/corelib/kernel/qcoreapplication/qcoreapplication.pro b/tests/benchmarks/corelib/kernel/qcoreapplication/qcoreapplication.pro
new file mode 100644
index 0000000..2c29faf
--- /dev/null
+++ b/tests/benchmarks/corelib/kernel/qcoreapplication/qcoreapplication.pro
@@ -0,0 +1,9 @@
+QT += testlib
+
+TEMPLATE = app
+TARGET = tst_bench_qcoreapplication
+DEPENDPATH += .
+INCLUDEPATH += .
+
+# Input
+SOURCES += main.cpp