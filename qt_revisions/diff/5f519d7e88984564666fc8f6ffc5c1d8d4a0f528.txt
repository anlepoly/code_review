diff --git a/src/serialport.cpp b/src/serialport.cpp
index cc64d72..6c1130a 100755
--- a/src/serialport.cpp
+++ b/src/serialport.cpp
@@ -566,7 +566,7 @@ bool SerialPortPrivate::readFromPort()
         return true;
     }
 
-    readBuffer.chop(int(bytesToRead - ((readBytes < 0) ? qint64(0) : readBytes)));
+    readBuffer.chop(int(bytesToRead - ((readBytes < 0) ? 0 : readBytes)));
 
     if (readBytes < 0) {
         setError(SerialPort::IoError);
@@ -1540,7 +1540,7 @@ qint64 SerialPort::bytesAvailable() const
     Q_D(const SerialPort);
     qint64 ret;
     if (d->isBuffered)
-        ret = qint64(d->readBuffer.size());
+        ret = d->readBuffer.size();
     else
         ret = d->bytesAvailable();
     return ret + QIODevice::bytesAvailable();
@@ -1558,7 +1558,7 @@ qint64 SerialPort::bytesToWrite() const
     Q_D(const SerialPort);
     qint64 ret;
     if (d->isBuffered)
-        ret = qint64(d->writeBuffer.size());
+        ret = d->writeBuffer.size();
     else
         ret = d->bytesToWrite();
     return ret + QIODevice::bytesToWrite();
@@ -1746,7 +1746,7 @@ qint64 SerialPort::readData(char *data, qint64 maxSize)
 
     // This is for a buffered SerialPort
     if (d->isBuffered && d->readBuffer.isEmpty())
-        return qint64(0);
+        return 0;
 
     // short cut for a char read if we have something in the buffer
     if (maxSize == 1 && !d->readBuffer.isEmpty()) {
@@ -1770,7 +1770,7 @@ qint64 SerialPort::readData(char *data, qint64 maxSize)
             if (readBytes == -2)
                 d->readBuffer.chop(bytesToRead); // No bytes currently available for reading.
             else
-                d->readBuffer.chop(int(bytesToRead - (readBytes < 0 ? qint64(0) : readBytes)));
+                d->readBuffer.chop(int(bytesToRead - ((readBytes < 0) ? 0 : readBytes)));
         }
     }
 
diff --git a/src/serialportengine_symbian.cpp b/src/serialportengine_symbian.cpp
index a15f745..599e7a0 100755
--- a/src/serialportengine_symbian.cpp
+++ b/src/serialportengine_symbian.cpp
@@ -353,7 +353,7 @@ bool SymbianSerialPortEngine::setBreak(bool set)
 */
 qint64 SymbianSerialPortEngine::bytesAvailable() const
 {
-    return qint64(m_descriptor.QueryReceiveBuffer());
+    return m_descriptor.QueryReceiveBuffer();
 }
 
 /*!
@@ -415,9 +415,9 @@ qint64 SymbianSerialPortEngine::read(char *data, qint64 len)
     TInt err = status.Int();
 
     if (err != KErrNone)
-        return qint64(-1);
+        return -1;
 
-    return qint64(buffer.Length());
+    return buffer.Length();
 }
 
 /*!
@@ -447,10 +447,10 @@ qint64 SymbianSerialPortEngine::write(const char *data, qint64 len)
     TInt err = status.Int();
 
     if (err != KErrNone)
-        return qint64(-1);
+        return -1;
 
     // FIXME: How to get the actual number of bytes written?
-    return qint64(len);
+    return len;
 }
 
 /*!
diff --git a/src/serialportengine_win.cpp b/src/serialportengine_win.cpp
index 9f3cc56..9eb7eae 100755
--- a/src/serialportengine_win.cpp
+++ b/src/serialportengine_win.cpp
@@ -446,7 +446,7 @@ static qint64 get_commstat_que(HANDLE m_descriptor, enum CommStatQue que)
     ::memset(&cs, 0, sizeof(COMSTAT));
     if (::ClearCommError(m_descriptor, 0, &cs) == 0)
         return -1;
-    return qint64((que == CS_IN_QUE) ? (cs.cbInQue) : (cs.cbOutQue));
+    return (que == CS_IN_QUE) ? cs.cbInQue : cs.cbOutQue;
 }
 
 /*!
@@ -532,7 +532,7 @@ qint64 WinSerialPortEngine::read(char *data, qint64 len)
 #endif
 
     if (!sucessResult)
-        return qint64(-1);
+        return -1;
 
     // FIXME: Process emulate policy.
     if (m_flagErrorFromCommEvent) {
@@ -549,7 +549,7 @@ qint64 WinSerialPortEngine::read(char *data, qint64 len)
         default:;
         }
     }
-    return qint64(readBytes);
+    return readBytes;
 }
 
 /*!
@@ -583,9 +583,9 @@ qint64 WinSerialPortEngine::write(const char *data, qint64 len)
 #endif
 
     if (!sucessResult)
-        return qint64(-1);
+        return -1;
 
-    return quint64(writeBytes);
+    return writeBytes;
 }
 
 /*!