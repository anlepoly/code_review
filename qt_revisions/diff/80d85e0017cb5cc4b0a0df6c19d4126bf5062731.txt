diff --git a/src/quick/items/qquickgridview.cpp b/src/quick/items/qquickgridview.cpp
index b29c61f..5514d3c 100644
--- a/src/quick/items/qquickgridview.cpp
+++ b/src/quick/items/qquickgridview.cpp
@@ -195,7 +195,6 @@ public:
     virtual void initializeCurrentItem();
 
     virtual void updateViewport();
-    virtual void itemGeometryChanged(QQuickItem *item, const QRectF &newGeometry, const QRectF &oldGeometry);
     virtual void fixupPosition();
     virtual void fixup(AxisData &data, qreal minExtent, qreal maxExtent);
     virtual void flick(QQuickItemViewPrivate::AxisData &data, qreal minExtent, qreal maxExtent, qreal vSize,
@@ -790,21 +789,6 @@ void QQuickGridViewPrivate::initializeCurrentItem()
     }
 }
 
-void QQuickGridViewPrivate::itemGeometryChanged(QQuickItem *item, const QRectF &newGeometry, const QRectF &oldGeometry)
-{
-    Q_Q(QQuickGridView);
-    QQuickItemViewPrivate::itemGeometryChanged(item, newGeometry, oldGeometry);
-    if (!q->isComponentComplete())
-        return;
-    if (item == q) {
-        if (newGeometry.height() != oldGeometry.height() || newGeometry.width() != oldGeometry.width()) {
-            updateViewport();
-            forceLayout = true;
-            q->polish();
-        }
-    }
-}
-
 void QQuickGridViewPrivate::fixupPosition()
 {
     moveReason = Other;
diff --git a/src/quick/items/qquickitemview.cpp b/src/quick/items/qquickitemview.cpp
index 8f46661..bfba88a 100644
--- a/src/quick/items/qquickitemview.cpp
+++ b/src/quick/items/qquickitemview.cpp
@@ -878,6 +878,10 @@ void QQuickItemView::geometryChanged(const QRectF &newGeometry, const QRectF &ol
 {
     Q_D(QQuickItemView);
     d->markExtentsDirty();
+    if (isComponentComplete() && d->isValid()) {
+        d->forceLayout = true;
+        polish();
+    }
     QQuickFlickable::geometryChanged(newGeometry, oldGeometry);
 }
 
@@ -1212,7 +1216,6 @@ void QQuickItemViewPrivate::init()
     Q_Q(QQuickItemView);
     QQuickItemPrivate::get(contentItem)->childrenDoNotOverlap = true;
     q->setFlag(QQuickItem::ItemIsFocusScope);
-    addItemChangeListener(this, Geometry);
     QObject::connect(q, SIGNAL(movementEnded()), q, SLOT(animStopped()));
     q->setFlickableDirection(QQuickFlickable::VerticalFlick);
 }
@@ -1291,10 +1294,11 @@ void QQuickItemViewPrivate::mirrorChange()
 
 void QQuickItemViewPrivate::refill()
 {
+    qreal s = qMax(size(), qreal(0.));
     if (isContentFlowReversed())
-        refill(-position()-size(), -position());
+        refill(-position()-s, -position());
     else
-        refill(position(), position()+size());
+        refill(position(), position()+s);
 }
 
 void QQuickItemViewPrivate::refill(qreal from, qreal to, bool doBuffer)
diff --git a/tests/auto/qtquick2/qquickgridview/tst_qquickgridview.cpp b/tests/auto/qtquick2/qquickgridview/tst_qquickgridview.cpp
index a83d8a2..ed7ee4d 100644
--- a/tests/auto/qtquick2/qquickgridview/tst_qquickgridview.cpp
+++ b/tests/auto/qtquick2/qquickgridview/tst_qquickgridview.cpp
@@ -3175,6 +3175,41 @@ void tst_QQuickGridView::resizeViewAndRepaint()
     gridview->setHeight(100);
     QTRY_VERIFY(!findItem<QQuickItem>(contentItem, "wrapper", 10));
 
+    // Ensure we handle -ve sizes
+    gridview->setHeight(-100);
+    QTRY_COMPARE(findItems<QQuickItem>(contentItem, "wrapper").count(), 3);
+
+    gridview->setCacheBuffer(120);
+    QTRY_COMPARE(findItems<QQuickItem>(contentItem, "wrapper").count(), 9);
+
+    // ensure items in cache become visible
+    gridview->setHeight(120);
+    QTRY_COMPARE(findItems<QQuickItem>(contentItem, "wrapper").count(), 15);
+
+    int itemCount = findItems<QQuickItem>(contentItem, "wrapper").count();
+    for (int i = 0; i < model.count() && i < itemCount; ++i) {
+        QQuickItem *item = findItem<QQuickItem>(contentItem, "wrapper", i);
+        if (!item) qWarning() << "Item" << i << "not found";
+        QTRY_VERIFY(item);
+        QTRY_COMPARE(item->x(), qreal((i%3)*80));
+        QTRY_COMPARE(item->y(), qreal((i/3)*60));
+        QCOMPARE(item->isVisible(), i < 9); // inside view visible, outside not visible
+    }
+
+    // ensure items outside view become invisible
+    gridview->setHeight(60);
+    QTRY_COMPARE(findItems<QQuickItem>(contentItem, "wrapper").count(), 12);
+
+    itemCount = findItems<QQuickItem>(contentItem, "wrapper").count();
+    for (int i = 0; i < model.count() && i < itemCount; ++i) {
+        QQuickItem *item = findItem<QQuickItem>(contentItem, "wrapper", i);
+        if (!item) qWarning() << "Item" << i << "not found";
+        QTRY_VERIFY(item);
+        QTRY_COMPARE(item->x(), qreal((i%3)*80));
+        QTRY_COMPARE(item->y(), qreal((i/3)*60));
+        QCOMPARE(item->isVisible(), i < 6); // inside view visible, outside not visible
+    }
+
     delete canvas;
 }
 
diff --git a/tests/auto/qtquick2/qquicklistview/tst_qquicklistview.cpp b/tests/auto/qtquick2/qquicklistview/tst_qquicklistview.cpp
index ccdc49e..e165e7e 100644
--- a/tests/auto/qtquick2/qquicklistview/tst_qquicklistview.cpp
+++ b/tests/auto/qtquick2/qquicklistview/tst_qquicklistview.cpp
@@ -3576,6 +3576,7 @@ void tst_QQuickListView::resizeView()
     ctxt->setContextProperty("testObject", testObject);
 
     canvas->setSource(testFileUrl("listviewtest.qml"));
+    canvas->show();
     qApp->processEvents();
 
     QQuickListView *listview = findItem<QQuickListView>(canvas->rootObject(), "list");
@@ -3602,6 +3603,40 @@ void tst_QQuickListView::resizeView()
     QMetaObject::invokeMethod(canvas->rootObject(), "heightRatio", Q_RETURN_ARG(QVariant, heightRatio));
     QCOMPARE(heightRatio.toReal(), 0.25);
 
+    // Ensure we handle -ve sizes
+    listview->setHeight(-100);
+    QTRY_COMPARE(QQuickItemPrivate::get(listview)->polishScheduled, false);
+    QTRY_COMPARE(findItems<QQuickItem>(contentItem, "wrapper", false).count(), 1);
+
+    listview->setCacheBuffer(200);
+    QTRY_COMPARE(findItems<QQuickItem>(contentItem, "wrapper", false).count(), 11);
+
+    // ensure items in cache become visible
+    listview->setHeight(200);
+    QTRY_COMPARE(findItems<QQuickItem>(contentItem, "wrapper", false).count(), 21);
+
+    itemCount = findItems<QQuickItem>(contentItem, "wrapper", false).count();
+    for (int i = 0; i < model.count() && i < itemCount; ++i) {
+        QQuickItem *item = findItem<QQuickItem>(contentItem, "wrapper", i);
+        if (!item) qWarning() << "Item" << i << "not found";
+        QTRY_VERIFY(item);
+        QTRY_COMPARE(item->y(), i*20.);
+        QCOMPARE(item->isVisible(), i < 11); // inside view visible, outside not visible
+    }
+
+    // ensure items outside view become invisible
+    listview->setHeight(100);
+    QTRY_COMPARE(findItems<QQuickItem>(contentItem, "wrapper", false).count(), 16);
+
+    itemCount = findItems<QQuickItem>(contentItem, "wrapper", false).count();
+    for (int i = 0; i < model.count() && i < itemCount; ++i) {
+        QQuickItem *item = findItem<QQuickItem>(contentItem, "wrapper", i);
+        if (!item) qWarning() << "Item" << i << "not found";
+        QTRY_VERIFY(item);
+        QTRY_COMPARE(item->y(), i*20.);
+        QCOMPARE(item->isVisible(), i < 6); // inside view visible, outside not visible
+    }
+
     delete canvas;
     delete testObject;
 }