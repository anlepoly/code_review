diff --git a/examples/assistant/assistant.pro b/examples/assistant/assistant.pro
index fd289a6..578c7ff 100644
--- a/examples/assistant/assistant.pro
+++ b/examples/assistant/assistant.pro
@@ -1,4 +1,5 @@
 TEMPLATE = subdirs
 CONFIG  += ordered
 
-SUBDIRS += simpletextviewer
+SUBDIRS += simpletextviewer \
+           remotecontrol
diff --git a/examples/assistant/doc/images/simpletextviewer-example.png b/examples/assistant/doc/images/simpletextviewer-example.png
new file mode 100644
index 0000000..95d2905
Binary files /dev/null and b/examples/assistant/doc/images/simpletextviewer-example.png differ
diff --git a/examples/assistant/doc/images/simpletextviewer-findfiledialog.png b/examples/assistant/doc/images/simpletextviewer-findfiledialog.png
new file mode 100644
index 0000000..f6e55f0
Binary files /dev/null and b/examples/assistant/doc/images/simpletextviewer-findfiledialog.png differ
diff --git a/examples/assistant/doc/images/simpletextviewer-mainwindow.png b/examples/assistant/doc/images/simpletextviewer-mainwindow.png
new file mode 100644
index 0000000..98c1c61
Binary files /dev/null and b/examples/assistant/doc/images/simpletextviewer-mainwindow.png differ
diff --git a/examples/assistant/doc/src/remotecontrol.qdoc b/examples/assistant/doc/src/remotecontrol.qdoc
new file mode 100644
index 0000000..5a8106f
--- /dev/null
+++ b/examples/assistant/doc/src/remotecontrol.qdoc
@@ -0,0 +1,34 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/legal
+**
+** This file is part of the documentation of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:FDL$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and Digia.  For licensing terms and
+** conditions see http://qt.digia.com/licensing.  For further information
+** use the contact form at http://qt.digia.com/contact-us.
+**
+** GNU Free Documentation License Usage
+** Alternatively, this file may be used under the terms of the GNU Free
+** Documentation License version 1.3 as published by the Free Software
+** Foundation and appearing in the file included in the packaging of
+** this file.  Please review the following information to ensure
+** the GNU Free Documentation License version 1.3 requirements
+** will be met: http://www.gnu.org/copyleft/fdl.html.
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+/*!
+    \example remotecontrol
+    \ingroup examples-qtassistant
+    \title Remote Control Example
+
+    \brief Using and controlling Qt Assistant as a help viewer.
+*/
diff --git a/examples/assistant/doc/src/simpletextviewer.qdoc b/examples/assistant/doc/src/simpletextviewer.qdoc
new file mode 100644
index 0000000..bf74e10
--- /dev/null
+++ b/examples/assistant/doc/src/simpletextviewer.qdoc
@@ -0,0 +1,447 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/legal
+**
+** This file is part of the documentation of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:FDL$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and Digia.  For licensing terms and
+** conditions see http://qt.digia.com/licensing.  For further information
+** use the contact form at http://qt.digia.com/contact-us.
+**
+** GNU Free Documentation License Usage
+** Alternatively, this file may be used under the terms of the GNU Free
+** Documentation License version 1.3 as published by the Free Software
+** Foundation and appearing in the file included in the packaging of
+** this file.  Please review the following information to ensure
+** the GNU Free Documentation License version 1.3 requirements
+** will be met: http://www.gnu.org/copyleft/fdl.html.
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+/*!
+    \example simpletextviewer
+    \ingroup examples-qtassistant
+    \title Simple Text Viewer Example
+
+    \brief Using \QA as a customized help viewer for your application.
+
+    \image simpletextviewer-example.png
+
+    This is done in two stages. Firstly, documentation is created and \QA
+    is customized; secondly, the functionality to launch and control
+    \QA is added to the application.
+
+    The Simple Text Viewer application lets the user select and view
+    existing files.
+
+    The application provides its own custom documentation that is
+    available from the \gui Help menu in the main window's menu bar
+    or by clicking the \gui Help button in the application's find file
+    dialog.
+
+    The example consists of four classes:
+
+    \list
+        \li \c Assistant provides functionality to launch \QA.
+        \li \c MainWindow is the main application window.
+        \li \c FindFileDialog allows the user to search for
+           files using wildcard matching.
+        \li \c TextEdit provides a rich text browser that makes
+           sure that images referenced in HTML documents are
+           displayed properly.
+    \endlist
+
+    \note We will only comment on the parts of the implementation
+    that are relevant to the main issue, that is making Qt Assistant
+    act as a customized help viewer for our Simple Text Viewer
+    application.
+
+    \section1 Creating Documentation and Customizing \QA
+
+    How to create the actual documentation in the form of HTML pages is
+    not in the scope of this example. In general, HTML pages can either
+    be written by hand or generated with the help of documentation tools
+    like qdoc or Doxygen. For the purposes of this example we assume that
+    the HTML files have already been created. So, the only thing that
+    remains to be done is to tell \QA how to structure and display the
+    help information.
+
+    \section2 Organizing Documentation for \QA
+
+    Plain HTML files only contain text or documentation about specific topics,
+    but they usually include no information about how several HTML documents
+    relate to each other or in which order they are supposed to be read.
+    What is missing is a table of contents along with an index to access
+    certain help contents quickly, without having to browse through a lot
+    of documents in order to find a piece of information.
+
+    To organize the documentation and make it available for \QA, we have
+    to create a Qt help project (.qhp) file. The first and most important
+    part of the project file is the definition of the namespace. The namespace
+    has to be unique and will be the first part of the page URL in \QA.
+    In addition, we have to set a virtual folder which acts as a common
+    folder for documentation sets. This means, that two documentation sets
+    identified by two different namespaces can cross reference HTML files
+    since those files are in one big virtual folder. However, for this
+    example, we'll only have one documentation set available, so the
+    virtual folder name and functionality are not important.
+
+    \code
+    <?xml version="1.0" encoding="UTF-8"?>
+    <QtHelpProject version="1.0">
+      <namespace>com.trolltech.examples.simpletextviewer</namespace>
+      <virtualFolder>doc</virtualFolder>
+    \endcode
+
+    The next step is to define the filter section. A filter section
+    contains the table of contents, indices and a complete list of
+    all documentation files, and can have any number of filter attributes
+    assigned to it. A filter attribute is an ordinary string which can
+    be freely chosen. Later in \QA, users can then define a custom
+    filter referencing those attributes. If the attributes of a filter
+    section match the attributes of the custom filter the documentation
+    will be shown, otherwise \QA will hide the documentation.
+
+    Again, since we'll only have one documentation set, we do not need
+    the filtering functionality of \QA and can therefore skip the
+    filter attributes.
+
+    Now, we build up the table of contents. An item in the table is
+    defined by the \c section tag which contains the attributes for the
+    item title as well as link to the actual page. Section tags can be
+    nested infinitely, but for practical reasons it is not recommended
+    to nest them deeper than three or four levels. For our example we
+    want to use the following outline for the table of contents:
+
+    \list
+    \li Simple Text Viewer
+      \list
+      \li Find File
+        \list
+        \li File Dialog
+        \li Wildcard Matching
+        \li Browse
+        \endlist
+      \li Open File
+      \endlist
+    \endlist
+
+    In the help project file, the outline is represented by:
+
+    \code
+     <filterSection>
+       <toc>
+         <section title="Simple Text Viewer" ref="index.html">
+           <section title="Find File" ref="./findfile.html">
+             <section title="File Dialog" ref="./filedialog.html"></section>
+             <section title="Wildcard Matching" ref="./wildcardmatching.html"></section>
+             <section title="Browse" ref="./browse.html"></section>
+           </section>
+           <section title="Open File" ref="./openfile.html"></section>
+         </section>
+       </toc>
+    \endcode
+
+    After the table of contents is defined, we will list all index keywords:
+
+    \code
+        <keywords>
+          <keyword name="Display" ref="./index.html"/>
+          <keyword name="Rich text" ref="./index.html"/>
+          <keyword name="Plain text" ref="./index.html"/>
+          <keyword name="Find" ref="./findfile.html"/>
+          <keyword name="File menu" ref="./findfile.html"/>
+          <keyword name="File name" ref="./filedialog.html"/>
+          <keyword name="File dialog" ref="./filedialog.html"/>
+          <keyword name="File globbing" ref="./wildcardmatching.html"/>
+          <keyword name="Wildcard matching" ref="./wildcardmatching.html"/>
+          <keyword name="Wildcard syntax" ref="./wildcardmatching.html"/>
+          <keyword name="Browse" ref="./browse.html"/>
+          <keyword name="Directory" ref="./browse.html"/>
+          <keyword name="Open" ref="./openfile.html"/>
+          <keyword name="Select" ref="./openfile.html"/>
+        </keywords>
+    \endcode
+
+    As the last step, we have to list all files making up the documentation.
+    An important point to note here is that all files have to listed, including
+    image files, and even stylesheets if they are used.
+
+    \code
+        <files>
+          <file>browse.html</file>
+          <file>filedialog.html</file>
+          <file>findfile.html</file>
+          <file>index.html</file>
+          <file>intro.html</file>
+          <file>openfile.html</file>
+          <file>wildcardmatching.html</file>
+          <file>images/browse.png</file>
+          <file>images/*.png</file>
+        </files>
+      </filterSection>
+    </QtHelpProject>
+    \endcode
+
+    The help project file is now finished. If you want to see the resulting
+    documentation in \QA, you have to generate a Qt compressed help file
+    out of it and register it with the default help collection of \QA.
+
+    \code
+    qhelpgenerator simpletextviewer.qhp -o simpletextviewer.qch
+    assistant -register simpletextviewer.qch
+    \endcode
+
+    If you start \QA now, you'll see the Simple Text Viewer documentation
+    beside the Qt documentation. This is OK for testing purposes, but
+    for the final version we want to only have the Simple Text Viewer
+    documentation in \QA.
+
+    \section2 Customizing \QA
+
+    The easiest way to make \QA only display the Simple Text Viewer
+    documentation is to create our own help collection file. A collection
+    file is stored in a binary format, similar to the compressed help file,
+    and generated from a help collection project file (*.qhcp). With
+    the help of a collection file, we can customize the appearance and even
+    some functionality offered by \QA.
+
+    At first, we change the window title and icon. Instead of showing "\QA"
+    it will show "Simple Text Viewer", so it is much clearer for the user
+    that the help viewer actually belongs to our application.
+
+    \code
+    <?xml version="1.0" encoding="UTF-8"?>
+    <QHelpCollectionProject version="1.0">
+    <assistant>
+        <title>Simple Text Viewer</title>
+        <applicationIcon>images/handbook.png</applicationIcon>
+        <cacheDirectory>Trolltech/SimpleTextViewer</cacheDirectory>
+    \endcode
+
+    The \c cacheDirectory tag specifies a subdirectory of the users
+    data directory (see the
+    \l{Customizing Qt Assistant#Qt Help Collection Files}{Qt Help Collection Files})
+    where the cache file for the full text search or the settings file will
+    be stored.
+
+    After this, we set the page displayed by \QA when launched for the very
+    first time in its new configuration. The URL consists of the namespace
+    and virtual folder defined in the Qt help project file, followed by the
+    actual page file name.
+
+    \code
+        <startPage>qthelp://com.trolltech.examples.simpletextviewer/doc/index.html</startPage>
+    \endcode
+
+    Next, we alter the name of the "About" menu item to "About Simple
+    Text Viewer". The contents of the \gui{About} dialog are also changed
+    by specifying a file where the about text or icon is taken from.
+
+    \code
+        <aboutMenuText>
+            <text>About Simple Text Viewer</text>
+        </aboutMenuText>
+        <aboutDialog>
+            <file>about.txt</file>
+            <icon>images/icon.png</icon>
+        </aboutDialog>
+    \endcode
+
+    \QA offers the possibility to add or remove documentation via its
+    preferences dialog. This functionality is helpful when using \QA
+    as the central help viewer for more applications, but in our case
+    we want to actually prevent the user from removing the documentation.
+    So, we hide the \gui Documentation tab in the \gui Preferences dialog.
+
+    Since the address bar is not really relevant in such a small
+    documentation set we switch it off as well. By having just one filter
+    section, without any filter attributes, we can also disable the filter
+    functionality of \QA, which means that the filter page and the filter
+    toolbar will not be available.
+
+    \code
+        <enableDocumentationManager>false</enableDocumentationManager>
+        <enableAddressBar>false</enableAddressBar>
+        <enableFilterFunctionality>false</enableFilterFunctionality>
+    </assistant>
+    \endcode
+
+    For testing purposes, we already generated the compressed help file
+    and registered it with \QA's default help collection. With the
+    following lines we achieve the same result. The only and important
+    difference is that we register the compressed help file, not in
+    the default collection, but in our own collection file.
+
+    \code
+      <docFiles>
+        <generate>
+            <file>
+                <input>simpletextviewer.qhp</input>
+                <output>simpletextviewer.qch</output>
+                </file>
+            </generate>
+        <register>
+            <file>simpletextviewer.qch</file>
+            </register>
+        </docFiles>
+    </QHelpCollectionProject>
+    \endcode
+
+    As the last step, we have to generate the binary collection file
+    out of the help collection project file. This is done by running the
+    \c qcollectiongenerator tool.
+
+    \code
+    qcollectiongenerator simpletextviewer.qhcp -o simpletextviewer.qhc
+    \endcode
+
+    To test all our customizations made to \QA, we add the collection
+    file name to the command line:
+
+    \code
+    assistant -collectionFile simpletextviewer.qhc
+    \endcode
+
+    \section1 Controlling \QA via the Assistant Class
+
+    We will first take a look at how to start and operate \QA from a
+    remote application. For that purpose, we create a class called
+    \c Assistant.
+
+    This class provides a public function that is used to show pages
+    of the documentation, and one private helper function to make sure
+    that \QA is up and running.
+
+    Launching \QA is done in the function \c startAssistant() by simply
+    creating and starting a QProcess. If the process is already running,
+    the function returns immediately. Otherwise, the process has
+    to be set up and started.
+
+    \snippet simpletextviewer/assistant.cpp 2
+
+    To start the process we need the executable name of \QA as well as the
+    command line arguments for running \QA in a customized mode. The
+    executable name is a little bit tricky since it depends on the
+    platform, but fortunately it is only different on Mac OS X.
+
+    The displayed documentation can be altered using the \c -collectionFile
+    command line argument when launching \QA. When started without any options,
+    \QA displays a default set of documentation. When Qt is installed,
+    the default documentation set in \QA contains the Qt reference
+    documentation as well as the tools that come with Qt, such as Qt
+    Designer and \c qmake.
+
+    In our example, we replace the default documentation set with our
+    custom documentation by passing our application-specific collection
+    file to the process's command line options.
+
+    As the last argument, we add \c -enableRemoteControl, which makes \QA
+    listen to its \c stdin channel for commands, such as those to display
+    a certain page in the documentation.
+    Then we start the process and wait until it is actually running. If,
+    for some reason \QA cannot be started, \c startAssistant() will return
+    false.
+
+    The implementation for \c showDocumentation() is now straightforward.
+    Firstly, we ensure that \QA is running, then we send the request to
+    display the \a page via the \c stdin channel of the process. It is very
+    important here that the command is terminated by the '\\0' character
+    followed by an end of line token to flush the channel.
+
+    \snippet simpletextviewer/assistant.cpp 1
+
+    Finally, we make sure that \QA is terminated properly in the case that
+    the application is shut down. The destructor of QProcess kills the
+    process, meaning that the application has no possibility to do things
+    like save user settings, which would result in corrupted settings files.
+    To avoid this, we ask \QA to terminate in the destructor of the
+    \c Assistant class.
+
+    \snippet simpletextviewer/assistant.cpp 0
+
+    \section1 MainWindow Class
+
+    \image simpletextviewer-mainwindow.png
+
+    The \c MainWindow class provides the main application window with
+    two menus: the \gui File menu lets the user open and view an
+    existing file, while the \gui Help menu provides information about
+    the application and about Qt, and lets the user open \QA to
+    display the application's documentation.
+
+    To be able to access the help functionality, we initialize the
+    \c Assistant object in the \c MainWindow's constructor.
+
+    \snippet simpletextviewer/mainwindow.cpp 0
+    \dots
+    \snippet simpletextviewer/mainwindow.cpp 1
+
+    Then we create all the actions for the Simple Text Viewer application.
+    Of special interest is the \c assistantAct action accessible
+    via the \key{F1} shortcut or the \gui Help > \gui {Help Contents} menu item.
+    This action is connected to the \c showDocumentation() slot of
+    the \c MainWindow class.
+
+    \snippet simpletextviewer/mainwindow.cpp 4
+    \dots
+    \snippet simpletextviewer/mainwindow.cpp 5
+
+    In the \c showDocumentation() slot, we call the \c showDocumentation()
+    function of the \c Assistant class with the URL of home page of the
+    documentation.
+
+    \snippet simpletextviewer/mainwindow.cpp 3
+
+    Finally, we must reimplement the protected QWidget::closeEvent()
+    event handler to ensure that the application's \QA instance is
+    properly closed before we terminate the application.
+
+    \snippet simpletextviewer/mainwindow.cpp 2
+
+    \section1 FindFileDialog Class
+
+    \image simpletextviewer-findfiledialog.png
+
+    The Simple Text Viewer application provides a find file dialog
+    allowing the user to search for files using wildcard matching. The
+    search is performed within the specified directory, and the user
+    is given an option to browse the existing file system to find the
+    relevant directory.
+
+    In the constructor we save the references to the \c Assistant
+    and \c QTextEdit objects passed as arguments. The \c Assistant
+    object will be used in the \c FindFileDialog's \c help() slot,
+    as we will see shortly, while the QTextEdit will be used in the
+    dialog's \c openFile() slot to display the chosen file.
+
+    \snippet simpletextviewer/findfiledialog.cpp 0
+    \dots
+    \snippet simpletextviewer/findfiledialog.cpp 1
+
+    The most relevant member to observe in the \c FindFileDialog
+    class is the private \c help() slot. The slot is connected to the
+    dialog's \gui Help button, and brings the current \QA instance
+    to the foreground with the documentation for the dialog by
+    calling \c Assistant's \c showDocumentation() function.
+
+    \snippet simpletextviewer/findfiledialog.cpp 2
+
+    \section1 Summary
+
+    In order to make \QA act as a customized help tool for
+    your application, you must provide your application with a
+    process that controls \QA in addition to a custom help collection
+    file including Qt compressed help files.
+
+    For  more information about the options and settings available to
+    applications that use \QA as a custom help viewer, see
+    \l{Customizing Qt Assistant}.
+*/
diff --git a/examples/assistant/remotecontrol/enter.png b/examples/assistant/remotecontrol/enter.png
new file mode 100644
index 0000000..f397f4b
Binary files /dev/null and b/examples/assistant/remotecontrol/enter.png differ
diff --git a/examples/assistant/remotecontrol/main.cpp b/examples/assistant/remotecontrol/main.cpp
new file mode 100644
index 0000000..a862cb2
--- /dev/null
+++ b/examples/assistant/remotecontrol/main.cpp
@@ -0,0 +1,53 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/legal
+**
+** This file is part of the examples of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:BSD$
+** You may use this file under the terms of the BSD license as follows:
+**
+** "Redistribution and use in source and binary forms, with or without
+** modification, are permitted provided that the following conditions are
+** met:
+**   * Redistributions of source code must retain the above copyright
+**     notice, this list of conditions and the following disclaimer.
+**   * Redistributions in binary form must reproduce the above copyright
+**     notice, this list of conditions and the following disclaimer in
+**     the documentation and/or other materials provided with the
+**     distribution.
+**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
+**     of its contributors may be used to endorse or promote products derived
+**     from this software without specific prior written permission.
+**
+**
+** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#include <QtWidgets/QApplication>
+#include "remotecontrol.h"
+
+int main(int argc, char *argv[])
+{
+    Q_INIT_RESOURCE(remotecontrol);
+
+    QApplication a(argc, argv);
+    RemoteControl w;
+    w.show();
+    a.connect(&a, SIGNAL(lastWindowClosed()), &a, SLOT(quit()));
+    return a.exec();
+}
diff --git a/examples/assistant/remotecontrol/remotecontrol.cpp b/examples/assistant/remotecontrol/remotecontrol.cpp
new file mode 100644
index 0000000..2569829
--- /dev/null
+++ b/examples/assistant/remotecontrol/remotecontrol.cpp
@@ -0,0 +1,174 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/legal
+**
+** This file is part of the examples of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:BSD$
+** You may use this file under the terms of the BSD license as follows:
+**
+** "Redistribution and use in source and binary forms, with or without
+** modification, are permitted provided that the following conditions are
+** met:
+**   * Redistributions of source code must retain the above copyright
+**     notice, this list of conditions and the following disclaimer.
+**   * Redistributions in binary form must reproduce the above copyright
+**     notice, this list of conditions and the following disclaimer in
+**     the documentation and/or other materials provided with the
+**     distribution.
+**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
+**     of its contributors may be used to endorse or promote products derived
+**     from this software without specific prior written permission.
+**
+**
+** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#include <QtCore/QDir>
+#include <QtCore/QProcess>
+#include <QtCore/QTextStream>
+#include <QtCore/QLibraryInfo>
+
+#include <QtWidgets/QMessageBox>
+
+#include "remotecontrol.h"
+
+RemoteControl::RemoteControl(QWidget *parent, Qt::WindowFlags flags)
+        : QMainWindow(parent, flags)
+{
+    ui.setupUi(this);
+    connect(ui.indexLineEdit, SIGNAL(returnPressed()),
+        this, SLOT(on_indexButton_clicked()));
+    connect(ui.identifierLineEdit, SIGNAL(returnPressed()),
+        this, SLOT(on_identifierButton_clicked()));
+    connect(ui.urlLineEdit, SIGNAL(returnPressed()),
+        this, SLOT(on_urlButton_clicked()));
+
+    QString rc;
+    QTextStream(&rc) << QLatin1String("qthelp://com.trolltech.qt.")
+                     << (QT_VERSION >> 16) << ((QT_VERSION >> 8) & 0xFF)
+                     << (QT_VERSION & 0xFF)
+                     << QLatin1String("/qdoc/index.html");
+
+    ui.startUrlLineEdit->setText(rc);
+
+    process = new QProcess(this);
+    connect(process, SIGNAL(finished(int,QProcess::ExitStatus)),
+        this, SLOT(helpViewerClosed()));
+}
+
+RemoteControl::~RemoteControl()
+{
+    if (process->state() == QProcess::Running) {
+        process->terminate();
+        process->waitForFinished(3000);
+    }
+}
+
+void RemoteControl::on_actionQuit_triggered()
+{
+    close();
+}
+
+void RemoteControl::on_launchButton_clicked()
+{
+    if (process->state() == QProcess::Running)
+        return;
+
+    QString app = QLibraryInfo::location(QLibraryInfo::BinariesPath) + QDir::separator();
+#if !defined(Q_OS_MAC)
+    app += QLatin1String("assistant");
+#else
+    app += QLatin1String("Assistant.app/Contents/MacOS/Assistant");
+#endif
+
+    ui.contentsCheckBox->setChecked(true);
+    ui.indexCheckBox->setChecked(true);
+    ui.bookmarksCheckBox->setChecked(true);
+
+    QStringList args;
+    args << QLatin1String("-enableRemoteControl");
+    process->start(app, args);
+    if (!process->waitForStarted()) {
+        QMessageBox::critical(this, tr("Remote Control"),
+            tr("Could not start Qt Assistant from %1.").arg(app));
+        return;
+    }
+
+    if (!ui.startUrlLineEdit->text().isEmpty())
+        sendCommand(QLatin1String("SetSource ")
+            + ui.startUrlLineEdit->text());
+        
+    ui.launchButton->setEnabled(false);
+    ui.startUrlLineEdit->setEnabled(false);
+    ui.actionGroupBox->setEnabled(true);
+}
+
+void RemoteControl::sendCommand(const QString &cmd)
+{
+    if (process->state() != QProcess::Running)
+        return;
+    process->write(cmd.toLocal8Bit() + '\n');
+}
+
+void RemoteControl::on_indexButton_clicked()
+{
+    sendCommand(QLatin1String("ActivateKeyword ")
+        + ui.indexLineEdit->text());
+}
+
+void RemoteControl::on_identifierButton_clicked()
+{
+    sendCommand(QLatin1String("ActivateIdentifier ")
+        + ui.identifierLineEdit->text());
+}
+
+void RemoteControl::on_urlButton_clicked()
+{
+    sendCommand(QLatin1String("SetSource ")
+        + ui.urlLineEdit->text());
+}
+
+void RemoteControl::on_syncContentsButton_clicked()
+{
+    sendCommand(QLatin1String("SyncContents"));
+}
+
+void RemoteControl::on_contentsCheckBox_toggled(bool checked)
+{
+    sendCommand(checked ?
+        QLatin1String("Show Contents") : QLatin1String("Hide Contents"));
+}
+
+void RemoteControl::on_indexCheckBox_toggled(bool checked)
+{
+    sendCommand(checked ?
+        QLatin1String("Show Index") : QLatin1String("Hide Index"));
+}
+
+void RemoteControl::on_bookmarksCheckBox_toggled(bool checked)
+{
+    sendCommand(checked ?
+        QLatin1String("Show Bookmarks") : QLatin1String("Hide Bookmarks"));
+}
+
+void RemoteControl::helpViewerClosed()
+{
+    ui.launchButton->setEnabled(true);
+    ui.startUrlLineEdit->setEnabled(true);
+    ui.actionGroupBox->setEnabled(false);
+}
diff --git a/examples/assistant/remotecontrol/remotecontrol.h b/examples/assistant/remotecontrol/remotecontrol.h
new file mode 100644
index 0000000..ecf50ed
--- /dev/null
+++ b/examples/assistant/remotecontrol/remotecontrol.h
@@ -0,0 +1,78 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/legal
+**
+** This file is part of the examples of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:BSD$
+** You may use this file under the terms of the BSD license as follows:
+**
+** "Redistribution and use in source and binary forms, with or without
+** modification, are permitted provided that the following conditions are
+** met:
+**   * Redistributions of source code must retain the above copyright
+**     notice, this list of conditions and the following disclaimer.
+**   * Redistributions in binary form must reproduce the above copyright
+**     notice, this list of conditions and the following disclaimer in
+**     the documentation and/or other materials provided with the
+**     distribution.
+**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
+**     of its contributors may be used to endorse or promote products derived
+**     from this software without specific prior written permission.
+**
+**
+** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#ifndef REMOTECONTROL_H
+#define REMOTECONTROL_H
+
+#include <QtWidgets/QMainWindow>
+#include "ui_remotecontrol.h"
+
+QT_BEGIN_NAMESPACE
+class QProcess;
+QT_END_NAMESPACE;
+
+class RemoteControl : public QMainWindow
+{
+    Q_OBJECT
+
+public:
+    RemoteControl(QWidget *parent = 0, Qt::WindowFlags flags = 0);
+    ~RemoteControl();
+    
+private:
+    Ui::RemoteControlClass ui;
+    QProcess *process;
+    
+private slots:
+    void on_launchButton_clicked();
+    void on_actionQuit_triggered();
+    void on_indexButton_clicked();
+    void on_identifierButton_clicked();
+    void on_urlButton_clicked();
+    void on_syncContentsButton_clicked();
+    void on_contentsCheckBox_toggled(bool checked);
+    void on_indexCheckBox_toggled(bool checked);
+    void on_bookmarksCheckBox_toggled(bool checked);
+    void helpViewerClosed();
+
+    void sendCommand(const QString &cmd);
+};
+
+#endif // REMOTECONTROL_H
diff --git a/examples/assistant/remotecontrol/remotecontrol.pro b/examples/assistant/remotecontrol/remotecontrol.pro
new file mode 100644
index 0000000..78ce822
--- /dev/null
+++ b/examples/assistant/remotecontrol/remotecontrol.pro
@@ -0,0 +1,12 @@
+TEMPLATE   = app
+QT        += widgets
+
+HEADERS   += remotecontrol.h
+SOURCES   += main.cpp \
+             remotecontrol.cpp
+FORMS     += remotecontrol.ui
+RESOURCES += remotecontrol.qrc
+
+target.path = $$[QT_INSTALL_EXAMPLES]/help/remotecontrol
+INSTALLS += target
+
diff --git a/examples/assistant/remotecontrol/remotecontrol.qrc b/examples/assistant/remotecontrol/remotecontrol.qrc
new file mode 100644
index 0000000..9b4299d
--- /dev/null
+++ b/examples/assistant/remotecontrol/remotecontrol.qrc
@@ -0,0 +1,5 @@
+<RCC>
+    <qresource prefix="/remotecontrol" >
+        <file>enter.png</file>
+    </qresource>
+</RCC>
diff --git a/examples/assistant/remotecontrol/remotecontrol.ui b/examples/assistant/remotecontrol/remotecontrol.ui
new file mode 100644
index 0000000..1cfc7f5
--- /dev/null
+++ b/examples/assistant/remotecontrol/remotecontrol.ui
@@ -0,0 +1,228 @@
+<ui version="4.0" >
+ <class>RemoteControlClass</class>
+ <widget class="QMainWindow" name="RemoteControlClass" >
+  <property name="geometry" >
+   <rect>
+    <x>0</x>
+    <y>0</y>
+    <width>344</width>
+    <height>364</height>
+   </rect>
+  </property>
+  <property name="windowTitle" >
+   <string>RemoteControl</string>
+  </property>
+  <widget class="QWidget" name="centralWidget" >
+   <layout class="QGridLayout" >
+    <item row="0" column="0" >
+     <widget class="QLabel" name="label" >
+      <property name="text" >
+       <string>Start URL:</string>
+      </property>
+     </widget>
+    </item>
+    <item row="0" column="1" colspan="2" >
+     <widget class="QLineEdit" name="startUrlLineEdit" />
+    </item>
+    <item row="1" column="1" >
+     <widget class="QPushButton" name="launchButton" >
+      <property name="text" >
+       <string>Launch Qt HelpViewer</string>
+      </property>
+     </widget>
+    </item>
+    <item row="1" column="2" >
+     <spacer>
+      <property name="orientation" >
+       <enum>Qt::Horizontal</enum>
+      </property>
+      <property name="sizeHint" >
+       <size>
+        <width>101</width>
+        <height>20</height>
+       </size>
+      </property>
+     </spacer>
+    </item>
+    <item row="2" column="1" >
+     <spacer>
+      <property name="orientation" >
+       <enum>Qt::Vertical</enum>
+      </property>
+      <property name="sizeType" >
+       <enum>QSizePolicy::Fixed</enum>
+      </property>
+      <property name="sizeHint" >
+       <size>
+        <width>113</width>
+        <height>16</height>
+       </size>
+      </property>
+     </spacer>
+    </item>
+    <item row="3" column="0" colspan="3" >
+     <widget class="QGroupBox" name="actionGroupBox" >
+      <property name="enabled" >
+       <bool>false</bool>
+      </property>
+      <property name="title" >
+       <string>Actions</string>
+      </property>
+      <layout class="QGridLayout" >
+       <item row="0" column="0" >
+        <widget class="QLabel" name="label_2" >
+         <property name="text" >
+          <string>Search in Index:</string>
+         </property>
+        </widget>
+       </item>
+       <item row="0" column="1" colspan="2" >
+        <layout class="QHBoxLayout" >
+         <property name="spacing" >
+          <number>0</number>
+         </property>
+         <item>
+          <widget class="QLineEdit" name="indexLineEdit" />
+         </item>
+         <item>
+          <widget class="QToolButton" name="indexButton" >
+           <property name="text" >
+            <string/>
+           </property>
+           <property name="icon" >
+            <iconset resource="remotecontrol.qrc" >:/remotecontrol/enter.png</iconset>
+           </property>
+          </widget>
+         </item>
+        </layout>
+       </item>
+       <item row="1" column="0" >
+        <widget class="QLabel" name="label_4" >
+         <property name="text" >
+          <string>Identifier:</string>
+         </property>
+        </widget>
+       </item>
+       <item row="1" column="1" colspan="2" >
+        <layout class="QHBoxLayout" >
+         <property name="spacing" >
+          <number>0</number>
+         </property>
+         <item>
+          <widget class="QLineEdit" name="identifierLineEdit" />
+         </item>
+         <item>
+          <widget class="QToolButton" name="identifierButton" >
+           <property name="text" >
+            <string/>
+           </property>
+           <property name="icon" >
+            <iconset resource="remotecontrol.qrc" >:/remotecontrol/enter.png</iconset>
+           </property>
+          </widget>
+         </item>
+        </layout>
+       </item>
+       <item row="2" column="0" >
+        <widget class="QLabel" name="label_3" >
+         <property name="text" >
+          <string>Show URL:</string>
+         </property>
+        </widget>
+       </item>
+       <item row="2" column="1" colspan="2" >
+        <layout class="QHBoxLayout" >
+         <property name="spacing" >
+          <number>0</number>
+         </property>
+         <item>
+          <widget class="QLineEdit" name="urlLineEdit" />
+         </item>
+         <item>
+          <widget class="QToolButton" name="urlButton" >
+           <property name="text" >
+            <string/>
+           </property>
+           <property name="icon" >
+            <iconset resource="remotecontrol.qrc" >:/remotecontrol/enter.png</iconset>
+           </property>
+          </widget>
+         </item>
+        </layout>
+       </item>
+       <item row="3" column="1" >
+        <widget class="QPushButton" name="syncContentsButton" >
+         <property name="text" >
+          <string>Sync Contents</string>
+         </property>
+        </widget>
+       </item>
+       <item row="3" column="2" >
+        <spacer>
+         <property name="orientation" >
+          <enum>Qt::Horizontal</enum>
+         </property>
+         <property name="sizeHint" >
+          <size>
+           <width>81</width>
+           <height>20</height>
+          </size>
+         </property>
+        </spacer>
+       </item>
+       <item row="4" column="0" colspan="3" >
+        <widget class="QCheckBox" name="contentsCheckBox" >
+         <property name="text" >
+          <string>Show Contents</string>
+         </property>
+        </widget>
+       </item>
+       <item row="5" column="0" >
+        <widget class="QCheckBox" name="indexCheckBox" >
+         <property name="text" >
+          <string>Show Index</string>
+         </property>
+        </widget>
+       </item>
+       <item row="6" column="0" colspan="3" >
+        <widget class="QCheckBox" name="bookmarksCheckBox" >
+         <property name="text" >
+          <string>Show Bookmarks</string>
+         </property>
+        </widget>
+       </item>
+      </layout>
+     </widget>
+    </item>
+   </layout>
+  </widget>
+  <widget class="QMenuBar" name="menuBar" >
+   <property name="geometry" >
+    <rect>
+     <x>0</x>
+     <y>0</y>
+     <width>344</width>
+     <height>21</height>
+    </rect>
+   </property>
+   <widget class="QMenu" name="menuFile" >
+    <property name="title" >
+     <string>File</string>
+    </property>
+    <addaction name="actionQuit" />
+   </widget>
+   <addaction name="menuFile" />
+  </widget>
+  <widget class="QStatusBar" name="statusBar" />
+  <action name="actionQuit" >
+   <property name="text" >
+    <string>Quit</string>
+   </property>
+  </action>
+ </widget>
+ <layoutdefault spacing="6" margin="11" />
+ <resources>
+  <include location="remotecontrol.qrc" />
+ </resources>
+ <connections/>
+</ui>
diff --git a/examples/assistant/simpletextviewer/doc/images/simpletextviewer-example.png b/examples/assistant/simpletextviewer/doc/images/simpletextviewer-example.png
deleted file mode 100644
index 95d2905..0000000
Binary files a/examples/assistant/simpletextviewer/doc/images/simpletextviewer-example.png and /dev/null differ
diff --git a/examples/assistant/simpletextviewer/doc/images/simpletextviewer-findfiledialog.png b/examples/assistant/simpletextviewer/doc/images/simpletextviewer-findfiledialog.png
deleted file mode 100644
index f6e55f0..0000000
Binary files a/examples/assistant/simpletextviewer/doc/images/simpletextviewer-findfiledialog.png and /dev/null differ
diff --git a/examples/assistant/simpletextviewer/doc/images/simpletextviewer-mainwindow.png b/examples/assistant/simpletextviewer/doc/images/simpletextviewer-mainwindow.png
deleted file mode 100644
index 98c1c61..0000000
Binary files a/examples/assistant/simpletextviewer/doc/images/simpletextviewer-mainwindow.png and /dev/null differ
diff --git a/examples/assistant/simpletextviewer/doc/src/simpletextviewer.qdoc b/examples/assistant/simpletextviewer/doc/src/simpletextviewer.qdoc
deleted file mode 100644
index 5469e02..0000000
--- a/examples/assistant/simpletextviewer/doc/src/simpletextviewer.qdoc
+++ /dev/null
@@ -1,447 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/legal
-**
-** This file is part of the documentation of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:FDL$
-** Commercial License Usage
-** Licensees holding valid commercial Qt licenses may use this file in
-** accordance with the commercial license agreement provided with the
-** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
-** use the contact form at http://qt.digia.com/contact-us.
-**
-** GNU Free Documentation License Usage
-** Alternatively, this file may be used under the terms of the GNU Free
-** Documentation License version 1.3 as published by the Free Software
-** Foundation and appearing in the file included in the packaging of
-** this file.  Please review the following information to ensure
-** the GNU Free Documentation License version 1.3 requirements
-** will be met: http://www.gnu.org/copyleft/fdl.html.
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-/*!
-    \example simpletextviewer
-    \title Simple Text Viewer Example
-
-    \brief The Simple Text Viewer example shows how to use \QA as a customized
-    help viewer for your application.
-
-    \image simpletextviewer-example.png
-
-    This is done in two stages. Firstly, documentation is created and \QA
-    is customized; secondly, the functionality to launch and control
-    \QA is added to the application.
-
-    The Simple Text Viewer application lets the user select and view
-    existing files.
-
-    The application provides its own custom documentation that is
-    available from the \gui Help menu in the main window's menu bar
-    or by clicking the \gui Help button in the application's find file
-    dialog.
-
-    The example consists of four classes:
-
-    \list
-        \li \c Assistant provides functionality to launch \QA.
-        \li \c MainWindow is the main application window.
-        \li \c FindFileDialog allows the user to search for
-           files using wildcard matching.
-        \li \c TextEdit provides a rich text browser that makes
-           sure that images referenced in HTML documents are
-           displayed properly.
-    \endlist
-
-    \note We will only comment on the parts of the implementation
-    that are relevant to the main issue, that is making Qt Assistant
-    act as a customized help viewer for our Simple Text Viewer
-    application.
-
-    \section1 Creating Documentation and Customizing \QA
-
-    How to create the actual documentation in the form of HTML pages is
-    not in the scope of this example. In general, HTML pages can either
-    be written by hand or generated with the help of documentation tools
-    like qdoc or Doxygen. For the purposes of this example we assume that
-    the HTML files have already been created. So, the only thing that
-    remains to be done is to tell \QA how to structure and display the
-    help information.
-
-    \section2 Organizing Documentation for \QA
-
-    Plain HTML files only contain text or documentation about specific topics,
-    but they usually include no information about how several HTML documents
-    relate to each other or in which order they are supposed to be read.
-    What is missing is a table of contents along with an index to access
-    certain help contents quickly, without having to browse through a lot
-    of documents in order to find a piece of information.
-
-    To organize the documentation and make it available for \QA, we have
-    to create a Qt help project (.qhp) file. The first and most important
-    part of the project file is the definition of the namespace. The namespace
-    has to be unique and will be the first part of the page URL in \QA.
-    In addition, we have to set a virtual folder which acts as a common
-    folder for documentation sets. This means, that two documentation sets
-    identified by two different namespaces can cross reference HTML files
-    since those files are in one big virtual folder. However, for this
-    example, we'll only have one documentation set available, so the
-    virtual folder name and functionality are not important.
-
-    \code
-    <?xml version="1.0" encoding="UTF-8"?>
-    <QtHelpProject version="1.0">
-      <namespace>com.trolltech.examples.simpletextviewer</namespace>
-      <virtualFolder>doc</virtualFolder>
-    \endcode
-
-    The next step is to define the filter section. A filter section
-    contains the table of contents, indices and a complete list of
-    all documentation files, and can have any number of filter attributes
-    assigned to it. A filter attribute is an ordinary string which can
-    be freely chosen. Later in \QA, users can then define a custom
-    filter referencing those attributes. If the attributes of a filter
-    section match the attributes of the custom filter the documentation
-    will be shown, otherwise \QA will hide the documentation.
-
-    Again, since we'll only have one documentation set, we do not need
-    the filtering functionality of \QA and can therefore skip the
-    filter attributes.
-
-    Now, we build up the table of contents. An item in the table is
-    defined by the \c section tag which contains the attributes for the
-    item title as well as link to the actual page. Section tags can be
-    nested infinitely, but for practical reasons it is not recommended
-    to nest them deeper than three or four levels. For our example we
-    want to use the following outline for the table of contents:
-
-    \list
-    \li Simple Text Viewer
-      \list
-      \li Find File
-        \list
-        \li File Dialog
-        \li Wildcard Matching
-        \li Browse
-        \endlist
-      \li Open File
-      \endlist
-    \endlist
-
-    In the help project file, the outline is represented by:
-
-    \code
-     <filterSection>
-       <toc>
-         <section title="Simple Text Viewer" ref="index.html">
-           <section title="Find File" ref="./findfile.html">
-             <section title="File Dialog" ref="./filedialog.html"></section>
-             <section title="Wildcard Matching" ref="./wildcardmatching.html"></section>
-             <section title="Browse" ref="./browse.html"></section>
-           </section>
-           <section title="Open File" ref="./openfile.html"></section>
-         </section>
-       </toc>
-    \endcode
-
-    After the table of contents is defined, we will list all index keywords:
-
-    \code
-        <keywords>
-          <keyword name="Display" ref="./index.html"/>
-          <keyword name="Rich text" ref="./index.html"/>
-          <keyword name="Plain text" ref="./index.html"/>
-          <keyword name="Find" ref="./findfile.html"/>
-          <keyword name="File menu" ref="./findfile.html"/>
-          <keyword name="File name" ref="./filedialog.html"/>
-          <keyword name="File dialog" ref="./filedialog.html"/>
-          <keyword name="File globbing" ref="./wildcardmatching.html"/>
-          <keyword name="Wildcard matching" ref="./wildcardmatching.html"/>
-          <keyword name="Wildcard syntax" ref="./wildcardmatching.html"/>
-          <keyword name="Browse" ref="./browse.html"/>
-          <keyword name="Directory" ref="./browse.html"/>
-          <keyword name="Open" ref="./openfile.html"/>
-          <keyword name="Select" ref="./openfile.html"/>
-        </keywords>
-    \endcode
-
-    As the last step, we have to list all files making up the documentation.
-    An important point to note here is that all files have to listed, including
-    image files, and even stylesheets if they are used.
-
-    \code
-        <files>
-          <file>browse.html</file>
-          <file>filedialog.html</file>
-          <file>findfile.html</file>
-          <file>index.html</file>
-          <file>intro.html</file>
-          <file>openfile.html</file>
-          <file>wildcardmatching.html</file>
-          <file>images/browse.png</file>
-          <file>images/*.png</file>
-        </files>
-      </filterSection>
-    </QtHelpProject>
-    \endcode
-
-    The help project file is now finished. If you want to see the resulting
-    documentation in \QA, you have to generate a Qt compressed help file
-    out of it and register it with the default help collection of \QA.
-
-    \code
-    qhelpgenerator simpletextviewer.qhp -o simpletextviewer.qch
-    assistant -register simpletextviewer.qch
-    \endcode
-
-    If you start \QA now, you'll see the Simple Text Viewer documentation
-    beside the Qt documentation. This is OK for testing purposes, but
-    for the final version we want to only have the Simple Text Viewer
-    documentation in \QA.
-
-    \section2 Customizing \QA
-
-    The easiest way to make \QA only display the Simple Text Viewer
-    documentation is to create our own help collection file. A collection
-    file is stored in a binary format, similar to the compressed help file,
-    and generated from a help collection project file (*.qhcp). With
-    the help of a collection file, we can customize the appearance and even
-    some functionality offered by \QA.
-
-    At first, we change the window title and icon. Instead of showing "\QA"
-    it will show "Simple Text Viewer", so it is much clearer for the user
-    that the help viewer actually belongs to our application.
-
-    \code
-    <?xml version="1.0" encoding="UTF-8"?>
-    <QHelpCollectionProject version="1.0">
-    <assistant>
-        <title>Simple Text Viewer</title>
-        <applicationIcon>images/handbook.png</applicationIcon>
-        <cacheDirectory>Trolltech/SimpleTextViewer</cacheDirectory>
-    \endcode
-
-    The \c cacheDirectory tag specifies a subdirectory of the users
-    data directory (see the
-    \l{Customizing Qt Assistant#Qt Help Collection Files}{Qt Help Collection Files})
-    where the cache file for the full text search or the settings file will
-    be stored.
-
-    After this, we set the page displayed by \QA when launched for the very
-    first time in its new configuration. The URL consists of the namespace
-    and virtual folder defined in the Qt help project file, followed by the
-    actual page file name.
-
-    \code
-        <startPage>qthelp://com.trolltech.examples.simpletextviewer/doc/index.html</startPage>
-    \endcode
-
-    Next, we alter the name of the "About" menu item to "About Simple
-    Text Viewer". The contents of the \gui{About} dialog are also changed
-    by specifying a file where the about text or icon is taken from.
-
-    \code
-        <aboutMenuText>
-            <text>About Simple Text Viewer</text>
-        </aboutMenuText>
-        <aboutDialog>
-            <file>about.txt</file>
-            <icon>images/icon.png</icon>
-        </aboutDialog>
-    \endcode
-
-    \QA offers the possibility to add or remove documentation via its
-    preferences dialog. This functionality is helpful when using \QA
-    as the central help viewer for more applications, but in our case
-    we want to actually prevent the user from removing the documentation.
-    So, we hide the \gui Documentation tab in the \gui Preferences dialog.
-
-    Since the address bar is not really relevant in such a small
-    documentation set we switch it off as well. By having just one filter
-    section, without any filter attributes, we can also disable the filter
-    functionality of \QA, which means that the filter page and the filter
-    toolbar will not be available.
-
-    \code
-        <enableDocumentationManager>false</enableDocumentationManager>
-        <enableAddressBar>false</enableAddressBar>
-        <enableFilterFunctionality>false</enableFilterFunctionality>
-    </assistant>
-    \endcode
-
-    For testing purposes, we already generated the compressed help file
-    and registered it with \QA's default help collection. With the
-    following lines we achieve the same result. The only and important
-    difference is that we register the compressed help file, not in
-    the default collection, but in our own collection file.
-
-    \code
-      <docFiles>
-        <generate>
-            <file>
-                <input>simpletextviewer.qhp</input>
-                <output>simpletextviewer.qch</output>
-                </file>
-            </generate>
-        <register>
-            <file>simpletextviewer.qch</file>
-            </register>
-        </docFiles>
-    </QHelpCollectionProject>
-    \endcode
-
-    As the last step, we have to generate the binary collection file
-    out of the help collection project file. This is done by running the
-    \c qcollectiongenerator tool.
-
-    \code
-    qcollectiongenerator simpletextviewer.qhcp -o simpletextviewer.qhc
-    \endcode
-
-    To test all our customizations made to \QA, we add the collection
-    file name to the command line:
-
-    \code
-    assistant -collectionFile simpletextviewer.qhc
-    \endcode
-
-    \section1 Controlling \QA via the Assistant Class
-
-    We will first take a look at how to start and operate \QA from a
-    remote application. For that purpose, we create a class called
-    \c Assistant.
-
-    This class provides a public function that is used to show pages
-    of the documentation, and one private helper function to make sure
-    that \QA is up and running.
-
-    Launching \QA is done in the function \c startAssistant() by simply
-    creating and starting a QProcess. If the process is already running,
-    the function returns immediately. Otherwise, the process has
-    to be set up and started.
-
-    \snippet simpletextviewer/assistant.cpp 2
-
-    To start the process we need the executable name of \QA as well as the
-    command line arguments for running \QA in a customized mode. The
-    executable name is a little bit tricky since it depends on the
-    platform, but fortunately it is only different on Mac OS X.
-
-    The displayed documentation can be altered using the \c -collectionFile
-    command line argument when launching \QA. When started without any options,
-    \QA displays a default set of documentation. When Qt is installed,
-    the default documentation set in \QA contains the Qt reference
-    documentation as well as the tools that come with Qt, such as Qt
-    Designer and \c qmake.
-
-    In our example, we replace the default documentation set with our
-    custom documentation by passing our application-specific collection
-    file to the process's command line options.
-
-    As the last argument, we add \c -enableRemoteControl, which makes \QA
-    listen to its \c stdin channel for commands, such as those to display
-    a certain page in the documentation.
-    Then we start the process and wait until it is actually running. If,
-    for some reason \QA cannot be started, \c startAssistant() will return
-    false.
-
-    The implementation for \c showDocumentation() is now straightforward.
-    Firstly, we ensure that \QA is running, then we send the request to
-    display the \a page via the \c stdin channel of the process. It is very
-    important here that the command is terminated by the '\\0' character
-    followed by an end of line token to flush the channel.
-
-    \snippet simpletextviewer/assistant.cpp 1
-
-    Finally, we make sure that \QA is terminated properly in the case that
-    the application is shut down. The destructor of QProcess kills the
-    process, meaning that the application has no possibility to do things
-    like save user settings, which would result in corrupted settings files.
-    To avoid this, we ask \QA to terminate in the destructor of the
-    \c Assistant class.
-
-    \snippet simpletextviewer/assistant.cpp 0
-
-    \section1 MainWindow Class
-
-    \image simpletextviewer-mainwindow.png
-
-    The \c MainWindow class provides the main application window with
-    two menus: the \gui File menu lets the user open and view an
-    existing file, while the \gui Help menu provides information about
-    the application and about Qt, and lets the user open \QA to
-    display the application's documentation.
-
-    To be able to access the help functionality, we initialize the
-    \c Assistant object in the \c MainWindow's constructor.
-
-    \snippet simpletextviewer/mainwindow.cpp 0
-    \dots
-    \snippet simpletextviewer/mainwindow.cpp 1
-
-    Then we create all the actions for the Simple Text Viewer application.
-    Of special interest is the \c assistantAct action accessible
-    via the \key{F1} shortcut or the \gui Help > \gui {Help Contents} menu item.
-    This action is connected to the \c showDocumentation() slot of
-    the \c MainWindow class.
-
-    \snippet simpletextviewer/mainwindow.cpp 4
-    \dots
-    \snippet simpletextviewer/mainwindow.cpp 5
-
-    In the \c showDocumentation() slot, we call the \c showDocumentation()
-    function of the \c Assistant class with the URL of home page of the
-    documentation.
-
-    \snippet simpletextviewer/mainwindow.cpp 3
-
-    Finally, we must reimplement the protected QWidget::closeEvent()
-    event handler to ensure that the application's \QA instance is
-    properly closed before we terminate the application.
-
-    \snippet simpletextviewer/mainwindow.cpp 2
-
-    \section1 FindFileDialog Class
-
-    \image simpletextviewer-findfiledialog.png
-
-    The Simple Text Viewer application provides a find file dialog
-    allowing the user to search for files using wildcard matching. The
-    search is performed within the specified directory, and the user
-    is given an option to browse the existing file system to find the
-    relevant directory.
-
-    In the constructor we save the references to the \c Assistant
-    and \c QTextEdit objects passed as arguments. The \c Assistant
-    object will be used in the \c FindFileDialog's \c help() slot,
-    as we will see shortly, while the QTextEdit will be used in the
-    dialog's \c openFile() slot to display the chosen file.
-
-    \snippet simpletextviewer/findfiledialog.cpp 0
-    \dots
-    \snippet simpletextviewer/findfiledialog.cpp 1
-
-    The most relevant member to observe in the \c FindFileDialog
-    class is the private \c help() slot. The slot is connected to the
-    dialog's \gui Help button, and brings the current \QA instance
-    to the foreground with the documentation for the dialog by
-    calling \c Assistant's \c showDocumentation() function.
-
-    \snippet simpletextviewer/findfiledialog.cpp 2
-
-    \section1 Summary
-
-    In order to make \QA act as a customized help tool for
-    your application, you must provide your application with a
-    process that controls \QA in addition to a custom help collection
-    file including Qt compressed help files.
-
-    For  more information about the options and settings available to
-    applications that use \QA as a custom help viewer, see
-    \l{Customizing Qt Assistant}.
-*/
diff --git a/examples/designer/doc/src/arthurplugin.qdoc b/examples/designer/doc/src/arthurplugin.qdoc
index 0f116e7..9dbfaa7 100644
--- a/examples/designer/doc/src/arthurplugin.qdoc
+++ b/examples/designer/doc/src/arthurplugin.qdoc
@@ -27,10 +27,10 @@
 
 /*!
     \example arthurplugin
+    \ingroup examples-designer
     \title Arthur Plugin
 
-    \brief In this example we demonstrate the abilities of Qt's painting system
-    in combination with \QD's custom widget plugin facilities.
+    \brief Using the Qt painting system with \QD custom widget plugins.
 
     \image arthurplugin-demo.png
 
diff --git a/examples/designer/doc/src/calculatorbuilder.qdoc b/examples/designer/doc/src/calculatorbuilder.qdoc
index b845354..cb6f6f4 100644
--- a/examples/designer/doc/src/calculatorbuilder.qdoc
+++ b/examples/designer/doc/src/calculatorbuilder.qdoc
@@ -27,10 +27,10 @@
 
 /*!
     \example calculatorbuilder
+    \ingroup examples-designer
     \title Calculator Builder Example
 
-    \brief The Calculator Builder example shows how to create a user interface from
-    a \QD form at run-time, using the QUiLoader class.
+    \brief Creating a user interface from a \QD form at run-time.
 
     \image calculatorbuilder-example.png
 
diff --git a/examples/designer/doc/src/calculatorform.qdoc b/examples/designer/doc/src/calculatorform.qdoc
index 063086b..68e47c1 100644
--- a/examples/designer/doc/src/calculatorform.qdoc
+++ b/examples/designer/doc/src/calculatorform.qdoc
@@ -27,9 +27,12 @@
 
 /*!
     \example calculatorform
+    \ingroup examples-designer
     \title Calculator Form Example
 
-    \brief The Calculator Form Example shows how to use a form created with
+    \brief Using a form created with \QD in an application.
+
+    The Calculator Form Example shows how to use a form created with
     \QD in an application by using the user interface information from
     a QWidget subclass.  We use \l{Using a Designer UI File in Your Application}
     {uic's auto-connection} feature to automatically connect signals
diff --git a/examples/designer/doc/src/containerextension.qdoc b/examples/designer/doc/src/containerextension.qdoc
index 093993a..5b1b551 100644
--- a/examples/designer/doc/src/containerextension.qdoc
+++ b/examples/designer/doc/src/containerextension.qdoc
@@ -27,10 +27,13 @@
 
 /*!
     \example containerextension
+    \ingroup examples-designer
     \title Container Extension Example
 
-    \brief The Container Extension example shows how to create a custom
-    multi-page plugin for Qt Designer using the
+    \brief Creating a custom multi-page plugin for \QD.
+
+    The Container Extension example shows how to create a custom multi-page
+    plugin for \QD using the
     QDesignerContainerExtension class.
 
     \image containerextension-example.png
diff --git a/examples/designer/doc/src/customwidgetplugin.qdoc b/examples/designer/doc/src/customwidgetplugin.qdoc
index 3206136..b96b3d3 100644
--- a/examples/designer/doc/src/customwidgetplugin.qdoc
+++ b/examples/designer/doc/src/customwidgetplugin.qdoc
@@ -27,9 +27,10 @@
 
 /*!
     \example customwidgetplugin
+    \ingroup examples-designer
     \title Custom Widget Plugin Example
 
-    \brief The Custom Widget example shows how to create a custom widget plugin for \QD.
+    \brief Creating a custom widget plugin for Qt Designer.
 
     \image customwidgetplugin-example.png
 
diff --git a/examples/designer/doc/src/taskmenuextension.qdoc b/examples/designer/doc/src/taskmenuextension.qdoc
index ee80bad..b40e7b8 100644
--- a/examples/designer/doc/src/taskmenuextension.qdoc
+++ b/examples/designer/doc/src/taskmenuextension.qdoc
@@ -27,9 +27,13 @@
 
 /*!
     \example taskmenuextension
+    \ingroup examples-designer
     \title Task Menu Extension Example
 
-    \brief The Task Menu Extension example shows how to create a custom
+    \brief Creating a custom widget plugin for \QD and providing custom task
+    menu entries that are associated with the plugin.
+
+    The Task Menu Extension example shows how to create a custom
     widget plugin for \l {Qt Designer Manual}{\QD}, and how to to use
     the QDesignerTaskMenuExtension class to provide custom task menu
     entries associated with the plugin.
diff --git a/examples/designer/doc/src/worldtimeclockbuilder.qdoc b/examples/designer/doc/src/worldtimeclockbuilder.qdoc
index 721d59e..980c0f6 100644
--- a/examples/designer/doc/src/worldtimeclockbuilder.qdoc
+++ b/examples/designer/doc/src/worldtimeclockbuilder.qdoc
@@ -27,11 +27,11 @@
 
 /*!
   \example worldtimeclockbuilder
+  \ingroup examples-designer
   \title World Time Clock Builder Example
 
-  \brief The World Time Clock Builder example shows how forms created with Qt
-  Designer that contain custom widgets can be dynamically generated at
-  run-time.
+  \brief Creating forms with Qt Designer that contain custom widgets that can be
+  dynamically generated at run-time.
 
   \image worldtimeclockbuilder-example.png
 
diff --git a/examples/designer/doc/src/worldtimeclockplugin.qdoc b/examples/designer/doc/src/worldtimeclockplugin.qdoc
index 58770a4..4d3042b 100644
--- a/examples/designer/doc/src/worldtimeclockplugin.qdoc
+++ b/examples/designer/doc/src/worldtimeclockplugin.qdoc
@@ -27,10 +27,10 @@
 
 /*!
     \example worldtimeclockplugin
+    \ingroup examples-designer
     \title World Time Clock Plugin Example
 
-    \brief The World Time Clock Plugin example shows how to create a custom
-    widget plugin for \QD that uses signals and slots.
+    \brief Creating a custom widget plugin for \QD that uses signals and slots.
 
     \image worldtimeclockplugin-example.png
 
diff --git a/examples/help/doc/src/contextsensitivehelp.qdoc b/examples/help/doc/src/contextsensitivehelp.qdoc
new file mode 100644
index 0000000..2e98caf
--- /dev/null
+++ b/examples/help/doc/src/contextsensitivehelp.qdoc
@@ -0,0 +1,35 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/legal
+**
+** This file is part of the documentation of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:FDL$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and Digia.  For licensing terms and
+** conditions see http://qt.digia.com/licensing.  For further information
+** use the contact form at http://qt.digia.com/contact-us.
+**
+** GNU Free Documentation License Usage
+** Alternatively, this file may be used under the terms of the GNU Free
+** Documentation License version 1.3 as published by the Free Software
+** Foundation and appearing in the file included in the packaging of
+** this file.  Please review the following information to ensure
+** the GNU Free Documentation License version 1.3 requirements
+** will be met: http://www.gnu.org/copyleft/fdl.html.
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+/*!
+    \example contextsensitivehelp
+    \ingroup examples-qthelp
+    \title Context-Sensitive Help Example
+
+    \brief Using the QHelpEngineCore class to implement context-sensitive help
+    for applications.
+*/
diff --git a/examples/help/help.pro b/examples/help/help.pro
index c98aad8..49aae93 100644
--- a/examples/help/help.pro
+++ b/examples/help/help.pro
@@ -1,5 +1,4 @@
 TEMPLATE = subdirs
 CONFIG  += ordered
 
-SUBDIRS += contextsensitivehelp \
-           remotecontrol
+SUBDIRS += contextsensitivehelp
diff --git a/examples/help/remotecontrol/enter.png b/examples/help/remotecontrol/enter.png
deleted file mode 100644
index f397f4b..0000000
Binary files a/examples/help/remotecontrol/enter.png and /dev/null differ
diff --git a/examples/help/remotecontrol/main.cpp b/examples/help/remotecontrol/main.cpp
deleted file mode 100644
index a862cb2..0000000
--- a/examples/help/remotecontrol/main.cpp
+++ /dev/null
@@ -1,53 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/legal
-**
-** This file is part of the examples of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:BSD$
-** You may use this file under the terms of the BSD license as follows:
-**
-** "Redistribution and use in source and binary forms, with or without
-** modification, are permitted provided that the following conditions are
-** met:
-**   * Redistributions of source code must retain the above copyright
-**     notice, this list of conditions and the following disclaimer.
-**   * Redistributions in binary form must reproduce the above copyright
-**     notice, this list of conditions and the following disclaimer in
-**     the documentation and/or other materials provided with the
-**     distribution.
-**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
-**     of its contributors may be used to endorse or promote products derived
-**     from this software without specific prior written permission.
-**
-**
-** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-#include <QtWidgets/QApplication>
-#include "remotecontrol.h"
-
-int main(int argc, char *argv[])
-{
-    Q_INIT_RESOURCE(remotecontrol);
-
-    QApplication a(argc, argv);
-    RemoteControl w;
-    w.show();
-    a.connect(&a, SIGNAL(lastWindowClosed()), &a, SLOT(quit()));
-    return a.exec();
-}
diff --git a/examples/help/remotecontrol/remotecontrol.cpp b/examples/help/remotecontrol/remotecontrol.cpp
deleted file mode 100644
index 2569829..0000000
--- a/examples/help/remotecontrol/remotecontrol.cpp
+++ /dev/null
@@ -1,174 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/legal
-**
-** This file is part of the examples of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:BSD$
-** You may use this file under the terms of the BSD license as follows:
-**
-** "Redistribution and use in source and binary forms, with or without
-** modification, are permitted provided that the following conditions are
-** met:
-**   * Redistributions of source code must retain the above copyright
-**     notice, this list of conditions and the following disclaimer.
-**   * Redistributions in binary form must reproduce the above copyright
-**     notice, this list of conditions and the following disclaimer in
-**     the documentation and/or other materials provided with the
-**     distribution.
-**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
-**     of its contributors may be used to endorse or promote products derived
-**     from this software without specific prior written permission.
-**
-**
-** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-#include <QtCore/QDir>
-#include <QtCore/QProcess>
-#include <QtCore/QTextStream>
-#include <QtCore/QLibraryInfo>
-
-#include <QtWidgets/QMessageBox>
-
-#include "remotecontrol.h"
-
-RemoteControl::RemoteControl(QWidget *parent, Qt::WindowFlags flags)
-        : QMainWindow(parent, flags)
-{
-    ui.setupUi(this);
-    connect(ui.indexLineEdit, SIGNAL(returnPressed()),
-        this, SLOT(on_indexButton_clicked()));
-    connect(ui.identifierLineEdit, SIGNAL(returnPressed()),
-        this, SLOT(on_identifierButton_clicked()));
-    connect(ui.urlLineEdit, SIGNAL(returnPressed()),
-        this, SLOT(on_urlButton_clicked()));
-
-    QString rc;
-    QTextStream(&rc) << QLatin1String("qthelp://com.trolltech.qt.")
-                     << (QT_VERSION >> 16) << ((QT_VERSION >> 8) & 0xFF)
-                     << (QT_VERSION & 0xFF)
-                     << QLatin1String("/qdoc/index.html");
-
-    ui.startUrlLineEdit->setText(rc);
-
-    process = new QProcess(this);
-    connect(process, SIGNAL(finished(int,QProcess::ExitStatus)),
-        this, SLOT(helpViewerClosed()));
-}
-
-RemoteControl::~RemoteControl()
-{
-    if (process->state() == QProcess::Running) {
-        process->terminate();
-        process->waitForFinished(3000);
-    }
-}
-
-void RemoteControl::on_actionQuit_triggered()
-{
-    close();
-}
-
-void RemoteControl::on_launchButton_clicked()
-{
-    if (process->state() == QProcess::Running)
-        return;
-
-    QString app = QLibraryInfo::location(QLibraryInfo::BinariesPath) + QDir::separator();
-#if !defined(Q_OS_MAC)
-    app += QLatin1String("assistant");
-#else
-    app += QLatin1String("Assistant.app/Contents/MacOS/Assistant");
-#endif
-
-    ui.contentsCheckBox->setChecked(true);
-    ui.indexCheckBox->setChecked(true);
-    ui.bookmarksCheckBox->setChecked(true);
-
-    QStringList args;
-    args << QLatin1String("-enableRemoteControl");
-    process->start(app, args);
-    if (!process->waitForStarted()) {
-        QMessageBox::critical(this, tr("Remote Control"),
-            tr("Could not start Qt Assistant from %1.").arg(app));
-        return;
-    }
-
-    if (!ui.startUrlLineEdit->text().isEmpty())
-        sendCommand(QLatin1String("SetSource ")
-            + ui.startUrlLineEdit->text());
-        
-    ui.launchButton->setEnabled(false);
-    ui.startUrlLineEdit->setEnabled(false);
-    ui.actionGroupBox->setEnabled(true);
-}
-
-void RemoteControl::sendCommand(const QString &cmd)
-{
-    if (process->state() != QProcess::Running)
-        return;
-    process->write(cmd.toLocal8Bit() + '\n');
-}
-
-void RemoteControl::on_indexButton_clicked()
-{
-    sendCommand(QLatin1String("ActivateKeyword ")
-        + ui.indexLineEdit->text());
-}
-
-void RemoteControl::on_identifierButton_clicked()
-{
-    sendCommand(QLatin1String("ActivateIdentifier ")
-        + ui.identifierLineEdit->text());
-}
-
-void RemoteControl::on_urlButton_clicked()
-{
-    sendCommand(QLatin1String("SetSource ")
-        + ui.urlLineEdit->text());
-}
-
-void RemoteControl::on_syncContentsButton_clicked()
-{
-    sendCommand(QLatin1String("SyncContents"));
-}
-
-void RemoteControl::on_contentsCheckBox_toggled(bool checked)
-{
-    sendCommand(checked ?
-        QLatin1String("Show Contents") : QLatin1String("Hide Contents"));
-}
-
-void RemoteControl::on_indexCheckBox_toggled(bool checked)
-{
-    sendCommand(checked ?
-        QLatin1String("Show Index") : QLatin1String("Hide Index"));
-}
-
-void RemoteControl::on_bookmarksCheckBox_toggled(bool checked)
-{
-    sendCommand(checked ?
-        QLatin1String("Show Bookmarks") : QLatin1String("Hide Bookmarks"));
-}
-
-void RemoteControl::helpViewerClosed()
-{
-    ui.launchButton->setEnabled(true);
-    ui.startUrlLineEdit->setEnabled(true);
-    ui.actionGroupBox->setEnabled(false);
-}
diff --git a/examples/help/remotecontrol/remotecontrol.h b/examples/help/remotecontrol/remotecontrol.h
deleted file mode 100644
index ecf50ed..0000000
--- a/examples/help/remotecontrol/remotecontrol.h
+++ /dev/null
@@ -1,78 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/legal
-**
-** This file is part of the examples of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:BSD$
-** You may use this file under the terms of the BSD license as follows:
-**
-** "Redistribution and use in source and binary forms, with or without
-** modification, are permitted provided that the following conditions are
-** met:
-**   * Redistributions of source code must retain the above copyright
-**     notice, this list of conditions and the following disclaimer.
-**   * Redistributions in binary form must reproduce the above copyright
-**     notice, this list of conditions and the following disclaimer in
-**     the documentation and/or other materials provided with the
-**     distribution.
-**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
-**     of its contributors may be used to endorse or promote products derived
-**     from this software without specific prior written permission.
-**
-**
-** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-#ifndef REMOTECONTROL_H
-#define REMOTECONTROL_H
-
-#include <QtWidgets/QMainWindow>
-#include "ui_remotecontrol.h"
-
-QT_BEGIN_NAMESPACE
-class QProcess;
-QT_END_NAMESPACE;
-
-class RemoteControl : public QMainWindow
-{
-    Q_OBJECT
-
-public:
-    RemoteControl(QWidget *parent = 0, Qt::WindowFlags flags = 0);
-    ~RemoteControl();
-    
-private:
-    Ui::RemoteControlClass ui;
-    QProcess *process;
-    
-private slots:
-    void on_launchButton_clicked();
-    void on_actionQuit_triggered();
-    void on_indexButton_clicked();
-    void on_identifierButton_clicked();
-    void on_urlButton_clicked();
-    void on_syncContentsButton_clicked();
-    void on_contentsCheckBox_toggled(bool checked);
-    void on_indexCheckBox_toggled(bool checked);
-    void on_bookmarksCheckBox_toggled(bool checked);
-    void helpViewerClosed();
-
-    void sendCommand(const QString &cmd);
-};
-
-#endif // REMOTECONTROL_H
diff --git a/examples/help/remotecontrol/remotecontrol.pro b/examples/help/remotecontrol/remotecontrol.pro
deleted file mode 100644
index 78ce822..0000000
--- a/examples/help/remotecontrol/remotecontrol.pro
+++ /dev/null
@@ -1,12 +0,0 @@
-TEMPLATE   = app
-QT        += widgets
-
-HEADERS   += remotecontrol.h
-SOURCES   += main.cpp \
-             remotecontrol.cpp
-FORMS     += remotecontrol.ui
-RESOURCES += remotecontrol.qrc
-
-target.path = $$[QT_INSTALL_EXAMPLES]/help/remotecontrol
-INSTALLS += target
-
diff --git a/examples/help/remotecontrol/remotecontrol.qrc b/examples/help/remotecontrol/remotecontrol.qrc
deleted file mode 100644
index 9b4299d..0000000
--- a/examples/help/remotecontrol/remotecontrol.qrc
+++ /dev/null
@@ -1,5 +0,0 @@
-<RCC>
-    <qresource prefix="/remotecontrol" >
-        <file>enter.png</file>
-    </qresource>
-</RCC>
diff --git a/examples/help/remotecontrol/remotecontrol.ui b/examples/help/remotecontrol/remotecontrol.ui
deleted file mode 100644
index 1cfc7f5..0000000
--- a/examples/help/remotecontrol/remotecontrol.ui
+++ /dev/null
@@ -1,228 +0,0 @@
-<ui version="4.0" >
- <class>RemoteControlClass</class>
- <widget class="QMainWindow" name="RemoteControlClass" >
-  <property name="geometry" >
-   <rect>
-    <x>0</x>
-    <y>0</y>
-    <width>344</width>
-    <height>364</height>
-   </rect>
-  </property>
-  <property name="windowTitle" >
-   <string>RemoteControl</string>
-  </property>
-  <widget class="QWidget" name="centralWidget" >
-   <layout class="QGridLayout" >
-    <item row="0" column="0" >
-     <widget class="QLabel" name="label" >
-      <property name="text" >
-       <string>Start URL:</string>
-      </property>
-     </widget>
-    </item>
-    <item row="0" column="1" colspan="2" >
-     <widget class="QLineEdit" name="startUrlLineEdit" />
-    </item>
-    <item row="1" column="1" >
-     <widget class="QPushButton" name="launchButton" >
-      <property name="text" >
-       <string>Launch Qt HelpViewer</string>
-      </property>
-     </widget>
-    </item>
-    <item row="1" column="2" >
-     <spacer>
-      <property name="orientation" >
-       <enum>Qt::Horizontal</enum>
-      </property>
-      <property name="sizeHint" >
-       <size>
-        <width>101</width>
-        <height>20</height>
-       </size>
-      </property>
-     </spacer>
-    </item>
-    <item row="2" column="1" >
-     <spacer>
-      <property name="orientation" >
-       <enum>Qt::Vertical</enum>
-      </property>
-      <property name="sizeType" >
-       <enum>QSizePolicy::Fixed</enum>
-      </property>
-      <property name="sizeHint" >
-       <size>
-        <width>113</width>
-        <height>16</height>
-       </size>
-      </property>
-     </spacer>
-    </item>
-    <item row="3" column="0" colspan="3" >
-     <widget class="QGroupBox" name="actionGroupBox" >
-      <property name="enabled" >
-       <bool>false</bool>
-      </property>
-      <property name="title" >
-       <string>Actions</string>
-      </property>
-      <layout class="QGridLayout" >
-       <item row="0" column="0" >
-        <widget class="QLabel" name="label_2" >
-         <property name="text" >
-          <string>Search in Index:</string>
-         </property>
-        </widget>
-       </item>
-       <item row="0" column="1" colspan="2" >
-        <layout class="QHBoxLayout" >
-         <property name="spacing" >
-          <number>0</number>
-         </property>
-         <item>
-          <widget class="QLineEdit" name="indexLineEdit" />
-         </item>
-         <item>
-          <widget class="QToolButton" name="indexButton" >
-           <property name="text" >
-            <string/>
-           </property>
-           <property name="icon" >
-            <iconset resource="remotecontrol.qrc" >:/remotecontrol/enter.png</iconset>
-           </property>
-          </widget>
-         </item>
-        </layout>
-       </item>
-       <item row="1" column="0" >
-        <widget class="QLabel" name="label_4" >
-         <property name="text" >
-          <string>Identifier:</string>
-         </property>
-        </widget>
-       </item>
-       <item row="1" column="1" colspan="2" >
-        <layout class="QHBoxLayout" >
-         <property name="spacing" >
-          <number>0</number>
-         </property>
-         <item>
-          <widget class="QLineEdit" name="identifierLineEdit" />
-         </item>
-         <item>
-          <widget class="QToolButton" name="identifierButton" >
-           <property name="text" >
-            <string/>
-           </property>
-           <property name="icon" >
-            <iconset resource="remotecontrol.qrc" >:/remotecontrol/enter.png</iconset>
-           </property>
-          </widget>
-         </item>
-        </layout>
-       </item>
-       <item row="2" column="0" >
-        <widget class="QLabel" name="label_3" >
-         <property name="text" >
-          <string>Show URL:</string>
-         </property>
-        </widget>
-       </item>
-       <item row="2" column="1" colspan="2" >
-        <layout class="QHBoxLayout" >
-         <property name="spacing" >
-          <number>0</number>
-         </property>
-         <item>
-          <widget class="QLineEdit" name="urlLineEdit" />
-         </item>
-         <item>
-          <widget class="QToolButton" name="urlButton" >
-           <property name="text" >
-            <string/>
-           </property>
-           <property name="icon" >
-            <iconset resource="remotecontrol.qrc" >:/remotecontrol/enter.png</iconset>
-           </property>
-          </widget>
-         </item>
-        </layout>
-       </item>
-       <item row="3" column="1" >
-        <widget class="QPushButton" name="syncContentsButton" >
-         <property name="text" >
-          <string>Sync Contents</string>
-         </property>
-        </widget>
-       </item>
-       <item row="3" column="2" >
-        <spacer>
-         <property name="orientation" >
-          <enum>Qt::Horizontal</enum>
-         </property>
-         <property name="sizeHint" >
-          <size>
-           <width>81</width>
-           <height>20</height>
-          </size>
-         </property>
-        </spacer>
-       </item>
-       <item row="4" column="0" colspan="3" >
-        <widget class="QCheckBox" name="contentsCheckBox" >
-         <property name="text" >
-          <string>Show Contents</string>
-         </property>
-        </widget>
-       </item>
-       <item row="5" column="0" >
-        <widget class="QCheckBox" name="indexCheckBox" >
-         <property name="text" >
-          <string>Show Index</string>
-         </property>
-        </widget>
-       </item>
-       <item row="6" column="0" colspan="3" >
-        <widget class="QCheckBox" name="bookmarksCheckBox" >
-         <property name="text" >
-          <string>Show Bookmarks</string>
-         </property>
-        </widget>
-       </item>
-      </layout>
-     </widget>
-    </item>
-   </layout>
-  </widget>
-  <widget class="QMenuBar" name="menuBar" >
-   <property name="geometry" >
-    <rect>
-     <x>0</x>
-     <y>0</y>
-     <width>344</width>
-     <height>21</height>
-    </rect>
-   </property>
-   <widget class="QMenu" name="menuFile" >
-    <property name="title" >
-     <string>File</string>
-    </property>
-    <addaction name="actionQuit" />
-   </widget>
-   <addaction name="menuFile" />
-  </widget>
-  <widget class="QStatusBar" name="statusBar" />
-  <action name="actionQuit" >
-   <property name="text" >
-    <string>Quit</string>
-   </property>
-  </action>
- </widget>
- <layoutdefault spacing="6" margin="11" />
- <resources>
-  <include location="remotecontrol.qrc" />
- </resources>
- <connections/>
-</ui>
diff --git a/examples/uitools/doc/src/multipleinheritance.qdoc b/examples/uitools/doc/src/multipleinheritance.qdoc
index aec4da9..ca3ade2 100644
--- a/examples/uitools/doc/src/multipleinheritance.qdoc
+++ b/examples/uitools/doc/src/multipleinheritance.qdoc
@@ -27,8 +27,11 @@
 
 /*!
     \example multipleinheritance
+    \ingroup examples-qtuitools
     \title Multiple Inheritance Example
 
+    \brief Using a form created with Qt Designer in an application.
+
     The Multiple Inheritance Example shows how to use a form created with
     Qt Designer in an application by subclassing both QWidget and the user
     interface class, which is \c{Ui::CalculatorForm}.
diff --git a/examples/uitools/doc/src/textfinder.qdoc b/examples/uitools/doc/src/textfinder.qdoc
index c05e350..7552b08 100644
--- a/examples/uitools/doc/src/textfinder.qdoc
+++ b/examples/uitools/doc/src/textfinder.qdoc
@@ -27,10 +27,12 @@
 
 /*!
     \example textfinder
+    \ingroup examples-qtuitools
     \title Text Finder Example
 
-    \brief The Text Finder example demonstrates how to dynamically process forms
-    using the Qt UI Tools module. Dynamic form processing enables a form to
+    \brief Dynamically processing forms using Qt UI Tools.
+
+    Dynamic form processing enables a form to
     be processed at run-time only by changing the UI file for the project.
     The program allows the user to look up a particular word within the
     contents of a text file. This text file is included in the project's
diff --git a/src/assistant/assistant/doc/src/assistant-example.qdoc b/src/assistant/assistant/doc/src/assistant-example.qdoc
index 5cc03ef..f107202 100644
--- a/src/assistant/assistant/doc/src/assistant-example.qdoc
+++ b/src/assistant/assistant/doc/src/assistant-example.qdoc
@@ -26,21 +26,25 @@
 ****************************************************************************/
 
 /*!
-    \group examples-qtassistant.html
+    \group examples-qtassistant
     \ingroup all-examples
     \title Qt Assistant Examples
-    \brief Adding interactive help to your Qt application.
+    \brief Using Qt Assistant as a help viewer for  Qt applications.
 
-    \image assistant-examples.png HelpSystem
+    \image assistant-examples.png
 
-    Support for interactive help is provided by the Qt Assistant application.
-    Developers can take advantages of the facilities it offers to display
-    specially-prepared documentation to users of their applications.
+    Qt Assistant provides support for interactive help and enables you to
+    display customer documentation to users of your Qt applications.
 
+    The following examples illustrate how to use Qt Assistant as a help viewer
+    for applications.
+
+*/
+
+/*
     \list
     \li \l{simpletextviewer}{Simple Text Viewer}\raisedaster
-    \li \l{help/remotecontrol}{Remote Control}
-    \li \l{help/contextsensitivehelp}{Context-Sensitive Help}
+    \li \l{remotecontrol}{Remote Control}
     \endlist
 
     Examples marked with an asterisk (*) are fully documented.
diff --git a/src/assistant/help/doc/qthelp.qdocconf b/src/assistant/help/doc/qthelp.qdocconf
index c8cd0c9..2ac84c1 100644
--- a/src/assistant/help/doc/qthelp.qdocconf
+++ b/src/assistant/help/doc/qthelp.qdocconf
@@ -32,7 +32,7 @@ headerdirs += ..
 
 sourcedirs              = ..
 
-exampledirs             = ../../../../../examples/help \
+exampledirs             = ../../../../examples/help \
                           snippets
 
 imagedirs               = images
diff --git a/src/assistant/help/doc/src/qthelp-examples.qdoc b/src/assistant/help/doc/src/qthelp-examples.qdoc
new file mode 100644
index 0000000..d6f441e
--- /dev/null
+++ b/src/assistant/help/doc/src/qthelp-examples.qdoc
@@ -0,0 +1,47 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/legal
+**
+** This file is part of the documentation of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:FDL$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and Digia.  For licensing terms and
+** conditions see http://qt.digia.com/licensing.  For further information
+** use the contact form at http://qt.digia.com/contact-us.
+**
+** GNU Free Documentation License Usage
+** Alternatively, this file may be used under the terms of the GNU Free
+** Documentation License version 1.3 as published by the Free Software
+** Foundation and appearing in the file included in the packaging of
+** this file.  Please review the following information to ensure
+** the GNU Free Documentation License version 1.3 requirements
+** will be met: http://www.gnu.org/copyleft/fdl.html.
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+/*!
+    \group examples-qthelp
+    \ingroup all-examples
+    \title Qt Help Examples
+    \brief Adding context-sensitive help to Qt applications.
+
+    The Qt help system includes tools for generating and viewing Qt help files.
+    In addition, it provides classes for accessing help contents programatically
+    to be able to integrate online help into Qt applications.
+
+    The following example illustrates how to add context-sensitive help to
+    applications.
+
+*/
+
+/*
+    \list
+    \li \l{contextsensitivehelp}{Context-Sensitive Help}
+    \endlist
+*/
diff --git a/src/designer/src/designer/doc/src/designer-examples.qdoc b/src/designer/src/designer/doc/src/designer-examples.qdoc
index 0b649b0..1dce46e 100644
--- a/src/designer/src/designer/doc/src/designer-examples.qdoc
+++ b/src/designer/src/designer/doc/src/designer-examples.qdoc
@@ -26,7 +26,7 @@
 ****************************************************************************/
 
 /*!
-    \group examples-designer.html
+    \group examples-designer
     \ingroup all-examples
     \title Qt Designer Examples
     \brief Using Qt Designer to build your UI.
@@ -35,6 +35,11 @@
     create and configure forms without writing code. GUIs created with
     Qt Designer can be compiled into an application or created at run-time.
 
+    The following examples illustrate how to create and use Qt Designer forms
+    and how to create Qt Designer custom widget plugins.
+*/
+
+/*
     \list
     \li \l{arthurplugin}{Arthur Plugin}
     \li \l{calculatorbuilder}{Calculator Builder}\raisedaster
diff --git a/src/designer/src/uitools/doc/src/qtuitools-examples.qdoc b/src/designer/src/uitools/doc/src/qtuitools-examples.qdoc
index 1500064..45044d6 100644
--- a/src/designer/src/uitools/doc/src/qtuitools-examples.qdoc
+++ b/src/designer/src/uitools/doc/src/qtuitools-examples.qdoc
@@ -26,18 +26,25 @@
 ****************************************************************************/
 
 /*!
-    \group examples-qtuitools.html
+    \group examples-qtuitools
     \ingroup all-examples
     \title Qt UI Tools Examples
     \brief Using Qt UI Tools to process UI forms.
 
     \image uitools-examples.png UiTools
 
+    The \l{Qt UI Tools} module provides classes to handle UI forms created with
+    Qt Designer. The forms are processed at run-time to dynamically generate
+    user interfaces.
+
+    The following examples illustrate how to use Qt UI Tools to process UI
+    forms.
+*/
+
+/*
     \list
         \li \l{Multiple Inheritance Example}\raisedaster
         \li \l{Text Finder Example}\raisedaster
-        \li \l{Calculator Builder Example}\raisedaster
-        \li \l{World Time Clock Builder Example}\raisedaster
     \endlist
 
     Examples marked with an asterisk (*) are fully documented.