diff --git a/src/serialport.cpp b/src/serialport.cpp
index 4d8c344..d6b3250 100755
--- a/src/serialport.cpp
+++ b/src/serialport.cpp
@@ -564,7 +564,7 @@ bool SerialPortPrivate::readFromPort()
         return true;
     }
 
-    readBuffer.chop(int(bytesToRead - qMax(readBytes, qint64(0))));
+    readBuffer.chop(bytesToRead - qMax(readBytes, qint64(0)));
 
     if (readBytes < 0) {
         setError(SerialPort::IoError);
@@ -1763,7 +1763,7 @@ qint64 SerialPort::readData(char *data, qint64 maxSize)
             if (readBytes == -2)
                 d->readBuffer.chop(bytesToRead); // No bytes currently available for reading.
             else
-                d->readBuffer.chop(int(bytesToRead - qMax(readBytes, qint64(0))));
+                d->readBuffer.chop(bytesToRead - qMax(readBytes, qint64(0)));
         }
     }
 
diff --git a/src/serialportengine_unix.cpp b/src/serialportengine_unix.cpp
index 3934f95..5334b0e 100755
--- a/src/serialportengine_unix.cpp
+++ b/src/serialportengine_unix.cpp
@@ -1304,7 +1304,7 @@ qint64 UnixSerialPortEngine::writePerChar(const char *data, qint64 maxSize)
         bool par = evenParity(*data & charMask);
         // False if need EVEN, true if need ODD.
         par ^= dptr->options.parity == SerialPort::MarkParity;
-        if (par ^ bool(m_currentTermios.c_cflag & PARODD)) { // Need switch parity mode?
+        if (par ^ (m_currentTermios.c_cflag & PARODD)) { // Need switch parity mode?
             m_currentTermios.c_cflag ^= PARODD;
             flush(); //force sending already buffered data, because updateTermios() cleares buffers
             //todo: add receiving buffered data!!!
@@ -1371,8 +1371,8 @@ qint64 UnixSerialPortEngine::readPerChar(char *data, qint64 maxSize)
         }
         // Now: par contains parity ok or error, *data contains received character
         par ^= evenParity(*data & charMask); //par contains parity bit value for EVEN mode
-        par ^= bool(m_currentTermios.c_cflag & PARODD); //par contains parity bit value for current mode
-        if (par ^ bool(dptr->options.parity == SerialPort::SpaceParity)) { //if parity error
+        par ^= (m_currentTermios.c_cflag & PARODD); //par contains parity bit value for current mode
+        if (par ^ (dptr->options.parity == SerialPort::SpaceParity)) { //if parity error
             switch (dptr->options.policy) {
             case SerialPort::SkipPolicy:
                 continue;       //ignore received character
diff --git a/src/serialportengine_win.cpp b/src/serialportengine_win.cpp
index f43b66b..66bc703 100755
--- a/src/serialportengine_win.cpp
+++ b/src/serialportengine_win.cpp
@@ -709,7 +709,7 @@ bool WinSerialPortEngine::setRate(qint32 rate, SerialPort::Directions dir)
         dptr->setError(SerialPort::UnsupportedPortOperationError);
         return false;
     }
-    m_currentDcb.BaudRate = DWORD(rate);
+    m_currentDcb.BaudRate = rate;
     return updateDcb();
 }
 
@@ -722,7 +722,7 @@ bool WinSerialPortEngine::setRate(qint32 rate, SerialPort::Directions dir)
 */
 bool WinSerialPortEngine::setDataBits(SerialPort::DataBits dataBits)
 {
-    m_currentDcb.ByteSize = BYTE(dataBits);
+    m_currentDcb.ByteSize = dataBits;
     return updateDcb();
 }
 
diff --git a/src/serialportinfo_win.cpp b/src/serialportinfo_win.cpp
index 6bb3c99..9c7e71e 100644
--- a/src/serialportinfo_win.cpp
+++ b/src/serialportinfo_win.cpp
@@ -100,7 +100,7 @@ static QVariant getDeviceRegistryProperty(HDEVINFO deviceInfoSet,
         case REG_SZ: {
             QString s;
             if (dataSize)
-                s = QString::fromWCharArray(((const wchar_t *)data.constData()));
+                s = QString::fromWCharArray(reinterpret_cast<const wchar_t *>(data.constData()));
             v = QVariant(s);
             break;
         }
@@ -110,7 +110,7 @@ static QVariant getDeviceRegistryProperty(HDEVINFO deviceInfoSet,
             if (dataSize) {
                 int i = 0;
                 forever {
-                    QString s = QString::fromWCharArray((const wchar_t *)data.constData() + i);
+                    QString s = QString::fromWCharArray(reinterpret_cast<const wchar_t *>(data.constData()) + i);
                     i += s.length() + 1;
 
                     if (s.isEmpty())
@@ -126,7 +126,7 @@ static QVariant getDeviceRegistryProperty(HDEVINFO deviceInfoSet,
         case REG_BINARY: {
             QString s;
             if (dataSize)
-                s = QString::fromWCharArray((const wchar_t *)data.constData(), data.size() / 2);
+                s = QString::fromWCharArray(reinterpret_cast<const wchar_t *>(data.constData()), data.size() / 2);
             v = QVariant(s);
             break;
         }
@@ -135,7 +135,7 @@ static QVariant getDeviceRegistryProperty(HDEVINFO deviceInfoSet,
         case REG_DWORD: {
             Q_ASSERT(data.size() == sizeof(int));
             int i = 0;
-            ::memcpy((void *)(&i), data.constData(), sizeof(int));
+            ::memcpy(&i, data.constData(), sizeof(int));
             v = i;
             break;
         }
@@ -180,7 +180,7 @@ static QString getNativeName(HDEVINFO deviceInfoSet,
             if (keyType == REG_SZ) {
 
                 QString itemName = QString::fromUtf16(reinterpret_cast<ushort *>(bufKeyName.data()), lenKeyName);
-                QString itemValue = QString::fromUtf16(((const ushort *)bufKeyVal.constData()));
+                QString itemValue = QString::fromUtf16(reinterpret_cast<const ushort *>(bufKeyVal.constData()));
 
                 if (itemName.contains(QLatin1String("PortName"))) {
                     result = itemValue;
@@ -241,7 +241,7 @@ static QString findDescription(HKEY parentKeyHandle, const QString &subKey)
                 case REG_EXPAND_SZ:
                 case REG_SZ:
                     if (dataSize)
-                        result = QString::fromWCharArray(((const wchar_t *)data.constData()));
+                        result = QString::fromWCharArray(reinterpret_cast<const wchar_t *>(data.constData()));
                     break;
                 default:
                     break;
@@ -329,11 +329,11 @@ QList<SerialPortInfo> SerialPortInfo::availablePorts()
     if (hSearch != INVALID_HANDLE_VALUE) {
         do {
             SerialPortInfo info;
-            info.d_ptr->device = QString::fromWCharArray(((const wchar_t *)di.szLegacyName));
+            info.d_ptr->device = QString::fromWCharArray(di.szLegacyName);
             info.d_ptr->portName = info.d_ptr->device;
             info.d_ptr->portName.remove(':');
             info.d_ptr->description = findDescription(HKEY_LOCAL_MACHINE,
-                                                      QString::fromWCharArray(((const wchar_t *)di.szDeviceKey)));
+                                                      QString::fromWCharArray(di.szDeviceKey));
 
             // Get manufacturer, vendor identifier, product identifier are not
             // possible.
diff --git a/src/ttylocker_unix.cpp b/src/ttylocker_unix.cpp
index ae985d4..06dd04a 100644
--- a/src/ttylocker_unix.cpp
+++ b/src/ttylocker_unix.cpp
@@ -219,7 +219,7 @@ bool TTYLocker::isLocked(const QString &location, bool *currentPid)
                 // Checks the validity of the process number that was obtained from the Lock file.
                 enum CheckPidResult pidResult = CHK_PID_UNKNOWN_ERROR;
 
-                if (::kill(pid_t(pid), 0) == -1) {
+                if (::kill(pid, 0) == -1) {
                     pidResult = (errno == ESRCH) ?
                                 (CHK_PID_PROCESS_NOT_EXISTS) : (CHK_PID_UNKNOWN_ERROR);
                 } else {