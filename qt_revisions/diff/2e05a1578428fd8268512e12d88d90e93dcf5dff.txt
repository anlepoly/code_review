diff --git a/src/corelib/io/qfilesystemwatcher.cpp b/src/corelib/io/qfilesystemwatcher.cpp
index 449be9b..557475c 100644
--- a/src/corelib/io/qfilesystemwatcher.cpp
+++ b/src/corelib/io/qfilesystemwatcher.cpp
@@ -128,7 +128,7 @@ void QFileSystemWatcherPrivate::_q_fileChanged(const QString &path, bool removed
     }
     if (removed)
         files.removeAll(path);
-    emit q->fileChanged(path);
+    emit q->fileChanged(path, QFileSystemWatcher::QPrivateSignal());
 }
 
 void QFileSystemWatcherPrivate::_q_directoryChanged(const QString &path, bool removed)
@@ -140,7 +140,7 @@ void QFileSystemWatcherPrivate::_q_directoryChanged(const QString &path, bool re
     }
     if (removed)
         directories.removeAll(path);
-    emit q->directoryChanged(path);
+    emit q->directoryChanged(path, QFileSystemWatcher::QPrivateSignal());
 }
 
 
diff --git a/src/corelib/io/qfilesystemwatcher.h b/src/corelib/io/qfilesystemwatcher.h
index 5ac02c6..6fbbdae 100644
--- a/src/corelib/io/qfilesystemwatcher.h
+++ b/src/corelib/io/qfilesystemwatcher.h
@@ -72,8 +72,16 @@ public:
     QStringList directories() const;
 
 Q_SIGNALS:
-    void fileChanged(const QString &path);
-    void directoryChanged(const QString &path);
+    void fileChanged(const QString &path
+#if !defined(qdoc)
+        , QPrivateSignal
+#endif
+    );
+    void directoryChanged(const QString &path
+#if !defined(qdoc)
+        , QPrivateSignal
+#endif
+    );
 
 private:
     Q_PRIVATE_SLOT(d_func(), void _q_fileChanged(const QString &path, bool removed))
diff --git a/src/corelib/io/qprocess.cpp b/src/corelib/io/qprocess.cpp
index c520530..ec97425 100644
--- a/src/corelib/io/qprocess.cpp
+++ b/src/corelib/io/qprocess.cpp
@@ -909,7 +909,7 @@ bool QProcessPrivate::_q_canReadStandardOutput()
             emittedReadyRead = false;
         }
     }
-    emit q->readyReadStandardOutput();
+    emit q->readyReadStandardOutput(QProcess::QPrivateSignal());
     return didRead;
 }
 
@@ -954,7 +954,7 @@ bool QProcessPrivate::_q_canReadStandardError()
             emittedReadyRead = false;
         }
     }
-    emit q->readyReadStandardError();
+    emit q->readyReadStandardError(QProcess::QPrivateSignal());
     return didRead;
 }
 
@@ -1087,7 +1087,7 @@ bool QProcessPrivate::_q_startupNotification()
         startupSocketNotifier->setEnabled(false);
     if (processStarted()) {
         q->setProcessState(QProcess::Running);
-        emit q->started();
+        emit q->started(QProcess::QPrivateSignal());
         return true;
     }
 
@@ -1767,7 +1767,7 @@ void QProcess::setProcessState(ProcessState state)
     if (d->processState == state)
         return;
     d->processState = state;
-    emit stateChanged(state);
+    emit stateChanged(state, QPrivateSignal());
 }
 
 /*!
diff --git a/src/corelib/io/qprocess.h b/src/corelib/io/qprocess.h
index 49b58e6..bf4f2fb 100644
--- a/src/corelib/io/qprocess.h
+++ b/src/corelib/io/qprocess.h
@@ -210,14 +210,30 @@ public Q_SLOTS:
     void kill();
 
 Q_SIGNALS:
-    void started();
+    void started(
+#if !defined(qdoc)
+        QPrivateSignal
+#endif
+    );
     void finished(int exitCode);
     void finished(int exitCode, QProcess::ExitStatus exitStatus);
     void error(QProcess::ProcessError error);
-    void stateChanged(QProcess::ProcessState state);
+    void stateChanged(QProcess::ProcessState state
+#if !defined(qdoc)
+        , QPrivateSignal
+#endif
+    );
 
-    void readyReadStandardOutput();
-    void readyReadStandardError();
+    void readyReadStandardOutput(
+#if !defined(qdoc)
+        QPrivateSignal
+#endif
+    );
+    void readyReadStandardError(
+#if !defined(qdoc)
+        QPrivateSignal
+#endif
+    );
 
 protected:
     void setProcessState(ProcessState state);
diff --git a/src/corelib/itemmodels/qabstractproxymodel.cpp b/src/corelib/itemmodels/qabstractproxymodel.cpp
index cdf811e..715a186 100644
--- a/src/corelib/itemmodels/qabstractproxymodel.cpp
+++ b/src/corelib/itemmodels/qabstractproxymodel.cpp
@@ -139,7 +139,7 @@ void QAbstractProxyModel::setSourceModel(QAbstractItemModel *sourceModel)
             d->model = QAbstractItemModelPrivate::staticEmptyModel();
         }
         d->roleNames = d->model->roleNames();
-        emit sourceModelChanged();
+        emit sourceModelChanged(QPrivateSignal());
     }
 }
 
diff --git a/src/corelib/itemmodels/qabstractproxymodel.h b/src/corelib/itemmodels/qabstractproxymodel.h
index 2561e5a..1f32126 100644
--- a/src/corelib/itemmodels/qabstractproxymodel.h
+++ b/src/corelib/itemmodels/qabstractproxymodel.h
@@ -97,7 +97,11 @@ public:
     Qt::DropActions supportedDropActions() const;
 
 Q_SIGNALS:
-    void sourceModelChanged();
+    void sourceModelChanged(
+#if !defined(qdoc)
+        QPrivateSignal
+#endif
+    );
 
 protected:
     QAbstractProxyModel(QAbstractProxyModelPrivate &, QObject *parent);
diff --git a/src/corelib/statemachine/qstate.cpp b/src/corelib/statemachine/qstate.cpp
index 5eb9686..1b897a1 100644
--- a/src/corelib/statemachine/qstate.cpp
+++ b/src/corelib/statemachine/qstate.cpp
@@ -164,13 +164,13 @@ QStatePrivate::~QStatePrivate()
 void QStatePrivate::emitFinished()
 {
     Q_Q(QState);
-    emit q->finished();
+    emit q->finished(QState::QPrivateSignal());
 }
 
 void QStatePrivate::emitPropertiesAssigned()
 {
     Q_Q(QState);
-    emit q->propertiesAssigned();
+    emit q->propertiesAssigned(QState::QPrivateSignal());
 }
 
 /*!
diff --git a/src/corelib/statemachine/qstate.h b/src/corelib/statemachine/qstate.h
index 8d20a67..cad2691 100644
--- a/src/corelib/statemachine/qstate.h
+++ b/src/corelib/statemachine/qstate.h
@@ -100,8 +100,16 @@ public:
 #endif
 
 Q_SIGNALS:
-    void finished();
-    void propertiesAssigned();
+    void finished(
+#if !defined(qdoc)
+      QPrivateSignal
+#endif
+    );
+    void propertiesAssigned(
+#if !defined(qdoc)
+      QPrivateSignal
+#endif
+    );
 
 protected:
     void onEntry(QEvent *event);
diff --git a/src/corelib/statemachine/qstatemachine.cpp b/src/corelib/statemachine/qstatemachine.cpp
index c8d2f39..bf33500 100644
--- a/src/corelib/statemachine/qstatemachine.cpp
+++ b/src/corelib/statemachine/qstatemachine.cpp
@@ -1408,14 +1408,14 @@ void QStateMachinePrivate::_q_start()
     qDebug() << q << ": initial configuration:" << configuration;
 #endif
 
-    emit q->started();
+    emit q->started(QStateMachine::QPrivateSignal());
 
     if (stopProcessingReason == Finished) {
         // The state machine immediately reached a final state.
         processingScheduled = false;
         state = NotRunning;
         unregisterAllTransitions();
-        emit q->finished();
+        emitFinished();
     } else {
         _q_process();
     }
@@ -1497,13 +1497,13 @@ void QStateMachinePrivate::_q_process()
         state = NotRunning;
         cancelAllDelayedEvents();
         unregisterAllTransitions();
-        emit q->finished();
+        emitFinished();
         break;
     case Stopped:
         state = NotRunning;
         cancelAllDelayedEvents();
         unregisterAllTransitions();
-        emit q->stopped();
+        emit q->stopped(QStateMachine::QPrivateSignal());
         break;
     }
 }
diff --git a/src/corelib/statemachine/qstatemachine.h b/src/corelib/statemachine/qstatemachine.h
index d1789e9..256471e 100644
--- a/src/corelib/statemachine/qstatemachine.h
+++ b/src/corelib/statemachine/qstatemachine.h
@@ -153,8 +153,16 @@ public Q_SLOTS:
     void stop();
 
 Q_SIGNALS:
-    void started();
-    void stopped();
+    void started(
+#if !defined(qdoc)
+      QPrivateSignal
+#endif
+    );
+    void stopped(
+#if !defined(qdoc)
+      QPrivateSignal
+#endif
+    );
 
 protected:
     void onEntry(QEvent *event);
diff --git a/src/corelib/thread/qthread.h b/src/corelib/thread/qthread.h
index 058091b..f7ae95f 100644
--- a/src/corelib/thread/qthread.h
+++ b/src/corelib/thread/qthread.h
@@ -58,6 +58,7 @@ class QAbstractEventDispatcher;
 #ifndef QT_NO_THREAD
 class Q_CORE_EXPORT QThread : public QObject
 {
+    Q_OBJECT
 public:
     static Qt::HANDLE currentThreadId() Q_DECL_NOTHROW;
     static QThread *currentThread();
@@ -111,8 +112,16 @@ public:
     static void usleep(unsigned long);
 
 Q_SIGNALS:
-    void started();
-    void finished();
+    void started(
+#if !defined(qdoc)
+      QPrivateSignal
+#endif
+    );
+    void finished(
+#if !defined(qdoc)
+      QPrivateSignal
+#endif
+    );
 
 protected:
     virtual void run();
@@ -124,7 +133,6 @@ protected:
     QThread(QThreadPrivate &dd, QObject *parent = 0);
 
 private:
-    Q_OBJECT
     Q_DECLARE_PRIVATE(QThread)
 
     friend class QCoreApplication;
diff --git a/src/corelib/thread/qthread_unix.cpp b/src/corelib/thread/qthread_unix.cpp
index 2213b8f..b80653c 100644
--- a/src/corelib/thread/qthread_unix.cpp
+++ b/src/corelib/thread/qthread_unix.cpp
@@ -325,7 +325,7 @@ void *QThreadPrivate::start(void *arg)
 
 #endif
 
-    emit thr->started();
+    emit thr->started(QThread::QPrivateSignal());
 #if !defined(Q_OS_LINUX_ANDROID)
     pthread_setcancelstate(PTHREAD_CANCEL_ENABLE, NULL);
     pthread_testcancel();
@@ -348,7 +348,7 @@ void QThreadPrivate::finish(void *arg)
     d->priority = QThread::InheritPriority;
     void *data = &d->data->tls;
     locker.unlock();
-    emit thr->finished();
+    emit thr->finished(QThread::QPrivateSignal());
     QCoreApplication::sendPostedEvents(0, QEvent::DeferredDelete);
     QThreadStorageData::finish((void **)data);
     locker.relock();
diff --git a/src/corelib/thread/qthread_win.cpp b/src/corelib/thread/qthread_win.cpp
index 56e58fb..cd627d1 100644
--- a/src/corelib/thread/qthread_win.cpp
+++ b/src/corelib/thread/qthread_win.cpp
@@ -336,7 +336,7 @@ unsigned int __stdcall QT_ENSURE_STACK_ALIGNED_FOR_SSE QThreadPrivate::start(voi
                        thr->metaObject()->className() : objectName.constData());
 #endif
 
-    emit thr->started();
+    emit thr->started(QThread::QPrivateSignal());
     QThread::setTerminationEnabled(true);
     thr->run();
 
@@ -354,7 +354,7 @@ void QThreadPrivate::finish(void *arg, bool lockAnyway)
     d->priority = QThread::InheritPriority;
     void **tls_data = reinterpret_cast<void **>(&d->data->tls);
     locker.unlock();
-    emit thr->finished();
+    emit thr->finished(QThread::QPrivateSignal());
     QCoreApplication::sendPostedEvents(0, QEvent::DeferredDelete);
     QThreadStorageData::finish(tls_data);
     locker.relock();
diff --git a/src/corelib/tools/qtimeline.cpp b/src/corelib/tools/qtimeline.cpp
index 69e3fb7..e3df9a2 100644
--- a/src/corelib/tools/qtimeline.cpp
+++ b/src/corelib/tools/qtimeline.cpp
@@ -79,7 +79,7 @@ public:
     {
         Q_Q(QTimeLine);
         if (newState != state)
-            emit q->stateChanged(state = newState);
+            emit q->stateChanged(state = newState, QTimeLine::QPrivateSignal());
     }
 
     void setCurrentTime(int msecs);
@@ -126,14 +126,14 @@ void QTimeLinePrivate::setCurrentTime(int msecs)
     qDebug() << "QTimeLinePrivate::setCurrentTime: frameForTime" << currentTime << currentFrame;
 #endif
     if (!qFuzzyCompare(lastValue, q->currentValue()))
-        emit q->valueChanged(q->currentValue());
+        emit q->valueChanged(q->currentValue(), QTimeLine::QPrivateSignal());
     if (lastFrame != currentFrame) {
         const int transitionframe = (direction == QTimeLine::Forward ? endFrame : startFrame);
         if (looping && !finished && transitionframe != currentFrame) {
 #ifdef QTIMELINE_DEBUG
             qDebug() << "QTimeLinePrivate::setCurrentTime: transitionframe";
 #endif
-            emit q->frameChanged(transitionframe);
+            emit q->frameChanged(transitionframe, QTimeLine::QPrivateSignal());
         }
 #ifdef QTIMELINE_DEBUG
         else {
@@ -153,11 +153,11 @@ void QTimeLinePrivate::setCurrentTime(int msecs)
             qDebug("QTimeLinePrivate::setCurrentTime: not transitionframe because %s",  reason.constData());
         }
 #endif
-        emit q->frameChanged(currentFrame);
+        emit q->frameChanged(currentFrame, QTimeLine::QPrivateSignal());
     }
     if (finished && state == QTimeLine::Running) {
         q->stop();
-        emit q->finished();
+        emit q->finished(QTimeLine::QPrivateSignal());
     }
 }
 
diff --git a/src/corelib/tools/qtimeline.h b/src/corelib/tools/qtimeline.h
index 3d2b53f..04ad549 100644
--- a/src/corelib/tools/qtimeline.h
+++ b/src/corelib/tools/qtimeline.h
@@ -125,10 +125,26 @@ public Q_SLOTS:
     void toggleDirection();
 
 Q_SIGNALS:
-    void valueChanged(qreal x);
-    void frameChanged(int);
-    void stateChanged(QTimeLine::State newState);
-    void finished();
+    void valueChanged(qreal x
+#if !defined(qdoc)
+      , QPrivateSignal
+#endif
+    );
+    void frameChanged(int
+#if !defined(qdoc)
+      , QPrivateSignal
+#endif
+    );
+    void stateChanged(QTimeLine::State newState
+#if !defined(qdoc)
+      , QPrivateSignal
+#endif
+    );
+    void finished(
+#if !defined(qdoc)
+      QPrivateSignal
+#endif
+    );
 
 protected:
     void timerEvent(QTimerEvent *event);