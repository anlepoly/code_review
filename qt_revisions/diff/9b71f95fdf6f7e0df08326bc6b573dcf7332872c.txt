diff --git a/src/designer/src/components/objectinspector/objectinspectormodel.cpp b/src/designer/src/components/objectinspector/objectinspectormodel.cpp
index 7245a75..16dd4fd 100644
--- a/src/designer/src/components/objectinspector/objectinspectormodel.cpp
+++ b/src/designer/src/components/objectinspector/objectinspectormodel.cpp
@@ -83,7 +83,7 @@ static bool sameIcon(const QIcon &i1, const QIcon &i2)
              return true;
     if (i1.isNull() !=  i2.isNull())
         return false;
-    return i1.serialNumber() == i2.serialNumber();
+    return i1.cacheKey() == i2.cacheKey();
 }
 
 static inline bool isNameColumnEditable(const QObject *)
@@ -374,9 +374,10 @@ namespace qdesigner_internal {
 
     void ObjectInspectorModel::clearItems()
     {
+        beginResetModel();
         m_objectIndexMultiMap.clear();
         m_model.clear();
-        reset(); // force editors to be closed in views
+        endResetModel(); // force editors to be closed in views
         removeRow(0);
     }
 
diff --git a/src/designer/src/components/propertyeditor/designerpropertymanager.cpp b/src/designer/src/components/propertyeditor/designerpropertymanager.cpp
index 9ad59ee..9997827 100644
--- a/src/designer/src/components/propertyeditor/designerpropertymanager.cpp
+++ b/src/designer/src/components/propertyeditor/designerpropertymanager.cpp
@@ -1548,7 +1548,7 @@ QString DesignerPropertyManager::valueText(const QtProperty *property) const
         return list.join(QStringLiteral("; "));
     }
     if (vType == designerKeySequenceTypeId()) {
-        return qvariant_cast<PropertySheetKeySequenceValue>(value(property)).value();
+        return qvariant_cast<PropertySheetKeySequenceValue>(value(property)).value().toString(QKeySequence::NativeText);
     }
     if (vType == QVariant::Bool) {
         return QString();
@@ -1964,7 +1964,7 @@ void DesignerPropertyManager::setValue(QtProperty *property, const QVariant &val
     else if (QtVariantPropertyManager::valueType(property) == designerStringTypeId())
         property->setToolTip(qvariant_cast<PropertySheetStringValue>(DesignerPropertyManager::value(property)).value());
     else if (QtVariantPropertyManager::valueType(property) == designerKeySequenceTypeId())
-        property->setToolTip(qvariant_cast<PropertySheetKeySequenceValue>(DesignerPropertyManager::value(property)).value());
+        property->setToolTip(qvariant_cast<PropertySheetKeySequenceValue>(DesignerPropertyManager::value(property)).value().toString(QKeySequence::NativeText));
     else if (QtVariantPropertyManager::valueType(property) == QVariant::Bool)
         property->setToolTip(QtVariantPropertyManager::valueText(property));
 }
diff --git a/src/designer/src/components/signalsloteditor/signalsloteditorwindow.cpp b/src/designer/src/components/signalsloteditor/signalsloteditorwindow.cpp
index ed0e42e..0f22efc 100644
--- a/src/designer/src/components/signalsloteditor/signalsloteditorwindow.cpp
+++ b/src/designer/src/components/signalsloteditor/signalsloteditorwindow.cpp
@@ -160,6 +160,7 @@ void ConnectionModel::setEditor(SignalSlotEditor *editor)
 {
     if (m_editor == editor)
         return;
+    beginResetModel();
 
     if (m_editor) {
         disconnect(m_editor, SIGNAL(connectionAdded(Connection*)),
@@ -186,7 +187,7 @@ void ConnectionModel::setEditor(SignalSlotEditor *editor)
         connect(m_editor, SIGNAL(connectionChanged(Connection*)),
                 this, SLOT(connectionChanged(Connection*)));
     }
-    reset();
+    endResetModel();
 }
 
 QVariant ConnectionModel::headerData(int section, Qt::Orientation orientation,
diff --git a/src/designer/src/components/widgetbox/widgetboxcategorylistview.cpp b/src/designer/src/components/widgetbox/widgetboxcategorylistview.cpp
index c597e7b..f32e797 100644
--- a/src/designer/src/components/widgetbox/widgetboxcategorylistview.cpp
+++ b/src/designer/src/components/widgetbox/widgetboxcategorylistview.cpp
@@ -173,9 +173,12 @@ void WidgetBoxCategoryModel::setViewMode(QListView::ViewMode vm)
 {
     if (m_viewMode == vm)
         return;
+    const bool empty = m_items.isEmpty();
+    if (!empty)
+        beginResetModel();
     m_viewMode = vm;
-    if (!m_items.empty())
-        reset();
+    if (!empty)
+        endResetModel();
 }
 
 int WidgetBoxCategoryModel::indexOfWidget(const QString &name)
@@ -203,13 +206,15 @@ bool WidgetBoxCategoryModel::removeCustomWidgets()
     bool changed = false;
     for (WidgetBoxCategoryEntrys::iterator it = m_items.begin(); it != m_items.end(); )
         if (it->widget.type() == QDesignerWidgetBoxInterface::Widget::Custom) {
+            if (!changed)
+                beginResetModel();
             it = m_items.erase(it);
             changed = true;
         } else {
             ++it;
         }
     if (changed)
-        reset();
+        endResetModel();
     return changed;
 }
 
diff --git a/src/designer/src/lib/shared/actioneditor.cpp b/src/designer/src/lib/shared/actioneditor.cpp
index 954cf40..66f3c46 100644
--- a/src/designer/src/lib/shared/actioneditor.cpp
+++ b/src/designer/src/lib/shared/actioneditor.cpp
@@ -469,7 +469,7 @@ void ActionEditor::slotNewAction()
 
 static inline bool isSameIcon(const QIcon &i1, const QIcon &i2)
 {
-    return i1.serialNumber() == i2.serialNumber();
+    return i1.cacheKey() == i2.cacheKey();
 }
 
 // return a FormWindow command to apply an icon or a reset command in case it
diff --git a/src/designer/src/lib/shared/connectionedit.cpp b/src/designer/src/lib/shared/connectionedit.cpp
index cb6ae00..e4d56f3 100644
--- a/src/designer/src/lib/shared/connectionedit.cpp
+++ b/src/designer/src/lib/shared/connectionedit.cpp
@@ -738,18 +738,18 @@ QRegion Connection::region() const
     QRegion result;
 
     for (int i = 0; i < m_knee_list.size() - 1; ++i)
-        result = result.unite(lineRect(m_knee_list.at(i), m_knee_list.at(i + 1)));
+        result = result.united(lineRect(m_knee_list.at(i), m_knee_list.at(i + 1)));
 
     if (!m_arrow_head.isEmpty()) {
         QRect r = m_arrow_head.boundingRect().toRect();
         r = expand(r, 1);
-        result = result.unite(r);
+        result = result.united(r);
     } else if (ground()) {
-        result = result.unite(groundRect());
+        result = result.united(groundRect());
     }
 
-    result = result.unite(labelRect(EndPoint::Source));
-    result = result.unite(labelRect(EndPoint::Target));
+    result = result.united(labelRect(EndPoint::Source));
+    result = result.united(labelRect(EndPoint::Target));
 
     return result;
 }
diff --git a/src/designer/src/lib/shared/iconselector.cpp b/src/designer/src/lib/shared/iconselector.cpp
index caeba79..e38213a 100644
--- a/src/designer/src/lib/shared/iconselector.cpp
+++ b/src/designer/src/lib/shared/iconselector.cpp
@@ -625,7 +625,7 @@ void IconThemeEditor::updatePreview(const QString &t)
     // Update preview label with icon.
     if (t.isEmpty() || !QIcon::hasThemeIcon(t)) { // Empty
         const QPixmap *currentPixmap = d->m_themeLabel->pixmap();
-        if (currentPixmap == 0 || currentPixmap->serialNumber() != d->m_emptyPixmap.serialNumber())
+        if (currentPixmap == 0 || currentPixmap->cacheKey() != d->m_emptyPixmap.cacheKey())
             d->m_themeLabel->setPixmap(d->m_emptyPixmap);
     } else {
         const QIcon icon = QIcon::fromTheme(t);
diff --git a/src/designer/src/lib/shared/spacer_widget.cpp b/src/designer/src/lib/shared/spacer_widget.cpp
index 899d805..2ab7d42 100644
--- a/src/designer/src/lib/shared/spacer_widget.cpp
+++ b/src/designer/src/lib/shared/spacer_widget.cpp
@@ -195,13 +195,13 @@ void Spacer::updateMask()
         if (m_orientation == Qt::Horizontal) {
             const int amplitude = qMin(3, h / 3);
             const int base = h / 2;
-            r = r.subtract(QRect(1, 0, w - 2, base - amplitude));
-            r = r.subtract(QRect(1, base + amplitude, w - 2, h - base - amplitude));
+            r = r.subtracted(QRect(1, 0, w - 2, base - amplitude));
+            r = r.subtracted(QRect(1, base + amplitude, w - 2, h - base - amplitude));
         } else {
             const int amplitude = qMin(3, w / 3);
             const int base = w / 2;
-            r = r.subtract(QRect(0, 1, base - amplitude, h - 2));
-            r = r.subtract(QRect(base + amplitude, 1, w - base - amplitude, h - 2));
+            r = r.subtracted(QRect(0, 1, base - amplitude, h - 2));
+            r = r.subtracted(QRect(base + amplitude, 1, w - base - amplitude, h - 2));
         }
     }
     setMask(r);