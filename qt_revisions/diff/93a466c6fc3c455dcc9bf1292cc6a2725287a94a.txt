diff --git a/src/corelib/io/qfilesystemwatcher.cpp b/src/corelib/io/qfilesystemwatcher.cpp
index 85b27c9..b6eb5ed 100644
--- a/src/corelib/io/qfilesystemwatcher.cpp
+++ b/src/corelib/io/qfilesystemwatcher.cpp
@@ -48,7 +48,6 @@
 #include <qdebug.h>
 #include <qdir.h>
 #include <qfileinfo.h>
-#include <qmutex.h>
 #include <qset.h>
 #include <qtimer.h>
 
diff --git a/src/corelib/io/qfilesystemwatcher_inotify.cpp b/src/corelib/io/qfilesystemwatcher_inotify.cpp
index 80eb630..49299e2 100644
--- a/src/corelib/io/qfilesystemwatcher_inotify.cpp
+++ b/src/corelib/io/qfilesystemwatcher_inotify.cpp
@@ -245,8 +245,6 @@ QStringList QInotifyFileSystemWatcherEngine::addPaths(const QStringList &paths,
                                                       QStringList *files,
                                                       QStringList *directories)
 {
-    QMutexLocker locker(&mutex);
-
     QStringList p = paths;
     QMutableListIterator<QString> it(p);
     while (it.hasNext()) {
@@ -303,8 +301,6 @@ QStringList QInotifyFileSystemWatcherEngine::removePaths(const QStringList &path
                                                          QStringList *files,
                                                          QStringList *directories)
 {
-    QMutexLocker locker(&mutex);
-
     QStringList p = paths;
     QMutableListIterator<QString> it(p);
     while (it.hasNext()) {
@@ -331,8 +327,6 @@ QStringList QInotifyFileSystemWatcherEngine::removePaths(const QStringList &path
 
 void QInotifyFileSystemWatcherEngine::readFromInotify()
 {
-    QMutexLocker locker(&mutex);
-
     // qDebug() << "QInotifyFileSystemWatcherEngine::readFromInotify";
 
     int buffSize = 0;
diff --git a/src/corelib/io/qfilesystemwatcher_inotify_p.h b/src/corelib/io/qfilesystemwatcher_inotify_p.h
index 24fc88f..daedb01 100644
--- a/src/corelib/io/qfilesystemwatcher_inotify_p.h
+++ b/src/corelib/io/qfilesystemwatcher_inotify_p.h
@@ -81,7 +81,6 @@ private Q_SLOTS:
 private:
     QInotifyFileSystemWatcherEngine(int fd);
     int inotifyFd;
-    QMutex mutex;
     QHash<QString, int> pathToID;
     QHash<int, QString> idToPath;
     QSocketNotifier notifier;
diff --git a/src/corelib/io/qfilesystemwatcher_kqueue.cpp b/src/corelib/io/qfilesystemwatcher_kqueue.cpp
index 1f16f6a..8070af5 100644
--- a/src/corelib/io/qfilesystemwatcher_kqueue.cpp
+++ b/src/corelib/io/qfilesystemwatcher_kqueue.cpp
@@ -98,76 +98,72 @@ QStringList QKqueueFileSystemWatcherEngine::addPaths(const QStringList &paths,
                                                      QStringList *directories)
 {
     QStringList p = paths;
-    {
-        QMutexLocker locker(&mutex);
-
-        QMutableListIterator<QString> it(p);
-        while (it.hasNext()) {
-            QString path = it.next();
-            int fd;
+    QMutableListIterator<QString> it(p);
+    while (it.hasNext()) {
+        QString path = it.next();
+        int fd;
 #if defined(O_EVTONLY)
-            fd = qt_safe_open(QFile::encodeName(path), O_EVTONLY);
+        fd = qt_safe_open(QFile::encodeName(path), O_EVTONLY);
 #else
-            fd = qt_safe_open(QFile::encodeName(path), O_RDONLY);
+        fd = qt_safe_open(QFile::encodeName(path), O_RDONLY);
 #endif
-            if (fd == -1) {
-                perror("QKqueueFileSystemWatcherEngine::addPaths: open");
-                continue;
-            }
-            if (fd >= (int)FD_SETSIZE / 2 && fd < (int)FD_SETSIZE) {
-                int fddup = fcntl(fd, F_DUPFD, FD_SETSIZE);
-                if (fddup != -1) {
-                    ::close(fd);
-                    fd = fddup;
-                }
+        if (fd == -1) {
+            perror("QKqueueFileSystemWatcherEngine::addPaths: open");
+            continue;
+        }
+        if (fd >= (int)FD_SETSIZE / 2 && fd < (int)FD_SETSIZE) {
+            int fddup = fcntl(fd, F_DUPFD, FD_SETSIZE);
+            if (fddup != -1) {
+                ::close(fd);
+                fd = fddup;
             }
-            fcntl(fd, F_SETFD, FD_CLOEXEC);
+        }
+        fcntl(fd, F_SETFD, FD_CLOEXEC);
 
-            QT_STATBUF st;
-            if (QT_FSTAT(fd, &st) == -1) {
-                perror("QKqueueFileSystemWatcherEngine::addPaths: fstat");
+        QT_STATBUF st;
+        if (QT_FSTAT(fd, &st) == -1) {
+            perror("QKqueueFileSystemWatcherEngine::addPaths: fstat");
+            ::close(fd);
+            continue;
+        }
+        int id = (S_ISDIR(st.st_mode)) ? -fd : fd;
+        if (id < 0) {
+            if (directories->contains(path)) {
                 ::close(fd);
                 continue;
             }
-            int id = (S_ISDIR(st.st_mode)) ? -fd : fd;
-            if (id < 0) {
-                if (directories->contains(path)) {
-                    ::close(fd);
-                    continue;
-                }
-            } else {
-                if (files->contains(path)) {
-                    ::close(fd);
-                    continue;
-                }
-            }
-
-            struct kevent kev;
-            EV_SET(&kev,
-                   fd,
-                   EVFILT_VNODE,
-                   EV_ADD | EV_ENABLE | EV_CLEAR,
-                   NOTE_DELETE | NOTE_WRITE | NOTE_EXTEND | NOTE_ATTRIB | NOTE_RENAME | NOTE_REVOKE,
-                   0,
-                   0);
-            if (kevent(kqfd, &kev, 1, 0, 0, 0) == -1) {
-                perror("QKqueueFileSystemWatcherEngine::addPaths: kevent");
+        } else {
+            if (files->contains(path)) {
                 ::close(fd);
                 continue;
             }
+        }
 
-            it.remove();
-            if (id < 0) {
-                DEBUG() << "QKqueueFileSystemWatcherEngine: added directory path" << path;
-                directories->append(path);
-            } else {
-                DEBUG() << "QKqueueFileSystemWatcherEngine: added file path" << path;
-                files->append(path);
-            }
+        struct kevent kev;
+        EV_SET(&kev,
+               fd,
+               EVFILT_VNODE,
+               EV_ADD | EV_ENABLE | EV_CLEAR,
+               NOTE_DELETE | NOTE_WRITE | NOTE_EXTEND | NOTE_ATTRIB | NOTE_RENAME | NOTE_REVOKE,
+               0,
+               0);
+        if (kevent(kqfd, &kev, 1, 0, 0, 0) == -1) {
+            perror("QKqueueFileSystemWatcherEngine::addPaths: kevent");
+            ::close(fd);
+            continue;
+        }
 
-            pathToID.insert(path, id);
-            idToPath.insert(id, path);
+        it.remove();
+        if (id < 0) {
+            DEBUG() << "QKqueueFileSystemWatcherEngine: added directory path" << path;
+            directories->append(path);
+        } else {
+            DEBUG() << "QKqueueFileSystemWatcherEngine: added file path" << path;
+            files->append(path);
         }
+
+        pathToID.insert(path, id);
+        idToPath.insert(id, path);
     }
 
     return p;
@@ -179,29 +175,26 @@ QStringList QKqueueFileSystemWatcherEngine::removePaths(const QStringList &paths
 {
     bool isEmpty;
     QStringList p = paths;
-    {
-        QMutexLocker locker(&mutex);
-        if (pathToID.isEmpty())
-            return p;
-
-        QMutableListIterator<QString> it(p);
-        while (it.hasNext()) {
-            QString path = it.next();
-            int id = pathToID.take(path);
-            QString x = idToPath.take(id);
-            if (x.isEmpty() || x != path)
-                continue;
+    if (pathToID.isEmpty())
+        return p;
 
-            ::close(id < 0 ? -id : id);
+    QMutableListIterator<QString> it(p);
+    while (it.hasNext()) {
+        QString path = it.next();
+        int id = pathToID.take(path);
+        QString x = idToPath.take(id);
+        if (x.isEmpty() || x != path)
+            continue;
 
-            it.remove();
-            if (id < 0)
-                directories->removeAll(path);
-            else
-                files->removeAll(path);
-        }
-        isEmpty = pathToID.isEmpty();
+        ::close(id < 0 ? -id : id);
+
+        it.remove();
+        if (id < 0)
+            directories->removeAll(path);
+        else
+            files->removeAll(path);
     }
+    isEmpty = pathToID.isEmpty();
 
     return p;
 }
@@ -224,7 +217,6 @@ void QKqueueFileSystemWatcherEngine::readFromKqueue()
             int fd = kev.ident;
 
             DEBUG() << "QKqueueFileSystemWatcherEngine: processing kevent" << kev.ident << kev.filter;
-            QMutexLocker locker(&mutex);
 
             int id = fd;
             QString path = idToPath.value(id);
diff --git a/src/corelib/io/qfilesystemwatcher_kqueue_p.h b/src/corelib/io/qfilesystemwatcher_kqueue_p.h
index 6e36bcd..41afbad 100644
--- a/src/corelib/io/qfilesystemwatcher_kqueue_p.h
+++ b/src/corelib/io/qfilesystemwatcher_kqueue_p.h
@@ -85,7 +85,6 @@ private:
 
     int kqfd;
 
-    QMutex mutex;
     QHash<QString, int> pathToID;
     QHash<int, QString> idToPath;
     QSocketNotifier notifier;
diff --git a/src/corelib/io/qfilesystemwatcher_polling.cpp b/src/corelib/io/qfilesystemwatcher_polling.cpp
index 3d55c6d..ef106ac 100644
--- a/src/corelib/io/qfilesystemwatcher_polling.cpp
+++ b/src/corelib/io/qfilesystemwatcher_polling.cpp
@@ -54,7 +54,6 @@ QStringList QPollingFileSystemWatcherEngine::addPaths(const QStringList &paths,
                                                       QStringList *files,
                                                       QStringList *directories)
 {
-    QMutexLocker locker(&mutex);
     QStringList p = paths;
     QMutableListIterator<QString> it(p);
     while (it.hasNext()) {
@@ -89,7 +88,6 @@ QStringList QPollingFileSystemWatcherEngine::removePaths(const QStringList &path
                                                          QStringList *files,
                                                          QStringList *directories)
 {
-    QMutexLocker locker(&mutex);
     QStringList p = paths;
     QMutableListIterator<QString> it(p);
     while (it.hasNext()) {
@@ -113,7 +111,6 @@ QStringList QPollingFileSystemWatcherEngine::removePaths(const QStringList &path
 
 void QPollingFileSystemWatcherEngine::timeout()
 {
-    QMutexLocker locker(&mutex);
     QMutableHashIterator<QString, FileInfo> fit(files);
     while (fit.hasNext()) {
         QHash<QString, FileInfo>::iterator x = fit.next();
diff --git a/src/corelib/io/qfilesystemwatcher_polling_p.h b/src/corelib/io/qfilesystemwatcher_polling_p.h
index 1fae542..717d438 100644
--- a/src/corelib/io/qfilesystemwatcher_polling_p.h
+++ b/src/corelib/io/qfilesystemwatcher_polling_p.h
@@ -105,7 +105,6 @@ class QPollingFileSystemWatcherEngine : public QFileSystemWatcherEngine
         }
     };
 
-    mutable QMutex mutex;
     QHash<QString, FileInfo> files, directories;
 
 public: