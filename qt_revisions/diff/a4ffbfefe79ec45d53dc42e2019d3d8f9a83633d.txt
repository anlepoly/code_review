diff --git a/tests/auto/network/access/qftp/tst_qftp.cpp b/tests/auto/network/access/qftp/tst_qftp.cpp
index 5da4a9d..702d56d 100644
--- a/tests/auto/network/access/qftp/tst_qftp.cpp
+++ b/tests/auto/network/access/qftp/tst_qftp.cpp
@@ -966,11 +966,11 @@ void tst_QFtp::mkdir2()
 
     QEventLoop loop;
     connect(ftp, SIGNAL(done(bool)), &loop, SLOT(quit()));
-    connect(ftp, SIGNAL(commandFinished(int, bool)), this, SLOT(mkdir2Slot(int, bool)));
+    connect(ftp, SIGNAL(commandFinished(int,bool)), this, SLOT(mkdir2Slot(int,bool)));
     QTimer::singleShot(5000, &loop, SLOT(quit()));
 
     QSignalSpy commandStartedSpy(ftp, SIGNAL(commandStarted(int)));
-    QSignalSpy commandFinishedSpy(ftp, SIGNAL(commandFinished(int, bool)));
+    QSignalSpy commandFinishedSpy(ftp, SIGNAL(commandFinished(int,bool)));
 
     loop.exec();
 
@@ -1933,12 +1933,12 @@ QFtp *tst_QFtp::newFtp()
              SLOT(done(bool)) );
     connect( nFtp, SIGNAL(stateChanged(int)),
              SLOT(stateChanged(int)) );
-    connect( nFtp, SIGNAL(listInfo(const QUrlInfo&)),
-             SLOT(listInfo(const QUrlInfo&)) );
+    connect( nFtp, SIGNAL(listInfo(QUrlInfo)),
+             SLOT(listInfo(QUrlInfo)) );
     connect( nFtp, SIGNAL(readyRead()),
              SLOT(readyRead()) );
-    connect( nFtp, SIGNAL(dataTransferProgress(qint64, qint64)),
-             SLOT(dataTransferProgress(qint64, qint64)) );
+    connect( nFtp, SIGNAL(dataTransferProgress(qint64,qint64)),
+             SLOT(dataTransferProgress(qint64,qint64)) );
 
     return nFtp;
 }
@@ -2072,7 +2072,7 @@ void tst_QFtp::queueMoreCommandsInDoneSlot()
 
     QFtp ftp;
     QSignalSpy doneSpy(&ftp, SIGNAL(done(bool)));
-    QSignalSpy commandFinishedSpy(&ftp, SIGNAL(commandFinished(int, bool)));
+    QSignalSpy commandFinishedSpy(&ftp, SIGNAL(commandFinished(int,bool)));
 
     this->ftp = &ftp;
     connect(&ftp, SIGNAL(done(bool)), this, SLOT(cdUpSlot(bool)));
diff --git a/tests/auto/network/access/qhttpnetworkconnection/tst_qhttpnetworkconnection.cpp b/tests/auto/network/access/qhttpnetworkconnection/tst_qhttpnetworkconnection.cpp
index b77634e..948f807 100644
--- a/tests/auto/network/access/qhttpnetworkconnection/tst_qhttpnetworkconnection.cpp
+++ b/tests/auto/network/access/qhttpnetworkconnection/tst_qhttpnetworkconnection.cpp
@@ -335,8 +335,8 @@ void tst_QHttpNetworkConnection::put()
 
     QHttpNetworkReply *reply = connection.sendRequest(request);
     connect(reply, SIGNAL(finished()), SLOT(finishedReply()));
-    connect(reply, SIGNAL(finishedWithError(QNetworkReply::NetworkError, const QString &)),
-        SLOT(finishedWithError(QNetworkReply::NetworkError, const QString &)));
+    connect(reply, SIGNAL(finishedWithError(QNetworkReply::NetworkError,QString)),
+        SLOT(finishedWithError(QNetworkReply::NetworkError,QString)));
 
     QTime stopWatch;
     stopWatch.start();
@@ -561,15 +561,15 @@ void tst_QHttpNetworkConnection::get401()
 
     QHttpNetworkRequest request(protocol + host + path);
     QHttpNetworkReply *reply = connection.sendRequest(request);
-    connect(reply, SIGNAL(authenticationRequired(const QHttpNetworkRequest&, QAuthenticator *)),
-                           SLOT(challenge401(const QHttpNetworkRequest&, QAuthenticator *)));
+    connect(reply, SIGNAL(authenticationRequired(QHttpNetworkRequest,QAuthenticator*)),
+                           SLOT(challenge401(QHttpNetworkRequest,QAuthenticator*)));
 
     finishedCalled = false;
     finishedWithErrorCalled = false;
 
     connect(reply, SIGNAL(finished()), SLOT(finishedReply()));
-    connect(reply, SIGNAL(finishedWithError(QNetworkReply::NetworkError, const QString &)),
-        SLOT(finishedWithError(QNetworkReply::NetworkError, const QString &)));
+    connect(reply, SIGNAL(finishedWithError(QNetworkReply::NetworkError,QString)),
+        SLOT(finishedWithError(QNetworkReply::NetworkError,QString)));
 
     QTime stopWatch;
     stopWatch.start();
@@ -722,8 +722,8 @@ void tst_QHttpNetworkConnection::ignoresslerror()
 
     QHttpNetworkRequest request(protocol + host + path);
     QHttpNetworkReply *reply = connection.sendRequest(request);
-    connect(reply, SIGNAL(sslErrors(const QList<QSslError>&)),
-        SLOT(sslErrors(const QList<QSslError>&)));
+    connect(reply, SIGNAL(sslErrors(QList<QSslError>)),
+        SLOT(sslErrors(QList<QSslError>)));
 
     finishedWithErrorCalled = false;
 
@@ -778,8 +778,8 @@ void tst_QHttpNetworkConnection::nossl()
     netErrorCode = QNetworkReply::NoError;
 
     connect(reply, SIGNAL(finished()), SLOT(finishedReply()));
-    connect(reply, SIGNAL(finishedWithError(QNetworkReply::NetworkError, const QString &)),
-        SLOT(finishedWithError(QNetworkReply::NetworkError, const QString &)));
+    connect(reply, SIGNAL(finishedWithError(QNetworkReply::NetworkError,QString)),
+        SLOT(finishedWithError(QNetworkReply::NetworkError,QString)));
 
     QTime stopWatch;
     stopWatch.start();
diff --git a/tests/auto/network/access/qnetworkreply/tst_qnetworkreply.cpp b/tests/auto/network/access/qnetworkreply/tst_qnetworkreply.cpp
index a5a7906..284768e 100644
--- a/tests/auto/network/access/qnetworkreply/tst_qnetworkreply.cpp
+++ b/tests/auto/network/access/qnetworkreply/tst_qnetworkreply.cpp
@@ -4346,7 +4346,7 @@ public:
             connect(serverSocket, SIGNAL(encrypted()), this, SLOT(encryptedSlot()));
             connect(serverSocket, SIGNAL(readyRead()), this, SLOT(readyReadSlot()));
             serverSocket->setProtocol(QSsl::AnyProtocol);
-            connect(serverSocket, SIGNAL(sslErrors(const QList<QSslError>&)), serverSocket, SLOT(ignoreSslErrors()));
+            connect(serverSocket, SIGNAL(sslErrors(QList<QSslError>)), serverSocket, SLOT(ignoreSslErrors()));
             serverSocket->setLocalCertificate(testDataDir + "/certs/server.pem");
             serverSocket->setPrivateKey(testDataDir + "/certs/server.key");
             serverSocket->startServerEncryption();
@@ -4396,7 +4396,7 @@ void tst_QNetworkReply::ioPostToHttpsUploadProgress()
 
     QSignalSpy spy(reply.data(), SIGNAL(uploadProgress(qint64,qint64)));
     connect(&server, SIGNAL(newEncryptedConnection()), &QTestEventLoop::instance(), SLOT(exitLoop()));
-    connect(reply, SIGNAL(sslErrors(const QList<QSslError>&)), reply.data(), SLOT(ignoreSslErrors()));
+    connect(reply, SIGNAL(sslErrors(QList<QSslError>)), reply.data(), SLOT(ignoreSslErrors()));
 
     // get the request started and the incoming socket connected
     QTestEventLoop::instance().enterLoop(10);
@@ -5611,8 +5611,8 @@ void tst_QNetworkReply::ignoreSslErrorsListWithSlot()
     QFETCH(QList<QSslError>, expectedSslErrors);
     // store the errors to ignore them later in the slot connected below
     storedExpectedSslErrors = expectedSslErrors;
-    connect(&manager, SIGNAL(sslErrors(QNetworkReply *, const QList<QSslError> &)),
-            this, SLOT(ignoreSslErrorListSlot(QNetworkReply *, const QList<QSslError> &)));
+    connect(&manager, SIGNAL(sslErrors(QNetworkReply*,QList<QSslError>)),
+            this, SLOT(ignoreSslErrorListSlot(QNetworkReply*,QList<QSslError>)));
 
 
     QVERIFY(waitForFinish(reply) != Timeout);
@@ -6141,10 +6141,10 @@ void tst_QNetworkReply::authenticationCacheAfterCancel()
 #endif
     manager.setProxy(proxy);
     QSignalSpy authSpy(&manager, SIGNAL(authenticationRequired(QNetworkReply*,QAuthenticator*)));
-    QSignalSpy proxyAuthSpy(&manager, SIGNAL(proxyAuthenticationRequired(const QNetworkProxy &, QAuthenticator *)));
+    QSignalSpy proxyAuthSpy(&manager, SIGNAL(proxyAuthenticationRequired(QNetworkProxy,QAuthenticator*)));
 
     AuthenticationCacheHelper helper;
-    connect(&manager, SIGNAL(proxyAuthenticationRequired(const QNetworkProxy &, QAuthenticator *)), &helper, SLOT(proxyAuthenticationRequired(const QNetworkProxy &, QAuthenticator *)));
+    connect(&manager, SIGNAL(proxyAuthenticationRequired(QNetworkProxy,QAuthenticator*)), &helper, SLOT(proxyAuthenticationRequired(QNetworkProxy,QAuthenticator*)));
     connect(&manager, SIGNAL(authenticationRequired(QNetworkReply*,QAuthenticator*)), &helper, SLOT(authenticationRequired(QNetworkReply*,QAuthenticator*)));
 
     QNetworkRequest request(url);
@@ -6266,7 +6266,7 @@ void tst_QNetworkReply::authenticationWithDifferentRealm()
     connect(&manager, SIGNAL(sslErrors(QNetworkReply*,QList<QSslError>)),
             SLOT(sslErrors(QNetworkReply*,QList<QSslError>)));
 #endif
-    connect(&manager, SIGNAL(proxyAuthenticationRequired(const QNetworkProxy &, QAuthenticator *)), &helper, SLOT(proxyAuthenticationRequired(const QNetworkProxy &, QAuthenticator *)));
+    connect(&manager, SIGNAL(proxyAuthenticationRequired(QNetworkProxy,QAuthenticator*)), &helper, SLOT(proxyAuthenticationRequired(QNetworkProxy,QAuthenticator*)));
     connect(&manager, SIGNAL(authenticationRequired(QNetworkReply*,QAuthenticator*)), &helper, SLOT(authenticationRequired(QNetworkReply*,QAuthenticator*)));
 
     helper.httpUserName = "httptest";
@@ -6630,7 +6630,7 @@ void tst_QNetworkReply::synchronousRequestSslFailure()
             QNetworkRequest::SynchronousRequestAttribute,
             true);
     QNetworkReplyPtr reply;
-    QSignalSpy sslErrorsSpy(&manager, SIGNAL(sslErrors(QNetworkReply *, const QList<QSslError> &)));
+    QSignalSpy sslErrorsSpy(&manager, SIGNAL(sslErrors(QNetworkReply*,QList<QSslError>)));
     runSimpleRequest(QNetworkAccessManager::GetOperation, request, reply, 0);
     QVERIFY(reply->isFinished());
     QCOMPARE(reply->error(), QNetworkReply::SslHandshakeFailedError);
diff --git a/tests/auto/network/kernel/qhostinfo/tst_qhostinfo.cpp b/tests/auto/network/kernel/qhostinfo/tst_qhostinfo.cpp
index 973cf1f..25ea5ca 100644
--- a/tests/auto/network/kernel/qhostinfo/tst_qhostinfo.cpp
+++ b/tests/auto/network/kernel/qhostinfo/tst_qhostinfo.cpp
@@ -283,7 +283,7 @@ void tst_QHostInfo::lookupIPv4()
     QFETCH(QString, addresses);
 
     lookupDone = false;
-    QHostInfo::lookupHost(hostname, this, SLOT(resultsReady(const QHostInfo&)));
+    QHostInfo::lookupHost(hostname, this, SLOT(resultsReady(QHostInfo)));
 
     QTestEventLoop::instance().enterLoop(10);
     QVERIFY(!QTestEventLoop::instance().timeout());
@@ -333,7 +333,7 @@ void tst_QHostInfo::lookupIPv6()
         QSKIP("This platform does not support IPv6 lookups");
 
     lookupDone = false;
-    QHostInfo::lookupHost(hostname, this, SLOT(resultsReady(const QHostInfo&)));
+    QHostInfo::lookupHost(hostname, this, SLOT(resultsReady(QHostInfo)));
 
     QTestEventLoop::instance().enterLoop(10);
     QVERIFY(!QTestEventLoop::instance().timeout());
@@ -468,7 +468,7 @@ public:
 void LookupReceiver::start()
 {
     for (int i=0;i<numrequests;i++)
-        QHostInfo::lookupHost(QString("qt.nokia.com"), this, SLOT(resultsReady(const QHostInfo&)));
+        QHostInfo::lookupHost(QString("qt.nokia.com"), this, SLOT(resultsReady(QHostInfo)));
 }
 
 void LookupReceiver::resultsReady(const QHostInfo &info)
@@ -512,7 +512,7 @@ void tst_QHostInfo::multipleSameLookups()
     lookupsDoneCounter = 0;
 
     for (int i = 0; i < COUNT; i++)
-        QHostInfo::lookupHost("localhost", this, SLOT(resultsReady(const QHostInfo)));
+        QHostInfo::lookupHost("localhost", this, SLOT(resultsReady(QHostInfo)));
 
     QElapsedTimer timer;
     timer.start();
@@ -546,7 +546,7 @@ void tst_QHostInfo::multipleDifferentLookups()
 
     for (int i = 0; i < hostnameList.size(); i++)
         for (int j = 0; j < repeats; ++j)
-            QHostInfo::lookupHost(hostnameList.at(i), this, SLOT(resultsReady(const QHostInfo)));
+            QHostInfo::lookupHost(hostnameList.at(i), this, SLOT(resultsReady(QHostInfo)));
 
     QElapsedTimer timer;
     timer.start();
diff --git a/tests/auto/network/ssl/qsslsocket/tst_qsslsocket.cpp b/tests/auto/network/ssl/qsslsocket/tst_qsslsocket.cpp
index f7f7d31..5af7efd 100644
--- a/tests/auto/network/ssl/qsslsocket/tst_qsslsocket.cpp
+++ b/tests/auto/network/ssl/qsslsocket/tst_qsslsocket.cpp
@@ -428,14 +428,14 @@ void tst_QSslSocket::simpleConnect()
     QSignalSpy hostFoundSpy(&socket, SIGNAL(hostFound()));
     QSignalSpy disconnectedSpy(&socket, SIGNAL(disconnected()));
     QSignalSpy connectionEncryptedSpy(&socket, SIGNAL(encrypted()));
-    QSignalSpy sslErrorsSpy(&socket, SIGNAL(sslErrors(const QList<QSslError> &)));
+    QSignalSpy sslErrorsSpy(&socket, SIGNAL(sslErrors(QList<QSslError>)));
 
     connect(&socket, SIGNAL(connected()), this, SLOT(exitLoop()));
     connect(&socket, SIGNAL(disconnected()), this, SLOT(exitLoop()));
     connect(&socket, SIGNAL(modeChanged(QSslSocket::SslMode)), this, SLOT(exitLoop()));
     connect(&socket, SIGNAL(encrypted()), this, SLOT(exitLoop()));
     connect(&socket, SIGNAL(stateChanged(QAbstractSocket::SocketState)), this, SLOT(exitLoop()));
-    connect(&socket, SIGNAL(sslErrors(const QList<QSslError> &)), this, SLOT(exitLoop()));
+    connect(&socket, SIGNAL(sslErrors(QList<QSslError>)), this, SLOT(exitLoop()));
 
     // Start connecting
     socket.connectToHost(QtNetworkSettings::serverName(), 993);
@@ -484,13 +484,13 @@ void tst_QSslSocket::simpleConnectWithIgnore()
     QSslSocket socket;
     this->socket = &socket;
     QSignalSpy encryptedSpy(&socket, SIGNAL(encrypted()));
-    QSignalSpy sslErrorsSpy(&socket, SIGNAL(sslErrors(const QList<QSslError> &)));
+    QSignalSpy sslErrorsSpy(&socket, SIGNAL(sslErrors(QList<QSslError>)));
 
     connect(&socket, SIGNAL(readyRead()), this, SLOT(exitLoop()));
     connect(&socket, SIGNAL(encrypted()), this, SLOT(exitLoop()));
     connect(&socket, SIGNAL(connected()), this, SLOT(exitLoop()));
-    connect(&socket, SIGNAL(sslErrors(const QList<QSslError> &)), this, SLOT(ignoreErrorSlot()));
-    connect(&socket, SIGNAL(sslErrors(const QList<QSslError> &)), this, SLOT(exitLoop()));
+    connect(&socket, SIGNAL(sslErrors(QList<QSslError>)), this, SLOT(ignoreErrorSlot()));
+    connect(&socket, SIGNAL(sslErrors(QList<QSslError>)), this, SLOT(exitLoop()));
 
     // Start connecting
     socket.connectToHost(QtNetworkSettings::serverName(), 993);
@@ -943,7 +943,7 @@ protected:
     {
         socket = new QSslSocket(this);
         socket->setProtocol(protocol);
-        connect(socket, SIGNAL(sslErrors(const QList<QSslError> &)), this, SLOT(ignoreErrorSlot()));
+        connect(socket, SIGNAL(sslErrors(QList<QSslError>)), this, SLOT(ignoreErrorSlot()));
 
         QFile file(m_keyFile);
         QVERIFY(file.open(QIODevice::ReadOnly));
@@ -1071,7 +1071,7 @@ void tst_QSslSocket::protocolServerSide()
     socket->setProtocol(clientProtocol);
     // upon SSL wrong version error, error will be triggered, not sslErrors
     connect(socket, SIGNAL(error(QAbstractSocket::SocketError)), &loop, SLOT(quit()));
-    connect(socket, SIGNAL(sslErrors(const QList<QSslError> &)), this, SLOT(ignoreErrorSlot()));
+    connect(socket, SIGNAL(sslErrors(QList<QSslError>)), this, SLOT(ignoreErrorSlot()));
     connect(socket, SIGNAL(encrypted()), &loop, SLOT(quit()));
 
     client->connectToHostEncrypted(QHostAddress(QHostAddress::LocalHost).toString(), server.serverPort());
@@ -1122,7 +1122,7 @@ void tst_QSslSocket::setSocketDescriptor()
 
     QSslSocketPtr client(new QSslSocket);
     socket = client.data();;
-    connect(socket, SIGNAL(sslErrors(const QList<QSslError> &)), this, SLOT(ignoreErrorSlot()));
+    connect(socket, SIGNAL(sslErrors(QList<QSslError>)), this, SLOT(ignoreErrorSlot()));
     connect(socket, SIGNAL(encrypted()), &loop, SLOT(quit()));
 
     client->connectToHostEncrypted(QHostAddress(QHostAddress::LocalHost).toString(), server.serverPort());
@@ -1178,7 +1178,7 @@ void tst_QSslSocket::waitForEncrypted()
     QSslSocketPtr socket = newSocket();
     this->socket = socket.data();
 
-    connect(this->socket, SIGNAL(sslErrors(const QList<QSslError> &)), this, SLOT(ignoreErrorSlot()));
+    connect(this->socket, SIGNAL(sslErrors(QList<QSslError>)), this, SLOT(ignoreErrorSlot()));
     socket->connectToHostEncrypted(QtNetworkSettings::serverName(), 443);
 
     QVERIFY(socket->waitForEncrypted(10000));
@@ -1195,7 +1195,7 @@ void tst_QSslSocket::waitForEncryptedMinusOne()
     QSslSocketPtr socket = newSocket();
     this->socket = socket.data();
 
-    connect(this->socket, SIGNAL(sslErrors(const QList<QSslError> &)), this, SLOT(ignoreErrorSlot()));
+    connect(this->socket, SIGNAL(sslErrors(QList<QSslError>)), this, SLOT(ignoreErrorSlot()));
     socket->connectToHostEncrypted(QtNetworkSettings::serverName(), 443);
 
     QVERIFY(socket->waitForEncrypted(-1));
@@ -1209,7 +1209,7 @@ void tst_QSslSocket::waitForConnectedEncryptedReadyRead()
     QSslSocketPtr socket = newSocket();
     this->socket = socket.data();
 
-    connect(this->socket, SIGNAL(sslErrors(const QList<QSslError> &)), this, SLOT(ignoreErrorSlot()));
+    connect(this->socket, SIGNAL(sslErrors(QList<QSslError>)), this, SLOT(ignoreErrorSlot()));
     socket->connectToHostEncrypted(QtNetworkSettings::serverName(), 993);
 
     QVERIFY(socket->waitForConnected(10000));
@@ -1586,7 +1586,7 @@ protected:
     void incomingConnection(qintptr socketDescriptor)
     {
         socket = new QSslSocket(this);
-        connect(socket, SIGNAL(sslErrors(const QList<QSslError> &)), this, SLOT(ignoreErrorSlot()));
+        connect(socket, SIGNAL(sslErrors(QList<QSslError>)), this, SLOT(ignoreErrorSlot()));
 
         QFile file(SRCDIR "certs/fluke.key");
         QVERIFY(file.open(QIODevice::ReadOnly));
@@ -1984,8 +1984,8 @@ void tst_QSslSocket::ignoreSslErrorsListWithSlot()
     storedExpectedSslErrors = expectedSslErrors;
     connect(&socket, SIGNAL(proxyAuthenticationRequired(QNetworkProxy,QAuthenticator*)),
             this, SLOT(proxyAuthenticationRequired(QNetworkProxy,QAuthenticator*)));
-    connect(&socket, SIGNAL(sslErrors(const QList<QSslError> &)),
-            this, SLOT(ignoreErrorListSlot(const QList<QSslError> &)));
+    connect(&socket, SIGNAL(sslErrors(QList<QSslError>)),
+            this, SLOT(ignoreErrorListSlot(QList<QSslError>)));
     socket.connectToHostEncrypted(QtNetworkSettings::serverName(), 443);
 
     QFETCH(int, expectedSslErrorSignalCount);
@@ -2027,7 +2027,7 @@ void tst_QSslSocket::writeBigChunk()
     QSslSocketPtr socket = newSocket();
     this->socket = socket.data();
 
-    connect(this->socket, SIGNAL(sslErrors(const QList<QSslError> &)), this, SLOT(ignoreErrorSlot()));
+    connect(this->socket, SIGNAL(sslErrors(QList<QSslError>)), this, SLOT(ignoreErrorSlot()));
     socket->connectToHostEncrypted(QtNetworkSettings::serverName(), 443);
 
     QByteArray data;
@@ -2507,7 +2507,7 @@ void tst_QSslSocket::setEmptyDefaultConfiguration() // this test should be last,
     QSslConfiguration::setDefaultConfiguration(emptyConf);
 
     QSslSocketPtr socket = newSocket();
-    connect(socket.data(), SIGNAL(sslErrors(const QList<QSslError> &)), this, SLOT(ignoreErrorSlot()));
+    connect(socket.data(), SIGNAL(sslErrors(QList<QSslError>)), this, SLOT(ignoreErrorSlot()));
     socket->connectToHostEncrypted(QtNetworkSettings::serverName(), 443);
     QVERIFY2(!socket->waitForEncrypted(4000), qPrintable(socket->errorString()));
 }
diff --git a/tests/auto/other/qnetworkaccessmanager_and_qprogressdialog/tst_qnetworkaccessmanager_and_qprogressdialog.cpp b/tests/auto/other/qnetworkaccessmanager_and_qprogressdialog/tst_qnetworkaccessmanager_and_qprogressdialog.cpp
index 037589e..4d91d33 100644
--- a/tests/auto/other/qnetworkaccessmanager_and_qprogressdialog/tst_qnetworkaccessmanager_and_qprogressdialog.cpp
+++ b/tests/auto/other/qnetworkaccessmanager_and_qprogressdialog/tst_qnetworkaccessmanager_and_qprogressdialog.cpp
@@ -87,8 +87,8 @@ public slots:
                 QNetworkRequest(
                 QUrl("http://" + QtNetworkSettings::serverName() + "/qtest/bigfile")
                 ));
-        connect(reply, SIGNAL(downloadProgress(qint64, qint64)),
-                this, SLOT(dataReadProgress(qint64, qint64)));
+        connect(reply, SIGNAL(downloadProgress(qint64,qint64)),
+                this, SLOT(dataReadProgress(qint64,qint64)));
         connect(reply, SIGNAL(readyRead()),
                 this, SLOT(dataReadyRead()));
         connect(reply, SIGNAL(finished()), this, SLOT(finishedFromReply()));
diff --git a/tests/benchmarks/network/access/qnetworkreply/tst_qnetworkreply.cpp b/tests/benchmarks/network/access/qnetworkreply/tst_qnetworkreply.cpp
index 72d0b13..c518748 100644
--- a/tests/benchmarks/network/access/qnetworkreply/tst_qnetworkreply.cpp
+++ b/tests/benchmarks/network/access/qnetworkreply/tst_qnetworkreply.cpp
@@ -515,7 +515,7 @@ void tst_qnetworkreply::echoPerformance()
 
     QBENCHMARK{
         QNetworkReply* reply = manager.post(request, data);
-        connect(reply, SIGNAL(sslErrors( const QList<QSslError> &)), reply, SLOT(ignoreSslErrors()));
+        connect(reply, SIGNAL(sslErrors(QList<QSslError>)), reply, SLOT(ignoreSslErrors()));
         connect(reply, SIGNAL(finished()), &QTestEventLoop::instance(), SLOT(exitLoop()), Qt::QueuedConnection);
         QTestEventLoop::instance().enterLoop(5);
         QVERIFY(!QTestEventLoop::instance().timeout());
@@ -783,7 +783,7 @@ public slots:
         QNetworkRequest request = requestList.takeFirst();
         timeOneRequest.restart();
         reply = manager.get(request);
-        QObject::connect(reply, SIGNAL(sslErrors( const QList<QSslError> &)), reply, SLOT(ignoreSslErrors()));
+        QObject::connect(reply, SIGNAL(sslErrors(QList<QSslError>)), reply, SLOT(ignoreSslErrors()));
         QObject::connect(reply, SIGNAL(finished()), this, SLOT(doNextRequest()));
     }
 
diff --git a/tests/benchmarks/network/kernel/qhostinfo/main.cpp b/tests/benchmarks/network/kernel/qhostinfo/main.cpp
index 91a067b..4fc14c2 100644
--- a/tests/benchmarks/network/kernel/qhostinfo/main.cpp
+++ b/tests/benchmarks/network/kernel/qhostinfo/main.cpp
@@ -108,7 +108,7 @@ void tst_qhostinfo::lookupSpeed()
 
     QBENCHMARK {
         for (int i = 0; i < hostnameList.size(); i++)
-            QHostInfo::lookupHost(hostnameList.at(i), &receiver, SLOT(resultsReady(const QHostInfo)));
+            QHostInfo::lookupHost(hostnameList.at(i), &receiver, SLOT(resultsReady(QHostInfo)));
         QTestEventLoop::instance().enterLoop(20);
         QVERIFY(!QTestEventLoop::instance().timeout());
     }
diff --git a/tests/manual/bearerex/bearerex.cpp b/tests/manual/bearerex/bearerex.cpp
index 22f6c26..a63d5a7 100644
--- a/tests/manual/bearerex/bearerex.cpp
+++ b/tests/manual/bearerex/bearerex.cpp
@@ -53,14 +53,14 @@ BearerEx::BearerEx(QWidget* parent)
     createMenus();
     
     connect(&m_NetworkConfigurationManager, SIGNAL(updateCompleted()), this, SLOT(configurationsUpdateCompleted()));
-    connect(&m_NetworkConfigurationManager, SIGNAL(configurationAdded(const QNetworkConfiguration&)),
-            this, SLOT(configurationAdded(const QNetworkConfiguration&)));
-    connect(&m_NetworkConfigurationManager, SIGNAL(configurationRemoved(const QNetworkConfiguration&)),
-            this, SLOT(configurationRemoved(const QNetworkConfiguration&)));
+    connect(&m_NetworkConfigurationManager, SIGNAL(configurationAdded(QNetworkConfiguration)),
+            this, SLOT(configurationAdded(QNetworkConfiguration)));
+    connect(&m_NetworkConfigurationManager, SIGNAL(configurationRemoved(QNetworkConfiguration)),
+            this, SLOT(configurationRemoved(QNetworkConfiguration)));
     connect(&m_NetworkConfigurationManager, SIGNAL(onlineStateChanged(bool)),
             this, SLOT(onlineStateChanged(bool)));
-    connect(&m_NetworkConfigurationManager, SIGNAL(configurationChanged(const QNetworkConfiguration&)),
-            this, SLOT(configurationChanged(const QNetworkConfiguration&)));
+    connect(&m_NetworkConfigurationManager, SIGNAL(configurationChanged(QNetworkConfiguration)),
+            this, SLOT(configurationChanged(QNetworkConfiguration)));
     showConfigurations();
 }
 
@@ -318,7 +318,7 @@ void SessionTab::on_createQNetworkAccessManagerButton_clicked()
         return;
     }
     createQNetworkAccessManagerButton->setText("Recreate");
-    connect(m_dataTransferer, SIGNAL(finished(quint32, qint64, QString)), this, SLOT(finished(quint32, qint64, QString)));
+    connect(m_dataTransferer, SIGNAL(finished(quint32,qint64,QString)), this, SLOT(finished(quint32,qint64,QString)));
 }
 
 void SessionTab::on_sendRequestButton_clicked()
@@ -362,12 +362,12 @@ void SessionTab::on_stopConnectionButton_clicked()
 void SessionTab::on_alrButton_clicked()
 {
     if (!m_alrEnabled) {
-        connect(m_NetworkSession, SIGNAL(preferredConfigurationChanged(const QNetworkConfiguration&, bool)),
-                this, SLOT(preferredConfigurationChanged(const QNetworkConfiguration&, bool)));
+        connect(m_NetworkSession, SIGNAL(preferredConfigurationChanged(QNetworkConfiguration,bool)),
+                this, SLOT(preferredConfigurationChanged(QNetworkConfiguration,bool)));
         alrButton->setText("Disable ALR");
         m_alrEnabled = true;
     } else {
-        disconnect(m_NetworkSession, SIGNAL(preferredConfigurationChanged(const QNetworkConfiguration&, bool)), 0, 0);
+        disconnect(m_NetworkSession, SIGNAL(preferredConfigurationChanged(QNetworkConfiguration,bool)), 0, 0);
         alrButton->setText("Enable ALR");
         m_alrEnabled = false;
     }
diff --git a/tests/manual/qnetworkaccessmanager/qget/downloadmanager.cpp b/tests/manual/qnetworkaccessmanager/qget/downloadmanager.cpp
index 2dc6b43..4dcdeee 100644
--- a/tests/manual/qnetworkaccessmanager/qget/downloadmanager.cpp
+++ b/tests/manual/qnetworkaccessmanager/qget/downloadmanager.cpp
@@ -49,10 +49,10 @@ DownloadManager::DownloadManager()
     : queueMode (Parallel)
 {
     connect(&nam, SIGNAL(finished(QNetworkReply*)), this, SLOT(finished(QNetworkReply*)));
-    connect(&nam, SIGNAL(authenticationRequired(QNetworkReply*, QAuthenticator*)), this, SLOT(authenticationRequired(QNetworkReply*, QAuthenticator*)));
-    connect(&nam, SIGNAL(proxyAuthenticationRequired(const QNetworkProxy&, QAuthenticator*)), this, SLOT(proxyAuthenticationRequired(const QNetworkProxy&, QAuthenticator*)));
+    connect(&nam, SIGNAL(authenticationRequired(QNetworkReply*,QAuthenticator*)), this, SLOT(authenticationRequired(QNetworkReply*,QAuthenticator*)));
+    connect(&nam, SIGNAL(proxyAuthenticationRequired(QNetworkProxy,QAuthenticator*)), this, SLOT(proxyAuthenticationRequired(QNetworkProxy,QAuthenticator*)));
 #ifndef QT_NO_SSL
-    connect(&nam, SIGNAL(sslErrors(QNetworkReply*, const QList<QSslError>&)), this, SLOT(sslErrors(QNetworkReply*, const QList<QSslError>&)));
+    connect(&nam, SIGNAL(sslErrors(QNetworkReply*,QList<QSslError>)), this, SLOT(sslErrors(QNetworkReply*,QList<QSslError>)));
 #endif
 }