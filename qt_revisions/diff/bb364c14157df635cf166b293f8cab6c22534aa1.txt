diff --git a/src/declarative/graphicsitems/qdeclarativeitem.cpp b/src/declarative/graphicsitems/qdeclarativeitem.cpp
index a78f8a6..86d4f6f 100644
--- a/src/declarative/graphicsitems/qdeclarativeitem.cpp
+++ b/src/declarative/graphicsitems/qdeclarativeitem.cpp
@@ -3600,8 +3600,11 @@ void QDeclarativeItem::setSize(const QSizeF &size)
 bool QDeclarativeItem::hasActiveFocus() const
 {
     Q_D(const QDeclarativeItem);
-    return (focusItem() && focusItem()->isVisible()) && (focusItem() == this ||
-           (d->flags & QGraphicsItem::ItemIsFocusScope && focusItem() != 0));
+    QGraphicsItem *fi = focusItem();
+    QGraphicsScene *s = scene();
+    bool hasOrWillGainFocus = fi && fi->isVisible() && (!s || s->focusItem() == fi);
+    bool isOrIsScopeOfFocusItem = (fi == this || (d->flags & QGraphicsItem::ItemIsFocusScope));
+    return hasOrWillGainFocus && isOrIsScopeOfFocusItem;
 }
 
 /*!
diff --git a/tests/auto/declarative/qdeclarativeitem/tst_qdeclarativeitem.cpp b/tests/auto/declarative/qdeclarativeitem/tst_qdeclarativeitem.cpp
index 51e3463..6359ca8 100644
--- a/tests/auto/declarative/qdeclarativeitem/tst_qdeclarativeitem.cpp
+++ b/tests/auto/declarative/qdeclarativeitem/tst_qdeclarativeitem.cpp
@@ -90,6 +90,7 @@ private slots:
     void testQtQuick11Attributes_data();
     void qtbug_16871();
     void qtbug_21045();
+    void hasActiveFocusAfterClear();
 private:
     QDeclarativeEngine engine;
 };
@@ -1250,6 +1251,33 @@ void tst_QDeclarativeItem::qtbug_21045()
     QVERIFY(!i->hasActiveFocus());
 }
 
+void tst_QDeclarativeItem::hasActiveFocusAfterClear()
+{
+    QGraphicsScene scene;
+    QGraphicsView view(&scene);
+    view.show();
+
+    QDeclarativeEngine engine;
+    QDeclarativeComponent qmlComponent(&engine);
+    qmlComponent.setData(
+            "import QtQuick 1.1;"
+            "TextInput {"
+            "width: 100; height: 100;"
+            "Rectangle { anchors.fill: parent; color: \"yellow\"; z: parent.z - 1 }"
+            "}", QUrl());
+    QDeclarativeItem *createdItem = qobject_cast<QDeclarativeItem*>(qmlComponent.create(engine.rootContext()));
+    QVERIFY(createdItem != 0);
+
+    scene.addItem(createdItem);
+
+    createdItem->QGraphicsItem::setFocus();
+    QCoreApplication::processEvents();
+    scene.setFocusItem(0);
+    QCoreApplication::processEvents();
+
+    QVERIFY(!createdItem->hasActiveFocus());
+}
+
 QTEST_MAIN(tst_QDeclarativeItem)
 
 #include "tst_qdeclarativeitem.moc"