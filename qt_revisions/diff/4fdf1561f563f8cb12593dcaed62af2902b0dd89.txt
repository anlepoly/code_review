diff --git a/tools/qdoc3/codeparser.cpp b/tools/qdoc3/codeparser.cpp
index ac5bc3d..8e233ca 100644
--- a/tools/qdoc3/codeparser.cpp
+++ b/tools/qdoc3/codeparser.cpp
@@ -299,6 +299,9 @@ void CodeParser::processCommonMetaCommand(const Location& location,
         if (node->type() == Node::Fake) {
             FakeNode *fake = static_cast<FakeNode *>(node);
             fake->setTitle(arg);
+            if (fake->subType() == Node::Example) {
+                ExampleNode::exampleNodeMap.insert(fake->title(),static_cast<ExampleNode*>(fake));
+            }
             nameToTitle.insert(fake->name(),arg);
         }
         else
diff --git a/tools/qdoc3/htmlgenerator.cpp b/tools/qdoc3/htmlgenerator.cpp
index 1031a71..7214ca0 100644
--- a/tools/qdoc3/htmlgenerator.cpp
+++ b/tools/qdoc3/htmlgenerator.cpp
@@ -791,7 +791,6 @@ int HtmlGenerator::generateAtom(const Atom *atom,
                     if (cen->imageFileName().isEmpty()) {
                         ExampleNode* en = const_cast<ExampleNode*>(cen);
                         en->setImageFileName(fileName);
-                        ExampleNode::exampleNodeMap.insert(en->title(),en);
                     }
                 }
             }
@@ -4721,7 +4720,8 @@ void HtmlGenerator::generateManifestFile(QString manifest, QString element)
                 }
             }
         }
-        writer.writeAttribute("imageUrl", manifestDir + en->imageFileName());
+        if (!en->imageFileName().isEmpty())
+            writer.writeAttribute("imageUrl", manifestDir + en->imageFileName());
         writer.writeStartElement("description");
         Text brief = en->doc().briefText();
         if (!brief.isEmpty())
diff --git a/tools/qdoc3/node.h b/tools/qdoc3/node.h
index d70816e..7494cec 100644
--- a/tools/qdoc3/node.h
+++ b/tools/qdoc3/node.h
@@ -68,7 +68,7 @@ class Tree;
 
 typedef QMap<QString, const Node*> NodeMap;
 typedef QMultiMap<QString, Node*> NodeMultiMap;
-typedef QMap<QString, const ExampleNode*> ExampleNodeMap;
+typedef QMultiMap<QString, const ExampleNode*> ExampleNodeMap;
 typedef QList<QPair<QString,QString> > ImportList;
 
 class Node