diff --git a/tests/auto/corelib/io/qiodevice/tst_qiodevice.cpp b/tests/auto/corelib/io/qiodevice/tst_qiodevice.cpp
index 07a1fff..2712b19 100644
--- a/tests/auto/corelib/io/qiodevice/tst_qiodevice.cpp
+++ b/tests/auto/corelib/io/qiodevice/tst_qiodevice.cpp
@@ -70,7 +70,6 @@ private slots:
 
 void tst_QIODevice::initTestCase()
 {
-    QVERIFY(QtNetworkSettings::verifyTestNetworkSettings());
 }
 
 // Testing get/set functions
@@ -96,6 +95,9 @@ void tst_QIODevice::constructing_QTcpSocket()
 #if defined(Q_OS_WINCE) && defined(WINCE_EMULATOR_TEST)
     QSKIP("Networking tests in a WinCE emulator are unstable");
 #endif
+    if (!QtNetworkSettings::verifyTestNetworkSettings())
+        QSKIP("No network test server available");
+
     QTcpSocket socket;
     QIODevice *device = &socket;
 
@@ -256,6 +258,8 @@ void tst_QIODevice::unget()
             result = QByteArray("ZXCV");
             lineResult = "ZXCV";
         } else {
+            if (!QtNetworkSettings::verifyTestNetworkSettings())
+                QSKIP("No network test server available");
             socket.connectToHost(QtNetworkSettings::serverName(), 80);
             socket.write("GET / HTTP/1.0\r\n\r\n");
             QVERIFY(socket.waitForReadyRead());
diff --git a/tests/auto/corelib/io/qtextstream/tst_qtextstream.cpp b/tests/auto/corelib/io/qtextstream/tst_qtextstream.cpp
index b22723a..8119ca1 100644
--- a/tests/auto/corelib/io/qtextstream/tst_qtextstream.cpp
+++ b/tests/auto/corelib/io/qtextstream/tst_qtextstream.cpp
@@ -253,8 +253,6 @@ tst_QTextStream::tst_QTextStream()
 
 void tst_QTextStream::initTestCase()
 {
-    QVERIFY(QtNetworkSettings::verifyTestNetworkSettings());
-
     testFileName = tempDir.path() + "/testfile";
 
     // chdir into the testdata dir and refer to our helper apps with relative paths
@@ -1108,6 +1106,9 @@ void tst_QTextStream::stillOpenWhenAtEnd()
 #ifdef Q_OS_WINCE
     QSKIP("Qt/CE: Cannot test network on emulator");
 #endif
+    if (!QtNetworkSettings::verifyTestNetworkSettings())
+        QSKIP("No network test server available");
+
     QTcpSocket socket;
     socket.connectToHost(QtNetworkSettings::serverName(), 143);
     QVERIFY(socket.waitForReadyRead(5000));