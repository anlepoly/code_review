diff --git a/src/plugins/accessible/widgets/simplewidgets.cpp b/src/plugins/accessible/widgets/simplewidgets.cpp
index bb90061..9bdb1de 100644
--- a/src/plugins/accessible/widgets/simplewidgets.cpp
+++ b/src/plugins/accessible/widgets/simplewidgets.cpp
@@ -53,6 +53,7 @@
 #include <qgroupbox.h>
 #include <qlcdnumber.h>
 #include <qlineedit.h>
+#include <private/qlineedit_p.h>
 #include <qstyle.h>
 #include <qstyleoption.h>
 #include <qtextdocument.h>
@@ -672,10 +673,20 @@ int QAccessibleLineEdit::cursorPosition() const
     return lineEdit()->cursorPosition();
 }
 
-QRect QAccessibleLineEdit::characterRect(int /*offset*/) const
+QRect QAccessibleLineEdit::characterRect(int offset) const
 {
-    // QLineEdit doesn't hand out character rects
-    return QRect();
+    int x = lineEdit()->d_func()->control->cursorToX(offset);
+    int y;
+    lineEdit()->getTextMargins(0, &y, 0, 0);
+    QFontMetrics fm(lineEdit()->font());
+    const QString ch = text(offset, offset + 1);
+    if (ch.isEmpty())
+        return QRect();
+    int w = fm.width(ch);
+    int h = fm.height();
+    QRect r(x, y, w, h);
+    r.moveTo(lineEdit()->mapToGlobal(r.topLeft()));
+    return r;
 }
 
 int QAccessibleLineEdit::selectionCount() const
diff --git a/src/widgets/widgets/qlineedit.h b/src/widgets/widgets/qlineedit.h
index 71ffbf2..f18fd4a 100644
--- a/src/widgets/widgets/qlineedit.h
+++ b/src/widgets/widgets/qlineedit.h
@@ -225,6 +225,7 @@ public:
 
 private:
     friend class QAbstractSpinBox;
+    friend class QAccessibleLineEdit;
 #ifdef QT_KEYPAD_NAVIGATION
     friend class QDateTimeEdit;
 #endif
diff --git a/tests/auto/other/qaccessibility/tst_qaccessibility.cpp b/tests/auto/other/qaccessibility/tst_qaccessibility.cpp
index 80f52cb..1b8ac10 100644
--- a/tests/auto/other/qaccessibility/tst_qaccessibility.cpp
+++ b/tests/auto/other/qaccessibility/tst_qaccessibility.cpp
@@ -1907,6 +1907,22 @@ void tst_QAccessibility::lineEditTest()
     }
 
     {
+        QLineEdit le(QStringLiteral("My characters have geometries."), toplevel);
+        // characterRect()
+        le.show();
+        QTest::qWaitForWindowShown(&le);
+        QAIPtr iface(QAccessible::queryAccessibleInterface(&le));
+        QAccessibleTextInterface* textIface = iface->textInterface();
+        QVERIFY(textIface);
+        const QRect lineEditRect = iface->rect();
+        // Only first 10 characters, check if they are within the bounds of line edit
+        for (int i = 0; i < 10; ++i) {
+            QVERIFY(lineEditRect.contains(textIface->characterRect(i)));
+        }
+        QTestAccessibility::clearEvents();
+    }
+
+    {
     // Test events: cursor movement, selection, text changes
     QString text = "Hello, world";
     QLineEdit *lineEdit = new QLineEdit(text, toplevel);