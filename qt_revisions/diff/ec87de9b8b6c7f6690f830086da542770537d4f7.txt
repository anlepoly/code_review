diff --git a/src/designer/src/components/formeditor/qdesigner_resource.cpp b/src/designer/src/components/formeditor/qdesigner_resource.cpp
index 8127e43..0175baa 100644
--- a/src/designer/src/components/formeditor/qdesigner_resource.cpp
+++ b/src/designer/src/components/formeditor/qdesigner_resource.cpp
@@ -2067,15 +2067,15 @@ void QDesignerResource::createResources(DomResources *resources)
             QString path = QDir::cleanPath(m_formWindow->absoluteDir().absoluteFilePath(res->attributeLocation()));
             while (!QFile::exists(path)) {
                 QWidget *dialogParent = m_formWindow->core()->topLevel();
-                const QString promptTitle = QApplication::translate("qdesigner_internal::QDesignerResource", "Loading qrc file", 0, QApplication::UnicodeUTF8);
-                const QString prompt = QApplication::translate("qdesigner_internal::QDesignerResource", "The specified qrc file <p><b>%1</b></p><p>could not be found. Do you want to update the file location?</p>", 0, QApplication::UnicodeUTF8).arg(path);
+                const QString promptTitle = QCoreApplication::translate("qdesigner_internal::QDesignerResource", "Loading qrc file");
+                const QString prompt = QCoreApplication::translate("qdesigner_internal::QDesignerResource", "The specified qrc file <p><b>%1</b></p><p>could not be found. Do you want to update the file location?</p>").arg(path);
 
                 const QMessageBox::StandardButton answer = core()->dialogGui()->message(dialogParent,  QDesignerDialogGuiInterface::ResourceLoadFailureMessage,
                         QMessageBox::Warning, promptTitle,  prompt, QMessageBox::Yes|QMessageBox::No, QMessageBox::Yes);
                 if (answer == QMessageBox::Yes) {
                     const QFileInfo fi(path);
-                    const QString fileDialogTitle = QApplication::translate("qdesigner_internal::QDesignerResource", "New location for %1", 0, QApplication::UnicodeUTF8).arg(fi.fileName());
-                    const QString fileDialogPattern = QApplication::translate("qdesigner_internal::QDesignerResource", "Resource files (*.qrc)", 0, QApplication::UnicodeUTF8);
+                    const QString fileDialogTitle = QCoreApplication::translate("qdesigner_internal::QDesignerResource", "New location for %1").arg(fi.fileName());
+                    const QString fileDialogPattern = QCoreApplication::translate("qdesigner_internal::QDesignerResource", "Resource files (*.qrc)");
                     path = core()->dialogGui()->getOpenFileName(dialogParent, fileDialogTitle, fi.absolutePath(), fileDialogPattern);
                     if (path.isEmpty())
                         break;
diff --git a/src/designer/src/lib/shared/qdesigner_propertycommand.cpp b/src/designer/src/lib/shared/qdesigner_propertycommand.cpp
index 6677778..1b4357b 100644
--- a/src/designer/src/lib/shared/qdesigner_propertycommand.cpp
+++ b/src/designer/src/lib/shared/qdesigner_propertycommand.cpp
@@ -1254,7 +1254,7 @@ void SetPropertyCommand::setDescription()
         setText(QApplication::translate("Command", "Changed '%1' of '%2'").arg(propertyName()).arg(propertyHelperList().at(0)->object()->objectName()));
     } else {
         int count = propertyHelperList().size();
-        setText(QApplication::translate("Command", "Changed '%1' of %n objects", "", QCoreApplication::UnicodeUTF8, count).arg(propertyName()));
+        setText(QCoreApplication::translate("Command", "Changed '%1' of %n objects", "", count).arg(propertyName()));
     }
 }
 
@@ -1338,10 +1338,10 @@ bool ResetPropertyCommand::init(const ObjectList &list, const QString &aproperty
 void ResetPropertyCommand::setDescription()
 {
     if (propertyHelperList().size() == 1) {
-        setText(QApplication::translate("Command", "Reset '%1' of '%2'").arg(propertyName()).arg(propertyHelperList().at(0)->object()->objectName()));
+        setText(QCoreApplication::translate("Command", "Reset '%1' of '%2'").arg(propertyName()).arg(propertyHelperList().at(0)->object()->objectName()));
     } else {
         int count = propertyHelperList().size();
-        setText(QApplication::translate("Command", "Reset '%1' of %n objects", "", QCoreApplication::UnicodeUTF8, count).arg(propertyName()));
+        setText(QCoreApplication::translate("Command", "Reset '%1' of %n objects", "", count).arg(propertyName()));
     }
 }
 
@@ -1433,7 +1433,7 @@ void AddDynamicPropertyCommand::setDescription()
         setText(QApplication::translate("Command", "Add dynamic property '%1' to '%2'").arg(m_propertyName).arg(m_selection.first()->objectName()));
     } else {
         int count = m_selection.size();
-        setText(QApplication::translate("Command", "Add dynamic property '%1' to %n objects", "", QCoreApplication::UnicodeUTF8, count).arg(m_propertyName));
+        setText(QCoreApplication::translate("Command", "Add dynamic property '%1' to %n objects", "", count).arg(m_propertyName));
     }
 }
 
@@ -1522,7 +1522,7 @@ void RemoveDynamicPropertyCommand::setDescription()
         setText(QApplication::translate("Command", "Remove dynamic property '%1' from '%2'").arg(m_propertyName).arg(m_objectToValueAndChanged.constBegin().key()->objectName()));
     } else {
         int count = m_objectToValueAndChanged.size();
-        setText(QApplication::translate("Command", "Remove dynamic property '%1' from %n objects", "", QCoreApplication::UnicodeUTF8, count).arg(m_propertyName));
+        setText(QApplication::translate("Command", "Remove dynamic property '%1' from %n objects", "", count).arg(m_propertyName));
     }
 }
 
diff --git a/src/designer/src/lib/shared/qtresourceeditordialog.cpp b/src/designer/src/lib/shared/qtresourceeditordialog.cpp
index 109dff4..1d3d551 100644
--- a/src/designer/src/lib/shared/qtresourceeditordialog.cpp
+++ b/src/designer/src/lib/shared/qtresourceeditordialog.cpp
@@ -74,12 +74,12 @@ static const char *QrcDialogC = "QrcDialog";
 
 static QString msgOverwrite(const QString &fname)
 {
-    return QApplication::translate("QtResourceEditorDialog", "%1 already exists.\nDo you want to replace it?", 0, QApplication::UnicodeUTF8).arg(fname);
+    return QCoreApplication::translate("QtResourceEditorDialog", "%1 already exists.\nDo you want to replace it?").arg(fname);
 }
 
 static QString msgTagMismatch(const QString &got, const QString &expected)
 {
-    return QApplication::translate("QtResourceEditorDialog", "The file does not appear to be a resource file; element '%1' was found where '%2' was expected.").arg(got).arg(expected);
+    return QCoreApplication::translate("QtResourceEditorDialog", "The file does not appear to be a resource file; element '%1' was found where '%2' was expected.").arg(got, expected);
 }
 
 namespace {
@@ -1109,7 +1109,7 @@ void QtResourceEditorDialogPrivate::slotResourcePrefixChanged(QtResourcePrefix *
     m_ignoreCurrentChanged = true;
     QString prefix = resourcePrefix->prefix();
     if (prefix.isEmpty())
-        prefix = QApplication::translate("QtResourceEditorDialog", "<no prefix>", 0, QApplication::UnicodeUTF8);
+        prefix = QCoreApplication::translate("QtResourceEditorDialog", "<no prefix>");
     item->setText(prefix);
     item->setToolTip(prefix);
     m_ignoreCurrentChanged = false;
@@ -1429,9 +1429,9 @@ QString QtResourceEditorDialogPrivate::qrcStartDirectory() const
 void QtResourceEditorDialogPrivate::slotNewQrcFile()
 {
     const QString qrcPath = getSaveFileNameWithExtension(q_ptr,
-                QApplication::translate("QtResourceEditorDialog", "New Resource File", 0, QApplication::UnicodeUTF8),
+                QCoreApplication::translate("QtResourceEditorDialog", "New Resource File"),
                 m_firstQrcFileDialog ? qrcStartDirectory() : QString(),
-                QApplication::translate("QtResourceEditorDialog", "Resource files (*.qrc)", 0, QApplication::UnicodeUTF8),
+                QCoreApplication::translate("QtResourceEditorDialog", "Resource files (*.qrc)"),
                 QStringLiteral("qrc"));
     if (qrcPath.isEmpty())
         return;
@@ -1454,9 +1454,9 @@ void QtResourceEditorDialogPrivate::slotNewQrcFile()
 void QtResourceEditorDialogPrivate::slotImportQrcFile()
 {
     const QString qrcPath = m_dlgGui->getOpenFileName(q_ptr,
-                QApplication::translate("QtResourceEditorDialog", "Import Resource File", 0, QApplication::UnicodeUTF8),
+                QCoreApplication::translate("QtResourceEditorDialog", "Import Resource File"),
                 m_firstQrcFileDialog ? qrcStartDirectory() : QString(),
-                QApplication::translate("QtResourceEditorDialog", "Resource files (*.qrc)", 0, QApplication::UnicodeUTF8));
+                QCoreApplication::translate("QtResourceEditorDialog", "Resource files (*.qrc)"));
     if (qrcPath.isEmpty())
         return;
     m_firstQrcFileDialog = false;
@@ -1566,7 +1566,7 @@ void QtResourceEditorDialogPrivate::slotNewPrefix()
     QtResourcePrefix *currentResourcePrefix = getCurrentResourcePrefix();
     QtResourcePrefix *nextResourcePrefix = m_qrcManager->nextResourcePrefix(currentResourcePrefix);
     QtResourcePrefix *newResourcePrefix = m_qrcManager->insertResourcePrefix(m_currentQrcFile,
-                QApplication::translate("QtResourceEditorDialog", "newPrefix", 0, QApplication::UnicodeUTF8),
+                QCoreApplication::translate("QtResourceEditorDialog", "newPrefix"),
                 QString(), nextResourcePrefix);
     if (!newResourcePrefix)
         return;
@@ -1615,7 +1615,7 @@ void QtResourceEditorDialogPrivate::slotAddFiles()
     }
 
     const QStringList resourcePaths = m_dlgGui->getOpenImageFileNames(q_ptr,
-                QApplication::translate("QtResourceEditorDialog", "Add Files", 0, QApplication::UnicodeUTF8),
+                QCoreApplication::translate("QtResourceEditorDialog", "Add Files"),
                 initialPath);
     if (resourcePaths.isEmpty())
         return;
@@ -1636,17 +1636,17 @@ void QtResourceEditorDialogPrivate::slotAddFiles()
         QString relativePath = dir.relativeFilePath(resourcePath);
         if (relativePath.startsWith(QStringLiteral(".."))) {
             QMessageBox msgBox(QMessageBox::Warning,
-                    QApplication::translate("QtResourceEditorDialog", "Incorrect Path", 0, QApplication::UnicodeUTF8),
+                    QCoreApplication::translate("QtResourceEditorDialog", "Incorrect Path"),
                     outOfPathWarning(relativePath), QMessageBox::Cancel);
             msgBox.setInformativeText(outOfPathWarningInfo());
-            QPushButton *copyButton = msgBox.addButton(QApplication::translate("QtResourceEditorDialog",
-                        "Copy", 0, QApplication::UnicodeUTF8), QMessageBox::ActionRole);
-            QPushButton *copyAsButton = msgBox.addButton(QApplication::translate("QtResourceEditorDialog",
-                        "Copy As...", 0, QApplication::UnicodeUTF8), QMessageBox::ActionRole);
-            QPushButton *keepButton = msgBox.addButton(QApplication::translate("QtResourceEditorDialog",
-                        "Keep", 0, QApplication::UnicodeUTF8), QMessageBox::ActionRole);
-            QPushButton *skipButton = msgBox.addButton(QApplication::translate("QtResourceEditorDialog",
-                        "Skip", 0, QApplication::UnicodeUTF8), QMessageBox::ActionRole);
+            QPushButton *copyButton = msgBox.addButton(QCoreApplication::translate("QtResourceEditorDialog",
+                        "Copy"), QMessageBox::ActionRole);
+            QPushButton *copyAsButton = msgBox.addButton(QCoreApplication::translate("QtResourceEditorDialog",
+                        "Copy As..."), QMessageBox::ActionRole);
+            QPushButton *keepButton = msgBox.addButton(QCoreApplication::translate("QtResourceEditorDialog",
+                        "Keep"), QMessageBox::ActionRole);
+            QPushButton *skipButton = msgBox.addButton(QCoreApplication::translate("QtResourceEditorDialog",
+                        "Skip"), QMessageBox::ActionRole);
             msgBox.setEscapeButton(QMessageBox::Cancel);
             msgBox.setDefaultButton(copyButton);
             msgBox.exec();
@@ -1658,7 +1658,7 @@ void QtResourceEditorDialogPrivate::slotAddFiles()
                 QDir dd(destDir);
                 destPath = dd.absoluteFilePath(resInfo.fileName());
                 if (dd.exists(resInfo.fileName())) {
-                    if (warning(QApplication::translate("QtResourceEditorDialog", "Copy", 0, QApplication::UnicodeUTF8),
+                    if (warning(QCoreApplication::translate("QtResourceEditorDialog", "Copy"),
                                 msgOverwrite(resInfo.fileName()),
                                 QMessageBox::Yes | QMessageBox::Cancel, QMessageBox::Cancel) != QMessageBox::Yes)
                         continue;
@@ -1732,9 +1732,9 @@ void QtResourceEditorDialogPrivate::slotClonePrefix()
         return;
 
     bool ok;
-    QString suffix = QInputDialog::getText(q_ptr, QApplication::translate("QtResourceEditorDialog", "Clone Prefix", 0, QApplication::UnicodeUTF8),
-            QApplication::translate("QtResourceEditorDialog", "Enter the suffix which you want to add to the names of the cloned files.\n"
-                "This could for example be a language extension like \"_de\".", 0, QApplication::UnicodeUTF8),
+    QString suffix = QInputDialog::getText(q_ptr, QApplication::translate("QtResourceEditorDialog", "Clone Prefix"),
+            QCoreApplication::translate("QtResourceEditorDialog", "Enter the suffix which you want to add to the names of the cloned files.\n"
+                "This could for example be a language extension like \"_de\"."),
             QLineEdit::Normal, QString(), &ok);
     if (!ok)
         return;
@@ -1846,15 +1846,15 @@ QString QtResourceEditorDialogPrivate::browseForNewLocation(const QString &resou
     const QString initialPath = rootDir.absoluteFilePath(fi.fileName());
     while (1) {
         QString newPath = m_dlgGui->getSaveFileName(q_ptr,
-                    QApplication::translate("QtResourceEditorDialog", "Copy As", 0, QApplication::UnicodeUTF8),
+                    QCoreApplication::translate("QtResourceEditorDialog", "Copy As"),
                     initialPath);
         QString relativePath = rootDir.relativeFilePath(newPath);
         if (relativePath.startsWith(QStringLiteral(".."))) {
-            if (warning(QApplication::translate("QtResourceEditorDialog", "Copy As", 0, QApplication::UnicodeUTF8),
-                        QApplication::translate("QtResourceEditorDialog", "<p>The selected file:</p>"
+            if (warning(QCoreApplication::translate("QtResourceEditorDialog", "Copy As"),
+                        QCoreApplication::translate("QtResourceEditorDialog", "<p>The selected file:</p>"
                                         "<p>%1</p><p>is outside of the current resource file's directory:</p><p>%2</p>"
-                                        "<p>Please select another path within this directory.<p>", 0,
-                                        QApplication::UnicodeUTF8).arg(relativePath).arg(rootDir.absolutePath()),
+                                        "<p>Please select another path within this directory.<p>").
+                        arg(relativePath, rootDir.absolutePath()),
                         QMessageBox::Ok | QMessageBox::Cancel, QMessageBox::Ok) != QMessageBox::Ok)
                 return QString();
         } else {
@@ -1870,16 +1870,16 @@ QString QtResourceEditorDialogPrivate::copyResourceFile(const QString &resourceF
     QFileInfo fi(destPath);
     if (fi.exists()) {
         while (fi.exists() && !QFile::remove(destPath)) {
-            if (warning(QApplication::translate("QtResourceEditorDialog", "Copy", 0, QApplication::UnicodeUTF8),
-                        QApplication::translate("QtResourceEditorDialog", "Could not overwrite %1.", 0, QApplication::UnicodeUTF8).arg(fi.fileName()),
+            if (warning(QCoreApplication::translate("QtResourceEditorDialog", "Copy"),
+                        QCoreApplication::translate("QtResourceEditorDialog", "Could not overwrite %1.").arg(fi.fileName()),
                         QMessageBox::Retry | QMessageBox::Cancel, QMessageBox::Cancel) != QMessageBox::Retry)
                 return QString();
         }
     }
     while (!QFile::copy(resourceFile, destPath)) {
-        if (warning(QApplication::translate("QtResourceEditorDialog", "Copy", 0, QApplication::UnicodeUTF8),
-                    QApplication::translate("QtResourceEditorDialog", "Could not copy\n%1\nto\n%2",
-                        0, QApplication::UnicodeUTF8).arg(resourceFile).arg(destPath),
+        if (warning(QCoreApplication::translate("QtResourceEditorDialog", "Copy"),
+                    QCoreApplication::translate("QtResourceEditorDialog", "Could not copy\n%1\nto\n%2")
+                    .arg(resourceFile, destPath),
                     QMessageBox::Retry | QMessageBox::Cancel, QMessageBox::Cancel) != QMessageBox::Retry)
             return QString();
     }
@@ -1925,8 +1925,8 @@ bool QtResourceEditorDialogPrivate::saveQrcFile(const QtQrcFileData &qrcFileData
     QFile file(qrcFileData.qrcPath);
     while (!file.open(QIODevice::WriteOnly)) {
         QMessageBox msgBox(QMessageBox::Warning,
-                QApplication::translate("QtResourceEditorDialog", "Save Resource File", 0, QApplication::UnicodeUTF8),
-                QApplication::translate("QtResourceEditorDialog", "Could not write %1: %2", 0, QApplication::UnicodeUTF8).arg(qrcFileData.qrcPath).arg(file.errorString()),
+                QCoreApplication::translate("QtResourceEditorDialog", "Save Resource File"),
+                QCoreApplication::translate("QtResourceEditorDialog", "Could not write %1: %2").arg(qrcFileData.qrcPath).arg(file.errorString()),
                 QMessageBox::Cancel|QMessageBox::Ignore|QMessageBox::Retry);
         msgBox.setEscapeButton(QMessageBox::Cancel);
         msgBox.setDefaultButton(QMessageBox::Ignore);
diff --git a/src/designer/src/uitools/quiloader.cpp b/src/designer/src/uitools/quiloader.cpp
index 7deb50b..5e158b3 100644
--- a/src/designer/src/uitools/quiloader.cpp
+++ b/src/designer/src/uitools/quiloader.cpp
@@ -118,8 +118,7 @@ QVariant TranslatingTextBuilder::toNativeValue(const QVariant &value) const
         if (!m_trEnabled)
             return QString::fromUtf8(tsv.value().data());
         return QVariant::fromValue(
-            QApplication::translate(m_className, tsv.value(), tsv.comment(),
-                                    QCoreApplication::UnicodeUTF8));
+            QCoreApplication::translate(m_className, tsv.value(), tsv.comment()));
     }
     if (value.canConvert<QString>())
         return QVariant::fromValue(qvariant_cast<QString>(value));
@@ -151,9 +150,8 @@ static void recursiveReTranslate(QTreeWidgetItem *item, const QByteArray &class_
             QVariant v = item->data(i, irs[j].shadowRole);
             if (v.isValid()) {
                 QUiTranslatableStringValue tsv = qvariant_cast<QUiTranslatableStringValue>(v);
-                const QString text = QApplication::translate(class_name,
-                                                             tsv.value(), tsv.comment(),
-                                                             QCoreApplication::UnicodeUTF8);
+                const QString text =
+                    QCoreApplication::translate(class_name, tsv.value(), tsv.comment());
                 item->setData(i, irs[j].realRole, text);
             }
         }
@@ -173,9 +171,8 @@ static void reTranslateWidgetItem(T *item, const QByteArray &class_name)
         QVariant v = item->data(irs[j].shadowRole);
         if (v.isValid()) {
             QUiTranslatableStringValue tsv = qvariant_cast<QUiTranslatableStringValue>(v);
-            const QString text = QApplication::translate(class_name,
-                                                         tsv.value(), tsv.comment(),
-                                                         QCoreApplication::UnicodeUTF8);
+            const QString text = QCoreApplication::translate(class_name,
+                                                             tsv.value(), tsv.comment());
             item->setData(irs[j].realRole, text);
         }
     }
@@ -192,9 +189,8 @@ static void reTranslateTableItem(QTableWidgetItem *item, const QByteArray &class
         QVariant v = mainWidget->widget(i)->property(propName); \
         if (v.isValid()) { \
             QUiTranslatableStringValue tsv = qvariant_cast<QUiTranslatableStringValue>(v); \
-            const QString text = QApplication::translate(m_className, \
-                                                         tsv.value(), tsv.comment(), \
-                                                         QCoreApplication::UnicodeUTF8); \
+            const QString text = QCoreApplication::translate(m_className, \
+                                                             tsv.value(), tsv.comment()); \
             mainWidget->setter(i, text); \
         } \
     } while (0)
@@ -218,9 +214,8 @@ public:
                     const QByteArray propName = prop.mid(sizeof(PROP_GENERIC_PREFIX) - 1);
                     const QUiTranslatableStringValue tsv =
                                 qvariant_cast<QUiTranslatableStringValue>(o->property(prop));
-                    const QString text = QApplication::translate(m_className,
-                                                                 tsv.value(), tsv.comment(),
-                                                                 QCoreApplication::UnicodeUTF8);
+                    const QString text = QCoreApplication::translate(m_className,
+                                                                     tsv.value(), tsv.comment());
                     o->setProperty(propName, text);
                 }
             }
@@ -274,9 +269,8 @@ public:
                         const QVariant v = combow->itemData(i, Qt::DisplayPropertyRole);
                         if (v.isValid()) {
                             QUiTranslatableStringValue tsv = qvariant_cast<QUiTranslatableStringValue>(v);
-                            const QString text = QApplication::translate(m_className,
-                                                                         tsv.value(), tsv.comment(),
-                                                                         QCoreApplication::UnicodeUTF8);
+                            const QString text = QCoreApplication::translate(m_className,
+                                                                             tsv.value(), tsv.comment());
                             combow->setItemText(i, text);
                         }
                     }
@@ -402,9 +396,7 @@ static QString convertTranslatable(const DomProperty *p, const QByteArray &class
     strVal->setComment(dom_str->attributeComment().toUtf8());
     if (strVal->value().isEmpty() && strVal->comment().isEmpty())
         return QString();
-    return QApplication::translate(className,
-                                   strVal->value(), strVal->comment(),
-                                   QCoreApplication::UnicodeUTF8);
+    return QCoreApplication::translate(className, strVal->value(), strVal->comment());
 }
 
 void FormBuilderPrivate::applyProperties(QObject *o, const QList<DomProperty*> &properties)
diff --git a/src/shared/qtgradienteditor/qtgradienteditor.cpp b/src/shared/qtgradienteditor/qtgradienteditor.cpp
index 79caaa0..4dea943 100644
--- a/src/shared/qtgradienteditor/qtgradienteditor.cpp
+++ b/src/shared/qtgradienteditor/qtgradienteditor.cpp
@@ -428,42 +428,42 @@ void QtGradientEditorPrivate::setType(QGradient::Type type)
     if (type == QGradient::LinearGradient) {
         startLinearXSpinBox = m_ui.spinBox1;
         setSpinBox(startLinearXSpinBox, SLOT(slotStartLinearXChanged(double)));
-        m_ui.label1->setText(QApplication::translate("QtGradientEditor", "Start X", 0, QApplication::UnicodeUTF8));
+        m_ui.label1->setText(QCoreApplication::translate("QtGradientEditor", "Start X"));
 
         startLinearYSpinBox = m_ui.spinBox2;
         setSpinBox(startLinearYSpinBox, SLOT(slotStartLinearYChanged(double)));
-        m_ui.label2->setText(QApplication::translate("QtGradientEditor", "Start Y", 0, QApplication::UnicodeUTF8));
+        m_ui.label2->setText(QCoreApplication::translate("QtGradientEditor", "Start Y"));
 
         endLinearXSpinBox = m_ui.spinBox3;
         setSpinBox(endLinearXSpinBox, SLOT(slotEndLinearXChanged(double)));
-        m_ui.label3->setText(QApplication::translate("QtGradientEditor", "Final X", 0, QApplication::UnicodeUTF8));
+        m_ui.label3->setText(QCoreApplication::translate("QtGradientEditor", "Final X"));
 
         endLinearYSpinBox = m_ui.spinBox4;
         setSpinBox(endLinearYSpinBox, SLOT(slotEndLinearYChanged(double)));
-        m_ui.label4->setText(QApplication::translate("QtGradientEditor", "Final Y", 0, QApplication::UnicodeUTF8));
+        m_ui.label4->setText(QCoreApplication::translate("QtGradientEditor", "Final Y"));
 
         setStartLinear(m_ui.gradientWidget->startLinear());
         setEndLinear(m_ui.gradientWidget->endLinear());
     } else if (type == QGradient::RadialGradient) {
         centralRadialXSpinBox = m_ui.spinBox1;
         setSpinBox(centralRadialXSpinBox, SLOT(slotCentralRadialXChanged(double)));
-        m_ui.label1->setText(QApplication::translate("QtGradientEditor", "Central X", 0, QApplication::UnicodeUTF8));
+        m_ui.label1->setText(QCoreApplication::translate("QtGradientEditor", "Central X"));
 
         centralRadialYSpinBox = m_ui.spinBox2;
         setSpinBox(centralRadialYSpinBox, SLOT(slotCentralRadialYChanged(double)));
-        m_ui.label2->setText(QApplication::translate("QtGradientEditor", "Central Y", 0, QApplication::UnicodeUTF8));
+        m_ui.label2->setText(QCoreApplication::translate("QtGradientEditor", "Central Y"));
 
         focalRadialXSpinBox = m_ui.spinBox3;
         setSpinBox(focalRadialXSpinBox, SLOT(slotFocalRadialXChanged(double)));
-        m_ui.label3->setText(QApplication::translate("QtGradientEditor", "Focal X", 0, QApplication::UnicodeUTF8));
+        m_ui.label3->setText(QCoreApplication::translate("QtGradientEditor", "Focal X"));
 
         focalRadialYSpinBox = m_ui.spinBox4;
         setSpinBox(focalRadialYSpinBox, SLOT(slotFocalRadialYChanged(double)));
-        m_ui.label4->setText(QApplication::translate("QtGradientEditor", "Focal Y", 0, QApplication::UnicodeUTF8));
+        m_ui.label4->setText(QCoreApplication::translate("QtGradientEditor", "Focal Y"));
 
         radiusRadialSpinBox = m_ui.spinBox5;
         setSpinBox(radiusRadialSpinBox, SLOT(slotRadiusRadialChanged(double)), 2.0);
-        m_ui.label5->setText(QApplication::translate("QtGradientEditor", "Radius", 0, QApplication::UnicodeUTF8));
+        m_ui.label5->setText(QCoreApplication::translate("QtGradientEditor", "Radius"));
 
         setCentralRadial(m_ui.gradientWidget->centralRadial());
         setFocalRadial(m_ui.gradientWidget->focalRadial());
@@ -471,15 +471,15 @@ void QtGradientEditorPrivate::setType(QGradient::Type type)
     } else if (type == QGradient::ConicalGradient) {
         centralConicalXSpinBox = m_ui.spinBox1;
         setSpinBox(centralConicalXSpinBox, SLOT(slotCentralConicalXChanged(double)));
-        m_ui.label1->setText(QApplication::translate("QtGradientEditor", "Central X", 0, QApplication::UnicodeUTF8));
+        m_ui.label1->setText(QCoreApplication::translate("QtGradientEditor", "Central X"));
 
         centralConicalYSpinBox = m_ui.spinBox2;
         setSpinBox(centralConicalYSpinBox, SLOT(slotCentralConicalYChanged(double)));
-        m_ui.label2->setText(QApplication::translate("QtGradientEditor", "Central Y", 0, QApplication::UnicodeUTF8));
+        m_ui.label2->setText(QCoreApplication::translate("QtGradientEditor", "Central Y"));
 
         angleConicalSpinBox = m_ui.spinBox3;
         setSpinBox(angleConicalSpinBox, SLOT(slotAngleConicalChanged(double)), 360.0, 1.0, 1);
-        m_ui.label3->setText(QApplication::translate("QtGradientEditor", "Angle", 0, QApplication::UnicodeUTF8));
+        m_ui.label3->setText(QCoreApplication::translate("QtGradientEditor", "Angle"));
 
         setCentralConical(m_ui.gradientWidget->centralConical());
         setAngleConical(m_ui.gradientWidget->angleConical());
diff --git a/src/shared/qtgradienteditor/qtgradientstopscontroller.cpp b/src/shared/qtgradienteditor/qtgradientstopscontroller.cpp
index 13235ea..f6f9b4d 100644
--- a/src/shared/qtgradienteditor/qtgradientstopscontroller.cpp
+++ b/src/shared/qtgradienteditor/qtgradientstopscontroller.cpp
@@ -170,21 +170,21 @@ void QtGradientStopsControllerPrivate::updateZoom(double zoom)
 
 void QtGradientStopsControllerPrivate::slotHsvClicked()
 {
-    QString h = QApplication::translate("qdesigner_internal::QtGradientStopsController", "H", 0, QApplication::UnicodeUTF8);
-    QString s = QApplication::translate("qdesigner_internal::QtGradientStopsController", "S", 0, QApplication::UnicodeUTF8);
-    QString v = QApplication::translate("qdesigner_internal::QtGradientStopsController", "V", 0, QApplication::UnicodeUTF8);
+    QString h = QCoreApplication::translate("qdesigner_internal::QtGradientStopsController", "H");
+    QString s = QCoreApplication::translate("qdesigner_internal::QtGradientStopsController", "S");
+    QString v = QCoreApplication::translate("qdesigner_internal::QtGradientStopsController", "V");
 
     m_ui->hLabel->setText(h);
     m_ui->sLabel->setText(s);
     m_ui->vLabel->setText(v);
 
-    h = QApplication::translate("qdesigner_internal::QtGradientStopsController", "Hue", 0, QApplication::UnicodeUTF8);
-    s = QApplication::translate("qdesigner_internal::QtGradientStopsController", "Sat", 0, QApplication::UnicodeUTF8);
-    v = QApplication::translate("qdesigner_internal::QtGradientStopsController", "Val", 0, QApplication::UnicodeUTF8);
+    h = QCoreApplication::translate("qdesigner_internal::QtGradientStopsController", "Hue");
+    s = QCoreApplication::translate("qdesigner_internal::QtGradientStopsController", "Sat");
+    v = QCoreApplication::translate("qdesigner_internal::QtGradientStopsController", "Val");
 
-    const QString hue = QApplication::translate("qdesigner_internal::QtGradientStopsController", "Hue", 0, QApplication::UnicodeUTF8);
-    const QString saturation = QApplication::translate("qdesigner_internal::QtGradientStopsController", "Saturation", 0, QApplication::UnicodeUTF8);
-    const QString value = QApplication::translate("qdesigner_internal::QtGradientStopsController", "Value", 0, QApplication::UnicodeUTF8);
+    const QString hue = QCoreApplication::translate("qdesigner_internal::QtGradientStopsController", "Hue");
+    const QString saturation = QCoreApplication::translate("qdesigner_internal::QtGradientStopsController", "Saturation");
+    const QString value = QCoreApplication::translate("qdesigner_internal::QtGradientStopsController", "Value");
 
     m_ui->hLabel->setToolTip(hue);
     m_ui->hueLabel->setText(h);
@@ -206,17 +206,17 @@ void QtGradientStopsControllerPrivate::slotHsvClicked()
 
 void QtGradientStopsControllerPrivate::slotRgbClicked()
 {
-    QString r = QApplication::translate("qdesigner_internal::QtGradientStopsController", "R", 0, QApplication::UnicodeUTF8);
-    QString g = QApplication::translate("qdesigner_internal::QtGradientStopsController", "G", 0, QApplication::UnicodeUTF8);
-    QString b = QApplication::translate("qdesigner_internal::QtGradientStopsController", "B", 0, QApplication::UnicodeUTF8);
+    QString r = QCoreApplication::translate("qdesigner_internal::QtGradientStopsController", "R");
+    QString g = QCoreApplication::translate("qdesigner_internal::QtGradientStopsController", "G");
+    QString b = QCoreApplication::translate("qdesigner_internal::QtGradientStopsController", "B");
 
     m_ui->hLabel->setText(r);
     m_ui->sLabel->setText(g);
     m_ui->vLabel->setText(b);
 
-    QString red = QApplication::translate("qdesigner_internal::QtGradientStopsController", "Red", 0, QApplication::UnicodeUTF8);
-    QString green = QApplication::translate("qdesigner_internal::QtGradientStopsController", "Green", 0, QApplication::UnicodeUTF8);
-    QString blue = QApplication::translate("qdesigner_internal::QtGradientStopsController", "Blue", 0, QApplication::UnicodeUTF8);
+    QString red = QCoreApplication::translate("qdesigner_internal::QtGradientStopsController", "Red");
+    QString green = QCoreApplication::translate("qdesigner_internal::QtGradientStopsController", "Green");
+    QString blue = QCoreApplication::translate("qdesigner_internal::QtGradientStopsController", "Blue");
 
     m_ui->hLabel->setToolTip(red);
     m_ui->hueLabel->setText(red);
diff --git a/src/shared/qtpropertybrowser/qtpropertybrowserutils.cpp b/src/shared/qtpropertybrowser/qtpropertybrowserutils.cpp
index 7ddbbff..68f13b4 100644
--- a/src/shared/qtpropertybrowser/qtpropertybrowserutils.cpp
+++ b/src/shared/qtpropertybrowser/qtpropertybrowserutils.cpp
@@ -53,44 +53,44 @@ QT_BEGIN_NAMESPACE
 
 QtCursorDatabase::QtCursorDatabase()
 {
-    appendCursor(Qt::ArrowCursor, QApplication::translate("QtCursorDatabase", "Arrow", 0,
-                        QApplication::UnicodeUTF8), QIcon(QLatin1String(":/qt-project.org/qtpropertybrowser/images/cursor-arrow.png")));
-    appendCursor(Qt::UpArrowCursor, QApplication::translate("QtCursorDatabase", "Up Arrow", 0,
-                        QApplication::UnicodeUTF8), QIcon(QLatin1String(":/qt-project.org/qtpropertybrowser/images/cursor-uparrow.png")));
-    appendCursor(Qt::CrossCursor, QApplication::translate("QtCursorDatabase", "Cross", 0,
-                        QApplication::UnicodeUTF8), QIcon(QLatin1String(":/qt-project.org/qtpropertybrowser/images/cursor-cross.png")));
-    appendCursor(Qt::WaitCursor, QApplication::translate("QtCursorDatabase", "Wait", 0,
-                        QApplication::UnicodeUTF8), QIcon(QLatin1String(":/qt-project.org/qtpropertybrowser/images/cursor-wait.png")));
-    appendCursor(Qt::IBeamCursor, QApplication::translate("QtCursorDatabase", "IBeam", 0,
-                        QApplication::UnicodeUTF8), QIcon(QLatin1String(":/qt-project.org/qtpropertybrowser/images/cursor-ibeam.png")));
-    appendCursor(Qt::SizeVerCursor, QApplication::translate("QtCursorDatabase", "Size Vertical", 0,
-                        QApplication::UnicodeUTF8), QIcon(QLatin1String(":/qt-project.org/qtpropertybrowser/images/cursor-sizev.png")));
-    appendCursor(Qt::SizeHorCursor, QApplication::translate("QtCursorDatabase", "Size Horizontal", 0,
-                        QApplication::UnicodeUTF8), QIcon(QLatin1String(":/qt-project.org/qtpropertybrowser/images/cursor-sizeh.png")));
-    appendCursor(Qt::SizeFDiagCursor, QApplication::translate("QtCursorDatabase", "Size Backslash", 0,
-                        QApplication::UnicodeUTF8), QIcon(QLatin1String(":/qt-project.org/qtpropertybrowser/images/cursor-sizef.png")));
-    appendCursor(Qt::SizeBDiagCursor, QApplication::translate("QtCursorDatabase", "Size Slash", 0,
-                        QApplication::UnicodeUTF8), QIcon(QLatin1String(":/qt-project.org/qtpropertybrowser/images/cursor-sizeb.png")));
-    appendCursor(Qt::SizeAllCursor, QApplication::translate("QtCursorDatabase", "Size All", 0,
-                        QApplication::UnicodeUTF8), QIcon(QLatin1String(":/qt-project.org/qtpropertybrowser/images/cursor-sizeall.png")));
-    appendCursor(Qt::BlankCursor, QApplication::translate("QtCursorDatabase", "Blank", 0,
-                        QApplication::UnicodeUTF8), QIcon());
-    appendCursor(Qt::SplitVCursor, QApplication::translate("QtCursorDatabase", "Split Vertical", 0,
-                        QApplication::UnicodeUTF8), QIcon(QLatin1String(":/qt-project.org/qtpropertybrowser/images/cursor-vsplit.png")));
-    appendCursor(Qt::SplitHCursor, QApplication::translate("QtCursorDatabase", "Split Horizontal", 0,
-                        QApplication::UnicodeUTF8), QIcon(QLatin1String(":/qt-project.org/qtpropertybrowser/images/cursor-hsplit.png")));
-    appendCursor(Qt::PointingHandCursor, QApplication::translate("QtCursorDatabase", "Pointing Hand", 0,
-                        QApplication::UnicodeUTF8), QIcon(QLatin1String(":/qt-project.org/qtpropertybrowser/images/cursor-hand.png")));
-    appendCursor(Qt::ForbiddenCursor, QApplication::translate("QtCursorDatabase", "Forbidden", 0,
-                        QApplication::UnicodeUTF8), QIcon(QLatin1String(":/qt-project.org/qtpropertybrowser/images/cursor-forbidden.png")));
-    appendCursor(Qt::OpenHandCursor, QApplication::translate("QtCursorDatabase", "Open Hand", 0,
-                        QApplication::UnicodeUTF8), QIcon(QLatin1String(":/qt-project.org/qtpropertybrowser/images/cursor-openhand.png")));
-    appendCursor(Qt::ClosedHandCursor, QApplication::translate("QtCursorDatabase", "Closed Hand", 0,
-                        QApplication::UnicodeUTF8), QIcon(QLatin1String(":/qt-project.org/qtpropertybrowser/images/cursor-closedhand.png")));
-    appendCursor(Qt::WhatsThisCursor, QApplication::translate("QtCursorDatabase", "What's This", 0,
-                        QApplication::UnicodeUTF8), QIcon(QLatin1String(":/qt-project.org/qtpropertybrowser/images/cursor-whatsthis.png")));
-    appendCursor(Qt::BusyCursor, QApplication::translate("QtCursorDatabase", "Busy", 0,
-                        QApplication::UnicodeUTF8), QIcon(QLatin1String(":/qt-project.org/qtpropertybrowser/images/cursor-busy.png")));
+    appendCursor(Qt::ArrowCursor, QCoreApplication::translate("QtCursorDatabase", "Arrow"),
+                 QIcon(QLatin1String(":/qt-project.org/qtpropertybrowser/images/cursor-arrow.png")));
+    appendCursor(Qt::UpArrowCursor, QCoreApplication::translate("QtCursorDatabase", "Up Arrow"),
+                 QIcon(QLatin1String(":/qt-project.org/qtpropertybrowser/images/cursor-uparrow.png")));
+    appendCursor(Qt::CrossCursor, QCoreApplication::translate("QtCursorDatabase", "Cross"),
+                 QIcon(QLatin1String(":/qt-project.org/qtpropertybrowser/images/cursor-cross.png")));
+    appendCursor(Qt::WaitCursor, QCoreApplication::translate("QtCursorDatabase", "Wait"),
+                 QIcon(QLatin1String(":/qt-project.org/qtpropertybrowser/images/cursor-wait.png")));
+    appendCursor(Qt::IBeamCursor, QCoreApplication::translate("QtCursorDatabase", "IBeam"),
+                 QIcon(QLatin1String(":/qt-project.org/qtpropertybrowser/images/cursor-ibeam.png")));
+    appendCursor(Qt::SizeVerCursor, QCoreApplication::translate("QtCursorDatabase", "Size Vertical"),
+                 QIcon(QLatin1String(":/qt-project.org/qtpropertybrowser/images/cursor-sizev.png")));
+    appendCursor(Qt::SizeHorCursor, QCoreApplication::translate("QtCursorDatabase", "Size Horizontal"),
+                 QIcon(QLatin1String(":/qt-project.org/qtpropertybrowser/images/cursor-sizeh.png")));
+    appendCursor(Qt::SizeFDiagCursor, QCoreApplication::translate("QtCursorDatabase", "Size Backslash"),
+                 QIcon(QLatin1String(":/qt-project.org/qtpropertybrowser/images/cursor-sizef.png")));
+    appendCursor(Qt::SizeBDiagCursor, QCoreApplication::translate("QtCursorDatabase", "Size Slash"),
+                 QIcon(QLatin1String(":/qt-project.org/qtpropertybrowser/images/cursor-sizeb.png")));
+    appendCursor(Qt::SizeAllCursor, QCoreApplication::translate("QtCursorDatabase", "Size All"),
+                 QIcon(QLatin1String(":/qt-project.org/qtpropertybrowser/images/cursor-sizeall.png")));
+    appendCursor(Qt::BlankCursor, QCoreApplication::translate("QtCursorDatabase", "Blank"),
+                 QIcon());
+    appendCursor(Qt::SplitVCursor, QCoreApplication::translate("QtCursorDatabase", "Split Vertical"),
+                 QIcon(QLatin1String(":/qt-project.org/qtpropertybrowser/images/cursor-vsplit.png")));
+    appendCursor(Qt::SplitHCursor, QCoreApplication::translate("QtCursorDatabase", "Split Horizontal"),
+                 QIcon(QLatin1String(":/qt-project.org/qtpropertybrowser/images/cursor-hsplit.png")));
+    appendCursor(Qt::PointingHandCursor, QCoreApplication::translate("QtCursorDatabase", "Pointing Hand"),
+                 QIcon(QLatin1String(":/qt-project.org/qtpropertybrowser/images/cursor-hand.png")));
+    appendCursor(Qt::ForbiddenCursor, QCoreApplication::translate("QtCursorDatabase", "Forbidden"),
+                 QIcon(QLatin1String(":/qt-project.org/qtpropertybrowser/images/cursor-forbidden.png")));
+    appendCursor(Qt::OpenHandCursor, QCoreApplication::translate("QtCursorDatabase", "Open Hand"),
+                 QIcon(QLatin1String(":/qt-project.org/qtpropertybrowser/images/cursor-openhand.png")));
+    appendCursor(Qt::ClosedHandCursor, QCoreApplication::translate("QtCursorDatabase", "Closed Hand"),
+                 QIcon(QLatin1String(":/qt-project.org/qtpropertybrowser/images/cursor-closedhand.png")));
+    appendCursor(Qt::WhatsThisCursor, QCoreApplication::translate("QtCursorDatabase", "What's This"),
+                 QIcon(QLatin1String(":/qt-project.org/qtpropertybrowser/images/cursor-whatsthis.png")));
+    appendCursor(Qt::BusyCursor, QCoreApplication::translate("QtCursorDatabase", "Busy"),
+                 QIcon(QLatin1String(":/qt-project.org/qtpropertybrowser/images/cursor-busy.png")));
 }
 
 void QtCursorDatabase::clear()
@@ -182,11 +182,8 @@ QIcon QtPropertyBrowserUtils::brushValueIcon(const QBrush &b)
 
 QString QtPropertyBrowserUtils::colorValueText(const QColor &c)
 {
-    return QApplication::translate("QtPropertyBrowserUtils", "[%1, %2, %3] (%4)", 0, QApplication::UnicodeUTF8)
-                                  .arg(QString::number(c.red()))
-                                  .arg(QString::number(c.green()))
-                                  .arg(QString::number(c.blue()))
-                                  .arg(QString::number(c.alpha()));
+    return QCoreApplication::translate("QtPropertyBrowserUtils", "[%1, %2, %3] (%4)")
+           .arg(c.red()).arg(c.green()).arg(c.blue()).arg(c.alpha());
 }
 
 QPixmap QtPropertyBrowserUtils::fontValuePixmap(const QFont &font)
@@ -212,9 +209,8 @@ QIcon QtPropertyBrowserUtils::fontValueIcon(const QFont &f)
 
 QString QtPropertyBrowserUtils::fontValueText(const QFont &f)
 {
-    return QApplication::translate("QtPropertyBrowserUtils", "[%1, %2]", 0, QApplication::UnicodeUTF8)
-                                  .arg(f.family())
-                                  .arg(f.pointSize());
+    return QCoreApplication::translate("QtPropertyBrowserUtils", "[%1, %2]")
+           .arg(f.family()).arg(f.pointSize());
 }
 
 QString QtPropertyBrowserUtils::dateFormat()
diff --git a/src/shared/qtpropertybrowser/qttreepropertybrowser.cpp b/src/shared/qtpropertybrowser/qttreepropertybrowser.cpp
index 52e845b..f214c1a 100644
--- a/src/shared/qtpropertybrowser/qttreepropertybrowser.cpp
+++ b/src/shared/qtpropertybrowser/qttreepropertybrowser.cpp
@@ -439,8 +439,8 @@ void QtTreePropertyBrowserPrivate::init(QWidget *parent)
 
     m_treeWidget->setColumnCount(2);
     QStringList labels;
-    labels.append(QApplication::translate("QtTreePropertyBrowser", "Property", 0, QApplication::UnicodeUTF8));
-    labels.append(QApplication::translate("QtTreePropertyBrowser", "Value", 0, QApplication::UnicodeUTF8));
+    labels.append(QCoreApplication::translate("QtTreePropertyBrowser", "Property"));
+    labels.append(QCoreApplication::translate("QtTreePropertyBrowser", "Value"));
     m_treeWidget->setHeaderLabels(labels);
     m_treeWidget->setAlternatingRowColors(true);
     m_treeWidget->setEditTriggers(QAbstractItemView::EditKeyPressed);