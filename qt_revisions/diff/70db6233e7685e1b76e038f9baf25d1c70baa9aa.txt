diff --git a/src/corelib/io/io.pri b/src/corelib/io/io.pri
index 9c117ab..a3bc3af 100644
--- a/src/corelib/io/io.pri
+++ b/src/corelib/io/io.pri
@@ -15,6 +15,7 @@ HEADERS +=  \
         io/qfiledevice_p.h \
         io/qfileinfo.h \
         io/qfileinfo_p.h \
+        io/qipaddress_p.h \
         io/qiodevice.h \
         io/qiodevice_p.h \
         io/qnoncontiguousbytedevice_p.h \
@@ -53,6 +54,7 @@ SOURCES += \
         io/qfile.cpp \
         io/qfiledevice.cpp \
         io/qfileinfo.cpp \
+        io/qipaddress.cpp \
         io/qiodevice.cpp \
         io/qnoncontiguousbytedevice.cpp \
         io/qprocess.cpp \
diff --git a/src/corelib/io/qipaddress.cpp b/src/corelib/io/qipaddress.cpp
new file mode 100644
index 0000000..b8871fe
--- /dev/null
+++ b/src/corelib/io/qipaddress.cpp
@@ -0,0 +1,131 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Intel Corporation
+** Contact: http://www.qt-project.org/
+**
+** This file is part of the QtCore module of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** GNU Lesser General Public License Usage
+** This file may be used under the terms of the GNU Lesser General Public
+** License version 2.1 as published by the Free Software Foundation and
+** appearing in the file LICENSE.LGPL included in the packaging of this
+** file. Please review the following information to ensure the GNU Lesser
+** General Public License version 2.1 requirements will be met:
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** In addition, as a special exception, Nokia gives you certain additional
+** rights. These rights are described in the Nokia Qt LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU General
+** Public License version 3.0 as published by the Free Software Foundation
+** and appearing in the file LICENSE.GPL included in the packaging of this
+** file. Please review the following information to ensure the GNU General
+** Public License version 3.0 requirements will be met:
+** http://www.gnu.org/copyleft/gpl.html.
+**
+** Other Usage
+** Alternatively, this file may be used in accordance with the terms and
+** conditions contained in a signed written agreement between you and Nokia.
+**
+**
+**
+**
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#include "qipaddress_p.h"
+#include "private/qlocale_tools_p.h"
+#include "qvarlengtharray.h"
+
+QT_BEGIN_NAMESPACE
+namespace QIPAddressUtils {
+
+static QString number(quint8 val, int base = 10)
+{
+    QChar zero(0x30);
+    return val ? qulltoa(val, base, zero) : zero;
+}
+
+typedef QVarLengthArray<char, 64> Buffer;
+static bool checkedToAscii(Buffer &buffer, const QChar *begin, const QChar *end)
+{
+    const ushort *const ubegin = reinterpret_cast<const ushort *>(begin);
+    const ushort *const uend = reinterpret_cast<const ushort *>(end);
+    const ushort *src = ubegin;
+
+    buffer.resize(uend - ubegin + 1);
+    char *dst = buffer.data();
+
+    while (src != uend) {
+        if (*src >= 0x7f)
+            return false;
+        *dst++ = *src++;
+    }
+    *dst = '\0';
+    return true;
+}
+
+bool parseIp4(IPv4Address &address, const QChar *begin, const QChar *end)
+{
+    Q_ASSERT(begin != end);
+    Buffer buffer;
+    if (!checkedToAscii(buffer, begin, end))
+        return false;
+
+    int dotCount = 0;
+    address = 0;
+    const char *ptr = buffer.data();
+    while (dotCount < 4) {
+        const char *endptr;
+        bool ok;
+        quint64 ll = qstrtoull(ptr, &endptr, 0, &ok);
+        quint32 x = ll;
+        if (!ok || endptr == ptr || ll != x)
+            return false;
+
+        if (*endptr == '.' || dotCount == 3) {
+            if (x & ~0xff)
+                return false;
+            address <<= 8;
+        } else if (dotCount == 2) {
+            if (x & ~0xffff)
+                return false;
+            address <<= 16;
+        } else if (dotCount == 1) {
+            if (x & ~0xffffff)
+                return false;
+            address <<= 24;
+        }
+        address |= x;
+
+        if (dotCount == 3 && *endptr != '\0')
+            return false;
+        else if (dotCount == 3 || *endptr == '\0')
+            return true;
+        ++dotCount;
+        ptr = endptr + 1;
+    }
+    return false;
+}
+
+void toString(QString &appendTo, IPv4Address address)
+{
+    // reconstructing is easy
+    // use the fast operator% that pre-calculates the size
+    appendTo += number(address >> 24)
+                % QLatin1Char('.')
+                % number(address >> 16)
+                % QLatin1Char('.')
+                % number(address >> 8)
+                % QLatin1Char('.')
+                % number(address);
+}
+
+}
+QT_END_NAMESPACE
diff --git a/src/corelib/io/qipaddress_p.h b/src/corelib/io/qipaddress_p.h
new file mode 100644
index 0000000..f3bcf76
--- /dev/null
+++ b/src/corelib/io/qipaddress_p.h
@@ -0,0 +1,71 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Intel Corporation
+** Contact: http://www.qt-project.org/
+**
+** This file is part of the QtCore module of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** GNU Lesser General Public License Usage
+** This file may be used under the terms of the GNU Lesser General Public
+** License version 2.1 as published by the Free Software Foundation and
+** appearing in the file LICENSE.LGPL included in the packaging of this
+** file. Please review the following information to ensure the GNU Lesser
+** General Public License version 2.1 requirements will be met:
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** In addition, as a special exception, Nokia gives you certain additional
+** rights. These rights are described in the Nokia Qt LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU General
+** Public License version 3.0 as published by the Free Software Foundation
+** and appearing in the file LICENSE.GPL included in the packaging of this
+** file. Please review the following information to ensure the GNU General
+** Public License version 3.0 requirements will be met:
+** http://www.gnu.org/copyleft/gpl.html.
+**
+** Other Usage
+** Alternatively, this file may be used in accordance with the terms and
+** conditions contained in a signed written agreement between you and Nokia.
+**
+**
+**
+**
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#ifndef QIPADDRESS_P_H
+#define QIPADDRESS_P_H
+
+//
+//  W A R N I N G
+//  -------------
+//
+// This file is not part of the Qt API. It exists for the convenience of
+// qurl*.cpp This header file may change from version to version without
+// notice, or even be removed.
+//
+// We mean it.
+//
+
+#include "qstring.h"
+
+QT_BEGIN_NAMESPACE
+
+namespace QIPAddressUtils {
+
+typedef quint32 IPv4Address;
+
+Q_CORE_EXPORT bool parseIp4(IPv4Address &address, const QChar *begin, const QChar *end);
+Q_CORE_EXPORT void toString(QString &appendTo, IPv4Address address);
+
+} // namespace
+
+QT_END_NAMESPACE
+
+#endif // QIPADDRESS_P_H
diff --git a/tests/auto/corelib/io/io.pro b/tests/auto/corelib/io/io.pro
index 84a885f..7e0cb5e 100644
--- a/tests/auto/corelib/io/io.pro
+++ b/tests/auto/corelib/io/io.pro
@@ -12,6 +12,7 @@ SUBDIRS=\
     qfilesystementry \
     qfilesystemwatcher \
     qiodevice \
+    qipaddress \
     qnodebug \
     qprocess \
     qprocessenvironment \
@@ -31,7 +32,8 @@ SUBDIRS=\
 
 !contains(QT_CONFIG, private_tests): SUBDIRS -= \
     qabstractfileengine \
-    qfileinfo
+    qfileinfo \
+    qipaddress
 
 win32:!contains(QT_CONFIG, private_tests): SUBDIRS -= \
     qfilesystementry
diff --git a/tests/auto/corelib/io/qipaddress/qipaddress.pro b/tests/auto/corelib/io/qipaddress/qipaddress.pro
new file mode 100644
index 0000000..41fa55a
--- /dev/null
+++ b/tests/auto/corelib/io/qipaddress/qipaddress.pro
@@ -0,0 +1,4 @@
+SOURCES  += tst_qipaddress.cpp
+TARGET = tst_qipaddress
+QT = core core-private testlib
+CONFIG += testcase parallel_test
diff --git a/tests/auto/corelib/io/qipaddress/tst_qipaddress.cpp b/tests/auto/corelib/io/qipaddress/tst_qipaddress.cpp
new file mode 100644
index 0000000..73cbbde
--- /dev/null
+++ b/tests/auto/corelib/io/qipaddress/tst_qipaddress.cpp
@@ -0,0 +1,218 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Intel Corporation.
+** Contact: http://www.qt-project.org/
+**
+** This file is part of the test suite of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** GNU Lesser General Public License Usage
+** This file may be used under the terms of the GNU Lesser General Public
+** License version 2.1 as published by the Free Software Foundation and
+** appearing in the file LICENSE.LGPL included in the packaging of this
+** file. Please review the following information to ensure the GNU Lesser
+** General Public License version 2.1 requirements will be met:
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** In addition, as a special exception, Nokia gives you certain additional
+** rights. These rights are described in the Nokia Qt LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU General
+** Public License version 3.0 as published by the Free Software Foundation
+** and appearing in the file LICENSE.GPL included in the packaging of this
+** file. Please review the following information to ensure the GNU General
+** Public License version 3.0 requirements will be met:
+** http://www.gnu.org/copyleft/gpl.html.
+**
+** Other Usage
+** Alternatively, this file may be used in accordance with the terms and
+** conditions contained in a signed written agreement between you and Nokia.
+**
+**
+**
+**
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#include <QtCore/QString>
+#include <QtTest/QtTest>
+#include <QtCore/private/qipaddress_p.h>
+
+#ifdef __GLIBC__
+#include <sys/socket.h>
+#include <netinet/in.h>
+#include <arpa/inet.h>
+#endif
+
+class tst_QIpAddress : public QObject
+{
+    Q_OBJECT
+
+private Q_SLOTS:
+    void parseIp4_data();
+    void parseIp4();
+    void invalidParseIp4_data();
+    void invalidParseIp4();
+    void ip4ToString_data();
+    void ip4ToString();
+};
+
+void tst_QIpAddress::parseIp4_data()
+{
+    QTest::addColumn<QString>("data");
+    QTest::addColumn<QIPAddressUtils::IPv4Address>("ip");
+
+    // valid strings
+    QTest::newRow("0.0.0.0") << "0.0.0.0" << 0u;
+    QTest::newRow("10.0.0.1") << "10.0.0.1" << 0x0a000001u;
+    QTest::newRow("127.0.0.1") << "127.0.0.1" << 0x7f000001u;
+    QTest::newRow("172.16.0.1") << "172.16.0.1" << 0xac100001u;
+    QTest::newRow("172.16.16.1") << "172.16.16.1" << 0xac101001u;
+    QTest::newRow("172.16.16.16") << "172.16.16.16" << 0xac101010u;
+    QTest::newRow("192.168.0.1") << "192.168.0.1" << 0xc0a80001u;
+    QTest::newRow("192.168.16.1") << "192.168.16.1" << 0xc0a81001u;
+    QTest::newRow("192.168.16.16") << "192.168.16.16" << 0xc0a81010u;
+    QTest::newRow("192.168.192.1") << "192.168.192.1" << 0xc0a8c001u;
+    QTest::newRow("192.168.192.16") << "192.168.192.16" << 0xc0a8c010u;
+    QTest::newRow("192.168.192.255") << "192.168.192.255" << 0xc0a8c0ffu;
+    QTest::newRow("224.0.0.1") << "224.0.0.1" << 0xe0000001u;
+    QTest::newRow("239.255.255.255") << "239.255.255.255" << 0xefffffffu;
+    QTest::newRow("255.255.255.255") << "255.255.255.255" << uint(-1);
+
+    // still valid but unusual
+    QTest::newRow("000.000.000.000") << "000.000.000.000" << 0u;
+    QTest::newRow("000001.000002.000000003.000000000004") << "000001.000002.000000003.000000000004" << 0x01020304u;
+
+    // octals:
+    QTest::newRow("012.0250.0377.0377") << "012.0250.0377.0377" << 0x0aa8ffffu;
+    QTest::newRow("0000000000012.00000000000250.000000000000377.0000000000000000000000000000000000000377")
+            << "0000000000012.00000000000250.000000000000377.0000000000000000000000000000000000000377" << 0x0aa8ffffu;
+
+    // hex:
+    QTest::newRow("0xa.0xa.0x7f.0xff") << "0xa.0xa.0x7f.0xff" << 0x0a0a7fffu;
+
+    // dots missing, less than 255:
+    QTest::newRow("1.2.3") << "1.2.3" << 0x01020003u;
+    QTest::newRow("1.2") << "1.2" << 0x01000002u;
+    QTest::newRow("1") << "1" << 1u;
+
+    // dots missing, more than 255, no overwrite
+    QTest::newRow("1.2.257") << "1.2.257" << 0x01020101u;
+    QTest::newRow("1.0x010101") << "1.0x010101" << 0x01010101u;
+    QTest::newRow("2130706433") << "2130706433" << 0x7f000001u;
+}
+
+void tst_QIpAddress::parseIp4()
+{
+    QFETCH(QString, data);
+    QFETCH(QIPAddressUtils::IPv4Address, ip);
+
+#ifdef __GLIBC__
+    {
+        in_addr inet_result;
+        int inet_ok = inet_aton(data.toLatin1(), &inet_result);
+        QVERIFY(inet_ok);
+        QCOMPARE(ntohl(inet_result.s_addr), ip);
+    }
+#endif
+
+    QIPAddressUtils::IPv4Address result;
+    bool ok = QIPAddressUtils::parseIp4(result, data.constBegin(), data.constEnd());
+    QVERIFY(ok);
+    QCOMPARE(result, ip);
+}
+
+void tst_QIpAddress::invalidParseIp4_data()
+{
+    QTest::addColumn<QString>("data");
+
+    // too many dots
+    QTest::newRow(".") << ".";
+    QTest::newRow("..") << "..";
+    QTest::newRow("...") << "...";
+    QTest::newRow("....") << "....";
+    QTest::newRow("1.") << "1.";
+    QTest::newRow("1.2.") << "1.2.";
+    QTest::newRow("1.2.3.") << "1.2.3.";
+    QTest::newRow("1.2.3.4.") << "1.2.3.4.";
+    QTest::newRow("1.2.3..4") << "1.2.3..4";
+
+    // octet more than 255
+    QTest::newRow("2.2.2.257") << "2.2.2.257";
+    QTest::newRow("2.2.257.2") << "2.2.257.2";
+    QTest::newRow("2.257.2.2") << "2.257.2.2";
+    QTest::newRow("257.2.2.2") << "257.2.2.2";
+
+    // number more than field available
+    QTest::newRow("2.2.0x01010101") << "2.2.0x01010101";
+    QTest::newRow("2.0x01010101") << "2.0x01010101";
+    QTest::newRow("4294967296") << "4294967296";
+
+    // bad octals
+    QTest::newRow("09") << "09";
+
+    // bad hex
+    QTest::newRow("0x1g") << "0x1g";
+
+    // letters
+    QTest::newRow("abc") << "abc";
+    QTest::newRow("1.2.3a.4") << "1.2.3a.4";
+    QTest::newRow("a.2.3.4") << "a.2.3.4";
+    QTest::newRow("1.2.3.4a") << "1.2.3.4a";
+}
+
+void tst_QIpAddress::invalidParseIp4()
+{
+    QFETCH(QString, data);
+
+#ifdef __GLIBC__
+    {
+        in_addr inet_result;
+        int inet_ok = inet_aton(data.toLatin1(), &inet_result);
+# ifdef Q_OS_DARWIN
+        QEXPECT_FAIL("4294967296", "Mac's library does parse this one", Continue);
+# endif
+        QVERIFY(!inet_ok);
+    }
+#endif
+
+    QIPAddressUtils::IPv4Address result;
+    bool ok = QIPAddressUtils::parseIp4(result, data.constBegin(), data.constEnd());
+    QVERIFY(!ok);
+}
+
+void tst_QIpAddress::ip4ToString_data()
+{
+    QTest::addColumn<QIPAddressUtils::IPv4Address>("ip");
+    QTest::addColumn<QString>("expected");
+
+    QTest::newRow("0.0.0.0") << 0u << "0.0.0.0";
+    QTest::newRow("1.2.3.4") << 0x01020304u << "1.2.3.4";
+    QTest::newRow("111.222.33.44") << 0x6fde212cu << "111.222.33.44";
+    QTest::newRow("255.255.255.255") << 0xffffffffu << "255.255.255.255";
+}
+
+void tst_QIpAddress::ip4ToString()
+{
+    QFETCH(QIPAddressUtils::IPv4Address, ip);
+    QFETCH(QString, expected);
+
+#ifdef __GLIBC__
+    in_addr inet_ip;
+    inet_ip.s_addr = htonl(ip);
+    QCOMPARE(QString(inet_ntoa(inet_ip)), expected);
+#endif
+
+    QString result;
+    QIPAddressUtils::toString(result, ip);
+    QCOMPARE(result, expected);
+}
+
+QTEST_APPLESS_MAIN(tst_QIpAddress)
+
+#include "tst_qipaddress.moc"