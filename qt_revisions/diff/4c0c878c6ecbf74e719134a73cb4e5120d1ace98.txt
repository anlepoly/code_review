diff --git a/src/designer/src/designer/newform.cpp b/src/designer/src/designer/newform.cpp
index dc7ae72..91ca44b 100644
--- a/src/designer/src/designer/newform.cpp
+++ b/src/designer/src/designer/newform.cpp
@@ -76,8 +76,8 @@ NewForm::NewForm(QDesignerWorkbench *workbench, QWidget *parentWidget, const QSt
       m_newFormWidget(QDesignerNewFormWidgetInterface::createNewFormWidget(workbench->core())),
       m_workbench(workbench),
       m_chkShowOnStartup(new QCheckBox(tr("Show this Dialog on Startup"))),
-      m_createButton(new QPushButton(QApplication::translate("NewForm", "C&reate", 0, QApplication::UnicodeUTF8))),
-      m_recentButton(new QPushButton(QApplication::translate("NewForm", "Recent", 0,  QApplication::UnicodeUTF8))),
+      m_createButton(new QPushButton(QApplication::translate("NewForm", "C&reate", 0))),
+      m_recentButton(new QPushButton(QApplication::translate("NewForm", "Recent", 0))),
       m_buttonBox(0)
 {
     setWindowTitle(tr("New Form"));
@@ -109,11 +109,11 @@ QDialogButtonBox *NewForm::createButtonBox()
 {
     // Dialog buttons with 'recent files'
     QDialogButtonBox *buttonBox = new QDialogButtonBox;
-    buttonBox->addButton(QApplication::translate("NewForm", "&Close", 0,
-                                        QApplication::UnicodeUTF8), QDialogButtonBox::RejectRole);
+    buttonBox->addButton(QApplication::translate("NewForm", "&Close", 0),
+                         QDialogButtonBox::RejectRole);
     buttonBox->addButton(m_createButton, QDialogButtonBox::AcceptRole);
-    buttonBox->addButton(QApplication::translate("NewForm", "&Open...", 0,
-                                    QApplication::UnicodeUTF8), QDialogButtonBox::ActionRole);
+    buttonBox->addButton(QApplication::translate("NewForm", "&Open...", 0),
+                         QDialogButtonBox::ActionRole);
     buttonBox->addButton(m_recentButton, QDialogButtonBox::ActionRole);
     QDesignerActions *da = m_workbench->actionManager();
     QMenu *recentFilesMenu = new QMenu(tr("&Recent Forms"), m_recentButton);
diff --git a/src/linguist/shared/qm.cpp b/src/linguist/shared/qm.cpp
index 4be719a..903e77a 100644
--- a/src/linguist/shared/qm.cpp
+++ b/src/linguist/shared/qm.cpp
@@ -775,11 +775,11 @@ bool saveQM(const Translator &translator, QIODevice &dev, ConversionData &cd)
     if (missingIds)
         cd.appendError(QCoreApplication::translate("LRelease",
             "Dropped %n message(s) which had no ID.", 0,
-            QCoreApplication::DefaultCodec, missingIds));
+            missingIds));
     if (droppedData)
         cd.appendError(QCoreApplication::translate("LRelease",
             "Excess context/disambiguation dropped from %n message(s).", 0,
-            QCoreApplication::DefaultCodec, droppedData));
+            droppedData));
 
     releaser.setDependencies(translator.dependencies());
     releaser.squeeze(cd.m_saveMode);
@@ -788,11 +788,11 @@ bool saveQM(const Translator &translator, QIODevice &dev, ConversionData &cd)
         int generatedCount = finished + unfinished;
         cd.appendError(QCoreApplication::translate("LRelease",
             "    Generated %n translation(s) (%1 finished and %2 unfinished)", 0,
-            QCoreApplication::DefaultCodec, generatedCount).arg(finished).arg(unfinished));
+            generatedCount).arg(finished).arg(unfinished));
         if (untranslated)
             cd.appendError(QCoreApplication::translate("LRelease",
                 "    Ignored %n untranslated source text(s)", 0,
-                QCoreApplication::DefaultCodec, untranslated));
+                untranslated));
     }
     return saved;
 }