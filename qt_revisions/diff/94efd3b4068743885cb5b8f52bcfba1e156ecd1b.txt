diff --git a/doc/src/activeqt-container.qdoc b/doc/src/activeqt-container.qdoc
index fb0ff5d..632bcec 100644
--- a/doc/src/activeqt-container.qdoc
+++ b/doc/src/activeqt-container.qdoc
@@ -44,11 +44,11 @@
 
     The module consists of six classes
     \list 1
-    \o QAxBase is an abstract class that provides an API to initialize 
+    \li QAxBase is an abstract class that provides an API to initialize
        and access a COM object or ActiveX control.
-    \o QAxObject provides a QObject that wraps a COM object.
-    \o QAxWidget is a QWidget that wraps an ActiveX control.
-    \o QAxScriptManager, QAxScript and QAxScriptEngine provide an 
+    \li QAxObject provides a QObject that wraps a COM object.
+    \li QAxWidget is a QWidget that wraps an ActiveX control.
+    \li QAxScriptManager, QAxScript and QAxScriptEngine provide an
        interface to the Windows Script Host.
     \endlist
 
@@ -115,10 +115,10 @@
     There are four ways to call APIs on the COM object:
 
     \list
-    \o Generating a C++ namespace
-    \o Call-by-name
-    \o Through a script engine
-    \o Using the native COM interfaces
+    \li Generating a C++ namespace
+    \li Call-by-name
+    \li Through a script engine
+    \li Using the native COM interfaces
     \endlist
 
     \section2 Generating a C++ Namespace
diff --git a/doc/src/activeqt-server.qdoc b/doc/src/activeqt-server.qdoc
index 8458185..fd42e71 100644
--- a/doc/src/activeqt-server.qdoc
+++ b/doc/src/activeqt-server.qdoc
@@ -36,10 +36,10 @@
     consists of three classes:
 
     \list
-    \o QAxFactory defines a factory for the creation of COM objects.
-    \o QAxBindable provides an interface between the Qt widget and the 
+    \li QAxFactory defines a factory for the creation of COM objects.
+    \li QAxBindable provides an interface between the Qt widget and the
        COM object.
-    \o QAxAggregated can be subclassed to implement additional COM interfaces.
+    \li QAxAggregated can be subclassed to implement additional COM interfaces.
     \endlist
 
     Some \l{ActiveQt Examples}{example implementations} of ActiveX
@@ -76,13 +76,13 @@
     required build steps to the build system:
 
     \list
-    \o Link the binary against \c qaxserver.lib instead of \c qtmain.lib
-    \o Call the \l idc tool to generate an IDL file for the COM server
-    \o Compile the IDL into a type library using the MIDL tool (part of the
+    \li Link the binary against \c qaxserver.lib instead of \c qtmain.lib
+    \li Call the \l idc tool to generate an IDL file for the COM server
+    \li Compile the IDL into a type library using the MIDL tool (part of the
     compiler installation)
-    \o Attach the resulting type library as a binary resource to the server
+    \li Attach the resulting type library as a binary resource to the server
     binary (again using the \l idc tool)
-    \o Register the server
+    \li Register the server
     \endlist
 
     To skip the post-processing step, also set the \c qaxserver_no_postlink
@@ -126,11 +126,11 @@
     server has to meet some requirements:
 
     \list
-    \o All controls exposed can be created with nothing but a QApplication
+    \li All controls exposed can be created with nothing but a QApplication
     instance being present
-    \o The initial linking of the server includes a temporary type 
+    \li The initial linking of the server includes a temporary type
     library resource
-    \o All dependencies required to run the server are in the system path 
+    \li All dependencies required to run the server are in the system path
     (or in the path used by the calling environment; note that Visual 
     Studio has its own set of environment variables listed in the
     Tools|Options|Directories dialog).
@@ -228,47 +228,47 @@
 
     \table
     \header
-    \o Qt data type
-    \o COM property
+    \li Qt data type
+    \li COM property
     \row
-    \o bool
-    \o VARIANT_BOOL
+    \li bool
+    \li VARIANT_BOOL
     \row
-    \o QString
-    \o BSTR
+    \li QString
+    \li BSTR
     \row
-    \o int
-    \o int
+    \li int
+    \li int
     \row
-    \o uint
-    \o unsigned int
+    \li uint
+    \li unsigned int
     \row
-    \o double
-    \o double
+    \li double
+    \li double
     \row
-    \o \l qlonglong
-    \o CY
+    \li \l qlonglong
+    \li CY
     \row
-    \o \l qulonglong
-    \o CY
+    \li \l qulonglong
+    \li CY
     \row
-    \o QColor
-    \o OLE_COLOR
+    \li QColor
+    \li OLE_COLOR
     \row
-    \o QDate
-    \o DATE
+    \li QDate
+    \li DATE
     \row
-    \o QDateTime
-    \o DATE
+    \li QDateTime
+    \li DATE
     \row
-    \o QTime
-    \o DATE
+    \li QTime
+    \li DATE
     \row
-    \o QFont
-    \o IFontDisp*
+    \li QFont
+    \li IFontDisp*
     \row
-    \o QPixmap
-    \o IPictureDisp*
+    \li QPixmap
+    \li IPictureDisp*
     \footnote
     COM cannot marshal IPictureDisp accross process boundaries,
     so QPixmap properties cannot be called for out-of-process servers. You
@@ -278,132 +278,132 @@
     Q150034 \endlink for more information.
     \endfootnote
     \row
-    \o QVariant
-    \o VARIANT
+    \li QVariant
+    \li VARIANT
     \row
-    \o QVariantList (same as QList\<QVariant\>)
-    \o SAFEARRAY(VARIANT)
+    \li QVariantList (same as QList\<QVariant\>)
+    \li SAFEARRAY(VARIANT)
     \row
-    \o QStringList
-    \o SAFEARRAY(BSTR)
+    \li QStringList
+    \li SAFEARRAY(BSTR)
     \row
-    \o QByteArray
-    \o SAFEARRAY(BYTE)
+    \li QByteArray
+    \li SAFEARRAY(BYTE)
     \row
-    \o QRect
-    \o User defined type
+    \li QRect
+    \li User defined type
     \row
-    \o QSize
-    \o User defined type
+    \li QSize
+    \li User defined type
     \row
-    \o QPoint
-    \o User defined type
+    \li QPoint
+    \li User defined type
     \endtable
 
     The Qt data types that are supported for parameters in signals and
     slots are:
     \table
     \header
-    \o Qt data type
-    \o COM parameter
+    \li Qt data type
+    \li COM parameter
     \row
-    \o bool
-    \o [in] VARIANT_BOOL
+    \li bool
+    \li [in] VARIANT_BOOL
     \row
-    \o bool&
-    \o [in, out] VARIANT_BOOL*
+    \li bool&
+    \li [in, out] VARIANT_BOOL*
     \row
-    \o QString, const QString&
-    \o [in] BSTR
+    \li QString, const QString&
+    \li [in] BSTR
     \row
-    \o QString&
-    \o [in, out] BSTR*
+    \li QString&
+    \li [in, out] BSTR*
     \row
-    \o QString&
-    \o [in, out] BSTR*
+    \li QString&
+    \li [in, out] BSTR*
     \row
-    \o int
-    \o [in] int
+    \li int
+    \li [in] int
     \row
-    \o int&
-    \o [in,out] int
+    \li int&
+    \li [in,out] int
     \row
-    \o uint
-    \o [in] unsigned int
+    \li uint
+    \li [in] unsigned int
     \row
-    \o uint&
-    \o [in, out] unsigned int*
+    \li uint&
+    \li [in, out] unsigned int*
     \row
-    \o double
-    \o [in] double
+    \li double
+    \li [in] double
     \row
-    \o double&
-    \o [in, out] double*
+    \li double&
+    \li [in, out] double*
     \row
-    \o QColor, const QColor&
-    \o [in] OLE_COLOR
+    \li QColor, const QColor&
+    \li [in] OLE_COLOR
     \row
-    \o QColor&
-    \o [in, out] OLE_COLOR*
+    \li QColor&
+    \li [in, out] OLE_COLOR*
     \row
-    \o QDate, const QDate&
-    \o [in] DATE
+    \li QDate, const QDate&
+    \li [in] DATE
     \row
-    \o QDate&
-    \o [in, out] DATE*
+    \li QDate&
+    \li [in, out] DATE*
     \row
-    \o QDateTime, const QDateTime&
-    \o [in] DATE
+    \li QDateTime, const QDateTime&
+    \li [in] DATE
     \row
-    \o QDateTime&
-    \o [in, out] DATE*
+    \li QDateTime&
+    \li [in, out] DATE*
     \row
-    \o QFont, const QFont&
-    \o [in] IFontDisp*
+    \li QFont, const QFont&
+    \li [in] IFontDisp*
     \row
-    \o QFont&
-    \o [in, out] IFontDisp**
+    \li QFont&
+    \li [in, out] IFontDisp**
     \row
-    \o QPixmap, const QPixmap&
-    \o [in] IPictureDisp*
+    \li QPixmap, const QPixmap&
+    \li [in] IPictureDisp*
     \row
-    \o QPixmap&
-    \o [in, out] IPictureDisp**
+    \li QPixmap&
+    \li [in, out] IPictureDisp**
     \row
-    \o QList\<QVariant\>, const QList\<QVariant\>&
-    \o [in] SAFEARRAY(VARIANT)
+    \li QList\<QVariant\>, const QList\<QVariant\>&
+    \li [in] SAFEARRAY(VARIANT)
     \row
-    \o QList\<QVariant\>&
-    \o [in, out] SAFEARRAY(VARIANT)*
+    \li QList\<QVariant\>&
+    \li [in, out] SAFEARRAY(VARIANT)*
     \row
-    \o QStringList, const QStringList&
-    \o [in] SAFEARRAY(BSTR)
+    \li QStringList, const QStringList&
+    \li [in] SAFEARRAY(BSTR)
     \row
-    \o QStringList&
-    \o [in, out] SAFEARRAY(BSTR)*
+    \li QStringList&
+    \li [in, out] SAFEARRAY(BSTR)*
     \row
-    \o QByteArray, const QByteArray&
-    \o [in] SAFEARRAY(BYTE)
+    \li QByteArray, const QByteArray&
+    \li [in] SAFEARRAY(BYTE)
     \row
-    \o QByteArray&
-    \o [in, out] SAFEARRAY(BYTE)*
+    \li QByteArray&
+    \li [in, out] SAFEARRAY(BYTE)*
     \row
-    \o QObject*
-    \o [in] IDispatch*
+    \li QObject*
+    \li [in] IDispatch*
     \row
-    \o QRect&
+    \li QRect&
     \footnote
     OLE needs to marshal user defined types by reference (ByRef), and cannot 
     marshal them by value (ByVal). This is why const-references and object
     parameters are not supported for QRect, QSize and QPoint.
     \endfootnote
-    \o [in, out] struct QRect (user defined)
+    \li [in, out] struct QRect (user defined)
     \row
-    \o QSize&
-    \o [in, out] struct QSize (user defined)
+    \li QSize&
+    \li [in, out] struct QSize (user defined)
     \row
-    \o QPoint&
-    \o [in, out] struct QPoint (user defined)
+    \li QPoint&
+    \li [in, out] struct QPoint (user defined)
     \endtable
 
     Also supported are exported enums and flags (see Q_ENUMS() and
@@ -485,11 +485,11 @@
     If the ActiveX server is an executable, the following command line
     options are supported:
     \table
-    \header \o Option \o Result
-    \row \o \c -regserver \o Registers the server in the system registry
-    \row \o \c -unregserver \o Unregisters the server from the system registry
-    \row \o \c -activex \o Starts the application as an ActiveX server
-    \row \o \c{-dumpidl <file> -version x.y} \o Writes the server's IDL to the
+    \header \li Option \li Result
+    \row \li \c -regserver \li Registers the server in the system registry
+    \row \li \c -unregserver \li Unregisters the server from the system registry
+    \row \li \c -activex \li Starts the application as an ActiveX server
+    \row \li \c{-dumpidl <file> -version x.y} \li Writes the server's IDL to the
     specified file. The type library will have version x.y
     \endtable
 
@@ -616,14 +616,14 @@
     ActiveQt. Note that some clients support only in-process controls.
 
     \list
-    \o Internet Explorer
-    \o Microsoft ActiveX Control Test Container
-    \o Microsoft Visual Studio 6.0
-    \o Microsoft Visual Studio.NET/2003
-    \o Microsoft Visual Basic 6.0
-    \o MFC- and ATL-based containers
-    \o Sybase PowerBuilder
-    \o ActiveQt based containers
+    \li Internet Explorer
+    \li Microsoft ActiveX Control Test Container
+    \li Microsoft Visual Studio 6.0
+    \li Microsoft Visual Studio.NET/2003
+    \li Microsoft Visual Basic 6.0
+    \li MFC- and ATL-based containers
+    \li Sybase PowerBuilder
+    \li ActiveQt based containers
     \endlist
 
     Microsoft Office applications are supported, but you need to register
@@ -637,8 +637,8 @@
     following client applications.
 
     \list
-    \o Borland C++ Builder (Versions 5 and 6)
-    \o Borland Delphi
+    \li Borland C++ Builder (Versions 5 and 6)
+    \li Borland Delphi
     \endlist
 
     \section2 Typical Runtime Errors
@@ -686,76 +686,76 @@
 
     \table
     \header
-    \o Key
-    \o Meaning of value
+    \li Key
+    \li Meaning of value
     \row
-    \o Version
-    \o The version of the class (1.0 is default)
+    \li Version
+    \li The version of the class (1.0 is default)
     \row
-    \o Description
-    \o A string describing the class.
+    \li Description
+    \li A string describing the class.
     \row
-    \o ClassID
-    \o The class ID.
+    \li ClassID
+    \li The class ID.
        You must reimplement QAxFactory::classID if not specified.
     \row
-    \o InterfaceID
-    \o The interface ID. 
+    \li InterfaceID
+    \li The interface ID.
        You must reimplement QAxFactory::interfaceID if not specified.
     \row
-    \o EventsID
-    \o The event interface ID.
+    \li EventsID
+    \li The event interface ID.
        No signals are exposed as COM events if not specified.
     \row
-    \o DefaultProperty
-    \o The property specified represents the default property of this class.
+    \li DefaultProperty
+    \li The property specified represents the default property of this class.
        Ie. the default property of a push button would be "text".
     \row
-    \o DefaultSignal
-    \o The signal specified respresents the default signal of this class.
+    \li DefaultSignal
+    \li The signal specified respresents the default signal of this class.
        Ie. the default signal of a push button would be "clicked".
     \row
-    \o LicenseKey
-    \o Object creation requires the specified license key. The key can be
+    \li LicenseKey
+    \li Object creation requires the specified license key. The key can be
        empty to require a licensed machine. By default classes are not
        licensed. Also see the following section.
     \row
-    \o StockEvents
-    \o Objects expose stock events if value is "yes".
+    \li StockEvents
+    \li Objects expose stock events if value is "yes".
        See \l QAxFactory::hasStockEvents()
     \row
-    \o ToSuperClass
-    \o Objects expose functionality of all super-classes up to and
+    \li ToSuperClass
+    \li Objects expose functionality of all super-classes up to and
        including the class name in value.
        See \l QAxFactory::exposeToSuperClass()
     \row
-    \o Insertable
-    \o If the value is "yes" the class is registered to be "Insertable" 
+    \li Insertable
+    \li If the value is "yes" the class is registered to be "Insertable"
        and will be listed in OLE 2 containers (ie. Microsoft Office). This 
        attribute is not be set by default.
     \row
-    \o Aggregatable
-    \o If the value is "no" the class does not support aggregation. By 
+    \li Aggregatable
+    \li If the value is "no" the class does not support aggregation. By
        default aggregation is supported.
     \row
-    \o Creatable
-    \o If the value is "no" the class cannot be created by the client,
+    \li Creatable
+    \li If the value is "no" the class cannot be created by the client,
        and is only available through the API of another class (ie. the
        class is a sub-type).
     \row
-    \o RegisterObject
-    \o If the value is "yes" objects of this class are registered with
+    \li RegisterObject
+    \li If the value is "yes" objects of this class are registered with
        OLE and accessible from the running object table (ie. clients
        can connect to an already running instance of this class). This
        attribute is only supported in out-of-process servers.
     \row
-    \o MIME
-    \o The object can handle data and files of the format specified in the 
+    \li MIME
+    \li The object can handle data and files of the format specified in the
        value. The value has the format mime:extension:description. Multiple 
        formats are separated by a semicolon.
     \row
-    \o CoClassAlias
-    \o The classname used in the generated IDL and in the registry. This is
+    \li CoClassAlias
+    \li The classname used in the generated IDL and in the registry. This is
        esp. useful for C++ classes that live in a namespace - by default, 
        ActiveQt just removes the "::" to make the IDL compile.
     \endtable
diff --git a/doc/src/activeqt.qdoc b/doc/src/activeqt.qdoc
index 726ab65..b792bbc 100644
--- a/doc/src/activeqt.qdoc
+++ b/doc/src/activeqt.qdoc
@@ -49,9 +49,9 @@
     Qt's ActiveX and COM support allows Qt for Windows developers to:
 
     \list 1
-    \o Access and use ActiveX controls and COM objects provided by any 
+    \li Access and use ActiveX controls and COM objects provided by any
     ActiveX server in their Qt applications.
-    \o Make their Qt applications available as COM servers, with
+    \li Make their Qt applications available as COM servers, with
     any number of Qt objects and widgets as COM objects and ActiveX 
     controls.
     \endlist
@@ -62,11 +62,11 @@
     The ActiveQt framework consists of two modules:
 
     \list
-    \o The \l{Using ActiveX controls and COM in Qt}{QAxContainer}
+    \li The \l{Using ActiveX controls and COM in Qt}{QAxContainer}
        module is a static library implementing QObject and QWidget subclasses,
        QAxObject and QAxWidget, that act as containers for COM objects and
        ActiveX controls.
-    \o The \l{Building ActiveX servers in Qt}{QAxServer}
+    \li The \l{Building ActiveX servers in Qt}{QAxServer}
        module is a static library that implements
        functionality for in-process and executable COM servers. This
        module provides the QAxAggregated, QAxBindable and QAxFactory
diff --git a/doc/src/examples/dotnet.qdoc b/doc/src/examples/dotnet.qdoc
index 4d08fbe..55ebd71 100644
--- a/doc/src/examples/dotnet.qdoc
+++ b/doc/src/examples/dotnet.qdoc
@@ -98,7 +98,7 @@
     or \c {examples/dotnet/wrapper/wrapper.sln} into the IDE and run
     the solution.
 
-    \bold{Remark:} You will notice that in the generated code the following line is
+    \b{Remark:} You will notice that in the generated code the following line is
     commented out:
 
     \snippet doc/src/snippets/code/doc_src_examples_activeqt_dotnet.qdoc 0
diff --git a/src/activeqt/container/qaxbase.cpp b/src/activeqt/container/qaxbase.cpp
index 7a9c9be..e2cb619 100644
--- a/src/activeqt/container/qaxbase.cpp
+++ b/src/activeqt/container/qaxbase.cpp
@@ -726,105 +726,105 @@ QByteArray QAxEventSink::findProperty(DISPID dispID)
     type that is used in the prototype of signals and slots for out-parameters.
     \table
     \header
-    \i COM type
-    \i Qt property
-    \i in-parameter
-    \i out-parameter
+    \li COM type
+    \li Qt property
+    \li in-parameter
+    \li out-parameter
     \row
-    \i VARIANT_BOOL
-    \i bool
-    \i bool
-    \i bool&
+    \li VARIANT_BOOL
+    \li bool
+    \li bool
+    \li bool&
     \row
-    \i BSTR
-    \i QString
-    \i const QString&
-    \i QString&
+    \li BSTR
+    \li QString
+    \li const QString&
+    \li QString&
     \row
-    \i char, short, int, long
-    \i int
-    \i int
-    \i int&
+    \li char, short, int, long
+    \li int
+    \li int
+    \li int&
     \row
-    \i uchar, ushort, uint, ulong
-    \i uint
-    \i uint
-    \i uint&
+    \li uchar, ushort, uint, ulong
+    \li uint
+    \li uint
+    \li uint&
     \row
-    \i float, double
-    \i double
-    \i double
-    \i double&
+    \li float, double
+    \li double
+    \li double
+    \li double&
     \row
-    \i DATE
-    \i QDateTime
-    \i const QDateTime&
-    \i QDateTime&
+    \li DATE
+    \li QDateTime
+    \li const QDateTime&
+    \li QDateTime&
     \row
-    \i CY
-    \i qlonglong
-    \i qlonglong
-    \i qlonglong&
+    \li CY
+    \li qlonglong
+    \li qlonglong
+    \li qlonglong&
     \row
-    \i OLE_COLOR
-    \i QColor
-    \i const QColor&
-    \i QColor&
+    \li OLE_COLOR
+    \li QColor
+    \li const QColor&
+    \li QColor&
     \row
-    \i SAFEARRAY(VARIANT)
-    \i QList\<QVariant\>
-    \i const QList\<QVariant\>&
-    \i QList\<QVariant\>&
+    \li SAFEARRAY(VARIANT)
+    \li QList\<QVariant\>
+    \li const QList\<QVariant\>&
+    \li QList\<QVariant\>&
     \row
-    \i SAFEARRAY(int), SAFEARRAY(double), SAFEARRAY(Date)
-    \i QList\<QVariant\>
-    \i const QList\<QVariant\>&
-    \i QList\<QVariant\>&
+    \li SAFEARRAY(int), SAFEARRAY(double), SAFEARRAY(Date)
+    \li QList\<QVariant\>
+    \li const QList\<QVariant\>&
+    \li QList\<QVariant\>&
     \row
-    \i SAFEARRAY(BYTE)
-    \i QByteArray
-    \i const QByteArray&
-    \i QByteArray&
+    \li SAFEARRAY(BYTE)
+    \li QByteArray
+    \li const QByteArray&
+    \li QByteArray&
     \row
-    \i SAFEARRAY(BSTR)
-    \i QStringList
-    \i const QStringList&
-    \i QStringList&
+    \li SAFEARRAY(BSTR)
+    \li QStringList
+    \li const QStringList&
+    \li QStringList&
     \row
-    \i VARIANT
-    \i type-dependent
-    \i const QVariant&
-    \i QVariant&
+    \li VARIANT
+    \li type-dependent
+    \li const QVariant&
+    \li QVariant&
     \row
-    \i IFontDisp*
-    \i QFont
-    \i const QFont&
-    \i QFont&
+    \li IFontDisp*
+    \li QFont
+    \li const QFont&
+    \li QFont&
     \row
-    \i IPictureDisp*
-    \i QPixmap
-    \i const QPixmap&
-    \i QPixmap&
+    \li IPictureDisp*
+    \li QPixmap
+    \li const QPixmap&
+    \li QPixmap&
     \row
-    \i IDispatch*
-    \i QAxObject*
-    \i \c QAxBase::asVariant()
-    \i QAxObject* (return value)
+    \li IDispatch*
+    \li QAxObject*
+    \li \c QAxBase::asVariant()
+    \li QAxObject* (return value)
     \row
-    \i IUnknown*
-    \i QAxObject*
-    \i \c QAxBase::asVariant()
-    \i QAxObject* (return value)
+    \li IUnknown*
+    \li QAxObject*
+    \li \c QAxBase::asVariant()
+    \li QAxObject* (return value)
     \row
-    \i SCODE, DECIMAL
-    \i \e unsupported
-    \i \e unsupported
-    \i \e unsupported
+    \li SCODE, DECIMAL
+    \li \e unsupported
+    \li \e unsupported
+    \li \e unsupported
     \row
-    \i VARIANT* (Since Qt 4.5)
-    \i \e unsupported
-    \i \e QVariant&
-    \i \e QVariant&
+    \li VARIANT* (Since Qt 4.5)
+    \li \e unsupported
+    \li \e QVariant&
+    \li \e QVariant&
     \endtable
 
     Supported are also enumerations, and typedefs to supported types.
@@ -965,16 +965,16 @@ QAxMetaObject *QAxBase::internalMetaObject() const
     to initialize the control on a remote machine, to initialize a
     licensed control or to connect to a running object:
     \list
-    \i To initialize the control on a different machine use the following
+    \li To initialize the control on a different machine use the following
     pattern:
 
     \snippet doc/src/snippets/code/src_activeqt_container_qaxbase.cpp 11
 
-    \i To initialize a licensed control use the following pattern:
+    \li To initialize a licensed control use the following pattern:
 
     \snippet doc/src/snippets/code/src_activeqt_container_qaxbase.cpp 12
 
-    \i To connect to an already running object use the following pattern:
+    \li To connect to an already running object use the following pattern:
 
     \snippet doc/src/snippets/code/src_activeqt_container_qaxbase.cpp 13
 
diff --git a/src/activeqt/container/qaxwidget.cpp b/src/activeqt/container/qaxwidget.cpp
index d56dbc0..b8372a8 100644
--- a/src/activeqt/container/qaxwidget.cpp
+++ b/src/activeqt/container/qaxwidget.cpp
@@ -2229,13 +2229,13 @@ void QAxWidget::connectNotify(const char *)
 
     \table
     \header
-    \i WM_SYSKEYDOWN
-    \i WM_SYSKEYUP
-    \i WM_KEYDOWN
+    \li WM_SYSKEYDOWN
+    \li WM_SYSKEYUP
+    \li WM_KEYDOWN
     \row
-    \i All keycodes
-    \i VK_MENU
-    \i VK_TAB, VK_DELETE and all non-arrow-keys in combination with VK_SHIFT,
+    \li All keycodes
+    \li VK_MENU
+    \li VK_TAB, VK_DELETE and all non-arrow-keys in combination with VK_SHIFT,
        VK_CONTROL or VK_MENU
     \endtable
 
diff --git a/src/activeqt/control/qaxfactory.cpp b/src/activeqt/control/qaxfactory.cpp
index ca29ac8..fc6c932 100644
--- a/src/activeqt/control/qaxfactory.cpp
+++ b/src/activeqt/control/qaxfactory.cpp
@@ -324,14 +324,14 @@ bool QAxFactory::stayTopLevel(const QString &key) const
     Reimplement this function to return true if the ActiveX control
     \a key should support the standard ActiveX events
     \list
-    \i Click
-    \i DblClick
-    \i KeyDown
-    \i KeyPress
-    \i KeyUp
-    \i MouseDown
-    \i MouseUp
-    \i MouseMove
+    \li Click
+    \li DblClick
+    \li KeyDown
+    \li KeyPress
+    \li KeyUp
+    \li MouseDown
+    \li MouseUp
+    \li MouseMove
     \endlist
 
     The default implementation interprets \a key as the class name,
diff --git a/src/activeqt/control/qaxserverbase.cpp b/src/activeqt/control/qaxserverbase.cpp
index 9e028e7..61cc86c 100644
--- a/src/activeqt/control/qaxserverbase.cpp
+++ b/src/activeqt/control/qaxserverbase.cpp
@@ -1304,14 +1304,14 @@ class HackWidget : public QWidget
     Message handler. \a hWnd is always the ActiveX widget hosting the Qt widget.
     \a uMsg is handled as follows
     \list
-    \i WM_CREATE The ActiveX control is created
-    \i WM_DESTROY The QWidget is destroyed
-    \i WM_SHOWWINDOW The QWidget is parented into the ActiveX window
-    \i WM_PAINT The QWidget is updated
-    \i WM_SIZE The QWidget is resized to the new size
-    \i WM_SETFOCUS and
-    \i WM_KILLFOCUS The client site is notified about the focus transfer
-    \i WM_MOUSEACTIVATE The ActiveX is activated
+    \li WM_CREATE The ActiveX control is created
+    \li WM_DESTROY The QWidget is destroyed
+    \li WM_SHOWWINDOW The QWidget is parented into the ActiveX window
+    \li WM_PAINT The QWidget is updated
+    \li WM_SIZE The QWidget is resized to the new size
+    \li WM_SETFOCUS and
+    \li WM_KILLFOCUS The client site is notified about the focus transfer
+    \li WM_MOUSEACTIVATE The ActiveX is activated
     \endlist
 
     The semantics of \a wParam and \a lParam depend on the value of \a uMsg.