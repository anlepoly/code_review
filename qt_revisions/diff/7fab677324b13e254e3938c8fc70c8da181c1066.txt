diff --git a/tests/auto/auto.pro b/tests/auto/auto.pro
index 127d6c6..5e02e95 100644
--- a/tests/auto/auto.pro
+++ b/tests/auto/auto.pro
@@ -1,3 +1,4 @@
 TEMPLATE=subdirs
 SUBDIRS=\
-           qx11info
+           qx11info \
+           cmake
diff --git a/tests/auto/cmake/CMakeLists.txt b/tests/auto/cmake/CMakeLists.txt
new file mode 100644
index 0000000..271ab54
--- /dev/null
+++ b/tests/auto/cmake/CMakeLists.txt
@@ -0,0 +1,12 @@
+
+cmake_minimum_required(VERSION 2.8)
+
+project(qmake_cmake_files)
+
+enable_testing()
+
+find_package(Qt5Core REQUIRED)
+
+include("${_Qt5CTestMacros}")
+
+expect_pass(test_qx11_module)
diff --git a/tests/auto/cmake/cmake.pro b/tests/auto/cmake/cmake.pro
new file mode 100644
index 0000000..bf2dbcb
--- /dev/null
+++ b/tests/auto/cmake/cmake.pro
@@ -0,0 +1,5 @@
+
+# Cause make to do nothing.
+TEMPLATE = subdirs
+
+CONFIG += ctest_testcase
diff --git a/tests/auto/cmake/test_qx11_module/CMakeLists.txt b/tests/auto/cmake/test_qx11_module/CMakeLists.txt
new file mode 100644
index 0000000..d6f050e
--- /dev/null
+++ b/tests/auto/cmake/test_qx11_module/CMakeLists.txt
@@ -0,0 +1,25 @@
+
+cmake_minimum_required(VERSION 2.8)
+
+project(test_qx11_module)
+
+find_package(Qt5Core REQUIRED)
+find_package(Qt5Gui REQUIRED)
+
+find_package(Qt5X11Support REQUIRED)
+
+include_directories(
+    ${Qt5X11Support_INCLUDE_DIRS}
+)
+
+add_definitions(
+    ${Qt5X11Support_DEFINITIONS}
+)
+
+set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${Qt5Core_EXECUTABLE_COMPILE_FLAGS}")
+
+add_executable(mainapp main.cpp)
+
+target_link_libraries(mainapp
+    ${Qt5X11Support_LIBRARIES}
+)
diff --git a/tests/auto/cmake/test_qx11_module/main.cpp b/tests/auto/cmake/test_qx11_module/main.cpp
new file mode 100644
index 0000000..932521f
--- /dev/null
+++ b/tests/auto/cmake/test_qx11_module/main.cpp
@@ -0,0 +1,12 @@
+
+#include <QX11Info>
+#include <QtX11Support/QX11Info>
+#include <QtX11Support/QtX11Support>
+#include <QtX11Support>
+
+int main(int argc, char **argv)
+{
+  QX11Info::appScreen();
+
+  return 0;
+}