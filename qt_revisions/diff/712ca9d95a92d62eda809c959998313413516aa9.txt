diff --git a/src/corelib/io/qdir.cpp b/src/corelib/io/qdir.cpp
index 222192b..572295d 100644
--- a/src/corelib/io/qdir.cpp
+++ b/src/corelib/io/qdir.cpp
@@ -73,10 +73,10 @@ static QString driveSpec(const QString &path)
 #if defined(Q_OS_WIN)
     if (path.size() < 2)
         return QString();
-    char c = path.at(0).toAscii();
+    char c = path.at(0).toLatin1();
     if (c < 'a' && c > 'z' && c < 'A' && c > 'Z')
         return QString();
-    if (path.at(1).toAscii() != ':')
+    if (path.at(1).toLatin1() != ':')
         return QString();
     return path.mid(0, 2);
 #else
diff --git a/src/corelib/io/qstandardpaths_json.cpp b/src/corelib/io/qstandardpaths_json.cpp
index 8542371..cb4c40a 100644
--- a/src/corelib/io/qstandardpaths_json.cpp
+++ b/src/corelib/io/qstandardpaths_json.cpp
@@ -200,7 +200,7 @@ QString QStandardPaths::writableLocation(StandardLocation type)
         QRegExp varRegExp(QLatin1String("\\$\\{([^\\}]*)\\}"));
         while (value.contains(varRegExp)) {
             QString replacement =
-                    QFile::decodeName(qgetenv(varRegExp.cap(1).toAscii().data()));
+                    QFile::decodeName(qgetenv(varRegExp.cap(1).toLatin1().data()));
             value.replace(varRegExp.cap(0), replacement);
         }
     }
diff --git a/src/corelib/io/qtextstream.cpp b/src/corelib/io/qtextstream.cpp
index ae40f77..c11a0e2 100644
--- a/src/corelib/io/qtextstream.cpp
+++ b/src/corelib/io/qtextstream.cpp
@@ -2341,7 +2341,7 @@ QTextStream &QTextStream::operator<<(char c)
 {
     Q_D(QTextStream);
     CHECK_VALID_STREAM(*this);
-    d->putString(QString(QChar::fromAscii(c)));
+    d->putString(QString(QChar::fromLatin1(c)));
     return *this;
 }
 
diff --git a/src/corelib/kernel/qobject.cpp b/src/corelib/kernel/qobject.cpp
index 49a9beb..e324fcb 100644
--- a/src/corelib/kernel/qobject.cpp
+++ b/src/corelib/kernel/qobject.cpp
@@ -3236,7 +3236,7 @@ void QMetaObject::connectSlotsByName(QObject *o)
         bool foundIt = false;
         for(int j = 0; j < list.count(); ++j) {
             const QObject *co = list.at(j);
-            QByteArray objName = co->objectName().toAscii();
+            QByteArray objName = co->objectName().toLatin1();
             int len = objName.length();
             if (!len || qstrncmp(slot + 3, objName.data(), len) || slot[len+3] != '_')
                 continue;
diff --git a/src/corelib/kernel/qvariant.cpp b/src/corelib/kernel/qvariant.cpp
index 83d48d9..0b3e041 100644
--- a/src/corelib/kernel/qvariant.cpp
+++ b/src/corelib/kernel/qvariant.cpp
@@ -290,7 +290,7 @@ static bool convert(const QVariant::Private *d, int t, void *result, bool *ok)
             break;
         case QMetaType::Char:
         case QMetaType::UChar:
-            *str = QChar::fromAscii(d->data.c);
+            *str = QChar::fromLatin1(d->data.c);
             break;
         case QMetaType::Short:
         case QMetaType::Long:
diff --git a/src/corelib/plugin/qlibrary_unix.cpp b/src/corelib/plugin/qlibrary_unix.cpp
index 0ad7a87..3700d2a 100644
--- a/src/corelib/plugin/qlibrary_unix.cpp
+++ b/src/corelib/plugin/qlibrary_unix.cpp
@@ -285,7 +285,7 @@ QFunctionPointer QLibraryPrivate::resolve_sys(const char* symbol)
 #endif
     if (!address) {
         errorString = QLibrary::tr("Cannot resolve symbol \"%1\" in %2: %3").arg(
-            QString::fromAscii(symbol)).arg(fileName).arg(qdlerror());
+            QString::fromLatin1(symbol)).arg(fileName).arg(qdlerror());
     } else {
         errorString.clear();
     }
diff --git a/src/corelib/plugin/qlibrary_win.cpp b/src/corelib/plugin/qlibrary_win.cpp
index 19a8299..1e8ab15 100644
--- a/src/corelib/plugin/qlibrary_win.cpp
+++ b/src/corelib/plugin/qlibrary_win.cpp
@@ -122,7 +122,7 @@ QFunctionPointer QLibraryPrivate::resolve_sys(const char* symbol)
 #endif
     if (!address) {
         errorString = QLibrary::tr("Cannot resolve symbol \"%1\" in %2: %3").arg(
-            QString::fromAscii(symbol)).arg(fileName).arg(qt_error_string());
+            QString::fromLatin1(symbol)).arg(fileName).arg(qt_error_string());
     } else {
         errorString.clear();
     }
diff --git a/src/corelib/tools/qeasingcurve.cpp b/src/corelib/tools/qeasingcurve.cpp
index e237b81..c85325a 100644
--- a/src/corelib/tools/qeasingcurve.cpp
+++ b/src/corelib/tools/qeasingcurve.cpp
@@ -1421,9 +1421,9 @@ QDebug operator<<(QDebug debug, const QEasingCurve &item)
     debug << "type:" << item.d_ptr->type
           << "func:" << item.d_ptr->func;
     if (item.d_ptr->config) {
-        debug << QString::fromAscii("period:%1").arg(item.d_ptr->config->_p, 0, 'f', 20)
-              << QString::fromAscii("amp:%1").arg(item.d_ptr->config->_a, 0, 'f', 20)
-              << QString::fromAscii("overshoot:%1").arg(item.d_ptr->config->_o, 0, 'f', 20);
+        debug << QString::fromLatin1("period:%1").arg(item.d_ptr->config->_p, 0, 'f', 20)
+              << QString::fromLatin1("amp:%1").arg(item.d_ptr->config->_a, 0, 'f', 20)
+              << QString::fromLatin1("overshoot:%1").arg(item.d_ptr->config->_o, 0, 'f', 20);
     }
     return debug;
 }
diff --git a/tests/auto/corelib/codecs/qtextcodec/tst_qtextcodec.cpp b/tests/auto/corelib/codecs/qtextcodec/tst_qtextcodec.cpp
index 719e29e..d1cbe1b 100644
--- a/tests/auto/corelib/codecs/qtextcodec/tst_qtextcodec.cpp
+++ b/tests/auto/corelib/codecs/qtextcodec/tst_qtextcodec.cpp
@@ -578,9 +578,9 @@ void tst_QTextCodec::utf8Codec_data()
     // QTest::newRow("null5") << QByteArray() << QString() << 5;
     QTest::newRow("empty-1") << QByteArray("\0abcd", 5) << QString() << -1;
     QTest::newRow("empty0") << QByteArray() << QString() << 0;
-    QTest::newRow("empty5") << QByteArray("\0abcd", 5) << QString::fromAscii("\0abcd", 5) << 5;
-    QTest::newRow("other-1") << QByteArray("ab\0cd", 5) << QString::fromAscii("ab") << -1;
-    QTest::newRow("other5") << QByteArray("ab\0cd", 5) << QString::fromAscii("ab\0cd", 5) << 5;
+    QTest::newRow("empty5") << QByteArray("\0abcd", 5) << QString::fromLatin1("\0abcd", 5) << 5;
+    QTest::newRow("other-1") << QByteArray("ab\0cd", 5) << QString::fromLatin1("ab") << -1;
+    QTest::newRow("other5") << QByteArray("ab\0cd", 5) << QString::fromLatin1("ab\0cd", 5) << 5;
 
     str = "Old Italic: ";
     str += QChar(0xd800);
diff --git a/tests/auto/corelib/io/qdir/tst_qdir.cpp b/tests/auto/corelib/io/qdir/tst_qdir.cpp
index 250575b..f7fa510 100644
--- a/tests/auto/corelib/io/qdir/tst_qdir.cpp
+++ b/tests/auto/corelib/io/qdir/tst_qdir.cpp
@@ -481,7 +481,7 @@ void tst_QDir::exists_data()
     char drive = 'Z';
     QString driv;
     do {
-        driv = QString::fromAscii("%1:/").arg(drive);
+        driv = QString::fromLatin1("%1:/").arg(drive);
         if (!driveLetters.contains(driv)) break;
         --drive;
     } while (drive >= 'A');
diff --git a/tests/auto/corelib/io/qfile/tst_qfile.cpp b/tests/auto/corelib/io/qfile/tst_qfile.cpp
index 87d2cf8..db0ec39 100644
--- a/tests/auto/corelib/io/qfile/tst_qfile.cpp
+++ b/tests/auto/corelib/io/qfile/tst_qfile.cpp
@@ -1544,7 +1544,7 @@ void tst_QFile::bufferedRead()
     file.close();
 
 #if defined(Q_OS_WINCE)
-    FILE *stdFile = fopen((QCoreApplication::applicationDirPath() + "/stdfile.txt").toAscii() , "r");
+    FILE *stdFile = fopen((QCoreApplication::applicationDirPath() + "/stdfile.txt").toLatin1() , "r");
 #else
     FILE *stdFile = fopen("stdfile.txt", "r");
 #endif
@@ -2306,7 +2306,7 @@ void tst_QFile::virtualFile()
 void tst_QFile::textFile()
 {
 #if defined(Q_OS_WINCE)
-    FILE *fs = ::fopen((QCoreApplication::applicationDirPath() + "/writeabletextfile").toAscii() , "wt");
+    FILE *fs = ::fopen((QCoreApplication::applicationDirPath() + "/writeabletextfile").toLatin1() , "wt");
 #elif defined(Q_OS_WIN)
     FILE *fs = ::fopen("writeabletextfile", "wt");
 #else
diff --git a/tests/auto/corelib/kernel/qobject/signalbug/signalbug.cpp b/tests/auto/corelib/kernel/qobject/signalbug/signalbug.cpp
index a1fd6e7..24811ed 100644
--- a/tests/auto/corelib/kernel/qobject/signalbug/signalbug.cpp
+++ b/tests/auto/corelib/kernel/qobject/signalbug/signalbug.cpp
@@ -74,7 +74,7 @@ void Receiver::received ()
         s->fire ();
 
     fprintf (stderr, "Receiver<%s>::received() sender=%s\n",
-        (const char *) objectName ().toAscii (), sender ()->metaObject()->className());
+        (const char *) objectName ().toLatin1 (), sender ()->metaObject()->className());
 
     TRACE (stepCopy, "ends Receiver::received()");
 }
@@ -93,7 +93,7 @@ void Disconnector::received ()
         qFatal("%s: Incorrect Step: %d (should be 5 or 6)", Q_FUNC_INFO, ::Step);
 
     fprintf (stderr, "Disconnector<%s>::received() sender=%s\n",
-        (const char *) objectName ().toAscii (), sender ()->metaObject()->className());
+        (const char *) objectName ().toLatin1 (), sender ()->metaObject()->className());
     if (sender () == 0)
         fprintf (stderr, "WE SHOULD NOT BE RECEIVING THIS SIGNAL\n");
 
diff --git a/tests/auto/corelib/tools/qbytearray/tst_qbytearray.cpp b/tests/auto/corelib/tools/qbytearray/tst_qbytearray.cpp
index e84eb95..9bb3506 100644
--- a/tests/auto/corelib/tools/qbytearray/tst_qbytearray.cpp
+++ b/tests/auto/corelib/tools/qbytearray/tst_qbytearray.cpp
@@ -197,9 +197,9 @@ QByteArray verifyZeroTermination(const QByteArray &ba)
     int baSize = ba.size();
     char baTerminator = ba.constData()[baSize];
     if ('\0' != baTerminator)
-        return QString::fromAscii(
-            "*** Result ('%1') not null-terminated: 0x%2 ***").arg(QString::fromAscii(ba))
-                .arg(baTerminator, 2, 16, QChar('0')).toAscii();
+        return QString::fromLatin1(
+            "*** Result ('%1') not null-terminated: 0x%2 ***").arg(QString::fromLatin1(ba))
+                .arg(baTerminator, 2, 16, QChar('0')).toLatin1();
 
     // Skip mutating checks on shared strings
     if (baDataPtr->ref.isShared())
@@ -210,12 +210,12 @@ QByteArray verifyZeroTermination(const QByteArray &ba)
 
     const_cast<char *>(baData)[baSize] = 'x';
     if ('x' != ba.constData()[baSize]) {
-        return QString::fromAscii("*** Failed to replace null-terminator in "
-                "result ('%1') ***").arg(QString::fromAscii(ba)).toAscii();
+        return QString::fromLatin1("*** Failed to replace null-terminator in "
+                "result ('%1') ***").arg(QString::fromLatin1(ba)).toLatin1();
     }
     if (ba != baCopy) {
-        return QString::fromAscii( "*** Result ('%1') differs from its copy "
-                "after null-terminator was replaced ***").arg(QString::fromAscii(ba)).toAscii();
+        return QString::fromLatin1( "*** Result ('%1') differs from its copy "
+                "after null-terminator was replaced ***").arg(QString::fromLatin1(ba)).toLatin1();
     }
     const_cast<char *>(baData)[baSize] = '\0'; // Restore sanity
 
diff --git a/tests/auto/corelib/tools/qcryptographichash/tst_qcryptographichash.cpp b/tests/auto/corelib/tools/qcryptographichash/tst_qcryptographichash.cpp
index 67c1568..f880390 100644
--- a/tests/auto/corelib/tools/qcryptographichash/tst_qcryptographichash.cpp
+++ b/tests/auto/corelib/tools/qcryptographichash/tst_qcryptographichash.cpp
@@ -174,8 +174,8 @@ void tst_QCryptographicHash::files_data() {
     QTest::addColumn<QString>("filename");
     QTest::addColumn<QCryptographicHash::Algorithm>("algorithm");
     QTest::addColumn<QByteArray>("md5sum");
-    QTest::newRow("data1") << QString::fromAscii("data/2c1517dad3678f03917f15849b052fd5.md5") << QCryptographicHash::Md5 << QByteArray("2c1517dad3678f03917f15849b052fd5");
-    QTest::newRow("data2") << QString::fromAscii("data/d41d8cd98f00b204e9800998ecf8427e.md5") << QCryptographicHash::Md5 << QByteArray("d41d8cd98f00b204e9800998ecf8427e");
+    QTest::newRow("data1") << QString::fromLatin1("data/2c1517dad3678f03917f15849b052fd5.md5") << QCryptographicHash::Md5 << QByteArray("2c1517dad3678f03917f15849b052fd5");
+    QTest::newRow("data2") << QString::fromLatin1("data/d41d8cd98f00b204e9800998ecf8427e.md5") << QCryptographicHash::Md5 << QByteArray("d41d8cd98f00b204e9800998ecf8427e");
 }
 
 
diff --git a/tests/auto/corelib/tools/qeasingcurve/tst_qeasingcurve.cpp b/tests/auto/corelib/tools/qeasingcurve/tst_qeasingcurve.cpp
index 487007e..2031bbb 100644
--- a/tests/auto/corelib/tools/qeasingcurve/tst_qeasingcurve.cpp
+++ b/tests/auto/corelib/tools/qeasingcurve/tst_qeasingcurve.cpp
@@ -103,15 +103,15 @@ void tst_QEasingCurve::type()
     QTest::ignoreMessage(QtWarningMsg, "QEasingCurve: Invalid curve type -9999");
     curve.setType((QEasingCurve::Type)-9999);
     QCOMPARE(curve.type(), QEasingCurve::InCubic);
-    QTest::ignoreMessage(QtWarningMsg, QString::fromAscii("QEasingCurve: Invalid curve type %1")
+    QTest::ignoreMessage(QtWarningMsg, QString::fromLatin1("QEasingCurve: Invalid curve type %1")
                         .arg(QEasingCurve::NCurveTypes).toLatin1().constData());
     curve.setType(QEasingCurve::NCurveTypes);
     QCOMPARE(curve.type(), QEasingCurve::InCubic);
-    QTest::ignoreMessage(QtWarningMsg, QString::fromAscii("QEasingCurve: Invalid curve type %1")
+    QTest::ignoreMessage(QtWarningMsg, QString::fromLatin1("QEasingCurve: Invalid curve type %1")
                         .arg(QEasingCurve::Custom).toLatin1().constData());
     curve.setType(QEasingCurve::Custom);
     QCOMPARE(curve.type(), QEasingCurve::InCubic);
-    QTest::ignoreMessage(QtWarningMsg, QString::fromAscii("QEasingCurve: Invalid curve type %1")
+    QTest::ignoreMessage(QtWarningMsg, QString::fromLatin1("QEasingCurve: Invalid curve type %1")
                         .arg(-1).toLatin1().constData());
     curve.setType((QEasingCurve::Type)-1);
     QCOMPARE(curve.type(), QEasingCurve::InCubic);
@@ -389,10 +389,10 @@ void tst_QEasingCurve::valueForProgress()
 
         for (int t = 0; t <= 100; t+= 10) {
             qreal ease = curve.valueForProgress(t/qreal(100));
-            strInputs += QString::fromAscii(" << %1").arg(t);
+            strInputs += QString::fromLatin1(" << %1").arg(t);
             strOutputs += " << " + fixedToString(qRound(ease*10000));
         }
-        QString str = QString::fromAscii("    QTest::newRow(\"%1\") << int(QEasingCurve::%2)\n"
+        QString str = QString::fromLatin1("    QTest::newRow(\"%1\") << int(QEasingCurve::%2)\n"
                                                 "         << (IntList() %3)\n"
                                                 "         << (RealList()%4);\n\n")
                                       .arg(strCurve)
diff --git a/tests/auto/other/collections/tst_collections.cpp b/tests/auto/other/collections/tst_collections.cpp
index 2d5d6a6..472dd50 100644
--- a/tests/auto/other/collections/tst_collections.cpp
+++ b/tests/auto/other/collections/tst_collections.cpp
@@ -2124,14 +2124,14 @@ void tst_Collections::qstring()
     QVERIFY(s.toLocal8Bit().isEmpty());
 
     s = "first-ascii";
-    QVERIFY(s.toAscii() == "first-ascii");
+    QVERIFY(s.toLatin1() == "first-ascii");
     s = "second-ascii";
-    QVERIFY(s.toAscii() == "second-ascii");
+    QVERIFY(s.toLatin1() == "second-ascii");
     s.clear();
     QVERIFY(s.isNull());
-    QVERIFY(s.toAscii().size() == 0);
-    QVERIFY(s.toAscii().isEmpty());
-    QVERIFY(s.toAscii().isNull());
+    QVERIFY(s.toLatin1().size() == 0);
+    QVERIFY(s.toLatin1().isEmpty());
+    QVERIFY(s.toLatin1().isNull());
 
     s = "ascii";
     s += QChar((uchar) 0xb0);
diff --git a/tests/benchmarks/corelib/io/qdiriterator/qfilesystemiterator.cpp b/tests/benchmarks/corelib/io/qdiriterator/qfilesystemiterator.cpp
index 7b22f50..940941c 100644
--- a/tests/benchmarks/corelib/io/qdiriterator/qfilesystemiterator.cpp
+++ b/tests/benchmarks/corelib/io/qdiriterator/qfilesystemiterator.cpp
@@ -228,7 +228,7 @@ void QFileSystemIteratorPrivate::pushSubDirectory(const QByteArray &path)
 
 #ifdef Q_OS_WIN
     wchar_t szSearchPath[MAX_PATH];
-    QString::fromAscii(path).toWCharArray(szSearchPath);
+    QString::fromLatin1(path).toWCharArray(szSearchPath);
     wcscat(szSearchPath, L"\\*");
     HANDLE dir = FindFirstFile(szSearchPath, &m_fileSearchResult);
     m_bFirstSearchResult = true;