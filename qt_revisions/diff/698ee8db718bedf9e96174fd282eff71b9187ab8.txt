diff --git a/src/serialportengine_unix.cpp b/src/serialportengine_unix.cpp
index 24efe5c..334522b 100755
--- a/src/serialportengine_unix.cpp
+++ b/src/serialportengine_unix.cpp
@@ -193,7 +193,7 @@ bool UnixSerialPortEngine::open(const QString &location, QIODevice::OpenMode mod
         dptr->setError(decodeSystemError());
         return false;
     }
-    ::memcpy(&m_currentTermios, &m_restoredTermios, sizeof(struct termios));
+    m_currentTermios = m_restoredTermios;
 
     // Set other options.
     ::cfmakeraw(&m_currentTermios);
@@ -949,7 +949,7 @@ void UnixSerialPortEngine::detectDefaultSettings()
 
     if (m_isCustomRateSupported) {
 
-        ::memcpy(&m_restoredSerialInfo, &m_currentSerialInfo, sizeof(struct serial_struct));
+        m_restoredSerialInfo = m_currentSerialInfo;
 
         // assume that the baud rate is a custom
         isCustomRateCurrentSet = inputUnixRate == B38400 && outputUnixRate == B38400;
diff --git a/src/serialportengine_win.cpp b/src/serialportengine_win.cpp
index 8d63d1b..588111c 100755
--- a/src/serialportengine_win.cpp
+++ b/src/serialportengine_win.cpp
@@ -216,12 +216,11 @@ bool WinSerialPortEngine::open(const QString &location, QIODevice::OpenMode mode
     }
 
     // Save current DCB port settings.
-    DWORD confSize = sizeof(DCB);
     if (::GetCommState(m_descriptor, &m_restoredDcb) == 0) {
         dptr->setError(decodeSystemError());
         return false;
     }
-    ::memcpy(&m_currentDcb, &m_restoredDcb, confSize);
+    m_currentDcb = m_restoredDcb;
 
     // Set other DCB port options.
     m_currentDcb.fBinary = true;
@@ -236,15 +235,14 @@ bool WinSerialPortEngine::open(const QString &location, QIODevice::OpenMode mode
         return false;
 
     // Save current port timeouts.
-    confSize = sizeof(COMMTIMEOUTS);
     if (::GetCommTimeouts(m_descriptor, &m_restoredCommTimeouts) == 0) {
         dptr->setError(decodeSystemError());
         return false;
     }
-    ::memcpy(&m_currentCommTimeouts, &m_restoredCommTimeouts, confSize);
+    m_currentCommTimeouts = m_restoredCommTimeouts;
 
     // Set new port timeouts.
-    ::memset(&m_currentCommTimeouts, 0, confSize);
+    ::memset(&m_currentCommTimeouts, 0, sizeof(COMMTIMEOUTS));
     m_currentCommTimeouts.ReadIntervalTimeout = MAXDWORD;
 
     // Apply new port timeouts.