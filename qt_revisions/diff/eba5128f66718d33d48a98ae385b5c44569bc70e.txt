diff --git a/src/plugins/accessible/quick/qaccessiblequickview.cpp b/src/plugins/accessible/quick/qaccessiblequickview.cpp
index 764db83..0106a3d 100644
--- a/src/plugins/accessible/quick/qaccessiblequickview.cpp
+++ b/src/plugins/accessible/quick/qaccessiblequickview.cpp
@@ -107,7 +107,7 @@ QString QAccessibleQuickView::text(QAccessible::Text text) const
 #else
     Q_UNUSED(text)
 #endif
-    return view()->windowTitle();
+    return view()->title();
 }
 
 
diff --git a/src/plugins/qmltooling/qmldbg_qtquick2/qquickviewinspector.cpp b/src/plugins/qmltooling/qmldbg_qtquick2/qquickviewinspector.cpp
index 4f6ee51..1255016 100644
--- a/src/plugins/qmltooling/qmldbg_qtquick2/qquickviewinspector.cpp
+++ b/src/plugins/qmltooling/qmldbg_qtquick2/qquickviewinspector.cpp
@@ -171,13 +171,13 @@ QWindow *getMasterWindow(QWindow *w)
 
 Qt::WindowFlags QQuickViewInspector::windowFlags() const
 {
-    return getMasterWindow(m_view)->windowFlags();
+    return getMasterWindow(m_view)->flags();
 }
 
 void QQuickViewInspector::setWindowFlags(Qt::WindowFlags flags)
 {
     QWindow *w = getMasterWindow(m_view);
-    w->setWindowFlags(flags);
+    w->setFlags(flags);
     // make flags are applied
     w->setVisible(false);
     w->setVisible(true);
diff --git a/src/qmltest/quicktest.cpp b/src/qmltest/quicktest.cpp
index d622ac9..614dde3 100644
--- a/src/qmltest/quicktest.cpp
+++ b/src/qmltest/quicktest.cpp
@@ -269,7 +269,7 @@ int quick_test_main(int argc, char **argv, const char *name, const char *sourceD
     // Scan through all of the "tst_*.qml" files and run each of them
     // in turn with a QQuickView.
     QQuickView *view = new QQuickView;
-    view->setWindowFlags(Qt::Window | Qt::WindowSystemMenuHint
+    view->setFlags(Qt::Window | Qt::WindowSystemMenuHint
                          | Qt::WindowTitleHint | Qt::WindowMinMaxButtonsHint
                          | Qt::WindowCloseButtonHint);
     QTestRootObject rootobj;
@@ -288,7 +288,7 @@ int quick_test_main(int argc, char **argv, const char *name, const char *sourceD
             continue;
 
         view->setObjectName(fi.baseName());
-        view->setWindowTitle(view->objectName());
+        view->setTitle(view->objectName());
         rootobj.setHasTestCase(false);
         rootobj.setWindowShown(false);
         rootobj.hasQuit = false;
diff --git a/src/quick/items/qquickwindow.cpp b/src/quick/items/qquickwindow.cpp
index f1cfdf8..890474a 100644
--- a/src/quick/items/qquickwindow.cpp
+++ b/src/quick/items/qquickwindow.cpp
@@ -1093,14 +1093,6 @@ QQuickItem *QQuickWindow::mouseGrabberItem() const
 }
 
 
-/*!
-    \qmlproperty color QtQuick.Window2::Window::color
-
-    The background color for the window.
-
-    Setting this property is more efficient than using a separate Rectangle.
-*/
-
 bool QQuickWindowPrivate::clearHover()
 {
     Q_Q(QQuickWindow);
@@ -2759,6 +2751,14 @@ QSGTexture *QQuickWindow::createTextureFromId(uint id, const QSize &size, Create
 }
 
 /*!
+    \qmlproperty color QtQuick.Window2::Window::color
+
+    The background color for the window.
+
+    Setting this property is more efficient than using a separate Rectangle.
+*/
+
+/*!
     \property QQuickWindow::color
     \brief The color used to clear the OpenGL context.
 
@@ -2783,7 +2783,26 @@ QColor QQuickWindow::color() const
     return d_func()->clearColor;
 }
 
+/*!
+    \qmlproperty string QtQuick.Window2::Window::title
+
+    The window's title in the windowing system.
 
+    The window title might appear in the title area of the window decorations,
+    depending on the windowing system and the window flags. It might also
+    be used by the windowing system to identify the window in other contexts,
+    such as in the task switcher.
+ */
+
+/*!
+    \qmlproperty string QtQuick.Window2::Window::modality
+
+    The modality of the window.
+
+    A modal window prevents other windows from receiving input events.
+    Possible values are Qt.NonModal (the default), Qt.WindowModal,
+    and Qt.ApplicationModal.
+ */
 
 #include "moc_qquickwindow.cpp"
 
diff --git a/tests/auto/quick/qquickanimatedimage/tst_qquickanimatedimage.cpp b/tests/auto/quick/qquickanimatedimage/tst_qquickanimatedimage.cpp
index 63dbfec..1f8297d 100644
--- a/tests/auto/quick/qquickanimatedimage/tst_qquickanimatedimage.cpp
+++ b/tests/auto/quick/qquickanimatedimage/tst_qquickanimatedimage.cpp
@@ -152,7 +152,7 @@ void tst_qquickanimatedimage::mirror_running()
 
     QQuickView window;
     window.setSource(testFileUrl("hearts.qml"));
-    window.requestActivateWindow();
+    window.requestActivate();
     window.show();
     QTest::qWaitForWindowActive(&window);
 
diff --git a/tests/auto/quick/qquickanimatedsprite/tst_qquickanimatedsprite.cpp b/tests/auto/quick/qquickanimatedsprite/tst_qquickanimatedsprite.cpp
index 5ad2b6e..3139547 100644
--- a/tests/auto/quick/qquickanimatedsprite/tst_qquickanimatedsprite.cpp
+++ b/tests/auto/quick/qquickanimatedsprite/tst_qquickanimatedsprite.cpp
@@ -93,7 +93,7 @@ void tst_qquickanimatedsprite::test_frameChangedSignal()
 
     window->setSource(testFileUrl("frameChange.qml"));
     window->show();
-    window->requestActivateWindow();
+    window->requestActivate();
     QVERIFY(QTest::qWaitForWindowActive(window));
 
     QVERIFY(window->rootObject());
diff --git a/tests/auto/quick/qquickapplication/tst_qquickapplication.cpp b/tests/auto/quick/qquickapplication/tst_qquickapplication.cpp
index 7c07a16..6fc6810 100644
--- a/tests/auto/quick/qquickapplication/tst_qquickapplication.cpp
+++ b/tests/auto/quick/qquickapplication/tst_qquickapplication.cpp
@@ -89,7 +89,7 @@ void tst_qquickapplication::active()
 
     // active
     window.show();
-    window.requestActivateWindow();
+    window.requestActivate();
     QTest::qWaitForWindowActive(&window);
     QVERIFY(QGuiApplication::focusWindow() == &window);
     QVERIFY(item->property("active").toBool());
diff --git a/tests/auto/quick/qquickflickable/tst_qquickflickable.cpp b/tests/auto/quick/qquickflickable/tst_qquickflickable.cpp
index 7f5802a..703e291 100644
--- a/tests/auto/quick/qquickflickable/tst_qquickflickable.cpp
+++ b/tests/auto/quick/qquickflickable/tst_qquickflickable.cpp
@@ -207,7 +207,7 @@ void tst_qquickflickable::rebound()
     QQuickView *window = new QQuickView;
     window->setSource(testFileUrl("rebound.qml"));
     window->show();
-    window->requestActivateWindow();
+    window->requestActivate();
     QVERIFY(window->rootObject() != 0);
 
     QQuickFlickable *flickable = qobject_cast<QQuickFlickable*>(window->rootObject());
@@ -369,7 +369,7 @@ void tst_qquickflickable::nestedPressDelay()
     QQuickView *window = new QQuickView;
     window->setSource(testFileUrl("nestedPressDelay.qml"));
     window->show();
-    window->requestActivateWindow();
+    window->requestActivate();
     QVERIFY(window->rootObject() != 0);
 
     QQuickFlickable *outer = qobject_cast<QQuickFlickable*>(window->rootObject());
@@ -497,7 +497,7 @@ void tst_qquickflickable::wheel()
     QQuickView *window = new QQuickView;
     window->setSource(testFileUrl("wheel.qml"));
     window->show();
-    window->requestActivateWindow();
+    window->requestActivate();
     QVERIFY(window->rootObject() != 0);
 
     QQuickFlickable *flick = window->rootObject()->findChild<QQuickFlickable*>("flick");
@@ -565,7 +565,7 @@ void tst_qquickflickable::movingAndFlicking()
     QQuickView *window = new QQuickView;
     window->setSource(testFileUrl("flickable03.qml"));
     window->show();
-    window->requestActivateWindow();
+    window->requestActivate();
     QTest::qWaitForWindowActive(window);
     QVERIFY(window->rootObject() != 0);
 
@@ -725,7 +725,7 @@ void tst_qquickflickable::movingAndDragging()
     QQuickView *window = new QQuickView;
     window->setSource(testFileUrl("flickable03.qml"));
     window->show();
-    window->requestActivateWindow();
+    window->requestActivate();
     QVERIFY(QTest::qWaitForWindowExposed(window));
     QVERIFY(window->rootObject() != 0);
 
@@ -892,7 +892,7 @@ void tst_qquickflickable::flickOnRelease()
     QQuickView *window = new QQuickView;
     window->setSource(testFileUrl("flickable03.qml"));
     window->show();
-    window->requestActivateWindow();
+    window->requestActivate();
     QVERIFY(QTest::qWaitForWindowExposed(window));
     QVERIFY(window->rootObject() != 0);
 
@@ -929,7 +929,7 @@ void tst_qquickflickable::pressWhileFlicking()
     QQuickView *window = new QQuickView;
     window->setSource(testFileUrl("flickable03.qml"));
     window->show();
-    window->requestActivateWindow();
+    window->requestActivate();
     QVERIFY(QTest::qWaitForWindowExposed(window));
     QVERIFY(window->rootObject() != 0);
 
@@ -982,7 +982,7 @@ void tst_qquickflickable::disabled()
     QQuickView *window = new QQuickView;
     window->setSource(testFileUrl("disabled.qml"));
     window->show();
-    window->requestActivateWindow();
+    window->requestActivate();
     QVERIFY(window->rootObject() != 0);
 
     QQuickFlickable *flick = window->rootObject()->findChild<QQuickFlickable*>("flickable");
@@ -1012,7 +1012,7 @@ void tst_qquickflickable::flickVelocity()
     QQuickView *window = new QQuickView;
     window->setSource(testFileUrl("flickable03.qml"));
     window->show();
-    window->requestActivateWindow();
+    window->requestActivate();
     QVERIFY(window->rootObject() != 0);
 
     QQuickFlickable *flickable = qobject_cast<QQuickFlickable*>(window->rootObject());
@@ -1115,7 +1115,7 @@ void tst_qquickflickable::cancelOnMouseGrab()
     QQuickView *window = new QQuickView;
     window->setSource(testFileUrl("cancel.qml"));
     window->show();
-    window->requestActivateWindow();
+    window->requestActivate();
     QVERIFY(window->rootObject() != 0);
 
     QQuickFlickable *flickable = qobject_cast<QQuickFlickable*>(window->rootObject());
@@ -1151,7 +1151,7 @@ void tst_qquickflickable::clickAndDragWhenTransformed()
     QQuickView *view = new QQuickView;
     view->setSource(testFileUrl("transformedFlickable.qml"));
     view->show();
-    view->requestActivateWindow();
+    view->requestActivate();
     QVERIFY(QTest::qWaitForWindowExposed(view));
     QVERIFY(view->rootObject() != 0);
 
diff --git a/tests/auto/quick/qquickfocusscope/tst_qquickfocusscope.cpp b/tests/auto/quick/qquickfocusscope/tst_qquickfocusscope.cpp
index a614bbb..3f839b4 100644
--- a/tests/auto/quick/qquickfocusscope/tst_qquickfocusscope.cpp
+++ b/tests/auto/quick/qquickfocusscope/tst_qquickfocusscope.cpp
@@ -86,7 +86,7 @@ void tst_qquickfocusscope::basic()
     QVERIFY(item3 != 0);
 
     view->show();
-    view->requestActivateWindow();
+    view->requestActivate();
 
     QTest::qWaitForWindowActive(view);
     QTRY_VERIFY(view == qGuiApp->focusWindow());
@@ -131,7 +131,7 @@ void tst_qquickfocusscope::nested()
     QVERIFY(item5 != 0);
 
     view->show();
-    view->requestActivateWindow();
+    view->requestActivate();
 
     QTest::qWaitForWindowActive(view);
     QTRY_VERIFY(view == qGuiApp->focusWindow());
@@ -159,7 +159,7 @@ void tst_qquickfocusscope::noFocus()
     QVERIFY(item3 != 0);
 
     view->show();
-    view->requestActivateWindow();
+    view->requestActivate();
     QVERIFY(QTest::qWaitForWindowActive(view));
     QVERIFY(view == qGuiApp->focusWindow());
 
@@ -198,7 +198,7 @@ void tst_qquickfocusscope::textEdit()
     QVERIFY(item3 != 0);
 
     view->show();
-    view->requestActivateWindow();
+    view->requestActivate();
 
     QTest::qWaitForWindowActive(view);
 
@@ -252,7 +252,7 @@ void tst_qquickfocusscope::forceFocus()
     QVERIFY(item5 != 0);
 
     view->show();
-    view->requestActivateWindow();
+    view->requestActivate();
     QTest::qWaitForWindowActive(view);
     QTRY_VERIFY(view == qGuiApp->focusWindow());
 
@@ -289,7 +289,7 @@ void tst_qquickfocusscope::noParentFocus()
     QVERIFY(view->rootObject());
 
     view->show();
-    view->requestActivateWindow();
+    view->requestActivate();
     QTest::qWaitForWindowActive(view);
     QTRY_VERIFY(view == qGuiApp->focusWindow());
 
@@ -317,7 +317,7 @@ void tst_qquickfocusscope::signalEmission()
     QVERIFY(item4 != 0);
 
     view->show();
-    view->requestActivateWindow();
+    view->requestActivate();
 
     QTest::qWaitForWindowActive(view);
     QTRY_VERIFY(view == qGuiApp->focusWindow());
@@ -365,7 +365,7 @@ void tst_qquickfocusscope::qtBug13380()
 
     view->show();
     QVERIFY(view->rootObject());
-    view->requestActivateWindow();
+    view->requestActivate();
     qApp->processEvents();
 
     QVERIFY(QTest::qWaitForWindowExposed(view));
@@ -385,7 +385,7 @@ void tst_qquickfocusscope::forceActiveFocus()
     view->setSource(testFileUrl("forceActiveFocus.qml"));
 
     view->show();
-    view->requestActivateWindow();
+    view->requestActivate();
     QVERIFY(QTest::qWaitForWindowExposed(view));
     QTRY_VERIFY(view == qGuiApp->focusWindow());
 
@@ -538,7 +538,7 @@ void tst_qquickfocusscope::canvasFocus()
     QCOMPARE(item2->hasActiveFocus(), false);
 
     view->show();
-    view->requestActivateWindow();
+    view->requestActivate();
 
     QVERIFY(QTest::qWaitForWindowActive(view));
     QVERIFY(view == qGuiApp->focusWindow());
@@ -565,7 +565,7 @@ void tst_qquickfocusscope::canvasFocus()
 
     //    view->hide(); // seemingly doesn't remove focus, so have an another view steal it.
     alternateView.show();
-    alternateView.requestActivateWindow();
+    alternateView.requestActivate();
     QVERIFY(QTest::qWaitForWindowActive(&alternateView));
     QVERIFY(QGuiApplication::focusWindow() == &alternateView);
 
@@ -611,7 +611,7 @@ void tst_qquickfocusscope::canvasFocus()
 
     // give the window focus, and item2 will get active focus
     view->show();
-    view->requestActivateWindow();
+    view->requestActivate();
     QVERIFY(QTest::qWaitForWindowActive(view));
     QVERIFY(QGuiApplication::focusWindow() == view);
 
diff --git a/tests/auto/quick/qquickfontloader/tst_qquickfontloader.cpp b/tests/auto/quick/qquickfontloader/tst_qquickfontloader.cpp
index d822f8e..5246b8c 100644
--- a/tests/auto/quick/qquickfontloader/tst_qquickfontloader.cpp
+++ b/tests/auto/quick/qquickfontloader/tst_qquickfontloader.cpp
@@ -229,7 +229,7 @@ void tst_qquickfontloader::changeFontSourceViaState()
 {
     QQuickView window(testFileUrl("qtbug-20268.qml"));
     window.show();
-    window.requestActivateWindow();
+    window.requestActivate();
     QVERIFY(QTest::qWaitForWindowActive(&window));
     QCOMPARE(&window, qGuiApp->focusWindow());
 
diff --git a/tests/auto/quick/qquickgridview/tst_qquickgridview.cpp b/tests/auto/quick/qquickgridview/tst_qquickgridview.cpp
index 72c3f71..cdb17b3 100644
--- a/tests/auto/quick/qquickgridview/tst_qquickgridview.cpp
+++ b/tests/auto/quick/qquickgridview/tst_qquickgridview.cpp
@@ -1965,7 +1965,7 @@ void tst_QQuickGridView::keyNavigation()
     gridview->setVerticalLayoutDirection(verticalLayoutDirection);
     QTRY_COMPARE(QQuickItemPrivate::get(gridview)->polishScheduled, false);
 
-    window->requestActivateWindow();
+    window->requestActivate();
     QTest::qWaitForWindowActive(window);
     QTRY_VERIFY(qGuiApp->focusWindow() == window);
     QCOMPARE(gridview->currentIndex(), 0);
@@ -4035,7 +4035,7 @@ void tst_QQuickGridView::columnCount()
     QQuickView window;
     window.setSource(testFileUrl("gridview4.qml"));
     window.show();
-    window.requestActivateWindow();
+    window.requestActivate();
     QVERIFY(QTest::qWaitForWindowActive(&window));
 
     QQuickGridView *view = qobject_cast<QQuickGridView*>(window.rootObject());
diff --git a/tests/auto/quick/qquickimage/tst_qquickimage.cpp b/tests/auto/quick/qquickimage/tst_qquickimage.cpp
index 0e1b192..38c9bb3 100644
--- a/tests/auto/quick/qquickimage/tst_qquickimage.cpp
+++ b/tests/auto/quick/qquickimage/tst_qquickimage.cpp
@@ -313,7 +313,7 @@ void tst_qquickimage::mirror()
         obj->setFillMode(fillMode);
         obj->setProperty("mirror", true);
         window->show();
-        window->requestActivateWindow();
+        window->requestActivate();
         QVERIFY(QTest::qWaitForWindowActive(window));
 
         QImage screenshot = window->grabWindow();
@@ -498,7 +498,7 @@ void tst_qquickimage::tiling_QTBUG_6716()
 
     QQuickView view(testFileUrl(source));
     view.show();
-    view.requestActivateWindow();
+    view.requestActivate();
     QVERIFY(QTest::qWaitForWindowActive(&view));
 
     QQuickImage *tiling = findItem<QQuickImage>(view.rootObject(), "tiling");
diff --git a/tests/auto/quick/qquickitem/tst_qquickitem.cpp b/tests/auto/quick/qquickitem/tst_qquickitem.cpp
index 1050308..0cdf95c 100644
--- a/tests/auto/quick/qquickitem/tst_qquickitem.cpp
+++ b/tests/auto/quick/qquickitem/tst_qquickitem.cpp
@@ -176,7 +176,7 @@ private:
 
     void ensureFocus(QWindow *w) {
         w->show();
-        w->requestActivateWindow();
+        w->requestActivate();
         QTest::qWaitForWindowActive(w);
     }
 };
diff --git a/tests/auto/quick/qquickitem2/tst_qquickitem.cpp b/tests/auto/quick/qquickitem2/tst_qquickitem.cpp
index 8b445e3..e605bb4 100644
--- a/tests/auto/quick/qquickitem2/tst_qquickitem.cpp
+++ b/tests/auto/quick/qquickitem2/tst_qquickitem.cpp
@@ -286,7 +286,7 @@ void tst_QQuickItem::keys()
 
     window->setSource(testFileUrl("keystest.qml"));
     window->show();
-    window->requestActivateWindow();
+    window->requestActivate();
     QVERIFY(QTest::qWaitForWindowActive(window));
     QVERIFY(QGuiApplication::focusWindow() == window);
 
@@ -414,7 +414,7 @@ void tst_QQuickItem::keysProcessingOrder()
 
     window->setSource(testFileUrl("keyspriority.qml"));
     window->show();
-    window->requestActivateWindow();
+    window->requestActivate();
     QVERIFY(QTest::qWaitForWindowActive(window));
     QVERIFY(QGuiApplication::focusWindow() == window);
 
@@ -472,7 +472,7 @@ void tst_QQuickItem::keysim()
 
     window->setSource(testFileUrl("keysim.qml"));
     window->show();
-    window->requestActivateWindow();
+    window->requestActivate();
     QVERIFY(QTest::qWaitForWindowActive(window));
     QVERIFY(QGuiApplication::focusWindow() == window);
 
@@ -657,7 +657,7 @@ void tst_QQuickItem::keyNavigation()
 
     window->setSource(testFileUrl("keynavigationtest.qml"));
     window->show();
-    window->requestActivateWindow();
+    window->requestActivate();
     QVERIFY(QTest::qWaitForWindowActive(window));
     QVERIFY(QGuiApplication::focusWindow() == window);
 
@@ -734,7 +734,7 @@ void tst_QQuickItem::keyNavigation_RightToLeft()
 
     window->setSource(testFileUrl("keynavigationtest.qml"));
     window->show();
-    window->requestActivateWindow();
+    window->requestActivate();
     QVERIFY(QTest::qWaitForWindowActive(window));
     QVERIFY(QGuiApplication::focusWindow() == window);
 
@@ -789,7 +789,7 @@ void tst_QQuickItem::keyNavigation_skipNotVisible()
 
     window->setSource(testFileUrl("keynavigationtest.qml"));
     window->show();
-    window->requestActivateWindow();
+    window->requestActivate();
     QVERIFY(QTest::qWaitForWindowActive(window));
     QVERIFY(QGuiApplication::focusWindow() == window);
 
@@ -864,7 +864,7 @@ void tst_QQuickItem::keyNavigation_implicitSetting()
 
     window->setSource(testFileUrl("keynavigationtest_implicit.qml"));
     window->show();
-    window->requestActivateWindow();
+    window->requestActivate();
     QVERIFY(QTest::qWaitForWindowActive(window));
     QVERIFY(QGuiApplication::focusWindow() == window);
 
@@ -1259,7 +1259,7 @@ void tst_QQuickItem::propertyChanges()
     window->setBaseSize(QSize(300, 300));
     window->setSource(testFileUrl("propertychanges.qml"));
     window->show();
-    window->requestActivateWindow();
+    window->requestActivate();
     QVERIFY(QTest::qWaitForWindowActive(window));
     QVERIFY(QGuiApplication::focusWindow() == window);
 
@@ -1671,7 +1671,7 @@ void tst_QQuickItem::contains()
     window->setBaseSize(QSize(400, 400));
     window->setSource(testFileUrl("hollowTestItem.qml"));
     window->show();
-    window->requestActivateWindow();
+    window->requestActivate();
     QVERIFY(QTest::qWaitForWindowActive(window));
     QVERIFY(QGuiApplication::focusWindow() == window);
 
diff --git a/tests/auto/quick/qquicklistview/tst_qquicklistview.cpp b/tests/auto/quick/qquicklistview/tst_qquicklistview.cpp
index 6f4c251..3bb4998 100644
--- a/tests/auto/quick/qquicklistview/tst_qquicklistview.cpp
+++ b/tests/auto/quick/qquicklistview/tst_qquicklistview.cpp
@@ -2179,7 +2179,7 @@ void tst_QQuickListView::sectionsDelegate_headerVisibility()
     window->rootContext()->setContextProperty("testModel", &model);
     window->setSource(testFileUrl("listview-sections_delegate.qml"));
     window->show();
-    window->requestActivateWindow();
+    window->requestActivate();
     QTest::qWaitForWindowActive(window);
 
     QQuickListView *listview = findItem<QQuickListView>(window->rootObject(), "list");
@@ -2669,7 +2669,7 @@ void tst_QQuickListView::keyNavigation()
     listview->setVerticalLayoutDirection(verticalLayoutDirection);
     QTRY_COMPARE(QQuickItemPrivate::get(listview)->polishScheduled, false);
 
-    window->requestActivateWindow();
+    window->requestActivate();
     QTest::qWaitForWindowActive(window);
     QTRY_VERIFY(qGuiApp->focusWindow() == window);
 
diff --git a/tests/auto/quick/qquickmousearea/tst_qquickmousearea.cpp b/tests/auto/quick/qquickmousearea/tst_qquickmousearea.cpp
index 12bd6c1..a4e93d5 100644
--- a/tests/auto/quick/qquickmousearea/tst_qquickmousearea.cpp
+++ b/tests/auto/quick/qquickmousearea/tst_qquickmousearea.cpp
@@ -129,7 +129,7 @@ void tst_QQuickMouseArea::dragProperties()
 
     window->setSource(testFileUrl("dragproperties.qml"));
     window->show();
-    window->requestActivateWindow();
+    window->requestActivate();
     QVERIFY(window->rootObject() != 0);
 
     QQuickMouseArea *mouseRegion = window->rootObject()->findChild<QQuickMouseArea*>("mouseregion");
@@ -215,7 +215,7 @@ void tst_QQuickMouseArea::resetDrag()
     window->rootContext()->setContextProperty("haveTarget", QVariant(true));
     window->setSource(testFileUrl("dragreset.qml"));
     window->show();
-    window->requestActivateWindow();
+    window->requestActivate();
     QVERIFY(window->rootObject() != 0);
 
     QQuickMouseArea *mouseRegion = window->rootObject()->findChild<QQuickMouseArea*>("mouseregion");
@@ -247,7 +247,7 @@ void tst_QQuickMouseArea::dragging()
 
     window->setSource(testFileUrl("dragging.qml"));
     window->show();
-    window->requestActivateWindow();
+    window->requestActivate();
     QTest::qWait(20);
     QVERIFY(window->rootObject() != 0);
 
@@ -302,7 +302,7 @@ void tst_QQuickMouseArea::invalidDrag()
 
     window->setSource(testFileUrl("dragging.qml"));
     window->show();
-    window->requestActivateWindow();
+    window->requestActivate();
     QTest::qWait(20);
     QVERIFY(window->rootObject() != 0);
 
@@ -354,7 +354,7 @@ void tst_QQuickMouseArea::setDragOnPressed()
 
     window->setSource(testFileUrl("setDragOnPressed.qml"));
     window->show();
-    window->requestActivateWindow();
+    window->requestActivate();
     QTest::qWait(20);
     QVERIFY(window->rootObject() != 0);
 
@@ -409,7 +409,7 @@ void tst_QQuickMouseArea::updateMouseAreaPosOnClick()
     QQuickView *window = createView();
     window->setSource(testFileUrl("updateMousePosOnClick.qml"));
     window->show();
-    window->requestActivateWindow();
+    window->requestActivate();
     QVERIFY(window->rootObject() != 0);
 
     QQuickMouseArea *mouseRegion = window->rootObject()->findChild<QQuickMouseArea*>("mouseregion");
@@ -438,7 +438,7 @@ void tst_QQuickMouseArea::updateMouseAreaPosOnResize()
     QQuickView *window = createView();
     window->setSource(testFileUrl("updateMousePosOnResize.qml"));
     window->show();
-    window->requestActivateWindow();
+    window->requestActivate();
     QVERIFY(window->rootObject() != 0);
 
     QQuickMouseArea *mouseRegion = window->rootObject()->findChild<QQuickMouseArea*>("mouseregion");
@@ -475,7 +475,7 @@ void tst_QQuickMouseArea::noOnClickedWithPressAndHold()
         QQuickView *window = createView();
         window->setSource(testFileUrl("clickandhold.qml"));
         window->show();
-        window->requestActivateWindow();
+        window->requestActivate();
         QVERIFY(window->rootObject() != 0);
 
         QMouseEvent pressEvent(QEvent::MouseButtonPress, QPoint(100, 100), Qt::LeftButton, Qt::LeftButton, 0);
@@ -500,7 +500,7 @@ void tst_QQuickMouseArea::noOnClickedWithPressAndHold()
         QQuickView *window = createView();
         window->setSource(testFileUrl("noclickandhold.qml"));
         window->show();
-        window->requestActivateWindow();
+        window->requestActivate();
         QVERIFY(window->rootObject() != 0);
 
         QMouseEvent pressEvent(QEvent::MouseButtonPress, QPoint(100, 100), Qt::LeftButton, Qt::LeftButton, 0);
@@ -524,7 +524,7 @@ void tst_QQuickMouseArea::onMousePressRejected()
     QQuickView *window = createView();
     window->setSource(testFileUrl("rejectEvent.qml"));
     window->show();
-    window->requestActivateWindow();
+    window->requestActivate();
     QVERIFY(window->rootObject() != 0);
     QVERIFY(window->rootObject()->property("enabled").toBool());
 
@@ -561,7 +561,7 @@ void tst_QQuickMouseArea::pressedCanceledOnWindowDeactivate()
     QQuickView *window = createView();
     window->setSource(testFileUrl("pressedCanceled.qml"));
     window->show();
-    window->requestActivateWindow();
+    window->requestActivate();
     QVERIFY(window->rootObject() != 0);
     QVERIFY(!window->rootObject()->property("pressed").toBool());
     QVERIFY(!window->rootObject()->property("canceled").toBool());
@@ -610,7 +610,7 @@ void tst_QQuickMouseArea::doubleClick()
     QQuickView *window = createView();
     window->setSource(testFileUrl("doubleclick.qml"));
     window->show();
-    window->requestActivateWindow();
+    window->requestActivate();
     QVERIFY(window->rootObject() != 0);
 
     QQuickMouseArea *mouseArea = window->rootObject()->findChild<QQuickMouseArea *>("mousearea");
@@ -648,7 +648,7 @@ void tst_QQuickMouseArea::clickTwice()
     QQuickView *window = createView();
     window->setSource(testFileUrl("clicktwice.qml"));
     window->show();
-    window->requestActivateWindow();
+    window->requestActivate();
     QVERIFY(window->rootObject() != 0);
 
     QQuickMouseArea *mouseArea = window->rootObject()->findChild<QQuickMouseArea *>("mousearea");
@@ -685,7 +685,7 @@ void tst_QQuickMouseArea::invalidClick()
     QQuickView *window = createView();
     window->setSource(testFileUrl("doubleclick.qml"));
     window->show();
-    window->requestActivateWindow();
+    window->requestActivate();
     QVERIFY(window->rootObject() != 0);
 
     QQuickMouseArea *mouseArea = window->rootObject()->findChild<QQuickMouseArea *>("mousearea");
@@ -719,7 +719,7 @@ void tst_QQuickMouseArea::pressedOrdering()
     QQuickView *window = createView();
     window->setSource(testFileUrl("pressedOrdering.qml"));
     window->show();
-    window->requestActivateWindow();
+    window->requestActivate();
     QVERIFY(window->rootObject() != 0);
 
     QCOMPARE(window->rootObject()->property("value").toString(), QLatin1String("base"));
@@ -747,7 +747,7 @@ void tst_QQuickMouseArea::preventStealing()
 
     window->setSource(testFileUrl("preventstealing.qml"));
     window->show();
-    window->requestActivateWindow();
+    window->requestActivate();
     QVERIFY(window->rootObject() != 0);
 
     QQuickFlickable *flickable = qobject_cast<QQuickFlickable*>(window->rootObject());
@@ -811,7 +811,7 @@ void tst_QQuickMouseArea::clickThrough()
     QQuickView *window = createView();
     window->setSource(testFileUrl("clickThrough.qml"));
     window->show();
-    window->requestActivateWindow();
+    window->requestActivate();
     QVERIFY(window->rootObject() != 0);
 
     QTest::mousePress(window, Qt::LeftButton, 0, QPoint(100,100));
@@ -846,7 +846,7 @@ void tst_QQuickMouseArea::clickThrough()
     window = createView();
     window->setSource(testFileUrl("clickThrough2.qml"));
     window->show();
-    window->requestActivateWindow();
+    window->requestActivate();
     QVERIFY(window->rootObject() != 0);
 
     QTest::mousePress(window, Qt::LeftButton, 0, QPoint(100,100));
@@ -1005,7 +1005,7 @@ void tst_QQuickMouseArea::disableAfterPress()
     QQuickView *window = createView();
     window->setSource(testFileUrl("dragging.qml"));
     window->show();
-    window->requestActivateWindow();
+    window->requestActivate();
     QTest::qWait(20);
     QVERIFY(window->rootObject() != 0);
 
@@ -1155,7 +1155,7 @@ void tst_QQuickMouseArea::transformedMouseArea()
     QQuickView *window = createView();
     window->setSource(testFileUrl("transformedMouseArea.qml"));
     window->show();
-    window->requestActivateWindow();
+    window->requestActivate();
     QVERIFY(window->rootObject() != 0);
 
     QQuickMouseArea *mouseArea = window->rootObject()->findChild<QQuickMouseArea *>("mouseArea");
@@ -1273,7 +1273,7 @@ void tst_QQuickMouseArea::pressedMultipleButtons()
     QQuickView *view = createView();
     view->setSource(testFileUrl("simple.qml"));
     view->show();
-    view->requestActivateWindow();
+    view->requestActivate();
     QVERIFY(view->rootObject() != 0);
 
     QQuickMouseArea *mouseArea = view->rootObject()->findChild<QQuickMouseArea *>("mousearea");
@@ -1313,7 +1313,7 @@ void tst_QQuickMouseArea::changeAxis()
 
     view->setSource(testFileUrl("changeAxis.qml"));
     view->show();
-    view->requestActivateWindow();
+    view->requestActivate();
     QTRY_VERIFY(view->rootObject() != 0);
 
     QQuickMouseArea *mouseRegion = view->rootObject()->findChild<QQuickMouseArea*>("mouseregion");
diff --git a/tests/auto/quick/qquickmultipointtoucharea/tst_qquickmultipointtoucharea.cpp b/tests/auto/quick/qquickmultipointtoucharea/tst_qquickmultipointtoucharea.cpp
index 29c0e59..5a39698 100644
--- a/tests/auto/quick/qquickmultipointtoucharea/tst_qquickmultipointtoucharea.cpp
+++ b/tests/auto/quick/qquickmultipointtoucharea/tst_qquickmultipointtoucharea.cpp
@@ -851,7 +851,7 @@ QQuickView *tst_QQuickMultiPointTouchArea::createAndShowView(const QString &file
     QQuickView *window = new QQuickView(0);
     window->setSource(testFileUrl(file));
     window->show();
-    window->requestActivateWindow();
+    window->requestActivate();
     QTest::qWaitForWindowActive(window);
 
     return window;
diff --git a/tests/auto/quick/qquickpathview/tst_qquickpathview.cpp b/tests/auto/quick/qquickpathview/tst_qquickpathview.cpp
index 9695af6..f36849a 100644
--- a/tests/auto/quick/qquickpathview/tst_qquickpathview.cpp
+++ b/tests/auto/quick/qquickpathview/tst_qquickpathview.cpp
@@ -1335,7 +1335,7 @@ void tst_QQuickPathView::package()
     QVERIFY(window);
     window->setSource(testFileUrl("pathview_package.qml"));
     window->show();
-    window->requestActivateWindow();
+    window->requestActivate();
     QVERIFY(QTest::qWaitForWindowActive(window));
 
     QQuickPathView *pathView = window->rootObject()->findChild<QQuickPathView*>("photoPathView");
@@ -1452,7 +1452,7 @@ void tst_QQuickPathView::mouseDrag()
     QQuickView *window = createView();
     window->setSource(testFileUrl("dragpath.qml"));
     window->show();
-    window->requestActivateWindow();
+    window->requestActivate();
     QVERIFY(QTest::qWaitForWindowActive(window));
     QCOMPARE(window, qGuiApp->focusWindow());
 
@@ -1547,7 +1547,7 @@ void tst_QQuickPathView::changePreferredHighlight()
     window->setGeometry(0,0,400,200);
     window->setSource(testFileUrl("dragpath.qml"));
     window->show();
-    window->requestActivateWindow();
+    window->requestActivate();
     QVERIFY(QTest::qWaitForWindowActive(window));
     QCOMPARE(window, qGuiApp->focusWindow());
 
@@ -1741,7 +1741,7 @@ void tst_QQuickPathView::cancelDrag()
     QQuickView *window = createView();
     window->setSource(testFileUrl("dragpath.qml"));
     window->show();
-    window->requestActivateWindow();
+    window->requestActivate();
     QVERIFY(QTest::qWaitForWindowActive(window));
     QCOMPARE(window, qGuiApp->focusWindow());
 
@@ -1787,7 +1787,7 @@ void tst_QQuickPathView::maximumFlickVelocity()
     QQuickView *window = createView();
     window->setSource(testFileUrl("dragpath.qml"));
     window->show();
-    window->requestActivateWindow();
+    window->requestActivate();
     QVERIFY(QTest::qWaitForWindowActive(window));
     QCOMPARE(window, qGuiApp->focusWindow());
 
@@ -1873,7 +1873,7 @@ void tst_QQuickPathView::snapOneItem()
     QQuickView *window = createView();
     window->setSource(testFileUrl("panels.qml"));
     window->show();
-    window->requestActivateWindow();
+    window->requestActivate();
     QVERIFY(QTest::qWaitForWindowActive(window));
     QCOMPARE(window, qGuiApp->focusWindow());
 
@@ -1927,7 +1927,7 @@ void tst_QQuickPathView::positionViewAtIndex()
     QQuickView *window = createView();
     window->setSource(testFileUrl("pathview3.qml"));
     window->show();
-    window->requestActivateWindow();
+    window->requestActivate();
     QVERIFY(QTest::qWaitForWindowActive(window));
     QCOMPARE(window, qGuiApp->focusWindow());
 
@@ -1991,7 +1991,7 @@ void tst_QQuickPathView::indexAt_itemAt()
     QQuickView *window = createView();
     window->setSource(testFileUrl("pathview3.qml"));
     window->show();
-    window->requestActivateWindow();
+    window->requestActivate();
     QVERIFY(QTest::qWaitForWindowActive(window));
     QCOMPARE(window, qGuiApp->focusWindow());
 
diff --git a/tests/auto/quick/qquickpincharea/tst_qquickpincharea.cpp b/tests/auto/quick/qquickpincharea/tst_qquickpincharea.cpp
index 29c65e0..b314706 100644
--- a/tests/auto/quick/qquickpincharea/tst_qquickpincharea.cpp
+++ b/tests/auto/quick/qquickpincharea/tst_qquickpincharea.cpp
@@ -87,7 +87,7 @@ void tst_QQuickPinchArea::pinchProperties()
     QQuickView *window = createView();
     window->setSource(testFileUrl("pinchproperties.qml"));
     window->show();
-    window->requestActivateWindow();
+    window->requestActivate();
     QVERIFY(window->rootObject() != 0);
 
     QQuickPinchArea *pinchArea = window->rootObject()->findChild<QQuickPinchArea*>("pincharea");
@@ -213,7 +213,7 @@ void tst_QQuickPinchArea::scale()
     QQuickView *window = createView();
     window->setSource(testFileUrl("pinchproperties.qml"));
     window->show();
-    window->requestActivateWindow();
+    window->requestActivate();
     QVERIFY(QTest::qWaitForWindowActive(window));
     QVERIFY(window->rootObject() != 0);
     qApp->processEvents();
@@ -276,7 +276,7 @@ void tst_QQuickPinchArea::pan()
     QQuickView *window = createView();
     window->setSource(testFileUrl("pinchproperties.qml"));
     window->show();
-    window->requestActivateWindow();
+    window->requestActivate();
     QVERIFY(QTest::qWaitForWindowActive(window));
     QVERIFY(window->rootObject() != 0);
     qApp->processEvents();
@@ -337,7 +337,7 @@ void tst_QQuickPinchArea::retouch()
     QQuickView *window = createView();
     window->setSource(testFileUrl("pinchproperties.qml"));
     window->show();
-    window->requestActivateWindow();
+    window->requestActivate();
     QVERIFY(QTest::qWaitForWindowActive(window));
     QVERIFY(window->rootObject() != 0);
     qApp->processEvents();
@@ -451,7 +451,7 @@ void tst_QQuickPinchArea::transformedPinchArea()
     QQuickView *view = createView();
     view->setSource(testFileUrl("transformedPinchArea.qml"));
     view->show();
-    view->requestActivateWindow();
+    view->requestActivate();
     QVERIFY(QTest::qWaitForWindowActive(view));
     QVERIFY(view->rootObject() != 0);
     qApp->processEvents();
diff --git a/tests/auto/quick/qquickstates/tst_qquickstates.cpp b/tests/auto/quick/qquickstates/tst_qquickstates.cpp
index ce39065..4df6576 100644
--- a/tests/auto/quick/qquickstates/tst_qquickstates.cpp
+++ b/tests/auto/quick/qquickstates/tst_qquickstates.cpp
@@ -1009,7 +1009,7 @@ void tst_qquickstates::anchorRewindBug()
     view->setSource(testFileUrl("anchorRewindBug.qml"));
 
     view->show();
-    view->requestActivateWindow();
+    view->requestActivate();
 
     QVERIFY(QTest::qWaitForWindowActive(view));
 
diff --git a/tests/auto/quick/qquicktext/tst_qquicktext.cpp b/tests/auto/quick/qquicktext/tst_qquicktext.cpp
index 718a581..c5ffe7d 100644
--- a/tests/auto/quick/qquicktext/tst_qquicktext.cpp
+++ b/tests/auto/quick/qquicktext/tst_qquicktext.cpp
@@ -856,7 +856,7 @@ void tst_qquicktext::hAlignImplicitWidth()
 {
     QQuickView view(testFileUrl("hAlignImplicitWidth.qml"));
     view.show();
-    view.requestActivateWindow();
+    view.requestActivate();
     QVERIFY(QTest::qWaitForWindowActive(&view));
 
     QQuickText *text = view.rootObject()->findChild<QQuickText*>("textItem");
@@ -1309,7 +1309,7 @@ void tst_qquicktext::underline()
 {
     QQuickView view(testFileUrl("underline.qml"));
     view.show();
-    view.requestActivateWindow();
+    view.requestActivate();
     QVERIFY(QTest::qWaitForWindowActive(&view));
     QQuickText *textObject = view.rootObject()->findChild<QQuickText*>("myText");
     QVERIFY(textObject != 0);
@@ -1322,7 +1322,7 @@ void tst_qquicktext::overline()
 {
     QQuickView view(testFileUrl("overline.qml"));
     view.show();
-    view.requestActivateWindow();
+    view.requestActivate();
     QVERIFY(QTest::qWaitForWindowActive(&view));
     QQuickText *textObject = view.rootObject()->findChild<QQuickText*>("myText");
     QVERIFY(textObject != 0);
@@ -1335,7 +1335,7 @@ void tst_qquicktext::strikeout()
 {
     QQuickView view(testFileUrl("strikeout.qml"));
     view.show();
-    view.requestActivateWindow();
+    view.requestActivate();
     QVERIFY(QTest::qWaitForWindowActive(&view));
     QQuickText *textObject = view.rootObject()->findChild<QQuickText*>("myText");
     QVERIFY(textObject != 0);
@@ -1894,7 +1894,7 @@ void tst_qquicktext::embeddedImages()
 
     QQuickView *view = new QQuickView(qmlfile);
     view->show();
-    view->requestActivateWindow();
+    view->requestActivate();
     QVERIFY(QTest::qWaitForWindowActive(view));
     QQuickText *textObject = qobject_cast<QQuickText*>(view->rootObject());
 
@@ -2506,7 +2506,7 @@ void tst_qquicktext::lineLaidOutRelayout()
     QQuickView *window = createView(testFile("lineLayoutRelayout.qml"));
 
     window->show();
-    window->requestActivateWindow();
+    window->requestActivate();
     QVERIFY(QTest::qWaitForWindowActive(window));
 
     QQuickText *myText = window->rootObject()->findChild<QQuickText*>("myText");
@@ -3611,7 +3611,7 @@ void tst_qquicktext::htmlLists()
     textObject->setText(text);
 
     view->show();
-    view->requestActivateWindow();
+    view->requestActivate();
     QVERIFY(QTest::qWaitForWindowActive(view));
 
     QCOMPARE(textPrivate->extra->doc->lineCount(), nbLines);
diff --git a/tests/auto/quick/qquicktextedit/tst_qquicktextedit.cpp b/tests/auto/quick/qquicktextedit/tst_qquicktextedit.cpp
index a5a5efb..3966fff 100644
--- a/tests/auto/quick/qquicktextedit/tst_qquicktextedit.cpp
+++ b/tests/auto/quick/qquicktextedit/tst_qquicktextedit.cpp
@@ -730,7 +730,7 @@ void tst_qquicktextedit::hAlign_RightToLeft()
     QCOMPARE(textEdit->hAlign(), QQuickTextEdit::AlignLeft);
     QVERIFY(textEdit->positionToRectangle(0).x() < window.width()/2);
 
-    window.requestActivateWindow();
+    window.requestActivate();
     QTest::qWaitForWindowActive(&window);
     QVERIFY(textEdit->hasActiveFocus());
 
@@ -1124,7 +1124,7 @@ void tst_qquicktextedit::persistentSelection()
 {
     QQuickView window(testFileUrl("persistentSelection.qml"));
     window.show();
-    window.requestActivateWindow();
+    window.requestActivate();
     QTest::qWaitForWindowActive(&window);
 
     QQuickTextEdit *edit = qobject_cast<QQuickTextEdit *>(window.rootObject());
@@ -1193,7 +1193,7 @@ void tst_qquicktextedit::focusOnPress()
     window.resize(100, 50);
     textEditObject->setParentItem(window.contentItem());
     window.show();
-    window.requestActivateWindow();
+    window.requestActivate();
     QTest::qWaitForWindowActive(&window);
 
     QCOMPARE(textEditObject->hasFocus(), false);
@@ -1393,7 +1393,7 @@ void tst_qquicktextedit::keySelection()
 {
     QQuickView window(testFileUrl("navigation.qml"));
     window.show();
-    window.requestActivateWindow();
+    window.requestActivate();
     QTest::qWaitForWindowActive(&window);
 
     QVERIFY(window.rootObject() != 0);
@@ -1850,7 +1850,7 @@ void tst_qquicktextedit::mouseSelection()
     QQuickView window(QUrl::fromLocalFile(qmlfile));
 
     window.show();
-    window.requestActivateWindow();
+    window.requestActivate();
     QTest::qWaitForWindowActive(&window);
 
     QVERIFY(window.rootObject() != 0);
@@ -1892,7 +1892,7 @@ void tst_qquicktextedit::dragMouseSelection()
     QQuickView window(QUrl::fromLocalFile(qmlfile));
 
     window.show();
-    window.requestActivateWindow();
+    window.requestActivate();
     QTest::qWaitForWindowActive(&window);
 
     QVERIFY(window.rootObject() != 0);
@@ -1945,7 +1945,7 @@ void tst_qquicktextedit::mouseSelectionMode()
     QQuickView window(QUrl::fromLocalFile(qmlfile));
 
     window.show();
-    window.requestActivateWindow();
+    window.requestActivate();
     QTest::qWaitForWindowActive(&window);
 
     QVERIFY(window.rootObject() != 0);
@@ -2046,7 +2046,7 @@ void tst_qquicktextedit::inputMethodHints()
 {
     QQuickView window(testFileUrl("inputmethodhints.qml"));
     window.show();
-    window.requestActivateWindow();
+    window.requestActivate();
 
     QVERIFY(window.rootObject() != 0);
     QQuickTextEdit *textEditObject = qobject_cast<QQuickTextEdit *>(window.rootObject());
@@ -2086,7 +2086,7 @@ void tst_qquicktextedit::positionAt()
     QQuickView window(testFileUrl("positionAt.qml"));
     QVERIFY(window.rootObject() != 0);
     window.show();
-    window.requestActivateWindow();
+    window.requestActivate();
     QTest::qWaitForWindowActive(&window);
 
     QQuickTextEdit *texteditObject = qobject_cast<QQuickTextEdit *>(window.rootObject());
@@ -2175,7 +2175,7 @@ void tst_qquicktextedit::linkActivated()
     QQuickView window(testFileUrl("linkActivated.qml"));
     QVERIFY(window.rootObject() != 0);
     window.show();
-    window.requestActivateWindow();
+    window.requestActivate();
     QTest::qWaitForWindowActive(&window);
 
     QQuickTextEdit *texteditObject = qobject_cast<QQuickTextEdit *>(window.rootObject());
@@ -2220,7 +2220,7 @@ void tst_qquicktextedit::cursorDelegate()
     QFETCH(QUrl, source);
     QQuickView view(source);
     view.show();
-    view.requestActivateWindow();
+    view.requestActivate();
     QQuickTextEdit *textEditObject = view.rootObject()->findChild<QQuickTextEdit*>("textEditObject");
     QVERIFY(textEditObject != 0);
     // Delegate creation is deferred until focus in or cursor visibility is forced.
@@ -2335,7 +2335,7 @@ void tst_qquicktextedit::remoteCursorDelegate()
     view.rootContext()->setContextProperty("contextDelegate", &component);
     view.setSource(testFileUrl("cursorTestRemote.qml"));
     view.show();
-    view.requestActivateWindow();
+    view.requestActivate();
     QQuickTextEdit *textEditObject = view.rootObject()->findChild<QQuickTextEdit*>("textEditObject");
     QVERIFY(textEditObject != 0);
 
@@ -2363,7 +2363,7 @@ void tst_qquicktextedit::cursorVisible()
 
     QQuickView view(testFileUrl("cursorVisible.qml"));
     view.show();
-    view.requestActivateWindow();
+    view.requestActivate();
     QTest::qWaitForWindowActive(&view);
     QCOMPARE(&view, qGuiApp->focusWindow());
 
@@ -2395,13 +2395,13 @@ void tst_qquicktextedit::cursorVisible()
 
     QWindow alternateView;
     alternateView.show();
-    alternateView.requestActivateWindow();
+    alternateView.requestActivate();
     QTest::qWaitForWindowActive(&alternateView);
 
     QCOMPARE(edit.isCursorVisible(), false);
     QCOMPARE(spy.count(), 6);
 
-    view.requestActivateWindow();
+    view.requestActivate();
     QTest::qWaitForWindowActive(&view);
     QCOMPARE(edit.isCursorVisible(), true);
     QCOMPARE(spy.count(), 7);
@@ -2471,7 +2471,7 @@ void tst_qquicktextedit::delegateLoading()
 
     QQuickView view(QUrl(QLatin1String(SERVER_ADDR "/") + qmlfile));
     view.show();
-    view.requestActivateWindow();
+    view.requestActivate();
 
     if (!error.isEmpty()) {
         QTest::ignoreMessage(QtWarningMsg, error.toUtf8());
@@ -2508,7 +2508,7 @@ void tst_qquicktextedit::navigation()
 {
     QQuickView window(testFileUrl("navigation.qml"));
     window.show();
-    window.requestActivateWindow();
+    window.requestActivate();
 
     QVERIFY(window.rootObject() != 0);
 
@@ -2660,7 +2660,7 @@ void tst_qquicktextedit::middleClickPaste()
     QQuickView window(testFileUrl("mouseselection_true.qml"));
 
     window.show();
-    window.requestActivateWindow();
+    window.requestActivate();
     QTest::qWaitForWindowActive(&window);
 
     QVERIFY(window.rootObject() != 0);
@@ -2698,7 +2698,7 @@ void tst_qquicktextedit::readOnly()
 {
     QQuickView window(testFileUrl("readOnly.qml"));
     window.show();
-    window.requestActivateWindow();
+    window.requestActivate();
 
     QVERIFY(window.rootObject() != 0);
 
@@ -2734,7 +2734,7 @@ void tst_qquicktextedit::textInput()
 {
     QQuickView view(testFileUrl("inputMethodEvent.qml"));
     view.show();
-    view.requestActivateWindow();
+    view.requestActivate();
     QTest::qWaitForWindowActive(&view);
     QQuickTextEdit *edit = qobject_cast<QQuickTextEdit *>(view.rootObject());
     QVERIFY(edit);
@@ -2770,7 +2770,7 @@ void tst_qquicktextedit::inputMethodUpdate()
 
     QQuickView view(testFileUrl("inputMethodEvent.qml"));
     view.show();
-    view.requestActivateWindow();
+    view.requestActivate();
     QTest::qWaitForWindowActive(&view);
     QQuickTextEdit *edit = qobject_cast<QQuickTextEdit *>(view.rootObject());
     QVERIFY(edit);
@@ -2860,7 +2860,7 @@ void tst_qquicktextedit::openInputPanel()
 
     QQuickView view(testFileUrl("openInputPanel.qml"));
     view.show();
-    view.requestActivateWindow();
+    view.requestActivate();
     QTest::qWaitForWindowActive(&view);
 
     QQuickTextEdit *edit = qobject_cast<QQuickTextEdit *>(view.rootObject());
@@ -3199,7 +3199,7 @@ void tst_qquicktextedit::preeditCursorRectangle()
 
     QQuickView view(testFileUrl("inputMethodEvent.qml"));
     view.show();
-    view.requestActivateWindow();
+    view.requestActivate();
     QTest::qWaitForWindowActive(&view);
 
     QQuickTextEdit *edit = qobject_cast<QQuickTextEdit *>(view.rootObject());
@@ -3282,7 +3282,7 @@ void tst_qquicktextedit::inputMethodComposing()
 
     QQuickView view(testFileUrl("inputContext.qml"));
     view.show();
-    view.requestActivateWindow();
+    view.requestActivate();
     QTest::qWaitForWindowActive(&view);
 
     QQuickTextEdit *edit = qobject_cast<QQuickTextEdit *>(view.rootObject());
@@ -3397,7 +3397,7 @@ void tst_qquicktextedit::cursorRectangleSize()
     QVERIFY(textEdit != 0);
     textEdit->setFocus(true);
     window->show();
-    window->requestActivateWindow();
+    window->requestActivate();
     QTest::qWaitForWindowActive(window);
 
     QInputMethodQueryEvent event(Qt::ImCursorRectangle);
@@ -4255,7 +4255,7 @@ void tst_qquicktextedit::keySequence()
     QQuickWindow window;
     textEdit->setParentItem(window.contentItem());
     window.show();
-    window.requestActivateWindow();
+    window.requestActivate();
     QTest::qWaitForWindowActive(&window);
 
     QVERIFY(textEdit->hasActiveFocus());
@@ -4418,7 +4418,7 @@ void tst_qquicktextedit::undo()
     QQuickWindow window;
     textEdit->setParentItem(window.contentItem());
     window.show();
-    window.requestActivateWindow();
+    window.requestActivate();
     QTest::qWaitForWindowActive(&window);
 
     QVERIFY(textEdit->hasActiveFocus());
@@ -4504,7 +4504,7 @@ void tst_qquicktextedit::redo()
     QQuickWindow window;
     textEdit->setParentItem(window.contentItem());
     window.show();
-    window.requestActivateWindow();
+    window.requestActivate();
     QTest::qWaitForWindowActive(&window);
     QVERIFY(textEdit->hasActiveFocus());
 
@@ -4728,7 +4728,7 @@ void tst_qquicktextedit::undo_keypressevents()
     QQuickWindow window;
     textEdit->setParentItem(window.contentItem());
     window.show();
-    window.requestActivateWindow();
+    window.requestActivate();
     QTest::qWaitForWindowActive(&window);
     QVERIFY(textEdit->hasActiveFocus());
 
@@ -4817,7 +4817,7 @@ void tst_qquicktextedit::emptytags_QTBUG_22058()
     QVERIFY(window.rootObject() != 0);
 
     window.show();
-    window.requestActivateWindow();
+    window.requestActivate();
     QTest::qWaitForWindowActive(&window);
     QQuickTextEdit *input = qobject_cast<QQuickTextEdit *>(qvariant_cast<QObject *>(window.rootObject()->property("inputField")));
     QVERIFY(input->hasActiveFocus());
diff --git a/tests/auto/quick/qquicktextinput/tst_qquicktextinput.cpp b/tests/auto/quick/qquicktextinput/tst_qquicktextinput.cpp
index 249755b..49e72e4 100644
--- a/tests/auto/quick/qquicktextinput/tst_qquicktextinput.cpp
+++ b/tests/auto/quick/qquicktextinput/tst_qquicktextinput.cpp
@@ -741,7 +741,7 @@ void tst_qquicktextinput::persistentSelection()
 {
     QQuickView window(testFileUrl("persistentSelection.qml"));
     window.show();
-    window.requestActivateWindow();
+    window.requestActivate();
     QTest::qWaitForWindowActive(&window);
 
     QQuickTextInput *input = qobject_cast<QQuickTextInput *>(window.rootObject());
@@ -1253,7 +1253,7 @@ void tst_qquicktextinput::dragMouseSelection()
     QQuickView window(QUrl::fromLocalFile(qmlfile));
 
     window.show();
-    window.requestActivateWindow();
+    window.requestActivate();
     QTest::qWaitForWindowActive(&window);
 
     QVERIFY(window.rootObject() != 0);
@@ -1316,7 +1316,7 @@ void tst_qquicktextinput::mouseSelectionMode()
     QQuickView window(QUrl::fromLocalFile(qmlfile));
 
     window.show();
-    window.requestActivateWindow();
+    window.requestActivate();
     QTest::qWaitForWindowActive(&window);
 
     QVERIFY(window.rootObject() != 0);
@@ -1497,7 +1497,7 @@ void tst_qquicktextinput::horizontalAlignment_RightToLeft()
     QCOMPARE(textInput->hAlign(), QQuickTextInput::AlignLeft);
     QCOMPARE(textInput->boundingRect().left(), qreal(0));
 
-    window.requestActivateWindow();
+    window.requestActivate();
     QTest::qWaitForWindowActive(&window);
     QVERIFY(textInput->hasActiveFocus());
 
@@ -1760,7 +1760,7 @@ void tst_qquicktextinput::positionAt()
     QQuickView window(testFileUrl("positionAt.qml"));
     QVERIFY(window.rootObject() != 0);
     window.show();
-    window.requestActivateWindow();
+    window.requestActivate();
     QTest::qWaitForWindowActive(&window);
 
     QQuickTextInput *textinputObject = qobject_cast<QQuickTextInput *>(window.rootObject());
@@ -1850,7 +1850,7 @@ void tst_qquicktextinput::maxLength()
     QQuickView window(testFileUrl("maxLength.qml"));
     QVERIFY(window.rootObject() != 0);
     window.show();
-    window.requestActivateWindow();
+    window.requestActivate();
     QTest::qWaitForWindowActive(&window);
 
     QQuickTextInput *textinputObject = qobject_cast<QQuickTextInput *>(window.rootObject());
@@ -1880,7 +1880,7 @@ void tst_qquicktextinput::masks()
     //QString componentStr = "import QtQuick 2.0\nTextInput {  inputMask: 'HHHHhhhh'; }";
     QQuickView window(testFileUrl("masks.qml"));
     window.show();
-    window.requestActivateWindow();
+    window.requestActivate();
     QVERIFY(window.rootObject() != 0);
     QQuickTextInput *textinputObject = qobject_cast<QQuickTextInput *>(window.rootObject());
     QVERIFY(textinputObject != 0);
@@ -1911,7 +1911,7 @@ void tst_qquicktextinput::validators()
 
     QQuickView window(testFileUrl("validators.qml"));
     window.show();
-    window.requestActivateWindow();
+    window.requestActivate();
     QTest::qWaitForWindowActive(&window);
 
     QVERIFY(window.rootObject() != 0);
@@ -2238,7 +2238,7 @@ void tst_qquicktextinput::inputMethods()
 {
     QQuickView window(testFileUrl("inputmethods.qml"));
     window.show();
-    window.requestActivateWindow();
+    window.requestActivate();
     QTest::qWaitForWindowActive(&window);
 
     // test input method hints
@@ -2310,7 +2310,7 @@ void tst_qquicktextinput::navigation()
 {
     QQuickView window(testFileUrl("navigation.qml"));
     window.show();
-    window.requestActivateWindow();
+    window.requestActivate();
 
     QVERIFY(window.rootObject() != 0);
 
@@ -2359,7 +2359,7 @@ void tst_qquicktextinput::navigation_RTL()
 {
     QQuickView window(testFileUrl("navigation.qml"));
     window.show();
-    window.requestActivateWindow();
+    window.requestActivate();
 
     QVERIFY(window.rootObject() != 0);
 
@@ -2505,7 +2505,7 @@ void tst_qquicktextinput::copyAndPasteKeySequence()
     QQuickWindow window;
     textInput->setParentItem(window.contentItem());
     window.show();
-    window.requestActivateWindow();
+    window.requestActivate();
     QTest::qWaitForWindowActive(&window);
 
     // copy and paste
@@ -2599,7 +2599,7 @@ void tst_qquicktextinput::middleClickPaste()
     QQuickView window(testFileUrl("mouseselection_true.qml"));
 
     window.show();
-    window.requestActivateWindow();
+    window.requestActivate();
     QTest::qWaitForWindowActive(&window);
 
     QVERIFY(window.rootObject() != 0);
@@ -2664,7 +2664,7 @@ void tst_qquicktextinput::cursorDelegate()
     QFETCH(QUrl, source);
     QQuickView view(source);
     view.show();
-    view.requestActivateWindow();
+    view.requestActivate();
     QQuickTextInput *textInputObject = view.rootObject()->findChild<QQuickTextInput*>("textInputObject");
     QVERIFY(textInputObject != 0);
     // Delegate is created on demand, and so won't be available immediately.  Focus in or
@@ -2783,7 +2783,7 @@ void tst_qquicktextinput::remoteCursorDelegate()
     view.rootContext()->setContextProperty("contextDelegate", &component);
     view.setSource(testFileUrl("cursorTestRemote.qml"));
     view.show();
-    view.requestActivateWindow();
+    view.requestActivate();
     QQuickTextInput *textInputObject = view.rootObject()->findChild<QQuickTextInput*>("textInputObject");
     QVERIFY(textInputObject != 0);
 
@@ -2811,7 +2811,7 @@ void tst_qquicktextinput::cursorVisible()
 
     QQuickView view(testFileUrl("cursorVisible.qml"));
     view.show();
-    view.requestActivateWindow();
+    view.requestActivate();
     QTest::qWaitForWindowActive(&view);
 
     QCOMPARE(input.isCursorVisible(), false);
@@ -2842,13 +2842,13 @@ void tst_qquicktextinput::cursorVisible()
 
     QQuickView alternateView;
     alternateView.show();
-    alternateView.requestActivateWindow();
+    alternateView.requestActivate();
     QTest::qWaitForWindowActive(&alternateView);
 
     QCOMPARE(input.isCursorVisible(), false);
     QCOMPARE(spy.count(), 6);
 
-    view.requestActivateWindow();
+    view.requestActivate();
     QTest::qWaitForWindowActive(&view);
     QCOMPARE(input.isCursorVisible(), true);
     QCOMPARE(spy.count(), 7);
@@ -3093,7 +3093,7 @@ void tst_qquicktextinput::readOnly()
 {
     QQuickView window(testFileUrl("readOnly.qml"));
     window.show();
-    window.requestActivateWindow();
+    window.requestActivate();
 
     QVERIFY(window.rootObject() != 0);
 
@@ -3120,7 +3120,7 @@ void tst_qquicktextinput::echoMode()
 {
     QQuickView window(testFileUrl("echoMode.qml"));
     window.show();
-    window.requestActivateWindow();
+    window.requestActivate();
     QTest::qWaitForWindowActive(&window);
 
     QVERIFY(window.rootObject() != 0);
@@ -3194,7 +3194,7 @@ void tst_qquicktextinput::passwordEchoDelay()
         QSKIP("No mask delay in use");
     QQuickView window(testFileUrl("echoMode.qml"));
     window.show();
-    window.requestActivateWindow();
+    window.requestActivate();
     QTest::qWaitForWindowActive(&window);
 
     QVERIFY(window.rootObject() != 0);
@@ -3300,7 +3300,7 @@ void tst_qquicktextinput::focusOnPress()
     window.resize(100, 50);
     textInputObject->setParentItem(window.contentItem());
     window.show();
-    window.requestActivateWindow();
+    window.requestActivate();
     QTest::qWaitForWindowActive(&window);
 
     QCOMPARE(textInputObject->hasFocus(), false);
@@ -3363,7 +3363,7 @@ void tst_qquicktextinput::openInputPanel()
 
     QQuickView view(testFileUrl("openInputPanel.qml"));
     view.show();
-    view.requestActivateWindow();
+    view.requestActivate();
     QTest::qWaitForWindowActive(&view);
 
     QQuickTextInput *input = qobject_cast<QQuickTextInput *>(view.rootObject());
@@ -3452,7 +3452,7 @@ void tst_qquicktextinput::setHAlignClearCache()
     input.setText("Hello world");
     input.setParentItem(view.contentItem());
     view.show();
-    view.requestActivateWindow();
+    view.requestActivate();
     QTest::qWaitForWindowActive(&view);
 #ifdef Q_OS_MAC
     QEXPECT_FAIL("", "QTBUG-23485", Abort);
@@ -3475,7 +3475,7 @@ void tst_qquicktextinput::focusOutClearSelection()
     input.componentComplete();
     input2.componentComplete();
     view.show();
-    view.requestActivateWindow();
+    view.requestActivate();
     QTest::qWaitForWindowActive(&view);
     QVERIFY(input.hasActiveFocus());
     input.select(2,5);
@@ -3545,7 +3545,7 @@ void tst_qquicktextinput::preeditAutoScroll()
 
     QQuickView view(testFileUrl("preeditAutoScroll.qml"));
     view.show();
-    view.requestActivateWindow();
+    view.requestActivate();
     QTest::qWaitForWindowActive(&view);
     QQuickTextInput *input = qobject_cast<QQuickTextInput *>(view.rootObject());
     QVERIFY(input);
@@ -3631,7 +3631,7 @@ void tst_qquicktextinput::preeditCursorRectangle()
 
     QQuickView view(testFileUrl("inputMethodEvent.qml"));
     view.show();
-    view.requestActivateWindow();
+    view.requestActivate();
     QTest::qWaitForWindowActive(&view);
     QQuickTextInput *input = qobject_cast<QQuickTextInput *>(view.rootObject());
     QVERIFY(input);
@@ -3714,7 +3714,7 @@ void tst_qquicktextinput::inputContextMouseHandler()
     input->setText("");
 
     view.show();
-    view.requestActivateWindow();
+    view.requestActivate();
     QTest::qWaitForWindowActive(&view);
 
     QTextLayout layout(text);
@@ -3750,7 +3750,7 @@ void tst_qquicktextinput::inputMethodComposing()
 
     QQuickView view(testFileUrl("inputContext.qml"));
     view.show();
-    view.requestActivateWindow();
+    view.requestActivate();
     QTest::qWaitForWindowActive(&view);
     QQuickTextInput *input = qobject_cast<QQuickTextInput *>(view.rootObject());
     QVERIFY(input);
@@ -3856,7 +3856,7 @@ void tst_qquicktextinput::inputMethodUpdate()
 
     QQuickView view(testFileUrl("inputContext.qml"));
     view.show();
-    view.requestActivateWindow();
+    view.requestActivate();
     QTest::qWaitForWindowActive(&view);
     QQuickTextInput *input = qobject_cast<QQuickTextInput *>(view.rootObject());
     QVERIFY(input);
@@ -3946,7 +3946,7 @@ void tst_qquicktextinput::cursorRectangleSize()
     QVERIFY(textInput != 0);
     textInput->setFocus(true);
     window->show();
-    window->requestActivateWindow();
+    window->requestActivate();
     QTest::qWaitForWindowActive(window);
     QVERIFY(textInput->hasActiveFocus());
 
@@ -3978,7 +3978,7 @@ void tst_qquicktextinput::tripleClickSelectsAll()
     QString qmlfile = testFile("positionAt.qml");
     QQuickView view(QUrl::fromLocalFile(qmlfile));
     view.show();
-    view.requestActivateWindow();
+    view.requestActivate();
     QTest::qWaitForWindowActive(&view);
 
     QQuickTextInput* input = qobject_cast<QQuickTextInput*>(view.rootObject());
@@ -4970,7 +4970,7 @@ void tst_qquicktextinput::keySequence()
     QQuickWindow window;
     textInput->setParentItem(window.contentItem());
     window.show();
-    window.requestActivateWindow();
+    window.requestActivate();
     QTest::qWaitForWindowActive(&window);
     QVERIFY(textInput->hasActiveFocus());
 
@@ -5131,7 +5131,7 @@ void tst_qquicktextinput::undo()
     QQuickWindow window;
     textInput->setParentItem(window.contentItem());
     window.show();
-    window.requestActivateWindow();
+    window.requestActivate();
     QTest::qWaitForWindowActive(&window);
     QVERIFY(textInput->hasActiveFocus());
 
@@ -5217,7 +5217,7 @@ void tst_qquicktextinput::redo()
     QQuickWindow window;
     textInput->setParentItem(window.contentItem());
     window.show();
-    window.requestActivateWindow();
+    window.requestActivate();
     QTest::qWaitForWindowActive(&window);
 
     QVERIFY(textInput->hasActiveFocus());
@@ -5549,7 +5549,7 @@ void tst_qquicktextinput::undo_keypressevents()
     QQuickWindow window;
     textInput->setParentItem(window.contentItem());
     window.show();
-    window.requestActivateWindow();
+    window.requestActivate();
     QTest::qWaitForWindowActive(&window);
     QVERIFY(textInput->hasActiveFocus());
 
@@ -5579,7 +5579,7 @@ void tst_qquicktextinput::backspaceSurrogatePairs()
     QQuickWindow window;
     textInput->setParentItem(window.contentItem());
     window.show();
-    window.requestActivateWindow();
+    window.requestActivate();
     QVERIFY(QTest::qWaitForWindowActive(&window));
     QCOMPARE(QGuiApplication::focusWindow(), &window);
 
@@ -5605,7 +5605,7 @@ void tst_qquicktextinput::QTBUG_19956()
 
     QQuickView window(testFileUrl(url));
     window.show();
-    window.requestActivateWindow();
+    window.requestActivate();
     QTest::qWaitForWindowActive(&window);
     QVERIFY(window.rootObject() != 0);
     QQuickTextInput *input = qobject_cast<QQuickTextInput*>(window.rootObject());
@@ -5644,7 +5644,7 @@ void tst_qquicktextinput::QTBUG_19956_regexp()
 
     QQuickView window(url);
     window.show();
-    window.requestActivateWindow();
+    window.requestActivate();
     QTest::qWaitForWindowActive(&window);
     QVERIFY(window.rootObject() != 0);
     QQuickTextInput *input = qobject_cast<QQuickTextInput*>(window.rootObject());
@@ -5956,7 +5956,7 @@ void tst_qquicktextinput::setInputMask()
         QQuickWindow window;
         textInput->setParentItem(window.contentItem());
         window.show();
-        window.requestActivateWindow();
+        window.requestActivate();
         QTest::qWaitForWindowActive(&window);
         QVERIFY(textInput->hasActiveFocus());
 
@@ -6086,7 +6086,7 @@ void tst_qquicktextinput::keypress_inputMask()
     QQuickWindow window;
     textInput->setParentItem(window.contentItem());
     window.show();
-    window.requestActivateWindow();
+    window.requestActivate();
     QTest::qWaitForWindowActive(&window);
     QVERIFY(textInput->hasActiveFocus());
 
diff --git a/tests/auto/quick/touchmouse/tst_touchmouse.cpp b/tests/auto/quick/touchmouse/tst_touchmouse.cpp
index 3293890..4a681e2 100644
--- a/tests/auto/quick/touchmouse/tst_touchmouse.cpp
+++ b/tests/auto/quick/touchmouse/tst_touchmouse.cpp
@@ -193,7 +193,7 @@ void tst_TouchMouse::simpleTouchEvent()
 
     window->setSource(testFileUrl("singleitem.qml"));
     window->show();
-    window->requestActivateWindow();
+    window->requestActivate();
     QVERIFY(QTest::qWaitForWindowExposed(window));
     QVERIFY(window->rootObject() != 0);
 
@@ -308,7 +308,7 @@ void tst_TouchMouse::eventFilter()
 
 //    window->setSource(testFileUrl("singleitem.qml"));
 //    window->show();
-//    window->requestActivateWindow();
+//    window->requestActivate();
 //    QVERIFY(window->rootObject() != 0);
 
 //    EventItem *eventItem1 = window->rootObject()->findChild<EventItem*>("eventItem1");
@@ -342,7 +342,7 @@ void tst_TouchMouse::mouse()
 
     window->setSource(testFileUrl("twoitems.qml"));
     window->show();
-    window->requestActivateWindow();
+    window->requestActivate();
     QVERIFY(window->rootObject() != 0);
 
     EventItem *eventItem1 = window->rootObject()->findChild<EventItem*>("eventItem1");
@@ -374,7 +374,7 @@ void tst_TouchMouse::touchOverMouse()
 
     window->setSource(testFileUrl("twoitems.qml"));
     window->show();
-    window->requestActivateWindow();
+    window->requestActivate();
     QVERIFY(window->rootObject() != 0);
 
     EventItem *eventItem1 = window->rootObject()->findChild<EventItem*>("eventItem1");
@@ -415,7 +415,7 @@ void tst_TouchMouse::mouseOverTouch()
 
     window->setSource(testFileUrl("twoitems.qml"));
     window->show();
-    window->requestActivateWindow();
+    window->requestActivate();
     QVERIFY(window->rootObject() != 0);
 
     EventItem *eventItem1 = window->rootObject()->findChild<EventItem*>("eventItem1");
@@ -459,7 +459,7 @@ void tst_TouchMouse::buttonOnFlickable()
 
     window->setSource(testFileUrl("buttononflickable.qml"));
     window->show();
-    window->requestActivateWindow();
+    window->requestActivate();
     QVERIFY(window->rootObject() != 0);
 
     QQuickFlickable *flickable = window->rootObject()->findChild<QQuickFlickable*>("flickable");
@@ -567,7 +567,7 @@ void tst_TouchMouse::buttonOnTouch()
     QQuickView *window = createView();
     window->setSource(testFileUrl("buttonontouch.qml"));
     window->show();
-    window->requestActivateWindow();
+    window->requestActivate();
     QVERIFY(window->rootObject() != 0);
 
     QQuickPinchArea *pinchArea = window->rootObject()->findChild<QQuickPinchArea*>("pincharea");
@@ -689,7 +689,7 @@ void tst_TouchMouse::pinchOnFlickable()
     QQuickView *window = createView();
     window->setSource(testFileUrl("pinchonflickable.qml"));
     window->show();
-    window->requestActivateWindow();
+    window->requestActivate();
     QVERIFY(window->rootObject() != 0);
 
     QQuickPinchArea *pinchArea = window->rootObject()->findChild<QQuickPinchArea*>("pincharea");
@@ -756,7 +756,7 @@ void tst_TouchMouse::flickableOnPinch()
     QQuickView *window = createView();
     window->setSource(testFileUrl("flickableonpinch.qml"));
     window->show();
-    window->requestActivateWindow();
+    window->requestActivate();
     QVERIFY(window->rootObject() != 0);
 
     QQuickPinchArea *pinchArea = window->rootObject()->findChild<QQuickPinchArea*>("pincharea");
@@ -822,7 +822,7 @@ void tst_TouchMouse::mouseOnFlickableOnPinch()
     QQuickView *window = createView();
     window->setSource(testFileUrl("mouseonflickableonpinch.qml"));
     window->show();
-    window->requestActivateWindow();
+    window->requestActivate();
     QVERIFY(window->rootObject() != 0);
 
     QQuickPinchArea *pinchArea = window->rootObject()->findChild<QQuickPinchArea*>("pincharea");
diff --git a/tools/easingcurveeditor/mainwindow.cpp b/tools/easingcurveeditor/mainwindow.cpp
index c0e04e6..546ecee 100644
--- a/tools/easingcurveeditor/mainwindow.cpp
+++ b/tools/easingcurveeditor/mainwindow.cpp
@@ -130,7 +130,7 @@ void MainWindow::resizeEvent(QResizeEvent *event)
 
 void MainWindow::initQml()
 {
-    quickView.setWindowFlags(Qt::FramelessWindowHint);
+    quickView.setFlags(Qt::FramelessWindowHint);
     quickView.rootContext()->setContextProperty(QLatin1String("editor"), m_splineEditor);
     quickView.setSource(QUrl("qrc:/preview.qml"));
     quickView.show();
diff --git a/tools/qmlscene/main.cpp b/tools/qmlscene/main.cpp
index a7f0eef..55925a0 100644
--- a/tools/qmlscene/main.cpp
+++ b/tools/qmlscene/main.cpp
@@ -476,7 +476,7 @@ int main(int argc, char ** argv)
                 if (contentItem) {
                     qxView = new QQuickView(&engine, NULL);
                     window = qxView;
-                    window->setWindowFlags(Qt::Window | Qt::WindowSystemMenuHint | Qt::WindowTitleHint | Qt::WindowMinMaxButtonsHint | Qt::WindowCloseButtonHint);
+                    window->setFlags(Qt::Window | Qt::WindowSystemMenuHint | Qt::WindowTitleHint | Qt::WindowMinMaxButtonsHint | Qt::WindowCloseButtonHint);
                     if (options.resizeViewToRootItem)
                         qxView->setResizeMode(QQuickView::SizeViewToRootObject);
                     else