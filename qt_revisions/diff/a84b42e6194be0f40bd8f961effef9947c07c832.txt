diff --git a/src/network/socket/qnativesocketengine_unix.cpp b/src/network/socket/qnativesocketengine_unix.cpp
index 295d396..7cd8e1b 100644
--- a/src/network/socket/qnativesocketengine_unix.cpp
+++ b/src/network/socket/qnativesocketengine_unix.cpp
@@ -321,7 +321,13 @@ bool QNativeSocketEnginePrivate::setOption(QNativeSocketEngine::SocketOption opt
     }
     case QNativeSocketEngine::AddressReusable:
 #if defined(SO_REUSEPORT)
-        n = SO_REUSEPORT;
+        // on OS X, SO_REUSEADDR isn't sufficient to allow multiple binds to the
+        // same port (which is useful for multicast UDP). SO_REUSEPORT is, but
+        // we most definitely do not want to use this for TCP. See QTBUG-6305.
+        if (socketType == QAbstractSocket::UdpSocket)
+            n = SO_REUSEPORT;
+        else
+            n = SO_REUSEADDR;
 #else
         n = SO_REUSEADDR;
 #endif
diff --git a/tests/auto/network/socket/qtcpserver/tst_qtcpserver.cpp b/tests/auto/network/socket/qtcpserver/tst_qtcpserver.cpp
index ac27a62..1f68608 100644
--- a/tests/auto/network/socket/qtcpserver/tst_qtcpserver.cpp
+++ b/tests/auto/network/socket/qtcpserver/tst_qtcpserver.cpp
@@ -115,6 +115,10 @@ private slots:
 
     void serverAddress_data();
     void serverAddress();
+
+    void qtbug6305_data() { serverAddress_data(); }
+    void qtbug6305();
+
 private:
 #ifndef QT_NO_BEARERMANAGEMENT
     QNetworkSession *networkSession;
@@ -828,10 +832,28 @@ void tst_QTcpServer::serverAddress()
     QFETCH(QHostAddress, listenAddress);
     QFETCH(QHostAddress, serverAddress);
     QTcpServer server;
+
+    // TODO: why does this QSKIP?
     if (!server.listen(listenAddress))
         QSKIP(qPrintable(server.errorString()));
     QCOMPARE(server.serverAddress(), serverAddress);
 }
 
+// on OS X, calling listen() multiple times would succeed each time, which is
+// most definitely not wanted.
+void tst_QTcpServer::qtbug6305()
+{
+    QFETCH_GLOBAL(bool, setProxy);
+    if (setProxy)
+        return;
+
+    QFETCH(QHostAddress, listenAddress);
+    QTcpServer server;
+    QVERIFY2(server.listen(listenAddress), qPrintable(server.errorString()));
+
+    QTcpServer server2;
+    QVERIFY(!server2.listen(listenAddress, server.serverPort())); // second listen should fail
+}
+
 QTEST_MAIN(tst_QTcpServer)
 #include "tst_qtcpserver.moc"