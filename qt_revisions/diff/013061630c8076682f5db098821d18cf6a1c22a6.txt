diff --git a/src/x11support/qx11info_x11.cpp b/src/x11support/qx11info_x11.cpp
index ebfb9db..4790c3f 100644
--- a/src/x11support/qx11info_x11.cpp
+++ b/src/x11support/qx11info_x11.cpp
@@ -184,8 +184,10 @@ int QX11Info::appScreen()
 */
 unsigned long QX11Info::appTime()
 {
-    // ### TODO implement
-    return 0L;
+    if (!qApp)
+        return 0;
+    QPlatformNativeInterface *native = qApp->platformNativeInterface();
+    return static_cast<xcb_timestamp_t>(reinterpret_cast<quintptr>(native->nativeResourceForIntegration("apptime")));
 }
 
 /*!
@@ -195,8 +197,10 @@ unsigned long QX11Info::appTime()
 */
 unsigned long QX11Info::appUserTime()
 {
-    // ### TODO implement
-    return 0L;
+    if (!qApp)
+        return 0;
+    QPlatformNativeInterface *native = qApp->platformNativeInterface();
+    return static_cast<xcb_timestamp_t>(reinterpret_cast<quintptr>(native->nativeResourceForIntegration("appusertime")));
 }
 
 /*!
@@ -206,8 +210,15 @@ unsigned long QX11Info::appUserTime()
 */
 void QX11Info::setAppTime(unsigned long time)
 {
-    // ### TODO implement
-    Q_UNUSED(time);
+    if (!qApp)
+        return;
+    QPlatformNativeInterface *native = qApp->platformNativeInterface();
+    typedef void (*SetAppTimeFunc)(xcb_timestamp_t);
+    SetAppTimeFunc func = reinterpret_cast<SetAppTimeFunc>(native->nativeResourceFunctionForIntegration("setapptime"));
+    if (func)
+        func(time);
+    else
+        qWarning("Internal error: QPA plugin doesn't implement setAppTime");
 }
 
 /*!
@@ -220,13 +231,12 @@ void QX11Info::setAppUserTime(unsigned long time)
     if (!qApp)
         return;
     QPlatformNativeInterface *native = qApp->platformNativeInterface();
-
-    QDesktopWidget *desktop = QApplication::desktop();
-    QWindow *window = desktop->windowHandle();
-
-    xcb_timestamp_t timestamp = uint32_t(time);
-    QMetaObject::invokeMethod(native, "updateNetWmUserTime", Qt::DirectConnection,
-                              Q_ARG(QWindow *,window), Q_ARG(xcb_timestamp_t, timestamp));
+    typedef void (*SetAppUserTimeFunc)(xcb_timestamp_t);
+    SetAppUserTimeFunc func = reinterpret_cast<SetAppUserTimeFunc>(native->nativeResourceFunctionForIntegration("setappusertime"));
+    if (func)
+        func(time);
+    else
+        qWarning("Internal error: QPA plugin doesn't implement setAppUserTime");
 }
 
 /*!
diff --git a/tests/auto/auto.pro b/tests/auto/auto.pro
new file mode 100644
index 0000000..127d6c6
--- /dev/null
+++ b/tests/auto/auto.pro
@@ -0,0 +1,3 @@
+TEMPLATE=subdirs
+SUBDIRS=\
+           qx11info
diff --git a/tests/auto/qx11info/qx11info.pro b/tests/auto/qx11info/qx11info.pro
new file mode 100644
index 0000000..2833705
--- /dev/null
+++ b/tests/auto/qx11info/qx11info.pro
@@ -0,0 +1,4 @@
+CONFIG += testcase
+TARGET = tst_qx11info
+QT += x11support widgets testlib
+SOURCES  += tst_qx11info.cpp
diff --git a/tests/auto/qx11info/tst_qx11info.cpp b/tests/auto/qx11info/tst_qx11info.cpp
new file mode 100644
index 0000000..115de70
--- /dev/null
+++ b/tests/auto/qx11info/tst_qx11info.cpp
@@ -0,0 +1,151 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
+** Copyright (C) 2012 David Faure <david.faure@kdab.com>
+** Contact: http://www.qt-project.org/legal
+**
+** This file is part of the test suite of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and Digia.  For licensing terms and
+** conditions see http://qt.digia.com/licensing.  For further information
+** use the contact form at http://qt.digia.com/contact-us.
+**
+** GNU Lesser General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU Lesser
+** General Public License version 2.1 as published by the Free Software
+** Foundation and appearing in the file LICENSE.LGPL included in the
+** packaging of this file.  Please review the following information to
+** ensure the GNU Lesser General Public License version 2.1 requirements
+** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** In addition, as a special exception, Digia gives you certain additional
+** rights.  These rights are described in the Digia Qt LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU
+** General Public License version 3.0 as published by the Free Software
+** Foundation and appearing in the file LICENSE.GPL included in the
+** packaging of this file.  Please review the following information to
+** ensure the GNU General Public License version 3.0 requirements will be
+** met: http://www.gnu.org/copyleft/gpl.html.
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+
+#include <QtTest/QtTest>
+
+#include <QApplication>
+#include <QX11Info>
+
+class tst_QX11Info : public QObject
+{
+    Q_OBJECT
+
+private slots:
+    void staticFunctionsBeforeQApplication();
+    void appTime();
+};
+
+void tst_QX11Info::staticFunctionsBeforeQApplication()
+{
+    QVERIFY(!QApplication::instance());
+
+    // none of these functions should crash if QApplication hasn't
+    // been constructed
+
+    Display *display = QX11Info::display();
+    QCOMPARE(display, (Display *)0);
+
+#if 0
+    const char *appClass = QX11Info::appClass();
+    QCOMPARE(appClass, (const char *)0);
+#endif
+    int appScreen = QX11Info::appScreen();
+    QCOMPARE(appScreen, 0);
+#if 0
+    int appDepth = QX11Info::appDepth();
+    QCOMPARE(appDepth, 32);
+    int appCells = QX11Info::appCells();
+    QCOMPARE(appCells, 0);
+    Qt::HANDLE appColormap = QX11Info::appColormap();
+    QCOMPARE(appColormap, static_cast<Qt::HANDLE>(0));
+    void *appVisual = QX11Info::appVisual();
+    QCOMPARE(appVisual, static_cast<void *>(0));
+#endif
+    Qt::HANDLE appRootWindow = QX11Info::appRootWindow();
+    QCOMPARE(appRootWindow, static_cast<Qt::HANDLE>(0));
+
+#if 0
+    bool appDefaultColormap = QX11Info::appDefaultColormap();
+    QCOMPARE(appDefaultColormap, true);
+    bool appDefaultVisual = QX11Info::appDefaultVisual();
+    QCOMPARE(appDefaultVisual, true);
+#endif
+
+    int appDpiX = QX11Info::appDpiX();
+    int appDpiY = QX11Info::appDpiY();
+    QCOMPARE(appDpiX, 75);
+    QCOMPARE(appDpiY, 75);
+
+#if 0
+    // the setAppDpi{X,Y} calls do nothing if QApplication hasn't been
+    // constructed
+    QX11Info::setAppDpiX(-1, 120);
+    QX11Info::setAppDpiY(-1, 120);
+    appDpiX = QX11Info::appDpiX();
+    appDpiY = QX11Info::appDpiY();
+    QCOMPARE(appDpiX, 75);
+    QCOMPARE(appDpiY, 75);
+#endif
+
+    unsigned long appTime = QX11Info::appTime();
+    unsigned long appUserTime = QX11Info::appUserTime();
+    QCOMPARE(appTime, 0ul);
+    QCOMPARE(appUserTime, 0ul);
+    // setApp*Time do nothing without QApplication
+    QX11Info::setAppTime(1234);
+    QX11Info::setAppUserTime(5678);
+    appTime = QX11Info::appTime();
+    appUserTime = QX11Info::appUserTime();
+    QCOMPARE(appTime, 0ul);
+    QCOMPARE(appTime, 0ul);
+}
+
+void tst_QX11Info::appTime()
+{
+    int argc = 0;
+    QApplication app(argc, 0);
+
+    // No X11 event received yet
+    QCOMPARE(QX11Info::appTime(), 0ul);
+    QCOMPARE(QX11Info::appUserTime(), 0ul);
+
+    // Trigger some X11 events
+    QWindow window;
+    window.show();
+    QTest::qWait(100);
+    QVERIFY(QX11Info::appTime() > 0);
+
+    unsigned long t0 = QX11Info::appTime();
+    unsigned long t1 = t0 + 1;
+    QX11Info::setAppTime(t1);
+    QCOMPARE(QX11Info::appTime(), t1);
+
+    unsigned long u0 = QX11Info::appUserTime();
+    unsigned long u1 = u0 + 1;
+    QX11Info::setAppUserTime(u1);
+    QCOMPARE(QX11Info::appUserTime(), u1);
+}
+
+QTEST_APPLESS_MAIN(tst_QX11Info)
+
+#include "tst_qx11info.moc"
diff --git a/tests/tests.pro b/tests/tests.pro
new file mode 100644
index 0000000..85e4f3a
--- /dev/null
+++ b/tests/tests.pro
@@ -0,0 +1,2 @@
+TEMPLATE = subdirs
+SUBDIRS +=  auto