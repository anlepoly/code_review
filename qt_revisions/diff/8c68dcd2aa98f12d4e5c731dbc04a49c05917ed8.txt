diff --git a/src/qml/qml.pro b/src/qml/qml.pro
index 283732a..acafb9f 100644
--- a/src/qml/qml.pro
+++ b/src/qml/qml.pro
@@ -3,7 +3,7 @@ load(qt_module)
 TARGET     = QtQml
 QPRO_PWD   = $$PWD
 
-CONFIG += module exceptions
+CONFIG += module
 MODULE_PRI += ../../modules/qt_qml.pri
 
 QT = core-private network v8-private
diff --git a/src/qml/qml/v8/qv8sequencewrapper_p_p.h b/src/qml/qml/v8/qv8sequencewrapper_p_p.h
index 4745b7e..cf20aa3 100644
--- a/src/qml/qml/v8/qv8sequencewrapper_p_p.h
+++ b/src/qml/qml/v8/qv8sequencewrapper_p_p.h
@@ -333,13 +333,7 @@ static QString convertUrlToString(QV8Engine *, const QUrl &v)
                     /* according to ECMA262r3 we need to insert */ \
                     /* undefined values increasing length to newLength. */ \
                     /* We cannot, so we insert default-values instead. */ \
-                    QT_TRY { \
-                        c.reserve(newCount); \
-                    } QT_CATCH (std::bad_alloc &exception) { \
-                        generateWarning(engine, QString(QLatin1String(exception.what()) \
-                                                + QLatin1String(" during length set"))); \
-                        return; /* failed; don't write back any result. */ \
-                    } \
+                    c.reserve(newCount); \
                     while (newCount > count++) { \
                         c.append(DefaultValue); \
                     } \
@@ -381,13 +375,7 @@ static QString convertUrlToString(QV8Engine *, const QUrl &v)
                 } else { \
                     /* according to ECMA262r3 we need to insert */ \
                     /* the value at the given index, increasing length to index+1. */ \
-                    QT_TRY { \
-                        c.reserve(signedIdx + 1); \
-                    } QT_CATCH (std::bad_alloc &exception) { \
-                        generateWarning(engine, QString(QLatin1String(exception.what()) \
-                                                + QLatin1String(" during indexed set"))); \
-                        return v8::Undefined(); /* failed; don't write back any result. */ \
-                    } \
+                    c.reserve(signedIdx + 1); \
                     while (signedIdx > count++) { \
                         c.append(DefaultValue); \
                     } \