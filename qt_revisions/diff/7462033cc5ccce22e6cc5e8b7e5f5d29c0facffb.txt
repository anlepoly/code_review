diff --git a/tests/auto/corelib/tools/qdate/tst_qdate.cpp b/tests/auto/corelib/tools/qdate/tst_qdate.cpp
index 258dbf8..1c8c515 100644
--- a/tests/auto/corelib/tools/qdate/tst_qdate.cpp
+++ b/tests/auto/corelib/tools/qdate/tst_qdate.cpp
@@ -80,12 +80,12 @@ private slots:
     void operator_gt();
     void operator_lt_eq();
     void operator_gt_eq();
-    void fromString_data();
-    void fromString();
-    void fromString_format_data();
-    void fromString_format();
-    void toString_format_data();
-    void toString_format();
+    void fromStringDateFormat_data();
+    void fromStringDateFormat();
+    void fromStringFormat_data();
+    void fromStringFormat();
+    void toStringFormat_data();
+    void toStringFormat();
     void isLeapYear();
     void yearsZeroToNinetyNine();
     void negativeYear() const;
@@ -100,6 +100,9 @@ private slots:
     void longMonthName() const;
     void standaloneLongMonthName() const;
     void roundtrip() const;
+private:
+    QDate defDate() const { return QDate(1900, 1, 1); }
+    QDate invalidDate() const { return QDate(); }
 };
 
 Q_DECLARE_METATYPE(QDate)
@@ -818,7 +821,7 @@ void tst_QDate::operator_gt_eq()
     QVERIFY( d1 >= d2 );
 }
 
-void tst_QDate::fromString_data()
+void tst_QDate::fromStringDateFormat_data()
 {
     // Since we can't define an element of Qt::DateFormat, d1 will be the date
     // expected when we have a TextDate, and d2 will be the date expected when
@@ -841,7 +844,7 @@ void tst_QDate::fromString_data()
     QTest::newRow( "data7" ) << QString("xxx Nov 25 -4713") << QString() << QDate(-4713, 11, 25);
 }
 
-void tst_QDate::fromString()
+void tst_QDate::fromStringDateFormat()
 {
     QFETCH( QString, str1 );
     QFETCH( QString, str2 );
@@ -852,31 +855,90 @@ void tst_QDate::fromString()
         QCOMPARE( QDate::fromString( str2, Qt::ISODate ), d1 );
 }
 
-void tst_QDate::fromString_format_data()
+void tst_QDate::fromStringFormat_data()
 {
     QTest::addColumn<QString>("string");
     QTest::addColumn<QString>("format");
-    QTest::addColumn<QDate>("date");
-
-    //year with yy is always 19xx for compatibility
-    QTest::newRow( "data0" ) << QString("21052006") << QString("ddMMyyyy") << QDate(2006,5,21);
-    QTest::newRow( "data1" ) << QString("210506") << QString("ddMMyy") << QDate(1906,5,21);
-    QTest::newRow( "data2" ) << QString("21/5/2006") << QString("d/M/yyyy") << QDate(2006,5,21);
-    QTest::newRow( "data3" ) << QString("21/5/06") << QString("d/M/yy") << QDate(1906,5,21);
-    QTest::newRow( "data4" ) << QString("20060521") << QString("yyyyMMdd") << QDate(2006,5,21);
-    QTest::newRow( "data5" ) << QString("060521") << QString("yyMMdd") << QDate(1906,5,21);
+    QTest::addColumn<QDate>("expected");
+
+    //get localized names
+    QString january = QDate::longMonthName(1);
+    QString february = QDate::longMonthName(2);
+    QString march = QDate::longMonthName(3);
+    QString august = QDate::longMonthName(8);
+    QString mon = QDate::shortDayName(1);
+    QString monday = QDate::longDayName(1);
+    QString tuesday = QDate::longDayName(2);
+    QString wednesday = QDate::longDayName(3);
+    QString thursday = QDate::longDayName(4);
+    QString friday = QDate::longDayName(5);
+    QString saturday = QDate::longDayName(6);
+    QString sunday = QDate::longDayName(7);
+
+    QTest::newRow("data0") << QString("") << QString("") << defDate();
+    QTest::newRow("data1") << QString(" ") << QString("") << invalidDate();
+    QTest::newRow("data2") << QString(" ") << QString(" ") << defDate();
+    QTest::newRow("data3") << QString("-%$%#") << QString("$*(#@") << invalidDate();
+    QTest::newRow("data4") << QString("d") << QString("'d'") << defDate();
+    QTest::newRow("data5") << QString("101010") << QString("dMyy") << QDate(1910, 10, 10);
+    QTest::newRow("data6") << QString("101010b") << QString("dMyy") << invalidDate();
+    QTest::newRow("data7") << january << QString("MMMM") << defDate();
+    QTest::newRow("data8") << QString("ball") << QString("balle") << invalidDate();
+    QTest::newRow("data9") << QString("balleh") << QString("balleh") << defDate();
+    QTest::newRow("data10") << QString("10.01.1") << QString("M.dd.d") << QDate(defDate().year(), 10, 1);
+    QTest::newRow("data11") << QString("-1.01.1") << QString("M.dd.d") << invalidDate();
+    QTest::newRow("data12") << QString("11010") << QString("dMMyy") << invalidDate();
+    QTest::newRow("data13") << QString("-2") << QString("d") << invalidDate();
+    QTest::newRow("data14") << QString("132") << QString("Md") << invalidDate();
+    QTest::newRow("data15") << february << QString("MMMM") << QDate(defDate().year(), 2, 1);
+
+    QString date = mon + " " + august + " 8 2005";
+    QTest::newRow("data16") << date << QString("ddd MMMM d yyyy") << QDate(2005, 8, 8);
+    QTest::newRow("data17") << QString("2000:00") << QString("yyyy:yy") << QDate(2000, 1, 1);
+    QTest::newRow("data18") << QString("1999:99") << QString("yyyy:yy") << QDate(1999, 1, 1);
+    QTest::newRow("data19") << QString("2099:99") << QString("yyyy:yy") << QDate(2099, 1, 1);
+    QTest::newRow("data20") << QString("2001:01") << QString("yyyy:yy") << QDate(2001, 1, 1);
+    QTest::newRow("data21") << QString("99") << QString("yy") << QDate(1999, 1, 1);
+    QTest::newRow("data22") << QString("01") << QString("yy") << QDate(1901, 1, 1);
+
+    QTest::newRow("data23") << monday << QString("dddd") << QDate(1900, 1, 1);
+    QTest::newRow("data24") << tuesday << QString("dddd") << QDate(1900, 1, 2);
+    QTest::newRow("data25") << wednesday << QString("dddd") << QDate(1900, 1, 3);
+    QTest::newRow("data26") << thursday << QString("dddd") << QDate(1900, 1, 4);
+    QTest::newRow("data27") << friday << QString("dddd") << QDate(1900, 1, 5);
+    QTest::newRow("data28") << saturday << QString("dddd") << QDate(1900, 1, 6);
+    QTest::newRow("data29") << sunday << QString("dddd") << QDate(1900, 1, 7);
+
+    QTest::newRow("data30") << monday + " 2006" << QString("dddd yyyy") << QDate(2006, 1, 2);
+    QTest::newRow("data31") << tuesday + " 2006" << QString("dddd yyyy") << QDate(2006, 1, 3);
+    QTest::newRow("data32") << wednesday + " 2006" << QString("dddd yyyy") << QDate(2006, 1, 4);
+    QTest::newRow("data33") << thursday + " 2006" << QString("dddd yyyy") << QDate(2006, 1, 5);
+    QTest::newRow("data34") << friday + " 2006" << QString("dddd yyyy") << QDate(2006, 1, 6);
+    QTest::newRow("data35") << saturday + " 2006" << QString("dddd yyyy") << QDate(2006, 1, 7);
+    QTest::newRow("data36") << sunday + " 2006" << QString("dddd yyyy") << QDate(2006, 1, 1);
+
+    QTest::newRow("data37") << tuesday + " 2007 " + march << QString("dddd yyyy MMMM") << QDate(2007, 3, 6);
+
+    QTest::newRow("data38") << QString("21052006") << QString("ddMMyyyy") << QDate(2006,5,21);
+    QTest::newRow("data39") << QString("210506") << QString("ddMMyy") << QDate(1906,5,21);
+    QTest::newRow("data40") << QString("21/5/2006") << QString("d/M/yyyy") << QDate(2006,5,21);
+    QTest::newRow("data41") << QString("21/5/06") << QString("d/M/yy") << QDate(1906,5,21);
+    QTest::newRow("data42") << QString("20060521") << QString("yyyyMMdd") << QDate(2006,5,21);
+    QTest::newRow("data43") << QString("060521") << QString("yyMMdd") << QDate(1906,5,21);
 }
 
-void tst_QDate::fromString_format()
+
+void tst_QDate::fromStringFormat()
 {
-    QFETCH( QString, string );
-    QFETCH( QString, format );
-    QFETCH( QDate, date );
+    QFETCH(QString, string);
+    QFETCH(QString, format);
+    QFETCH(QDate, expected);
 
-    QCOMPARE( QDate::fromString( string, format ), date );
+    QDate dt = QDate::fromString(string, format);
+    QCOMPARE(dt, expected);
 }
 
-void tst_QDate::toString_format_data()
+void tst_QDate::toStringFormat_data()
 {
     QTest::addColumn<QDate>("t");
     QTest::addColumn<QString>("format");
@@ -889,7 +951,7 @@ void tst_QDate::toString_format_data()
     QTest::newRow( "data4" ) << QDate() << QString("dd-mm-yyyy") << QString();
 }
 
-void tst_QDate::toString_format()
+void tst_QDate::toStringFormat()
 {
     QFETCH( QDate, t );
     QFETCH( QString, format );
diff --git a/tests/auto/corelib/tools/qdatetime/tst_qdatetime.cpp b/tests/auto/corelib/tools/qdatetime/tst_qdatetime.cpp
index 49fada6..f7925e8 100644
--- a/tests/auto/corelib/tools/qdatetime/tst_qdatetime.cpp
+++ b/tests/auto/corelib/tools/qdatetime/tst_qdatetime.cpp
@@ -110,18 +110,9 @@ private slots:
     void currentDateTimeUtc2();
     void fromStringTextDate_data();
     void fromStringTextDate();
-
-    void dateFromStringFormat_data();
-    void dateFromStringFormat();
-    void timeFromStringFormat_data();
-    void timeFromStringFormat();
-    void timeFromStringDateFormat_data();
-    void timeFromStringDateFormat();
     void dateTimeFromStringFormat_data();
     void dateTimeFromStringFormat();
-
     void fromString_LOCALE_ILDATE();
-
     void fromString();
 
     void utcOffset();
@@ -1331,138 +1322,6 @@ void tst_QDateTime::fromStringTextDate()
     QCOMPARE(int(dt.timeSpec()), timeSpec);
 }
 
-void tst_QDateTime::dateFromStringFormat_data()
-{
-    QTest::addColumn<QString>("string");
-    QTest::addColumn<QString>("format");
-    QTest::addColumn<QDate>("expected");
-
-    //get localized names
-    QString january = QDate::longMonthName(1);
-    QString february = QDate::longMonthName(2);
-    QString march = QDate::longMonthName(3);
-    QString august = QDate::longMonthName(8);
-    QString mon = QDate::shortDayName(1);
-    QString monday = QDate::longDayName(1);
-    QString tuesday = QDate::longDayName(2);
-    QString wednesday = QDate::longDayName(3);
-    QString thursday = QDate::longDayName(4);
-    QString friday = QDate::longDayName(5);
-    QString saturday = QDate::longDayName(6);
-    QString sunday = QDate::longDayName(7);
-
-    QTest::newRow("data0") << QString("") << QString("") << defDate();
-    QTest::newRow("data1") << QString(" ") << QString("") << invalidDate();
-    QTest::newRow("data2") << QString(" ") << QString(" ") << defDate();
-    QTest::newRow("data3") << QString("-%$%#") << QString("$*(#@") << invalidDate();
-    QTest::newRow("data4") << QString("d") << QString("'d'") << defDate();
-    QTest::newRow("data5") << QString("101010") << QString("dMyy") << QDate(1910, 10, 10);
-    QTest::newRow("data6") << QString("101010b") << QString("dMyy") << invalidDate();
-    QTest::newRow("data7") << january << QString("MMMM") << defDate();
-    QTest::newRow("data8") << QString("ball") << QString("balle") << invalidDate();
-    QTest::newRow("data9") << QString("balleh") << QString("balleh") << defDate();
-    QTest::newRow("data10") << QString("10.01.1") << QString("M.dd.d") << QDate(defDate().year(), 10, 1);
-    QTest::newRow("data11") << QString("-1.01.1") << QString("M.dd.d") << invalidDate();
-    QTest::newRow("data12") << QString("11010") << QString("dMMyy") << invalidDate();
-    QTest::newRow("data13") << QString("-2") << QString("d") << invalidDate();
-    QTest::newRow("data14") << QString("132") << QString("Md") << invalidDate();
-    QTest::newRow("data15") << february << QString("MMMM") << QDate(defDate().year(), 2, 1);
-
-    QString date = mon + " " + august + " 8 2005";
-    QTest::newRow("data16") << date << QString("ddd MMMM d yyyy") << QDate(2005, 8, 8);
-    QTest::newRow("data17") << QString("2000:00") << QString("yyyy:yy") << QDate(2000, 1, 1);
-    QTest::newRow("data18") << QString("1999:99") << QString("yyyy:yy") << QDate(1999, 1, 1);
-    QTest::newRow("data19") << QString("2099:99") << QString("yyyy:yy") << QDate(2099, 1, 1);
-    QTest::newRow("data20") << QString("2001:01") << QString("yyyy:yy") << QDate(2001, 1, 1);
-    QTest::newRow("data21") << QString("99") << QString("yy") << QDate(1999, 1, 1);
-    QTest::newRow("data22") << QString("01") << QString("yy") << QDate(1901, 1, 1);
-
-    QTest::newRow("data23") << monday << QString("dddd") << QDate(1900, 1, 1);
-    QTest::newRow("data24") << tuesday << QString("dddd") << QDate(1900, 1, 2);
-    QTest::newRow("data25") << wednesday << QString("dddd") << QDate(1900, 1, 3);
-    QTest::newRow("data26") << thursday << QString("dddd") << QDate(1900, 1, 4);
-    QTest::newRow("data27") << friday << QString("dddd") << QDate(1900, 1, 5);
-    QTest::newRow("data28") << saturday << QString("dddd") << QDate(1900, 1, 6);
-    QTest::newRow("data29") << sunday << QString("dddd") << QDate(1900, 1, 7);
-
-    QTest::newRow("data30") << monday + " 2006" << QString("dddd yyyy") << QDate(2006, 1, 2);
-    QTest::newRow("data31") << tuesday + " 2006" << QString("dddd yyyy") << QDate(2006, 1, 3);
-    QTest::newRow("data32") << wednesday + " 2006" << QString("dddd yyyy") << QDate(2006, 1, 4);
-    QTest::newRow("data33") << thursday + " 2006" << QString("dddd yyyy") << QDate(2006, 1, 5);
-    QTest::newRow("data34") << friday + " 2006" << QString("dddd yyyy") << QDate(2006, 1, 6);
-    QTest::newRow("data35") << saturday + " 2006" << QString("dddd yyyy") << QDate(2006, 1, 7);
-    QTest::newRow("data36") << sunday + " 2006" << QString("dddd yyyy") << QDate(2006, 1, 1);
-
-    QTest::newRow("data37") << tuesday + " 2007 " + march << QString("dddd yyyy MMMM") << QDate(2007, 3, 6);
-
-}
-
-
-void tst_QDateTime::dateFromStringFormat()
-{
-    QFETCH(QString, string);
-    QFETCH(QString, format);
-    QFETCH(QDate, expected);
-
-    QDate dt = QDate::fromString(string, format);
-    QCOMPARE(dt, expected);
-}
-
-void tst_QDateTime::timeFromStringFormat_data()
-{
-    QTest::addColumn<QString>("string");
-    QTest::addColumn<QString>("format");
-    QTest::addColumn<QTime>("expected");
-
-    QTest::newRow("data0") << QString("1010") << QString("mmm") << QTime(0, 10, 0);
-    QTest::newRow("data1") << QString("00") << QString("hm") << invalidTime();
-    QTest::newRow("data2") << QString("10am") << QString("hap") << QTime(10, 0, 0);
-    QTest::newRow("data3") << QString("10pm") << QString("hap") << QTime(22, 0, 0);
-    QTest::newRow("data4") << QString("10pmam") << QString("hapap") << invalidTime();
-    QTest::newRow("data5") << QString("1070") << QString("hhm") << invalidTime();
-    QTest::newRow("data6") << QString("1011") << QString("hh") << invalidTime();
-    QTest::newRow("data7") << QString("25") << QString("hh") << invalidTime();
-    QTest::newRow("data8") << QString("22pm") << QString("Hap") << QTime(22, 0, 0);
-    QTest::newRow("data9") << QString("2221") << QString("hhhh") << invalidTime();
-}
-
-
-void tst_QDateTime::timeFromStringFormat()
-{
-    QFETCH(QString, string);
-    QFETCH(QString, format);
-    QFETCH(QTime, expected);
-
-    QTime dt = QTime::fromString(string, format);
-    QCOMPARE(dt, expected);
-}
-
-void tst_QDateTime::timeFromStringDateFormat_data()
-{
-    QTest::addColumn<QString>("string");
-    QTest::addColumn<Qt::DateFormat>("format");
-    QTest::addColumn<QTime>("expected");
-
-    QTest::newRow("valid, start of day, omit seconds") << QString::fromLatin1("00:00") << Qt::ISODate << QTime(0, 0, 0);
-    QTest::newRow("valid, omit seconds") << QString::fromLatin1("22:21") << Qt::ISODate << QTime(22, 21, 0);
-    QTest::newRow("valid, omit seconds (2)") << QString::fromLatin1("23:59") << Qt::ISODate << QTime(23, 59, 0);
-    QTest::newRow("valid, end of day") << QString::fromLatin1("23:59:59") << Qt::ISODate << QTime(23, 59, 59);
-
-    QTest::newRow("invalid, empty string") << QString::fromLatin1("") << Qt::ISODate << invalidTime();
-    QTest::newRow("invalid, too many hours") << QString::fromLatin1("25:00") << Qt::ISODate << invalidTime();
-    QTest::newRow("invalid, too many minutes") << QString::fromLatin1("10:70") << Qt::ISODate << invalidTime();
-    QTest::newRow("invalid, too many seconds") << QString::fromLatin1("23:59:60") << Qt::ISODate << invalidTime();
-}
-
-void tst_QDateTime::timeFromStringDateFormat()
-{
-    QFETCH(QString, string);
-    QFETCH(Qt::DateFormat, format);
-    QFETCH(QTime, expected);
-
-    QTime dt = QTime::fromString(string, format);
-    QCOMPARE(dt, expected);
-}
 
 void tst_QDateTime::dateTimeFromStringFormat_data()
 {
diff --git a/tests/auto/corelib/tools/qtime/tst_qtime.cpp b/tests/auto/corelib/tools/qtime/tst_qtime.cpp
index d8f72df..1e000a1 100644
--- a/tests/auto/corelib/tools/qtime/tst_qtime.cpp
+++ b/tests/auto/corelib/tools/qtime/tst_qtime.cpp
@@ -46,8 +46,6 @@ class tst_QTime : public QObject
 {
     Q_OBJECT
 private slots:
-    void toStringLocale();
-    void toString();
     void msecsTo_data();
     void msecsTo();
     void secsTo_data();
@@ -68,16 +66,22 @@ private slots:
     void operator_gt();
     void operator_lt_eq();
     void operator_gt_eq();
-    void fromString_data();
-    void fromString();
     void fromStringFormat_data();
     void fromStringFormat();
-    void toString_data();
-    void toString_format_data();
-    void toString_format();
+    void fromStringDateFormat_data();
+    void fromStringDateFormat();
+    void toStringDateFormat_data();
+    void toStringDateFormat();
+    void toStringFormat_data();
+    void toStringFormat();
+    void toStringLocale();
+
+private:
+    QTime invalidTime() { return QTime(-1, -1, -1); }
 };
 
 Q_DECLARE_METATYPE(QTime)
+Q_DECLARE_METATYPE(Qt::DateFormat)
 
 void tst_QTime::addSecs_data()
 {
@@ -522,54 +526,74 @@ void tst_QTime::operator_gt_eq()
     QVERIFY( t1 >= t2 );
 }
 
-void tst_QTime::fromString_data()
+void tst_QTime::fromStringFormat_data()
 {
-    // Since we can't define an element of Qt::DateFormat, t1 will be the time
-    // expected when we have a TextDate, and t2 will be the time expected when
-    // we have an ISODate.
-
-    QTest::addColumn<QString>("str");
-    QTest::addColumn<QTime>("t1");
-    QTest::addColumn<QTime>("t2");
-
-    QTest::newRow( "data0" ) << QString("00:00:00") << QTime(0,0,0,0) << QTime(0,0,0,0);
-    QTest::newRow( "data1" ) << QString("10:12:34") << QTime(10,12,34,0) << QTime(10,12,34,0);
-    QTest::newRow( "data2" ) << QString("19:03:54.998601") << QTime(19, 3, 54, 999) << QTime(19, 3, 54, 999);
-    QTest::newRow( "data3" ) << QString("19:03:54.999601") << QTime(19, 3, 54, 999) << QTime(19, 3, 54, 999);
+    QTest::addColumn<QString>("string");
+    QTest::addColumn<QString>("format");
+    QTest::addColumn<QTime>("expected");
+
+    QTest::newRow("data0") << QString("1010") << QString("mmm") << QTime(0, 10, 0);
+    QTest::newRow("data1") << QString("00") << QString("hm") << invalidTime();
+    QTest::newRow("data2") << QString("10am") << QString("hap") << QTime(10, 0, 0);
+    QTest::newRow("data3") << QString("10pm") << QString("hap") << QTime(22, 0, 0);
+    QTest::newRow("data4") << QString("10pmam") << QString("hapap") << invalidTime();
+    QTest::newRow("data5") << QString("1070") << QString("hhm") << invalidTime();
+    QTest::newRow("data6") << QString("1011") << QString("hh") << invalidTime();
+    QTest::newRow("data7") << QString("25") << QString("hh") << invalidTime();
+    QTest::newRow("data8") << QString("22pm") << QString("Hap") << QTime(22, 0, 0);
+    QTest::newRow("data9") << QString("2221") << QString("hhhh") << invalidTime();
+    QTest::newRow("data10") << QString("02:23PM") << QString("hh:mmAP") << QTime(14,23,0,0);
+    QTest::newRow("data11") << QString("02:23pm") << QString("hh:mmap") << QTime(14,23,0,0);
 }
 
-void tst_QTime::fromString()
+void tst_QTime::fromStringFormat()
 {
-    QFETCH( QString, str );
-    QFETCH( QTime, t1 );
-    QFETCH( QTime, t2 );
+    QFETCH(QString, string);
+    QFETCH(QString, format);
+    QFETCH(QTime, expected);
 
-    QCOMPARE( t1, QTime::fromString( str, Qt::TextDate ) );
-    QCOMPARE( t2, QTime::fromString( str, Qt::ISODate ) );
+    QTime dt = QTime::fromString(string, format);
+    QCOMPARE(dt, expected);
 }
 
-
-void tst_QTime::fromStringFormat_data()
+void tst_QTime::fromStringDateFormat_data()
 {
-    QTest::addColumn<QString>("str");
-    QTest::addColumn<QString>("format");
-    QTest::addColumn<QTime>("t");
-
-    QTest::newRow( "data0" ) << QString("02:23PM") << QString("hh:mmAP") << QTime(14,23,0,0);
-    QTest::newRow( "data1" ) << QString("02:23pm") << QString("hh:mmap") << QTime(14,23,0,0);
+    QTest::addColumn<QString>("string");
+    QTest::addColumn<Qt::DateFormat>("format");
+    QTest::addColumn<QTime>("expected");
+
+    QTest::newRow("valid, start of day, omit seconds") << QString::fromLatin1("00:00") << Qt::ISODate << QTime(0, 0, 0);
+    QTest::newRow("valid, omit seconds") << QString::fromLatin1("22:21") << Qt::ISODate << QTime(22, 21, 0);
+    QTest::newRow("valid, omit seconds (2)") << QString::fromLatin1("23:59") << Qt::ISODate << QTime(23, 59, 0);
+    QTest::newRow("valid, end of day") << QString::fromLatin1("23:59:59") << Qt::ISODate << QTime(23, 59, 59);
+
+    QTest::newRow("invalid, empty string") << QString::fromLatin1("") << Qt::ISODate << invalidTime();
+    QTest::newRow("invalid, too many hours") << QString::fromLatin1("25:00") << Qt::ISODate << invalidTime();
+    QTest::newRow("invalid, too many minutes") << QString::fromLatin1("10:70") << Qt::ISODate << invalidTime();
+    QTest::newRow("invalid, too many seconds") << QString::fromLatin1("23:59:60") << Qt::ISODate << invalidTime();
+
+    QTest::newRow("TextDate - data0") << QString("00:00:00") << Qt::TextDate << QTime(0,0,0,0);
+    QTest::newRow("TextDate - data1") << QString("10:12:34") << Qt::TextDate << QTime(10,12,34,0);
+    QTest::newRow("TextDate - data2") << QString("19:03:54.998601") << Qt::TextDate << QTime(19, 3, 54, 999);
+    QTest::newRow("TextDate - data3") << QString("19:03:54.999601") << Qt::TextDate << QTime(19, 3, 54, 999);
+
+    QTest::newRow("IsoDate - data0") << QString("00:00:00") << Qt::ISODate << QTime(0,0,0,0);
+    QTest::newRow("IsoDate - data1") << QString("10:12:34") << Qt::ISODate << QTime(10,12,34,0);
+    QTest::newRow("IsoDate - data2") << QString("19:03:54.998601") << Qt::ISODate << QTime(19, 3, 54, 999);
+    QTest::newRow("IsoDate - data3") << QString("19:03:54.999601") << Qt::ISODate << QTime(19, 3, 54, 999);
 }
 
-void tst_QTime::fromStringFormat()
+void tst_QTime::fromStringDateFormat()
 {
-    QFETCH(QString, str);
-    QFETCH(QString, format);
-    QFETCH(QTime, t);
-
-    QCOMPARE(t, QTime::fromString( str, format));
+    QFETCH(QString, string);
+    QFETCH(Qt::DateFormat, format);
+    QFETCH(QTime, expected);
 
+    QTime dt = QTime::fromString(string, format);
+    QCOMPARE(dt, expected);
 }
 
-void tst_QTime::toString_data()
+void tst_QTime::toStringDateFormat_data()
 {
     // Since we can't define an element of Qt::DateFormat, str1 will be the string
     // in TextDate format, and str2 will be the time in ISODate format.
@@ -582,7 +606,7 @@ void tst_QTime::toString_data()
     QTest::newRow( "data1" ) << QTime(10,12,34,0) << QString("10:12:34") << QString("10:12:34");
 }
 
-void tst_QTime::toString()
+void tst_QTime::toStringDateFormat()
 {
     QFETCH( QTime, t );
     QFETCH( QString, str1 );
@@ -592,7 +616,7 @@ void tst_QTime::toString()
     QCOMPARE( str2, t.toString( Qt::ISODate ) );
 }
 
-void tst_QTime::toString_format_data()
+void tst_QTime::toStringFormat_data()
 {
     QTest::addColumn<QTime>("t");
     QTest::addColumn<QString>("format");
@@ -606,7 +630,7 @@ void tst_QTime::toString_format_data()
     QTest::newRow( "data5" ) << QTime(230,230,230,230) << QString("hh:mm:ss") << QString();
 }
 
-void tst_QTime::toString_format()
+void tst_QTime::toStringFormat()
 {
     QFETCH( QTime, t );
     QFETCH( QString, format );