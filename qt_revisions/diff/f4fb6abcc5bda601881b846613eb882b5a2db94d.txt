diff --git a/src/activeqt/control/qaxserver.cpp b/src/activeqt/control/qaxserver.cpp
index 03586c6..5ceba6d 100644
--- a/src/activeqt/control/qaxserver.cpp
+++ b/src/activeqt/control/qaxserver.cpp
@@ -1005,7 +1005,7 @@ static HRESULT classIDL(QObject *o, const QMetaObject *mo, const QString &classN
             bool ok = true;
             
             QByteArray type = signal.typeName();
-            if (!type.isEmpty()) // signals with return value not supported
+            if (!type.isEmpty() && type != QStringLiteral("void")) // signals with return value not supported
                 continue;
             
             QByteArray ptype(prototype(parameterTypes, parameterNames, &ok));
diff --git a/src/activeqt/control/qaxserverbase.cpp b/src/activeqt/control/qaxserverbase.cpp
index e8cc8a8..08fbda2 100644
--- a/src/activeqt/control/qaxserverbase.cpp
+++ b/src/activeqt/control/qaxserverbase.cpp
@@ -2027,13 +2027,13 @@ int QAxServerBase::qt_metacall(QMetaObject::Call call, int index, void **argv)
                         }
                     }
 
-                    QVariantToVARIANT(variant, *arg, type, out);
+                    QVariantToVARIANT(variant, *arg, ptype, out);
                 }
 
                 VARIANT retval;
                 VariantInit(&retval);
                 VARIANT *pretval = 0;
-                if (!type.isEmpty())
+                if (!type.isEmpty() && type != QStringLiteral("void"))
                     pretval = &retval;
 
                 // call listeners (through IDispatch)
@@ -2466,7 +2466,7 @@ HRESULT WINAPI QAxServerBase::Invoke(DISPID dispidMember, REFIID riid,
 	    }
 
             // return value
-	    if (!type.isEmpty()) {
+        if (!type.isEmpty() && type != QStringLiteral("void")) {
                 QVariant::Type vt = QVariant::nameToType(type);
                 if (vt == QVariant::UserType)
                     vt = QVariant::Invalid;
@@ -2504,7 +2504,7 @@ HRESULT WINAPI QAxServerBase::Invoke(DISPID dispidMember, REFIID riid,
 			    ok = false;
 		    }
 		}
-                if (!type.isEmpty() && pvarResult) {
+                if (!type.isEmpty() && type != QStringLiteral("void") && pvarResult) {
                     if (!varp[0].isValid() && type != "QVariant")
                         varp[0] = QVariant(QMetaType::type(type), argv_pointer);
 //                        varp[0].setValue(argv_pointer[0], type);