diff --git a/src/quick/particles/qquickimageparticle.cpp b/src/quick/particles/qquickimageparticle.cpp
index 5ca7d80..beeebdc 100644
--- a/src/quick/particles/qquickimageparticle.cpp
+++ b/src/quick/particles/qquickimageparticle.cpp
@@ -55,8 +55,6 @@
 #include <private/qdeclarativeglobal_p.h>
 
 QT_BEGIN_NAMESPACE
-//###Switch to define later, for now user-friendly (no compilation) debugging is worth it
-DEFINE_BOOL_CONFIG_OPTION(qmlParticlesDebug, QML_PARTICLES_DEBUG)
 
 #ifndef QT_OPENGL_ES_2
 #define SHADER_DEFINES "#version 120\n"
@@ -825,7 +823,6 @@ QQuickImageParticle::QQuickImageParticle(QQuickItem* parent)
     , m_entryEffect(Fade)
 {
     setFlag(ItemHasContents);
-    m_debugMode = qmlParticlesDebug();
 }
 
 QQuickImageParticle::~QQuickImageParticle()
@@ -1222,6 +1219,8 @@ QSGGeometryNode* QQuickImageParticle::buildParticleNodes()
     if (count() <= 0)
         return 0;
 
+    m_debugMode = m_system->m_debugMode;
+
     if (m_sprites.count() || m_bypassOptimizations) {
         perfLevel = Sprites;
     } else if (!m_colortable_name.isEmpty() || !m_sizetable_name.isEmpty()
diff --git a/src/quick/particles/qquickparticlesystem_p.h b/src/quick/particles/qquickparticlesystem_p.h
index 7a16b77..43bcafe 100644
--- a/src/quick/particles/qquickparticlesystem_p.h
+++ b/src/quick/particles/qquickparticlesystem_p.h
@@ -302,6 +302,7 @@ public:
     void updateCurrentTime( int currentTime );
     QQuickParticleSystemAnimation* m_animation;
     bool m_running;
+    bool m_debugMode;
 
     int timeInt;
     bool initialized;
@@ -340,7 +341,6 @@ private:
     QSignalMapper m_painterMapper;
     QSignalMapper m_emitterMapper;
     bool m_paused;
-    bool m_debugMode;
     bool m_allDead;
     bool m_empty;
 };
diff --git a/tests/auto/particles/qquickimageparticle/data/colorVariance.qml b/tests/auto/particles/qquickimageparticle/data/colorVariance.qml
new file mode 100644
index 0000000..d6576d3
--- /dev/null
+++ b/tests/auto/particles/qquickimageparticle/data/colorVariance.qml
@@ -0,0 +1,72 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** All rights reserved.
+** Contact: Nokia Corporation (qt-info@nokia.com)
+**
+** This file is part of the test suite of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** GNU Lesser General Public License Usage
+** This file may be used under the terms of the GNU Lesser General Public
+** License version 2.1 as published by the Free Software Foundation and
+** appearing in the file LICENSE.LGPL included in the packaging of this
+** file. Please review the following information to ensure the GNU Lesser
+** General Public License version 2.1 requirements will be met:
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** In addition, as a special exception, Nokia gives you certain additional
+** rights. These rights are described in the Nokia Qt LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU General
+** Public License version 3.0 as published by the Free Software Foundation
+** and appearing in the file LICENSE.GPL included in the packaging of this
+** file. Please review the following information to ensure the GNU General
+** Public License version 3.0 requirements will be met:
+** http://www.gnu.org/copyleft/gpl.html.
+**
+** Other Usage
+** Alternatively, this file may be used in accordance with the terms and
+** conditions contained in a signed written agreement between you and Nokia.
+**
+**
+**
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+import QtQuick 2.0
+import QtQuick.Particles 2.0
+
+Rectangle {
+    color: "black"
+    width: 320
+    height: 320
+
+    ParticleSystem {
+        id: sys
+        objectName: "system"
+        anchors.fill: parent
+
+        ImageParticle {
+            source: "../../shared/star.png"
+            alpha: 0.5
+            color: "#000000"
+            redVariation: 0.5
+            greenVariation: 0.25
+            blueVariation: 0.125
+            alphaVariation: 0.25
+        }
+
+        Emitter{
+            //0,0 position
+            size: 32
+            emitRate: 1000
+            lifeSpan: 500
+        }
+    }
+}
diff --git a/tests/auto/particles/qquickimageparticle/tst_qquickimageparticle.cpp b/tests/auto/particles/qquickimageparticle/tst_qquickimageparticle.cpp
index b58a0b4..f46f237 100644
--- a/tests/auto/particles/qquickimageparticle/tst_qquickimageparticle.cpp
+++ b/tests/auto/particles/qquickimageparticle/tst_qquickimageparticle.cpp
@@ -51,10 +51,12 @@ class tst_qquickimageparticle : public QObject
     Q_OBJECT
 public:
     tst_qquickimageparticle();
+    ~tst_qquickimageparticle();
 
 private slots:
     void test_basic();
     void test_colored();
+    void test_colorVariance();
     void test_deformed();
     void test_tabled();
     void test_sprite();
@@ -63,6 +65,12 @@ private slots:
 tst_qquickimageparticle::tst_qquickimageparticle()
 {
     QUnifiedTimer::instance()->setConsistentTiming(true);
+    setenv("QML_PARTICLES_DEBUG","please",0);//QQuickImageParticle has several debug statements, with possible pointer dereferences
+}
+
+tst_qquickimageparticle::~tst_qquickimageparticle()
+{
+    unsetenv("QML_PARTICLES_DEBUG");
 }
 
 void tst_qquickimageparticle::test_basic()
@@ -153,6 +161,51 @@ void tst_qquickimageparticle::test_colored()
 }
 
 
+void tst_qquickimageparticle::test_colorVariance()
+{
+    QQuickView* view = createView(QCoreApplication::applicationDirPath() + "/data/colorVariance.qml", 600);
+    QQuickParticleSystem* system = view->rootObject()->findChild<QQuickParticleSystem*>("system");
+    ensureAnimTime(600, system->m_animation);
+
+    QVERIFY(extremelyFuzzyCompare(system->groupData[0]->size(), 500, 10));
+    foreach (QQuickParticleData *d, system->groupData[0]->data) {
+        if (d->t == -1)
+            continue; //Particle data unused
+
+        QCOMPARE(d->x, 0.f);
+        QCOMPARE(d->y, 0.f);
+        QCOMPARE(d->vx, 0.f);
+        QCOMPARE(d->vy, 0.f);
+        QCOMPARE(d->ax, 0.f);
+        QCOMPARE(d->ay, 0.f);
+        QCOMPARE(d->lifeSpan, 0.5f);
+        QCOMPARE(d->size, 32.f);
+        QCOMPARE(d->endSize, 32.f);
+        QVERIFY(myFuzzyLEQ(d->t, ((qreal)system->timeInt/1000.0)));
+        QVERIFY(d->color.r < 128);
+        QVERIFY(d->color.g < 64);
+        QVERIFY(d->color.b < 32);
+        QVERIFY(d->color.a >= 64);
+        QVERIFY(d->color.a < 192);
+        QCOMPARE(d->xx, 1.0f);
+        QCOMPARE(d->xy, 0.0f);
+        QCOMPARE(d->yy, 1.0f);
+        QCOMPARE(d->yx, 0.0f);
+        QCOMPARE(d->rotation, 0.0f);
+        QCOMPARE(d->rotationSpeed, 0.0f);
+        QCOMPARE(d->autoRotate, 0.0f);
+        QCOMPARE(d->animX, 0.0f);
+        QCOMPARE(d->animY, 0.0f);
+        QCOMPARE(d->animWidth, 1.0f);
+        QCOMPARE(d->animHeight, 1.0f);
+        QCOMPARE(d->frameDuration, 1.0f);
+        QCOMPARE(d->frameCount, 1.0f);
+        QCOMPARE(d->animT, -1.0f);
+    }
+    delete view;
+}
+
+
 void tst_qquickimageparticle::test_deformed()
 {
     QQuickView* view = createView(QCoreApplication::applicationDirPath() + "/data/deformed.qml", 600);