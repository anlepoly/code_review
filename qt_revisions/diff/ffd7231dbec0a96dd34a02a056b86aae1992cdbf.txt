diff --git a/doc/src/examples/context2d.qdoc b/doc/src/examples/context2d.qdoc
index 2b9f0c1..cf577be 100644
--- a/doc/src/examples/context2d.qdoc
+++ b/doc/src/examples/context2d.qdoc
@@ -90,11 +90,11 @@
 
     Our "Context2D-browser" is set up through the following steps:
     \list
-    \o Create an Environment.
-    \o Create a Context2D, and a QContext2DCanvas widget to render it.
-    \o Add the canvas object to the environment; this will enable
+    \li Create an Environment.
+    \li Create a Context2D, and a QContext2DCanvas widget to render it.
+    \li Add the canvas object to the environment; this will enable
        scripts to obtain a reference to it.
-    \o Evaluate scripts in the environment.
+    \li Evaluate scripts in the environment.
     \endlist
 
     Once a script has been evaluated, the application handles any
diff --git a/doc/src/scripting/ecmascript.qdoc b/doc/src/scripting/ecmascript.qdoc
index 9a22ed7..4abb8f4 100644
--- a/doc/src/scripting/ecmascript.qdoc
+++ b/doc/src/scripting/ecmascript.qdoc
@@ -41,50 +41,50 @@
     \section2 Value Properties
 
     \list
-    \o NaN
-    \o Infinity
-    \o undefined
+    \li NaN
+    \li Infinity
+    \li undefined
     \endlist
 
     \section2 Function Properties
 
     \list
-    \o eval(x)
-    \o parseInt(string, radix)
-    \o parseFloat(string)
-    \o isNaN(number)
-    \o isFinite(number)
-    \o decodeURI(encodedURI)
-    \o decodeURIComponent(encodedURIComponent)
-    \o encodeURI(uri)
-    \o encodeURIComponent(uriComponent)
+    \li eval(x)
+    \li parseInt(string, radix)
+    \li parseFloat(string)
+    \li isNaN(number)
+    \li isFinite(number)
+    \li decodeURI(encodedURI)
+    \li decodeURIComponent(encodedURIComponent)
+    \li encodeURI(uri)
+    \li encodeURIComponent(uriComponent)
     \endlist
 
     \section2 Constructor Properties
 
     \list
-    \o Object
-    \o Function
-    \o Array
-    \o String
-    \o Boolean
-    \o Number
-    \o Date
-    \o RegExp
-    \o Error
-    \o EvalError
-    \o RangeError
-    \o ReferenceError
-    \o SyntaxError
-    \o TypeError
-    \o URIError
+    \li Object
+    \li Function
+    \li Array
+    \li String
+    \li Boolean
+    \li Number
+    \li Date
+    \li RegExp
+    \li Error
+    \li EvalError
+    \li RangeError
+    \li ReferenceError
+    \li SyntaxError
+    \li TypeError
+    \li URIError
     \endlist
 
     \section2 Other Properties
 
     \list
-    \o Math
-    \o JSON
+    \li Math
+    \li JSON
     \endlist
 
     \section1 Object Objects
@@ -94,13 +94,13 @@
     \section3 Function Properties
 
     \list
-    \o getPrototypeOf(O)
-    \o getOwnPropertyDescriptor(O, P)
-    \o getOwnPropertyNames(O)
-    \o create(O [, Properties])
-    \o defineProperty(O, P, Attributes)
-    \o defineProperties(O, Properties)
-    \o keys(O)
+    \li getPrototypeOf(O)
+    \li getOwnPropertyDescriptor(O, P)
+    \li getOwnPropertyNames(O)
+    \li create(O [, Properties])
+    \li defineProperty(O, P, Attributes)
+    \li defineProperties(O, Properties)
+    \li keys(O)
     \endlist
 
     \section2 Object Prototype Object
@@ -108,12 +108,12 @@
     \section3 Function Properties
 
     \list
-    \o toString()
-    \o toLocaleString()
-    \o valueOf()
-    \o hasOwnProperty(V)
-    \o isPrototypeOf(V)
-    \o propertyIsEnumerable(V)
+    \li toString()
+    \li toLocaleString()
+    \li valueOf()
+    \li hasOwnProperty(V)
+    \li isPrototypeOf(V)
+    \li propertyIsEnumerable(V)
     \endlist
 
     \section1 Function Objects
@@ -123,9 +123,9 @@
     \section3 Function Properties
 
     \list
-    \o toString()
-    \o apply(thisArg, argArray)
-    \o call(thisArg [, arg1 [, arg2, ...]])
+    \li toString()
+    \li apply(thisArg, argArray)
+    \li call(thisArg [, arg1 [, arg2, ...]])
     \endlist
 
     \section1 Array Objects
@@ -135,27 +135,27 @@
     \section3 Function Properties
 
     \list
-    \o toString()
-    \o toLocaleString()
-    \o concat([item1 [, item2 [, ...]]])
-    \o join(separator)
-    \o pop()
-    \o push([item1 [, item2 [, ...]]])
-    \o reverse()
-    \o shift()
-    \o slice(start, end)
-    \o sort(comparefn)
-    \o splice(start, deleteCount[, item1 [, item2 [, ...]]])
-    \o unshift([item1 [, item2 [, ...]]])
-    \o indexOf(searchElement [, fromIndex])
-    \o lastIndexOf(searchElement [, fromIndex])
-    \o every(callbackfn [, thisArg])
-    \o some(callbackfn [, thisArg])
-    \o forEach(callbackfn [, thisArg])
-    \o map(callbackfn [, thisArg])
-    \o filter(callbackfn [, thisArg])
-    \o reduce(callbackfn [, initialValue])
-    \o reduceRight(callbackfn [, initialValue])
+    \li toString()
+    \li toLocaleString()
+    \li concat([item1 [, item2 [, ...]]])
+    \li join(separator)
+    \li pop()
+    \li push([item1 [, item2 [, ...]]])
+    \li reverse()
+    \li shift()
+    \li slice(start, end)
+    \li sort(comparefn)
+    \li splice(start, deleteCount[, item1 [, item2 [, ...]]])
+    \li unshift([item1 [, item2 [, ...]]])
+    \li indexOf(searchElement [, fromIndex])
+    \li lastIndexOf(searchElement [, fromIndex])
+    \li every(callbackfn [, thisArg])
+    \li some(callbackfn [, thisArg])
+    \li forEach(callbackfn [, thisArg])
+    \li map(callbackfn [, thisArg])
+    \li filter(callbackfn [, thisArg])
+    \li reduce(callbackfn [, initialValue])
+    \li reduceRight(callbackfn [, initialValue])
     \endlist
 
     \section1 String Objects
@@ -165,25 +165,25 @@
     \section3 Function Properties
 
     \list
-    \o toString()
-    \o valueOf()
-    \o charAt(pos)
-    \o charCodeAt(pos)
-    \o concat([string1 [, string2 [, ...]]])
-    \o indexOf(searchString ,position)
-    \o lastIndexOf(searchString, position)
-    \o localeCompare(that)
-    \o match(regexp)
-    \o replace(searchValue, replaceValue)
-    \o search(regexp)
-    \o slice(start, end)
-    \o split(separator, limit)
-    \o substring(start, end)
-    \o toLowerCase()
-    \o toLocaleLowerCase()
-    \o toUpperCase()
-    \o toLocaleUpperCase()
-    \o trim()
+    \li toString()
+    \li valueOf()
+    \li charAt(pos)
+    \li charCodeAt(pos)
+    \li concat([string1 [, string2 [, ...]]])
+    \li indexOf(searchString ,position)
+    \li lastIndexOf(searchString, position)
+    \li localeCompare(that)
+    \li match(regexp)
+    \li replace(searchValue, replaceValue)
+    \li search(regexp)
+    \li slice(start, end)
+    \li split(separator, limit)
+    \li substring(start, end)
+    \li toLowerCase()
+    \li toLocaleLowerCase()
+    \li toUpperCase()
+    \li toLocaleUpperCase()
+    \li trim()
     \endlist
 
     \section1 Boolean Objects
@@ -193,8 +193,8 @@
     \section3 Function Properties
 
     \list
-    \o toString()
-    \o valueOf()
+    \li toString()
+    \li valueOf()
     \endlist
 
     \section1 Number Objects
@@ -204,11 +204,11 @@
     \section3 Function Properties
 
     \list
-    \o toString(radix)
-    \o toLocaleString()
-    \o toFixed(fractionDigits)
-    \o toExponential(fractionDigits)
-    \o toPrecision(precision)
+    \li toString(radix)
+    \li toLocaleString()
+    \li toFixed(fractionDigits)
+    \li toExponential(fractionDigits)
+    \li toPrecision(precision)
     \endlist
 
     \section1 The Math Object
@@ -216,37 +216,37 @@
     \section2 Value Properties
 
     \list
-    \o E
-    \o LN10
-    \o LN2
-    \o LOG2E
-    \o LOG10E
-    \o PI
-    \o SQRT1_2
-    \o SQRT2
+    \li E
+    \li LN10
+    \li LN2
+    \li LOG2E
+    \li LOG10E
+    \li PI
+    \li SQRT1_2
+    \li SQRT2
     \endlist
 
     \section2 Function Properties
 
     \list
-    \o abs(x)
-    \o acos(x)
-    \o asin(x)
-    \o atan(x)
-    \o atan2(y, x)
-    \o ceil(x)
-    \o cos(x)
-    \o exp(x)
-    \o floor(x)
-    \o log(x)
-    \o max([value1 [, value2 [, ...]]])
-    \o min([value1 [, value2 [, ...]]])
-    \o pow(x, y)
-    \o random()
-    \o round(x)
-    \o sin(x)
-    \o sqrt(x)
-    \o tan(x)
+    \li abs(x)
+    \li acos(x)
+    \li asin(x)
+    \li atan(x)
+    \li atan2(y, x)
+    \li ceil(x)
+    \li cos(x)
+    \li exp(x)
+    \li floor(x)
+    \li log(x)
+    \li max([value1 [, value2 [, ...]]])
+    \li min([value1 [, value2 [, ...]]])
+    \li pow(x, y)
+    \li random()
+    \li round(x)
+    \li sin(x)
+    \li sqrt(x)
+    \li tan(x)
     \endlist
 
     \section1 Date Objects
@@ -256,49 +256,49 @@
     \section3 Function Properties
 
     \list
-    \o toString()
-    \o toDateString()
-    \o toTimeString()
-    \o toLocaleString()
-    \o toLocaleDateString()
-    \o toLocaleTimeString()
-    \o valueOf()
-    \o getTime()
-    \o getFullYear()
-    \o getUTCFullYear()
-    \o getMonth()
-    \o getUTCMonth()
-    \o getDate()
-    \o getUTCDate()
-    \o getDay()
-    \o getUTCDay()
-    \o getHours()
-    \o getUTCHours()
-    \o getMinutes()
-    \o getUTCMinutes()
-    \o getSeconds()
-    \o getUTCSeconds()
-    \o getMilliseconds()
-    \o getUTCMilliseconds()
-    \o getTimeZoneOffset()
-    \o setTime(time)
-    \o setMilliseconds(ms)
-    \o setUTCMilliseconds(ms)
-    \o setSeconds(sec [, ms])
-    \o setUTCSeconds(sec [, ms])
-    \o setMinutes(min [, sec [, ms]])
-    \o setUTCMinutes(min [, sec [, ms]])
-    \o setHours(hour [, min [, sec [, ms]]])
-    \o setUTCHours(hour [, min [, sec [, ms]]])
-    \o setDate(date)
-    \o setUTCDate(date)
-    \o setMonth(month [, date])
-    \o setUTCMonth(month [, date])
-    \o setFullYear(year [, month [, date]])
-    \o setUTCFullYear(year [, month [, date]])
-    \o toUTCString()
-    \o toISOString()
-    \o toJSON()
+    \li toString()
+    \li toDateString()
+    \li toTimeString()
+    \li toLocaleString()
+    \li toLocaleDateString()
+    \li toLocaleTimeString()
+    \li valueOf()
+    \li getTime()
+    \li getFullYear()
+    \li getUTCFullYear()
+    \li getMonth()
+    \li getUTCMonth()
+    \li getDate()
+    \li getUTCDate()
+    \li getDay()
+    \li getUTCDay()
+    \li getHours()
+    \li getUTCHours()
+    \li getMinutes()
+    \li getUTCMinutes()
+    \li getSeconds()
+    \li getUTCSeconds()
+    \li getMilliseconds()
+    \li getUTCMilliseconds()
+    \li getTimeZoneOffset()
+    \li setTime(time)
+    \li setMilliseconds(ms)
+    \li setUTCMilliseconds(ms)
+    \li setSeconds(sec [, ms])
+    \li setUTCSeconds(sec [, ms])
+    \li setMinutes(min [, sec [, ms]])
+    \li setUTCMinutes(min [, sec [, ms]])
+    \li setHours(hour [, min [, sec [, ms]]])
+    \li setUTCHours(hour [, min [, sec [, ms]]])
+    \li setDate(date)
+    \li setUTCDate(date)
+    \li setMonth(month [, date])
+    \li setUTCMonth(month [, date])
+    \li setFullYear(year [, month [, date]])
+    \li setUTCFullYear(year [, month [, date]])
+    \li toUTCString()
+    \li toISOString()
+    \li toJSON()
     \endlist
 
     \section1 RegExp Objects
@@ -308,9 +308,9 @@
     \section3 Function Properties
 
     \list
-    \o exec(string)
-    \o test(string)
-    \o toString()
+    \li exec(string)
+    \li test(string)
+    \li toString()
     \endlist
 
     \section1 Error Objects
@@ -320,14 +320,14 @@
     \section3 Value Properties
 
     \list
-    \o name
-    \o message
+    \li name
+    \li message
     \endlist
 
     \section3 Function Properties
 
     \list
-    \o toString()
+    \li toString()
     \endlist
 
     \section1 The JSON Object
@@ -335,8 +335,8 @@
     \section2 Function Properties
 
     \list
-    \o parse(text [, reviver])
-    \o stringify(value [, replacer [, space]])
+    \li parse(text [, reviver])
+    \li stringify(value [, replacer [, space]])
     \endlist
 
 */
diff --git a/doc/src/scripting/qtscriptdebugger-manual.qdoc b/doc/src/scripting/qtscriptdebugger-manual.qdoc
index 2737e0f..a6ea206 100644
--- a/doc/src/scripting/qtscriptdebugger-manual.qdoc
+++ b/doc/src/scripting/qtscriptdebugger-manual.qdoc
@@ -54,11 +54,11 @@
   execution when any of these conditions are met:
 
   \list
-    \o The \c{debugger} statement is encountered in the script.
-    \o Clicking the \gui Interrupt menu item from the \gui Debug
+    \li The \c{debugger} statement is encountered in the script.
+    \li Clicking the \gui Interrupt menu item from the \gui Debug
         menu in the main window.
-    \o A breakpoint is reached.
-    \o An uncaught script exception is thrown.
+    \li A breakpoint is reached.
+    \li An uncaught script exception is thrown.
   \endlist
 
   Once the debugger is started, the execution state can be inspected,
@@ -79,11 +79,11 @@
 
   \table
     \header
-      \o Component
-      \o Description
+      \li Component
+      \li Description
   \row
-  \o Console Widget 
-  \o The console widget provides a command-line interface to the
+  \li Console Widget
+  \li The console widget provides a command-line interface to the
   debugger's functionality, and also serves as an interactive script
   interpreter. The set of commands and their syntax is inspired by
   GDB, the GNU Debugger. Commands and script variables are
@@ -102,16 +102,16 @@
   effects, so be careful).
 
   \row
-  \o Stack Widget
-  \o The stack widget shows a backtrace of the script execution state.
+  \li Stack Widget
+  \li The stack widget shows a backtrace of the script execution state.
   Each row represents one frame in the stack. A row contains the
   frame index (0 being the inner-most frame), the name of the script function,
   and the location (file name and line number). To select a particular
   stack frame to inspect, click on its row.
 
   \row
-  \o Locals Widget
-  \o The locals widget shows the variables that are local to the
+  \li Locals Widget
+  \li The locals widget shows the variables that are local to the
   currently selected stack frame; that is, the properties of the
   objects in the scope chain and the \c{this}-object. Objects can be
   expanded, so that their properties can be examined, recursively.
@@ -124,8 +124,8 @@
   completions for the expression.
 
   \row
-  \o Code Widget
-  \o The code widget shows the code of the currently selected script.
+  \li Code Widget
+  \li The code widget shows the code of the currently selected script.
     The widget displays an arrow in the left margin, marking the
     code line that is being executed.
     Clicking in the margin of a line will cause a breakpoint to be
@@ -138,9 +138,9 @@
     command-line interface, see \l{Console Command Reference}.
 
   \row
-  \o Scripts Widget
+  \li Scripts Widget
 
-  \o The scripts widget shows the scripts that are currently loaded in
+  \li The scripts widget shows the scripts that are currently loaded in
   the script engine. Clicking on a script will cause its code to be
   shown in the code widget. When a script is no longer referenced by
   the debugger target it is removed from the scripts widget. Code
@@ -148,9 +148,9 @@
   displayed in the widget as Anonymous.
 
   \row
-    \o Breakpoints Widget
+    \li Breakpoints Widget
 
-  \o The breakpoints widget shows all the breakpoints that are set.  A
+  \li The breakpoints widget shows all the breakpoints that are set.  A
   breakpoint can be disabled or enabled by clicking the checkbox next
   to the breakpoint's ID (the ID is provided so that the breakpoint
   can be manipulated through the console widget as well).
@@ -158,26 +158,26 @@
   A condition can be associated with the breakpoint; the condition can
   be an arbitrary expression that should evaluate to true or
   false. The breakpoint will only be triggered when its location is
-  reached \bold{and} the condition evaluates to true.
+  reached \b{and} the condition evaluates to true.
 
   Similarly, if the breakpoint's ignore-count is set to N, the
   breakpoint will be ignored the next N times it is hit.
 
   A new breakpoint can be set by clicking the New Breakpoint button
-  and typing in a location of the form <filename>\bold{:}<linenumber>.
+  and typing in a location of the form <filename>\b{:}<linenumber>.
   The breakpoint location can refer to an already loaded script, or
   one that has not been loaded yet.
 
   \row
-  \o Debug Output Widget
-  \o The debug output widget shows messages generated by the print()
+  \li Debug Output Widget
+  \li The debug output widget shows messages generated by the print()
   script function. Scripts can use the special variables \c{__FILE__}
   and \c{__LINE__} to include the current location information in the
   messages.
 
   \row
-  \o Error Log Widget
-  \o The error log widget shows error messages that have been generated.
+  \li Error Log Widget
+  \li The error log widget shows error messages that have been generated.
      All uncaught exceptions that occur in the engine will appear here.
 
   \endtable
@@ -187,31 +187,31 @@
   Script evaluation can be resumed in one of the following ways:
 
   \list
-  \o \bold{Continue}: Evaluation will resume normally.
-  \o \bold{Step Into}: Evaluation will resume until the next statement is reached.
-  \o \bold{Step Over}: Evaluation will resume until the next statement is reached;
+  \li \b{Continue}: Evaluation will resume normally.
+  \li \b{Step Into}: Evaluation will resume until the next statement is reached.
+  \li \b{Step Over}: Evaluation will resume until the next statement is reached;
                 but if the current statement is a function call, the debugger
                 will treat it as a single statement.
-  \o \bold{Step Out}: Evaluation will resume until the current function exits and
+  \li \b{Step Out}: Evaluation will resume until the current function exits and
                the next statement is reached.
-  \o \bold{Run to Cursor}: Run until the statement at the cursor is reached.
-  \o \bold{Run to New Script}: Run until the first statement of a new script is reached.
+  \li \b{Run to Cursor}: Run until the statement at the cursor is reached.
+  \li \b{Run to New Script}: Run until the first statement of a new script is reached.
   \endlist
 
   In any case, script evaluation can also be stopped due to either of the
   following reasons:
 
   \list
-  \o A \c{debugger} statement is encountered.
-  \o A breakpoint is hit.
-  \o An uncaught script exception occurs.
+  \li A \c{debugger} statement is encountered.
+  \li A breakpoint is hit.
+  \li An uncaught script exception occurs.
   \endlist
 
   \section2 Resuming After an Uncaught Exception
 
   When an uncaught script exception occurs, it is not possible to
   continue evaluating the current function normally. However, you can
-  use the console command \bold{return} to catch the exception and
+  use the console command \b{return} to catch the exception and
   return a value to the calling function.
 
   \section1 Console Command Reference
diff --git a/doc/src/scripting/qtscriptextensions.qdoc b/doc/src/scripting/qtscriptextensions.qdoc
index 3e48e3a..51e5bc4 100644
--- a/doc/src/scripting/qtscriptextensions.qdoc
+++ b/doc/src/scripting/qtscriptextensions.qdoc
@@ -37,9 +37,9 @@
     There are three ways to create an extension:
 
     \list
-    \o Subclass QScriptExtensionPlugin and implement the desired functionality.
-    \o Implement the functionality in a script file.
-    \o Use a hybrid approach, where part of the functionality is implemented in a
+    \li Subclass QScriptExtensionPlugin and implement the desired functionality.
+    \li Implement the functionality in a script file.
+    \li Use a hybrid approach, where part of the functionality is implemented in a
        QScriptExtensionPlugin, and part is implemented in a script file.
     \endlist
 
@@ -61,9 +61,9 @@
     to the script:
 
     \list
-    \o \bold{__extension__}: The name of the extension (e.g. \c{"foo.bar.baz"}).
-    \o \bold{__setupPackage__}: A convenience function for setting up a "namespace" in the script environment. A typical application is to call \c{__setupPackage__()} with \c{__extension__} as argument; e.g. \c{__setupPackage__("foo.bar.baz")} would ensure that the object chain represented by the expression \c{foo.bar.baz} exists in the script environment. (This function is semantically equivalent to QScriptExtensionPlugin::setupPackage().)
-    \o \bold{__postInit__}: By default, this variable is undefined. If you assign a function to it, that function will be called \bold{after} the C++ plugin's initialize() function has been called. You can use this to perform further initialization that depends on e.g. native functions that the C++ plugin registers.
+    \li \b{__extension__}: The name of the extension (e.g. \c{"foo.bar.baz"}).
+    \li \b{__setupPackage__}: A convenience function for setting up a "namespace" in the script environment. A typical application is to call \c{__setupPackage__()} with \c{__extension__} as argument; e.g. \c{__setupPackage__("foo.bar.baz")} would ensure that the object chain represented by the expression \c{foo.bar.baz} exists in the script environment. (This function is semantically equivalent to QScriptExtensionPlugin::setupPackage().)
+    \li \b{__postInit__}: By default, this variable is undefined. If you assign a function to it, that function will be called \b{after} the C++ plugin's initialize() function has been called. You can use this to perform further initialization that depends on e.g. native functions that the C++ plugin registers.
     \endlist
 
     An example of a simple \c{__init__.js}:
@@ -73,19 +73,19 @@
     QScriptEngine will look for a QScriptExtensionPlugin that provides
     the relevant extension by querying each plugin for its keys()
     until a match is found. The plugin's initialize() function will be
-    called \bold{after} the relevant \c{__init__.js} (if any) has been
+    called \b{after} the relevant \c{__init__.js} (if any) has been
     evaluated.
 
     Continuining with the example of our imaginary extension \c{"foo.bar.baz"},
     the following steps will be performed by QScriptEngine::importExtension():
 
     \list
-    \o If it exists, \c{foo/__init__.js} is evaluated.
-    \o If a plugin with \c{"foo"} in its list of keys is found, its initialize() function is called with \c{"foo"} as key.
-    \o If it exists, \c{foo/bar/__init__.js} is evaluated.
-    \o If a plugin with \c{"foo.bar"} in its list of keys is found, its initialize() function is called with \c{"foo.bar"} as key.
-    \o If it exists, \c{foo/bar/baz/__init__.js} is evaluated.
-    \o If a plugin with "foo.bar.baz" in its list of keys is found, its initialize() function is called with \c{"foo.bar.baz"} as key.
+    \li If it exists, \c{foo/__init__.js} is evaluated.
+    \li If a plugin with \c{"foo"} in its list of keys is found, its initialize() function is called with \c{"foo"} as key.
+    \li If it exists, \c{foo/bar/__init__.js} is evaluated.
+    \li If a plugin with \c{"foo.bar"} in its list of keys is found, its initialize() function is called with \c{"foo.bar"} as key.
+    \li If it exists, \c{foo/bar/baz/__init__.js} is evaluated.
+    \li If a plugin with "foo.bar.baz" in its list of keys is found, its initialize() function is called with \c{"foo.bar.baz"} as key.
     \endlist
 
     \section1 Static Extensions
diff --git a/doc/src/scripting/scripting.qdoc b/doc/src/scripting/scripting.qdoc
index e4ae398..8e3158a 100644
--- a/doc/src/scripting/scripting.qdoc
+++ b/doc/src/scripting/scripting.qdoc
@@ -117,7 +117,7 @@
   with Qt Script:
 
   \list
-  \i \bold{Hybrid C++/script}: C++ application code connects a
+  \li \b{Hybrid C++/script}: C++ application code connects a
   signal to a script function. The script function can, for example, be
   a function that the user has typed in, or one that you have read from a
   file. This approach is useful if you have a QObject but don't want
@@ -126,13 +126,13 @@
   to, and leave it up to the C++ side of your application to establish
   the connection.
 
-  \i \bold{Hybrid script/C++}: A script can connect signals and slots
+  \li \b{Hybrid script/C++}: A script can connect signals and slots
   to establish connections between pre-defined objects that the
   application exposes to the scripting environment. In this scenario,
   the slots themselves are still written in C++, but the definition of
   the connections is fully dynamic (script-defined).
 
-  \i \bold{Purely script-defined}: A script can both define signal
+  \li \b{Purely script-defined}: A script can both define signal
   handler functions (effectively "slots written in Qt Script"),
   \e{and} set up the connections that utilize those handlers. For
   example, a script can define a function that will handle the
@@ -468,49 +468,49 @@
   QScriptValue to a C++ type.
 
     \table 80%
-    \header \o C++ Type \o Default Conversion
-    \row    \o bool \o QScriptValue::toBool()
-    \row    \o int \o QScriptValue::toInt32()
-    \row    \o uint \o QScriptValue::toUInt32()
-    \row    \o float \o float(QScriptValue::toNumber())
-    \row    \o double \o QScriptValue::toNumber()
-    \row    \o short \o short(QScriptValue::toInt32())
-    \row    \o ushort \o QScriptValue::toUInt16()
-    \row    \o char \o char(QScriptValue::toInt32())
-    \row    \o uchar \o unsigned char(QScriptValue::toInt32())
-    \row    \o qlonglong \o qlonglong(QScriptValue::toInteger())
-    \row    \o qulonglong \o qulonglong(QScriptValue::toInteger())
-    \row    \o QString \o An empty string if the QScriptValue is null
+    \header \li C++ Type \li Default Conversion
+    \row    \li bool \li QScriptValue::toBool()
+    \row    \li int \li QScriptValue::toInt32()
+    \row    \li uint \li QScriptValue::toUInt32()
+    \row    \li float \li float(QScriptValue::toNumber())
+    \row    \li double \li QScriptValue::toNumber()
+    \row    \li short \li short(QScriptValue::toInt32())
+    \row    \li ushort \li QScriptValue::toUInt16()
+    \row    \li char \li char(QScriptValue::toInt32())
+    \row    \li uchar \li unsigned char(QScriptValue::toInt32())
+    \row    \li qlonglong \li qlonglong(QScriptValue::toInteger())
+    \row    \li qulonglong \li qulonglong(QScriptValue::toInteger())
+    \row    \li QString \li An empty string if the QScriptValue is null
                or undefined; QScriptValue::toString() otherwise.
-    \row    \o QDateTime \o QScriptValue::toDateTime()
-    \row    \o QDate \o QScriptValue::toDateTime().date()
-    \row    \o QRegExp \o QScriptValue::toRegExp()
-    \row    \o QObject* \o QScriptValue::toQObject()
-    \row    \o QWidget* \o QScriptValue::toQObject()
-    \row    \o QVariant \o QScriptValue::toVariant()
-    \row    \o QChar \o If the QScriptValue is a string, the result
+    \row    \li QDateTime \li QScriptValue::toDateTime()
+    \row    \li QDate \li QScriptValue::toDateTime().date()
+    \row    \li QRegExp \li QScriptValue::toRegExp()
+    \row    \li QObject* \li QScriptValue::toQObject()
+    \row    \li QWidget* \li QScriptValue::toQObject()
+    \row    \li QVariant \li QScriptValue::toVariant()
+    \row    \li QChar \li If the QScriptValue is a string, the result
                is the first character of the string, or a null QChar
                if the string is empty; otherwise, the result is a QChar
                constructed from the unicode obtained by converting the
                QScriptValue to a \c{ushort}.
-    \row    \o QStringList \o If the QScriptValue is an array, the
+    \row    \li QStringList \li If the QScriptValue is an array, the
                result is a QStringList constructed from the result of
                QScriptValue::toString() for each array element; otherwise,
                the result is an empty QStringList.
-    \row    \o QVariantList \o If the QScriptValue is an array, the result
+    \row    \li QVariantList \li If the QScriptValue is an array, the result
                is a QVariantList constructed from the result of
                QScriptValue::toVariant() for each array element; otherwise,
                the result is an empty QVariantList.
-    \row    \o QVariantMap \o If the QScriptValue is an object, the result
+    \row    \li QVariantMap \li If the QScriptValue is an object, the result
                is a QVariantMap with a (key, value) pair of the form
                (propertyName, propertyValue.toVariant()) for each property,
                using QScriptValueIterator to iterate over the object's
                properties.
-    \row    \o QObjectList \o If the QScriptValue is an array, the result
+    \row    \li QObjectList \li If the QScriptValue is an array, the result
                is a QObjectList constructed from the result of
                QScriptValue::toQObject() for each array element; otherwise,
                the result is an empty QObjectList.
-    \row    \o QList<int> \o If the QScriptValue is an array, the result is
+    \row    \li QList<int> \li If the QScriptValue is an array, the result is
                a QList<int> constructed from the result of
                QScriptValue::toInt32() for each array element; otherwise,
                the result is an empty QList<int>.
@@ -519,14 +519,14 @@
   Additionally, QtScript will handle the following cases:
 
   \list
-  \i If the QScriptValue is a QObject and the target type name ends with
+  \li If the QScriptValue is a QObject and the target type name ends with
      \c * (i.e., it is a pointer), the QObject pointer will be cast to the
      target type with qobject_cast().
-  \i If the QScriptValue is a QVariant and the target type name ends with
+  \li If the QScriptValue is a QVariant and the target type name ends with
      \c * (i.e., it is a pointer), and the \l{QVariant::userType()}{userType()}
      of the QVariant is the type that the target type points to, the result
      is a pointer to the QVariant's data.
-  \i If the QScriptValue is a QVariant and it can be converted to the
+  \li If the QScriptValue is a QVariant and it can be converted to the
      target type (according to QVariant::canConvert()), the QVariant will
      be cast to the target type with qvariant_cast().
   \endlist
@@ -537,46 +537,46 @@
   constructed from a C++ type:
 
     \table 80%
-    \header \o C++ Type \o Default Construction
-    \row    \o void \o QScriptEngine::undefinedValue()
-    \row    \o bool \o QScriptValue(engine, value)
-    \row    \o int \o QScriptValue(engine, value)
-    \row    \o uint \o QScriptValue(engine, value)
-    \row    \o float \o QScriptValue(engine, value)
-    \row    \o double \o QScriptValue(engine, value)
-    \row    \o short \o QScriptValue(engine, value)
-    \row    \o ushort \o QScriptValue(engine, value)
-    \row    \o char \o QScriptValue(engine, value)
-    \row    \o uchar \o QScriptValue(engine, value)
-    \row    \o QString \o QScriptValue(engine, value)
-    \row    \o qlonglong \o QScriptValue(engine, qsreal(value)). Note that
+    \header \li C++ Type \li Default Construction
+    \row    \li void \li QScriptEngine::undefinedValue()
+    \row    \li bool \li QScriptValue(engine, value)
+    \row    \li int \li QScriptValue(engine, value)
+    \row    \li uint \li QScriptValue(engine, value)
+    \row    \li float \li QScriptValue(engine, value)
+    \row    \li double \li QScriptValue(engine, value)
+    \row    \li short \li QScriptValue(engine, value)
+    \row    \li ushort \li QScriptValue(engine, value)
+    \row    \li char \li QScriptValue(engine, value)
+    \row    \li uchar \li QScriptValue(engine, value)
+    \row    \li QString \li QScriptValue(engine, value)
+    \row    \li qlonglong \li QScriptValue(engine, qsreal(value)). Note that
                the conversion may lead to loss of precision, since not all
                64-bit integers can be represented using the qsreal type.
-    \row    \o qulonglong \o QScriptValue(engine, qsreal(value)). Note that
+    \row    \li qulonglong \li QScriptValue(engine, qsreal(value)). Note that
                the conversion may lead to loss of precision, since not all
                64-bit unsigned integers can be represented using the qsreal
                type.
-    \row    \o QChar \o QScriptValue(this, value.unicode())
-    \row    \o QDateTime \o \l{QScriptEngine::newDate()}{QScriptEngine::newDate}(value)
-    \row    \o QDate \o \l{QScriptEngine::newDate()}{QScriptEngine::newDate}(value)
-    \row    \o QRegExp \o \l{QScriptEngine::newRegExp()}{QScriptEngine::newRegExp}(value)
-    \row    \o QObject* \o \l{QScriptEngine::newQObject()}{QScriptEngine::newQObject}(value)
-    \row    \o QWidget* \o \l{QScriptEngine::newQObject()}{QScriptEngine::newQObject}(value)
-    \row    \o QVariant \o \l{QScriptEngine::newVariant()}{QScriptEngine::newVariant}(value)
-    \row    \o QStringList \o A new script array (created with
+    \row    \li QChar \li QScriptValue(this, value.unicode())
+    \row    \li QDateTime \li \l{QScriptEngine::newDate()}{QScriptEngine::newDate}(value)
+    \row    \li QDate \li \l{QScriptEngine::newDate()}{QScriptEngine::newDate}(value)
+    \row    \li QRegExp \li \l{QScriptEngine::newRegExp()}{QScriptEngine::newRegExp}(value)
+    \row    \li QObject* \li \l{QScriptEngine::newQObject()}{QScriptEngine::newQObject}(value)
+    \row    \li QWidget* \li \l{QScriptEngine::newQObject()}{QScriptEngine::newQObject}(value)
+    \row    \li QVariant \li \l{QScriptEngine::newVariant()}{QScriptEngine::newVariant}(value)
+    \row    \li QStringList \li A new script array (created with
                QScriptEngine::newArray()), whose elements are created using
                the QScriptValue(QScriptEngine *, QString) constructor for
                each element of the list.
-    \row    \o QVariantList \o A new script array (created with
+    \row    \li QVariantList \li A new script array (created with
                QScriptEngine::newArray()), whose elements are created using
                QScriptEngine::newVariant() for each element of the list.
-    \row    \o QVariantMap \o A new script object (created with
+    \row    \li QVariantMap \li A new script object (created with
                QScriptEngine::newObject()), whose properties are initialized
                according to the (key, value) pairs of the map.
-    \row    \o QObjectList \o A new script array (created with
+    \row    \li QObjectList \li A new script array (created with
                QScriptEngine::newArray()), whose elements are created using
                QScriptEngine::newQObject() for each element of the list.
-    \row    \o QList<int> \o A new script array (created with
+    \row    \li QList<int> \li A new script array (created with
                QScriptEngine::newArray()), whose elements are created using
                the QScriptValue(QScriptEngine *, int) constructor for each
                element of the list.
@@ -872,13 +872,13 @@
   A QScriptContext holds all the state associated with a particular
   invocation of your function. Through the QScriptContext, you can:
   \list
-  \i Get the arguments that were passed to the function.
-  \i Get the \c this object.
-  \i Find out whether the function was called with the \c new operator
+  \li Get the arguments that were passed to the function.
+  \li Get the \c this object.
+  \li Find out whether the function was called with the \c new operator
      (the significance of this will be explained later).
-  \i Throw a script error.
-  \i Get the function object that's being invoked.
-  \i Get the activation object (the object used to hold local variables).
+  \li Throw a script error.
+  \li Get the function object that's being invoked.
+  \li Get the activation object (the object used to hold local variables).
   \endlist
 
   The following sections explain how to make use of this
@@ -889,12 +889,12 @@
   Two things are worth noting about function arguments:
 
   \list 1
-  \o Any script function \mdash including native functions \mdash can
+  \li Any script function \mdash including native functions \mdash can
   be invoked with any number of arguments. This means that it is up to
   the function itself to check the argument count if necessary, and act
   accordingly (e.g., throw an error if the number of arguments is
   too large, or prepare a default value if the number is too small).
-  \o A value of any type can be supplied as an argument to any
+  \li A value of any type can be supplied as an argument to any
   function. This means that it is up to you to check the type of the
   arguments if necessary, and act accordingly (e.g., throw an error
   if an argument is not an object of a certain type).
@@ -1045,7 +1045,7 @@
   applications:
 
   \list
-  \o The \c arguments object can be used to easily forward a function
+  \li The \c arguments object can be used to easily forward a function
      call to another function. In script code, this is what it
      typically looks like:
 
@@ -1062,12 +1062,12 @@
 
      \snippet doc/src/snippets/code/doc_src_qtscript.cpp 69
 
-  \o The arguments object can serve as input to a QScriptValueIterator,
+  \li The arguments object can serve as input to a QScriptValueIterator,
      providing a generic way to iterate over the arguments. A debugger
      might use this to display the arguments object in a general purpose
      "Qt Script Object Explorer", for example.
 
-  \o The arguments object can be serialized (e.g., with JSON) and transferred
+  \li The arguments object can be serialized (e.g., with JSON) and transferred
      to another entity (e.g., a script engine running in another thread),
      where the object can be deserialized and passed as argument to
      another script function.
@@ -1097,7 +1097,7 @@
   \c{new} expression), this has two important implications:
 
   \list
-  \i The \c this object, QScriptContext::thisObject(), contains
+  \li The \c this object, QScriptContext::thisObject(), contains
      the new object to be initialized; the engine creates this
      new object automatically before invoking your function. This means
      that your native constructor function normally doesn't have to (and
@@ -1105,7 +1105,7 @@
      constructor, since the engine has already prepared a new
      object. Instead your function should operate on the supplied
      \c this object.
-  \i The constructor function should return an undefined value,
+  \li The constructor function should return an undefined value,
      QScriptEngine::undefinedValue(), to tell the engine that the
      \c this object should be the final result of the \c new
      operator. Alternatively, the function can return the \c this
@@ -1200,11 +1200,11 @@
   activation object:
 
   \list
-  \i The activation object provides a standard way to traverse the
+  \li The activation object provides a standard way to traverse the
   variables associated with a function call, by using it as the input
   to QScriptValueIterator. This is useful for debugging purposes.
 
-  \i The activation object can be used to prepare local variables
+  \li The activation object can be used to prepare local variables
   that should be available when a script is evaluated inline; this
   can be viewed as a way of passing arguments to the script
   itself. This technique is typically used in conjunction with
@@ -1368,8 +1368,8 @@
   \c{class} keyword. Instead, you define a new class in two steps:
 
   \list 1
-  \i Define a \e{constructor function} that will initialize new objects.
-  \i Set up a \e{prototype object} that defines the class interface, and
+  \li Define a \e{constructor function} that will initialize new objects.
+  \li Set up a \e{prototype object} that defines the class interface, and
      assign this object to the public \c{prototype} property of the
      constructor function.
   \endlist
@@ -1730,17 +1730,17 @@
 
     \list 1
 
-    \o Run \c lupdate to extract translatable text from the script source code
+    \li Run \c lupdate to extract translatable text from the script source code
     of the Qt application, resulting in a message file for translators (a TS
     file). The utility recognizes qsTr(), qsTranslate() and the
     \c{QT_TR*_NOOP()} functions described above and produces TS files
     (usually one per language).
 
-    \o Provide translations for the source texts in the TS file, using
+    \li Provide translations for the source texts in the TS file, using
     \e{Qt Linguist}. Since TS files are in XML format, you can also
     edit them by hand.
 
-    \o Run \c lrelease to obtain a light-weight message file (a QM
+    \li Run \c lrelease to obtain a light-weight message file (a QM
     file) from the TS file, suitable only for end use. Think of the TS
      files as "source files", and QM files as "object files". The
     translator edits the TS files, but the users of your application
@@ -1804,7 +1804,7 @@
   \section1 QtScript Extensions to ECMAScript
 
   \list
-  \i \c{__proto__} \br
+  \li \c{__proto__} \br
     The prototype of an object (QScriptValue::prototype())
     can be accessed through its \c{__proto__} property in script code.
     This property has the QScriptValue::Undeletable flag set.
@@ -1812,7 +1812,7 @@
 
   \snippet doc/src/snippets/code/doc_src_qtscript.js 40
 
-  \i \c{Object.prototype.__defineGetter__} \br
+  \li \c{Object.prototype.__defineGetter__} \br
     This function installs a
     getter function for a property of an object. The first argument is
     the property name, and the second is the function to call to get
@@ -1822,7 +1822,7 @@
 
   \snippet doc/src/snippets/code/doc_src_qtscript.js 41
 
-  \i \c{Object.prototype.__defineSetter__} \br
+  \li \c{Object.prototype.__defineSetter__} \br
     This function installs a
     setter function for a property of an object. The first argument is
     the property name, and the second is the function to call to set
@@ -1832,43 +1832,43 @@
 
   \snippet doc/src/snippets/code/doc_src_qtscript.js 42
 
-  \i \c{Function.prototype.connect} \br
+  \li \c{Function.prototype.connect} \br
     This function connects
     a signal to a slot. Usage of this function is described in
     the section \l{Using Signals and Slots}.
 
-  \i \c{Function.prototype.disconnect} \br
+  \li \c{Function.prototype.disconnect} \br
     This function disconnects
     a signal from a slot. Usage of this function is described in
     the section \l{Using Signals and Slots}.
 
-  \i \c{QObject.prototype.findChild} \br
+  \li \c{QObject.prototype.findChild} \br
     This function is semantically equivalent to QObject::findChild().
 
-  \i \c{QObject.prototype.findChildren} \br
+  \li \c{QObject.prototype.findChildren} \br
     This function is semantically equivalent to QObject::findChildren().
 
-  \i \c{QObject.prototype.toString} \br
+  \li \c{QObject.prototype.toString} \br
     This function returns a default string representation of a QObject.
 
-  \i \c{gc} \br
+  \li \c{gc} \br
     This function invokes the garbage collector.
 
-  \i \c{Error.prototype.backtrace} \br
+  \li \c{Error.prototype.backtrace} \br
     This function returns a human-readable backtrace, in the form of
     an array of strings.
 
-  \i Error objects have the following additional properties:
+  \li Error objects have the following additional properties:
     \list
-    \i \c{lineNumber}: The line number where the error occurred.
-    \i \c{fileName}: The file name where the error occurred (if a file name
+    \li \c{lineNumber}: The line number where the error occurred.
+    \li \c{fileName}: The file name where the error occurred (if a file name
     was passed to QScriptEngine::evaluate()).
-    \i \c{stack}: An array of objects describing the stack. Each object has
+    \li \c{stack}: An array of objects describing the stack. Each object has
       the following properties:
       \list
-      \i \c{functionName}: The function name, if available.
-      \i \c{fileName}: The file name, if available.
-      \i \c{lineNumber}: The line number, if available.
+      \li \c{functionName}: The function name, if available.
+      \li \c{fileName}: The file name, if available.
+      \li \c{lineNumber}: The line number, if available.
       \endlist
     \endlist
 
diff --git a/src/script/api/qscriptclass.cpp b/src/script/api/qscriptclass.cpp
index 80abb83..68de186 100644
--- a/src/script/api/qscriptclass.cpp
+++ b/src/script/api/qscriptclass.cpp
@@ -56,7 +56,7 @@
 
   Reimplement queryProperty() to specify which properties are handled
   in a custom way by your script class (i.e. should be
-  \bold{delegated} to the QScriptClass), and which properties should
+  \b{delegated} to the QScriptClass), and which properties should
   be handled just like normal Qt Script object properties.
 
   Reimplement property() and setProperty() to perform the actual
diff --git a/src/script/api/qscriptengine.cpp b/src/script/api/qscriptengine.cpp
index c0b19f3..2934aa6 100644
--- a/src/script/api/qscriptengine.cpp
+++ b/src/script/api/qscriptengine.cpp
@@ -130,7 +130,7 @@ QT_BEGIN_NAMESPACE
 
   \section1 Engine Configuration
 
-  The globalObject() function returns the \bold {Global Object}
+  The globalObject() function returns the \b {Global Object}
   associated with the script engine. Properties of the Global Object
   are accessible from any script code (i.e. they are global
   variables). Typically, before evaluating "user" scripts, you will
@@ -3473,13 +3473,13 @@ void QScriptEngine::registerCustomType(int type, MarshalFunction mf,
   functions is described in the following table:
 
     \table
-    \header \o Script Function \o Corresponding C++ Function
-    \row    \o qsTr()       \o QObject::tr()
-    \row    \o QT_TR_NOOP() \o QT_TR_NOOP()
-    \row    \o qsTranslate() \o QCoreApplication::translate()
-    \row    \o QT_TRANSLATE_NOOP() \o QT_TRANSLATE_NOOP()
-    \row    \o qsTrId() (since 4.7) \o qtTrId()
-    \row    \o QT_TRID_NOOP() (since 4.7) \o QT_TRID_NOOP()
+    \header \li Script Function \li Corresponding C++ Function
+    \row    \li qsTr()       \li QObject::tr()
+    \row    \li QT_TR_NOOP() \li QT_TR_NOOP()
+    \row    \li qsTranslate() \li QCoreApplication::translate()
+    \row    \li QT_TRANSLATE_NOOP() \li QT_TRANSLATE_NOOP()
+    \row    \li qsTrId() (since 4.7) \li qtTrId()
+    \row    \li QT_TRID_NOOP() (since 4.7) \li QT_TRID_NOOP()
     \endtable
 
   \sa {Internationalization with Qt}
@@ -4287,13 +4287,13 @@ QScriptString QScriptEngine::toStringHandle(const QString &str)
   is performed according to the following table:
 
     \table
-    \header \o Input Type \o Result
-    \row    \o Undefined  \o An invalid QScriptValue.
-    \row    \o Null       \o An invalid QScriptValue.
-    \row    \o Boolean    \o A new Boolean object whose internal value is set to the value of the boolean.
-    \row    \o Number     \o A new Number object whose internal value is set to the value of the number.
-    \row    \o String     \o A new String object whose internal value is set to the value of the string.
-    \row    \o Object     \o The result is the object itself (no conversion).
+    \header \li Input Type \li Result
+    \row    \li Undefined  \li An invalid QScriptValue.
+    \row    \li Null       \li An invalid QScriptValue.
+    \row    \li Boolean    \li A new Boolean object whose internal value is set to the value of the boolean.
+    \row    \li Number     \li A new Number object whose internal value is set to the value of the number.
+    \row    \li String     \li A new String object whose internal value is set to the value of the string.
+    \row    \li Object     \li The result is the object itself (no conversion).
     \endtable
 
     \sa newObject()
diff --git a/src/script/api/qscriptvalue.cpp b/src/script/api/qscriptvalue.cpp
index 7f460da..d73405e 100644
--- a/src/script/api/qscriptvalue.cpp
+++ b/src/script/api/qscriptvalue.cpp
@@ -881,13 +881,13 @@ bool QScriptValue::equals(const QScriptValue &other) const
   the result depends on the type, as shown in the following table:
 
     \table
-    \header \o Type \o Result
-    \row    \o Undefined  \o true
-    \row    \o Null       \o true
-    \row    \o Boolean    \o true if both values are true, false otherwise
-    \row    \o Number     \o false if either value is NaN (Not-a-Number); true if values are equal, false otherwise
-    \row    \o String     \o true if both values are exactly the same sequence of characters, false otherwise
-    \row    \o Object     \o true if both values refer to the same object, false otherwise
+    \header \li Type \li Result
+    \row    \li Undefined  \li true
+    \row    \li Null       \li true
+    \row    \li Boolean    \li true if both values are true, false otherwise
+    \row    \li Number     \li false if either value is NaN (Not-a-Number); true if values are equal, false otherwise
+    \row    \li String     \li true if both values are exactly the same sequence of characters, false otherwise
+    \row    \li Object     \li true if both values refer to the same object, false otherwise
     \endtable
 
   \sa equals()
@@ -1204,18 +1204,18 @@ qsreal QScriptValue::toInteger() const
   The conversion is performed according to the following table:
 
     \table
-    \header \o Input Type \o Result
-    \row    \o Undefined  \o An invalid QVariant.
-    \row    \o Null       \o An invalid QVariant.
-    \row    \o Boolean    \o A QVariant containing the value of the boolean.
-    \row    \o Number     \o A QVariant containing the value of the number.
-    \row    \o String     \o A QVariant containing the value of the string.
-    \row    \o QVariant Object \o The result is the QVariant value of the object (no conversion).
-    \row    \o QObject Object \o A QVariant containing a pointer to the QObject.
-    \row    \o Date Object \o A QVariant containing the date value (toDateTime()).
-    \row    \o RegExp Object \o A QVariant containing the regular expression value (toRegExp()).
-    \row    \o Array Object \o The array is converted to a QVariantList. Each element is converted to a QVariant, recursively; cyclic references are not followed.
-    \row    \o Object     \o The object is converted to a QVariantMap. Each property is converted to a QVariant, recursively; cyclic references are not followed.
+    \header \li Input Type \li Result
+    \row    \li Undefined  \li An invalid QVariant.
+    \row    \li Null       \li An invalid QVariant.
+    \row    \li Boolean    \li A QVariant containing the value of the boolean.
+    \row    \li Number     \li A QVariant containing the value of the number.
+    \row    \li String     \li A QVariant containing the value of the string.
+    \row    \li QVariant Object \li The result is the QVariant value of the object (no conversion).
+    \row    \li QObject Object \li A QVariant containing a pointer to the QObject.
+    \row    \li Date Object \li A QVariant containing the date value (toDateTime()).
+    \row    \li RegExp Object \li A QVariant containing the regular expression value (toRegExp()).
+    \row    \li Array Object \li The array is converted to a QVariantList. Each element is converted to a QVariant, recursively; cyclic references are not followed.
+    \row    \li Object     \li The object is converted to a QVariantMap. Each property is converted to a QVariant, recursively; cyclic references are not followed.
     \endtable
 
   \sa isVariant()
diff --git a/src/scripttools/debugging/qscriptenginedebugger.cpp b/src/scripttools/debugging/qscriptenginedebugger.cpp
index a334d7f..37944c1 100644
--- a/src/scripttools/debugging/qscriptenginedebugger.cpp
+++ b/src/scripttools/debugging/qscriptenginedebugger.cpp
@@ -145,7 +145,7 @@ public:
   When the Qt Script debugger is running, the C++ application itself
   is not "frozen". This means that it is possible that more scripts
   are evaluated, even though the debugger has suspended evaluation of
-  the \bold{current} script evaluation. For example, a C++ timer might
+  the \b{current} script evaluation. For example, a C++ timer might
   trigger that causes a script function to be called, or the user
   might click on a button in the main application user interface whose
   clicked() signal is connected to a script function. This kind of