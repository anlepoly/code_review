diff --git a/src/corelib/tools/qstring.cpp b/src/corelib/tools/qstring.cpp
index 14b8782..d0c5506 100644
--- a/src/corelib/tools/qstring.cpp
+++ b/src/corelib/tools/qstring.cpp
@@ -2139,7 +2139,8 @@ QString &QString::replace(QChar c, const QLatin1String &after, Qt::CaseSensitivi
 
 
 /*!
-  Returns true if string \a other is equal to this string; otherwise
+  \relates QString
+  Returns true if string \a s1 is equal to string \a s2; otherwise
   returns false.
 
   The comparison is based exclusively on the numeric Unicode values of
@@ -2147,12 +2148,12 @@ QString &QString::replace(QChar c, const QLatin1String &after, Qt::CaseSensitivi
   expect. Consider sorting user-interface strings with
   localeAwareCompare().
 */
-bool QString::operator==(const QString &other) const
+bool operator==(const QString &s1, const QString &s2)
 {
-    if (d->size != other.d->size)
+    if (s1.d->size != s2.d->size)
         return false;
 
-    return qMemEquals(d->data(), other.d->data(), d->size);
+    return qMemEquals(s1.d->data(), s2.d->data(), s1.d->size);
 }
 
 /*!
@@ -2207,17 +2208,18 @@ bool QString::operator==(const QLatin1String &other) const
 */
 
 /*!
-    Returns true if this string is lexically less than string \a
-    other; otherwise returns false.
+   \relates QString
+    Returns true if string \a s1 is lexically less than string
+    \a s2; otherwise returns false.
 
     The comparison is based exclusively on the numeric Unicode values
     of the characters and is very fast, but is not what a human would
     expect. Consider sorting user-interface strings using the
     QString::localeAwareCompare() function.
 */
-bool QString::operator<(const QString &other) const
+bool operator<(const QString &s1, const QString &s2)
 {
-    return ucstrcmp(constData(), length(), other.constData(), other.length()) < 0;
+    return ucstrcmp(s1.constData(), s1.length(), s2.constData(), s2.length()) < 0;
 }
 
 /*!
@@ -2268,10 +2270,11 @@ bool QString::operator<(const QLatin1String &other) const
     go through QObject::tr(), for example.
 */
 
-/*! \fn bool QString::operator<=(const QString &other) const
+/*! \fn bool operator<=(const QString &s1, const QString &s2)
+    \relates QString
 
-    Returns true if this string is lexically less than or equal to
-    string \a other; otherwise returns false.
+    Returns true if string \a s1 is lexically less than or equal to
+    string \a s2; otherwise returns false.
 
     The comparison is based exclusively on the numeric Unicode values
     of the characters and is very fast, but is not what a human would
@@ -2311,10 +2314,11 @@ bool QString::operator<(const QLatin1String &other) const
     go through QObject::tr(), for example.
 */
 
-/*! \fn bool QString::operator>(const QString &other) const
+/*! \fn bool operator>(const QString &s1, const QString &s2)
+    \relates QString
 
-    Returns true if this string is lexically greater than string \a
-    other; otherwise returns false.
+    Returns true if string \a s1 is lexically greater than string \a
+    s2; otherwise returns false.
 
     The comparison is based exclusively on the numeric Unicode values
     of the characters and is very fast, but is not what a human would
@@ -2370,10 +2374,11 @@ bool QString::operator>(const QLatin1String &other) const
     for example.
 */
 
-/*! \fn bool QString::operator>=(const QString &other) const
+/*! \fn bool operator>=(const QString &s1, const QString &s2)
+    \relates QString
 
-    Returns true if this string is lexically greater than or equal to
-    string \a other; otherwise returns false.
+    Returns true if string \a s1 is lexically greater than or equal to
+    string \a s2; otherwise returns false.
 
     The comparison is based exclusively on the numeric Unicode values
     of the characters and is very fast, but is not what a human would
@@ -2413,9 +2418,10 @@ bool QString::operator>(const QLatin1String &other) const
     for example.
 */
 
-/*! \fn bool QString::operator!=(const QString &other) const
+/*! \fn bool operator!=(const QString &s1, const QString &s2)
+    \relates QString
 
-    Returns true if this string is not equal to string \a other;
+    Returns true if string \a s1 is not equal to string \a s2;
     otherwise returns false.
 
     The comparison is based exclusively on the numeric Unicode values
diff --git a/src/corelib/tools/qstring.h b/src/corelib/tools/qstring.h
index 12a5acb..bdadba8 100644
--- a/src/corelib/tools/qstring.h
+++ b/src/corelib/tools/qstring.h
@@ -486,12 +486,12 @@ public:
     static QString number(qulonglong, int base=10);
     static QString number(double, char f='g', int prec=6);
 
-    bool operator==(const QString &s) const;
-    bool operator<(const QString &s) const;
-    inline bool operator>(const QString &s) const { return s < *this; }
-    inline bool operator!=(const QString &s) const { return !operator==(s); }
-    inline bool operator<=(const QString &s) const { return !operator>(s); }
-    inline bool operator>=(const QString &s) const { return !operator<(s); }
+    friend Q_CORE_EXPORT bool operator==(const QString &s1, const QString &s2);
+    friend Q_CORE_EXPORT bool operator<(const QString &s1, const QString &s2);
+    friend inline bool operator>(const QString &s1, const QString &s2) { return s2 < s1; }
+    friend inline bool operator!=(const QString &s1, const QString &s2) { return !(s1 == s2); }
+    friend inline bool operator<=(const QString &s1, const QString &s2) { return !(s1 > s2); }
+    friend inline bool operator>=(const QString &s1, const QString &s2) { return !(s1 < s2); }
 
     bool operator==(const QLatin1String &s) const;
     bool operator<(const QLatin1String &s) const;