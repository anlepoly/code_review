diff --git a/qmake/generators/metamakefile.cpp b/qmake/generators/metamakefile.cpp
index ef47082..d023d5e 100644
--- a/qmake/generators/metamakefile.cpp
+++ b/qmake/generators/metamakefile.cpp
@@ -281,14 +281,7 @@ SubdirsMetaMakefileGenerator::init()
     init_flag = true;
     bool hasError = false;
 
-    // It might make sense to bequeath the CONFIG option to the recursed
-    // projects. OTOH, one would most likely have it in all projects anyway -
-    // either through a qmakespec, a .qmake.cache or explicitly - as otherwise
-    // running qmake in a subdirectory would have a different auto-recurse
-    // setting than in parent directories.
-    bool recurse = Option::recursive == Option::QMAKE_RECURSIVE_YES
-                   || (Option::recursive == Option::QMAKE_RECURSIVE_DEFAULT
-                       && project->isRecursive());
+    bool recurse = Option::recursive;
     if (recurse && project->isActiveConfig("dont_recurse"))
         recurse = false;
     if(recurse) {
diff --git a/qmake/generators/projectgenerator.cpp b/qmake/generators/projectgenerator.cpp
index 98f0e54..1e5bab6 100644
--- a/qmake/generators/projectgenerator.cpp
+++ b/qmake/generators/projectgenerator.cpp
@@ -105,7 +105,7 @@ ProjectGenerator::init()
                     add_depend = true;
                     if(dir.right(1) != Option::dir_sep)
                         dir += Option::dir_sep;
-                    if(Option::recursive == Option::QMAKE_RECURSIVE_YES) {
+                    if (Option::recursive) {
                         QStringList files = QDir(dir).entryList(QDir::Files);
                         for(int i = 0; i < (int)files.count(); i++) {
                             if(files[i] != "." && files[i] != "..")
@@ -132,7 +132,7 @@ ProjectGenerator::init()
                     dir = regex.left(s+1);
                     regex = regex.right(regex.length() - (s+1));
                 }
-                if(Option::recursive == Option::QMAKE_RECURSIVE_YES) {
+                if (Option::recursive) {
                     QStringList entries = QDir(dir).entryList(QDir::Dirs);
                     for(int i = 0; i < (int)entries.count(); i++) {
                         if(entries[i] != "." && entries[i] != "..") {
@@ -187,7 +187,7 @@ ProjectGenerator::init()
                                 subdirs.append(nd);
                         }
                     }
-                    if(Option::recursive == Option::QMAKE_RECURSIVE_YES) {
+                    if (Option::recursive) {
                         QStringList dirs = QDir(newdir).entryList(QDir::Dirs);
                         for(int i = 0; i < (int)dirs.count(); i++) {
                             QString nd = fileFixify(newdir + QDir::separator() + dirs[i]);
@@ -224,8 +224,7 @@ ProjectGenerator::init()
                                 }
                             }
                         }
-                        if(Option::recursive == Option::QMAKE_RECURSIVE_YES
-                           && !knownDirs.contains(newdir, Qt::CaseInsensitive))
+                        if (Option::recursive && !knownDirs.contains(newdir, Qt::CaseInsensitive))
                             knownDirs.append(newdir);
                     }
                 }
diff --git a/qmake/option.cpp b/qmake/option.cpp
index 520b89b..b2f5de5 100644
--- a/qmake/option.cpp
+++ b/qmake/option.cpp
@@ -83,7 +83,7 @@ int Option::warn_level = WarnLogic | WarnDeprecated;
 int Option::debug_level = 0;
 QFile Option::output;
 QString Option::output_dir;
-Option::QMAKE_RECURSIVE Option::recursive = Option::QMAKE_RECURSIVE_DEFAULT;
+bool Option::recursive = false;
 QStringList Option::before_user_vars;
 QStringList Option::after_user_vars;
 QString Option::user_template;
@@ -225,7 +225,7 @@ Option::parseCommandLine(int argc, char **argv, int skip)
             if(x == 1) {
                 bool specified = true;
                 if(opt == "project") {
-                    Option::recursive = Option::QMAKE_RECURSIVE_YES;
+                    Option::recursive = true;
                     Option::qmake_mode = Option::QMAKE_GENERATE_PROJECT;
                 } else if(opt == "prl") {
                     Option::mkfile::do_deps = false;
@@ -283,9 +283,9 @@ Option::parseCommandLine(int argc, char **argv, int skip)
             } else if(opt == "Wnone") {
                 Option::warn_level = WarnNone;
             } else if(opt == "r" || opt == "recursive") {
-                Option::recursive = Option::QMAKE_RECURSIVE_YES;
+                Option::recursive = true;
             } else if(opt == "nr" || opt == "norecursive") {
-                Option::recursive = Option::QMAKE_RECURSIVE_NO;
+                Option::recursive = false;
             } else if(opt == "config") {
                 user_configs += argv[++x];
             } else {
diff --git a/qmake/option.h b/qmake/option.h
index 32af3a8..4e60981 100644
--- a/qmake/option.h
+++ b/qmake/option.h
@@ -165,8 +165,7 @@ struct Option
     static QString output_dir;
     static int debug_level;
     static int warn_level;
-    enum QMAKE_RECURSIVE { QMAKE_RECURSIVE_DEFAULT, QMAKE_RECURSIVE_YES, QMAKE_RECURSIVE_NO };
-    static QMAKE_RECURSIVE recursive;
+    static bool recursive;
     static QStringList before_user_vars, after_user_vars;
     static QString user_template, user_template_prefix;
 
diff --git a/qmake/project.cpp b/qmake/project.cpp
index 69abfac..928ecc9 100644
--- a/qmake/project.cpp
+++ b/qmake/project.cpp
@@ -672,7 +672,6 @@ QMakeProject::init(QMakeProperty *p)
         prop = p;
         own_prop = false;
     }
-    recursive = false;
     host_build = false;
     reset();
 }
@@ -3225,9 +3224,7 @@ QMakeProject::doProjectTest(QString func, QList<QStringList> args_list, QHash<QS
                     parser.file.toLatin1().constData(), parser.line_no);
             return false;
         }
-        if (args.first() == "recursive") {
-            recursive = true;
-        } else if (args.first() == "host_build") {
+        if (args.first() == "host_build") {
             if (!host_build && isActiveConfig("cross_compile")) {
                 host_build = true;
                 need_restart = true;
diff --git a/qmake/project.h b/qmake/project.h
index 57ea023..cf71e5e 100644
--- a/qmake/project.h
+++ b/qmake/project.h
@@ -78,7 +78,6 @@ class QMakeProject
     FunctionBlock *function;
     QHash<QString, FunctionBlock*> testFunctions, replaceFunctions;
 
-    bool recursive;
     bool host_build;
     bool need_restart;
     bool own_prop;
@@ -175,7 +174,6 @@ public:
 
     void dump() const;
 
-    bool isRecursive() const { return recursive; }
     bool isHostBuild() const { return host_build; }
 
 protected: