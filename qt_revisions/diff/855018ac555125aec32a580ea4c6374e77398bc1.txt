diff --git a/src/corelib/json/qjson.cpp b/src/corelib/json/qjson.cpp
index 98be592..100a8dc 100644
--- a/src/corelib/json/qjson.cpp
+++ b/src/corelib/json/qjson.cpp
@@ -278,9 +278,9 @@ int Value::usedStorage(const Base *b) const
     case QJsonValue::String: {
         char *d = data(b);
         if (latinOrIntValue)
-            s = sizeof(ushort) + *(ushort *)d;
+            s = sizeof(ushort) + qFromLittleEndian(*(ushort *)d);
         else
-            s = sizeof(int) + sizeof(ushort)*(*(int *)d);
+            s = sizeof(int) + sizeof(ushort) * qFromLittleEndian(*(int *)d);
         break;
     }
     case QJsonValue::Array:
diff --git a/src/corelib/json/qjson_p.h b/src/corelib/json/qjson_p.h
index ff57dad..23827a1 100644
--- a/src/corelib/json/qjson_p.h
+++ b/src/corelib/json/qjson_p.h
@@ -590,9 +590,9 @@ public:
     int size() const {
         int s = sizeof(Entry);
         if (value.latinKey)
-            s += sizeof(ushort) + *(ushort *) ((const char *)this + sizeof(Entry));
+            s += sizeof(ushort) + qFromLittleEndian(*(ushort *) ((const char *)this + sizeof(Entry)));
         else
-            s += sizeof(uint) + *(int *) ((const char *)this + sizeof(Entry));
+            s += sizeof(uint) + qFromLittleEndian(*(int *) ((const char *)this + sizeof(Entry)));
         return alignedSize(s);
     }