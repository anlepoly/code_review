diff --git a/src/corelib/tools/qregularexpression.cpp b/src/corelib/tools/qregularexpression.cpp
index c7e8e6c..1db7851 100644
--- a/src/corelib/tools/qregularexpression.cpp
+++ b/src/corelib/tools/qregularexpression.cpp
@@ -2206,4 +2206,119 @@ QDebug operator<<(QDebug debug, const QRegularExpressionMatch &match)
 }
 #endif
 
+// fool lupdate: make it extract those strings for translation, but don't put them
+// inside Qt -- they're already inside libpcre (cf. man 3 pcreapi, pcre_compile.c).
+#if 0
+
+/* PCRE is a library of functions to support regular expressions whose syntax
+and semantics are as close as possible to those of the Perl 5 language.
+
+                       Written by Philip Hazel
+           Copyright (c) 1997-2012 University of Cambridge
+
+-----------------------------------------------------------------------------
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions are met:
+
+    * Redistributions of source code must retain the above copyright notice,
+      this list of conditions and the following disclaimer.
+
+    * Redistributions in binary form must reproduce the above copyright
+      notice, this list of conditions and the following disclaimer in the
+      documentation and/or other materials provided with the distribution.
+
+    * Neither the name of the University of Cambridge nor the names of its
+      contributors may be used to endorse or promote products derived from
+      this software without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
+LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+POSSIBILITY OF SUCH DAMAGE.
+-----------------------------------------------------------------------------
+*/
+
+static const char *pcreCompileErrorCodes[] =
+{
+    QT_TRANSLATE_NOOP("QRegularExpression", "no error"),
+    QT_TRANSLATE_NOOP("QRegularExpression", "\\ at end of pattern"),
+    QT_TRANSLATE_NOOP("QRegularExpression", "\\c at end of pattern"),
+    QT_TRANSLATE_NOOP("QRegularExpression", "unrecognized character follows \\"),
+    QT_TRANSLATE_NOOP("QRegularExpression", "numbers out of order in {} quantifier"),
+    QT_TRANSLATE_NOOP("QRegularExpression", "number too big in {} quantifier"),
+    QT_TRANSLATE_NOOP("QRegularExpression", "missing terminating ] for character class"),
+    QT_TRANSLATE_NOOP("QRegularExpression", "invalid escape sequence in character class"),
+    QT_TRANSLATE_NOOP("QRegularExpression", "range out of order in character class"),
+    QT_TRANSLATE_NOOP("QRegularExpression", "nothing to repeat"),
+    QT_TRANSLATE_NOOP("QRegularExpression", "internal error: unexpected repeat"),
+    QT_TRANSLATE_NOOP("QRegularExpression", "unrecognized character after (? or (?-"),
+    QT_TRANSLATE_NOOP("QRegularExpression", "POSIX named classes are supported only within a class"),
+    QT_TRANSLATE_NOOP("QRegularExpression", "missing )"),
+    QT_TRANSLATE_NOOP("QRegularExpression", "reference to non-existent subpattern"),
+    QT_TRANSLATE_NOOP("QRegularExpression", "erroffset passed as NULL"),
+    QT_TRANSLATE_NOOP("QRegularExpression", "unknown option bit(s) set"),
+    QT_TRANSLATE_NOOP("QRegularExpression", "missing ) after comment"),
+    QT_TRANSLATE_NOOP("QRegularExpression", "regular expression is too large"),
+    QT_TRANSLATE_NOOP("QRegularExpression", "failed to get memory"),
+    QT_TRANSLATE_NOOP("QRegularExpression", "unmatched parentheses"),
+    QT_TRANSLATE_NOOP("QRegularExpression", "internal error: code overflow"),
+    QT_TRANSLATE_NOOP("QRegularExpression", "unrecognized character after (?<"),
+    QT_TRANSLATE_NOOP("QRegularExpression", "lookbehind assertion is not fixed length"),
+    QT_TRANSLATE_NOOP("QRegularExpression", "malformed number or name after (?("),
+    QT_TRANSLATE_NOOP("QRegularExpression", "conditional group contains more than two branches"),
+    QT_TRANSLATE_NOOP("QRegularExpression", "assertion expected after (?("),
+    QT_TRANSLATE_NOOP("QRegularExpression", "(?R or (?[+-]digits must be followed by )"),
+    QT_TRANSLATE_NOOP("QRegularExpression", "unknown POSIX class name"),
+    QT_TRANSLATE_NOOP("QRegularExpression", "POSIX collating elements are not supported"),
+    QT_TRANSLATE_NOOP("QRegularExpression", "this version of PCRE is not compiled with PCRE_UTF8 support"),
+    QT_TRANSLATE_NOOP("QRegularExpression", "character value in \\x{...} sequence is too large"),
+    QT_TRANSLATE_NOOP("QRegularExpression", "invalid condition (?(0)"),
+    QT_TRANSLATE_NOOP("QRegularExpression", "\\C not allowed in lookbehind assertion"),
+    QT_TRANSLATE_NOOP("QRegularExpression", "PCRE does not support \\L, \\l, \\N{name}, \\U, or \\u"),
+    QT_TRANSLATE_NOOP("QRegularExpression", "number after (?C is > 255"),
+    QT_TRANSLATE_NOOP("QRegularExpression", "closing ) for (?C expected"),
+    QT_TRANSLATE_NOOP("QRegularExpression", "recursive call could loop indefinitely"),
+    QT_TRANSLATE_NOOP("QRegularExpression", "unrecognized character after (?P"),
+    QT_TRANSLATE_NOOP("QRegularExpression", "syntax error in subpattern name (missing terminator)"),
+    QT_TRANSLATE_NOOP("QRegularExpression", "two named subpatterns have the same name"),
+    QT_TRANSLATE_NOOP("QRegularExpression", "invalid UTF-8 string"),
+    QT_TRANSLATE_NOOP("QRegularExpression", "support for \\P, \\p, and \\X has not been compiled"),
+    QT_TRANSLATE_NOOP("QRegularExpression", "malformed \\P or \\p sequence"),
+    QT_TRANSLATE_NOOP("QRegularExpression", "unknown property name after \\P or \\p"),
+    QT_TRANSLATE_NOOP("QRegularExpression", "subpattern name is too long (maximum 32 characters)"),
+    QT_TRANSLATE_NOOP("QRegularExpression", "too many named subpatterns (maximum 10000)"),
+    QT_TRANSLATE_NOOP("QRegularExpression", "octal value is greater than \\377 (not in UTF-8 mode)"),
+    QT_TRANSLATE_NOOP("QRegularExpression", "internal error: overran compiling workspace"),
+    QT_TRANSLATE_NOOP("QRegularExpression", "internal error: previously-checked referenced subpattern not found"),
+    QT_TRANSLATE_NOOP("QRegularExpression", "DEFINE group contains more than one branch"),
+    QT_TRANSLATE_NOOP("QRegularExpression", "repeating a DEFINE group is not allowed"),
+    QT_TRANSLATE_NOOP("QRegularExpression", "inconsistent NEWLINE options"),
+    QT_TRANSLATE_NOOP("QRegularExpression", "\\g is not followed by a braced, angle-bracketed, or quoted name/number or by a plain number"),
+    QT_TRANSLATE_NOOP("QRegularExpression", "a numbered reference must not be zero"),
+    QT_TRANSLATE_NOOP("QRegularExpression", "an argument is not allowed for (*ACCEPT), (*FAIL), or (*COMMIT)"),
+    QT_TRANSLATE_NOOP("QRegularExpression", "(*VERB) not recognized"),
+    QT_TRANSLATE_NOOP("QRegularExpression", "number is too big"),
+    QT_TRANSLATE_NOOP("QRegularExpression", "subpattern name expected"),
+    QT_TRANSLATE_NOOP("QRegularExpression", "digit expected after (?+"),
+    QT_TRANSLATE_NOOP("QRegularExpression", "] is an invalid data character in JavaScript compatibility mode"),
+    QT_TRANSLATE_NOOP("QRegularExpression", "different names for subpatterns of the same number are not allowed"),
+    QT_TRANSLATE_NOOP("QRegularExpression", "(*MARK) must have an argument"),
+    QT_TRANSLATE_NOOP("QRegularExpression", "this version of PCRE is not compiled with PCRE_UCP support"),
+    QT_TRANSLATE_NOOP("QRegularExpression", "\\c must be followed by an ASCII character"),
+    QT_TRANSLATE_NOOP("QRegularExpression", "\\k is not followed by a braced, angle-bracketed, or quoted name"),
+    QT_TRANSLATE_NOOP("QRegularExpression", "internal error: unknown opcode in find_fixedlength()"),
+    QT_TRANSLATE_NOOP("QRegularExpression", "\\N is not supported in a class"),
+    QT_TRANSLATE_NOOP("QRegularExpression", "too many forward references"),
+    QT_TRANSLATE_NOOP("QRegularExpression", "disallowed Unicode code point (>= 0xd800 && <= 0xdfff)"),
+    QT_TRANSLATE_NOOP("QRegularExpression", "invalid UTF-16 string")
+};
+#endif // #if 0
+
 QT_END_NAMESPACE