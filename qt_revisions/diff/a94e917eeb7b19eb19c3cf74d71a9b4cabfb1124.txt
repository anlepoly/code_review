diff --git a/configure b/configure
index 5f118ee..4f58afc 100755
--- a/configure
+++ b/configure
@@ -4215,6 +4215,9 @@ for _SQLDR in $CFG_SQL_AVAILABLE; do
                     if [ -n "$PKG_CONFIG" ]; then
                         QT_CFLAGS_SQLITE=`$PKG_CONFIG --cflags sqlite3 2>/dev/null`
                         QT_LFLAGS_SQLITE=`$PKG_CONFIG --libs sqlite3 2>/dev/null`
+                    else
+                        QT_CFLAGS_SQLITE=
+                        QT_LFLAGS_SQLITE="-lsqlite3 -lz"
                     fi
                     if "$unixtests/compile.test" "$XQMAKESPEC" "$QMAKE_CONFIG" $OPT_VERBOSE "$relpath" "$outpath" config.tests/unix/sqlite "SQLite" $QT_LFLAGS_SQLITE $L_FLAGS $QT_CFLAGS_SQLITE $I_FLAGS $D_FLAGS $l_FLAGS $MAC_CONFIG_TEST_COMMANDLINE; then
                         if [ "$CFG_SQL_sqlite" = "auto" ]; then
diff --git a/tools/configure/configureapp.cpp b/tools/configure/configureapp.cpp
index 63d8b7d..153be04 100644
--- a/tools/configure/configureapp.cpp
+++ b/tools/configure/configureapp.cpp
@@ -2010,11 +2010,17 @@ bool Configure::checkAvailability(const QString &part)
         available = true; // Built in, we have a fork
     else if (part == "SQL_SQLITE_LIB") {
         if (dictionary[ "SQL_SQLITE_LIB" ] == "system") {
-            available = findFile("sqlite3.h") && findFile("sqlite3.lib");
-            if (available)
-                dictionary[ "QT_LFLAGS_SQLITE" ] += "sqlite3.lib";
-        } else
+            if ((platform() == QNX) || (platform() == BLACKBERRY)) {
+                available = true;
+                dictionary[ "QT_LFLAGS_SQLITE" ] += "-lsqlite3 -lz";
+            } else {
+                available = findFile("sqlite3.h") && findFile("sqlite3.lib");
+                if (available)
+                    dictionary[ "QT_LFLAGS_SQLITE" ] += "sqlite3.lib";
+            }
+        } else {
             available = true;
+        }
     } else if (part == "SQL_SQLITE2")
         available = findFile("sqlite.h") && findFile("sqlite.lib");
     else if (part == "SQL_IBASE")