diff --git a/src/corelib/tools/qstring.h b/src/corelib/tools/qstring.h
index 285369a..f1bad5c 100644
--- a/src/corelib/tools/qstring.h
+++ b/src/corelib/tools/qstring.h
@@ -711,7 +711,7 @@ inline bool QString::isDetached() const
 { return d->ref == 1; }
 inline QString &QString::operator=(const QLatin1String &s)
 {
-    *this = fromLatin1(s.latin1());
+    *this = fromLatin1(s.latin1(), s.size());
     return *this;
 }
 inline void QString::clear()
diff --git a/tests/auto/corelib/tools/qstring/tst_qstring.cpp b/tests/auto/corelib/tools/qstring/tst_qstring.cpp
index 781377f..dae1dc4 100644
--- a/tests/auto/corelib/tools/qstring/tst_qstring.cpp
+++ b/tests/auto/corelib/tools/qstring/tst_qstring.cpp
@@ -224,6 +224,7 @@ private slots:
     void operatorGreaterWithQLatin1String();
     void compareQLatin1Strings();
     void fromQLatin1StringWithLength();
+    void assignQLatin1String();
 };
 
 typedef QList<int> IntList;
@@ -5286,6 +5287,28 @@ void tst_QString::fromQLatin1StringWithLength()
     QCOMPARE(foo, QString::fromLatin1("foo"));
 }
 
+void tst_QString::assignQLatin1String()
+{
+    QString empty = QLatin1String("");
+    QVERIFY(empty.isEmpty());
+    QVERIFY(!empty.isNull());
+
+    QString null = QLatin1String(0);
+    QVERIFY(null.isEmpty());
+    QVERIFY(null.isNull());
+
+    QLatin1String latin1foo("foo");
+    QString foo = latin1foo;
+    QCOMPARE(foo.size(), latin1foo.size());
+    QCOMPARE(foo, QString::fromLatin1("foo"));
+
+    QLatin1String latin1subfoo("foobar", 3);
+    foo = latin1subfoo;
+    QCOMPARE(foo.size(), latin1subfoo.size());
+    QCOMPARE(foo, QString::fromLatin1("foo"));
+
+}
+
 QTEST_APPLESS_MAIN(tst_QString)
 
 #include "tst_qstring.moc"