diff --git a/src/quick/items/qquickflickable.cpp b/src/quick/items/qquickflickable.cpp
index 0218aa5..9d69034 100644
--- a/src/quick/items/qquickflickable.cpp
+++ b/src/quick/items/qquickflickable.cpp
@@ -539,12 +539,12 @@ void QQuickFlickablePrivate::updateBeginningEnd()
 
     if (vData.extentsChanged) {
         vData.extentsChanged = false;
-        emit q->yOriginChanged();
+        emit q->originYChanged();
     }
 
     if (hData.extentsChanged) {
         hData.extentsChanged = false;
-        emit q->xOriginChanged();
+        emit q->originXChanged();
     }
 
     if (atBoundaryChange)
@@ -1835,21 +1835,24 @@ void QQuickFlickable::setRightMargin(qreal m)
 }
 
 /*!
-    \qmlproperty real QtQuick2::Flickable::xOrigin
-    \qmlproperty real QtQuick2::Flickable::yOrigin
+    \qmlproperty real QtQuick2::Flickable::originX
+    \qmlproperty real QtQuick2::Flickable::originY
 
-    These properties hold the origin of the content.  This is usually (0,0), however
-    ListView and GridView may have an arbitrary origin due to delegate size variation,
-    or item insertion/removal outside the visible region.
+    These properties hold the origin of the content. This value always refers
+    to the top-left position of the content regardless of layout direction.
+
+    This is usually (0,0), however ListView and GridView may have an arbitrary
+    origin due to delegate size variation, or item insertion/removal outside
+    the visible region.
 */
 
-qreal QQuickFlickable::yOrigin() const
+qreal QQuickFlickable::originY() const
 {
     Q_D(const QQuickFlickable);
     return -minYExtent() + d->vData.startMargin;
 }
 
-qreal QQuickFlickable::xOrigin() const
+qreal QQuickFlickable::originX() const
 {
     Q_D(const QQuickFlickable);
     return -minXExtent() + d->hData.startMargin;
diff --git a/src/quick/items/qquickflickable_p.h b/src/quick/items/qquickflickable_p.h
index 68e6cae..2c7b825 100644
--- a/src/quick/items/qquickflickable_p.h
+++ b/src/quick/items/qquickflickable_p.h
@@ -63,11 +63,11 @@ class Q_QUICK_PRIVATE_EXPORT QQuickFlickable : public QQuickItem
 
     Q_PROPERTY(qreal topMargin READ topMargin WRITE setTopMargin NOTIFY topMarginChanged)
     Q_PROPERTY(qreal bottomMargin READ bottomMargin WRITE setBottomMargin NOTIFY bottomMarginChanged)
-    Q_PROPERTY(qreal yOrigin READ yOrigin NOTIFY yOriginChanged)
+    Q_PROPERTY(qreal originY READ originY NOTIFY originYChanged)
 
     Q_PROPERTY(qreal leftMargin READ leftMargin WRITE setLeftMargin NOTIFY leftMarginChanged)
     Q_PROPERTY(qreal rightMargin READ rightMargin WRITE setRightMargin NOTIFY rightMarginChanged)
-    Q_PROPERTY(qreal xOrigin READ xOrigin NOTIFY xOriginChanged)
+    Q_PROPERTY(qreal originX READ originX NOTIFY originXChanged)
 
     Q_PROPERTY(qreal horizontalVelocity READ horizontalVelocity NOTIFY horizontalVelocityChanged)
     Q_PROPERTY(qreal verticalVelocity READ verticalVelocity NOTIFY verticalVelocityChanged)
@@ -144,8 +144,8 @@ public:
     qreal rightMargin() const;
     void setRightMargin(qreal m);
 
-    virtual qreal yOrigin() const;
-    virtual qreal xOrigin() const;
+    virtual qreal originY() const;
+    virtual qreal originX() const;
 
     bool isMoving() const;
     bool isMovingHorizontally() const;
@@ -200,8 +200,8 @@ Q_SIGNALS:
     void bottomMarginChanged();
     void leftMarginChanged();
     void rightMarginChanged();
-    void yOriginChanged();
-    void xOriginChanged();
+    void originYChanged();
+    void originXChanged();
     void movingChanged();
     void movingHorizontallyChanged();
     void movingVerticallyChanged();
diff --git a/src/quick/items/qquickitemview.cpp b/src/quick/items/qquickitemview.cpp
index 8b8f935..bd7bf32 100644
--- a/src/quick/items/qquickitemview.cpp
+++ b/src/quick/items/qquickitemview.cpp
@@ -1347,7 +1347,7 @@ void QQuickItemView::setContentY(qreal pos)
     QQuickFlickable::setContentY(pos);
 }
 
-qreal QQuickItemView::xOrigin() const
+qreal QQuickItemView::originX() const
 {
     Q_D(const QQuickItemView);
     if (d->layoutOrientation() == Qt::Horizontal
@@ -1355,10 +1355,10 @@ qreal QQuickItemView::xOrigin() const
             && contentWidth() < width()) {
         return d->lastPosition() - d->footerSize();
     }
-    return QQuickFlickable::xOrigin();
+    return QQuickFlickable::originX();
 }
 
-qreal QQuickItemView::yOrigin() const
+qreal QQuickItemView::originY() const
 {
     Q_D(const QQuickItemView);
     if (d->layoutOrientation() == Qt::Vertical
@@ -1366,7 +1366,7 @@ qreal QQuickItemView::yOrigin() const
             && contentHeight() < height()) {
         return d->lastPosition() - d->footerSize();
     }
-    return QQuickFlickable::yOrigin();
+    return QQuickFlickable::originY();
 }
 
 void QQuickItemView::updatePolish()
diff --git a/src/quick/items/qquickitemview_p.h b/src/quick/items/qquickitemview_p.h
index 89e5930..63f353e 100644
--- a/src/quick/items/qquickitemview_p.h
+++ b/src/quick/items/qquickitemview_p.h
@@ -209,8 +209,8 @@ public:
 
     virtual void setContentX(qreal pos);
     virtual void setContentY(qreal pos);
-    virtual qreal xOrigin() const;
-    virtual qreal yOrigin() const;
+    virtual qreal originX() const;
+    virtual qreal originY() const;
 
 signals:
     void modelChanged();
diff --git a/tests/auto/quick/qquickflickable/tst_qquickflickable.cpp b/tests/auto/quick/qquickflickable/tst_qquickflickable.cpp
index b6d9d03..dc895dc 100644
--- a/tests/auto/quick/qquickflickable/tst_qquickflickable.cpp
+++ b/tests/auto/quick/qquickflickable/tst_qquickflickable.cpp
@@ -1050,8 +1050,8 @@ void tst_qquickflickable::margins()
     QCOMPARE(obj->contentY(), -20.);
     QCOMPARE(obj->contentWidth(), 1600.);
     QCOMPARE(obj->contentHeight(), 600.);
-    QCOMPARE(obj->xOrigin(), 0.);
-    QCOMPARE(obj->yOrigin(), 0.);
+    QCOMPARE(obj->originX(), 0.);
+    QCOMPARE(obj->originY(), 0.);
 
     // Reduce left margin
     obj->setLeftMargin(30);
diff --git a/tests/auto/quick/qquickgridview/tst_qquickgridview.cpp b/tests/auto/quick/qquickgridview/tst_qquickgridview.cpp
index 472b9a0..001fd0d 100644
--- a/tests/auto/quick/qquickgridview/tst_qquickgridview.cpp
+++ b/tests/auto/quick/qquickgridview/tst_qquickgridview.cpp
@@ -3585,13 +3585,13 @@ void tst_QQuickGridView::extents()
     QCOMPARE(static_cast<GVAccessor*>(gridview)->maxX(), maxPos.x());
     QCOMPARE(static_cast<GVAccessor*>(gridview)->maxY(), maxPos.y());
 
-    QCOMPARE(gridview->xOrigin(), origin_empty.x());
-    QCOMPARE(gridview->yOrigin(), origin_empty.y());
+    QCOMPARE(gridview->originX(), origin_empty.x());
+    QCOMPARE(gridview->originY(), origin_empty.y());
     for (int i=0; i<30; i++)
         model.addItem("Item" + QString::number(i), "");
     QTRY_COMPARE(gridview->count(), model.count());
-    QCOMPARE(gridview->xOrigin(), origin_nonEmpty.x());
-    QCOMPARE(gridview->yOrigin(), origin_nonEmpty.y());
+    QCOMPARE(gridview->originX(), origin_nonEmpty.x());
+    QCOMPARE(gridview->originY(), origin_nonEmpty.y());
 
     releaseView(canvas);
 }
@@ -4180,7 +4180,7 @@ void tst_QQuickGridView::margins()
         QTRY_COMPARE(QQuickItemPrivate::get(gridview)->polishScheduled, false);
 
         QCOMPARE(gridview->contentX(), -30.);
-        QCOMPARE(gridview->xOrigin(), 0.);
+        QCOMPARE(gridview->originX(), 0.);
 
         // check end bound
         gridview->positionViewAtEnd();
@@ -4190,23 +4190,23 @@ void tst_QQuickGridView::margins()
         QTRY_COMPARE(gridview->contentX(), pos + 50);
 
         // remove item before visible and check that left margin is maintained
-        // and xOrigin is updated
+        // and originX is updated
         gridview->setContentX(200);
         model.removeItems(0, 4);
         QTest::qWait(100);
         gridview->setContentX(-50);
         gridview->returnToBounds();
-        QCOMPARE(gridview->xOrigin(), 100.);
+        QCOMPARE(gridview->originX(), 100.);
         QTRY_COMPARE(gridview->contentX(), 70.);
 
         // reduce left margin
         gridview->setLeftMargin(20);
-        QCOMPARE(gridview->xOrigin(), 100.);
+        QCOMPARE(gridview->originX(), 100.);
         QTRY_COMPARE(gridview->contentX(), 80.);
 
         // check end bound
         gridview->positionViewAtEnd();
-        QCOMPARE(gridview->xOrigin(), 0.); // positionViewAtEnd() resets origin
+        QCOMPARE(gridview->originX(), 0.); // positionViewAtEnd() resets origin
         pos = gridview->contentX();
         gridview->setContentX(pos + 80);
         gridview->returnToBounds();
@@ -4215,7 +4215,7 @@ void tst_QQuickGridView::margins()
         // reduce right margin
         pos = gridview->contentX();
         gridview->setRightMargin(40);
-        QCOMPARE(gridview->xOrigin(), 0.);
+        QCOMPARE(gridview->originX(), 0.);
         QTRY_COMPARE(gridview->contentX(), pos-10);
 
         delete canvas;
@@ -4243,7 +4243,7 @@ void tst_QQuickGridView::margins()
         QTRY_VERIFY(contentItem != 0);
 
         QTRY_COMPARE(gridview->contentX(), -240+50.);
-        QTRY_COMPARE(gridview->xOrigin(), -100. * 10);
+        QTRY_COMPARE(gridview->originX(), -100. * 10);
 
         // check end bound
         gridview->positionViewAtEnd();
@@ -4253,25 +4253,25 @@ void tst_QQuickGridView::margins()
         QTRY_COMPARE(gridview->contentX(), pos - 30);
 
         // remove item before visible and check that left margin is maintained
-        // and xOrigin is updated
+        // and originX is updated
         gridview->setContentX(-400);
         QTRY_COMPARE(QQuickItemPrivate::get(gridview)->polishScheduled, false);
         model.removeItems(0, 4);
         QTRY_COMPARE(model.count(), gridview->count());
         gridview->setContentX(-240+50);
         gridview->returnToBounds();
-        QCOMPARE(gridview->xOrigin(), -1000.);
+        QCOMPARE(gridview->originX(), -1000.);
         QTRY_COMPARE(gridview->contentX(), -240-50.);
 
         // reduce right margin
         pos = gridview->contentX();
         gridview->setRightMargin(40);
-        QCOMPARE(gridview->xOrigin(), -1000.);
+        QCOMPARE(gridview->originX(), -1000.);
         QTRY_COMPARE(gridview->contentX(), -240-100 + 40.);
 
         // check end bound
         gridview->positionViewAtEnd();
-        QCOMPARE(gridview->xOrigin(), -900.); // positionViewAtEnd() resets origin
+        QCOMPARE(gridview->originX(), -900.); // positionViewAtEnd() resets origin
         pos = gridview->contentX();
         gridview->setContentX(pos - 80);
         gridview->returnToBounds();
@@ -4280,7 +4280,7 @@ void tst_QQuickGridView::margins()
         // reduce left margin
         pos = gridview->contentX();
         gridview->setLeftMargin(20);
-        QCOMPARE(gridview->xOrigin(), -900.);
+        QCOMPARE(gridview->originX(), -900.);
         QTRY_COMPARE(gridview->contentX(), pos+10);
 
         delete canvas;
diff --git a/tests/auto/quick/qquicklistview/tst_qquicklistview.cpp b/tests/auto/quick/qquicklistview/tst_qquicklistview.cpp
index 503d0b0..ca2fcf2 100644
--- a/tests/auto/quick/qquicklistview/tst_qquicklistview.cpp
+++ b/tests/auto/quick/qquicklistview/tst_qquicklistview.cpp
@@ -3740,13 +3740,13 @@ void tst_QQuickListView::extents()
     QCOMPARE(static_cast<LVAccessor*>(listview)->maxX(), maxPos.x());
     QCOMPARE(static_cast<LVAccessor*>(listview)->maxY(), maxPos.y());
 
-    QCOMPARE(listview->xOrigin(), origin_empty.x());
-    QCOMPARE(listview->yOrigin(), origin_empty.y());
+    QCOMPARE(listview->originX(), origin_empty.x());
+    QCOMPARE(listview->originY(), origin_empty.y());
     for (int i=0; i<30; i++)
         model.addItem("Item" + QString::number(i), "");
     QTRY_COMPARE(listview->count(), model.count());
-    QCOMPARE(listview->xOrigin(), origin_nonEmpty.x());
-    QCOMPARE(listview->yOrigin(), origin_nonEmpty.y());
+    QCOMPARE(listview->originX(), origin_nonEmpty.x());
+    QCOMPARE(listview->originY(), origin_nonEmpty.y());
 
     releaseView(canvas);
 }
@@ -4606,7 +4606,7 @@ void tst_QQuickListView::margins()
     QTRY_COMPARE(QQuickItemPrivate::get(listview)->polishScheduled, false);
 
     QCOMPARE(listview->contentY(), -30.);
-    QCOMPARE(listview->yOrigin(), 0.);
+    QCOMPARE(listview->originY(), 0.);
 
     // check end bound
     listview->positionViewAtEnd();
@@ -4617,19 +4617,19 @@ void tst_QQuickListView::margins()
     QTRY_COMPARE(listview->contentY(), pos + 50);
 
     // remove item before visible and check that top margin is maintained
-    // and yOrigin is updated
+    // and originY is updated
     listview->setContentY(100);
     model.removeItem(1);
     QTRY_COMPARE(listview->count(), model.count());
     listview->setContentY(-50);
     QTRY_COMPARE(QQuickItemPrivate::get(listview)->polishScheduled, false);
     listview->returnToBounds();
-    QCOMPARE(listview->yOrigin(), 20.);
+    QCOMPARE(listview->originY(), 20.);
     QTRY_COMPARE(listview->contentY(), -10.);
 
     // reduce top margin
     listview->setTopMargin(20);
-    QCOMPARE(listview->yOrigin(), 20.);
+    QCOMPARE(listview->originY(), 20.);
     QTRY_COMPARE(listview->contentY(), 0.);
 
     // check end bound
@@ -4642,7 +4642,7 @@ void tst_QQuickListView::margins()
     // reduce bottom margin
     pos = listview->contentY();
     listview->setBottomMargin(40);
-    QCOMPARE(listview->yOrigin(), 20.);
+    QCOMPARE(listview->originY(), 20.);
     QTRY_COMPARE(listview->contentY(), pos-10);
 
     delete canvas;