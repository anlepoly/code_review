diff --git a/src/declarative/graphicsitems/qdeclarativetextedit.cpp b/src/declarative/graphicsitems/qdeclarativetextedit.cpp
index 940644c..38bc453 100644
--- a/src/declarative/graphicsitems/qdeclarativetextedit.cpp
+++ b/src/declarative/graphicsitems/qdeclarativetextedit.cpp
@@ -56,7 +56,7 @@
 #include <QGraphicsSceneMouseEvent>
 #include <QDebug>
 #include <QPainter>
-#include <QtGui/QInputPanel>
+#include <QtGui/QInputMethod>
 
 #include <private/qwidgettextcontrol_p.h>
 
@@ -553,7 +553,7 @@ bool QDeclarativeTextEditPrivate::determineHorizontalAlignment()
                     ? control->textCursor().block().layout()->preeditAreaText()
                     : QString();
             alignToRight = preeditText.isEmpty()
-                    ? qApp->inputPanel()->inputDirection() == Qt::RightToLeft
+                    ? qApp->inputMethod()->inputDirection() == Qt::RightToLeft
                     : preeditText.isRightToLeft();
         } else {
             alignToRight = rightToLeftText;
@@ -1816,7 +1816,7 @@ void QDeclarativeTextEdit::openSoftwareInputPanel()
     if (qApp) {
         if (QGraphicsView * view = qobject_cast<QGraphicsView*>(qApp->focusWidget())) {
             if (view->scene() && view->scene() == scene()) {
-                qApp->inputPanel()->show();
+                qApp->inputMethod()->show();
             }
         }
     }
@@ -1865,7 +1865,7 @@ void QDeclarativeTextEdit::closeSoftwareInputPanel()
     if (qApp) {
         if (QGraphicsView * view = qobject_cast<QGraphicsView*>(qApp->focusWidget())) {
             if (view->scene() && view->scene() == scene()) {
-                qApp->inputPanel()->hide();
+                qApp->inputMethod()->hide();
             }
         }
     }
diff --git a/src/declarative/graphicsitems/qdeclarativetextinput.cpp b/src/declarative/graphicsitems/qdeclarativetextinput.cpp
index 8715ba7..ad43cd4 100644
--- a/src/declarative/graphicsitems/qdeclarativetextinput.cpp
+++ b/src/declarative/graphicsitems/qdeclarativetextinput.cpp
@@ -48,7 +48,7 @@
 #include <QValidator>
 #include <QTextCursor>
 #include <QApplication>
-#include <QtGui/QInputPanel>
+#include <QtGui/QInputMethod>
 #include <QFontMetrics>
 #include <QPainter>
 #include <QTextBoundaryFinder>
@@ -411,7 +411,7 @@ bool QDeclarativeTextInputPrivate::determineHorizontalAlignment()
         if (text.isEmpty())
             text = control->preeditAreaText();
         bool isRightToLeft = text.isEmpty()
-                ? qApp->inputPanel()->inputDirection() == Qt::RightToLeft
+                ? qApp->inputMethod()->inputDirection() == Qt::RightToLeft
                 : text.isRightToLeft();
         return setHAlign(isRightToLeft ? QDeclarativeTextInput::AlignRight : QDeclarativeTextInput::AlignLeft);
     }
@@ -1229,7 +1229,7 @@ bool QDeclarativeTextInputPrivate::sendMouseEventToInputContext(
         int mousePos = tmp_cursor - control->cursor();
         if (mousePos >= 0 && mousePos <= control->preeditAreaText().length()) {
             if (eventType == QEvent::MouseButtonRelease) {
-                qApp->inputPanel()->invokeAction(QInputPanel::Click, mousePos);
+                qApp->inputMethod()->invokeAction(QInputPanel::Click, mousePos);
             }
             return true;
         }
diff --git a/tests/auto/declarative/qdeclarativetextedit/tst_qdeclarativetextedit.cpp b/tests/auto/declarative/qdeclarativetextedit/tst_qdeclarativetextedit.cpp
index dcbf83e..62a3a56 100644
--- a/tests/auto/declarative/qdeclarativetextedit/tst_qdeclarativetextedit.cpp
+++ b/tests/auto/declarative/qdeclarativetextedit/tst_qdeclarativetextedit.cpp
@@ -57,7 +57,7 @@
 #include <QClipboard>
 #include <QMimeData>
 #include <private/qapplication_p.h>
-#include <private/qinputpanel_p.h>
+#include <private/qinputmethod_p.h>
 #include <private/qwidgettextcontrol_p.h>
 #include "../shared/platforminputcontext.h"
 
@@ -90,7 +90,7 @@ void sendPreeditText(const QString &text, int cursor)
     attributes.append(QInputMethodEvent::Attribute(QInputMethodEvent::Cursor, cursor,
                                                    text.length(), QVariant()));
     QInputMethodEvent event(text, attributes);
-    QApplication::sendEvent(qApp->inputPanel()->inputItem(), &event);
+    QApplication::sendEvent(qApp->inputMethod()->inputItem(), &event);
 }
 
 
@@ -235,8 +235,8 @@ tst_qdeclarativetextedit::tst_qdeclarativetextedit()
 void tst_qdeclarativetextedit::cleanup()
 {
     // ensure not even skipped tests with custom input context leave it dangling
-    QInputPanelPrivate *inputPanelPrivate = QInputPanelPrivate::get(qApp->inputPanel());
-    inputPanelPrivate->testContext = 0;
+    QInputMethodPrivate *inputMethodPrivate = QInputMethodPrivate::get(qApp->inputMethod());
+    inputMethodPrivate->testContext = 0;
 }
 
 void tst_qdeclarativetextedit::text()
@@ -565,11 +565,11 @@ void tst_qdeclarativetextedit::hAlign_RightToLeft()
 
 #ifndef Q_OS_MAC    // QTBUG-18040
     // empty text with implicit alignment follows the system locale-based
-    // keyboard input direction from QInputPanel::inputDirection
+    // keyboard input direction from QInputMethod::inputDirection
     textEdit->setText("");
-    QCOMPARE(textEdit->hAlign(), qApp->inputPanel()->inputDirection() == Qt::LeftToRight ?
+    QCOMPARE(textEdit->hAlign(), qApp->inputMethod()->inputDirection() == Qt::LeftToRight ?
                                   QDeclarativeTextEdit::AlignLeft : QDeclarativeTextEdit::AlignRight);
-    if (qApp->inputPanel()->inputDirection() == Qt::LeftToRight)
+    if (qApp->inputMethod()->inputDirection() == Qt::LeftToRight)
         QVERIFY(textEdit->positionToRectangle(0).x() < canvas->width()/2);
     else
         QVERIFY(textEdit->positionToRectangle(0).x() > canvas->width()/2);
@@ -586,7 +586,7 @@ void tst_qdeclarativetextedit::hAlign_RightToLeft()
     QDeclarativeComponent textComponent(&engine);
     textComponent.setData(componentStr.toLatin1(), QUrl::fromLocalFile(""));
     QDeclarativeTextEdit *textObject = qobject_cast<QDeclarativeTextEdit*>(textComponent.create());
-    QCOMPARE(textObject->hAlign(), qApp->inputPanel()->inputDirection() == Qt::LeftToRight ?
+    QCOMPARE(textObject->hAlign(), qApp->inputMethod()->inputDirection() == Qt::LeftToRight ?
                                   QDeclarativeTextEdit::AlignLeft : QDeclarativeTextEdit::AlignRight);
     delete textObject;
 #endif
@@ -2492,7 +2492,7 @@ void tst_qdeclarativetextedit::preeditMicroFocus()
     sendPreeditText(preeditText, 0);
     ic.clear();
     QInputMethodEvent imEvent(preeditText, QList<QInputMethodEvent::Attribute>());
-    QApplication::sendEvent(qApp->inputPanel()->inputItem(), &imEvent);
+    QApplication::sendEvent(qApp->inputMethod()->inputItem(), &imEvent);
     currentRect = edit.inputMethodQuery(Qt::ImMicroFocus).toRect();
     QCOMPARE(currentRect, previousRect);
 #if defined(Q_WS_X11) || defined(Q_WS_QWS)
@@ -2536,7 +2536,7 @@ void tst_qdeclarativetextedit::inputContextMouseHandler()
     QApplication::processEvents();
 
     QEXPECT_FAIL("", "QTBUG-24035", Abort);
-    QCOMPARE(ic.m_action, QInputPanel::Click);
+    QCOMPARE(ic.m_action, QInputMethod::Click);
     QCOMPARE(ic.m_invokeActionCallCount, 1);
     QCOMPARE(ic.m_cursorPosition, 2);
 }
diff --git a/tests/auto/declarative/qdeclarativetextinput/tst_qdeclarativetextinput.cpp b/tests/auto/declarative/qdeclarativetextinput/tst_qdeclarativetextinput.cpp
index aae4a95..06d1604 100644
--- a/tests/auto/declarative/qdeclarativetextinput/tst_qdeclarativetextinput.cpp
+++ b/tests/auto/declarative/qdeclarativetextinput/tst_qdeclarativetextinput.cpp
@@ -49,7 +49,7 @@
 #include <QDir>
 #include <QStyle>
 #include <private/qapplication_p.h>
-#include <private/qinputpanel_p.h>
+#include <private/qinputmethod_p.h>
 #include <private/qwidgetlinecontrol_p.h>
 #include "../shared/platforminputcontext.h"
 
@@ -84,7 +84,7 @@ void sendPreeditText(const QString &text, int cursor)
     attributes.append(QInputMethodEvent::Attribute(QInputMethodEvent::Cursor, cursor,
                                                    text.length(), QVariant()));
     QInputMethodEvent event(text, attributes);
-    QApplication::sendEvent(qApp->inputPanel()->inputItem(), &event);
+    QApplication::sendEvent(qApp->inputMethod()->inputItem(), &event);
 }
 
 
@@ -2632,7 +2632,7 @@ void tst_qdeclarativetextinput::inputContextMouseHandler()
     QApplication::processEvents();
 
     QEXPECT_FAIL("", "QTBUG-24035", Abort);
-    QCOMPARE(platformInputContext.m_action, QInputPanel::Click);
+    QCOMPARE(platformInputContext.m_action, QInputMethod::Click);
     QCOMPARE(platformInputContext.m_invokeActionCallCount, 1);
     QCOMPARE(platformInputContext.m_cursorPosition, 2);
 }
@@ -2661,7 +2661,7 @@ void tst_qdeclarativetextinput::inputMethodComposing()
 
     {
         QInputMethodEvent inputEvent(text.mid(3), QList<QInputMethodEvent::Attribute>());
-        QApplication::sendEvent(qApp->inputPanel()->inputItem(), &inputEvent);
+        QApplication::sendEvent(qApp->inputMethod()->inputItem(), &inputEvent);
     }
 
     QCOMPARE(input.isInputMethodComposing(), true);
@@ -2669,7 +2669,7 @@ void tst_qdeclarativetextinput::inputMethodComposing()
 
     {
         QInputMethodEvent inputEvent(text.mid(12), QList<QInputMethodEvent::Attribute>());
-        QApplication::sendEvent(qApp->inputPanel()->inputItem(), &inputEvent);
+        QApplication::sendEvent(qApp->inputMethod()->inputItem(), &inputEvent);
     }
 
     QCOMPARE(input.isInputMethodComposing(), true);
@@ -2677,7 +2677,7 @@ void tst_qdeclarativetextinput::inputMethodComposing()
 
     {
         QInputMethodEvent inputEvent;
-        QApplication::sendEvent(qApp->inputPanel()->inputItem(), &inputEvent);
+        QApplication::sendEvent(qApp->inputMethod()->inputItem(), &inputEvent);
     }
     QCOMPARE(input.isInputMethodComposing(), false);
     QCOMPARE(spy.count(), 2);
diff --git a/tests/auto/declarative/shared/platforminputcontext.h b/tests/auto/declarative/shared/platforminputcontext.h
index 145fb77..85c652e 100644
--- a/tests/auto/declarative/shared/platforminputcontext.h
+++ b/tests/auto/declarative/shared/platforminputcontext.h
@@ -40,24 +40,24 @@
 ****************************************************************************/
 
 #include <qplatforminputcontext_qpa.h>
-#include <QtGui/QInputPanel>
+#include <QtGui/QInputMethod>
 
-#include <private/qinputpanel_p.h>
+#include <private/qinputmethod_p.h>
 
 class PlatformInputContext : public QPlatformInputContext
 {
 public:
     PlatformInputContext()
-        : m_visible(false), m_action(QInputPanel::Action(-1)), m_cursorPosition(0),
+        : m_visible(false), m_action(QInputMethod::Action(-1)), m_cursorPosition(0),
           m_invokeActionCallCount(0), m_showInputPanelCallCount(0), m_hideInputPanelCallCount(0),
           m_updateCallCount(0), m_direction(Qt::LeftToRight)
     {
-        QInputPanelPrivate::get(qApp->inputPanel())->testContext = this;
+        QInputMethodPrivate::get(qApp->inputMethod())->testContext = this;
     }
 
     ~PlatformInputContext()
     {
-        QInputPanelPrivate::get(qApp->inputPanel())->testContext = 0;
+        QInputMethodPrivate::get(qApp->inputMethod())->testContext = 0;
     }
 
     virtual void showInputPanel()
@@ -74,7 +74,7 @@ public:
     {
         return m_visible;
     }
-    virtual void invokeAction(QInputPanel::Action action, int cursorPosition)
+    virtual void invokeAction(QInputMethod::Action action, int cursorPosition)
     {
         m_invokeActionCallCount++;
         m_action = action;
@@ -114,7 +114,7 @@ public:
     }
 
     bool m_visible;
-    QInputPanel::Action m_action;
+    QInputMethod::Action m_action;
     int m_cursorPosition;
     int m_invokeActionCallCount;
     int m_showInputPanelCallCount;