diff --git a/doc/src/declarative/qmlviewer.qdoc b/doc/src/declarative/qmlviewer.qdoc
index b9efd2d..462065f 100644
--- a/doc/src/declarative/qmlviewer.qdoc
+++ b/doc/src/declarative/qmlviewer.qdoc
@@ -200,10 +200,8 @@ through the \c active property of the \l {QML:Qt::application}{Qt.application} o
 
 \o \c runtime.orientation
 
-\o This property indicates the current orientation of the QML Viewer. On the
-N900 platform and most S60 5.0-based or newer Symbian devices, this property
-automatically updates to reflect the device's actual orientation; on other platforms,
-this indicates the orientation currently selected in the QML Viewer's
+\o This property indicates the current orientation of the QML Viewer.
+This indicates the orientation currently selected in the QML Viewer's
 \i {Settings -> Properties} menu. The \c orientation value can be one of the following:
 
 \list
diff --git a/doc/src/declarative/qtquick-intro.qdoc b/doc/src/declarative/qtquick-intro.qdoc
index 1b0477c..e7cc0bf 100644
--- a/doc/src/declarative/qtquick-intro.qdoc
+++ b/doc/src/declarative/qtquick-intro.qdoc
@@ -94,13 +94,12 @@ to export the design to Qt Quick Designer.
 features for completing code snippets, refactoring code, and viewing the element
 hierarchy of QML files.
 \o Build and deploy Qt Quick applications that target multiple desktop and
-mobile platforms, such as Microsoft Windows, Mac OS X, Linux, Symbian, and
-Maemo.
+mobile platforms, such as Microsoft Windows, Mac OS X, Linux, and Maemo.
 \o Debug JavaScript functions and execute JavaScript expressions in the current
 context, and inspect QML at runtime to explore the object structure, debug
 animations, and inspect colors.
 \o Deploy applications to mobile devices and create application installation
-packages for Symbian and Maemo devices that can be published in the Ovi Store
+packages for Maemo devices that can be published in the Ovi Store
 and other channels.
 \o Easily access information with the integrated context-sensitive Qt Help
 system.
diff --git a/doc/src/qtquick1/qmlviewer.qdoc b/doc/src/qtquick1/qmlviewer.qdoc
index 3f0a68b..36606fb 100644
--- a/doc/src/qtquick1/qmlviewer.qdoc
+++ b/doc/src/qtquick1/qmlviewer.qdoc
@@ -200,10 +200,8 @@ through the \c active property of the \l {QML:Qt::application}{Qt.application} o
 
 \o \c runtime.orientation
 
-\o This property indicates the current orientation of the QML Viewer. On the
-N900 platform and most S60 5.0-based or newer Symbian devices, this property
-automatically updates to reflect the device's actual orientation; on other platforms,
-this indicates the orientation currently selected in the QML Viewer's
+\o This property indicates the current orientation of the QML Viewer.
+This indicates the orientation currently selected in the QML Viewer's
 \e {Settings -> Properties} menu. The \c orientation value can be one of the following:
 
 \list
diff --git a/doc/src/qtquick1/qtquick-intro.qdoc b/doc/src/qtquick1/qtquick-intro.qdoc
index 7c3550f..7924b1a 100644
--- a/doc/src/qtquick1/qtquick-intro.qdoc
+++ b/doc/src/qtquick1/qtquick-intro.qdoc
@@ -94,13 +94,12 @@ to export the design to Qt Quick Designer.
 features for completing code snippets, refactoring code, and viewing the element
 hierarchy of QML files.
 \o Build and deploy Qt Quick applications that target multiple desktop and
-mobile platforms, such as Microsoft Windows, Mac OS X, Linux, Symbian, and
-Maemo.
+mobile platforms, such as Microsoft Windows, Mac OS X, Linux, and Maemo.
 \o Debug JavaScript functions and execute JavaScript expressions in the current
 context, and inspect QML at runtime to explore the object structure, debug
 animations, and inspect colors.
 \o Deploy applications to mobile devices and create application installation
-packages for Symbian and Maemo devices that can be published in the Ovi Store
+packages for Maemo devices that can be published in the Ovi Store
 and other channels.
 \o Easily access information with the integrated context-sensitive Qt Help
 system.
diff --git a/examples/declarative/qtquick1.pro b/examples/declarative/qtquick1.pro
index e441d85..a04969b 100644
--- a/examples/declarative/qtquick1.pro
+++ b/examples/declarative/qtquick1.pro
@@ -9,9 +9,6 @@ SUBDIRS = \
 # OpenGL shader examples requires opengl and they contain some C++ and need to be built
 contains(QT_CONFIG, opengl): SUBDIRS += shadereffects
 
-# plugins uses a 'Time' class that conflicts with symbian e32std.h also defining a class of the same name
-symbian:SUBDIRS -= plugins
-
 # These examples contain no C++ and can simply be copied
 sources.files = \
    animation \
diff --git a/examples/declarative/qtquick1/cppextensions/imageprovider/imageprovider.pro b/examples/declarative/qtquick1/cppextensions/imageprovider/imageprovider.pro
index 6f317b4..5595ac6 100644
--- a/examples/declarative/qtquick1/cppextensions/imageprovider/imageprovider.pro
+++ b/examples/declarative/qtquick1/cppextensions/imageprovider/imageprovider.pro
@@ -17,12 +17,3 @@ ImageProviderCore_sources.files = \
 ImageProviderCore_sources.path = $$[QT_INSTALL_EXAMPLES]/declarative/imageprovider/ImageProviderCore
 
 INSTALLS = sources ImageProviderCore_sources target
-
-symbian:{
-    include($$QT_SOURCE_TREE/examples/symbianpkgrules.pri)
-    TARGET.EPOCALLOWDLLDATA = 1
-
-    importFiles.sources = ImageProviderCore/qmlimageproviderplugin.dll ImageProviderCore/qmldir
-    importFiles.path = ImageProviderCore
-    DEPLOYMENT = importFiles
-}
diff --git a/examples/declarative/qtquick1/cppextensions/plugins/plugins.pro b/examples/declarative/qtquick1/cppextensions/plugins/plugins.pro
index b7610a8..816b9d0 100644
--- a/examples/declarative/qtquick1/cppextensions/plugins/plugins.pro
+++ b/examples/declarative/qtquick1/cppextensions/plugins/plugins.pro
@@ -22,8 +22,3 @@ sources.path += $$[QT_INSTALL_EXAMPLES]/declarative/plugins
 target.path += $$[QT_INSTALL_EXAMPLES]/declarative/plugins/com/nokia/TimeExample
 
 INSTALLS += qdeclarativesources sources target
-
-symbian {
-    include($$QT_SOURCE_TREE/examples/symbianpkgrules.pri)
-    TARGET.EPOCALLOWDLLDATA = 1
-}
diff --git a/examples/declarative/qtquick1/cppextensions/qwidgets/qwidgets.pro b/examples/declarative/qtquick1/cppextensions/qwidgets/qwidgets.pro
index 2e610f9..292ac2c 100644
--- a/examples/declarative/qtquick1/cppextensions/qwidgets/qwidgets.pro
+++ b/examples/declarative/qtquick1/cppextensions/qwidgets/qwidgets.pro
@@ -12,13 +12,3 @@ sources.path += $$[QT_INSTALL_EXAMPLES]/declarative/plugins
 target.path += $$[QT_INSTALL_EXAMPLES]/declarative/plugins
 
 INSTALLS += sources target
-
-symbian:{
-    include($$QT_SOURCE_TREE/examples/symbianpkgrules.pri)
-    TARGET.EPOCALLOWDLLDATA = 1
-
-    importFiles.sources = QWidgets/qmlqwidgetsplugin.dll QWidgets/qmldir
-    importFiles.path = QWidgets
-
-    DEPLOYMENT = importFiles
-}
diff --git a/examples/declarative/qtquick1/qtquick1.pro b/examples/declarative/qtquick1/qtquick1.pro
index 0618705..296637a 100644
--- a/examples/declarative/qtquick1/qtquick1.pro
+++ b/examples/declarative/qtquick1/qtquick1.pro
@@ -6,9 +6,6 @@ SUBDIRS = \
    modelviews \
    tutorials
 
-# plugins uses a 'Time' class that conflicts with symbian e32std.h also defining a class of the same name
-symbian:SUBDIRS -= plugins
-
 # These examples contain no C++ and can simply be copied
 sources.files = \
    animation \
diff --git a/examples/declarative/qtquick1/tutorials/extending/chapter6-plugins/chapter6-plugins.pro b/examples/declarative/qtquick1/tutorials/extending/chapter6-plugins/chapter6-plugins.pro
index 3533096..4b3f4d1 100644
--- a/examples/declarative/qtquick1/tutorials/extending/chapter6-plugins/chapter6-plugins.pro
+++ b/examples/declarative/qtquick1/tutorials/extending/chapter6-plugins/chapter6-plugins.pro
@@ -13,8 +13,3 @@ HEADERS += piechart.h \
 SOURCES += piechart.cpp \
            pieslice.cpp \
            chartsplugin.cpp
-
-symbian {
-    include($$QT_SOURCE_TREE/examples/symbianpkgrules.pri)
-    TARGET.EPOCALLOWDLLDATA = 1
-}
diff --git a/src/imports/qt47/qt47.pro b/src/imports/qt47/qt47.pro
index 34a608a..7bddc89 100644
--- a/src/imports/qt47/qt47.pro
+++ b/src/imports/qt47/qt47.pro
@@ -17,14 +17,4 @@ target.path = $$[QT_INSTALL_IMPORTS]/$$TARGETPATH
 qmldir.files += $$PWD/qmldir
 qmldir.path +=  $$[QT_INSTALL_IMPORTS]/$$TARGETPATH
 
-symbian:{
-#    TARGET.UID3 = 
-    
-    isEmpty(DESTDIR):importFiles.files = qtquick1plugin$${QT_LIBINFIX}.dll qmldir
-    else:importFiles.files = $$DESTDIR/qtquick1plugin$${QT_LIBINFIX}.dll qmldir
-    importFiles.path = $$QT_IMPORTS_BASE_DIR/$$TARGETPATH
-    
-    DEPLOYMENT = importFiles
-}
-
 INSTALLS += target qmldir
diff --git a/src/imports/qtquick1/qtquick1.pro b/src/imports/qtquick1/qtquick1.pro
index 0ba435d..f7a9953 100644
--- a/src/imports/qtquick1/qtquick1.pro
+++ b/src/imports/qtquick1/qtquick1.pro
@@ -17,14 +17,4 @@ target.path = $$[QT_INSTALL_IMPORTS]/$$TARGETPATH
 qmldir.files += $$PWD/qmldir
 qmldir.path +=  $$[QT_INSTALL_IMPORTS]/$$TARGETPATH
 
-symbian:{
-#    TARGET.UID3 = 
-    
-    isEmpty(DESTDIR):importFiles.files = qtquick1plugin$${QT_LIBINFIX}.dll qmldir
-    else:importFiles.files = $$DESTDIR/qtquick1plugin$${QT_LIBINFIX}.dll qmldir
-    importFiles.path = $$QT_IMPORTS_BASE_DIR/$$TARGETPATH
-    
-    DEPLOYMENT = importFiles
-}
-
 INSTALLS += target qmldir
diff --git a/src/qtquick1/graphicsitems/qdeclarativemousearea.cpp b/src/qtquick1/graphicsitems/qdeclarativemousearea.cpp
index 8d09e0c..171b3e9 100644
--- a/src/qtquick1/graphicsitems/qdeclarativemousearea.cpp
+++ b/src/qtquick1/graphicsitems/qdeclarativemousearea.cpp
@@ -684,10 +684,7 @@ void QDeclarative1MouseArea::hoverLeaveEvent(QGraphicsSceneHoverEvent *event)
 void QDeclarative1MouseArea::contextMenuEvent(QGraphicsSceneContextMenuEvent *event)
 {
     bool acceptsContextMenuButton;
-#if defined(Q_OS_SYMBIAN)
-    // In Symbian a Long Tap on the screen will trigger. See QSymbianControl::HandleLongTapEventL().
-    acceptsContextMenuButton = acceptedButtons() & Qt::LeftButton;
-#elif defined(Q_WS_WINCE)
+#if defined(Q_WS_WINCE)
     // ### WinCE can trigger context menu event with a gesture in the left button or a
     // click with the right button. Since we have no way here to differentiate them when
     // event happens, accepting either of the them will block the event.
diff --git a/src/qtquick1/graphicsitems/qdeclarativetextedit.cpp b/src/qtquick1/graphicsitems/qdeclarativetextedit.cpp
index a1131e4..2d3bf4b 100644
--- a/src/qtquick1/graphicsitems/qdeclarativetextedit.cpp
+++ b/src/qtquick1/graphicsitems/qdeclarativetextedit.cpp
@@ -1769,9 +1769,8 @@ void QDeclarative1TextEditPrivate::updateDefaultTextOption()
     customizing when you want the input keyboard to be shown and hidden in
     your application.
 
-    By default the opening of input panels follows the platform style. On Symbian^1 and
-    Symbian^3 -based devices the panels are opened by clicking TextEdit. On other platforms
-    the panels are automatically opened when TextEdit element gains active focus. Input panels are
+    By default the opening of input panels follows the platform style.
+    The panels are automatically opened when TextEdit element gains active focus. Input panels are
     always closed if no editor has active focus.
 
     You can disable the automatic behavior by setting the property \c activeFocusOnPress to false
@@ -1819,9 +1818,8 @@ void QDeclarative1TextEdit::openSoftwareInputPanel()
     for customizing when you want the input keyboard to be shown and hidden in
     your application.
 
-    By default the opening of input panels follows the platform style. On Symbian^1 and
-    Symbian^3 -based devices the panels are opened by clicking TextEdit. On other platforms
-    the panels are automatically opened when TextEdit element gains active focus. Input panels are
+    By default the opening of input panels follows the platform style.
+    The panels are automatically opened when TextEdit element gains active focus. Input panels are
     always closed if no editor has active focus.
 
     You can disable the automatic behavior by setting the property \c activeFocusOnPress to false
diff --git a/src/qtquick1/graphicsitems/qdeclarativetextedit_p_p.h b/src/qtquick1/graphicsitems/qdeclarativetextedit_p_p.h
index e70675d..711b94c 100644
--- a/src/qtquick1/graphicsitems/qdeclarativetextedit_p_p.h
+++ b/src/qtquick1/graphicsitems/qdeclarativetextedit_p_p.h
@@ -77,11 +77,6 @@ public:
       mouseSelectionMode(QDeclarative1TextEdit::SelectCharacters), lineCount(0), selectByMouse(false), canPaste(false),
       yoff(0)
     {
-#ifdef Q_OS_SYMBIAN
-        if (QSysInfo::symbianVersion() == QSysInfo::SV_SF_1 || QSysInfo::symbianVersion() == QSysInfo::SV_SF_3) {
-            showInputPanelOnFocus = false;
-        }
-#endif
     }
 
     void init();
diff --git a/src/qtquick1/graphicsitems/qdeclarativetextinput.cpp b/src/qtquick1/graphicsitems/qdeclarativetextinput.cpp
index a971d35..e4960da 100644
--- a/src/qtquick1/graphicsitems/qdeclarativetextinput.cpp
+++ b/src/qtquick1/graphicsitems/qdeclarativetextinput.cpp
@@ -1731,9 +1731,8 @@ void QDeclarative1TextInput::moveCursorSelection(int pos, SelectionMode mode)
     customizing when you want the input keyboard to be shown and hidden in
     your application.
 
-    By default the opening of input panels follows the platform style. On Symbian^1 and
-    Symbian^3 -based devices the panels are opened by clicking TextInput. On other platforms
-    the panels are automatically opened when TextInput element gains active focus. Input panels are
+    By default the opening of input panels follows the platform style.
+    The panels are automatically opened when TextInput element gains active focus. Input panels are
     always closed if no editor has active focus.
 
   . You can disable the automatic behavior by setting the property \c activeFocusOnPress to false
@@ -1781,9 +1780,8 @@ void QDeclarative1TextInput::openSoftwareInputPanel()
     for customizing when you want the input keyboard to be shown and hidden in
     your application.
 
-    By default the opening of input panels follows the platform style. On Symbian^1 and
-    Symbian^3 -based devices the panels are opened by clicking TextInput. On other platforms
-    the panels are automatically opened when TextInput element gains active focus. Input panels are
+    By default the opening of input panels follows the platform style.
+    The panels are automatically opened when TextInput element gains active focus. Input panels are
     always closed if no editor has active focus.
 
   . You can disable the automatic behavior by setting the property \c activeFocusOnPress to false
diff --git a/src/qtquick1/graphicsitems/qdeclarativetextinput_p_p.h b/src/qtquick1/graphicsitems/qdeclarativetextinput_p_p.h
index 7b53016..05c99fe 100644
--- a/src/qtquick1/graphicsitems/qdeclarativetextinput_p_p.h
+++ b/src/qtquick1/graphicsitems/qdeclarativetextinput_p_p.h
@@ -79,11 +79,6 @@ public:
                  autoScroll(true), selectByMouse(false), canPaste(false), hAlignImplicit(true),
                  selectPressed(false)
     {
-#ifdef Q_OS_SYMBIAN
-        if (QSysInfo::symbianVersion() == QSysInfo::SV_SF_1 || QSysInfo::symbianVersion() == QSysInfo::SV_SF_3) {
-            showInputPanelOnFocus = false;
-        }
-#endif
     }
 
     ~QDeclarative1TextInputPrivate()
diff --git a/src/qtquick1/qtquick1.pro b/src/qtquick1/qtquick1.pro
index c59f1af..529e3a0 100644
--- a/src/qtquick1/qtquick1.pro
+++ b/src/qtquick1/qtquick1.pro
@@ -20,16 +20,6 @@ INSTALLS += feature
 
 win32-msvc*:DEFINES *= _CRT_SECURE_NO_WARNINGS
 
-symbian {
-    DEFINES += QT_MAKEDLL
-    CONFIG += epocallowdlldata
-    contains(QT_EDITION, OpenSource) {
-        TARGET.CAPABILITY = LocalServices NetworkServices ReadUserData UserEnvironment WriteUserData
-    } else {
-        TARGET.CAPABILITY = All -Tcb
-    }
-}
-
 #INCLUDEPATH += $$PWD/QtQuick1
 #INCLUDEPATH += $$PWD
 
diff --git a/src/quick/qtquickglobal.h b/src/quick/qtquickglobal.h
index 7748d3c..b80e1ed 100644
--- a/src/quick/qtquickglobal.h
+++ b/src/quick/qtquickglobal.h
@@ -44,7 +44,7 @@
 
 #include <QtCore/qglobal.h>
 
-#if defined(Q_OS_WIN) || defined(Q_OS_SYMBIAN)
+#if defined(Q_OS_WIN)
 #  if defined(QT_MAKEDLL) /* create a Qt DLL library */
 #    if defined(QT_BUILD_QUICK_LIB)
 #      define Q_QUICK_EXPORT Q_DECL_EXPORT