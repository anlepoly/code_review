diff --git a/examples/TopLevel.qml b/examples/TopLevel.qml
index 9b6e412..6220058 100644
--- a/examples/TopLevel.qml
+++ b/examples/TopLevel.qml
@@ -3,7 +3,7 @@ import QtDesktop 0.2
 import "content"
 
 ApplicationWindow {
-    windowTitle: "parent window"
+    title: "parent window"
 
     width: gallery.width
     height: gallery.height
@@ -22,7 +22,7 @@ ApplicationWindow {
         onAccepted: { console.log("Accepted: " + filePaths) }
     }
 
-    menuBar:MenuBar {
+    menuBar: MenuBar {
         Menu {
             text: "File"
             MenuItem {
diff --git a/imports/QtDesktop/ApplicationWindow.qml b/imports/QtDesktop/ApplicationWindow.qml
index 6d1e90c..113a321 100644
--- a/imports/QtDesktop/ApplicationWindow.qml
+++ b/imports/QtDesktop/ApplicationWindow.qml
@@ -42,14 +42,16 @@ import QtQuick 2.0
 import QtDesktop 0.2
 
 Window {
+    id: root
     width: 320
     height: 240
 
-    property alias menuBar: menuBarArea.data
+    property MenuBar menuBar
     property alias toolBar: toolBarArea.data
     property alias statusBar: statusBarArea.data
     default property alias data: contentArea.data
     property alias backgroundColor: syspal.window
+    property bool showMenuBar: menuBar ? menuBar.showMenuBar : false
 
     SystemPalette {id: syspal}
 
@@ -58,16 +60,48 @@ Window {
         color: backgroundColor
     }
 
-    Row {
+    StyleItem {
         id: menuBarArea
         anchors.top: parent.top
         anchors.left: parent.left
         anchors.right: parent.right
+        elementType: "menubar"
+        visible: showMenuBar
+        contentHeight: showMenuBar ? 20 : 0
+        Row {
+            id: row
+            anchors.fill: parent
+            Repeater {
+                model: showMenuBar ? menuBar.menuList.length : 0
+                StyleItem {
+                    id: menuItem
+                    elementType: "menubaritem"
+                    contentWidth: 100
+                    contentHeight: 20
+                    width: text.paintedWidth + 12
+                    height :text.paintedHeight + 4
+                    sunken: true
+                    selected: mouse.pressed
+                    property var menu: menuBar.menuList[index]
+                    Text {
+                        id: text
+                        text: menu.text
+                        anchors.centerIn: parent
+                        renderType: Text.NativeRendering
+                    }
+                    MouseArea {
+                        id: mouse
+                        anchors.fill:parent
+                        onPressed: menu.showPopup(menuItem.x, menuBarArea.height, 0, root)
+                    }
+                }
+            }
+        }
     }
 
     Row {
         id: toolBarArea
-        anchors.top: parent.top
+        anchors.top: menuBarArea.bottom
         anchors.left: parent.left
         anchors.right: parent.right
     }
diff --git a/src/qstyleitem.cpp b/src/qstyleitem.cpp
index 67a5876..6b8cdb6 100644
--- a/src/qstyleitem.cpp
+++ b/src/qstyleitem.cpp
@@ -418,6 +418,21 @@ void QStyleItem::initStyleOption()
         opt->subControls = QStyle::SC_All;
 
     }
+    case MenuBar:
+        if (!m_styleoption) {
+            QStyleOptionMenuItem *menuOpt = new QStyleOptionMenuItem();
+            menuOpt->menuItemType = QStyleOptionMenuItem::EmptyArea;
+            m_styleoption = menuOpt;
+        }
+
+        break;
+    case MenuBarItem:
+        if (!m_styleoption) {
+            QStyleOptionMenuItem *menuOpt = new QStyleOptionMenuItem();
+           menuOpt->text = text();
+           menuOpt->menuItemType = QStyleOptionMenuItem::Normal;
+           m_styleoption = menuOpt;
+        }
         break;
     default:
         break;
@@ -593,6 +608,12 @@ QSize QStyleItem::sizeFromContents(int width, int height)
     case Item: //fall through
         size = qApp->style()->sizeFromContents(QStyle::CT_ItemViewItem, m_styleoption, QSize(width,height));
         break;
+    case MenuBarItem: //fall through
+        size = qApp->style()->sizeFromContents(QStyle::CT_MenuBarItem, m_styleoption, QSize(width,height));
+        break;
+    case MenuBar: //fall through
+        size = qApp->style()->sizeFromContents(QStyle::CT_MenuBar, m_styleoption, QSize(width,height));
+        break;
     default:
         break;
     }
@@ -766,6 +787,10 @@ void QStyleItem::setElementType(const QString &str)
         m_itemType = MacHelpButton;
     } else if (str == "scrollareacorner") {
         m_itemType = ScrollAreaCorner;
+    } else if (str == "menubar") {
+        m_itemType = MenuBar;
+    } else if (str == "menubaritem") {
+        m_itemType = MenuBarItem;
     } else {
         m_itemType = Undefined;
     }
@@ -913,6 +938,12 @@ void QStyleItem::paint(QPainter *painter)
     case TabFrame:
         qApp->style()->drawPrimitive(QStyle::PE_FrameTabWidget, m_styleoption, painter);
         break;
+    case MenuBar:
+        qApp->style()->drawControl(QStyle::CE_MenuBarEmptyArea, m_styleoption, painter);
+        break;
+    case MenuBarItem:
+        qApp->style()->drawControl(QStyle::CE_MenuBarItem, m_styleoption, painter);
+        break;
     case MenuItem:
     case ComboBoxItem: // fall through
         qApp->style()->drawControl(QStyle::CE_MenuItem, m_styleoption, painter);
diff --git a/src/qstyleitem.h b/src/qstyleitem.h
index 14e7f1f..e428720 100644
--- a/src/qstyleitem.h
+++ b/src/qstyleitem.h
@@ -109,7 +109,9 @@ public:
         Widget,
         StatusBar,
         ScrollAreaCorner,
-        MacHelpButton
+        MacHelpButton,
+        MenuBar,
+        MenuBarItem
     };
 
     void paint(QPainter *);
diff --git a/src/qtmenu.cpp b/src/qtmenu.cpp
index 3e8d525..49c4aac 100644
--- a/src/qtmenu.cpp
+++ b/src/qtmenu.cpp
@@ -63,6 +63,7 @@ QtMenu::~QtMenu()
 void QtMenu::setText(const QString &text)
 {
     m_qmenu->setTitle(text);
+    emit textChanged();
 }
 
 QString QtMenu::text() const
@@ -93,7 +94,7 @@ QQmlListProperty<QtMenuBase> QtMenu::menuItems()
     return QQmlListProperty<QtMenuBase>(this, 0, &QtMenu::append_qmenuItem, 0, 0, 0);
 }
 
-void QtMenu::showPopup(qreal x, qreal y, int atActionIndex)
+void QtMenu::showPopup(qreal x, qreal y, int atActionIndex, QQuickWindow * parentWindow)
 {
     if (m_qmenu->isVisible())
         return;
@@ -104,10 +105,11 @@ void QtMenu::showPopup(qreal x, qreal y, int atActionIndex)
     if (atActionIndex >= 0 && atActionIndex < m_qmenu->actions().size())
         atAction = m_qmenu->actions()[atActionIndex];
 
-    QPointF screenPosition;
-    QWindow *tw = window();
-    if (tw)
+    QPointF screenPosition(mapToScene(QPoint(x, y)));
+    QWindow *tw = parentWindow ? parentWindow : window();
+    if (tw) {
         screenPosition = tw->mapToGlobal(QPoint(x, y));
+    }
 
     setHoveredIndex(m_selectedIndex);
     m_qmenu->popup(screenPosition.toPoint(), atAction);
diff --git a/src/qtmenu.h b/src/qtmenu.h
index ffb76a5..c75d7c7 100644
--- a/src/qtmenu.h
+++ b/src/qtmenu.h
@@ -42,13 +42,8 @@
 #define QTMLMENU_H
 #include <QtCore/qglobal.h>
 #include <QtWidgets/qmenu.h>
-#if QT_VERSION < 0x050000
-#include <QtDeclarative/qdeclarative.h>
-#include <QtDeclarative/QDeclarativeListProperty>
-#else
 #include <QtQuick/QtQuick>
 #include <QtQml/QtQml>
-#endif
 #include <QtCore/qabstractitemmodel.h>
 #include <QtCore/QVariant>
 #include "qtmenuitem.h"
@@ -56,15 +51,11 @@
 class QtMenu : public QtMenuBase
 {
     Q_OBJECT
-    Q_PROPERTY(QString text READ text WRITE setText)
+    Q_PROPERTY(QString text READ text WRITE setText NOTIFY textChanged)
     Q_PROPERTY(QVariant model READ model WRITE setModel NOTIFY modelChanged)
     Q_PROPERTY(int selectedIndex READ selectedIndex WRITE setSelectedIndex NOTIFY selectedIndexChanged)
     Q_PROPERTY(int hoveredIndex READ hoveredIndex WRITE setHoveredIndex NOTIFY hoveredIndexChanged)
-#if QT_VERSION < 0x050000
-    Q_PROPERTY(QDeclarativeListProperty<QtMenuBase> menuItems READ menuItems)
-#else
     Q_PROPERTY(QQmlListProperty<QtMenuBase> menuItems READ menuItems)
-#endif
     Q_CLASSINFO("DefaultProperty", "menuItems")
 public:
     QtMenu(QQuickItem *parent = 0);
@@ -86,7 +77,7 @@ public:
 
     Q_INVOKABLE int minimumWidth() const { return m_qmenu->minimumWidth(); }
     Q_INVOKABLE void setMinimumWidth(int w) { m_qmenu->setMinimumWidth(w); }
-    Q_INVOKABLE void showPopup(qreal x, qreal y, int atActionIndex = -1);
+    Q_INVOKABLE void showPopup(qreal x, qreal y, int atActionIndex = -1, QQuickWindow *window = 0);
     Q_INVOKABLE void hidePopup();
     Q_INVOKABLE void clearMenuItems();
     Q_INVOKABLE void addMenuItem(const QString &text);
@@ -106,7 +97,8 @@ Q_SIGNALS:
     void selectedIndexChanged();
     void hoveredIndexChanged();
     void modelChanged(const QVariant &newModel);
-    void rebuldMenu();
+    void rebuildMenu();
+    void textChanged();
 
 private Q_SLOTS:
     void emitSelected();
diff --git a/src/qtmenubar.cpp b/src/qtmenubar.cpp
index 837473d..9f52cb0 100644
--- a/src/qtmenubar.cpp
+++ b/src/qtmenubar.cpp
@@ -44,10 +44,13 @@
 #include <QtWidgets/QMenuBar>
 
 QtMenuBar::QtMenuBar(QQuickItem *parent)
-    : QQuickItem(parent), _menuBar(new QMenuBar)
+    : QQuickItem(parent)
 {
     connect(this, SIGNAL(parentChanged(QQuickItem *)), this, SLOT(updateParent(QQuickItem *)));
     setFlag(QQuickItem::ItemHasContents, false);
+#ifdef Q_OS_MAC
+    _menuBar = new QMenuBar(0);
+#endif
 }
 
 QtMenuBar::~QtMenuBar()
@@ -59,12 +62,20 @@ QQmlListProperty<QtMenu> QtMenuBar::menus()
     return QQmlListProperty<QtMenu>(this, 0, &QtMenuBar::append_menu, 0, 0, 0);
 }
 
-void QtMenuBar::updateParent(QQuickItem * /*newParent*/)
+QList<QObject*> QtMenuBar::menuList()
 {
+    return m_menus;
+}
+
+void QtMenuBar::updateParent(QQuickItem *newParent)
+{
+#ifdef Q_OS_MAC
     _menuBar->clear();
-    foreach (QtMenu *menu, m_menus) {
+    foreach (QObject *obj, m_menus) {
+        QtMenu *menu = qobject_cast<QtMenu*>(obj);
         _menuBar->addMenu(menu->qmenu());
     }
+#endif
 }
 
 void QtMenuBar::append_menu(QQmlListProperty<QtMenu> *list, QtMenu *menu)
@@ -73,9 +84,10 @@ void QtMenuBar::append_menu(QQmlListProperty<QtMenu> *list, QtMenu *menu)
     if (menuBar) {
         menu->setParent(menuBar);
         menuBar->m_menus.append(menu);
+#ifdef Q_OS_MAC
         if (menuBar->_menuBar)
             menuBar->_menuBar->addMenu(menu->qmenu());
+#endif
+        menuBar->menuChanged();
     }
 }
-
-
diff --git a/src/qtmenubar.h b/src/qtmenubar.h
index 04c9217..3375b69 100644
--- a/src/qtmenubar.h
+++ b/src/qtmenubar.h
@@ -52,13 +52,27 @@ class QtMenuBar: public QQuickItem
 {
     Q_OBJECT
 
-    Q_PROPERTY(QQmlListProperty<QtMenu> menus READ menus)
+    Q_PROPERTY(QQmlListProperty<QtMenu> menus READ menus NOTIFY menuChanged)
+    Q_PROPERTY(QList<QObject*> menuList READ menuList NOTIFY menuChanged)
+    Q_PROPERTY(bool showMenuBar READ showMenuBar NOTIFY showMenuBarChanged)
     Q_CLASSINFO("DefaultProperty", "menus")
 public:
     QtMenuBar(QQuickItem *parent = 0);
     ~QtMenuBar();
 
     QQmlListProperty<QtMenu> menus();
+    QList<QObject*> menuList();
+
+    bool showMenuBar() {
+#ifdef Q_OS_MAC
+        return false;
+#endif
+        return true;
+}
+
+signals:
+    void menuChanged();
+    void showMenuBarChanged();
 
 protected Q_SLOTS:
     void updateParent(QQuickItem *newParent);
@@ -67,7 +81,7 @@ private:
     static void append_menu(QQmlListProperty<QtMenu> *list, QtMenu *menu);
 
 private:
-    QList<QtMenu *> m_menus;
+    QList<QObject *> m_menus;
     QMenuBar *_menuBar;
 };