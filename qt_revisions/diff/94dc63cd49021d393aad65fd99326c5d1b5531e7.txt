diff --git a/src/network/access/qhttpthreaddelegate.cpp b/src/network/access/qhttpthreaddelegate.cpp
index 1cef9f2..b35aa48 100644
--- a/src/network/access/qhttpthreaddelegate.cpp
+++ b/src/network/access/qhttpthreaddelegate.cpp
@@ -297,7 +297,7 @@ void QHttpThreadDelegate::startRequest()
     if (synchronous) {
         connect(httpReply,SIGNAL(headerChanged()), this, SLOT(synchronousHeaderChangedSlot()));
         connect(httpReply,SIGNAL(finished()), this, SLOT(synchronousFinishedSlot()));
-        connect(httpReply,SIGNAL(finishedWithError(QNetworkReply::NetworkError, const QString)),
+        connect(httpReply,SIGNAL(finishedWithError(QNetworkReply::NetworkError,QString)),
                 this, SLOT(synchronousFinishedWithErrorSlot(QNetworkReply::NetworkError,QString)));
 
         connect(httpReply, SIGNAL(authenticationRequired(QHttpNetworkRequest,QAuthenticator*)),
@@ -309,13 +309,13 @@ void QHttpThreadDelegate::startRequest()
     } else if (!synchronous) {
         connect(httpReply,SIGNAL(headerChanged()), this, SLOT(headerChangedSlot()));
         connect(httpReply,SIGNAL(finished()), this, SLOT(finishedSlot()));
-        connect(httpReply,SIGNAL(finishedWithError(QNetworkReply::NetworkError, const QString)),
+        connect(httpReply,SIGNAL(finishedWithError(QNetworkReply::NetworkError,QString)),
                 this, SLOT(finishedWithErrorSlot(QNetworkReply::NetworkError,QString)));
         // some signals are only interesting when normal asynchronous style is used
         connect(httpReply,SIGNAL(readyRead()), this, SLOT(readyReadSlot()));
-        connect(httpReply,SIGNAL(dataReadProgress(qint64, qint64)), this, SLOT(dataReadProgressSlot(qint64,qint64)));
+        connect(httpReply,SIGNAL(dataReadProgress(qint64,qint64)), this, SLOT(dataReadProgressSlot(qint64,qint64)));
 #ifndef QT_NO_SSL
-        connect(httpReply,SIGNAL(sslErrors(const QList<QSslError>)), this, SLOT(sslErrorsSlot(QList<QSslError>)));
+        connect(httpReply,SIGNAL(sslErrors(QList<QSslError>)), this, SLOT(sslErrorsSlot(QList<QSslError>)));
 #endif
 
         // In the asynchronous HTTP case we can just forward those signals
diff --git a/src/network/access/qnetworkreplyhttpimpl.cpp b/src/network/access/qnetworkreplyhttpimpl.cpp
index 3e92126..088442d 100644
--- a/src/network/access/qnetworkreplyhttpimpl.cpp
+++ b/src/network/access/qnetworkreplyhttpimpl.cpp
@@ -815,7 +815,7 @@ void QNetworkReplyHttpImplPrivate::postRequest()
                 q, SLOT(replyDownloadProgressSlot(qint64,qint64)),
                 Qt::QueuedConnection);
         QObject::connect(delegate, SIGNAL(error(QNetworkReply::NetworkError,QString)),
-                q, SLOT(httpError(QNetworkReply::NetworkError, const QString)),
+                q, SLOT(httpError(QNetworkReply::NetworkError,QString)),
                 Qt::QueuedConnection);
 #ifndef QT_NO_SSL
         QObject::connect(delegate, SIGNAL(sslConfigurationChanged(QSslConfiguration)),
@@ -833,7 +833,7 @@ void QNetworkReplyHttpImplPrivate::postRequest()
 #endif
 #ifndef QT_NO_SSL
         QObject::connect(delegate, SIGNAL(sslErrors(QList<QSslError>,bool*,QList<QSslError>*)),
-                q, SLOT(replySslErrors(const QList<QSslError> &, bool *, QList<QSslError> *)),
+                q, SLOT(replySslErrors(QList<QSslError>,bool*,QList<QSslError>*)),
                 Qt::BlockingQueuedConnection);
 #endif
         // This signal we will use to start the request.
@@ -853,8 +853,8 @@ void QNetworkReplyHttpImplPrivate::postRequest()
             delegate->httpRequest.setUploadByteDevice(forwardUploadDevice);
 
             // From main thread to user thread:
-            QObject::connect(q, SIGNAL(haveUploadData(QByteArray, bool, qint64)),
-                             forwardUploadDevice, SLOT(haveDataSlot(QByteArray, bool, qint64)), Qt::QueuedConnection);
+            QObject::connect(q, SIGNAL(haveUploadData(QByteArray,bool,qint64)),
+                             forwardUploadDevice, SLOT(haveDataSlot(QByteArray,bool,qint64)), Qt::QueuedConnection);
             QObject::connect(uploadByteDevice.data(), SIGNAL(readyRead()),
                              forwardUploadDevice, SIGNAL(readyRead()),
                              Qt::QueuedConnection);
diff --git a/src/network/socket/qlocalsocket_win.cpp b/src/network/socket/qlocalsocket_win.cpp
index 90c8fce..364eedf 100644
--- a/src/network/socket/qlocalsocket_win.cpp
+++ b/src/network/socket/qlocalsocket_win.cpp
@@ -53,7 +53,7 @@ void QLocalSocketPrivate::init()
     pipeReader = new QWindowsPipeReader(q);
     q->connect(pipeReader, SIGNAL(readyRead()), SIGNAL(readyRead()));
     q->connect(pipeReader, SIGNAL(pipeClosed()), SLOT(_q_pipeClosed()), Qt::QueuedConnection);
-    q->connect(pipeReader, SIGNAL(winError(ulong, const QString &)), SLOT(_q_winError(ulong, const QString &)));
+    q->connect(pipeReader, SIGNAL(winError(ulong,QString)), SLOT(_q_winError(ulong,QString)));
 }
 
 void QLocalSocketPrivate::setErrorString(const QString &function)