diff --git a/src/plugins/qmltooling/qmldbg_ost/qmlostplugin.cpp b/src/plugins/qmltooling/qmldbg_ost/qmlostplugin.cpp
index fb18231..7d120ca 100644
--- a/src/plugins/qmltooling/qmldbg_ost/qmlostplugin.cpp
+++ b/src/plugins/qmltooling/qmldbg_ost/qmlostplugin.cpp
@@ -132,7 +132,7 @@ void QmlOstPlugin::setPort(int port, bool block)
     }
     d->protocol = new QPacketProtocol(d->ost, this);
     QObject::connect(d->protocol, SIGNAL(readyRead()), this, SLOT(readyRead()));
-    qWarning("QML Debugger: Waiting for connection via OST."); // This message is part of the signalling - do not change the format!
+    qDebug("QML Debugger: Waiting for connection via OST."); // This message is part of the signalling - do not change the format!
 }
 
 void QmlOstPlugin::readyRead()
diff --git a/src/plugins/qmltooling/qmldbg_tcp/qtcpserverconnection.cpp b/src/plugins/qmltooling/qmldbg_tcp/qtcpserverconnection.cpp
index 2b12f29..4eccd0d 100644
--- a/src/plugins/qmltooling/qmldbg_tcp/qtcpserverconnection.cpp
+++ b/src/plugins/qmltooling/qmldbg_tcp/qtcpserverconnection.cpp
@@ -147,7 +147,7 @@ void QTcpServerConnection::listen()
     d->tcpServer = new QTcpServer(this);
     QObject::connect(d->tcpServer, SIGNAL(newConnection()), this, SLOT(newConnection()));
     if (d->tcpServer->listen(QHostAddress::Any, d->port))
-        qWarning("QML Debugger: Waiting for connection on port %d...", d->port);
+        qDebug("QML Debugger: Waiting for connection on port %d...", d->port);
     else
         qWarning("QML Debugger: Unable to listen to port %d.", d->port);
 }
diff --git a/src/qml/debugger/qqmldebugserver.cpp b/src/qml/debugger/qqmldebugserver.cpp
index 23b69af..ec3f9da 100644
--- a/src/qml/debugger/qqmldebugserver.cpp
+++ b/src/qml/debugger/qqmldebugserver.cpp
@@ -389,7 +389,7 @@ void QQmlDebugServer::receiveMessage(const QByteArray &message)
                 iter.value()->stateChanged(newState);
             }
 
-            qWarning("QML Debugger: Connection established.");
+            qDebug("QML Debugger: Connection established.");
             d->messageArrivedCondition.wakeAll();
 
         } else if (op == 1) {
diff --git a/src/qml/qml/qqmlengine.cpp b/src/qml/qml/qqmlengine.cpp
index 6f832c2..0c8ff6a 100644
--- a/src/qml/qml/qqmlengine.cpp
+++ b/src/qml/qml/qqmlengine.cpp
@@ -1037,7 +1037,7 @@ QQmlDebuggingEnabler::QQmlDebuggingEnabler()
 {
 #ifndef QQML_NO_DEBUG_PROTOCOL
     if (!QQmlEnginePrivate::qml_debugging_enabled) {
-        qWarning("QML debugging is enabled. Only use this in a safe environment.");
+        qDebug("QML debugging is enabled. Only use this in a safe environment.");
     }
     QQmlEnginePrivate::qml_debugging_enabled = true;
 #endif
diff --git a/tests/auto/qml/debugger/qqmldebugclient/tst_qqmldebugclient.cpp b/tests/auto/qml/debugger/qqmldebugclient/tst_qqmldebugclient.cpp
index 9377ef6..1682913 100644
--- a/tests/auto/qml/debugger/qqmldebugclient/tst_qqmldebugclient.cpp
+++ b/tests/auto/qml/debugger/qqmldebugclient/tst_qqmldebugclient.cpp
@@ -72,7 +72,7 @@ private slots:
 void tst_QQmlDebugClient::initTestCase()
 {
     const QString waitingMsg = QString("QML Debugger: Waiting for connection on port %1...").arg(PORT);
-    QTest::ignoreMessage(QtWarningMsg, waitingMsg.toAscii().constData());
+    QTest::ignoreMessage(QtDebugMsg, waitingMsg.toAscii().constData());
     new QQmlEngine(this);
 
     m_conn = new QQmlDebugConnection(this);
@@ -80,7 +80,7 @@ void tst_QQmlDebugClient::initTestCase()
     QQmlDebugTestClient client("tst_QQmlDebugClient::handshake()", m_conn);
     QQmlDebugTestService service("tst_QQmlDebugClient::handshake()");
 
-    QTest::ignoreMessage(QtWarningMsg, "QML Debugger: Connection established.");
+    QTest::ignoreMessage(QtDebugMsg, "QML Debugger: Connection established.");
     for (int i = 0; i < 50; ++i) {
         // try for 5 seconds ...
         m_conn->connectToHost("127.0.0.1", PORT);
@@ -172,7 +172,7 @@ void tst_QQmlDebugClient::sequentialConnect()
     QTest::qWait(100);
 
     connection2.connectToHost("127.0.0.1", PORT);
-    QTest::ignoreMessage(QtWarningMsg, "QML Debugger: Connection established.");
+    QTest::ignoreMessage(QtDebugMsg, "QML Debugger: Connection established.");
     QVERIFY(connection2.waitForConnected());
     QVERIFY(connection2.isConnected());
     QTRY_VERIFY(client2.state() == QQmlDebugClient::Enabled);
diff --git a/tests/auto/qml/debugger/qqmldebugservice/tst_qqmldebugservice.cpp b/tests/auto/qml/debugger/qqmldebugservice/tst_qqmldebugservice.cpp
index a7fc284..6e14c03 100644
--- a/tests/auto/qml/debugger/qqmldebugservice/tst_qqmldebugservice.cpp
+++ b/tests/auto/qml/debugger/qqmldebugservice/tst_qqmldebugservice.cpp
@@ -77,13 +77,13 @@ private slots:
 void tst_QQmlDebugService::initTestCase()
 {
     const QString waitingMsg = QString("QML Debugger: Waiting for connection on port %1...").arg(PORT);
-    QTest::ignoreMessage(QtWarningMsg, waitingMsg.toAscii().constData());
+    QTest::ignoreMessage(QtDebugMsg, waitingMsg.toAscii().constData());
     new QQmlEngine(this);
 
     m_conn = new QQmlDebugConnection(this);
 
 
-    QTest::ignoreMessage(QtWarningMsg, "QML Debugger: Connection established.");
+    QTest::ignoreMessage(QtDebugMsg, "QML Debugger: Connection established.");
     for (int i = 0; i < 50; ++i) {
         // try for 5 seconds ...
         m_conn->connectToHost("127.0.0.1", PORT);
diff --git a/tests/auto/qml/debugger/qqmlenginedebugservice/tst_qqmlenginedebugservice.cpp b/tests/auto/qml/debugger/qqmlenginedebugservice/tst_qqmlenginedebugservice.cpp
index a35aaff..9756313 100644
--- a/tests/auto/qml/debugger/qqmlenginedebugservice/tst_qqmlenginedebugservice.cpp
+++ b/tests/auto/qml/debugger/qqmlenginedebugservice/tst_qqmlenginedebugservice.cpp
@@ -301,7 +301,7 @@ void tst_QQmlEngineDebugService::initTestCase()
     qRegisterMetaType<QQmlDebugWatch::State>();
     qmlRegisterType<NonScriptProperty>("Test", 1, 0, "NonScriptPropertyElement");
 
-    QTest::ignoreMessage(QtWarningMsg, "QML Debugger: Waiting for connection on port 3768...");
+    QTest::ignoreMessage(QtDebugMsg, "QML Debugger: Waiting for connection on port 3768...");
     m_engine = new QQmlEngine(this);
 
     QList<QByteArray> qml;
@@ -386,7 +386,7 @@ void tst_QQmlEngineDebugService::initTestCase()
     m_conn = new QQmlDebugConnection(this);
     m_conn->connectToHost("127.0.0.1", 3768);
 
-    QTest::ignoreMessage(QtWarningMsg, "QML Debugger: Connection established.");
+    QTest::ignoreMessage(QtDebugMsg, "QML Debugger: Connection established.");
     bool ok = m_conn->waitForConnected();
     QVERIFY(ok);
     QTRY_VERIFY(QQmlDebugService::hasDebuggingClient());