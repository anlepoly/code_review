diff --git a/src/activeqt/container/qaxbase.cpp b/src/activeqt/container/qaxbase.cpp
index 70ad8b3..36fd770 100644
--- a/src/activeqt/container/qaxbase.cpp
+++ b/src/activeqt/container/qaxbase.cpp
@@ -3102,7 +3102,7 @@ QMetaObject *MetaObjectGenerator::metaObject(const QMetaObject *parentObject, co
         int_data[offset++] = strings.enter(key);
         int_data[offset++] = strings.enter(value);
     }
-    Q_ASSERT(offset == header->methodData);
+    Q_ASSERT(offset == uint(header->methodData));
 
     uint paramsOffset = offset + header->methodCount * 5;
     // add each method:
@@ -3137,10 +3137,10 @@ QMetaObject *MetaObjectGenerator::metaObject(const QMetaObject *parentObject, co
                 int_data[paramsOffset++] = strings.enter(paramNames.at(i));
         }
     }
-    Q_ASSERT(offset == header->methodData + header->methodCount * 5);
+    Q_ASSERT(offset == uint(header->methodData + header->methodCount * 5));
     Q_ASSERT(paramsOffset = header->propertyData);
     offset += paramsDataSize;
-    Q_ASSERT(offset == header->propertyData);
+    Q_ASSERT(offset == uint(header->propertyData));
 
     // each property in form name\0type\0
     for (QMap<QByteArray, Property>::ConstIterator it = property_list.begin(); it != property_list.end(); ++it) {
@@ -3156,7 +3156,7 @@ QMetaObject *MetaObjectGenerator::metaObject(const QMetaObject *parentObject, co
         int_data[offset++] = nameToTypeInfo(type, strings);
         int_data[offset++] = flags;
     }
-    Q_ASSERT(offset == header->enumeratorData);
+    Q_ASSERT(offset == uint(header->enumeratorData));
 
     int value_offset = offset + enum_list.count() * 4;
     // each enum in form name\0
@@ -3171,7 +3171,7 @@ QMetaObject *MetaObjectGenerator::metaObject(const QMetaObject *parentObject, co
         int_data[offset++] = value_offset;
         value_offset += count * 2;
     }
-    Q_ASSERT(offset == header->enumeratorData + enum_list.count() * 4);
+    Q_ASSERT(offset == uint(header->enumeratorData + enum_list.count() * 4));
 
     // each enum value in form key\0
     for (QMap<QByteArray, QList<QPair<QByteArray, int> > >::ConstIterator it = enum_list.begin(); it != enum_list.end(); ++it) {
diff --git a/src/activeqt/container/qaxselect.cpp b/src/activeqt/container/qaxselect.cpp
index b8f87ee..d4b2ab7 100644
--- a/src/activeqt/container/qaxselect.cpp
+++ b/src/activeqt/container/qaxselect.cpp
@@ -69,7 +69,8 @@ public:
             if (result == ERROR_SUCCESS) {
                 HKEY sub_key;
                 QString clsid = QString::fromWCharArray(buffer);
-                result = RegOpenKeyEx(classes_key, reinterpret_cast<const wchar_t *>(QString(clsid + "\\Control").utf16()), 0, KEY_READ, &sub_key);
+                const QString key = clsid + QStringLiteral("\\Control");
+                result = RegOpenKeyEx(classes_key, reinterpret_cast<const wchar_t *>(key.utf16()), 0, KEY_READ, &sub_key);
                 if (result == ERROR_SUCCESS) {
                     RegCloseKey(sub_key);
                     RegistryQueryValue(classes_key, buffer, (LPBYTE)buffer, &szBuffer);
diff --git a/src/activeqt/control/qaxfactory.cpp b/src/activeqt/control/qaxfactory.cpp
index 8759e41..0c92da0 100644
--- a/src/activeqt/control/qaxfactory.cpp
+++ b/src/activeqt/control/qaxfactory.cpp
@@ -317,6 +317,7 @@ QString QAxFactory::exposeToSuperClass(const QString &key) const
 */
 bool QAxFactory::stayTopLevel(const QString &key) const
 {
+    Q_UNUSED(key)
     return false;
 }
 
diff --git a/src/activeqt/control/qaxserver.cpp b/src/activeqt/control/qaxserver.cpp
index 9065c7d..e4fe24c 100644
--- a/src/activeqt/control/qaxserver.cpp
+++ b/src/activeqt/control/qaxserver.cpp
@@ -582,7 +582,6 @@ static QByteArray renameOverloads(const QByteArray &name)
 {
     QByteArray newName = name;
     
-    int n = mapping.value(name);
     if (mapping.contains(name)) {
         int n = mapping.value(name);
         newName = name + '_' + QByteArray::number(n);
@@ -1005,7 +1004,7 @@ static HRESULT classIDL(QObject *o, const QMetaObject *mo, const QString &classN
             bool ok = true;
             
             QByteArray type = signal.typeName();
-            if (!type.isEmpty() && type != QStringLiteral("void")) // signals with return value not supported
+            if (!type.isEmpty() && type != "void") // signals with return value not supported
                 continue;
             
             QByteArray ptype(prototype(parameterTypes, parameterNames, &ok));
diff --git a/src/activeqt/control/qaxserverbase.cpp b/src/activeqt/control/qaxserverbase.cpp
index e183c7e..58b4193 100644
--- a/src/activeqt/control/qaxserverbase.cpp
+++ b/src/activeqt/control/qaxserverbase.cpp
@@ -450,7 +450,6 @@ public:
     {
 	*iface = 0;
 
-	HRESULT res = E_NOINTERFACE;
 	if (iid == IID_IUnknown) {
 	    *iface = (IUnknown*)this;
 	    AddRef();
@@ -865,7 +864,7 @@ public:
         if (!qApp) {
             qax_ownQApp = true;
             int argc = 0;
-            QApplication *app = new QApplication(argc, 0);
+            new QApplication(argc, 0);
         }
         qApp->setQuitOnLastWindowClosed(false);
 
@@ -948,7 +947,7 @@ public:
 	return S_OK;
     }
 
-    HRESULT WINAPI CreateInstanceLic(IUnknown *pUnkOuter, IUnknown *pUnkReserved, REFIID iid, BSTR bKey, PVOID *ppObject)
+    HRESULT WINAPI CreateInstanceLic(IUnknown *pUnkOuter, IUnknown * /* pUnkReserved */, REFIID iid, BSTR bKey, PVOID *ppObject)
     {
         QString licenseKey = QString::fromWCharArray(bKey);
 	if (!qAxFactory()->validateLicenseKey(className, licenseKey))
@@ -990,8 +989,9 @@ HRESULT GetClassObject(REFIID clsid, REFIID iid, void **ppUnk)
     the COM server for the respective CLSID.
 */
 QAxServerBase::QAxServerBase(const QString &classname, IUnknown *outerUnknown)
-: aggregatedObject(0), ref(0), ole_ref(0), class_name(classname),
+: aggregatedObject(0),
   m_hWnd(0), hmenuShared(0), hwndMenuOwner(0),
+  ref(0), ole_ref(0), class_name(classname),
   m_outerUnknown(outerUnknown)
 {
     init();
@@ -1650,7 +1650,7 @@ void QAxServerBase::createMenu(QMenuBar *menuBar)
         AppendMenu(hmenuShared, flags, itemId, (const wchar_t *)action->text().utf16());
     }
 
-    OLEMENUGROUPWIDTHS menuWidths = {0,edit,0,object,0,help};
+    OLEMENUGROUPWIDTHS menuWidths = { { 0,edit,0,object,0,help } };
     HRESULT hres = m_spInPlaceFrame->InsertMenus(hmenuShared, &menuWidths);
     if (FAILED(hres)) {
 	::DestroyMenu(hmenuShared);
@@ -1830,6 +1830,7 @@ void QAxServerBase::updateMask()
 static bool checkHRESULT(HRESULT hres)
 {
     const char *name = 0;
+    Q_UNUSED(name);
     switch(hres) {
     case S_OK:
 	return true;
@@ -2059,7 +2060,7 @@ int QAxServerBase::qt_metacall(QMetaObject::Call call, int index, void **argv)
                 VARIANT retval;
                 VariantInit(&retval);
                 VARIANT *pretval = 0;
-                if (!type.isEmpty() && type != QStringLiteral("void"))
+                if (!type.isEmpty() && type != "void")
                     pretval = &retval;
 
                 // call listeners (through IDispatch)
@@ -2242,7 +2243,7 @@ HRESULT WINAPI QAxServerBase::GetTypeInfoCount(UINT* pctinfo)
 /*
     Provides the ITypeInfo for this IDispatch implementation.
 */
-HRESULT WINAPI QAxServerBase::GetTypeInfo(UINT itinfo, LCID /*lcid*/, ITypeInfo** pptinfo)
+HRESULT WINAPI QAxServerBase::GetTypeInfo(UINT /* itinfo */, LCID /*lcid*/, ITypeInfo** pptinfo)
 {
     if (!pptinfo)
 	return E_POINTER;
@@ -2261,7 +2262,7 @@ HRESULT WINAPI QAxServerBase::GetTypeInfo(UINT itinfo, LCID /*lcid*/, ITypeInfo*
 /*
     Provides the names of the methods implemented in this IDispatch implementation.
 */
-HRESULT WINAPI QAxServerBase::GetIDsOfNames(REFIID riid, LPOLESTR* rgszNames, UINT cNames,
+HRESULT WINAPI QAxServerBase::GetIDsOfNames(REFIID /* riid */, LPOLESTR* rgszNames, UINT cNames,
 				     LCID /*lcid*/, DISPID* rgdispid)
 {
     if (!rgszNames || !rgdispid)
@@ -2413,12 +2414,11 @@ HRESULT WINAPI QAxServerBase::Invoke(DISPID dispidMember, REFIID riid,
 	    QList<QByteArray> ptypes;
 	    if (!prototype.isEmpty())
 		ptypes = prototype.split(',');
-	    int pcount = ptypes.count();
+        UINT pcount = ptypes.count();
 
 	    // verify parameter count
             if (pcount > pDispParams->cArgs) {
                 // count cloned slots immediately following the real thing
-                int defArgs = 0;
                 while (index < mo->methodCount()) {
                     ++index;
                     slot = mo->method(index);
@@ -2464,7 +2464,7 @@ HRESULT WINAPI QAxServerBase::Invoke(DISPID dispidMember, REFIID riid,
                 argv_pointer[0] = 0;
             }
 
-	    for (int p = 0; p < pcount; ++p) {
+        for (UINT p = 0; p < pcount; ++p) {
 		// map the VARIANT to the void*
 		bool out;
 		QByteArray ptype = paramType(ptypes.at(p), &out);
@@ -2492,7 +2492,7 @@ HRESULT WINAPI QAxServerBase::Invoke(DISPID dispidMember, REFIID riid,
 	    }
 
             // return value
-        if (!type.isEmpty() && type != QStringLiteral("void")) {
+        if (!type.isEmpty() && type != "void") {
                 QVariant::Type vt = QVariant::nameToType(type);
                 if (vt == QVariant::UserType)
                     vt = QVariant::Invalid;
@@ -2522,7 +2522,7 @@ HRESULT WINAPI QAxServerBase::Invoke(DISPID dispidMember, REFIID riid,
                 invokeCount = 0;
 
 		// update reference parameters and return value
-		for (int p = 0; p < pcount; ++p) {
+        for (UINT p = 0; p < pcount; ++p) {
 		    bool out;
 		    QByteArray ptype = paramType(ptypes.at(p), &out);
 		    if (out) {
@@ -2530,7 +2530,7 @@ HRESULT WINAPI QAxServerBase::Invoke(DISPID dispidMember, REFIID riid,
 			    ok = false;
 		    }
 		}
-                if (!type.isEmpty() && type != QStringLiteral("void") && pvarResult) {
+                if (!type.isEmpty() && type != "void" && pvarResult) {
                     if (!varp[0].isValid() && type != "QVariant")
                         varp[0] = QVariant(QMetaType::type(type), argv_pointer);
 //                        varp[0].setValue(argv_pointer[0], type);
@@ -2883,7 +2883,7 @@ HRESULT WINAPI QAxServerBase::Load(IStorage *pStg)
     return S_OK;
 }
 
-HRESULT WINAPI QAxServerBase::Save(IStorage *pStg, BOOL fSameAsLoad)
+HRESULT WINAPI QAxServerBase::Save(IStorage *pStg, BOOL /* fSameAsLoad */)
 {
     IStream *spStream = 0;
     QString streamName = QLatin1String(qt.object->metaObject()->className());
@@ -2999,6 +2999,7 @@ HRESULT WINAPI QAxServerBase::Save(IPropertyBag *bag, BOOL clearDirty, BOOL /*sa
 	bag->Write(bstr, &var);
 	SysFreeString(bstr);
     }
+    Q_UNUSED(error)
     return /*error ? E_FAIL :*/ S_OK;
 }
 
@@ -3035,7 +3036,7 @@ HRESULT WINAPI QAxServerBase::GetCurFile(LPOLESTR *currentFile)
     return S_OK;
 }
 
-HRESULT WINAPI QAxServerBase::Load(LPCOLESTR fileName, DWORD mode)
+HRESULT WINAPI QAxServerBase::Load(LPCOLESTR fileName, DWORD /* mode */)
 {
     const QMetaObject *mo = qt.object->metaObject();
     int mimeIndex = mo->indexOfClassInfo("MIME");
@@ -3127,7 +3128,7 @@ HRESULT WINAPI QAxServerBase::Save(LPCOLESTR fileName, BOOL fRemember)
 /*
     Draws the widget into the provided device context.
 */
-HRESULT WINAPI QAxServerBase::Draw(DWORD dwAspect, LONG lindex, void *pvAspect, DVTARGETDEVICE *ptd,
+HRESULT WINAPI QAxServerBase::Draw(DWORD dwAspect, LONG /* lindex */, void * /* pvAspect */, DVTARGETDEVICE *ptd,
 		HDC hicTargetDev, HDC hdcDraw, LPCRECTL lprcBounds, LPCRECTL /*lprcWBounds*/,
 		BOOL(__stdcall* /*pfnContinue*/)(ULONG_PTR), ULONG_PTR /*dwContinue*/)
 {
@@ -3177,8 +3178,8 @@ HRESULT WINAPI QAxServerBase::Draw(DWORD dwAspect, LONG lindex, void *pvAspect,
 /*
     Not implemented.
 */
-HRESULT WINAPI QAxServerBase::GetColorSet(DWORD dwDrawAspect, LONG lindex, void *pvAspect, DVTARGETDEVICE *ptd,
-		HDC hicTargetDev, LOGPALETTE **ppColorSet)
+HRESULT WINAPI QAxServerBase::GetColorSet(DWORD /* dwDrawAspect */, LONG /* lindex */, void * /* pvAspect */, DVTARGETDEVICE * /* ptd */,
+        HDC /* hicTargetDev */, LOGPALETTE ** /* ppColorSet */)
 {
     return E_NOTIMPL;
 }
@@ -3186,7 +3187,7 @@ HRESULT WINAPI QAxServerBase::GetColorSet(DWORD dwDrawAspect, LONG lindex, void
 /*
     Not implemented.
 */
-HRESULT WINAPI QAxServerBase::Freeze(DWORD dwAspect, LONG lindex, void *pvAspect, DWORD *pdwFreeze)
+HRESULT WINAPI QAxServerBase::Freeze(DWORD /* dwAspect */, LONG  /* lindex */, void * /* pvAspect */, DWORD * /* pdwFreeze */)
 {
     return E_NOTIMPL;
 }
@@ -3194,7 +3195,7 @@ HRESULT WINAPI QAxServerBase::Freeze(DWORD dwAspect, LONG lindex, void *pvAspect
 /*
     Not implemented.
 */
-HRESULT WINAPI QAxServerBase::Unfreeze(DWORD dwFreeze)
+HRESULT WINAPI QAxServerBase::Unfreeze(DWORD /* dwFreeze */)
 {
     return E_NOTIMPL;
 }
@@ -3532,11 +3533,9 @@ HRESULT WINAPI QAxServerBase::TranslateAcceleratorW(MSG *pMsg)
                 if (shift) {
                     if (!curFocus->isWindow()) {
                         QWidget *nextFocus = curFocus->nextInFocusChain();
-                        QWidget *prevFocus = 0;
                         QWidget *topLevel = 0;
                         while (nextFocus != curFocus) {
                             if (nextFocus->focusPolicy() & Qt::TabFocus) {
-                                prevFocus = nextFocus;
                                 topLevel = 0;
                             } else if (nextFocus->isWindow()) {
                                 topLevel = nextFocus;
@@ -3614,7 +3613,6 @@ HRESULT WINAPI QAxServerBase::TranslateAcceleratorW(MSG *pMsg)
     m_spClientSite->QueryInterface(IID_IOleControlSite, (void**)&controlSite);
     if (!controlSite)
         return S_FALSE;
-    bool resetUserData = false;
     // set server type in the user-data of the window.
 #ifdef GWLP_USERDATA
     LONG_PTR serverType = QAX_INPROC_SERVER;
@@ -3655,12 +3653,12 @@ HRESULT WINAPI QAxServerBase::OnFrameWindowActivate(BOOL fActivate)
     return S_OK;
 }
 
-HRESULT WINAPI QAxServerBase::OnDocWindowActivate(BOOL fActivate)
+HRESULT WINAPI QAxServerBase::OnDocWindowActivate(BOOL /* fActivate */)
 {
     return S_OK;
 }
 
-HRESULT WINAPI QAxServerBase::ResizeBorder(LPCRECT prcBorder, IOleInPlaceUIWindow *pUIWindow, BOOL fFrameWindow)
+HRESULT WINAPI QAxServerBase::ResizeBorder(LPCRECT /* prcBorder */, IOleInPlaceUIWindow * /* pUIWindow */, BOOL /* fFrameWindow */)
 {
     return S_OK;
 }
@@ -3781,7 +3779,6 @@ HRESULT QAxServerBase::internalActivate()
 
     HRESULT hr = E_FAIL;
     if (!isInPlaceActive) {
-	BOOL bNoRedraw = false;
 	hr = m_spInPlaceSite->CanInPlaceActivate();
 	if (FAILED(hr))
 	    return hr;
@@ -4072,7 +4069,7 @@ HRESULT WINAPI QAxServerBase::SetExtent(DWORD dwDrawAspect, SIZEL* psizel)
 /*
     Not implemented.
 */
-HRESULT WINAPI QAxServerBase::SetHostNames(LPCOLESTR szContainerApp, LPCOLESTR szContainerObj)
+HRESULT WINAPI QAxServerBase::SetHostNames(LPCOLESTR /* szContainerApp */, LPCOLESTR /* szContainerObj */)
 {
     return S_OK;
 }
diff --git a/src/activeqt/control/qaxserverdll.cpp b/src/activeqt/control/qaxserverdll.cpp
index 50c96f7..29ec355 100644
--- a/src/activeqt/control/qaxserverdll.cpp
+++ b/src/activeqt/control/qaxserverdll.cpp
@@ -119,7 +119,7 @@ STDAPI DllCanUnloadNow()
 }
 
 
-EXTERN_C BOOL WINAPI DllMain(HINSTANCE hInstance, DWORD dwReason, LPVOID lpvReserved)
+EXTERN_C BOOL WINAPI DllMain(HINSTANCE hInstance, DWORD dwReason, LPVOID /* lpvReserved */)
 {
     GetModuleFileName(hInstance, qAxModuleFilename, MAX_PATH);
     qAxInstance = hInstance;
diff --git a/src/activeqt/control/qaxservermain.cpp b/src/activeqt/control/qaxservermain.cpp
index 3a601ea..c79a9e1 100644
--- a/src/activeqt/control/qaxservermain.cpp
+++ b/src/activeqt/control/qaxservermain.cpp
@@ -82,7 +82,7 @@ STDAPI DumpIDL(const QString &outfile, const QString &ver);
 #endif
 
 // Monitors the shutdown event
-static DWORD WINAPI MonitorProc(void* pv)
+static DWORD WINAPI MonitorProc(void* /* pv */)
 {
     while (1) {
         WaitForSingleObject(hEventShutdown, INFINITE);
diff --git a/src/activeqt/shared/qaxtypes.cpp b/src/activeqt/shared/qaxtypes.cpp
index bca9430..1d72abc 100644
--- a/src/activeqt/shared/qaxtypes.cpp
+++ b/src/activeqt/shared/qaxtypes.cpp
@@ -703,6 +703,8 @@ bool QVariantToVARIANT(const QVariant &var, VARIANT &arg, const QByteArray &type
                     recordInfo->RecordCreateCopy(&qpoint, &record);
                 }
                 break;
+            default:
+                break;
             }
             
             arg.vt = VT_RECORD;