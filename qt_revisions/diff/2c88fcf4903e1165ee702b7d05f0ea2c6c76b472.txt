diff --git a/scripts/generic/t/01-xml2html_testcocoon.t b/scripts/generic/t/01-xml2html_testcocoon.t
new file mode 100644
index 0000000..1c8db10
--- /dev/null
+++ b/scripts/generic/t/01-xml2html_testcocoon.t
@@ -0,0 +1,283 @@
+#!/usr/bin/env perl
+use 5.010;
+use strict;
+use warnings;
+use utf8;
+use Readonly;
+
+use File::Basename qw(basename);
+
+=head1 NAME
+
+01-xml2html_testcocoon.t - basic tests for xml2html_testcocoon.pl
+
+=head1 SYNOPSIS
+
+  perl ./01-xml2html_testcocoon.t
+
+This test will run the xml2html_testcocoon.pl script with a few different
+inputs and verify that behavior is as expected.
+
+=cut
+
+use Encode;
+use English qw( -no_match_vars );
+use FindBin;
+use Test::More;
+use Capture::Tiny qw( capture );
+use File::Find::Rule;
+use File::Slurp qw( read_file write_file);
+use File::Spec::Functions;
+use File::Temp qw( tempdir );
+
+use lib "$FindBin::Bin/../../lib/perl5";
+use QtQA::Test::More qw( is_or_like );
+
+# Run xml2html_testcocoon
+sub test_run
+{
+    my ($params_ref) = @_;
+
+    my @args                   =   @{$params_ref->{ args }};
+    my $expected_stdout        =   $params_ref->{ expected_stdout };
+    my $expected_stderr        =   $params_ref->{ expected_stderr };
+    my $expected_success       =   $params_ref->{ expected_success };
+    my $expected_logfile_list  =   $params_ref->{ expected_logfile };
+    my $expected_logtext_list  =   $params_ref->{ expected_logtext }  // [];
+    my $testname               =   $params_ref->{ testname }          || q{};
+
+    my $status;
+    my ($output, $error) = capture {
+        $status = system( 'perl', "$FindBin::Bin/../xml2html_testcocoon.pl", @args );
+    };
+
+    if ($expected_success) {
+        is  ( $status, 0, "$testname exits zero" );
+    } else {
+        isnt( $status, 0, "$testname exits non-zero" );
+    }
+
+    is_or_like( $output, $expected_stdout, "$testname output looks correct" );
+    is_or_like( $error,  $expected_stderr, "$testname error looks correct" );
+
+    # The rest of the verification steps are only applicable if a log file is expected and created
+    return if (!$expected_logfile_list);
+
+    my $countLogFiles = @{$expected_logfile_list};
+    my $countLogExpectedText = @{$expected_logtext_list};
+
+    for (my $i = 0; $i < $countLogFiles; $i++) {
+        my $expected_logfile = $expected_logfile_list->[$i];
+        my $expected_logtext = "";
+        if ($countLogExpectedText eq $countLogFiles) { # only if the counts match we use the expected texts from the list.
+            $expected_logtext = $expected_logtext_list->[$i];
+        }
+        return if (!ok( -e $expected_logfile, "$testname created $expected_logfile" ));
+        my $logtext = read_file( $expected_logfile );   # dies on error
+        is_or_like( $logtext, $expected_logtext, "$testname " . basename($expected_logfile) . " is as expected" );
+    }
+
+    return;
+}
+
+sub test_success
+{
+    my $tempdir = tempdir( 'testcocoon_xml2html.XXXXXX', TMPDIR => 1, CLEANUP => 1 );
+
+    my $xml_file = init_test_env($tempdir);
+    my $created_report = [
+        catfile($tempdir, 'module_report.html'),
+        catfile($tempdir, 'files', 'folder_folder_module.html'),
+        catfile($tempdir, 'files', 'tests_module_failed.html'),
+        catfile($tempdir, 'files', 'tests_module_passed.html'),
+        catfile($tempdir, 'files', 'tests_module_unknown.html'),
+        catfile($tempdir, 'files', 'untested_sources_module.html')
+        ];
+
+    my $expected_text = get_html_report_content();
+
+    my $include_path = catfile($FindBin::Bin, 'data', 'parsed-xml-testcocoon', 'module', 'src');
+
+    test_run({
+        args                =>  [ '--xml', $xml_file, '--module', 'module', '--output', $tempdir , '--include', $include_path],
+        expected_stdout     =>  q{},
+        expected_stderr     =>  q{},
+        expected_success    =>  1,
+        testname            =>  'basic test success',
+        expected_logfile    =>  $created_report,
+        expected_logtext    =>  $expected_text,
+    });
+
+    return;
+}
+
+sub test_invalid_xml
+{
+    my $invalid_xml_file = 'invalid.xml';
+
+    test_run({
+    args                =>  [ '--xml', $invalid_xml_file, '--module', 'module', '--output', 'fake', '--include', 'fake'],
+        expected_stdout     =>  q{},
+        expected_stderr     =>  qr{Missing or invalid required '--xml' option.*},
+        expected_success    =>  0,
+        testname            =>  'test invalid xml',
+    });
+
+    return;
+}
+
+sub test_missing_module
+{
+    my $tempdir = tempdir( 'testcocoon_xml2html.XXXXXX', TMPDIR => 1, CLEANUP => 1 );
+    my $xml_file = init_test_env($tempdir);
+
+    test_run({
+        args                =>  [ '--xml', $xml_file, '--output', 'fake', '--include', 'fake'],
+        expected_stdout     =>  q{},
+        expected_stderr     =>  qr{Missing required '--module' option.*},
+        expected_success    =>  0,
+        testname            =>  'test missing module',
+    });
+
+    return;
+}
+
+sub test_missing_output
+{
+    my $tempdir = tempdir( 'testcocoon_xml2html.XXXXXX', TMPDIR => 1, CLEANUP => 1 );
+    my $xml_file = init_test_env($tempdir);
+
+    test_run({
+        args                =>  [ '--xml', $xml_file, '--module', 'module', '--include', 'fake'],
+        expected_stdout     =>  q{},
+        expected_stderr     =>  qr{Missing required '--output' option.*},
+        expected_success    =>  0,
+        testname            =>  'test missing output',
+    });
+
+    return;
+}
+
+sub test_invalid_output
+{
+    my $tempdir = tempdir( 'testcocoon_xml2html.XXXXXX', TMPDIR => 1, CLEANUP => 1 );
+    my $xml_file = init_test_env($tempdir);
+
+    test_run({
+        args                =>  [ '--xml', $xml_file, '--module', 'module', '--output', '/\invalid_path' ,'--include', 'fake'],
+        expected_stdout     =>  q{},
+        expected_stderr     =>  qr{mkdir /\\invalid_path: *},
+        expected_success    =>  0,
+        testname            =>  'test invalid output',
+    });
+
+    return;
+}
+
+sub test_missing_include
+{
+    my $tempdir = tempdir( 'testcocoon_xml2html.XXXXXX', TMPDIR => 1, CLEANUP => 1 );
+    my $xml_file = init_test_env($tempdir);
+
+    test_run({
+        args                =>  [ '--xml', $xml_file, '--module', 'module', '--module', 'module', '--output', $tempdir],
+        expected_stdout     =>  q{},
+        expected_stderr     =>  qr{Missing required '--include' option.*},
+        expected_success    =>  0,
+        testname            =>  'test missing include',
+    });
+
+    return;
+}
+
+sub init_test_env
+{
+    my ($tempdir) = @_;
+
+    # Create xml file from template
+    my $xml_file_template = catfile($FindBin::Bin, 'data', 'parsed-xml-testcocoon', 'module_test_template.xml');
+    my $content = read_file($xml_file_template);
+
+    my $path_files = catfile($FindBin::Bin, 'data', 'parsed-xml-testcocoon', 'module', 'src');
+    my $path_3rdparty = catfile($path_files, '3rdparty', '3rdparty.c');
+    my $path_source = catfile($path_files, 'folder', 'source.cpp');
+    my $path_source2 = catfile($path_files, 'folder', 'source2.cpp');
+    my $path2_source2 = catfile($FindBin::Bin, 'data', 'parsed-xml-testcocoon', 'module2', 'src', 'folder2', 'source2.cpp');
+
+    $content =~ s,%path_3rdparty%,$path_3rdparty,g;
+    $content =~ s,%path_source%,$path_source,g;
+    $content =~ s,%path_source2%,$path_source2,g;
+    $content =~ s,%path2_source2%,$path2_source2,g;
+
+    my $xml_file = catfile($tempdir, 'module_test_20120131-1042.xml');
+    write_file($xml_file, $content);
+
+    return $xml_file;
+}
+
+sub get_html_report_content
+{
+    # Create html content from templates
+
+    my $list_html_content = [];
+
+    my $path_source = catfile($FindBin::Bin, 'data', 'parsed-xml-testcocoon', 'module', 'src');
+    my $thirdrdparty = catfile('3rdparty', '3rdparty.c');
+
+    # Main html report
+    my $html_report_template = catfile($FindBin::Bin, 'data', 'parsed-xml-testcocoon', "module_report_template.html");
+
+    my $content = read_file($html_report_template);
+    $content =~ s,%path_src%,$path_source,g;
+    $content =~ s,%3rdparty%,$thirdrdparty,g;
+    push  @{$list_html_content}, $content;
+
+    # Files - folder
+    my $html_folder_template = catfile($FindBin::Bin, 'data', 'parsed-xml-testcocoon', 'files', "folder_folder_module_template.html");
+    my $content2 = read_file($html_folder_template);
+    $content2 =~ s,%path_src%,$path_source,g;
+    my $source = catfile('folder', 'source.cpp');
+    my $source2 = catfile('folder', 'source2.cpp');
+    $content2 =~ s,%source%,$source,g;
+    $content2 =~ s,%source2%,$source2,g;
+    push  @{$list_html_content}, $content2;
+
+    my $html_failed_tests_template = catfile($FindBin::Bin, 'data', 'parsed-xml-testcocoon', 'files', "tests_module_failed_template.html");
+    my $content3 = read_file($html_failed_tests_template);
+    push  @{$list_html_content}, $content3;
+
+    my $html_passed_tests_template = catfile($FindBin::Bin, 'data', 'parsed-xml-testcocoon', 'files', "tests_module_passed_template.html");
+    my $content4 = read_file($html_passed_tests_template);
+    push  @{$list_html_content}, $content4;
+
+    my $html_unknown_tests_template = catfile($FindBin::Bin, 'data', 'parsed-xml-testcocoon', 'files', "tests_module_unknown_template.html");
+    my $content5 = read_file($html_unknown_tests_template);
+    push  @{$list_html_content}, $content5;
+
+    my $html_untested_template = catfile($FindBin::Bin, 'data', 'parsed-xml-testcocoon', 'files', "untested_sources_module_template.html");
+    my $content6 = read_file($html_untested_template);
+    my $path_untested = catfile($path_source, 'folder', 'untested.cpp');
+    $content6 =~ s,%path_untested%,$path_untested,g;
+    push  @{$list_html_content}, $content6;
+
+    return $list_html_content;
+}
+
+
+sub run
+{
+    test_success;
+    test_invalid_xml;
+    test_missing_module;
+    test_missing_output;
+    test_invalid_output;
+    test_missing_include;
+
+    done_testing;
+
+    return;
+}
+
+run if (!caller);
+1;
+
diff --git a/scripts/generic/t/data/parsed-xml-testcocoon/files/folder_folder_module_template.html b/scripts/generic/t/data/parsed-xml-testcocoon/files/folder_folder_module_template.html
new file mode 100644
index 0000000..37e391c
--- /dev/null
+++ b/scripts/generic/t/data/parsed-xml-testcocoon/files/folder_folder_module_template.html
@@ -0,0 +1,33 @@
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
+<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><style type="text/css">
+p, li { white-space: pre-wrap; } body { color: black; } .global { color: red; }
+</style></head><body style=" font-family:'Helvetica'; font-size:12pt; font-weight:400; font-style:normal;">
+<h1>Conditions coverage results for "folder" under <br />%path_src%</h1>
+<table border="1" cellspacing="2">
+    <TR class="SourceFolderHeader">
+        <TD class="SourceFolderFileName">Filename</TD>
+        <TD class="SourceFolderTested">Tested Statements</TD>
+        <TD class="SourceFolderTotal">Total Statements</TD>
+        <TD class="SourceFolderCoverage">Coverage</TD>
+    </TR>
+    <TR class="SourceFolderHeader">
+        <TD class="SourceFolderFileName">%source%</TD>
+        <TD class="SourceFolderTested">21</TD>
+        <TD class="SourceFolderTotal">61</TD>
+        <TD class="SourceFolderCoverage">34.43</TD>
+    </TR>
+    <TR class="SourceFolderHeader">
+        <TD class="SourceFolderFileName">%source2%</TD>
+        <TD class="SourceFolderTested">2</TD>
+        <TD class="SourceFolderTotal">4</TD>
+        <TD class="SourceFolderCoverage">50.00</TD>
+    </TR>
+    <TR class="SourceFolderHeader">
+        <TD class="SourceFolderFileName"><p class="global">GLOBAL</p></TD>
+        <TD class="SourceFolderTested">23</TD>
+        <TD class="SourceFolderTotal">65</TD>
+        <TD class="SourceFolderCoverage">35.38</TD>
+    </TR>
+</table>
+</body>
+</HTML>
diff --git a/scripts/generic/t/data/parsed-xml-testcocoon/files/tests_module_failed_template.html b/scripts/generic/t/data/parsed-xml-testcocoon/files/tests_module_failed_template.html
new file mode 100644
index 0000000..1004d1f
--- /dev/null
+++ b/scripts/generic/t/data/parsed-xml-testcocoon/files/tests_module_failed_template.html
@@ -0,0 +1,17 @@
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
+<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><style type="text/css">
+p, li { white-space: pre-wrap; } body { color: black; } .global { color: red; }
+</style></head><body style=" font-family:'Helvetica'; font-size:12pt; font-weight:400; font-style:normal;">
+<h1>lists of tests with status failed for module module</h1>
+<table border="1" cellspacing="2">
+    <TR class="TestsHeader">
+        <TD class="TestName">Test Name</TD>
+        <TD class="TestStatus">Tested Test Status</TD>
+    </TR>
+    <TR class="TestsHeader">
+        <TD class="TestName">tst_qplacecontentrequest</TD>
+        <TD class="TestStatus">failed</TD>
+    </TR>
+</table>
+</body>
+</HTML>
diff --git a/scripts/generic/t/data/parsed-xml-testcocoon/files/tests_module_passed_template.html b/scripts/generic/t/data/parsed-xml-testcocoon/files/tests_module_passed_template.html
new file mode 100644
index 0000000..84f3585
--- /dev/null
+++ b/scripts/generic/t/data/parsed-xml-testcocoon/files/tests_module_passed_template.html
@@ -0,0 +1,17 @@
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
+<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><style type="text/css">
+p, li { white-space: pre-wrap; } body { color: black; } .global { color: red; }
+</style></head><body style=" font-family:'Helvetica'; font-size:12pt; font-weight:400; font-style:normal;">
+<h1>lists of tests with status passed for module module</h1>
+<table border="1" cellspacing="2">
+    <TR class="TestsHeader">
+        <TD class="TestName">Test Name</TD>
+        <TD class="TestStatus">Tested Test Status</TD>
+    </TR>
+    <TR class="TestsHeader">
+        <TD class="TestName">tst_qplacemanager</TD>
+        <TD class="TestStatus">passed</TD>
+    </TR>
+</table>
+</body>
+</HTML>
diff --git a/scripts/generic/t/data/parsed-xml-testcocoon/files/tests_module_unknown_template.html b/scripts/generic/t/data/parsed-xml-testcocoon/files/tests_module_unknown_template.html
new file mode 100644
index 0000000..dfcb56d
--- /dev/null
+++ b/scripts/generic/t/data/parsed-xml-testcocoon/files/tests_module_unknown_template.html
@@ -0,0 +1,17 @@
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
+<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><style type="text/css">
+p, li { white-space: pre-wrap; } body { color: black; } .global { color: red; }
+</style></head><body style=" font-family:'Helvetica'; font-size:12pt; font-weight:400; font-style:normal;">
+<h1>lists of tests with status unknown for module module</h1>
+<table border="1" cellspacing="2">
+    <TR class="TestsHeader">
+        <TD class="TestName">Test Name</TD>
+        <TD class="TestStatus">Tested Test Status</TD>
+    </TR>
+    <TR class="TestsHeader">
+        <TD class="TestName">tst_qgeopositioninfo</TD>
+        <TD class="TestStatus">unknown</TD>
+    </TR>
+</table>
+</body>
+</HTML>
diff --git a/scripts/generic/t/data/parsed-xml-testcocoon/files/untested_sources_module_template.html b/scripts/generic/t/data/parsed-xml-testcocoon/files/untested_sources_module_template.html
new file mode 100644
index 0000000..d29e2da
--- /dev/null
+++ b/scripts/generic/t/data/parsed-xml-testcocoon/files/untested_sources_module_template.html
@@ -0,0 +1,15 @@
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
+<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><style type="text/css">
+p, li { white-space: pre-wrap; } body { color: black; } .global { color: red; }
+</style></head><body style=" font-family:'Helvetica'; font-size:12pt; font-weight:400; font-style:normal;">
+<h1>Source files not covered by the coverage analysis<br />Generated files (moc_*.cpp and qrc_*.cpp) and files found under the exclude paths don't appear in this report</h1>
+<table border="1" cellspacing="2">
+    <TR class="UntestedSourceHeader">
+        <TD class="UntestedSourceFileName">Filename</TD>
+    </TR>
+    <TR class="UntestedSourceHeader">
+        <TD class="UntestedSourceFileName">%path_untested%</TD>
+    </TR>
+</table>
+</body>
+</HTML>
diff --git a/scripts/generic/t/data/parsed-xml-testcocoon/module/src/3rdparty/3rdparty.c b/scripts/generic/t/data/parsed-xml-testcocoon/module/src/3rdparty/3rdparty.c
new file mode 100644
index 0000000..e69de29
diff --git a/scripts/generic/t/data/parsed-xml-testcocoon/module/src/folder/source.cpp b/scripts/generic/t/data/parsed-xml-testcocoon/module/src/folder/source.cpp
new file mode 100644
index 0000000..0dd85f0
--- /dev/null
+++ b/scripts/generic/t/data/parsed-xml-testcocoon/module/src/folder/source.cpp
@@ -0,0 +1,41 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/
+**
+** This file is part of the QtGui module of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** GNU Lesser General Public License Usage
+** This file may be used under the terms of the GNU Lesser General Public
+** License version 2.1 as published by the Free Software Foundation and
+** appearing in the file LICENSE.LGPL included in the packaging of this
+** file. Please review the following information to ensure the GNU Lesser
+** General Public License version 2.1 requirements will be met:
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** In addition, as a special exception, Nokia gives you certain additional
+** rights. These rights are described in the Nokia Qt LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU General
+** Public License version 3.0 as published by the Free Software Foundation
+** and appearing in the file LICENSE.GPL included in the packaging of this
+** file. Please review the following information to ensure the GNU General
+** Public License version 3.0 requirements will be met:
+** http://www.gnu.org/copyleft/gpl.html.
+**
+** Other Usage
+** Alternatively, this file may be used in accordance with the terms and
+** conditions contained in a signed written agreement between you and Nokia.
+**
+**
+**
+**
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
diff --git a/scripts/generic/t/data/parsed-xml-testcocoon/module/src/folder/untested.cpp b/scripts/generic/t/data/parsed-xml-testcocoon/module/src/folder/untested.cpp
new file mode 100644
index 0000000..0dd85f0
--- /dev/null
+++ b/scripts/generic/t/data/parsed-xml-testcocoon/module/src/folder/untested.cpp
@@ -0,0 +1,41 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/
+**
+** This file is part of the QtGui module of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** GNU Lesser General Public License Usage
+** This file may be used under the terms of the GNU Lesser General Public
+** License version 2.1 as published by the Free Software Foundation and
+** appearing in the file LICENSE.LGPL included in the packaging of this
+** file. Please review the following information to ensure the GNU Lesser
+** General Public License version 2.1 requirements will be met:
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** In addition, as a special exception, Nokia gives you certain additional
+** rights. These rights are described in the Nokia Qt LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU General
+** Public License version 3.0 as published by the Free Software Foundation
+** and appearing in the file LICENSE.GPL included in the packaging of this
+** file. Please review the following information to ensure the GNU General
+** Public License version 3.0 requirements will be met:
+** http://www.gnu.org/copyleft/gpl.html.
+**
+** Other Usage
+** Alternatively, this file may be used in accordance with the terms and
+** conditions contained in a signed written agreement between you and Nokia.
+**
+**
+**
+**
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
diff --git a/scripts/generic/t/data/parsed-xml-testcocoon/module2/src/folder2/source2.cpp b/scripts/generic/t/data/parsed-xml-testcocoon/module2/src/folder2/source2.cpp
new file mode 100644
index 0000000..0dd85f0
--- /dev/null
+++ b/scripts/generic/t/data/parsed-xml-testcocoon/module2/src/folder2/source2.cpp
@@ -0,0 +1,41 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/
+**
+** This file is part of the QtGui module of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** GNU Lesser General Public License Usage
+** This file may be used under the terms of the GNU Lesser General Public
+** License version 2.1 as published by the Free Software Foundation and
+** appearing in the file LICENSE.LGPL included in the packaging of this
+** file. Please review the following information to ensure the GNU Lesser
+** General Public License version 2.1 requirements will be met:
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** In addition, as a special exception, Nokia gives you certain additional
+** rights. These rights are described in the Nokia Qt LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU General
+** Public License version 3.0 as published by the Free Software Foundation
+** and appearing in the file LICENSE.GPL included in the packaging of this
+** file. Please review the following information to ensure the GNU General
+** Public License version 3.0 requirements will be met:
+** http://www.gnu.org/copyleft/gpl.html.
+**
+** Other Usage
+** Alternatively, this file may be used in accordance with the terms and
+** conditions contained in a signed written agreement between you and Nokia.
+**
+**
+**
+**
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
diff --git a/scripts/generic/t/data/parsed-xml-testcocoon/module_report_template.html b/scripts/generic/t/data/parsed-xml-testcocoon/module_report_template.html
new file mode 100644
index 0000000..46213cc
--- /dev/null
+++ b/scripts/generic/t/data/parsed-xml-testcocoon/module_report_template.html
@@ -0,0 +1,49 @@
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">
+<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><style type="text/css">
+p, li { white-space: pre-wrap; } body { color: black; } .global { color: red; }
+</style></head><body style=" font-family:'Helvetica'; font-size:12pt; font-weight:400; font-style:normal;">
+<h1>Conditions coverage results for: module</h1>
+<h2>Included directory:<br /><ul><li>%path_src%</li></ul><br />Date: 31/01/2012 - 10:42</h2>
+<h2>Source files (.c and .cpp) found under the included directory but not tested by the coverage analysis: <a href="files/untested_sources_module.html">1</a></h2>
+<table border="1" cellspacing="2">
+    <TR class="TestsHeader">
+        <TD class="TotalTests">Numbers of tests run</TD>
+        <TD class="PassedTests">Passed</TD>
+        <TD class="FailedTests">Failed</TD>
+<TD class="UnknownTests">Unknown</TD>
+    </TR>
+    <TR class="Tests">
+        <TD class="TotalTests">3</TD>
+        <TD class="PassedTests"><a href="files/tests_module_passed.html">1</a></TD>
+        <TD class="FailedTests"><a href="files/tests_module_failed.html">1</a></TD>
+<TD class="UnknownTests"><a href="files/tests_module_unknown.html">1</a></TD>
+</TR>
+</table>
+<table border="1" cellspacing="2">
+    <TR class="SourceFolderHeader">
+        <TD class="SourceFolderFileName">Filename</TD>
+        <TD class="SourceFolderTested">Tested Statements</TD>
+        <TD class="SourceFolderTotal">Total Statements</TD>
+        <TD class="SourceFolderCoverage">Coverage</TD>
+    </TR>
+    <TR class="SourceFolderHeader">
+        <TD class="SourceFolderFileName">%3rdparty%</TD>
+        <TD class="SourceFolderTested">2</TD>
+        <TD class="SourceFolderTotal">83</TD>
+        <TD class="SourceFolderCoverage">2.41</TD>
+    </TR>
+    <TR class="SourceFolderHeader">
+        <TD class="SourceFolderFileName"><a href="files/folder_folder_module.html">folder</a></TD>
+        <TD class="SourceFolderTested">23</TD>
+        <TD class="SourceFolderTotal">65</TD>
+        <TD class="SourceFolderCoverage">35.38</TD>
+    </TR>
+    <TR class="SourceFolderHeader">
+        <TD class="SourceFolderFileName"><p class="global">GLOBAL</p></TD>
+        <TD class="SourceFolderTested">25</TD>
+        <TD class="SourceFolderTotal">148</TD>
+        <TD class="SourceFolderCoverage">16.89</TD>
+    </TR>
+</table>
+</body>
+</HTML>
diff --git a/scripts/generic/t/data/parsed-xml-testcocoon/module_test_template.xml b/scripts/generic/t/data/parsed-xml-testcocoon/module_test_template.xml
new file mode 100644
index 0000000..2cf9898
--- /dev/null
+++ b/scripts/generic/t/data/parsed-xml-testcocoon/module_test_template.xml
@@ -0,0 +1,68 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<TestCocoonReport>
+    <GlobalInformation>
+        <GlobalInformationCoverageMethod>defined during the generation (branch, decision or condition)</GlobalInformationCoverageMethod>
+        <GlobalInformationCoverageMode>Execution Count</GlobalInformationCoverageMode>
+    </GlobalInformation>
+    <ExecutionList>
+        <ExecutionListItem>
+            <ExecutionListName>tc_tst_qgeopositioninfo</ExecutionListName>
+            <ExecutionListStatusUnknown>Unknown</ExecutionListStatusUnknown>
+        </ExecutionListItem>
+        <ExecutionListItem>
+            <ExecutionListName>tst_QPlaceManager</ExecutionListName>
+            <ExecutionListStatusPassed>Passed</ExecutionListStatusPassed>
+        </ExecutionListItem>
+        <ExecutionListItem>
+            <ExecutionListName>tst_QPlaceContentRequest</ExecutionListName>
+            <ExecutionListStatusFailed>Failed</ExecutionListStatusFailed>
+        </ExecutionListItem>
+        <ExecutionListItem>
+            <ExecutionListName>tc_tst_qplacemanager</ExecutionListName>
+            <ExecutionListStatusUnknown>Unknown</ExecutionListStatusUnknown>
+        </ExecutionListItem>
+    </ExecutionList>
+    <GlobalStatistic>
+        <HtmlItemTitle/>
+        <Item>
+            <ItemTitleLevel>1</ItemTitleLevel>
+            <ItemStatistic>
+                <ItemStatisticLevel>1</ItemStatisticLevel>
+                <ItemStatisticValue>0.2</ItemStatisticValue>
+            </ItemStatistic>
+        </Item>
+    </GlobalStatistic>
+    <SourcesStatistics>
+        <HtmlItemTitle>
+            <ItemTitleLevel>1</ItemTitleLevel>
+        </HtmlItemTitle>
+        <Item>
+            <ItemSource>%path_3rdparty%</ItemSource>
+            <ItemStatistic>
+                <ItemStatisticLevel>1</ItemStatisticLevel>
+                <ItemStatisticValue>2/83</ItemStatisticValue>
+            </ItemStatistic>
+        </Item>
+        <Item>
+            <ItemSource>%path_source%</ItemSource>
+            <ItemStatistic>
+                <ItemStatisticLevel>1</ItemStatisticLevel>
+                <ItemStatisticValue>21/61</ItemStatisticValue>
+            </ItemStatistic>
+        </Item>
+        <Item>
+            <ItemSource>%path_source2%</ItemSource>
+            <ItemStatistic>
+                <ItemStatisticLevel>1</ItemStatisticLevel>
+                <ItemStatisticValue>2/4</ItemStatisticValue>
+            </ItemStatistic>
+        </Item>
+        <Item>
+            <ItemSource>%path2_source2%</ItemSource>
+            <ItemStatistic>
+                <ItemStatisticLevel>1</ItemStatisticLevel>
+                <ItemStatisticValue>9/16</ItemStatisticValue>
+            </ItemStatistic>
+        </Item>
+    </SourcesStatistics>
+</TestCocoonReport>
diff --git a/scripts/generic/xml2html_testcocoon.pl b/scripts/generic/xml2html_testcocoon.pl
old mode 100755
new mode 100644
index 2f55b4b..e0f0208
--- a/scripts/generic/xml2html_testcocoon.pl
+++ b/scripts/generic/xml2html_testcocoon.pl
@@ -57,6 +57,7 @@ xml2html_testcocoon - convert a xml coverage report created by testcocoon to str
   #   $HOME/coverage/results/qtbase_report.html
   #   $HOME/coverage/results/files/tests_<status>_qtbase.html
   #   $HOME/coverage/results/files/folder_<subfolders>_qtbase.html
+  #   $HOME/coverage/results/files/untested_sources_qtbase.html
   #
 
   It is designed to parse a coverage xml report generated for Qt modules build with testcocoon and create html reports.
@@ -105,12 +106,13 @@ use warnings;
 use autodie;
 use Carp;
 use File::Basename qw(basename);
+use File::Find::Rule;
 use File::Path qw( mkpath );
 use File::Spec::Functions;
 use Getopt::Long qw(GetOptionsFromArray);
+use List::Compare;
 use Pod::Usage qw( pod2usage );
 use XML::Simple;
-use Data::Dumper;
 
 sub new
 {
@@ -164,6 +166,8 @@ sub run
         confess "Missing required '--include' option";
     }
 
+    my $include_path_regex = quotemeta($include_path);
+
     # get file timestamp
     my $timestamp = "n/a";
     if ( $xml_file =~ m#([0-9]{8}-[0-9]{4})#) {
@@ -193,16 +197,23 @@ sub run
 
     my %hash_folders;
 
+    # Get all the source files under the included directory
+    my @files_in_tree_all = File::Find::Rule->file()->name( '*.c', '*.cpp' )->in($include_path);
+    my @files_in_tree;
+    foreach my $file (@files_in_tree_all) {
+        next if ($self->isExcluded($file, @exclude_list));
+        next if ($file =~ m/(^|[\/\\])(qrc|moc)_.*\.cpp$/);
+        $file = canonpath($file);
+        push @files_in_tree, $file;
+    }
+
+    my @files_tested;
+
     foreach my $item (@{$sources}) {
         my $file_name = $item->{ItemSource};
-        next unless ($file_name =~ m/$include_path/);
-        my $excluded = 0;
-        foreach my $exclude (@exclude_list) {
-              next unless ($file_name =~ m/$exclude/);
-              $excluded = 1;
-              last;
-        }
-        next if ($excluded);
+        next unless ($file_name =~ m/$include_path_regex/);
+        push @files_tested, $file_name;
+        next if ($self->isExcluded($file_name, @exclude_list));
 
         # Get the relative path of the current file to include under the $include path entered
         my $subfolder_is_file = 0;
@@ -210,10 +221,11 @@ sub run
             $file_name = basename($include_path);
             $subfolder_is_file = 1;
         } else {
-            $file_name =~ s/${include_path}${separator}{0,1}//;
+            $file_name =~ s/${include_path_regex}${separator}{0,1}//;
         }
 
         my $subfolder = $file_name;
+
         # Figure out the subfolder name under the $include path entered that contains the file.
         # If the file is directly under the $include path, its name is used as a subfolder name.
         # Those subfolder names are used to create the tree structure of the main html report.
@@ -228,6 +240,11 @@ sub run
         push @{$hash_folders{$subfolder}}, { filename => $file_name, tested => $tested, total => $total };
     }
 
+    my $lc = List::Compare->new(\@files_in_tree, \@files_tested);
+    my @untested_sources = $lc->get_unique;
+    my $untested_sources_html = $self->write_untested_sources($output_files, $module_name, @untested_sources);
+    my $untested_sources_count = scalar(@untested_sources);
+
     my %passed_tests;
     my %failed_tests;
     my %unknown_tests;
@@ -287,6 +304,7 @@ sub run
     $self->write_start_html_file($MAIN);
     $self->write_title_element($MAIN, "Conditions coverage results for: $module_name");
     $self->write_header2_element($MAIN, "Included directory:<br /><ul><li>$include_path</li></ul>" . $self->create_exclude_elements(@exclude_list) . "<br />Date: $day/$month/$year - $hour:$minute");
+    $self->write_header2_element($MAIN, "Source files (.c and .cpp) found under the included directory but not tested by the coverage analysis: " . $self->create_element_with_link($untested_sources_html, $untested_sources_count));
     $self->write_tests_status_global($MAIN, $nb_total_tests, $self->create_element_with_link($passed_html, $nb_passed_tests), $self->create_element_with_link($failed_html, $nb_failed_tests), $self->create_element_with_link($unknown_saved_html, $nb_unknown_saved_tests) );
     $self->write_start_table_folders($MAIN);
     close($MAIN);
@@ -302,6 +320,7 @@ sub run
         my @list_files = @{$hash_folders{$subfolder}};
         if (@list_files == 1 ) {
             # If only 1 file is found, no need for a dedicated html report
+            $subfolder = $list_files[0]->{filename};
             $tested += $list_files[0]->{tested};
             $total += $list_files[0]->{total};
         } else {
@@ -310,7 +329,7 @@ sub run
             my $folder_data = $self->write_folder_html($FOLDER, $hash_folders{$subfolder}, $subfolder, $include_path);
             close($FOLDER);
 
-            $folder_link = catfile($files_output_subfolder, basename($folder_html));
+            $folder_link = $files_output_subfolder . '/' . basename($folder_html);
             $tested = $folder_data->{folder_tested};
             $total = $folder_data->{folder_total};
         }
@@ -330,6 +349,15 @@ sub run
     return;
 }
 
+sub isExcluded
+{
+   my ($self, $file, @list_excluded) = @_;
+   foreach my $exclude ( @list_excluded ) {
+       return 1 if ($file =~ m/$exclude/);
+   }
+   return 0;
+}
+
 # Function to calculate coverage value
 sub calculate_coverage
 {
@@ -421,7 +449,7 @@ sub write_folder_html
 {
     my ($self, $FILE, $data, $key, $include) = @_;
     $self->write_start_html_file($FILE);
-    $self->write_title_element($FILE, "Conditions coverage results for \"$key\" under <br />$include:");
+    $self->write_title_element($FILE, "Conditions coverage results for \"$key\" under <br />$include");
     $self->write_start_table_folders($FILE);
 
     my $folder_tested = 0;
@@ -474,7 +502,7 @@ sub write_tests_html
     $self->write_end_table($FILE);
     $self->write_end_html_file($FILE);
     close($FILE);
-    $html = catfile(basename($output_dir), basename($html));
+    $html = basename($output_dir) . '/'. basename($html);
 
     return $html;
 }
@@ -546,5 +574,50 @@ sub create_exclude_elements
     return $elements;
 }
 
+sub write_start_table_untested_sources
+{
+    my ($self, $FILE) = @_;
+    print $FILE <<ENDHTML;
+<table border="1" cellspacing="2">
+    <TR class="UntestedSourceHeader">
+        <TD class="UntestedSourceFileName">Filename</TD>
+    </TR>
+ENDHTML
+    return;
+}
+
+sub write_untested_sources_element
+{
+    my ($self, $FILE, $filename) = @_;
+    print $FILE <<ENDHTML;
+    <TR class="UntestedSourceHeader">
+        <TD class="UntestedSourceFileName">$filename</TD>
+    </TR>
+ENDHTML
+    return;
+}
+
+sub write_untested_sources
+{
+    my ($self, $output_dir, $module_name, @untested_sources) = @_;
+    my $html = '';
+    return $html unless @untested_sources;
+
+
+    $html = catfile($output_dir, "untested_sources_${module_name}.html");
+    open(my $UNTESTED, '>', $html);
+    $self->write_start_html_file($UNTESTED);
+    $self->write_title_element($UNTESTED, 'Source files not covered by the coverage analysis<br />Generated files (moc_*.cpp and qrc_*.cpp) and files found under the exclude paths don\'t appear in this report');
+    $self->write_start_table_untested_sources($UNTESTED);
+    foreach my $filename ( @untested_sources ) {
+        $self->write_untested_sources_element($UNTESTED, $filename);
+    }
+    $self->write_end_table($UNTESTED);
+    $self->write_end_html_file($UNTESTED);
+    close($UNTESTED);
+    $html = basename($output_dir) . '/' . basename($html);
+    return $html;
+}
+
 QtQA::App::Xml2HtmlTestCocoon->new()->run( @ARGV ) if (!caller);
 1;
diff --git a/scripts/setup.pl b/scripts/setup.pl
index 2a8df7b..519ffe1 100755
--- a/scripts/setup.pl
+++ b/scripts/setup.pl
@@ -142,6 +142,7 @@ sub all_required_cpan_modules
         IO::Uncompress::AnyInflate
         Lingua::EN::Inflect
         Lingua::EN::Numbers
+        List::Compare
         List::MoreUtils
         Params::Validate
         Perl::Critic