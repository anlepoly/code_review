diff --git a/src/quick/items/qquickitem.cpp b/src/quick/items/qquickitem.cpp
index 7618c2f..d1fa600 100644
--- a/src/quick/items/qquickitem.cpp
+++ b/src/quick/items/qquickitem.cpp
@@ -1684,11 +1684,6 @@ void QQuickItemPrivate::updateSubFocusItem(QQuickItem *scope, bool focus)
 */
 
 /*!
-    \class ItemChangeData
-    \internal
-*/
-
-/*!
     \class QQuickItem::ItemChangeData
     \internal
 */
@@ -3701,10 +3696,6 @@ QQmlListProperty<QObject> QQuickItemPrivate::resources()
 /*!
     \property QQuickItem::children
     \internal
-  */
-/*!
-    \fn void QQuickItem::childrenChanged()
-    \internal
 */
 QQmlListProperty<QQuickItem> QQuickItemPrivate::children()
 {
@@ -3724,10 +3715,6 @@ QQmlListProperty<QQuickItem> QQuickItemPrivate::children()
 /*!
     \property QQuickItem::visibleChildren
     \internal
-  */
-/*!
-    \fn void QQuickItem::visibleChildrenChanged()
-    \internal
 */
 QQmlListProperty<QQuickItem> QQuickItemPrivate::visibleChildren()
 {
diff --git a/src/quick/items/qquickview.cpp b/src/quick/items/qquickview.cpp
index 87066f6..5027d81 100644
--- a/src/quick/items/qquickview.cpp
+++ b/src/quick/items/qquickview.cpp
@@ -153,18 +153,10 @@ void QQuickViewPrivate::itemGeometryChanged(QQuickItem *resizeItem, const QRectF
 */
 
 
-/*! \fn void QQuickView::sceneResized(QSize size)
-  This signal is emitted when the view is resized to \a size.
-*/
-
 /*! \fn void QQuickView::statusChanged(QQuickView::Status status)
     This signal is emitted when the component's current \a status changes.
 */
 
-/*! \fn void QQuickView::initialSizeChanged(QSize size)
-  \internal
-*/
-
 /*!
   Constructs a QQuickView with the given \a parent.
   The default value of \a parent is 0.
diff --git a/src/quick/items/qquickwindow.cpp b/src/quick/items/qquickwindow.cpp
index 4af76aa..bef7835 100644
--- a/src/quick/items/qquickwindow.cpp
+++ b/src/quick/items/qquickwindow.cpp
@@ -2395,7 +2395,7 @@ QOpenGLContext *QQuickWindow::openglContext() const
 
 
 /*!
-    \fn void QSGContext::sceneGraphInitialized()
+    \fn void QQuickWindow::sceneGraphInitialized()
 
     This signal is emitted when the scene graph has been initialized.
 
@@ -2405,7 +2405,7 @@ QOpenGLContext *QQuickWindow::openglContext() const
 
 
 /*!
-    \fn void QSGContext::sceneGraphInvalidated()
+    \fn void QQuickWindow::sceneGraphInvalidated()
 
     This signal is emitted when the scene graph has been invalidated.
 
diff --git a/src/quick/scenegraph/qsgcontextplugin.cpp b/src/quick/scenegraph/qsgcontextplugin.cpp
index 7e0ae1e..73cfc63 100644
--- a/src/quick/scenegraph/qsgcontextplugin.cpp
+++ b/src/quick/scenegraph/qsgcontextplugin.cpp
@@ -137,8 +137,6 @@ QSGContext *QSGContext::createDefaultContext()
 
 
 /*!
-    \fn QQuickTextureFactory *createTextureFactoryFromImage(const QImage &image)
-
     Calls into the scene graph adaptation if available and creates a texture
     factory. The primary purpose of this function is to reimplement hardware
     specific asynchronous texture frameskip-less uploads that can happen on
@@ -155,8 +153,6 @@ QQuickTextureFactory *QSGContext::createTextureFactoryFromImage(const QImage &im
 
 
 /*!
-    \fn QQuickWindowManager *createWindowManager()
-
     Calls into the scene graph adaptation if available and creates a hardware
     specific window manager.
  */
diff --git a/src/quick/util/qquickimageprovider.cpp b/src/quick/util/qquickimageprovider.cpp
index 49ac80d..69c426e 100644
--- a/src/quick/util/qquickimageprovider.cpp
+++ b/src/quick/util/qquickimageprovider.cpp
@@ -61,16 +61,30 @@ public:
 
     Creating a texture directly is not possible as there is rarely an OpenGL context
     available in the thread that is responsible for loading the image data.
- */
+*/
+
+/*!
+    Constructs a texture factory. Since QQuickTextureFactory is abstract, it
+    cannot be instantiated directly.
+*/
 
 QQuickTextureFactory::QQuickTextureFactory()
 {
 }
 
+/*!
+    Destroys the texture factory.
+*/
+
 QQuickTextureFactory::~QQuickTextureFactory()
 {
 }
 
+/*!
+    \fn int QQuickTextureFactory::textureByteCount() const
+
+    Returns the number of bytes of memory the texture consumes.
+*/
 
 /*!
     \fn QImage QQuickTextureFactory::image() const
@@ -91,10 +105,11 @@ QImage QQuickTextureFactory::image() const
 
 
 /*!
-    \fn QSGTexture *QQuickTextureFactory::createTexture() const
+    \fn QSGTexture *QQuickTextureFactory::createTexture(QQuickWindow *window) const
 
     This function is called on the scene graph rendering thread to create a QSGTexture
-    instance from the factory.
+    instance from the factory. \a window provides the context which this texture is
+    created in.
 
     QML will internally cache the returned texture as needed. Each call to this
     function should return a unique instance.
@@ -233,7 +248,8 @@ QImage QQuickTextureFactory::image() const
 */
 
 /*!
-    Creates an image provider that will provide images of the given \a type.
+    Creates an image provider that will provide images of the given \a type and
+    behave according to the given \a flags.
 */
 QQuickImageProvider::QQuickImageProvider(ImageType type, Flags flags)
     : d(new QQuickImageProviderPrivate)