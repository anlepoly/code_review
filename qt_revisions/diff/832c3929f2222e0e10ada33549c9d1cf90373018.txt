diff --git a/examples/audiorecorder/audiorecorder.cpp b/examples/audiorecorder/audiorecorder.cpp
index e138cdb..12a3a4d 100644
--- a/examples/audiorecorder/audiorecorder.cpp
+++ b/examples/audiorecorder/audiorecorder.cpp
@@ -91,8 +91,8 @@ AudioRecorder::AudioRecorder(QWidget *parent)
                 sampleRate));
     }
 
-    ui->qualitySlider->setRange(0, int(QtMultimedia::VeryHighQuality));
-    ui->qualitySlider->setValue(int(QtMultimedia::NormalQuality));
+    ui->qualitySlider->setRange(0, int(QMultimedia::VeryHighQuality));
+    ui->qualitySlider->setValue(int(QMultimedia::NormalQuality));
 
     //bitrates:
     ui->bitrateBox->addItem(QString("Default"), QVariant(0));
@@ -175,10 +175,10 @@ void AudioRecorder::toggleRecord()
         settings.setCodec(boxValue(ui->audioCodecBox).toString());
         settings.setSampleRate(boxValue(ui->sampleRateBox).toInt());
         settings.setBitRate(boxValue(ui->bitrateBox).toInt());
-        settings.setQuality(QtMultimedia::EncodingQuality(ui->qualitySlider->value()));
+        settings.setQuality(QMultimedia::EncodingQuality(ui->qualitySlider->value()));
         settings.setEncodingMode(ui->constantQualityRadioButton->isChecked() ?
-                                 QtMultimedia::ConstantQualityEncoding :
-                                 QtMultimedia::ConstantBitRateEncoding);
+                                 QMultimedia::ConstantQualityEncoding :
+                                 QMultimedia::ConstantBitRateEncoding);
 
         QString container = boxValue(ui->containerBox).toString();
 
diff --git a/examples/audiorecorder/doc/src/audiorecorder.qdoc b/examples/audiorecorder/doc/src/audiorecorder.qdoc
index 8e1f563..3dea92c 100644
--- a/examples/audiorecorder/doc/src/audiorecorder.qdoc
+++ b/examples/audiorecorder/doc/src/audiorecorder.qdoc
@@ -45,8 +45,8 @@
     \l{QAudioRecorder::supportedContainers()}{supportedContainers()}, and
     \l{QAudioRecorder::supportedAudioSampleRates()}{supportedAudioSampleRates()}
     methods. The quality slider is setup from 0 (zero) to
-    \l{QtMultimedia::VeryHighQuality} with a default value of
-    \l{QtMultimedia::NormalQuality}, while the bitrates are hardcoded
+    \l{QMultimedia::VeryHighQuality} with a default value of
+    \l{QMultimedia::NormalQuality}, while the bitrates are hardcoded
     into the list.
 
     \image audiorecorder.png
@@ -77,10 +77,10 @@
         settings.setCodec(boxValue(ui->audioCodecBox).toString());
         settings.setSampleRate(boxValue(ui->sampleRateBox).toInt());
         settings.setBitRate(boxValue(ui->bitrateBox).toInt());
-        settings.setQuality(QtMultimedia::EncodingQuality(ui->qualitySlider->value()));
+        settings.setQuality(QMultimedia::EncodingQuality(ui->qualitySlider->value()));
         settings.setEncodingMode(ui->constantQualityRadioButton->isChecked() ?
-                                 QtMultimedia::ConstantQualityEncoding :
-                                 QtMultimedia::ConstantBitRateEncoding);
+                                 QMultimedia::ConstantQualityEncoding :
+                                 QMultimedia::ConstantBitRateEncoding);
 
         QString container = boxValue(ui->containerBox).toString();
 
diff --git a/examples/camera/imagesettings.cpp b/examples/camera/imagesettings.cpp
index d6b311f..0808021 100644
--- a/examples/camera/imagesettings.cpp
+++ b/examples/camera/imagesettings.cpp
@@ -62,7 +62,7 @@ ImageSettings::ImageSettings(QCameraImageCapture *imageCapture, QWidget *parent)
         ui->imageCodecBox->addItem(codecName+": "+description, QVariant(codecName));
     }
 
-    ui->imageQualitySlider->setRange(0, int(QtMultimedia::VeryHighQuality));
+    ui->imageQualitySlider->setRange(0, int(QMultimedia::VeryHighQuality));
 
     ui->imageResolutionBox->addItem(tr("Default Resolution"));
     QList<QSize> supportedResolutions = imagecapture->supportedResolutions();
@@ -93,7 +93,7 @@ QImageEncoderSettings ImageSettings::imageSettings() const
 {
     QImageEncoderSettings settings = imagecapture->encodingSettings();
     settings.setCodec(boxValue(ui->imageCodecBox).toString());
-    settings.setQuality(QtMultimedia::EncodingQuality(ui->imageQualitySlider->value()));
+    settings.setQuality(QMultimedia::EncodingQuality(ui->imageQualitySlider->value()));
     settings.setResolution(boxValue(ui->imageResolutionBox).toSize());
 
     return settings;
diff --git a/examples/camera/videosettings.cpp b/examples/camera/videosettings.cpp
index 2ef1c6c..0b3e5d8 100644
--- a/examples/camera/videosettings.cpp
+++ b/examples/camera/videosettings.cpp
@@ -66,7 +66,7 @@ VideoSettings::VideoSettings(QMediaRecorder *mediaRecorder, QWidget *parent) :
         ui->audioSampleRateBox->addItem(QString::number(sampleRate), QVariant(sampleRate));
     }
 
-    ui->audioQualitySlider->setRange(0, int(QtMultimedia::VeryHighQuality));
+    ui->audioQualitySlider->setRange(0, int(QMultimedia::VeryHighQuality));
 
     //video codecs
     ui->videoCodecBox->addItem(tr("Default video codec"), QVariant(QString()));
@@ -75,7 +75,7 @@ VideoSettings::VideoSettings(QMediaRecorder *mediaRecorder, QWidget *parent) :
         ui->videoCodecBox->addItem(codecName+": "+description, QVariant(codecName));
     }
 
-    ui->videoQualitySlider->setRange(0, int(QtMultimedia::VeryHighQuality));
+    ui->videoQualitySlider->setRange(0, int(QMultimedia::VeryHighQuality));
 
 
     ui->videoResolutionBox->addItem(tr("Default"));
@@ -122,7 +122,7 @@ QAudioEncoderSettings VideoSettings::audioSettings() const
 {
     QAudioEncoderSettings settings = mediaRecorder->audioSettings();
     settings.setCodec(boxValue(ui->audioCodecBox).toString());
-    settings.setQuality(QtMultimedia::EncodingQuality(ui->audioQualitySlider->value()));
+    settings.setQuality(QMultimedia::EncodingQuality(ui->audioQualitySlider->value()));
     settings.setSampleRate(boxValue(ui->audioSampleRateBox).toInt());
     return settings;
 }
@@ -138,7 +138,7 @@ QVideoEncoderSettings VideoSettings::videoSettings() const
 {
     QVideoEncoderSettings settings = mediaRecorder->videoSettings();
     settings.setCodec(boxValue(ui->videoCodecBox).toString());
-    settings.setQuality(QtMultimedia::EncodingQuality(ui->videoQualitySlider->value()));
+    settings.setQuality(QMultimedia::EncodingQuality(ui->videoQualitySlider->value()));
     settings.setResolution(boxValue(ui->videoResolutionBox).toSize());
     settings.setFrameRate(boxValue(ui->videoFramerateBox).value<qreal>());
 
diff --git a/src/gsttools/qgstutils.cpp b/src/gsttools/qgstutils.cpp
index 7a81c28..ce7cf9f 100644
--- a/src/gsttools/qgstutils.cpp
+++ b/src/gsttools/qgstutils.cpp
@@ -358,12 +358,12 @@ namespace {
     }
 }
 
-QtMultimedia::SupportEstimate QGstUtils::hasSupport(const QString &mimeType,
+QMultimedia::SupportEstimate QGstUtils::hasSupport(const QString &mimeType,
                                                     const QStringList &codecs,
                                                     const QSet<QString> &supportedMimeTypeSet)
 {
     if (supportedMimeTypeSet.isEmpty())
-        return QtMultimedia::NotSupported;
+        return QMultimedia::NotSupported;
 
     QString mimeTypeLowcase = mimeType.toLower();
     bool containsMimeType = supportedMimeTypeSet.contains(mimeTypeLowcase);
@@ -393,12 +393,12 @@ QtMultimedia::SupportEstimate QGstUtils::hasSupport(const QString &mimeType,
         }
     }
     if (supportedCodecCount > 0 && supportedCodecCount == codecs.size())
-        return QtMultimedia::ProbablySupported;
+        return QMultimedia::ProbablySupported;
 
     if (supportedCodecCount == 0 && !containsMimeType)
-        return QtMultimedia::NotSupported;
+        return QMultimedia::NotSupported;
 
-    return QtMultimedia::MaybeSupported;
+    return QMultimedia::MaybeSupported;
 }
 
 QT_END_NAMESPACE
diff --git a/src/imports/multimedia/plugins.qmltypes b/src/imports/multimedia/plugins.qmltypes
index 7743df4..1fe8499 100644
--- a/src/imports/multimedia/plugins.qmltypes
+++ b/src/imports/multimedia/plugins.qmltypes
@@ -1436,7 +1436,7 @@ Module {
         Signal {
             name: "availabilityChanged"
             type: "void"
-            Parameter { name: "error"; type: "QtMultimedia::AvailabilityStatus" }
+            Parameter { name: "error"; type: "QMultimedia::AvailabilityStatus" }
         }
     }
     Component {
diff --git a/src/imports/multimedia/qdeclarativeaudio.cpp b/src/imports/multimedia/qdeclarativeaudio.cpp
index 85d65d3..fc070be 100644
--- a/src/imports/multimedia/qdeclarativeaudio.cpp
+++ b/src/imports/multimedia/qdeclarativeaudio.cpp
@@ -100,7 +100,7 @@ void QDeclarativeAudio::_q_error(QMediaPlayer::Error errorCode)
     emit errorChanged();
 }
 
-void QDeclarativeAudio::_q_availabilityChanged(QtMultimedia::AvailabilityStatus)
+void QDeclarativeAudio::_q_availabilityChanged(QMultimedia::AvailabilityStatus)
 {
     emit availabilityChanged(availability());
 }
@@ -659,10 +659,10 @@ void QDeclarativeAudio::classBegin()
     connect(m_player, SIGNAL(videoAvailableChanged(bool)),
             this, SIGNAL(hasVideoChanged()));
 
-    m_error = m_player->availability() == QtMultimedia::ServiceMissing ? QMediaPlayer::ServiceMissingError : QMediaPlayer::NoError;
+    m_error = m_player->availability() == QMultimedia::ServiceMissing ? QMediaPlayer::ServiceMissingError : QMediaPlayer::NoError;
 
-    connect(m_player, SIGNAL(availabilityChanged(QtMultimedia::AvailabilityStatus)),
-                     this, SLOT(_q_availabilityChanged(QtMultimedia::AvailabilityStatus)));
+    connect(m_player, SIGNAL(availabilityChanged(QMultimedia::AvailabilityStatus)),
+                     this, SLOT(_q_availabilityChanged(QMultimedia::AvailabilityStatus)));
 
     m_metaData.reset(new QDeclarativeMediaMetaData(m_player));
 
diff --git a/src/imports/multimedia/qdeclarativeaudio_p.h b/src/imports/multimedia/qdeclarativeaudio_p.h
index b3f13d0..f45a1f0 100644
--- a/src/imports/multimedia/qdeclarativeaudio_p.h
+++ b/src/imports/multimedia/qdeclarativeaudio_p.h
@@ -138,10 +138,10 @@ public:
     };
 
     enum Availability {
-        Available = QtMultimedia::Available,
-        Busy = QtMultimedia::Busy,
-        Unavailable = QtMultimedia::ServiceMissing,
-        ResourceMissing = QtMultimedia::ResourceError
+        Available = QMultimedia::Available,
+        Busy = QMultimedia::Busy,
+        Unavailable = QMultimedia::ServiceMissing,
+        ResourceMissing = QMultimedia::ResourceError
     };
 
     QDeclarativeAudio(QObject *parent = 0);
@@ -237,7 +237,7 @@ Q_SIGNALS:
 
 private Q_SLOTS:
     void _q_error(QMediaPlayer::Error);
-    void _q_availabilityChanged(QtMultimedia::AvailabilityStatus);
+    void _q_availabilityChanged(QMultimedia::AvailabilityStatus);
     void _q_statusChanged();
 
 private:
diff --git a/src/imports/multimedia/qdeclarativecamera.cpp b/src/imports/multimedia/qdeclarativecamera.cpp
index 2a61218..746e100 100644
--- a/src/imports/multimedia/qdeclarativecamera.cpp
+++ b/src/imports/multimedia/qdeclarativecamera.cpp
@@ -68,7 +68,7 @@ void QDeclarativeCamera::_q_updateState(QCamera::State state)
     emit cameraStateChanged(QDeclarativeCamera::State(state));
 }
 
-void QDeclarativeCamera::_q_availabilityChanged(QtMultimedia::AvailabilityStatus availability)
+void QDeclarativeCamera::_q_availabilityChanged(QMultimedia::AvailabilityStatus availability)
 {
     emit availabilityChanged(Availability(availability));
 }
@@ -189,7 +189,7 @@ QDeclarativeCamera::QDeclarativeCamera(QObject *parent) :
     connect(m_camera, SIGNAL(stateChanged(QCamera::State)), this, SLOT(_q_updateState(QCamera::State)));
     connect(m_camera, SIGNAL(statusChanged(QCamera::Status)), this, SIGNAL(cameraStatusChanged()));
     connect(m_camera, SIGNAL(error(QCamera::Error)), this, SLOT(_q_error(QCamera::Error)));
-    connect(m_camera, SIGNAL(availabilityChanged(QtMultimedia::AvailabilityStatus)), this, SLOT(_q_availabilityChanged(QtMultimedia::AvailabilityStatus)));
+    connect(m_camera, SIGNAL(availabilityChanged(QMultimedia::AvailabilityStatus)), this, SLOT(_q_availabilityChanged(QMultimedia::AvailabilityStatus)));
 
     connect(m_camera->focus(), SIGNAL(opticalZoomChanged(qreal)), this, SIGNAL(opticalZoomChanged(qreal)));
     connect(m_camera->focus(), SIGNAL(digitalZoomChanged(qreal)), this, SIGNAL(digitalZoomChanged(qreal)));
diff --git a/src/imports/multimedia/qdeclarativecamera_p.h b/src/imports/multimedia/qdeclarativecamera_p.h
index 2afc0cc..64c396d 100644
--- a/src/imports/multimedia/qdeclarativecamera_p.h
+++ b/src/imports/multimedia/qdeclarativecamera_p.h
@@ -216,10 +216,10 @@ public:
     };
 
     enum Availability {
-        Available = QtMultimedia::Available,
-        Busy = QtMultimedia::Busy,
-        Unavailable = QtMultimedia::ServiceMissing,
-        ResourceMissing = QtMultimedia::ResourceError
+        Available = QMultimedia::Available,
+        Busy = QMultimedia::Busy,
+        Unavailable = QMultimedia::ServiceMissing,
+        ResourceMissing = QMultimedia::ResourceError
     };
 
     QDeclarativeCamera(QObject *parent = 0);
@@ -287,7 +287,7 @@ Q_SIGNALS:
 private Q_SLOTS:
     void _q_updateState(QCamera::State);
     void _q_error(QCamera::Error);
-    void _q_availabilityChanged(QtMultimedia::AvailabilityStatus);
+    void _q_availabilityChanged(QMultimedia::AvailabilityStatus);
 
 protected:
     void classBegin();
diff --git a/src/imports/multimedia/qdeclarativecamerarecorder.cpp b/src/imports/multimedia/qdeclarativecamerarecorder.cpp
index f3b8719..a1ce238 100644
--- a/src/imports/multimedia/qdeclarativecamerarecorder.cpp
+++ b/src/imports/multimedia/qdeclarativecamerarecorder.cpp
@@ -326,8 +326,8 @@ void QDeclarativeCameraRecorder::setAudioSampleRate(int rate)
 
 void QDeclarativeCameraRecorder::setAudioEncodingMode(QDeclarativeCameraRecorder::EncodingMode encodingMode)
 {
-    if (m_audioSettings.encodingMode() != QtMultimedia::EncodingMode(encodingMode)) {
-        m_audioSettings.setEncodingMode(QtMultimedia::EncodingMode(encodingMode));
+    if (m_audioSettings.encodingMode() != QMultimedia::EncodingMode(encodingMode)) {
+        m_audioSettings.setEncodingMode(QMultimedia::EncodingMode(encodingMode));
         m_recorder->setAudioSettings(m_audioSettings);
         emit audioEncodingModeChanged(encodingMode);
     }
@@ -335,8 +335,8 @@ void QDeclarativeCameraRecorder::setAudioEncodingMode(QDeclarativeCameraRecorder
 
 void QDeclarativeCameraRecorder::setVideoEncodingMode(QDeclarativeCameraRecorder::EncodingMode encodingMode)
 {
-    if (m_videoSettings.encodingMode() != QtMultimedia::EncodingMode(encodingMode)) {
-        m_videoSettings.setEncodingMode(QtMultimedia::EncodingMode(encodingMode));
+    if (m_videoSettings.encodingMode() != QMultimedia::EncodingMode(encodingMode)) {
+        m_videoSettings.setEncodingMode(QMultimedia::EncodingMode(encodingMode));
         m_recorder->setVideoSettings(m_videoSettings);
         emit videoEncodingModeChanged(encodingMode);
     }
diff --git a/src/imports/multimedia/qdeclarativecamerarecorder_p.h b/src/imports/multimedia/qdeclarativecamerarecorder_p.h
index aec1ac5..d1482bc 100644
--- a/src/imports/multimedia/qdeclarativecamerarecorder_p.h
+++ b/src/imports/multimedia/qdeclarativecamerarecorder_p.h
@@ -116,9 +116,9 @@ public:
 
     enum EncodingMode
     {
-        ConstantQualityEncoding = QtMultimedia::ConstantQualityEncoding,
-        ConstantBitRateEncoding = QtMultimedia::ConstantBitRateEncoding,
-        AverageBitRateEncoding = QtMultimedia::AverageBitRateEncoding
+        ConstantQualityEncoding = QMultimedia::ConstantQualityEncoding,
+        ConstantBitRateEncoding = QMultimedia::ConstantBitRateEncoding,
+        AverageBitRateEncoding = QMultimedia::AverageBitRateEncoding
     };
 
     enum Error {
diff --git a/src/imports/multimedia/qdeclarativeradio.cpp b/src/imports/multimedia/qdeclarativeradio.cpp
index 8d30ff1..7f524b0 100644
--- a/src/imports/multimedia/qdeclarativeradio.cpp
+++ b/src/imports/multimedia/qdeclarativeradio.cpp
@@ -116,7 +116,7 @@ QDeclarativeRadio::QDeclarativeRadio(QObject *parent) :
     connect(m_radioTuner, SIGNAL(mutedChanged(bool)), this, SIGNAL(mutedChanged(bool)));
     connect(m_radioTuner, SIGNAL(stationFound(int, QString)), this, SIGNAL(stationFound(int, QString)));
     connect(m_radioTuner, SIGNAL(antennaConnectedChanged(bool)), this, SIGNAL(antennaConnectedChanged(bool)));
-    connect(m_radioTuner, SIGNAL(availabilityChanged(QtMultimedia::AvailabilityStatus)), this, SLOT(_q_availabilityChanged(QtMultimedia::AvailabilityStatus)));
+    connect(m_radioTuner, SIGNAL(availabilityChanged(QMultimedia::AvailabilityStatus)), this, SLOT(_q_availabilityChanged(QMultimedia::AvailabilityStatus)));
 
     connect(m_radioTuner, SIGNAL(error(QRadioTuner::Error)), this, SLOT(_q_error(QRadioTuner::Error)));
 }
@@ -527,7 +527,7 @@ void QDeclarativeRadio::_q_error(QRadioTuner::Error errorCode)
     emit errorChanged();
 }
 
-void QDeclarativeRadio::_q_availabilityChanged(QtMultimedia::AvailabilityStatus availability)
+void QDeclarativeRadio::_q_availabilityChanged(QMultimedia::AvailabilityStatus availability)
 {
     emit availabilityChanged(Availability(availability));
 }
diff --git a/src/imports/multimedia/qdeclarativeradio_p.h b/src/imports/multimedia/qdeclarativeradio_p.h
index 53bbf3e..e3abef3 100644
--- a/src/imports/multimedia/qdeclarativeradio_p.h
+++ b/src/imports/multimedia/qdeclarativeradio_p.h
@@ -120,10 +120,10 @@ public:
     };
 
     enum Availability {
-        Available = QtMultimedia::Available,
-        Busy = QtMultimedia::Busy,
-        Unavailable = QtMultimedia::ServiceMissing,
-        ResourceMissing = QtMultimedia::ResourceError
+        Available = QMultimedia::Available,
+        Busy = QMultimedia::Busy,
+        Unavailable = QMultimedia::ServiceMissing,
+        ResourceMissing = QMultimedia::ResourceError
     };
 
     QDeclarativeRadio(QObject *parent = 0);
@@ -189,7 +189,7 @@ private Q_SLOTS:
     void _q_stateChanged(QRadioTuner::State state);
     void _q_bandChanged(QRadioTuner::Band band);
     void _q_error(QRadioTuner::Error errorCode);
-    void _q_availabilityChanged(QtMultimedia::AvailabilityStatus);
+    void _q_availabilityChanged(QMultimedia::AvailabilityStatus);
 
 private:
     Q_DISABLE_COPY(QDeclarativeRadio)
diff --git a/src/imports/multimedia/qdeclarativeradiodata.cpp b/src/imports/multimedia/qdeclarativeradiodata.cpp
index 21227c2..e02b437 100644
--- a/src/imports/multimedia/qdeclarativeradiodata.cpp
+++ b/src/imports/multimedia/qdeclarativeradiodata.cpp
@@ -282,7 +282,7 @@ void QDeclarativeRadioData::_q_error(QRadioData::Error errorCode)
     emit errorChanged();
 }
 
-void QDeclarativeRadioData::_q_availabilityChanged(QtMultimedia::AvailabilityStatus availability)
+void QDeclarativeRadioData::_q_availabilityChanged(QMultimedia::AvailabilityStatus availability)
 {
     emit availabilityChanged(Availability(availability));
 }
@@ -299,7 +299,7 @@ void QDeclarativeRadioData::connectSignals()
     connect(m_radioData, SIGNAL(alternativeFrequenciesEnabledChanged(bool)), this,
                          SIGNAL(alternativeFrequenciesEnabledChanged(bool)));
     // Since the radio data type depends on the service for the tuner, the availability is also dictated from the tuner
-    connect(m_radioTuner, SIGNAL(availabilityChanged(QtMultimedia::AvailabilityStatus)), this, SLOT(_q_availabilityChanged(QtMultimedia::AvailabilityStatus)));
+    connect(m_radioTuner, SIGNAL(availabilityChanged(QMultimedia::AvailabilityStatus)), this, SLOT(_q_availabilityChanged(QMultimedia::AvailabilityStatus)));
 
     connect(m_radioData, SIGNAL(error(QRadioData::Error)), this, SLOT(_q_error(QRadioData::Error)));
 }
diff --git a/src/imports/multimedia/qdeclarativeradiodata_p.h b/src/imports/multimedia/qdeclarativeradiodata_p.h
index 36b20d2..44790bc 100644
--- a/src/imports/multimedia/qdeclarativeradiodata_p.h
+++ b/src/imports/multimedia/qdeclarativeradiodata_p.h
@@ -137,10 +137,10 @@ public:
     };
 
     enum Availability {
-        Available = QtMultimedia::Available,
-        Busy = QtMultimedia::Busy,
-        Unavailable = QtMultimedia::ServiceMissing,
-        ResourceMissing = QtMultimedia::ResourceError
+        Available = QMultimedia::Available,
+        Busy = QMultimedia::Busy,
+        Unavailable = QMultimedia::ServiceMissing,
+        ResourceMissing = QMultimedia::ResourceError
     };
 
     QDeclarativeRadioData(QObject *parent = 0);
@@ -176,7 +176,7 @@ Q_SIGNALS:
 private Q_SLOTS:
     void _q_programTypeChanged(QRadioData::ProgramType programType);
     void _q_error(QRadioData::Error errorCode);
-    void _q_availabilityChanged(QtMultimedia::AvailabilityStatus);
+    void _q_availabilityChanged(QMultimedia::AvailabilityStatus);
 
 private:
     void connectSignals();
diff --git a/src/multimedia/audio/qaudiodecoder.cpp b/src/multimedia/audio/qaudiodecoder.cpp
index 7935286..f1227a7 100644
--- a/src/multimedia/audio/qaudiodecoder.cpp
+++ b/src/multimedia/audio/qaudiodecoder.cpp
@@ -359,7 +359,7 @@ void QAudioDecoder::unbind(QObject *obj)
 /*!
     Returns the level of support an audio decoder has for a \a mimeType and a set of \a codecs.
 */
-QtMultimedia::SupportEstimate QAudioDecoder::hasSupport(const QString &mimeType,
+QMultimedia::SupportEstimate QAudioDecoder::hasSupport(const QString &mimeType,
                                                const QStringList& codecs)
 {
     return QMediaServiceProvider::defaultServiceProvider()->hasSupport(QByteArray(Q_MEDIASERVICE_AUDIODECODER),
diff --git a/src/multimedia/audio/qaudiodecoder.h b/src/multimedia/audio/qaudiodecoder.h
index bf6bde4..00fe138 100644
--- a/src/multimedia/audio/qaudiodecoder.h
+++ b/src/multimedia/audio/qaudiodecoder.h
@@ -82,7 +82,7 @@ public:
     QAudioDecoder(QObject *parent = 0);
     ~QAudioDecoder();
 
-    static QtMultimedia::SupportEstimate hasSupport(const QString &mimeType, const QStringList& codecs = QStringList());
+    static QMultimedia::SupportEstimate hasSupport(const QString &mimeType, const QStringList& codecs = QStringList());
 
     State state() const;
 
diff --git a/src/multimedia/camera/qcamera.cpp b/src/multimedia/camera/qcamera.cpp
index b9dad13..1746d48 100644
--- a/src/multimedia/camera/qcamera.cpp
+++ b/src/multimedia/camera/qcamera.cpp
@@ -412,17 +412,17 @@ QCamera::~QCamera()
 /*!
     Returns the availability state of the camera service.
 */
-QtMultimedia::AvailabilityStatus QCamera::availability() const
+QMultimedia::AvailabilityStatus QCamera::availability() const
 {
     Q_D(const QCamera);
     if (d->control == NULL)
-        return QtMultimedia::ServiceMissing;
+        return QMultimedia::ServiceMissing;
 
     if (d->deviceControl && d->deviceControl->deviceCount() == 0)
-        return QtMultimedia::ResourceError;
+        return QMultimedia::ResourceError;
 
     if (d->error != QCamera::NoError)
-        return QtMultimedia::ResourceError;
+        return QMultimedia::ResourceError;
 
     return QMediaObject::availability();
 }
diff --git a/src/multimedia/camera/qcamera.h b/src/multimedia/camera/qcamera.h
index e25a7d9..7c654d9 100644
--- a/src/multimedia/camera/qcamera.h
+++ b/src/multimedia/camera/qcamera.h
@@ -150,7 +150,7 @@ public:
     static QList<QByteArray> availableDevices();
     static QString deviceDescription(const QByteArray &device);
 
-    QtMultimedia::AvailabilityStatus availability() const;
+    QMultimedia::AvailabilityStatus availability() const;
 
     State state() const;
     Status status() const;
diff --git a/src/multimedia/camera/qcameraimagecapture.cpp b/src/multimedia/camera/qcameraimagecapture.cpp
index cde8740..1fd8810 100644
--- a/src/multimedia/camera/qcameraimagecapture.cpp
+++ b/src/multimedia/camera/qcameraimagecapture.cpp
@@ -314,12 +314,12 @@ bool QCameraImageCapture::isAvailable() const
 /*!
     Returns the availability of this functionality.
 */
-QtMultimedia::AvailabilityStatus QCameraImageCapture::availability() const
+QMultimedia::AvailabilityStatus QCameraImageCapture::availability() const
 {
     if (d_func()->control != NULL)
-        return QtMultimedia::Available;
+        return QMultimedia::Available;
     else
-        return QtMultimedia::ServiceMissing;
+        return QMultimedia::ServiceMissing;
 }
 
 /*!
diff --git a/src/multimedia/camera/qcameraimagecapture.h b/src/multimedia/camera/qcameraimagecapture.h
index 8aefa7d..cd363a8 100644
--- a/src/multimedia/camera/qcameraimagecapture.h
+++ b/src/multimedia/camera/qcameraimagecapture.h
@@ -95,7 +95,7 @@ public:
     ~QCameraImageCapture();
 
     bool isAvailable() const;
-    QtMultimedia::AvailabilityStatus availability() const;
+    QMultimedia::AvailabilityStatus availability() const;
 
     QMediaObject *mediaObject() const;
 
diff --git a/src/multimedia/controls/qmediaavailabilitycontrol.cpp b/src/multimedia/controls/qmediaavailabilitycontrol.cpp
index 92139ac..0f522e9 100644
--- a/src/multimedia/controls/qmediaavailabilitycontrol.cpp
+++ b/src/multimedia/controls/qmediaavailabilitycontrol.cpp
@@ -90,7 +90,7 @@ QMediaAvailabilityControl::~QMediaAvailabilityControl()
 
 
 /*!
-  \fn QtMultimedia::AvailabilityStatus QMediaAvailabilityControl::availability() const
+  \fn QMultimedia::AvailabilityStatus QMediaAvailabilityControl::availability() const
 
   Returns the current availability of this instance of the media service.
   If the availability changes at run time (for example, some other media
@@ -100,7 +100,7 @@ QMediaAvailabilityControl::~QMediaAvailabilityControl()
 
 
 /*!
-    \fn void QMediaAvailabilityControl::availabilityChanged(QtMultimedia::AvailabilityStatus availability)
+    \fn void QMediaAvailabilityControl::availabilityChanged(QMultimedia::AvailabilityStatus availability)
 
     Signal emitted when the current \a availability value changed.
 */
diff --git a/src/multimedia/controls/qmediaavailabilitycontrol.h b/src/multimedia/controls/qmediaavailabilitycontrol.h
index 2cdc061..ee1b642 100644
--- a/src/multimedia/controls/qmediaavailabilitycontrol.h
+++ b/src/multimedia/controls/qmediaavailabilitycontrol.h
@@ -60,10 +60,10 @@ class Q_MULTIMEDIA_EXPORT QMediaAvailabilityControl : public QMediaControl
 public:
     ~QMediaAvailabilityControl();
 
-    virtual QtMultimedia::AvailabilityStatus availability() const = 0;
+    virtual QMultimedia::AvailabilityStatus availability() const = 0;
 
 Q_SIGNALS:
-    void availabilityChanged(QtMultimedia::AvailabilityStatus availability);
+    void availabilityChanged(QMultimedia::AvailabilityStatus availability);
 
 protected:
     QMediaAvailabilityControl(QObject* parent = 0);
diff --git a/src/multimedia/doc/src/snippets/multimedia-snippets/media.cpp b/src/multimedia/doc/src/snippets/multimedia-snippets/media.cpp
index 56b2afd..300ad39 100644
--- a/src/multimedia/doc/src/snippets/multimedia-snippets/media.cpp
+++ b/src/multimedia/doc/src/snippets/multimedia-snippets/media.cpp
@@ -200,7 +200,7 @@ void MediaExample::MediaRecorder()
 
     QAudioEncoderSettings audioSettings;
     audioSettings.setCodec("audio/amr");
-    audioSettings.setQuality(QtMultimedia::HighQuality);
+    audioSettings.setQuality(QMultimedia::HighQuality);
 
     recorder->setAudioSettings(audioSettings);
 
@@ -216,7 +216,7 @@ void MediaExample::AudioRecorder()
 
     QAudioEncoderSettings audioSettings;
     audioSettings.setCodec("audio/amr");
-    audioSettings.setQuality(QtMultimedia::HighQuality);
+    audioSettings.setQuality(QMultimedia::HighQuality);
 
     audioRecorder->setEncodingSettings(audioSettings);
 
@@ -264,7 +264,7 @@ void MediaExample::AudioProbe()
 
     QAudioEncoderSettings audioSettings;
     audioSettings.setCodec("audio/amr");
-    audioSettings.setQuality(QtMultimedia::HighQuality);
+    audioSettings.setQuality(QMultimedia::HighQuality);
 
     audioRecorder->setEncodingSettings(audioSettings);
 
diff --git a/src/multimedia/gsttools_headers/qgstutils_p.h b/src/multimedia/gsttools_headers/qgstutils_p.h
index a1b427d..36637d8 100644
--- a/src/multimedia/gsttools_headers/qgstutils_p.h
+++ b/src/multimedia/gsttools_headers/qgstutils_p.h
@@ -73,7 +73,7 @@ namespace QGstUtils {
     QAudioFormat audioFormatForBuffer(GstBuffer *buffer);
     GstCaps *capsForAudioFormat(QAudioFormat format);
     void initializeGst();
-    QtMultimedia::SupportEstimate hasSupport(const QString &mimeType,
+    QMultimedia::SupportEstimate hasSupport(const QString &mimeType,
                                              const QStringList &codecs,
                                              const QSet<QString> &supportedMimeTypeSet);
 }
diff --git a/src/multimedia/playback/qmediaplayer.cpp b/src/multimedia/playback/qmediaplayer.cpp
index 2555deb..82c709b 100644
--- a/src/multimedia/playback/qmediaplayer.cpp
+++ b/src/multimedia/playback/qmediaplayer.cpp
@@ -913,7 +913,7 @@ void QMediaPlayer::unbind(QObject *obj)
     The \a flags argument allows additional requirements such as performance indicators to be
     specified.
 */
-QtMultimedia::SupportEstimate QMediaPlayer::hasSupport(const QString &mimeType,
+QMultimedia::SupportEstimate QMediaPlayer::hasSupport(const QString &mimeType,
                                                const QStringList& codecs,
                                                Flags flags)
 {
@@ -1013,12 +1013,12 @@ void QMediaPlayer::setVideoOutput(QAbstractVideoSurface *surface)
 }
 
 /*! \reimp */
-QtMultimedia::AvailabilityStatus QMediaPlayer::availability() const
+QMultimedia::AvailabilityStatus QMediaPlayer::availability() const
 {
     Q_D(const QMediaPlayer);
 
     if (!d->control)
-        return QtMultimedia::ServiceMissing;
+        return QMultimedia::ServiceMissing;
 
     return QMediaObject::availability();
 }
diff --git a/src/multimedia/playback/qmediaplayer.h b/src/multimedia/playback/qmediaplayer.h
index 787f2d3..ab8f214 100644
--- a/src/multimedia/playback/qmediaplayer.h
+++ b/src/multimedia/playback/qmediaplayer.h
@@ -124,7 +124,7 @@ public:
     QMediaPlayer(QObject *parent = 0, Flags flags = 0);
     ~QMediaPlayer();
 
-    static QtMultimedia::SupportEstimate hasSupport(const QString &mimeType,
+    static QMultimedia::SupportEstimate hasSupport(const QString &mimeType,
                                             const QStringList& codecs = QStringList(),
                                             Flags flags = 0);
     static QStringList supportedMimeTypes(Flags flags = 0);
@@ -159,7 +159,7 @@ public:
 
     QNetworkConfiguration currentNetworkConfiguration() const;
 
-    QtMultimedia::AvailabilityStatus availability() const;
+    QMultimedia::AvailabilityStatus availability() const;
 
 public Q_SLOTS:
     void play();
diff --git a/src/multimedia/qmediaobject.cpp b/src/multimedia/qmediaobject.cpp
index 2495622..d1cafbf 100644
--- a/src/multimedia/qmediaobject.cpp
+++ b/src/multimedia/qmediaobject.cpp
@@ -121,15 +121,15 @@ QMediaObject::~QMediaObject()
     audio playback during a phone call or similar).
 */
 
-QtMultimedia::AvailabilityStatus QMediaObject::availability() const
+QMultimedia::AvailabilityStatus QMediaObject::availability() const
 {
     if (d_func()->service == 0)
-        return QtMultimedia::ServiceMissing;
+        return QMultimedia::ServiceMissing;
 
     if (d_func()->availabilityControl)
         return d_func()->availabilityControl->availability();
 
-    return QtMultimedia::Available;
+    return QMultimedia::Available;
 }
 
 /*!
@@ -138,7 +138,7 @@ QtMultimedia::AvailabilityStatus QMediaObject::availability() const
 
 bool QMediaObject::isAvailable() const
 {
-    return availability() == QtMultimedia::Available;
+    return availability() == QMultimedia::Available;
 }
 
 /*!
@@ -408,7 +408,7 @@ void QMediaObject::setupControls()
         d->availabilityControl = d->service->requestControl<QMediaAvailabilityControl*>();
         if (d->availabilityControl) {
             connect(d->availabilityControl,
-                    SIGNAL(availabilityChanged(QtMultimedia::AvailabilityStatus)),
+                    SIGNAL(availabilityChanged(QMultimedia::AvailabilityStatus)),
                     SLOT(_q_availabilityChanged()));
         }
     }
@@ -421,7 +421,7 @@ void QMediaObject::setupControls()
 */
 
 /*!
-    \fn QMediaObject::availabilityChanged(QtMultimedia::AvailabilityStatus availability)
+    \fn QMediaObject::availabilityChanged(QMultimedia::AvailabilityStatus availability)
 
     Signal emitted when the availability of the service has changed to \a availabilty
 */
diff --git a/src/multimedia/qmediaobject.h b/src/multimedia/qmediaobject.h
index abfcff9..258b430 100644
--- a/src/multimedia/qmediaobject.h
+++ b/src/multimedia/qmediaobject.h
@@ -65,7 +65,7 @@ public:
     ~QMediaObject();
 
     virtual bool isAvailable() const;
-    virtual QtMultimedia::AvailabilityStatus availability() const;
+    virtual QMultimedia::AvailabilityStatus availability() const;
 
     virtual QMediaService* service() const;
 
@@ -88,7 +88,7 @@ Q_SIGNALS:
     void metaDataChanged(const QString &key, const QVariant &value);
 
     void availabilityChanged(bool available);
-    void availabilityChanged(QtMultimedia::AvailabilityStatus availability);
+    void availabilityChanged(QMultimedia::AvailabilityStatus availability);
 
 protected:
     QMediaObject(QObject *parent, QMediaService *service);
diff --git a/src/multimedia/qmediaserviceprovider.cpp b/src/multimedia/qmediaserviceprovider.cpp
index 4b3b5c3..9d95fa5 100644
--- a/src/multimedia/qmediaserviceprovider.cpp
+++ b/src/multimedia/qmediaserviceprovider.cpp
@@ -346,9 +346,9 @@ public:
                 }
                 break;
             case QMediaServiceProviderHint::ContentType: {
-                    QtMultimedia::SupportEstimate estimate = QtMultimedia::NotSupported;
+                    QMultimedia::SupportEstimate estimate = QMultimedia::NotSupported;
                     foreach (QMediaServiceProviderPlugin *currentPlugin, plugins) {
-                        QtMultimedia::SupportEstimate currentEstimate = QtMultimedia::MaybeSupported;
+                        QMultimedia::SupportEstimate currentEstimate = QMultimedia::MaybeSupported;
                         QMediaServiceSupportedFormatsInterface *iface =
                                 qobject_cast<QMediaServiceSupportedFormatsInterface*>(currentPlugin);
 
@@ -359,7 +359,7 @@ public:
                             estimate = currentEstimate;
                             plugin = currentPlugin;
 
-                            if (currentEstimate == QtMultimedia::PreferredService)
+                            if (currentEstimate == QMultimedia::PreferredService)
                                 break;
                         }
                     }
@@ -390,7 +390,7 @@ public:
         }
     }
 
-    QtMultimedia::SupportEstimate hasSupport(const QByteArray &serviceType,
+    QMultimedia::SupportEstimate hasSupport(const QByteArray &serviceType,
                                      const QString &mimeType,
                                      const QStringList& codecs,
                                      int flags) const
@@ -398,10 +398,10 @@ public:
         QList<QObject*> instances = loader()->instances(QLatin1String(serviceType));
 
         if (instances.isEmpty())
-            return QtMultimedia::NotSupported;
+            return QMultimedia::NotSupported;
 
         bool allServicesProvideInterface = true;
-        QtMultimedia::SupportEstimate supportEstimate = QtMultimedia::NotSupported;
+        QMultimedia::SupportEstimate supportEstimate = QMultimedia::NotSupported;
 
         foreach(QObject *obj, instances) {
             QMediaServiceSupportedFormatsInterface *iface =
@@ -435,12 +435,12 @@ public:
         }
 
         //don't return PreferredService
-        supportEstimate = qMin(supportEstimate, QtMultimedia::ProbablySupported);
+        supportEstimate = qMin(supportEstimate, QMultimedia::ProbablySupported);
 
         //Return NotSupported only if no services are available of serviceType
         //or all the services returned NotSupported, otherwise return at least MaybeSupported
         if (!allServicesProvideInterface)
-            supportEstimate = qMax(QtMultimedia::MaybeSupported, supportEstimate);
+            supportEstimate = qMax(QMultimedia::MaybeSupported, supportEstimate);
 
         return supportEstimate;
     }
@@ -557,14 +557,14 @@ Q_GLOBAL_STATIC(QPluginServiceProvider, pluginProvider);
 */
 
 /*!
-    \fn QtMultimedia::SupportEstimate QMediaServiceProvider::hasSupport(const QByteArray &serviceType, const QString &mimeType, const QStringList& codecs, int flags) const
+    \fn QMultimedia::SupportEstimate QMediaServiceProvider::hasSupport(const QByteArray &serviceType, const QString &mimeType, const QStringList& codecs, int flags) const
 
     Returns how confident a media service provider is that is can provide a \a
     serviceType service that is able to play media of a specific \a mimeType
     that is encoded using the listed \a codecs while adhering to constraints
     identified in \a flags.
 */
-QtMultimedia::SupportEstimate QMediaServiceProvider::hasSupport(const QByteArray &serviceType,
+QMultimedia::SupportEstimate QMediaServiceProvider::hasSupport(const QByteArray &serviceType,
                                                         const QString &mimeType,
                                                         const QStringList& codecs,
                                                         int flags) const
@@ -574,7 +574,7 @@ QtMultimedia::SupportEstimate QMediaServiceProvider::hasSupport(const QByteArray
     Q_UNUSED(codecs);
     Q_UNUSED(flags);
 
-    return QtMultimedia::MaybeSupported;
+    return QMultimedia::MaybeSupported;
 }
 
 /*!
diff --git a/src/multimedia/qmediaserviceprovider_p.h b/src/multimedia/qmediaserviceprovider_p.h
index c79ca33..c0689ef 100644
--- a/src/multimedia/qmediaserviceprovider_p.h
+++ b/src/multimedia/qmediaserviceprovider_p.h
@@ -63,7 +63,7 @@ public:
     virtual QMediaService* requestService(const QByteArray &type, const QMediaServiceProviderHint &hint = QMediaServiceProviderHint()) = 0;
     virtual void releaseService(QMediaService *service) = 0;
 
-    virtual QtMultimedia::SupportEstimate hasSupport(const QByteArray &serviceType,
+    virtual QMultimedia::SupportEstimate hasSupport(const QByteArray &serviceType,
                                              const QString &mimeType,
                                              const QStringList& codecs,
                                              int flags = 0) const;
diff --git a/src/multimedia/qmediaserviceproviderplugin.h b/src/multimedia/qmediaserviceproviderplugin.h
index 611f7d8..d45c858 100644
--- a/src/multimedia/qmediaserviceproviderplugin.h
+++ b/src/multimedia/qmediaserviceproviderplugin.h
@@ -124,7 +124,7 @@ class QString;
 struct Q_MULTIMEDIA_EXPORT QMediaServiceSupportedFormatsInterface
 {
     virtual ~QMediaServiceSupportedFormatsInterface() {}
-    virtual QtMultimedia::SupportEstimate hasSupport(const QString &mimeType, const QStringList& codecs) const = 0;
+    virtual QMultimedia::SupportEstimate hasSupport(const QString &mimeType, const QStringList& codecs) const = 0;
     virtual QStringList supportedMimeTypes() const = 0;
 };
 
diff --git a/src/multimedia/qtmedianamespace.cpp b/src/multimedia/qtmedianamespace.cpp
index 218d9c4..4c6bb46 100644
--- a/src/multimedia/qtmedianamespace.cpp
+++ b/src/multimedia/qtmedianamespace.cpp
@@ -30,7 +30,7 @@
 QT_BEGIN_NAMESPACE
 
 /*!
-    \namespace QtMultimedia
+    \namespace QMultimedia
     \inheaderfile qtmedianamespace.h
     \ingroup multimedia
     \inmodule QtMultimedia
@@ -38,7 +38,7 @@ QT_BEGIN_NAMESPACE
     \ingroup multimedia
     \ingroup multimedia_core
 
-    \brief The QtMultimedia namespace contains miscellaneous identifiers used throughout the Qt Multimedia library.
+    \brief The QMultimedia namespace contains miscellaneous identifiers used throughout the Qt Multimedia library.
 
 */
 
@@ -49,16 +49,16 @@ namespace
     public:
         QMultimediaNamespacePrivateRegisterMetaTypes()
         {
-            qRegisterMetaType<QtMultimedia::AvailabilityStatus>();
-            qRegisterMetaType<QtMultimedia::SupportEstimate>();
-            qRegisterMetaType<QtMultimedia::EncodingMode>();
-            qRegisterMetaType<QtMultimedia::EncodingQuality>();
+            qRegisterMetaType<QMultimedia::AvailabilityStatus>();
+            qRegisterMetaType<QMultimedia::SupportEstimate>();
+            qRegisterMetaType<QMultimedia::EncodingMode>();
+            qRegisterMetaType<QMultimedia::EncodingQuality>();
         }
     } _registerMetaTypes;
 }
 
 /*!
-    \enum QtMultimedia::SupportEstimate
+    \enum QMultimedia::SupportEstimate
 
     Enumerates the levels of support a media service provider may have for a feature.
 
@@ -69,7 +69,7 @@ namespace
 */
 
 /*!
-    \enum QtMultimedia::EncodingQuality
+    \enum QMultimedia::EncodingQuality
 
     Enumerates quality encoding levels.
 
@@ -81,7 +81,7 @@ namespace
 */
 
 /*!
-    \enum QtMultimedia::EncodingMode
+    \enum QMultimedia::EncodingMode
 
     Enumerates encoding modes.
 
@@ -95,7 +95,7 @@ namespace
 */
 
 /*!
-    \enum QtMultimedia::AvailabilityStatus
+    \enum QMultimedia::AvailabilityStatus
 
     Enumerates Service status errors.
 
diff --git a/src/multimedia/qtmedianamespace.h b/src/multimedia/qtmedianamespace.h
index 1a571cb..e7fdfb6 100644
--- a/src/multimedia/qtmedianamespace.h
+++ b/src/multimedia/qtmedianamespace.h
@@ -53,10 +53,7 @@ QT_BEGIN_HEADER
 
 QT_BEGIN_NAMESPACE
 
-// Class forward declaration required for QDoc bug
-class QString;
-
-namespace QtMultimedia
+namespace QMultimedia
 {
     enum SupportEstimate
     {
@@ -95,10 +92,10 @@ namespace QtMultimedia
 
 QT_END_NAMESPACE
 
-Q_DECLARE_METATYPE(QtMultimedia::AvailabilityStatus)
-Q_DECLARE_METATYPE(QtMultimedia::SupportEstimate)
-Q_DECLARE_METATYPE(QtMultimedia::EncodingMode)
-Q_DECLARE_METATYPE(QtMultimedia::EncodingQuality)
+Q_DECLARE_METATYPE(QMultimedia::AvailabilityStatus)
+Q_DECLARE_METATYPE(QMultimedia::SupportEstimate)
+Q_DECLARE_METATYPE(QMultimedia::EncodingMode)
+Q_DECLARE_METATYPE(QMultimedia::EncodingQuality)
 
 QT_END_HEADER
 
diff --git a/src/multimedia/radio/qradiodata.cpp b/src/multimedia/radio/qradiodata.cpp
index c8853cb..f6d3808 100644
--- a/src/multimedia/radio/qradiodata.cpp
+++ b/src/multimedia/radio/qradiodata.cpp
@@ -228,15 +228,15 @@ bool QRadioData::setMediaObject(QMediaObject *mediaObject)
     Returns the availability of the radio data service.
 
     A long as there is a media service which provides radio functionality, then the
-    \l{QtMultimedia::AvailabilityStatus}{availability} will be that
+    \l{QMultimedia::AvailabilityStatus}{availability} will be that
     of the \l{QRadioTuner::availability()}{radio tuner}.
 */
-QtMultimedia::AvailabilityStatus QRadioData::availability() const
+QMultimedia::AvailabilityStatus QRadioData::availability() const
 {
     Q_D(const QRadioData);
 
     if (d->control == 0)
-        return QtMultimedia::ServiceMissing;
+        return QMultimedia::ServiceMissing;
 
     return d->mediaObject->availability();
 }
diff --git a/src/multimedia/radio/qradiodata.h b/src/multimedia/radio/qradiodata.h
index 6c6b0f4..6d67bce 100644
--- a/src/multimedia/radio/qradiodata.h
+++ b/src/multimedia/radio/qradiodata.h
@@ -89,7 +89,7 @@ public:
     QRadioData(QMediaObject *mediaObject, QObject *parent = 0);
     ~QRadioData();
 
-    QtMultimedia::AvailabilityStatus availability() const;
+    QMultimedia::AvailabilityStatus availability() const;
 
     QMediaObject *mediaObject() const;
 
diff --git a/src/multimedia/radio/qradiotuner.cpp b/src/multimedia/radio/qradiotuner.cpp
index ad2bcc7..d9d9cb6 100644
--- a/src/multimedia/radio/qradiotuner.cpp
+++ b/src/multimedia/radio/qradiotuner.cpp
@@ -159,13 +159,13 @@ QRadioTuner::~QRadioTuner()
 /*!
     Returns the availability of the radio tuner.
 */
-QtMultimedia::AvailabilityStatus QRadioTuner::availability() const
+QMultimedia::AvailabilityStatus QRadioTuner::availability() const
 {
     if (d_func()->control == 0)
-        return QtMultimedia::ServiceMissing;
+        return QMultimedia::ServiceMissing;
 
     if (!d_func()->control->isAntennaConnected())
-        return QtMultimedia::ResourceError;
+        return QMultimedia::ResourceError;
 
     return QMediaObject::availability();
 }
diff --git a/src/multimedia/radio/qradiotuner.h b/src/multimedia/radio/qradiotuner.h
index eda8bc8..463cafd 100644
--- a/src/multimedia/radio/qradiotuner.h
+++ b/src/multimedia/radio/qradiotuner.h
@@ -85,7 +85,7 @@ public:
     QRadioTuner(QObject *parent = 0);
     ~QRadioTuner();
 
-    QtMultimedia::AvailabilityStatus availability() const;
+    QMultimedia::AvailabilityStatus availability() const;
 
     State state() const;
 
diff --git a/src/multimedia/recording/qmediaencodersettings.cpp b/src/multimedia/recording/qmediaencodersettings.cpp
index f481d86..8f8287f 100644
--- a/src/multimedia/recording/qmediaencodersettings.cpp
+++ b/src/multimedia/recording/qmediaencodersettings.cpp
@@ -62,11 +62,11 @@ class QAudioEncoderSettingsPrivate  : public QSharedData
 public:
     QAudioEncoderSettingsPrivate() :
         isNull(true),
-        encodingMode(QtMultimedia::ConstantQualityEncoding),
+        encodingMode(QMultimedia::ConstantQualityEncoding),
         bitrate(-1),
         sampleRate(-1),
         channels(-1),
-        quality(QtMultimedia::NormalQuality)
+        quality(QMultimedia::NormalQuality)
     {
     }
 
@@ -84,12 +84,12 @@ public:
     }
 
     bool isNull;
-    QtMultimedia::EncodingMode encodingMode;
+    QMultimedia::EncodingMode encodingMode;
     QString codec;
     int bitrate;
     int sampleRate;
     int channels;
-    QtMultimedia::EncodingQuality quality;
+    QMultimedia::EncodingQuality quality;
     QVariantMap encodingOptions;
 
 private:
@@ -199,9 +199,9 @@ bool QAudioEncoderSettings::isNull() const
 /*!
     Returns the audio encoding mode.
 
-    \sa QtMultimedia::EncodingMode
+    \sa QMultimedia::EncodingMode
 */
-QtMultimedia::EncodingMode QAudioEncoderSettings::encodingMode() const
+QMultimedia::EncodingMode QAudioEncoderSettings::encodingMode() const
 {
     return d->encodingMode;
 }
@@ -209,16 +209,16 @@ QtMultimedia::EncodingMode QAudioEncoderSettings::encodingMode() const
 /*!
     Sets the audio encoding \a mode setting.
 
-    If QtMultimedia::ConstantQualityEncoding is set, the quality
+    If QMultimedia::ConstantQualityEncoding is set, the quality
     encoding parameter is used and bit rate is ignored,
     otherwise the bitrate is used.
 
     The audio codec, channels count and sample rate settings are used in all
     the encoding modes.
 
-    \sa encodingMode(), QtMultimedia::EncodingMode
+    \sa encodingMode(), QMultimedia::EncodingMode
 */
-void QAudioEncoderSettings::setEncodingMode(QtMultimedia::EncodingMode mode)
+void QAudioEncoderSettings::setEncodingMode(QMultimedia::EncodingMode mode)
 {
     d->encodingMode = mode;
 }
@@ -301,7 +301,7 @@ void QAudioEncoderSettings::setSampleRate(int rate)
     Returns the audio encoding quality.
 */
 
-QtMultimedia::EncodingQuality QAudioEncoderSettings::quality() const
+QMultimedia::EncodingQuality QAudioEncoderSettings::quality() const
 {
     return d->quality;
 }
@@ -313,9 +313,9 @@ QtMultimedia::EncodingQuality QAudioEncoderSettings::quality() const
     set of encoding parameters to achieve the desired quality level.
 
     The \a quality settings parameter is only used in the
-    \l {QtMultimedia::ConstantQualityEncoding}{constant quality} \l{encodingMode()}{encoding mode}.
+    \l {QMultimedia::ConstantQualityEncoding}{constant quality} \l{encodingMode()}{encoding mode}.
 */
-void QAudioEncoderSettings::setQuality(QtMultimedia::EncodingQuality quality)
+void QAudioEncoderSettings::setQuality(QMultimedia::EncodingQuality quality)
 {
     d->isNull = false;
     d->quality = quality;
@@ -377,10 +377,10 @@ class QVideoEncoderSettingsPrivate  : public QSharedData
 public:
     QVideoEncoderSettingsPrivate() :
         isNull(true),
-        encodingMode(QtMultimedia::ConstantQualityEncoding),
+        encodingMode(QMultimedia::ConstantQualityEncoding),
         bitrate(-1),
         frameRate(0),
-        quality(QtMultimedia::NormalQuality)
+        quality(QMultimedia::NormalQuality)
     {
     }
 
@@ -398,12 +398,12 @@ public:
     }
 
     bool isNull;
-    QtMultimedia::EncodingMode encodingMode;
+    QMultimedia::EncodingMode encodingMode;
     QString codec;
     int bitrate;
     QSize resolution;
     qreal frameRate;
-    QtMultimedia::EncodingQuality quality;
+    QMultimedia::EncodingQuality quality;
     QVariantMap encodingOptions;
 
 private:
@@ -508,9 +508,9 @@ bool QVideoEncoderSettings::isNull() const
 /*!
     Returns the video encoding mode.
 
-    \sa QtMultimedia::EncodingMode
+    \sa QMultimedia::EncodingMode
 */
-QtMultimedia::EncodingMode QVideoEncoderSettings::encodingMode() const
+QMultimedia::EncodingMode QVideoEncoderSettings::encodingMode() const
 {
     return d->encodingMode;
 }
@@ -518,15 +518,15 @@ QtMultimedia::EncodingMode QVideoEncoderSettings::encodingMode() const
 /*!
     Sets the video encoding \a mode.
 
-    If QtMultimedia::ConstantQualityEncoding is set,
+    If QMultimedia::ConstantQualityEncoding is set,
     the quality encoding parameter is used and bit rate is ignored,
     otherwise the bitrate is used.
 
     The rest of encoding settings are respected regardless of encoding mode.
 
-    \sa QtMultimedia::EncodingMode
+    \sa QMultimedia::EncodingMode
 */
-void QVideoEncoderSettings::setEncodingMode(QtMultimedia::EncodingMode mode)
+void QVideoEncoderSettings::setEncodingMode(QMultimedia::EncodingMode mode)
 {
     d->isNull = false;
     d->encodingMode = mode;
@@ -629,7 +629,7 @@ void QVideoEncoderSettings::setResolution(int width, int height)
     Returns the video encoding quality.
 */
 
-QtMultimedia::EncodingQuality QVideoEncoderSettings::quality() const
+QMultimedia::EncodingQuality QVideoEncoderSettings::quality() const
 {
     return d->quality;
 }
@@ -641,13 +641,13 @@ QtMultimedia::EncodingQuality QVideoEncoderSettings::quality() const
     set of encoding parameters to achieve the desired quality level.
 
     The \a quality settings parameter is only used in the
-    \l {QtMultimedia::ConstantQualityEncoding}{constant quality} \l{encodingMode()}{encoding mode}.
+    \l {QMultimedia::ConstantQualityEncoding}{constant quality} \l{encodingMode()}{encoding mode}.
     The \a quality settings parameter is only used in the \l
-    {QtMultimedia::ConstantQualityEncoding}{constant quality}
+    {QMultimedia::ConstantQualityEncoding}{constant quality}
     \l{encodingMode()}{encoding mode}.
 */
 
-void QVideoEncoderSettings::setQuality(QtMultimedia::EncodingQuality quality)
+void QVideoEncoderSettings::setQuality(QMultimedia::EncodingQuality quality)
 {
     d->isNull = false;
     d->quality = quality;
@@ -710,7 +710,7 @@ class QImageEncoderSettingsPrivate  : public QSharedData
 public:
     QImageEncoderSettingsPrivate() :
         isNull(true),
-        quality(QtMultimedia::NormalQuality)
+        quality(QMultimedia::NormalQuality)
     {
     }
 
@@ -727,7 +727,7 @@ public:
     bool isNull;
     QString codec;
     QSize resolution;
-    QtMultimedia::EncodingQuality quality;
+    QMultimedia::EncodingQuality quality;
     QVariantMap encodingOptions;
 
 private:
@@ -887,7 +887,7 @@ void QImageEncoderSettings::setResolution(int width, int height)
     Returns the image encoding quality.
 */
 
-QtMultimedia::EncodingQuality QImageEncoderSettings::quality() const
+QMultimedia::EncodingQuality QImageEncoderSettings::quality() const
 {
     return d->quality;
 }
@@ -896,7 +896,7 @@ QtMultimedia::EncodingQuality QImageEncoderSettings::quality() const
     Sets the image encoding \a quality.
 */
 
-void QImageEncoderSettings::setQuality(QtMultimedia::EncodingQuality quality)
+void QImageEncoderSettings::setQuality(QMultimedia::EncodingQuality quality)
 {
     d->isNull = false;
     d->quality = quality;
diff --git a/src/multimedia/recording/qmediaencodersettings.h b/src/multimedia/recording/qmediaencodersettings.h
index c5cbf5a..3f9bae3 100644
--- a/src/multimedia/recording/qmediaencodersettings.h
+++ b/src/multimedia/recording/qmediaencodersettings.h
@@ -70,8 +70,8 @@ public:
 
     bool isNull() const;
 
-    QtMultimedia::EncodingMode encodingMode() const;
-    void setEncodingMode(QtMultimedia::EncodingMode);
+    QMultimedia::EncodingMode encodingMode() const;
+    void setEncodingMode(QMultimedia::EncodingMode);
 
     QString codec() const;
     void setCodec(const QString& codec);
@@ -85,8 +85,8 @@ public:
     int sampleRate() const;
     void setSampleRate(int rate);
 
-    QtMultimedia::EncodingQuality quality() const;
-    void setQuality(QtMultimedia::EncodingQuality quality);
+    QMultimedia::EncodingQuality quality() const;
+    void setQuality(QMultimedia::EncodingQuality quality);
 
     QVariant encodingOption(const QString &option) const;
     QVariantMap encodingOptions() const;
@@ -112,8 +112,8 @@ public:
 
     bool isNull() const;
 
-    QtMultimedia::EncodingMode encodingMode() const;
-    void setEncodingMode(QtMultimedia::EncodingMode);
+    QMultimedia::EncodingMode encodingMode() const;
+    void setEncodingMode(QMultimedia::EncodingMode);
 
     QString codec() const;
     void setCodec(const QString &);
@@ -128,8 +128,8 @@ public:
     int bitRate() const;
     void setBitRate(int bitrate);
 
-    QtMultimedia::EncodingQuality quality() const;
-    void setQuality(QtMultimedia::EncodingQuality quality);
+    QMultimedia::EncodingQuality quality() const;
+    void setQuality(QMultimedia::EncodingQuality quality);
 
     QVariant encodingOption(const QString &option) const;
     QVariantMap encodingOptions() const;
@@ -162,8 +162,8 @@ public:
     void setResolution(const QSize &);
     void setResolution(int width, int height);
 
-    QtMultimedia::EncodingQuality quality() const;
-    void setQuality(QtMultimedia::EncodingQuality quality);
+    QMultimedia::EncodingQuality quality() const;
+    void setQuality(QMultimedia::EncodingQuality quality);
 
     QVariant encodingOption(const QString &option) const;
     QVariantMap encodingOptions() const;
diff --git a/src/multimedia/recording/qmediarecorder.cpp b/src/multimedia/recording/qmediarecorder.cpp
index e6bbcdd..dd303a1 100644
--- a/src/multimedia/recording/qmediarecorder.cpp
+++ b/src/multimedia/recording/qmediarecorder.cpp
@@ -185,7 +185,7 @@ void QMediaRecorderPrivate::_q_applySettings()
     }
 }
 
-void QMediaRecorderPrivate::_q_availabilityChanged(QtMultimedia::AvailabilityStatus availability)
+void QMediaRecorderPrivate::_q_availabilityChanged(QMultimedia::AvailabilityStatus availability)
 {
     Q_Q(QMediaRecorder);
     Q_UNUSED(error)
@@ -327,8 +327,8 @@ bool QMediaRecorder::setMediaObject(QMediaObject *object)
                 service->releaseControl(d->metaDataControl);
             }
             if (d->availabilityControl) {
-                disconnect(d->availabilityControl, SIGNAL(availabilityChanged(QtMultimedia::AvailabilityStatus)),
-                           this, SLOT(_q_availabilityChanged(QtMultimedia::AvailabilityStatus)));
+                disconnect(d->availabilityControl, SIGNAL(availabilityChanged(QMultimedia::AvailabilityStatus)),
+                           this, SLOT(_q_availabilityChanged(QMultimedia::AvailabilityStatus)));
                 service->releaseControl(d->availabilityControl);
             }
         }
@@ -379,8 +379,8 @@ bool QMediaRecorder::setMediaObject(QMediaObject *object)
 
                 d->availabilityControl = service->requestControl<QMediaAvailabilityControl*>();
                 if (d->availabilityControl) {
-                    connect(d->availabilityControl, SIGNAL(availabilityChanged(QtMultimedia::AvailabilityStatus)),
-                            this, SLOT(_q_availabilityChanged(QtMultimedia::AvailabilityStatus)));
+                    connect(d->availabilityControl, SIGNAL(availabilityChanged(QMultimedia::AvailabilityStatus)),
+                            this, SLOT(_q_availabilityChanged(QMultimedia::AvailabilityStatus)));
                 }
 
                 connect(d->control, SIGNAL(stateChanged(QMediaRecorder::State)),
@@ -449,7 +449,7 @@ bool QMediaRecorder::setMediaObject(QMediaObject *object)
 */
 bool QMediaRecorder::isAvailable() const
 {
-    return availability() == QtMultimedia::Available;
+    return availability() == QMultimedia::Available;
 }
 
 /*!
@@ -457,15 +457,15 @@ bool QMediaRecorder::isAvailable() const
 
     \sa availabilityChanged()
 */
-QtMultimedia::AvailabilityStatus QMediaRecorder::availability() const
+QMultimedia::AvailabilityStatus QMediaRecorder::availability() const
 {
     if (d_func()->control == NULL)
-        return QtMultimedia::ServiceMissing;
+        return QMultimedia::ServiceMissing;
 
     if (d_func()->availabilityControl)
         return d_func()->availabilityControl->availability();
 
-    return QtMultimedia::Available;
+    return QMultimedia::Available;
 }
 
 QUrl QMediaRecorder::outputLocation() const
@@ -987,7 +987,7 @@ void QMediaRecorder::stop()
 */
 
 /*!
-    \fn QMediaRecorder::availabilityChanged(QtMultimedia::AvailabilityStatus availability)
+    \fn QMediaRecorder::availabilityChanged(QMultimedia::AvailabilityStatus availability)
 
     Signals that the service availability has changed to \a availability.
 */
diff --git a/src/multimedia/recording/qmediarecorder.h b/src/multimedia/recording/qmediarecorder.h
index 39352ee..56ef888 100644
--- a/src/multimedia/recording/qmediarecorder.h
+++ b/src/multimedia/recording/qmediarecorder.h
@@ -116,7 +116,7 @@ public:
     QMediaObject *mediaObject() const;
 
     bool isAvailable() const;
-    QtMultimedia::AvailabilityStatus availability() const;
+    QMultimedia::AvailabilityStatus availability() const;
 
     QUrl outputLocation() const;
     bool setOutputLocation(const QUrl &location);
@@ -194,7 +194,7 @@ Q_SIGNALS:
     void metaDataChanged(const QString &key, const QVariant &value);
 
     void availabilityChanged(bool available);
-    void availabilityChanged(QtMultimedia::AvailabilityStatus availability);
+    void availabilityChanged(QMultimedia::AvailabilityStatus availability);
 
 protected:
     QMediaRecorder(QMediaRecorderPrivate &dd, QMediaObject *mediaObject, QObject *parent = 0);
@@ -211,7 +211,7 @@ private:
     Q_PRIVATE_SLOT(d_func(), void _q_updateActualLocation(const QUrl &))
     Q_PRIVATE_SLOT(d_func(), void _q_updateNotifyInterval(int))
     Q_PRIVATE_SLOT(d_func(), void _q_applySettings())
-    Q_PRIVATE_SLOT(d_func(), void _q_availabilityChanged(QtMultimedia::AvailabilityStatus))
+    Q_PRIVATE_SLOT(d_func(), void _q_availabilityChanged(QMultimedia::AvailabilityStatus))
 };
 
 QT_END_NAMESPACE
diff --git a/src/multimedia/recording/qmediarecorder_p.h b/src/multimedia/recording/qmediarecorder_p.h
index 0618008..f4c98c9 100644
--- a/src/multimedia/recording/qmediarecorder_p.h
+++ b/src/multimedia/recording/qmediarecorder_p.h
@@ -92,7 +92,7 @@ public:
     void _q_notify();
     void _q_updateNotifyInterval(int ms);
     void _q_applySettings();
-    void _q_availabilityChanged(QtMultimedia::AvailabilityStatus availability);
+    void _q_availabilityChanged(QMultimedia::AvailabilityStatus availability);
 
     QMediaRecorder *q_ptr;
 };
diff --git a/src/plugins/audiocapture/audioencodercontrol.cpp b/src/plugins/audiocapture/audioencodercontrol.cpp
index a43d6b6..c9906af 100644
--- a/src/plugins/audiocapture/audioencodercontrol.cpp
+++ b/src/plugins/audiocapture/audioencodercontrol.cpp
@@ -60,12 +60,12 @@ AudioEncoderControl::AudioEncoderControl(QObject *parent)
     fmt.setByteOrder(QAudioFormat::LittleEndian);
     m_session->setFormat(fmt);
 
-    m_settings.setEncodingMode(QtMultimedia::ConstantQualityEncoding);
+    m_settings.setEncodingMode(QMultimedia::ConstantQualityEncoding);
     m_settings.setCodec("audio/pcm");
     m_settings.setBitRate(8000);
     m_settings.setChannelCount(1);
     m_settings.setSampleRate(8000);
-    m_settings.setQuality(QtMultimedia::LowQuality);
+    m_settings.setQuality(QMultimedia::LowQuality);
 }
 
 AudioEncoderControl::~AudioEncoderControl()
@@ -106,14 +106,14 @@ void AudioEncoderControl::setAudioSettings(const QAudioEncoderSettings &settings
 {
     QAudioFormat fmt = m_session->format();
 
-    if (settings.encodingMode() == QtMultimedia::ConstantQualityEncoding) {
-        if (settings.quality() == QtMultimedia::LowQuality) {
+    if (settings.encodingMode() == QMultimedia::ConstantQualityEncoding) {
+        if (settings.quality() == QMultimedia::LowQuality) {
             fmt.setSampleSize(8);
             fmt.setChannelCount(1);
             fmt.setSampleRate(8000);
             fmt.setSampleType(QAudioFormat::UnSignedInt);
 
-        } else if (settings.quality() == QtMultimedia::NormalQuality) {
+        } else if (settings.quality() == QMultimedia::NormalQuality) {
             fmt.setSampleSize(16);
             fmt.setChannelCount(1);
             fmt.setSampleRate(22050);
diff --git a/src/plugins/avfoundation/mediaplayer/avfmediaplayerserviceplugin.h b/src/plugins/avfoundation/mediaplayer/avfmediaplayerserviceplugin.h
index 4646906..69b28c8 100644
--- a/src/plugins/avfoundation/mediaplayer/avfmediaplayerserviceplugin.h
+++ b/src/plugins/avfoundation/mediaplayer/avfmediaplayerserviceplugin.h
@@ -65,7 +65,7 @@ public:
     void release(QMediaService *service);
 
     QMediaServiceProviderHint::Features supportedFeatures(const QByteArray &service) const;
-    QtMultimedia::SupportEstimate hasSupport(const QString &mimeType, const QStringList& codecs) const;
+    QMultimedia::SupportEstimate hasSupport(const QString &mimeType, const QStringList& codecs) const;
     QStringList supportedMimeTypes() const;
 
 private:
diff --git a/src/plugins/avfoundation/mediaplayer/avfmediaplayerserviceplugin.mm b/src/plugins/avfoundation/mediaplayer/avfmediaplayerserviceplugin.mm
index cb75197..2d577fb 100644
--- a/src/plugins/avfoundation/mediaplayer/avfmediaplayerserviceplugin.mm
+++ b/src/plugins/avfoundation/mediaplayer/avfmediaplayerserviceplugin.mm
@@ -78,14 +78,14 @@ QMediaServiceProviderHint::Features AVFMediaPlayerServicePlugin::supportedFeatur
         return QMediaServiceProviderHint::Features();
 }
 
-QtMultimedia::SupportEstimate AVFMediaPlayerServicePlugin::hasSupport(const QString &mimeType, const QStringList &codecs) const
+QMultimedia::SupportEstimate AVFMediaPlayerServicePlugin::hasSupport(const QString &mimeType, const QStringList &codecs) const
 {
     Q_UNUSED(codecs);
 
     if (m_supportedMimeTypes.contains(mimeType))
-        return QtMultimedia::ProbablySupported;
+        return QMultimedia::ProbablySupported;
 
-    return QtMultimedia::MaybeSupported;
+    return QMultimedia::MaybeSupported;
 }
 
 QStringList AVFMediaPlayerServicePlugin::supportedMimeTypes() const
diff --git a/src/plugins/gstreamer/audiodecoder/qgstreameraudiodecoderserviceplugin.cpp b/src/plugins/gstreamer/audiodecoder/qgstreameraudiodecoderserviceplugin.cpp
index 07a1c31..9837bf7 100644
--- a/src/plugins/gstreamer/audiodecoder/qgstreameraudiodecoderserviceplugin.cpp
+++ b/src/plugins/gstreamer/audiodecoder/qgstreameraudiodecoderserviceplugin.cpp
@@ -80,7 +80,7 @@ void QGstreamerAudioDecoderServicePlugin::release(QMediaService *service)
     delete service;
 }
 
-QtMultimedia::SupportEstimate QGstreamerAudioDecoderServicePlugin::hasSupport(const QString &mimeType,
+QMultimedia::SupportEstimate QGstreamerAudioDecoderServicePlugin::hasSupport(const QString &mimeType,
                                                                      const QStringList &codecs) const
 {
     if (m_supportedMimeTypeSet.isEmpty())
diff --git a/src/plugins/gstreamer/audiodecoder/qgstreameraudiodecoderserviceplugin.h b/src/plugins/gstreamer/audiodecoder/qgstreameraudiodecoderserviceplugin.h
index cfaec91..98a56b5 100644
--- a/src/plugins/gstreamer/audiodecoder/qgstreameraudiodecoderserviceplugin.h
+++ b/src/plugins/gstreamer/audiodecoder/qgstreameraudiodecoderserviceplugin.h
@@ -60,7 +60,7 @@ public:
     QMediaService* create(QString const& key);
     void release(QMediaService *service);
 
-    QtMultimedia::SupportEstimate hasSupport(const QString &mimeType, const QStringList& codecs) const;
+    QMultimedia::SupportEstimate hasSupport(const QString &mimeType, const QStringList& codecs) const;
     QStringList supportedMimeTypes() const;
 
 private:
diff --git a/src/plugins/gstreamer/mediacapture/qgstreameraudioencode.cpp b/src/plugins/gstreamer/mediacapture/qgstreameraudioencode.cpp
index 87f046f..b1189e7 100644
--- a/src/plugins/gstreamer/mediacapture/qgstreameraudioencode.cpp
+++ b/src/plugins/gstreamer/mediacapture/qgstreameraudioencode.cpp
@@ -199,8 +199,8 @@ GstElement *QGstreamerAudioEncode::createEncoder()
     }
 
     if (encoderElement) {
-        if (m_audioSettings.encodingMode() == QtMultimedia::ConstantQualityEncoding) {
-            QtMultimedia::EncodingQuality qualityValue = m_audioSettings.quality();
+        if (m_audioSettings.encodingMode() == QMultimedia::ConstantQualityEncoding) {
+            QMultimedia::EncodingQuality qualityValue = m_audioSettings.quality();
 
             if (codec == QLatin1String("audio/vorbis")) {
                 double qualityTable[] = {
diff --git a/src/plugins/gstreamer/mediacapture/qgstreamercaptureserviceplugin.cpp b/src/plugins/gstreamer/mediacapture/qgstreamercaptureserviceplugin.cpp
index 55c4129..ea0304d 100644
--- a/src/plugins/gstreamer/mediacapture/qgstreamercaptureserviceplugin.cpp
+++ b/src/plugins/gstreamer/mediacapture/qgstreamercaptureserviceplugin.cpp
@@ -177,7 +177,7 @@ void QGstreamerCaptureServicePlugin::updateDevices() const
 }
 #endif
 
-QtMultimedia::SupportEstimate QGstreamerCaptureServicePlugin::hasSupport(const QString &mimeType,
+QMultimedia::SupportEstimate QGstreamerCaptureServicePlugin::hasSupport(const QString &mimeType,
                                                                      const QStringList& codecs) const
 {
     if (m_supportedMimeTypeSet.isEmpty())
diff --git a/src/plugins/gstreamer/mediacapture/qgstreamercaptureserviceplugin.h b/src/plugins/gstreamer/mediacapture/qgstreamercaptureserviceplugin.h
index 216cd06..0e1aaca 100644
--- a/src/plugins/gstreamer/mediacapture/qgstreamercaptureserviceplugin.h
+++ b/src/plugins/gstreamer/mediacapture/qgstreamercaptureserviceplugin.h
@@ -80,7 +80,7 @@ public:
     QVariant deviceProperty(const QByteArray &service, const QByteArray &device, const QByteArray &property);
 #endif
 
-    QtMultimedia::SupportEstimate hasSupport(const QString &mimeType, const QStringList& codecs) const;
+    QMultimedia::SupportEstimate hasSupport(const QString &mimeType, const QStringList& codecs) const;
     QStringList supportedMimeTypes() const;
 
 private:
diff --git a/src/plugins/gstreamer/mediacapture/qgstreamervideoencode.cpp b/src/plugins/gstreamer/mediacapture/qgstreamervideoencode.cpp
index 80351a5..100848d 100644
--- a/src/plugins/gstreamer/mediacapture/qgstreamervideoencode.cpp
+++ b/src/plugins/gstreamer/mediacapture/qgstreamervideoencode.cpp
@@ -171,8 +171,8 @@ GstElement *QGstreamerVideoEncode::createEncoder()
     gst_object_unref(GST_OBJECT(pad));
 
     if (encoderElement) {
-        if (m_videoSettings.encodingMode() == QtMultimedia::ConstantQualityEncoding) {
-            QtMultimedia::EncodingQuality qualityValue = m_videoSettings.quality();
+        if (m_videoSettings.encodingMode() == QMultimedia::ConstantQualityEncoding) {
+            QMultimedia::EncodingQuality qualityValue = m_videoSettings.quality();
 
             if (codec == QLatin1String("video/h264")) {
                 //constant quantizer mode
diff --git a/src/plugins/gstreamer/mediaplayer/qgstreameravailabilitycontrol.cpp b/src/plugins/gstreamer/mediaplayer/qgstreameravailabilitycontrol.cpp
index 2e937f2..d9019e5 100644
--- a/src/plugins/gstreamer/mediaplayer/qgstreameravailabilitycontrol.cpp
+++ b/src/plugins/gstreamer/mediaplayer/qgstreameravailabilitycontrol.cpp
@@ -58,9 +58,9 @@ void QGStreamerAvailabilityControl::handleAvailabilityChanged()
     emit availabilityChanged(this->availability());
 }
 
-QtMultimedia::AvailabilityStatus QGStreamerAvailabilityControl::availability() const
+QMultimedia::AvailabilityStatus QGStreamerAvailabilityControl::availability() const
 {
-    return m_resources->isAvailable() ? QtMultimedia::Available : QtMultimedia::Busy;
+    return m_resources->isAvailable() ? QMultimedia::Available : QMultimedia::Busy;
 }
 
 QT_END_NAMESPACE
diff --git a/src/plugins/gstreamer/mediaplayer/qgstreameravailabilitycontrol.h b/src/plugins/gstreamer/mediaplayer/qgstreameravailabilitycontrol.h
index 4da940f..380fc79 100644
--- a/src/plugins/gstreamer/mediaplayer/qgstreameravailabilitycontrol.h
+++ b/src/plugins/gstreamer/mediaplayer/qgstreameravailabilitycontrol.h
@@ -53,7 +53,7 @@ class QGStreamerAvailabilityControl : public QMediaAvailabilityControl
     Q_OBJECT
 public:
     QGStreamerAvailabilityControl(QMediaPlayerResourceSetInterface *resources, QObject *parent = 0);
-    QtMultimedia::AvailabilityStatus availability() const;
+    QMultimedia::AvailabilityStatus availability() const;
 
 private Q_SLOTS:
     void handleAvailabilityChanged();
diff --git a/src/plugins/gstreamer/mediaplayer/qgstreamerplayerserviceplugin.cpp b/src/plugins/gstreamer/mediaplayer/qgstreamerplayerserviceplugin.cpp
index 13ed71b..72c4a4c 100644
--- a/src/plugins/gstreamer/mediaplayer/qgstreamerplayerserviceplugin.cpp
+++ b/src/plugins/gstreamer/mediaplayer/qgstreamerplayerserviceplugin.cpp
@@ -94,7 +94,7 @@ QMediaServiceProviderHint::Features QGstreamerPlayerServicePlugin::supportedFeat
         return QMediaServiceProviderHint::Features();
 }
 
-QtMultimedia::SupportEstimate QGstreamerPlayerServicePlugin::hasSupport(const QString &mimeType,
+QMultimedia::SupportEstimate QGstreamerPlayerServicePlugin::hasSupport(const QString &mimeType,
                                                                      const QStringList &codecs) const
 {
     if (m_supportedMimeTypeSet.isEmpty())
diff --git a/src/plugins/gstreamer/mediaplayer/qgstreamerplayerserviceplugin.h b/src/plugins/gstreamer/mediaplayer/qgstreamerplayerserviceplugin.h
index 9e47c6a..796c98c 100644
--- a/src/plugins/gstreamer/mediaplayer/qgstreamerplayerserviceplugin.h
+++ b/src/plugins/gstreamer/mediaplayer/qgstreamerplayerserviceplugin.h
@@ -65,7 +65,7 @@ public:
 
     QMediaServiceProviderHint::Features supportedFeatures(const QByteArray &service) const;
 
-    QtMultimedia::SupportEstimate hasSupport(const QString &mimeType, const QStringList& codecs) const;
+    QMultimedia::SupportEstimate hasSupport(const QString &mimeType, const QStringList& codecs) const;
     QStringList supportedMimeTypes() const;
 
 private:
diff --git a/src/plugins/qt7/qt7serviceplugin.h b/src/plugins/qt7/qt7serviceplugin.h
index 889b717..4e5258b 100644
--- a/src/plugins/qt7/qt7serviceplugin.h
+++ b/src/plugins/qt7/qt7serviceplugin.h
@@ -63,7 +63,7 @@ public:
     void release(QMediaService *service);
 
     QMediaServiceProviderHint::Features supportedFeatures(const QByteArray &service) const;
-    QtMultimedia::SupportEstimate hasSupport(const QString &mimeType, const QStringList& codecs) const;
+    QMultimedia::SupportEstimate hasSupport(const QString &mimeType, const QStringList& codecs) const;
     QStringList supportedMimeTypes() const;
 
 private:
diff --git a/src/plugins/qt7/qt7serviceplugin.mm b/src/plugins/qt7/qt7serviceplugin.mm
index b5acd42..9c10cc3 100644
--- a/src/plugins/qt7/qt7serviceplugin.mm
+++ b/src/plugins/qt7/qt7serviceplugin.mm
@@ -87,14 +87,14 @@ QMediaServiceProviderHint::Features QT7ServicePlugin::supportedFeatures(
         return QMediaServiceProviderHint::Features();
 }
 
-QtMultimedia::SupportEstimate QT7ServicePlugin::hasSupport(const QString &mimeType, const QStringList& codecs) const
+QMultimedia::SupportEstimate QT7ServicePlugin::hasSupport(const QString &mimeType, const QStringList& codecs) const
 {
     Q_UNUSED(codecs);
 
     if (m_supportedMimeTypes.contains(mimeType))
-        return QtMultimedia::ProbablySupported;
+        return QMultimedia::ProbablySupported;
 
-    return QtMultimedia::MaybeSupported;
+    return QMultimedia::MaybeSupported;
 }
 
 QStringList QT7ServicePlugin::supportedMimeTypes() const
diff --git a/src/plugins/v4l/radio/v4lradiocontrol.cpp b/src/plugins/v4l/radio/v4lradiocontrol.cpp
index b55938c..4dc85bb 100644
--- a/src/plugins/v4l/radio/v4lradiocontrol.cpp
+++ b/src/plugins/v4l/radio/v4lradiocontrol.cpp
@@ -88,12 +88,12 @@ bool V4LRadioControl::isAvailable() const
     return available;
 }
 
-QtMultimedia::AvailabilityStatus V4LRadioControl::availability() const
+QMultimedia::AvailabilityStatus V4LRadioControl::availability() const
 {
     if (fd > 0)
-        return QtMultimedia::Available;
+        return QMultimedia::Available;
     else
-        return QtMultimedia::ResourceError;
+        return QMultimedia::ResourceError;
 }
 
 QRadioTuner::State V4LRadioControl::state() const
diff --git a/src/plugins/v4l/radio/v4lradiocontrol.h b/src/plugins/v4l/radio/v4lradiocontrol.h
index b020a65..f8d79fc 100644
--- a/src/plugins/v4l/radio/v4lradiocontrol.h
+++ b/src/plugins/v4l/radio/v4lradiocontrol.h
@@ -65,7 +65,7 @@ public:
     ~V4LRadioControl();
 
     bool isAvailable() const;
-    QtMultimedia::AvailabilityStatus availability() const;
+    QMultimedia::AvailabilityStatus availability() const;
 
     QRadioTuner::State state() const;
 
diff --git a/tests/auto/unit/qaudiodecoder/tst_qaudiodecoder.cpp b/tests/auto/unit/qaudiodecoder/tst_qaudiodecoder.cpp
index 96f9ddb..30b7329 100644
--- a/tests/auto/unit/qaudiodecoder/tst_qaudiodecoder.cpp
+++ b/tests/auto/unit/qaudiodecoder/tst_qaudiodecoder.cpp
@@ -348,7 +348,7 @@ void tst_QAudioDecoder::nullControl()
     QVERIFY(d.error() == QAudioDecoder::ServiceMissingError);
     QVERIFY(!d.errorString().isEmpty());
 
-    QVERIFY(d.hasSupport("MIME") == QtMultimedia::MaybeSupported);
+    QVERIFY(d.hasSupport("MIME") == QMultimedia::MaybeSupported);
 
     QVERIFY(d.state() == QAudioDecoder::StoppedState);
 
@@ -389,7 +389,7 @@ void tst_QAudioDecoder::nullService()
     QVERIFY(d.error() == QAudioDecoder::ServiceMissingError);
     QVERIFY(!d.errorString().isEmpty());
 
-    QVERIFY(d.hasSupport("MIME") == QtMultimedia::MaybeSupported);
+    QVERIFY(d.hasSupport("MIME") == QMultimedia::MaybeSupported);
 
     QVERIFY(d.state() == QAudioDecoder::StoppedState);
 
diff --git a/tests/auto/unit/qaudioprobe/tst_qaudioprobe.cpp b/tests/auto/unit/qaudioprobe/tst_qaudioprobe.cpp
index 596018c..28fd609 100644
--- a/tests/auto/unit/qaudioprobe/tst_qaudioprobe.cpp
+++ b/tests/auto/unit/qaudioprobe/tst_qaudioprobe.cpp
@@ -104,7 +104,7 @@ void tst_QAudioProbe::testNullService()
     recorder = new QAudioRecorder;
 
     QVERIFY(!recorder->isAvailable());
-    QCOMPARE(recorder->availability(), QtMultimedia::ServiceMissing);
+    QCOMPARE(recorder->availability(), QMultimedia::ServiceMissing);
 
     QAudioProbe probe;
     QVERIFY(!probe.isActive());
@@ -122,7 +122,7 @@ void tst_QAudioProbe::testNullControl()
     recorder = new QAudioRecorder;
 
     QVERIFY(!recorder->isAvailable());
-    QCOMPARE(recorder->availability(), QtMultimedia::ServiceMissing);
+    QCOMPARE(recorder->availability(), QMultimedia::ServiceMissing);
 
     QAudioProbe probe;
     QVERIFY(!probe.isActive());
diff --git a/tests/auto/unit/qaudiorecorder/tst_qaudiorecorder.cpp b/tests/auto/unit/qaudiorecorder/tst_qaudiorecorder.cpp
index f2df234..339fe9a 100644
--- a/tests/auto/unit/qaudiorecorder/tst_qaudiorecorder.cpp
+++ b/tests/auto/unit/qaudiorecorder/tst_qaudiorecorder.cpp
@@ -106,7 +106,7 @@ void tst_QAudioRecorder::testNullService()
     QAudioRecorder source;
 
     QVERIFY(!source.isAvailable());
-    QCOMPARE(source.availability(), QtMultimedia::ServiceMissing);
+    QCOMPARE(source.availability(), QMultimedia::ServiceMissing);
 
     QCOMPARE(source.audioInputs().size(), 0);
     QCOMPARE(source.defaultAudioInput(), QString());
@@ -120,7 +120,7 @@ void tst_QAudioRecorder::testNullControl()
     QAudioRecorder source;
 
     QVERIFY(!source.isAvailable());
-    QCOMPARE(source.availability(), QtMultimedia::ServiceMissing);
+    QCOMPARE(source.availability(), QMultimedia::ServiceMissing);
 
     QCOMPARE(source.audioInputs().size(), 0);
     QCOMPARE(source.defaultAudioInput(), QString());
@@ -163,7 +163,7 @@ void tst_QAudioRecorder::testAvailability()
     QAudioRecorder source;
 
     QVERIFY(source.isAvailable());
-    QCOMPARE(source.availability(), QtMultimedia::Available);
+    QCOMPARE(source.availability(), QMultimedia::Available);
 }
 
 void tst_QAudioRecorder::testAvailableAudioInputChangedSignal()
diff --git a/tests/auto/unit/qcamera/tst_qcamera.cpp b/tests/auto/unit/qcamera/tst_qcamera.cpp
index a39945c..8f6339b 100644
--- a/tests/auto/unit/qcamera/tst_qcamera.cpp
+++ b/tests/auto/unit/qcamera/tst_qcamera.cpp
@@ -778,9 +778,9 @@ void tst_QCamera::testImageSettings()
     QVERIFY(settings != QImageEncoderSettings());
 
     settings = QImageEncoderSettings();
-    QCOMPARE(settings.quality(), QtMultimedia::NormalQuality);
-    settings.setQuality(QtMultimedia::HighQuality);
-    QCOMPARE(settings.quality(), QtMultimedia::HighQuality);
+    QCOMPARE(settings.quality(), QMultimedia::NormalQuality);
+    settings.setQuality(QMultimedia::HighQuality);
+    QCOMPARE(settings.quality(), QMultimedia::HighQuality);
     QVERIFY(!settings.isNull());
 
     settings = QImageEncoderSettings();
@@ -808,7 +808,7 @@ void tst_QCamera::testImageSettings()
     settings = QImageEncoderSettings();
     QVERIFY(settings.isNull());
     QCOMPARE(settings.codec(), QString());
-    QCOMPARE(settings.quality(), QtMultimedia::NormalQuality);
+    QCOMPARE(settings.quality(), QMultimedia::NormalQuality);
     QCOMPARE(settings.resolution(), QSize());
     QVERIFY(settings.encodingOptions().isEmpty());
 
@@ -821,7 +821,7 @@ void tst_QCamera::testImageSettings()
         QCOMPARE(settings2, settings1);
         QVERIFY(settings2.isNull());
 
-        settings1.setQuality(QtMultimedia::HighQuality);
+        settings1.setQuality(QMultimedia::HighQuality);
 
         QVERIFY(settings2.isNull());
         QVERIFY(!settings1.isNull());
@@ -837,7 +837,7 @@ void tst_QCamera::testImageSettings()
         QCOMPARE(settings2, settings1);
         QVERIFY(settings2.isNull());
 
-        settings1.setQuality(QtMultimedia::HighQuality);
+        settings1.setQuality(QMultimedia::HighQuality);
 
         QVERIFY(settings2.isNull());
         QVERIFY(!settings1.isNull());
@@ -864,11 +864,11 @@ void tst_QCamera::testImageSettings()
     QVERIFY(settings1 != settings2);
 
     settings1 = QImageEncoderSettings();
-    settings1.setQuality(QtMultimedia::NormalQuality);
+    settings1.setQuality(QMultimedia::NormalQuality);
     settings2 = QImageEncoderSettings();
-    settings2.setQuality(QtMultimedia::NormalQuality);
+    settings2.setQuality(QMultimedia::NormalQuality);
     QVERIFY(settings1 == settings2);
-    settings2.setQuality(QtMultimedia::LowQuality);
+    settings2.setQuality(QMultimedia::LowQuality);
     QVERIFY(settings1 != settings2);
 
     settings1 = QImageEncoderSettings();
@@ -1233,7 +1233,7 @@ void tst_QCamera::testQCameraIsAvailable()
 {
     QCamera camera;
     QVERIFY(camera.isAvailable());
-    QVERIFY(camera.availability() == QtMultimedia::Available);
+    QVERIFY(camera.availability() == QMultimedia::Available);
 }
 
 void tst_QCamera::testQCameraIsNotAvailable()
@@ -1243,7 +1243,7 @@ void tst_QCamera::testQCameraIsNotAvailable()
 
     QCOMPARE(camera.error(), QCamera::ServiceMissingError);
     QVERIFY(!camera.isAvailable());
-    QCOMPARE(camera.availability(), QtMultimedia::ServiceMissing);
+    QCOMPARE(camera.availability(), QMultimedia::ServiceMissing);
 }
 
 /* Test case for searchAndLock ( QCamera::LockTypes locks ) */
diff --git a/tests/auto/unit/qcameraimagecapture/tst_qcameraimagecapture.cpp b/tests/auto/unit/qcameraimagecapture/tst_qcameraimagecapture.cpp
index 2f195b7..438802a 100644
--- a/tests/auto/unit/qcameraimagecapture/tst_qcameraimagecapture.cpp
+++ b/tests/auto/unit/qcameraimagecapture/tst_qcameraimagecapture.cpp
@@ -260,11 +260,11 @@ void tst_QCameraImageCapture::encodingSettings()
     QVERIFY(imageCapture.encodingSettings() == QImageEncoderSettings());
     QImageEncoderSettings settings;
     settings.setCodec("JPEG");
-    settings.setQuality(QtMultimedia::NormalQuality);
+    settings.setQuality(QMultimedia::NormalQuality);
     imageCapture.setEncodingSettings(settings);
     QVERIFY(!imageCapture.encodingSettings().isNull());
     QVERIFY(imageCapture.encodingSettings().codec() == "JPEG");
-    QVERIFY(imageCapture.encodingSettings().quality() == QtMultimedia::NormalQuality);
+    QVERIFY(imageCapture.encodingSettings().quality() == QMultimedia::NormalQuality);
 }
 
 //MaemoAPI-1838:test supportedImageCodecs
@@ -312,7 +312,7 @@ void tst_QCameraImageCapture::errors()
     imageCapture1.capture(QString::fromLatin1("/dev/null"));
     QVERIFY(imageCapture1.error() == QCameraImageCapture::NotSupportedFeatureError);
     QVERIFY2(!imageCapture1.errorString().isEmpty(), "Device does not support images capture");
-    QVERIFY(imageCapture1.availability() == QtMultimedia::ServiceMissing);
+    QVERIFY(imageCapture1.availability() == QMultimedia::ServiceMissing);
 
     provider->service = mockcameraservice;
 
@@ -321,12 +321,12 @@ void tst_QCameraImageCapture::errors()
     QVERIFY(imageCapture.isAvailable() == true);
     QVERIFY(imageCapture.error() == QCameraImageCapture::NoError);
     QVERIFY(imageCapture.errorString().isEmpty());
-    QVERIFY(imageCapture.availability() == QtMultimedia::Available);
+    QVERIFY(imageCapture.availability() == QMultimedia::Available);
 
     imageCapture.capture();
     QVERIFY(imageCapture.error() == QCameraImageCapture::NotReadyError);
     QVERIFY2(!imageCapture.errorString().isEmpty(), "Could not capture in stopped state");
-    QVERIFY(imageCapture.availability() == QtMultimedia::Available);
+    QVERIFY(imageCapture.availability() == QMultimedia::Available);
 }
 
 //MaemoAPI-1831:test error
diff --git a/tests/auto/unit/qmediaobject/tst_qmediaobject.cpp b/tests/auto/unit/qmediaobject/tst_qmediaobject.cpp
index 1b83e1a..71524fe 100644
--- a/tests/auto/unit/qmediaobject/tst_qmediaobject.cpp
+++ b/tests/auto/unit/qmediaobject/tst_qmediaobject.cpp
@@ -441,52 +441,52 @@ void tst_QMediaObject::availability()
     {
         QtTestMediaObject nullObject(0);
         QCOMPARE(nullObject.isAvailable(), false);
-        QCOMPARE(nullObject.availability(), QtMultimedia::ServiceMissing);
+        QCOMPARE(nullObject.availability(), QMultimedia::ServiceMissing);
     }
 
     {
         QtTestMediaObjectService service;
         QtTestMediaObject object(&service);
         QCOMPARE(object.isAvailable(), true);
-        QCOMPARE(object.availability(), QtMultimedia::Available);
+        QCOMPARE(object.availability(), QMultimedia::Available);
     }
 
     {
-        MockAvailabilityControl available(QtMultimedia::Available);
+        MockAvailabilityControl available(QMultimedia::Available);
         QtTestMediaObjectService service(0, &available);
         QtTestMediaObject object(&service);
         QSignalSpy availabilitySpy(&object, SIGNAL(availabilityChanged(bool)));
-        QSignalSpy availabilityStatusSpy(&object, SIGNAL(availabilityChanged(QtMultimedia::AvailabilityStatus)));
+        QSignalSpy availabilityStatusSpy(&object, SIGNAL(availabilityChanged(QMultimedia::AvailabilityStatus)));
 
         QCOMPARE(object.isAvailable(), true);
-        QCOMPARE(object.availability(), QtMultimedia::Available);
+        QCOMPARE(object.availability(), QMultimedia::Available);
 
-        available.setAvailability(QtMultimedia::Busy);
+        available.setAvailability(QMultimedia::Busy);
         QCOMPARE(object.isAvailable(), false);
-        QCOMPARE(object.availability(), QtMultimedia::Busy);
+        QCOMPARE(object.availability(), QMultimedia::Busy);
         QCOMPARE(availabilitySpy.count(), 1);
         QCOMPARE(availabilityStatusSpy.count(), 1);
 
-        available.setAvailability(QtMultimedia::Available);
+        available.setAvailability(QMultimedia::Available);
         QCOMPARE(object.isAvailable(), true);
-        QCOMPARE(object.availability(), QtMultimedia::Available);
+        QCOMPARE(object.availability(), QMultimedia::Available);
         QCOMPARE(availabilitySpy.count(), 2);
         QCOMPARE(availabilityStatusSpy.count(), 2);
     }
 
     {
-        MockAvailabilityControl available(QtMultimedia::Busy);
+        MockAvailabilityControl available(QMultimedia::Busy);
         QtTestMediaObjectService service(0, &available);
         QtTestMediaObject object(&service);
         QSignalSpy availabilitySpy(&object, SIGNAL(availabilityChanged(bool)));
-        QSignalSpy availabilityStatusSpy(&object, SIGNAL(availabilityChanged(QtMultimedia::AvailabilityStatus)));
+        QSignalSpy availabilityStatusSpy(&object, SIGNAL(availabilityChanged(QMultimedia::AvailabilityStatus)));
 
         QCOMPARE(object.isAvailable(), false);
-        QCOMPARE(object.availability(), QtMultimedia::Busy);
+        QCOMPARE(object.availability(), QMultimedia::Busy);
 
-        available.setAvailability(QtMultimedia::Available);
+        available.setAvailability(QMultimedia::Available);
         QCOMPARE(object.isAvailable(), true);
-        QCOMPARE(object.availability(), QtMultimedia::Available);
+        QCOMPARE(object.availability(), QMultimedia::Available);
         QCOMPARE(availabilitySpy.count(), 1);
         QCOMPARE(availabilityStatusSpy.count(), 1);
     }
diff --git a/tests/auto/unit/qmediaplayer/tst_qmediaplayer.cpp b/tests/auto/unit/qmediaplayer/tst_qmediaplayer.cpp
index 2745bd9..5af1e5e 100644
--- a/tests/auto/unit/qmediaplayer/tst_qmediaplayer.cpp
+++ b/tests/auto/unit/qmediaplayer/tst_qmediaplayer.cpp
@@ -222,7 +222,7 @@ void tst_QMediaPlayer::testNullService()
     QCOMPARE(player.playbackRate(), qreal(0));
     QCOMPARE(player.error(), QMediaPlayer::ServiceMissingError);
     QCOMPARE(player.isAvailable(), false);
-    QCOMPARE(player.availability(), QtMultimedia::ServiceMissing);
+    QCOMPARE(player.availability(), QMultimedia::ServiceMissing);
 
     {
         QFETCH_GLOBAL(QMediaContent, mediaContent);
@@ -501,7 +501,7 @@ void tst_QMediaPlayer::testErrorString()
 void tst_QMediaPlayer::testIsAvailable()
 {
     QCOMPARE(player->isAvailable(), true);
-    QCOMPARE(player->availability(), QtMultimedia::Available);
+    QCOMPARE(player->availability(), QMultimedia::Available);
 }
 
 void tst_QMediaPlayer::testService()
diff --git a/tests/auto/unit/qmediarecorder/tst_qmediarecorder.cpp b/tests/auto/unit/qmediarecorder/tst_qmediarecorder.cpp
index c544e99..1251f9f 100644
--- a/tests/auto/unit/qmediarecorder/tst_qmediarecorder.cpp
+++ b/tests/auto/unit/qmediarecorder/tst_qmediarecorder.cpp
@@ -215,7 +215,7 @@ void tst_QMediaRecorder::testNullControls()
 
     QAudioEncoderSettings audio;
     audio.setCodec(id);
-    audio.setQuality(QtMultimedia::LowQuality);
+    audio.setQuality(QMultimedia::LowQuality);
 
     QVideoEncoderSettings video;
     video.setCodec(id);
@@ -447,18 +447,18 @@ void tst_QMediaRecorder::testEncodingSettings()
     QCOMPARE(audioSettings.codec(), QString("audio/pcm"));
     QCOMPARE(audioSettings.bitRate(), 128*1024);
     QCOMPARE(audioSettings.sampleRate(), 8000);
-    QCOMPARE(audioSettings.quality(), QtMultimedia::NormalQuality);
+    QCOMPARE(audioSettings.quality(), QMultimedia::NormalQuality);
     QCOMPARE(audioSettings.channelCount(), -1);
 
-    QCOMPARE(audioSettings.encodingMode(), QtMultimedia::ConstantQualityEncoding);
+    QCOMPARE(audioSettings.encodingMode(), QMultimedia::ConstantQualityEncoding);
 
     QVideoEncoderSettings videoSettings = capture->videoSettings();
     QCOMPARE(videoSettings.codec(), QString());
     QCOMPARE(videoSettings.bitRate(), -1);
     QCOMPARE(videoSettings.resolution(), QSize());
     QCOMPARE(videoSettings.frameRate(), 0.0);
-    QCOMPARE(videoSettings.quality(), QtMultimedia::NormalQuality);
-    QCOMPARE(videoSettings.encodingMode(), QtMultimedia::ConstantQualityEncoding);
+    QCOMPARE(videoSettings.quality(), QMultimedia::NormalQuality);
+    QCOMPARE(videoSettings.encodingMode(), QMultimedia::ConstantQualityEncoding);
 
     QString format = capture->containerFormat();
     QCOMPARE(format, QString());
@@ -466,15 +466,15 @@ void tst_QMediaRecorder::testEncodingSettings()
     audioSettings.setCodec("audio/mpeg");
     audioSettings.setSampleRate(44100);
     audioSettings.setBitRate(256*1024);
-    audioSettings.setQuality(QtMultimedia::HighQuality);
-    audioSettings.setEncodingMode(QtMultimedia::AverageBitRateEncoding);
+    audioSettings.setQuality(QMultimedia::HighQuality);
+    audioSettings.setEncodingMode(QMultimedia::AverageBitRateEncoding);
 
     videoSettings.setCodec("video/3gpp");
     videoSettings.setBitRate(800);
     videoSettings.setFrameRate(24*1024);
     videoSettings.setResolution(QSize(800,600));
-    videoSettings.setQuality(QtMultimedia::HighQuality);
-    audioSettings.setEncodingMode(QtMultimedia::TwoPassEncoding);
+    videoSettings.setQuality(QMultimedia::HighQuality);
+    audioSettings.setEncodingMode(QMultimedia::TwoPassEncoding);
 
     format = QString("mov");
 
@@ -506,9 +506,9 @@ void tst_QMediaRecorder::testAudioSettings()
     QVERIFY(!settings.isNull());
 
     settings = QAudioEncoderSettings();
-    QCOMPARE(settings.quality(), QtMultimedia::NormalQuality);
-    settings.setQuality(QtMultimedia::HighQuality);
-    QCOMPARE(settings.quality(), QtMultimedia::HighQuality);
+    QCOMPARE(settings.quality(), QMultimedia::NormalQuality);
+    settings.setQuality(QMultimedia::HighQuality);
+    QCOMPARE(settings.quality(), QMultimedia::HighQuality);
     QVERIFY(!settings.isNull());
 
     settings = QAudioEncoderSettings();
@@ -541,7 +541,7 @@ void tst_QMediaRecorder::testAudioSettings()
     QVERIFY(settings.isNull());
     QCOMPARE(settings.codec(), QString());
     QCOMPARE(settings.bitRate(), -1);
-    QCOMPARE(settings.quality(), QtMultimedia::NormalQuality);
+    QCOMPARE(settings.quality(), QMultimedia::NormalQuality);
     QCOMPARE(settings.sampleRate(), -1);
     QVERIFY(settings.encodingOptions().isEmpty());
 
@@ -554,7 +554,7 @@ void tst_QMediaRecorder::testAudioSettings()
         QCOMPARE(settings2, settings1);
         QVERIFY(settings2.isNull());
 
-        settings1.setQuality(QtMultimedia::HighQuality);
+        settings1.setQuality(QMultimedia::HighQuality);
 
         QVERIFY(settings2.isNull());
         QVERIFY(!settings1.isNull());
@@ -570,7 +570,7 @@ void tst_QMediaRecorder::testAudioSettings()
         QCOMPARE(settings2, settings1);
         QVERIFY(settings2.isNull());
 
-        settings1.setQuality(QtMultimedia::HighQuality);
+        settings1.setQuality(QMultimedia::HighQuality);
 
         QVERIFY(settings2.isNull());
         QVERIFY(!settings1.isNull());
@@ -602,19 +602,19 @@ void tst_QMediaRecorder::testAudioSettings()
     QVERIFY(settings1 != settings2);
 
     settings1 = QAudioEncoderSettings();
-    settings1.setEncodingMode(QtMultimedia::ConstantBitRateEncoding);
+    settings1.setEncodingMode(QMultimedia::ConstantBitRateEncoding);
     settings2 = QAudioEncoderSettings();
-    settings2.setEncodingMode(QtMultimedia::ConstantBitRateEncoding);
+    settings2.setEncodingMode(QMultimedia::ConstantBitRateEncoding);
     QVERIFY(settings1 == settings2);
-    settings2.setEncodingMode(QtMultimedia::TwoPassEncoding);
+    settings2.setEncodingMode(QMultimedia::TwoPassEncoding);
     QVERIFY(settings1 != settings2);
 
     settings1 = QAudioEncoderSettings();
-    settings1.setQuality(QtMultimedia::NormalQuality);
+    settings1.setQuality(QMultimedia::NormalQuality);
     settings2 = QAudioEncoderSettings();
-    settings2.setQuality(QtMultimedia::NormalQuality);
+    settings2.setQuality(QMultimedia::NormalQuality);
     QVERIFY(settings1 == settings2);
-    settings2.setQuality(QtMultimedia::LowQuality);
+    settings2.setQuality(QMultimedia::LowQuality);
     QVERIFY(settings1 != settings2);
 
     settings1 = QAudioEncoderSettings();
@@ -653,9 +653,9 @@ void tst_QMediaRecorder::testVideoSettings()
     QVERIFY(!settings.isNull());
 
     settings = QVideoEncoderSettings();
-    QCOMPARE(settings.quality(), QtMultimedia::NormalQuality);
-    settings.setQuality(QtMultimedia::HighQuality);
-    QCOMPARE(settings.quality(), QtMultimedia::HighQuality);
+    QCOMPARE(settings.quality(), QMultimedia::NormalQuality);
+    settings.setQuality(QMultimedia::HighQuality);
+    QCOMPARE(settings.quality(), QMultimedia::HighQuality);
     QVERIFY(!settings.isNull());
 
     settings = QVideoEncoderSettings();
@@ -692,7 +692,7 @@ void tst_QMediaRecorder::testVideoSettings()
     QVERIFY(settings.isNull());
     QCOMPARE(settings.codec(), QString());
     QCOMPARE(settings.bitRate(), -1);
-    QCOMPARE(settings.quality(), QtMultimedia::NormalQuality);
+    QCOMPARE(settings.quality(), QMultimedia::NormalQuality);
     QCOMPARE(settings.frameRate(), qreal());
     QCOMPARE(settings.resolution(), QSize());
     QVERIFY(settings.encodingOptions().isEmpty());
@@ -706,7 +706,7 @@ void tst_QMediaRecorder::testVideoSettings()
         QCOMPARE(settings2, settings1);
         QVERIFY(settings2.isNull());
 
-        settings1.setQuality(QtMultimedia::HighQuality);
+        settings1.setQuality(QMultimedia::HighQuality);
 
         QVERIFY(settings2.isNull());
         QVERIFY(!settings1.isNull());
@@ -722,7 +722,7 @@ void tst_QMediaRecorder::testVideoSettings()
         QCOMPARE(settings2, settings1);
         QVERIFY(settings2.isNull());
 
-        settings1.setQuality(QtMultimedia::HighQuality);
+        settings1.setQuality(QMultimedia::HighQuality);
 
         QVERIFY(settings2.isNull());
         QVERIFY(!settings1.isNull());
@@ -754,19 +754,19 @@ void tst_QMediaRecorder::testVideoSettings()
     QVERIFY(settings1 != settings2);
 
     settings1 = QVideoEncoderSettings();
-    settings1.setEncodingMode(QtMultimedia::ConstantBitRateEncoding);
+    settings1.setEncodingMode(QMultimedia::ConstantBitRateEncoding);
     settings2 = QVideoEncoderSettings();
-    settings2.setEncodingMode(QtMultimedia::ConstantBitRateEncoding);
+    settings2.setEncodingMode(QMultimedia::ConstantBitRateEncoding);
     QVERIFY(settings1 == settings2);
-    settings2.setEncodingMode(QtMultimedia::TwoPassEncoding);
+    settings2.setEncodingMode(QMultimedia::TwoPassEncoding);
     QVERIFY(settings1 != settings2);
 
     settings1 = QVideoEncoderSettings();
-    settings1.setQuality(QtMultimedia::NormalQuality);
+    settings1.setQuality(QMultimedia::NormalQuality);
     settings2 = QVideoEncoderSettings();
-    settings2.setQuality(QtMultimedia::NormalQuality);
+    settings2.setQuality(QMultimedia::NormalQuality);
     QVERIFY(settings1 == settings2);
-    settings2.setQuality(QtMultimedia::LowQuality);
+    settings2.setQuality(QMultimedia::LowQuality);
     QVERIFY(settings1 != settings2);
 
     settings1 = QVideoEncoderSettings();
@@ -803,7 +803,7 @@ void tst_QMediaRecorder::testSettingsApplied()
     recorder.setVideoSettings(videoSettings);
 
     QAudioEncoderSettings audioSettings;
-    audioSettings.setQuality(QtMultimedia::HighQuality);
+    audioSettings.setQuality(QMultimedia::HighQuality);
     recorder.setAudioSettings(audioSettings);
 
     recorder.setContainerFormat("mkv");
@@ -812,7 +812,7 @@ void tst_QMediaRecorder::testSettingsApplied()
     QTRY_COMPARE(recorderControl.m_settingAppliedCount, 2);
 
     //encoder settings are applied before recording if changed
-    audioSettings.setQuality(QtMultimedia::VeryHighQuality);
+    audioSettings.setQuality(QMultimedia::VeryHighQuality);
     recorder.setAudioSettings(audioSettings);
 
     QCOMPARE(recorderControl.m_settingAppliedCount, 2);
@@ -1010,8 +1010,8 @@ void tst_QMediaRecorder::testAudioSettingsCopyConstructor()
     audiosettings.setBitRate(128*1000);
     audiosettings.setChannelCount(4);
     audiosettings.setCodec("audio/pcm");
-    audiosettings.setEncodingMode(QtMultimedia::ConstantBitRateEncoding);
-    audiosettings.setQuality(QtMultimedia::LowQuality);
+    audiosettings.setEncodingMode(QMultimedia::ConstantBitRateEncoding);
+    audiosettings.setQuality(QMultimedia::LowQuality);
     audiosettings.setSampleRate(44100);
 
     /* Copy constructor */
@@ -1040,16 +1040,16 @@ void tst_QMediaRecorder::testAudioSettingsOperatorNotEqual()
     audiosettings1.setBitRate(128*1000);
     audiosettings1.setChannelCount(4);
     audiosettings1.setCodec("audio/pcm");
-    audiosettings1.setEncodingMode(QtMultimedia::ConstantBitRateEncoding);
-    audiosettings1.setQuality(QtMultimedia::LowQuality);
+    audiosettings1.setEncodingMode(QMultimedia::ConstantBitRateEncoding);
+    audiosettings1.setQuality(QMultimedia::LowQuality);
     audiosettings1.setSampleRate(44100);
 
     /* setting the desired properties for the AudioEncoder */
     audiosettings2.setBitRate(128*1000);
     audiosettings2.setChannelCount(4);
     audiosettings2.setCodec("audio/pcm");
-    audiosettings2.setEncodingMode(QtMultimedia::ConstantBitRateEncoding);
-    audiosettings2.setQuality(QtMultimedia::LowQuality);
+    audiosettings2.setEncodingMode(QMultimedia::ConstantBitRateEncoding);
+    audiosettings2.setQuality(QMultimedia::LowQuality);
     audiosettings2.setSampleRate(44100);
 
     /* verify the both are equal or not */
@@ -1057,7 +1057,7 @@ void tst_QMediaRecorder::testAudioSettingsOperatorNotEqual()
 
     /* Modify the settings value for one object */
     audiosettings2.setBitRate(64*1000);
-    audiosettings2.setEncodingMode(QtMultimedia::ConstantQualityEncoding);
+    audiosettings2.setEncodingMode(QMultimedia::ConstantQualityEncoding);
 
     /* verify the not equal opertor */
     QVERIFY(audiosettings1 != audiosettings2);
@@ -1076,8 +1076,8 @@ void tst_QMediaRecorder::testAudioSettingsOperatorEqual()
     audiosettings1.setBitRate(128*1000);
     audiosettings1.setChannelCount(4);
     audiosettings1.setCodec("audio/pcm");
-    audiosettings1.setEncodingMode(QtMultimedia::ConstantBitRateEncoding);
-    audiosettings1.setQuality(QtMultimedia::LowQuality);
+    audiosettings1.setEncodingMode(QMultimedia::ConstantBitRateEncoding);
+    audiosettings1.setQuality(QMultimedia::LowQuality);
     audiosettings1.setSampleRate(44100);
 
     QAudioEncoderSettings audiosettings2;
@@ -1087,8 +1087,8 @@ void tst_QMediaRecorder::testAudioSettingsOperatorEqual()
     audiosettings2.setBitRate(128*1000);
     audiosettings2.setChannelCount(4);
     audiosettings2.setCodec("audio/pcm");
-    audiosettings2.setEncodingMode(QtMultimedia::ConstantBitRateEncoding);
-    audiosettings2.setQuality(QtMultimedia::LowQuality);
+    audiosettings2.setEncodingMode(QMultimedia::ConstantBitRateEncoding);
+    audiosettings2.setQuality(QMultimedia::LowQuality);
     audiosettings2.setSampleRate(44100);
 
     /* verify both the values are same or not */
@@ -1108,8 +1108,8 @@ void tst_QMediaRecorder::testAudioSettingsOperatorAssign()
     audiosettings1.setBitRate(128*1000);
     audiosettings1.setChannelCount(4);
     audiosettings1.setCodec("audio/pcm");
-    audiosettings1.setEncodingMode(QtMultimedia::ConstantBitRateEncoding);
-    audiosettings1.setQuality(QtMultimedia::LowQuality);
+    audiosettings1.setEncodingMode(QMultimedia::ConstantBitRateEncoding);
+    audiosettings1.setQuality(QMultimedia::LowQuality);
     audiosettings1.setSampleRate(44100);
 
     QAudioEncoderSettings audiosettings2;
@@ -1141,7 +1141,7 @@ void tst_QMediaRecorder::testAvailabilityStatus()
         MockMediaRecorderService service(0, 0);
         MockMediaObject object(0, &service);
         QMediaRecorder recorder(&object);
-        QCOMPARE(recorder.availability(), QtMultimedia::ServiceMissing);
+        QCOMPARE(recorder.availability(), QMultimedia::ServiceMissing);
         QCOMPARE(recorder.isAvailable(), false);
     }
     {
@@ -1150,7 +1150,7 @@ void tst_QMediaRecorder::testAvailabilityStatus()
         service1.mockMetaDataControl->populateMetaData();
         MockMediaObject object1(0, &service1);
         QMediaRecorder recorder1(&object1);
-        QCOMPARE(recorder1.availability(), QtMultimedia::Available);
+        QCOMPARE(recorder1.availability(), QMultimedia::Available);
         QCOMPARE(recorder1.isAvailable(), true);
     }
     {
@@ -1160,29 +1160,29 @@ void tst_QMediaRecorder::testAvailabilityStatus()
         MockMediaObject object1(0, &service1);
         QMediaRecorder recorder1(&object1);
 
-        QCOMPARE(recorder1.availability(), QtMultimedia::Available);
+        QCOMPARE(recorder1.availability(), QMultimedia::Available);
         QCOMPARE(recorder1.isAvailable(), true);
     }
     {
         MockMediaRecorderControl recorderControl(0);
-        MockAvailabilityControl availability(QtMultimedia::Available);
+        MockAvailabilityControl availability(QMultimedia::Available);
         MockMediaRecorderService service1(0, &recorderControl, &availability);
         service1.mockMetaDataControl->populateMetaData();
         MockMediaObject object1(0, &service1);
         QMediaRecorder recorder1(&object1);
 
-        QSignalSpy spy(&object1, SIGNAL(availabilityChanged(QtMultimedia::AvailabilityStatus)));
+        QSignalSpy spy(&object1, SIGNAL(availabilityChanged(QMultimedia::AvailabilityStatus)));
 
-        QCOMPARE(recorder1.availability(), QtMultimedia::Available);
+        QCOMPARE(recorder1.availability(), QMultimedia::Available);
         QCOMPARE(recorder1.isAvailable(), true);
 
-        availability.setAvailability(QtMultimedia::Busy);
-        QCOMPARE(recorder1.availability(), QtMultimedia::Busy);
+        availability.setAvailability(QMultimedia::Busy);
+        QCOMPARE(recorder1.availability(), QMultimedia::Busy);
         QCOMPARE(recorder1.isAvailable(), false);
         QCOMPARE(spy.count(), 1);
 
-        availability.setAvailability(QtMultimedia::Available);
-        QCOMPARE(recorder1.availability(), QtMultimedia::Available);
+        availability.setAvailability(QMultimedia::Available);
+        QCOMPARE(recorder1.availability(), QMultimedia::Available);
         QCOMPARE(recorder1.isAvailable(), true);
         QCOMPARE(spy.count(), 2);
     }
@@ -1246,21 +1246,21 @@ void tst_QMediaRecorder::testVideoSettingsQuality()
     QVERIFY(settings == QVideoEncoderSettings());
 
     /* Verify the default value is intialised correctly*/
-    QCOMPARE(settings.quality(), QtMultimedia::NormalQuality);
+    QCOMPARE(settings.quality(), QMultimedia::NormalQuality);
 
     /* Set all types of Quality parameter and Verify if it is set correctly*/
-    settings.setQuality(QtMultimedia::HighQuality);
-    QCOMPARE(settings.quality(), QtMultimedia::HighQuality);
+    settings.setQuality(QMultimedia::HighQuality);
+    QCOMPARE(settings.quality(), QMultimedia::HighQuality);
     QVERIFY(!settings.isNull());
 
-    settings.setQuality(QtMultimedia::VeryLowQuality);
-    QCOMPARE(settings.quality(), QtMultimedia::VeryLowQuality);
+    settings.setQuality(QMultimedia::VeryLowQuality);
+    QCOMPARE(settings.quality(), QMultimedia::VeryLowQuality);
 
-    settings.setQuality(QtMultimedia::LowQuality);
-    QCOMPARE(settings.quality(), QtMultimedia::LowQuality);
+    settings.setQuality(QMultimedia::LowQuality);
+    QCOMPARE(settings.quality(), QMultimedia::LowQuality);
 
-    settings.setQuality(QtMultimedia::VeryHighQuality);
-    QCOMPARE(settings.quality(), QtMultimedia::VeryHighQuality);
+    settings.setQuality(QMultimedia::VeryHighQuality);
+    QCOMPARE(settings.quality(), QMultimedia::VeryHighQuality);
 }
 
 /* Test  QVideoEncoderSettings encodingMode */
@@ -1272,19 +1272,19 @@ void tst_QMediaRecorder::testVideoSettingsEncodingMode()
     QVERIFY(settings == QVideoEncoderSettings());
 
     /* Verify the default values are initialised correctly*/
-    QCOMPARE(settings.encodingMode(), QtMultimedia::ConstantQualityEncoding);
+    QCOMPARE(settings.encodingMode(), QMultimedia::ConstantQualityEncoding);
     QVERIFY(settings.isNull());
 
     /* Set each type of encoding mode and Verify if it is set correctly*/
-    settings.setEncodingMode(QtMultimedia::ConstantBitRateEncoding);
-    QCOMPARE(settings.encodingMode(),QtMultimedia::ConstantBitRateEncoding);
+    settings.setEncodingMode(QMultimedia::ConstantBitRateEncoding);
+    QCOMPARE(settings.encodingMode(),QMultimedia::ConstantBitRateEncoding);
     QVERIFY(!settings.isNull());
 
-    settings.setEncodingMode(QtMultimedia::AverageBitRateEncoding);
-    QCOMPARE(settings.encodingMode(), QtMultimedia::AverageBitRateEncoding);
+    settings.setEncodingMode(QMultimedia::AverageBitRateEncoding);
+    QCOMPARE(settings.encodingMode(), QMultimedia::AverageBitRateEncoding);
 
-    settings.setEncodingMode(QtMultimedia::TwoPassEncoding);
-    QCOMPARE(settings.encodingMode(), QtMultimedia::TwoPassEncoding);
+    settings.setEncodingMode(QMultimedia::TwoPassEncoding);
+    QCOMPARE(settings.encodingMode(), QMultimedia::TwoPassEncoding);
 }
 
 /* Test QVideoEncoderSettings copy constructor */
@@ -1294,8 +1294,8 @@ void tst_QMediaRecorder::testVideoSettingsCopyConstructor()
     QVideoEncoderSettings settings1;
     settings1.setCodec(QLatin1String("codecName"));
     settings1.setBitRate(128000);
-    settings1.setQuality(QtMultimedia::HighQuality);
-    settings1.setEncodingMode(QtMultimedia::ConstantBitRateEncoding);
+    settings1.setQuality(QMultimedia::HighQuality);
+    settings1.setEncodingMode(QMultimedia::ConstantBitRateEncoding);
     settings1.setFrameRate(30000.0/10001);
     settings1.setResolution(QSize(320,240));
 
@@ -1306,10 +1306,10 @@ void tst_QMediaRecorder::testVideoSettingsCopyConstructor()
     QCOMPARE(settings2 != settings1, false);
     QCOMPARE(settings2.codec(), QLatin1String("codecName"));
     QCOMPARE(settings2.bitRate(), 128000);
-    QCOMPARE(settings2.encodingMode(), QtMultimedia::ConstantBitRateEncoding);
+    QCOMPARE(settings2.encodingMode(), QMultimedia::ConstantBitRateEncoding);
     QVERIFY(qFuzzyCompare(settings2.frameRate(), qreal(30000.0/10001)));
     QCOMPARE(settings2.resolution(), QSize(320,240));
-    QCOMPARE(settings2.quality(), QtMultimedia::HighQuality);
+    QCOMPARE(settings2.quality(), QMultimedia::HighQuality);
 
     /* Verify both the instances are equal*/
     QCOMPARE(settings2, settings1);
@@ -1328,10 +1328,10 @@ void tst_QMediaRecorder::testVideoSettingsOperatorAssignment()
     /* Initialize all the parameters */
     settings1.setCodec(QLatin1String("codecName"));
     settings1.setBitRate(128000);
-    settings1.setEncodingMode(QtMultimedia::ConstantBitRateEncoding);
+    settings1.setEncodingMode(QMultimedia::ConstantBitRateEncoding);
     settings1.setFrameRate(30000.0/10001);
     settings1.setResolution(QSize(320,240));
-    settings1.setQuality(QtMultimedia::HighQuality);
+    settings1.setQuality(QMultimedia::HighQuality);
     /* Assign one object to other*/
     settings2 = settings1;
 
@@ -1339,10 +1339,10 @@ void tst_QMediaRecorder::testVideoSettingsOperatorAssignment()
     QCOMPARE(settings2, settings1);
     QCOMPARE(settings2.codec(), QLatin1String("codecName"));
     QCOMPARE(settings2.bitRate(), 128000);
-    QCOMPARE(settings2.encodingMode(), QtMultimedia::ConstantBitRateEncoding);
+    QCOMPARE(settings2.encodingMode(), QMultimedia::ConstantBitRateEncoding);
     QVERIFY(qFuzzyCompare(settings2.frameRate(), qreal(30000.0/10001)));
     QCOMPARE(settings2.resolution(), QSize(320,240));
-    QCOMPARE(settings2.quality(), QtMultimedia::HighQuality);
+    QCOMPARE(settings2.quality(), QMultimedia::HighQuality);
     QCOMPARE(settings2, settings1);
     QVERIFY(!settings2.isNull());
 }
@@ -1385,23 +1385,23 @@ void tst_QMediaRecorder::testVideoSettingsOperatorNotEqual()
 
     /* Verify EncodingMode with not equal operator*/
     settings1 = QVideoEncoderSettings();
-    settings1.setEncodingMode(QtMultimedia::ConstantBitRateEncoding);
+    settings1.setEncodingMode(QMultimedia::ConstantBitRateEncoding);
     settings2 = QVideoEncoderSettings();
-    settings2.setEncodingMode(QtMultimedia::ConstantBitRateEncoding);
+    settings2.setEncodingMode(QMultimedia::ConstantBitRateEncoding);
     /* OperatorNotEqual returns false when both objects are equal*/
     QCOMPARE(settings1 != settings2, false);
-    settings2.setEncodingMode(QtMultimedia::TwoPassEncoding);
+    settings2.setEncodingMode(QMultimedia::TwoPassEncoding);
     /* OperatorNotEqual returns true when both objects are not equal*/
     QVERIFY(settings1 != settings2);
 
     /* Verify Quality with not equal operator*/
     settings1 = QVideoEncoderSettings();
-    settings1.setQuality(QtMultimedia::NormalQuality);
+    settings1.setQuality(QMultimedia::NormalQuality);
     settings2 = QVideoEncoderSettings();
-    settings2.setQuality(QtMultimedia::NormalQuality);
+    settings2.setQuality(QMultimedia::NormalQuality);
     /* OperatorNotEqual returns false when both objects are equal*/
     QCOMPARE(settings1 != settings2, false);
-    settings2.setQuality(QtMultimedia::LowQuality);
+    settings2.setQuality(QMultimedia::LowQuality);
     /* OperatorNotEqual returns true when both objects are not equal*/
     QVERIFY(settings1 != settings2);
 
@@ -1456,23 +1456,23 @@ void tst_QMediaRecorder::testVideoSettingsOperatorComparison()
 
     /* Verify EncodingMode with comparison operator*/
     settings1 = QVideoEncoderSettings();
-    settings1.setEncodingMode(QtMultimedia::ConstantBitRateEncoding);
+    settings1.setEncodingMode(QMultimedia::ConstantBitRateEncoding);
     settings2 = QVideoEncoderSettings();
-    settings2.setEncodingMode(QtMultimedia::ConstantBitRateEncoding);
+    settings2.setEncodingMode(QMultimedia::ConstantBitRateEncoding);
     /* Comparison operator returns true when both objects are equal*/
     QVERIFY(settings1 == settings2);
-    settings2.setEncodingMode(QtMultimedia::TwoPassEncoding);
+    settings2.setEncodingMode(QMultimedia::TwoPassEncoding);
     /* Comparison operator returns false when both objects are not equal*/
     QCOMPARE(settings1 == settings2, false);
 
     /* Verify Quality with comparison operator*/
     settings1 = QVideoEncoderSettings();
-    settings1.setQuality(QtMultimedia::NormalQuality);
+    settings1.setQuality(QMultimedia::NormalQuality);
     settings2 = QVideoEncoderSettings();
-    settings2.setQuality(QtMultimedia::NormalQuality);
+    settings2.setQuality(QMultimedia::NormalQuality);
     /* Comparison operator returns true when both objects are equal*/
     QVERIFY(settings1 == settings2);
-    settings2.setQuality(QtMultimedia::LowQuality);
+    settings2.setQuality(QMultimedia::LowQuality);
     /* Comparison operator returns false when both objects are not equal*/
     QCOMPARE(settings1 == settings2, false);
 
diff --git a/tests/auto/unit/qmediaserviceprovider/mockserviceplugin1/mockserviceplugin1.cpp b/tests/auto/unit/qmediaserviceprovider/mockserviceplugin1/mockserviceplugin1.cpp
index 42d75ff..9faf75e 100644
--- a/tests/auto/unit/qmediaserviceprovider/mockserviceplugin1/mockserviceplugin1.cpp
+++ b/tests/auto/unit/qmediaserviceprovider/mockserviceplugin1/mockserviceplugin1.cpp
@@ -71,16 +71,16 @@ public:
         delete service;
     }
 
-    QtMultimedia::SupportEstimate hasSupport(const QString &mimeType, const QStringList& codecs) const
+    QMultimedia::SupportEstimate hasSupport(const QString &mimeType, const QStringList& codecs) const
     {
         if (codecs.contains(QLatin1String("mpeg4")))
-            return QtMultimedia::NotSupported;
+            return QMultimedia::NotSupported;
 
         if (mimeType == "audio/ogg") {
-            return QtMultimedia::ProbablySupported;
+            return QMultimedia::ProbablySupported;
         }
 
-        return QtMultimedia::MaybeSupported;
+        return QMultimedia::MaybeSupported;
     }
 
     QStringList supportedMimeTypes() const
diff --git a/tests/auto/unit/qmediaserviceprovider/mockserviceplugin2/mockserviceplugin2.cpp b/tests/auto/unit/qmediaserviceprovider/mockserviceplugin2/mockserviceplugin2.cpp
index a4f16b4..7295003 100644
--- a/tests/auto/unit/qmediaserviceprovider/mockserviceplugin2/mockserviceplugin2.cpp
+++ b/tests/auto/unit/qmediaserviceprovider/mockserviceplugin2/mockserviceplugin2.cpp
@@ -71,14 +71,14 @@ public:
         delete service;
     }
 
-    QtMultimedia::SupportEstimate hasSupport(const QString &mimeType, const QStringList& codecs) const
+    QMultimedia::SupportEstimate hasSupport(const QString &mimeType, const QStringList& codecs) const
     {
         Q_UNUSED(codecs);
 
         if (mimeType == "audio/wav")
-            return QtMultimedia::PreferredService;
+            return QMultimedia::PreferredService;
 
-        return QtMultimedia::NotSupported;
+        return QMultimedia::NotSupported;
     }
 
     QStringList supportedMimeTypes() const
diff --git a/tests/auto/unit/qmediaserviceprovider/mockserviceplugin4/mockserviceplugin4.cpp b/tests/auto/unit/qmediaserviceprovider/mockserviceplugin4/mockserviceplugin4.cpp
index 9694040..1982c5c 100644
--- a/tests/auto/unit/qmediaserviceprovider/mockserviceplugin4/mockserviceplugin4.cpp
+++ b/tests/auto/unit/qmediaserviceprovider/mockserviceplugin4/mockserviceplugin4.cpp
@@ -70,15 +70,15 @@ public:
         delete service;
     }
 
-    QtMultimedia::SupportEstimate hasSupport(const QString &mimeType, const QStringList& codecs) const
+    QMultimedia::SupportEstimate hasSupport(const QString &mimeType, const QStringList& codecs) const
     {
         if (codecs.contains(QLatin1String("jpeg2000")))
-            return QtMultimedia::NotSupported;
+            return QMultimedia::NotSupported;
 
         if (supportedMimeTypes().contains(mimeType))
-            return QtMultimedia::ProbablySupported;
+            return QMultimedia::ProbablySupported;
 
-        return QtMultimedia::MaybeSupported;
+        return QMultimedia::MaybeSupported;
     }
 
     QStringList supportedMimeTypes() const
diff --git a/tests/auto/unit/qmediaserviceprovider/tst_qmediaserviceprovider.cpp b/tests/auto/unit/qmediaserviceprovider/tst_qmediaserviceprovider.cpp
index c2d2d2d..8557c57 100644
--- a/tests/auto/unit/qmediaserviceprovider/tst_qmediaserviceprovider.cpp
+++ b/tests/auto/unit/qmediaserviceprovider/tst_qmediaserviceprovider.cpp
@@ -119,7 +119,7 @@ void tst_QMediaServiceProvider::testHasSupport()
 {
     MockMediaServiceProvider mockProvider;
     QCOMPARE(mockProvider.hasSupport(QByteArray(Q_MEDIASERVICE_MEDIAPLAYER), "video/ogv", QStringList()),
-             QtMultimedia::MaybeSupported);
+             QMultimedia::MaybeSupported);
 
     QMediaServiceProvider *provider = QMediaServiceProvider::defaultServiceProvider();
 
@@ -127,44 +127,44 @@ void tst_QMediaServiceProvider::testHasSupport()
         QSKIP("No default provider");
 
     QCOMPARE(provider->hasSupport(QByteArray(Q_MEDIASERVICE_MEDIAPLAYER), "video/ogv", QStringList()),
-             QtMultimedia::MaybeSupported);
+             QMultimedia::MaybeSupported);
 
     QCOMPARE(provider->hasSupport(QByteArray(Q_MEDIASERVICE_MEDIAPLAYER), "audio/ogg", QStringList()),
-             QtMultimedia::ProbablySupported);
+             QMultimedia::ProbablySupported);
 
     //while the service returns PreferredService, provider should return ProbablySupported
     QCOMPARE(provider->hasSupport(QByteArray(Q_MEDIASERVICE_MEDIAPLAYER), "audio/wav", QStringList()),
-             QtMultimedia::ProbablySupported);
+             QMultimedia::ProbablySupported);
 
     //even while all the plugins with "hasSupport" returned NotSupported,
     //MockServicePlugin3 has no "hasSupport" interface, so MaybeSupported
     QCOMPARE(provider->hasSupport(QByteArray(Q_MEDIASERVICE_MEDIAPLAYER), "video/avi",
                                   QStringList() << "mpeg4"),
-             QtMultimedia::MaybeSupported);
+             QMultimedia::MaybeSupported);
 
     QCOMPARE(provider->hasSupport(QByteArray("non existing service"), "video/ogv", QStringList()),
-             QtMultimedia::NotSupported);
+             QMultimedia::NotSupported);
 
-    QCOMPARE(QMediaPlayer::hasSupport("video/ogv"), QtMultimedia::MaybeSupported);
-    QCOMPARE(QMediaPlayer::hasSupport("audio/ogg"), QtMultimedia::ProbablySupported);
-    QCOMPARE(QMediaPlayer::hasSupport("audio/wav"), QtMultimedia::ProbablySupported);
+    QCOMPARE(QMediaPlayer::hasSupport("video/ogv"), QMultimedia::MaybeSupported);
+    QCOMPARE(QMediaPlayer::hasSupport("audio/ogg"), QMultimedia::ProbablySupported);
+    QCOMPARE(QMediaPlayer::hasSupport("audio/wav"), QMultimedia::ProbablySupported);
 
     //test low latency flag support
     QCOMPARE(QMediaPlayer::hasSupport("audio/wav", QStringList(), QMediaPlayer::LowLatency),
-             QtMultimedia::ProbablySupported);
+             QMultimedia::ProbablySupported);
     //plugin1 probably supports audio/ogg, it checked because it doesn't provide features iface
     QCOMPARE(QMediaPlayer::hasSupport("audio/ogg", QStringList(), QMediaPlayer::LowLatency),
-             QtMultimedia::ProbablySupported);
+             QMultimedia::ProbablySupported);
     //Plugin4 is not checked here, sine it's known not support low latency
     QCOMPARE(QMediaPlayer::hasSupport("video/quicktime", QStringList(), QMediaPlayer::LowLatency),
-             QtMultimedia::MaybeSupported);
+             QMultimedia::MaybeSupported);
 
     //test streaming flag support
     QCOMPARE(QMediaPlayer::hasSupport("video/quicktime", QStringList(), QMediaPlayer::StreamPlayback),
-             QtMultimedia::ProbablySupported);
+             QMultimedia::ProbablySupported);
     //Plugin2 is not checked here, sine it's known not support streaming
     QCOMPARE(QMediaPlayer::hasSupport("audio/wav", QStringList(), QMediaPlayer::StreamPlayback),
-             QtMultimedia::MaybeSupported);
+             QMultimedia::MaybeSupported);
 
     //ensure the correct media player plugin is chosen for mime type
     QMediaPlayer simplePlayer(0, QMediaPlayer::LowLatency);
diff --git a/tests/auto/unit/qmultimedia_common/mockavailabilitycontrol.h b/tests/auto/unit/qmultimedia_common/mockavailabilitycontrol.h
index 159abf9..c63b62d 100644
--- a/tests/auto/unit/qmultimedia_common/mockavailabilitycontrol.h
+++ b/tests/auto/unit/qmultimedia_common/mockavailabilitycontrol.h
@@ -50,18 +50,18 @@ class MockAvailabilityControl : public QMediaAvailabilityControl
     Q_OBJECT
 
 public:
-    MockAvailabilityControl(QtMultimedia::AvailabilityStatus available)
+    MockAvailabilityControl(QMultimedia::AvailabilityStatus available)
         : m_availability(available)
     {
 
     }
 
-    QtMultimedia::AvailabilityStatus availability() const
+    QMultimedia::AvailabilityStatus availability() const
     {
         return m_availability;
     }
 
-    void setAvailability(QtMultimedia::AvailabilityStatus availability)
+    void setAvailability(QMultimedia::AvailabilityStatus availability)
     {
         if (m_availability != availability) {
             m_availability = availability;
@@ -69,7 +69,7 @@ public:
         }
     }
 
-    QtMultimedia::AvailabilityStatus m_availability;
+    QMultimedia::AvailabilityStatus m_availability;
 };
 
 #endif // MOCKAVAILABILITYCONTROL_H
diff --git a/tests/auto/unit/qmultimedia_common/mockimageencodercontrol.h b/tests/auto/unit/qmultimedia_common/mockimageencodercontrol.h
index a233590..39e7898 100644
--- a/tests/auto/unit/qmultimedia_common/mockimageencodercontrol.h
+++ b/tests/auto/unit/qmultimedia_common/mockimageencodercontrol.h
@@ -65,12 +65,12 @@ public:
                 settings.resolution() == QSize(320,240))
                 resolutions << settings.resolution();
 
-            if (settings.quality() == QtMultimedia::HighQuality && settings.resolution() == QSize(640,480))
+            if (settings.quality() == QMultimedia::HighQuality && settings.resolution() == QSize(640,480))
                 resolutions << settings.resolution();
         } else {
             resolutions << QSize(160, 120);
             resolutions << QSize(320, 240);
-            if (settings.quality() == QtMultimedia::HighQuality)
+            if (settings.quality() == QMultimedia::HighQuality)
                 resolutions << QSize(640, 480);
         }
 
diff --git a/tests/auto/unit/qradiodata/tst_qradiodata.cpp b/tests/auto/unit/qradiodata/tst_qradiodata.cpp
index a42b0aa..0a1ea9b 100644
--- a/tests/auto/unit/qradiodata/tst_qradiodata.cpp
+++ b/tests/auto/unit/qradiodata/tst_qradiodata.cpp
@@ -89,7 +89,7 @@ void tst_QRadioData::initTestCase()
 {
     qRegisterMetaType<QRadioData::ProgramType>("QRadioData::ProgramType");
 
-    mockAvailability = new MockAvailabilityControl(QtMultimedia::Available);
+    mockAvailability = new MockAvailabilityControl(QMultimedia::Available);
     mockTuner = new MockRadioTunerControl(this);
     mockData = new MockRadioDataControl(this);
 
@@ -105,7 +105,7 @@ void tst_QRadioData::initTestCase()
     radio = new QRadioTuner;
     radioData = radio->radioData();
 
-    QVERIFY(radioData->availability() == QtMultimedia::Available);
+    QVERIFY(radioData->availability() == QMultimedia::Available);
 }
 
 void tst_QRadioData::cleanupTestCase()
diff --git a/tests/auto/unit/qradiotuner/tst_qradiotuner.cpp b/tests/auto/unit/qradiotuner/tst_qradiotuner.cpp
index 66416e9..cbf2fe6 100644
--- a/tests/auto/unit/qradiotuner/tst_qradiotuner.cpp
+++ b/tests/auto/unit/qradiotuner/tst_qradiotuner.cpp
@@ -95,7 +95,7 @@ void tst_QRadioTuner::initTestCase()
     qRegisterMetaType<QRadioTuner::Band>("QRadioTuner::Band");
 
     mock = new MockRadioTunerControl(this);
-    mockAvailability = new MockAvailabilityControl(QtMultimedia::Available);
+    mockAvailability = new MockAvailabilityControl(QMultimedia::Available);
 
     QMap<QString, QMediaControl *> map;
     map.insert(QRadioTunerControl_iid, mock);
@@ -108,13 +108,13 @@ void tst_QRadioTuner::initTestCase()
     radio = new QRadioTuner;
     QVERIFY(radio->service() != 0);
     QVERIFY(radio->isAvailable());
-    QVERIFY(radio->availability() == QtMultimedia::Available);
+    QVERIFY(radio->availability() == QMultimedia::Available);
 
     QSignalSpy stateSpy(radio, SIGNAL(stateChanged(QRadioTuner::State)));
 
     QCOMPARE(radio->state(), QRadioTuner::StoppedState);    
     radio->start();
-    QVERIFY(radio->availability() == QtMultimedia::Available);
+    QVERIFY(radio->availability() == QMultimedia::Available);
     QCOMPARE(radio->state(), QRadioTuner::ActiveState);
 
     QCOMPARE(stateSpy.count(), 1);
@@ -129,7 +129,7 @@ void tst_QRadioTuner::cleanupTestCase()
     QSignalSpy stateSpy(radio, SIGNAL(stateChanged(QRadioTuner::State)));
 
     radio->stop();
-    QVERIFY(radio->availability() == QtMultimedia::Available);
+    QVERIFY(radio->availability() == QMultimedia::Available);
     QCOMPARE(radio->state(), QRadioTuner::StoppedState);
     QCOMPARE(stateSpy.count(), 1);
 
diff --git a/tests/auto/unit/qvideoprobe/tst_qvideoprobe.cpp b/tests/auto/unit/qvideoprobe/tst_qvideoprobe.cpp
index eade10d..5d83456 100644
--- a/tests/auto/unit/qvideoprobe/tst_qvideoprobe.cpp
+++ b/tests/auto/unit/qvideoprobe/tst_qvideoprobe.cpp
@@ -116,7 +116,7 @@ void tst_QVideoProbe::testNullService()
     player = new QMediaPlayer;
 
     QVERIFY(!player->isAvailable());
-    QCOMPARE(player->availability(), QtMultimedia::ServiceMissing);
+    QCOMPARE(player->availability(), QMultimedia::ServiceMissing);
 
     QVideoProbe probe;
     QVERIFY(!probe.isActive());