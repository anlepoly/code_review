diff --git a/src/corelib/io/io.pri b/src/corelib/io/io.pri
index 2959929..d24ea66 100644
--- a/src/corelib/io/io.pri
+++ b/src/corelib/io/io.pri
@@ -106,6 +106,8 @@ win32 {
             SOURCES += io/qstandardpaths_mac.cpp
         } else:standardpathsjson {
             SOURCES += io/qstandardpaths_json.cpp
+        } else:blackberry {
+            SOURCES += io/qstandardpaths_blackberry.cpp
         } else {
             SOURCES += io/qstandardpaths_unix.cpp
         }
diff --git a/src/corelib/io/qstandardpaths_blackberry.cpp b/src/corelib/io/qstandardpaths_blackberry.cpp
new file mode 100644
index 0000000..b4c036d
--- /dev/null
+++ b/src/corelib/io/qstandardpaths_blackberry.cpp
@@ -0,0 +1,103 @@
+/***************************************************************************
+**
+** Copyright (C) 2012 Research In Motion
+** Contact: http://www.qt-project.org/
+**
+** This file is part of the QtGui module of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** GNU Lesser General Public License Usage
+** This file may be used under the terms of the GNU Lesser General Public
+** License version 2.1 as published by the Free Software Foundation and
+** appearing in the file LICENSE.LGPL included in the packaging of this
+** file. Please review the following information to ensure the GNU Lesser
+** General Public License version 2.1 requirements will be met:
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** In addition, as a special exception, Nokia gives you certain additional
+** rights. These rights are described in the Nokia Qt LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU General
+** Public License version 3.0 as published by the Free Software Foundation
+** and appearing in the file LICENSE.GPL included in the packaging of this
+** file. Please review the following information to ensure the GNU General
+** Public License version 3.0 requirements will be met:
+** http://www.gnu.org/copyleft/gpl.html.
+**
+** Other Usage
+** Alternatively, this file may be used in accordance with the terms and
+** conditions contained in a signed written agreement between you and Nokia.
+**
+**
+**
+**
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#include "qstandardpaths.h"
+#include <qdir.h>
+
+#ifndef QT_NO_STANDARDPATHS
+
+QT_BEGIN_NAMESPACE
+
+QString QStandardPaths::writableLocation(StandardLocation type)
+{
+    QDir sharedDir = QDir::home();
+    sharedDir.cd(QLatin1String("../shared"));
+
+    const QString sharedRoot = sharedDir.absolutePath();
+
+    switch (type) {
+    case DataLocation:
+    case DesktopLocation:
+    case HomeLocation:
+        return QDir::homePath();
+    case RuntimeLocation:
+    case TempLocation:
+        return QDir::tempPath();
+    case CacheLocation:
+    case GenericCacheLocation:
+        return QDir::homePath() + QLatin1String("/Cache");
+    case ConfigLocation:
+        return QDir::homePath() + QLatin1String("/Settings");
+    case GenericDataLocation:
+        return sharedRoot + QLatin1String("/misc");
+    case DocumentsLocation:
+        return sharedRoot + QLatin1String("/documents");
+    case PicturesLocation:
+        return sharedRoot + QLatin1String("/photos");
+    case FontsLocation:
+        // this is not a writable location
+        return QString();
+    case MusicLocation:
+        return sharedRoot + QLatin1String("/music");
+    case MoviesLocation:
+        return sharedRoot + QLatin1String("/videos");
+    case DownloadLocation:
+        return sharedRoot + QLatin1String("/downloads");
+    case ApplicationsLocation:
+        return QString();
+    default:
+        break;
+    }
+
+    return QString();
+}
+
+QStringList QStandardPaths::standardLocations(StandardLocation type)
+{
+    if (type == FontsLocation)
+        return QStringList(QLatin1String("/base/usr/fonts"));
+
+    return QStringList(writableLocation(type));
+}
+
+QT_END_NAMESPACE
+
+#endif // QT_NO_STANDARDPATHS
diff --git a/tests/auto/corelib/io/qstandardpaths/tst_qstandardpaths.cpp b/tests/auto/corelib/io/qstandardpaths/tst_qstandardpaths.cpp
index e9af294..b15d5fc 100644
--- a/tests/auto/corelib/io/qstandardpaths/tst_qstandardpaths.cpp
+++ b/tests/auto/corelib/io/qstandardpaths/tst_qstandardpaths.cpp
@@ -49,7 +49,7 @@
 #include <sys/types.h>
 #endif
 
-#if defined(Q_OS_UNIX) && !defined(Q_OS_MAC)
+#if defined(Q_OS_UNIX) && !defined(Q_OS_MAC) && !defined(Q_OS_BLACKBERRY)
 #define Q_XDG_PLATFORM
 #endif
 
@@ -186,12 +186,16 @@ void tst_qstandardpaths::testDataLocation()
 {
     // On all platforms, DataLocation should be GenericDataLocation / organization name / app name
     // This allows one app to access the data of another app.
+    // Blackberry OS is an exception to this case, owing to the fact that
+    // applications are sandboxed.
+#ifndef Q_OS_BLACKBERRY
     const QString base = QStandardPaths::writableLocation(QStandardPaths::GenericDataLocation);
     QCOMPARE(QStandardPaths::writableLocation(QStandardPaths::DataLocation), base + "/tst_qstandardpaths");
     QCoreApplication::instance()->setOrganizationName("Qt");
     QCOMPARE(QStandardPaths::writableLocation(QStandardPaths::DataLocation), base + "/Qt/tst_qstandardpaths");
     QCoreApplication::instance()->setApplicationName("QtTest");
     QCOMPARE(QStandardPaths::writableLocation(QStandardPaths::DataLocation), base + "/Qt/QtTest");
+#endif
 
 #ifdef Q_XDG_PLATFORM
     setDefaultLocations();