diff --git a/src/qml/qml/qqmlcomponent.cpp b/src/qml/qml/qqmlcomponent.cpp
index 5473290..ac3eee8 100644
--- a/src/qml/qml/qqmlcomponent.cpp
+++ b/src/qml/qml/qqmlcomponent.cpp
@@ -122,7 +122,7 @@ static inline QString buildTypeNameForDebug(const QMetaObject *metaObject)
 
     \brief The QQmlComponent class encapsulates a QML component definition
 
-    Components are reusable, encapsulated QML elements with well-defined interfaces.
+    Components are reusable, encapsulated QML types with well-defined interfaces.
 
     A QQmlComponent instance can be created from a QML file.
     For example, if there is a \c main.qml file like this:
@@ -196,10 +196,10 @@ static inline QString buildTypeNameForDebug(const QMetaObject *metaObject)
     \inqmlmodule QtQuick 2
     \brief Encapsulates a QML component definition
 
-    Components are reusable, encapsulated QML elements with well-defined interfaces.
+    Components are reusable, encapsulated QML types with well-defined interfaces.
 
     Components are often defined by \l {{QML Documents}}{component files} -
-    that is, \c .qml files. The \e Component element essentially allows QML components
+    that is, \c .qml files. The \e Component type essentially allows QML components
     to be defined inline, within a \l {QML Document}{QML document}, rather than as a separate QML file.
     This may be useful for reusing a small component within a QML file, or for defining
     a component that logically belongs with other QML components within a file.
@@ -212,7 +212,7 @@ static inline QString buildTypeNameForDebug(const QMetaObject *metaObject)
     Notice that while a \l Rectangle by itself would be automatically 
     rendered and displayed, this is not the case for the above rectangle
     because it is defined inside a \c Component. The component encapsulates the
-    QML elements within, as if they were defined in a separate QML
+    QML types within, as if they were defined in a separate QML
     file, and is not loaded until requested (in this case, by the
     two \l Loader objects).
 
@@ -224,7 +224,7 @@ static inline QString buildTypeNameForDebug(const QMetaObject *metaObject)
     data outside of this item, with the exception of an \e id (which in the above example
     is \e redSquare).
 
-    The \c Component element is commonly used to provide graphical components
+    The \c Component type is commonly used to provide graphical components
     for views. For example, the ListView::delegate property requires a \c Component
     to specify how each list item is to be displayed.
 
@@ -260,8 +260,8 @@ static inline QString buildTypeNameForDebug(const QMetaObject *metaObject)
     execute script code at startup, once the full QML environment has been
     established.
 
-    The \c {Component::onCompleted} attached property can be applied to
-    any element.  The order of running the \c onCompleted scripts is
+    The \c {Component::onCompleted} attached property can be declared on
+    any object.  The order of running the \c onCompleted scripts is
     undefined.
 
     \qml
@@ -281,8 +281,8 @@ static inline QString buildTypeNameForDebug(const QMetaObject *metaObject)
     work done in the onCompleted signal, or other imperative code in your
     application.
 
-    The \c {Component::onDestruction} attached property can be applied to
-    any element.  However, it applies to the destruction of the component as
+    The \c {Component::onDestruction} attached property can be declared on
+    any object.  However, it applies to the destruction of the component as
     a whole, and not the destruction of the specific object.  The order of
     running the \c onDestruction scripts is undefined.
 
diff --git a/src/qml/qml/qqmlengine.cpp b/src/qml/qml/qqmlengine.cpp
index e3db9d4..580aaf4 100644
--- a/src/qml/qml/qqmlengine.cpp
+++ b/src/qml/qml/qqmlengine.cpp
@@ -115,11 +115,11 @@ void qmlRegisterBaseTypes(const char *uri, int versionMajor, int versionMinor)
   \since 4.7
   \brief A basic QML type
 
-  The QtObject element is a non-visual element which contains only the
+  The QtObject type is a non-visual element which contains only the
   objectName property.
 
   It can be useful to create a QtObject if you need an extremely
-  lightweight element to enclose a set of custom properties:
+  lightweight type to enclose a set of custom properties:
 
   \snippet qml/qtobject.qml 0
 
@@ -883,7 +883,7 @@ QNetworkAccessManager *QQmlEnginePrivate::getNetworkAccessManager() const
 
 /*!
   Returns a common QNetworkAccessManager which can be used by any QML
-  element instantiated by this engine.
+  type instantiated by this engine.
 
   If a QQmlNetworkAccessManagerFactory has been set and a
   QNetworkAccessManager has not yet been created, the
diff --git a/src/qml/qml/qqmlincubator.cpp b/src/qml/qml/qqmlincubator.cpp
index 81adf9e..a084e9e 100644
--- a/src/qml/qml/qqmlincubator.cpp
+++ b/src/qml/qml/qqmlincubator.cpp
@@ -446,7 +446,7 @@ The incubator will remain in the Loading state until either the creation is comp
 occurs.  The statusChanged() callback can be used to be notified of status changes.
 
 Applications should use the Asynchronous incubation mode to create objects that are not needed
-immediately.  For example, the ListView element uses Asynchronous incubation to create objects
+immediately.  For example, the ListView type uses Asynchronous incubation to create objects
 that are slightly off screen while the list is being scrolled.  If, during asynchronous creation,
 the object is needed immediately the QQmlIncubator::forceCompletion() method can be called
 to complete the creation process synchronously.
@@ -454,14 +454,14 @@ to complete the creation process synchronously.
 \li AsynchronousIfNested The creation will occur asynchronously if part of a nested asynchronous
 creation, or synchronously if not.  
 
-In most scenarios where a QML element or component wants the appearance of a synchronous 
+In most scenarios where a QML component wants the appearance of a synchronous
 instantiation, it should use this mode.  
 
-This mode is best explained with an example.  When the ListView element is first created, it needs
+This mode is best explained with an example.  When the ListView type is first created, it needs
 to populate itself with an initial set of delegates to show.  If the ListView was 400 pixels high, 
 and each delegate was 100 pixels high, it would need to create four initial delegate instances.  If
 the ListView used the Asynchronous incubation mode, the ListView would always be created empty and
-then, sometime later, the four initial elements would appear.  
+then, sometime later, the four initial items would appear.
 
 Conversely, if the ListView was to use the Synchronous incubation mode it would behave correctly 
 but it may introduce stutters into the application.  As QML would have to stop and instantiate the 
@@ -473,9 +473,9 @@ delegates are instantiated asynchronously if the ListView itself is already part
 instantiation, and synchronously otherwise.  In the case of a nested asynchronous instantiation, the
 outer asynchronous instantiation will not complete until after all the nested instantiations have also
 completed.  This ensures that by the time the outer asynchronous instantitation completes, inner 
-elements like ListView have already completed loading their initial delegates.
+items like ListView have already completed loading their initial delegates.
 
-It is almost always incorrect to use the Synchronous incubation mode - elements or components that 
+It is almost always incorrect to use the Synchronous incubation mode - elements or components that
 want the appearance of synchronous instantiation, but without the downsides of introducing freezes 
 or stutters into the application, should use the AsynchronousIfNested incubation mode.
 \endlist
diff --git a/src/quick/items/context2d/qquickcanvasitem.cpp b/src/quick/items/context2d/qquickcanvasitem.cpp
index 2d55ace..f66b383 100644
--- a/src/quick/items/context2d/qquickcanvasitem.cpp
+++ b/src/quick/items/context2d/qquickcanvasitem.cpp
@@ -208,7 +208,7 @@ QQuickCanvasItemPrivate::~QQuickCanvasItemPrivate()
     \inherits Item
     \ingroup qtquick-canvas
     \ingroup qtquick-visual
-    \brief For specifying a 2D canvas element which enables drawing via Javascript
+    \brief Provides a 2D canvas item enabling drawing via JavaScript
 
     The Canvas item allows drawing of straight and curved lines, simple and
     complex shapes, graphs, and referenced graphic images.  It can also add
@@ -702,7 +702,7 @@ QSGNode *QQuickCanvasItem::updatePaintNode(QSGNode *oldNode, UpdatePaintNodeData
 
     Returns a drawing context or null if no context available.
 
-    The \a contextId parameter names the required context. The Canvas element
+    The \a contextId parameter names the required context. The Canvas item
     will return a context that implements the required drawing mode. After the
     first call to getContext any subsequent call to getContext with the same
     contextId will return the same context object.
diff --git a/src/quick/items/qquickanimatedimage.cpp b/src/quick/items/qquickanimatedimage.cpp
index 72b24a7..fec5a02 100644
--- a/src/quick/items/qquickanimatedimage.cpp
+++ b/src/quick/items/qquickanimatedimage.cpp
@@ -59,7 +59,7 @@ QT_BEGIN_NAMESPACE
     \brief Plays animations stored as a series of images
     \ingroup qtquick-visual
 
-    The AnimatedImage element extends the features of the \l Image element, providing
+    The AnimatedImage type extends the features of the \l Image type, providing
     a way to play animations stored as images containing a series of frames,
     such as those stored in GIF files.
 
diff --git a/src/quick/items/qquickanimatedsprite.cpp b/src/quick/items/qquickanimatedsprite.cpp
index be1c6a0..a243947 100644
--- a/src/quick/items/qquickanimatedsprite.cpp
+++ b/src/quick/items/qquickanimatedsprite.cpp
@@ -219,7 +219,7 @@ struct AnimatedSpriteVertices {
     frame rate of your display, or manually advance and control the progress.
 
     For details of how a sprite animation is defined see the \l{Sprite Animation} overview.
-    Note that the AnimatedSprite element does not use Sprite elements to define multiple animations,
+    Note that the AnimatedSprite type does not use Sprite types to define multiple animations,
     but instead encapsulates a single animation itself.
 */
 
diff --git a/src/quick/items/qquickborderimage.cpp b/src/quick/items/qquickborderimage.cpp
index 6c0387f..53ec729 100644
--- a/src/quick/items/qquickborderimage.cpp
+++ b/src/quick/items/qquickborderimage.cpp
@@ -56,14 +56,14 @@ QT_BEGIN_NAMESPACE
 /*!
     \qmlclass BorderImage QQuickBorderImage
     \inqmlmodule QtQuick 2
-    \brief For specifying an image that can be used as a border
+    \brief Paints a border based on an image
     \inherits Item
     \ingroup qtquick-visual
 
-    The BorderImage element is used to create borders out of images by scaling or tiling
+    The BorderImage type is used to create borders out of images by scaling or tiling
     parts of each image.
 
-    A BorderImage element breaks a source image, specified using the \l url property,
+    A BorderImage breaks a source image, specified using the \l source property,
     into 9 regions, as shown below:
 
     \image declarative-scalegrid.png
@@ -95,7 +95,7 @@ QT_BEGIN_NAMESPACE
     \image qml-borderimage-normal-image.png
     \endfloat
 
-    An unscaled image is displayed using an Image element. The \l border property is
+    An unscaled image is displayed using an Image. The \l border property is
     used to determine the parts of the image that will lie inside the unscaled corner
     areas and the parts that will be stretched horizontally and vertically.
 
@@ -106,7 +106,7 @@ QT_BEGIN_NAMESPACE
     \image qml-borderimage-scaled.png
     \endfloat
 
-    A BorderImage element is used to display the image, and it is given a size that is
+    A BorderImage is used to display the image, and it is given a size that is
     larger than the original image. Since the \l horizontalTileMode property is set to
     \l{BorderImage::horizontalTileMode}{BorderImage.Stretch}, the parts of image in
     regions 2 and 8 are stretched horizontally. Since the \l verticalTileMode property
@@ -120,12 +120,12 @@ QT_BEGIN_NAMESPACE
     \image qml-borderimage-tiled.png
     \endfloat
 
-    Again, a large BorderImage element is used to display the image. With the
+    Again, a large BorderImage is used to display the image. With the
     \l horizontalTileMode property set to \l{BorderImage::horizontalTileMode}{BorderImage.Repeat},
     the parts of image in regions 2 and 8 are tiled so that they fill the space at the
-    top and bottom of the element. Similarly, the \l verticalTileMode property is set to
+    top and bottom of the item. Similarly, the \l verticalTileMode property is set to
     \l{BorderImage::verticalTileMode}{BorderImage.Repeat}, the parts of image in regions
-    4 and 6 are tiled so that they fill the space at the left and right of the element.
+    4 and 6 are tiled so that they fill the space at the left and right of the item.
 
     \snippet qml/borderimage/borderimage-tiled.qml tiled border image
 
diff --git a/src/quick/items/qquickcanvas.cpp b/src/quick/items/qquickcanvas.cpp
index e7134c1..de53e80 100644
--- a/src/quick/items/qquickcanvas.cpp
+++ b/src/quick/items/qquickcanvas.cpp
@@ -793,9 +793,9 @@ void QQuickCanvasPrivate::cleanup(QSGNode *n)
     \brief Creates a new top-level window
 
     The Window object creates a new top-level window for a QtQuick scene. It automatically sets up the
-    window for use with QtQuick 2.0 graphical elements.
+    window for use with QtQuick 2.0 graphical types.
 
-    To use this element, you will need to import the module with the following line:
+    To use this type, you will need to import the module with the following line:
     \code
     import QtQuick.Window 2.0
     \endcode
diff --git a/src/quick/items/qquickflickable.cpp b/src/quick/items/qquickflickable.cpp
index fadf59e..4a5df1d 100644
--- a/src/quick/items/qquickflickable.cpp
+++ b/src/quick/items/qquickflickable.cpp
@@ -589,7 +589,7 @@ is finished.
     \ingroup qtquick-input
     \ingroup qtquick-containers
 
-    \brief For specifying a surface that can be "flicked"
+    \brief Provides a surface that can be "flicked"
     \inherits Item
 
     The Flickable item places its children on a surface that can be dragged
diff --git a/src/quick/items/qquickflipable.cpp b/src/quick/items/qquickflipable.cpp
index 502b0aa..7557559 100644
--- a/src/quick/items/qquickflipable.cpp
+++ b/src/quick/items/qquickflipable.cpp
@@ -93,11 +93,11 @@ public:
     \inherits Item
     \ingroup qtquick-input
     \ingroup qtquick-containers
-    \brief For specifying a surface that can be flipped
+    \brief Provides a surface that can be flipped
 
     Flipable is an item that can be visibly "flipped" between its front and
-    back sides, like a card. It is used together with \l Rotation, \l State
-    and \l Transition elements to produce a flipping effect.
+    back sides, like a card. It may used together with \l Rotation, \l State
+    and \l Transition types to produce a flipping effect.
 
     The \l front and \l back properties are used to hold the items that are
     shown respectively on the front and back sides of the flipable item.
diff --git a/src/quick/items/qquickgridview.cpp b/src/quick/items/qquickgridview.cpp
index 666ee8e..7ca22b9 100644
--- a/src/quick/items/qquickgridview.cpp
+++ b/src/quick/items/qquickgridview.cpp
@@ -1139,7 +1139,7 @@ bool QQuickGridViewPrivate::flick(AxisData &data, qreal minExtent, qreal maxExte
     \inherits Flickable
     \brief For specifying a grid view of items provided by a model
 
-    A GridView displays data from models created from built-in QML elements like ListModel
+    A GridView displays data from models created from built-in QML types like ListModel
     and XmlListModel, or custom model classes defined in C++ that inherit from
     QAbstractListModel.
 
@@ -1163,8 +1163,8 @@ bool QQuickGridViewPrivate::flick(AxisData &data, qreal minExtent, qreal maxExte
     for more information about creating reusable components like this.
 
     Another component can display this model data in a GridView, as in the following
-    example, which creates a \c ContactModel component for its model, and a \l Column element
-    (containing \l Image and \l Text elements) for its delegate.
+    example, which creates a \c ContactModel component for its model, and a \l Column
+    (containing \l Image and \l Text items) for its delegate.
 
     \clearfloat
     \snippet qml/gridview/gridview.qml import
@@ -1345,10 +1345,10 @@ void QQuickGridView::setHighlightFollowsCurrentItem(bool autoHighlight)
     The index is exposed as an accessible \c index property.  Properties of the
     model are also available depending upon the type of \l {qmlmodels}{Data Model}.
 
-    The number of elements in the delegate has a direct effect on the
+    The number of objects and bindings in the delegate has a direct effect on the
     flicking performance of the view.  If at all possible, place functionality
     that is not needed for the normal display of the delegate in a \l Loader which
-    can load additional elements when needed.
+    can load additional components when needed.
 
     The GridView will layout the items based on the size of the root item
     in the delegate.
@@ -1541,7 +1541,7 @@ void QQuickGridView::setHighlightFollowsCurrentItem(bool autoHighlight)
 
     Setting this value can make scrolling the list smoother at the expense
     of additional memory usage.  It is not a substitute for creating efficient
-    delegates; the fewer elements in a delegate, the faster a view may be
+    delegates; the fewer objects and bindings in a delegate, the faster a view may be
     scrolled.
 */
 void QQuickGridView::setHighlightMoveDuration(int duration)
diff --git a/src/quick/items/qquickimage.cpp b/src/quick/items/qquickimage.cpp
index f4089be..141e643 100644
--- a/src/quick/items/qquickimage.cpp
+++ b/src/quick/items/qquickimage.cpp
@@ -96,25 +96,25 @@ QQuickImagePrivate::QQuickImagePrivate()
     \inqmlmodule QtQuick 2
     \ingroup qtquick-visual
     \inherits Item
-    \brief Displays an image in a declarative user interface
+    \brief Displays an image
 
-    The Image element is used to display images in a declarative user interface.
+    The Image type display an image.
 
     The source of the image is specified as a URL using the \l source property.
     Images can be supplied in any of the standard image formats supported by Qt,
     including bitmap formats such as PNG and JPEG, and vector graphics formats
-    such as SVG. If you need to display animated images, use the \l AnimatedImage
-    element.
+    such as SVG. If you need to display animated images, use \l AnimatedSprite
+    or \l AnimatedImage.
 
     If the \l{Item::width}{width} and \l{Item::height}{height} properties are not
-    specified, the Image element automatically uses the size of the loaded image.
-    By default, specifying the width and height of the element causes the image
+    specified, the Image automatically uses the size of the loaded image.
+    By default, specifying the width and height of the item causes the image
     to be scaled to that size. This behavior can be changed by setting the
     \l fillMode property, allowing the image to be stretched and tiled instead.
 
     \section1 Example Usage
 
-    The following example shows the simplest usage of the Image element.
+    The following example shows the simplest usage of the Image type.
 
     \snippet qml/image.qml document
 
@@ -135,7 +135,7 @@ QQuickImagePrivate::QQuickImagePrivate()
     automatically loaded asynchronously, and the \l progress and \l status properties
     are updated as appropriate.
 
-    Images are cached and shared internally, so if several Image elements have the same \l source,
+    Images are cached and shared internally, so if several Image items have the same \l source,
     only one copy of the image will be loaded.
 
     \b Note: Images are often the greatest user of memory in QML user interfaces.  It is recommended
@@ -265,7 +265,7 @@ void QQuickImagePrivate::setImage(const QImage &image)
 
     \endtable
 
-    Note that \c clip is \c false by default which means that the element might
+    Note that \c clip is \c false by default which means that the item might
     paint outside its bounding rectangle even if the fillMode is set to \c PreserveAspectCrop.
 
     \sa {declarative/imageelements/image}{Image example}
@@ -296,7 +296,7 @@ void QQuickImage::setFillMode(FillMode mode)
     In most cases it is the same as \c width and \c height, but when using a
     \c fillMode \c PreserveAspectFit or \c fillMode \c PreserveAspectCrop
     \c paintedWidth or \c paintedHeight can be smaller or larger than
-    \c width and \c height of the Image element.
+    \c width and \c height of the Image item.
 */
 qreal QQuickImage::paintedWidth() const
 {
diff --git a/src/quick/items/qquickitem.cpp b/src/quick/items/qquickitem.cpp
index a41e451..0d5518c 100644
--- a/src/quick/items/qquickitem.cpp
+++ b/src/quick/items/qquickitem.cpp
@@ -132,7 +132,7 @@ void QQuickItemPrivate::registerAccessorProperties()
     \ingroup qtquick-visual-transforms
     \brief For specifying advanced transformations on Items
 
-    The Transform element is a base type which cannot be instantiated directly.
+    The Transform type is a base type which cannot be instantiated directly.
     The following concrete Transform types are available:
 
     \list
@@ -141,10 +141,10 @@ void QQuickItemPrivate::registerAccessorProperties()
     \li \l Translate
     \endlist
 
-    The Transform elements let you create and control advanced transformations that can be configured
+    The Transform types let you create and control advanced transformations that can be configured
     independently using specialized properties.
 
-    You can assign any number of Transform elements to an \l Item. Each Transform is applied in order,
+    You can assign any number of Transforms to an \l Item. Each Transform is applied in order,
     one at a time.
 */
 
@@ -156,7 +156,7 @@ void QQuickItemPrivate::registerAccessorProperties()
 
     The Translate object provides independent control over position in addition to the Item's x and y properties.
 
-    The following example moves the Y axis of the \l Rectangle elements while still allowing the \l Row element
+    The following example moves the Y axis of the \l Rectangle items while still allowing the \l Row
     to lay the items out as if they had not been transformed:
     \qml
     import QtQuick 2.0
@@ -196,7 +196,7 @@ void QQuickItemPrivate::registerAccessorProperties()
     \ingroup qtquick-visual-transforms
     \brief Provides a way to scale an Item
 
-    The Scale element gives more control over scaling than using \l Item's \l{Item::scale}{scale} property. Specifically,
+    The Scale type gives more control over scaling than using \l Item's \l{Item::scale}{scale} property. Specifically,
     it allows a different scale for the x and y axes, and allows the scale to be relative to an
     arbitrary point.
 
@@ -1468,14 +1468,14 @@ QQuickKeysAttached *QQuickKeysAttached::qmlAttachedProperties(QObject *obj)
     \brief Property used to mirror layout behavior
 
     The LayoutMirroring attached property is used to horizontally mirror \l {anchor-layout}{Item anchors},
-    \l{Using QML Positioner and Repeater Items}{positioner} elements (such as \l Row and \l Grid)
+    \l{Using QML Positioner and Repeater Items}{positioner} types (such as \l Row and \l Grid)
     and views (such as \l GridView and horizontal \l ListView). Mirroring is a visual change: left
-    anchors become right anchors, and positioner elements like \l Grid and \l Row reverse the
+    anchors become right anchors, and positioner types like \l Grid and \l Row reverse the
     horizontal layout of child items.
 
     Mirroring is enabled for an item by setting the \l enabled property to true. By default, this
     only affects the item itself; setting the \l childrenInherit property to true propagates the mirroring
-    behavior to all child elements as well. If the \c LayoutMirroring attached property has not been defined
+    behavior to all child items as well. If the \c LayoutMirroring attached property has not been defined
     for an item, mirroring is not enabled.
 
     The following example shows mirroring in action. The \l Row below is specified as being anchored
@@ -1508,8 +1508,8 @@ QQuickKeysAttached *QQuickKeysAttached::qmlAttachedProperties(QObject *obj)
 
     This property holds whether the item's layout is mirrored horizontally. Setting this to true
     horizontally reverses \l {anchor-layout}{anchor} settings such that left anchors become right,
-    and right anchors become left. For \l{Using QML Positioner and Repeater Items}{positioner} elements
-    (such as \l Row and \l Grid) and view elements (such as \l {GridView}{GridView} and \l {ListView}{ListView})
+    and right anchors become left. For \l{Using QML Positioner and Repeater Items}{positioner} types
+    (such as \l Row and \l Grid) and view types (such as \l {GridView}{GridView} and \l {ListView}{ListView})
     this also mirrors the horizontal layout direction of the item.
 
     The default value is false.
@@ -1755,7 +1755,7 @@ void QQuickItemPrivate::updateSubFocusItem(QQuickItem *scope, bool focus)
 
     \section1 Key Handling
 
-    Key handling is available to all Item-based visual elements via the \l {Keys}{Keys}
+    Key handling is available to all Item-based visual types via the \l {Keys}{Keys}
     attached property.  The \e Keys attached property provides basic handlers such
     as \l {Keys::onPressed}{onPressed} and \l {Keys::onReleased}{onReleased},
     as well as handlers for specific keys, such as
@@ -1936,7 +1936,7 @@ QQuickItem::~QQuickItem()
     The default transform origin is \c Item.Center.
 
     To set an arbitrary transform origin point use the \l Scale or \l Rotation
-    transform elements.
+    transform types.
 */
 
 /*!
@@ -4506,7 +4506,7 @@ void QQuickItemPrivate::itemChange(QQuickItem::ItemChange change, const QQuickIt
     \property QQuickItem::smooth
     \brief Specifies whether the item is smoothed or not
 
-    Primarily used in image based elements to decide if the item should use smooth
+    Primarily used in image based items to decide if the item should use smooth
     sampling or not. Smooth sampling is performed using linear interpolation, while
     non-smooth is performed using nearest neighbor.
 
@@ -4752,7 +4752,7 @@ qreal QQuickItem::implicitWidth() const
 
     Defines the natural width or height of the Item if no \l width or \l height is specified.
 
-    The default implicit size for most items is 0x0, however some elements have an inherent
+    The default implicit size for most items is 0x0, however some items have an inherent
     implicit size which cannot be overridden, e.g. Image, Text.
 
     Setting the implicit size is useful for defining components that have a preferred size
diff --git a/src/quick/items/qquickitemanimation.cpp b/src/quick/items/qquickitemanimation.cpp
index 9c8dae2..dd8254d 100644
--- a/src/quick/items/qquickitemanimation.cpp
+++ b/src/quick/items/qquickitemanimation.cpp
@@ -85,7 +85,7 @@ QT_BEGIN_NAMESPACE
     This can be overridden by setting a specific target item using the
     \l target property.
 
-    Like any other animation element, a ParentAnimation can be applied in a
+    Like any other animation type, a ParentAnimation can be applied in a
     number of ways, including transitions, behaviors and property value
     sources. The \l {QML Animation and Transitions} documentation shows a
     variety of methods for creating animations.
@@ -432,7 +432,7 @@ QAbstractAnimationJob* QQuickParentAnimation::transition(QQuickStateActions &act
     This can be overridden by setting a specific target item using the
     \l target property.
 
-    Like any other animation element, an AnchorAnimation can be applied in a
+    Like any other animation type, an AnchorAnimation can be applied in a
     number of ways, including transitions, behaviors and property value
     sources. The \l {QML Animation and Transitions} documentation shows a
     variety of methods for creating animations.
diff --git a/src/quick/items/qquickitemviewtransition.cpp b/src/quick/items/qquickitemviewtransition.cpp
index 01a1324..bfa68eb 100644
--- a/src/quick/items/qquickitemviewtransition.cpp
+++ b/src/quick/items/qquickitemviewtransition.cpp
@@ -589,7 +589,7 @@ QQuickViewTransitionAttached::QQuickViewTransitionAttached(QObject *parent)
        generic displaced transition if specified)
     \endlist
 
-    For the \l Row, \l Column, \l Grid and \l Flow positioner elements, which operate with collections of child
+    For the \l Row, \l Column, \l Grid and \l Flow positioner types, which operate with collections of child
     items rather than data models, the following properties are used instead:
 
     \list
@@ -625,7 +625,7 @@ QQuickViewTransitionAttached::QQuickViewTransitionAttached(QObject *parent)
     \li ViewTransition.targetItems - the target items themselves
     \endlist
 
-    (Note that for the \l Row, \l Column, \l Grid and \l Flow positioner elements, the \c move transition only
+    (Note that for the \l Row, \l Column, \l Grid and \l Flow positioner types, the \c move transition only
     provides these two additional details when the transition is triggered by the addition of items
     to a positioner.)
 
diff --git a/src/quick/items/qquicklistview.cpp b/src/quick/items/qquicklistview.cpp
index 80b4cb5..547b033 100644
--- a/src/quick/items/qquicklistview.cpp
+++ b/src/quick/items/qquicklistview.cpp
@@ -1655,7 +1655,7 @@ bool QQuickListViewPrivate::flick(AxisData &data, qreal minExtent, qreal maxExte
     \inherits Flickable
     \brief Provides a list view of items provided by a model
 
-    A ListView displays data from models created from built-in QML elements like ListModel
+    A ListView displays data from models created from built-in QML types like ListModel
     and XmlListModel, or custom model classes defined in C++ that inherit from
     QAbstractListModel.
 
@@ -1679,7 +1679,7 @@ bool QQuickListViewPrivate::flick(AxisData &data, qreal minExtent, qreal maxExte
 
     \image listview-simple.png
 
-    Here, the ListView creates a \c ContactModel component for its model, and a \l Text element
+    Here, the ListView creates a \c ContactModel component for its model, and a \l Text item
     for its delegate. The view will create a new \l Text component for each item in the model. Notice
     the delegate is able to access the model's \c name and \c number data directly.
 
@@ -1854,10 +1854,10 @@ QQuickListView::~QQuickListView()
     The index is exposed as an accessible \c index property.  Properties of the
     model are also available depending upon the type of \l {qmlmodels}{Data Model}.
 
-    The number of elements in the delegate has a direct effect on the
+    The number of objects and bindings in the delegate has a direct effect on the
     flicking performance of the view.  If at all possible, place functionality
     that is not needed for the normal display of the delegate in a \l Loader which
-    can load additional elements when needed.
+    can load additional components when needed.
 
     The ListView will lay out the items based on the size of the root item
     in the delegate.
@@ -2125,7 +2125,7 @@ void QQuickListView::setOrientation(QQuickListView::Orientation orientation)
 
     Setting this value can improve the smoothness of scrolling behavior at the expense
     of additional memory usage.  It is not a substitute for creating efficient
-    delegates; the fewer elements in a delegate, the faster a view can be
+    delegates; the fewer objects and bindings in a delegate, the faster a view can be
     scrolled.
 */
 
diff --git a/src/quick/items/qquickloader.cpp b/src/quick/items/qquickloader.cpp
index bd927a1..233e92e 100644
--- a/src/quick/items/qquickloader.cpp
+++ b/src/quick/items/qquickloader.cpp
@@ -221,7 +221,7 @@ qreal QQuickLoaderPrivate::getImplicitHeight() const
     \section2 Receiving signals from loaded objects
 
     Any signals emitted from the loaded object can be received using the
-    \l Connections element. For example, the following \c application.qml
+    \l Connections type. For example, the following \c application.qml
     loads \c MyItem.qml, and is able to receive the \c message signal from
     the loaded item through a \l Connections object:
 
diff --git a/src/quick/items/qquickmousearea.cpp b/src/quick/items/qquickmousearea.cpp
index 59da22b..88cf547 100644
--- a/src/quick/items/qquickmousearea.cpp
+++ b/src/quick/items/qquickmousearea.cpp
@@ -525,7 +525,7 @@ bool QQuickMouseAreaPrivate::propagateHelper(QQuickMouseEvent *ev, QQuickItem *i
     \qmlsignal QtQuick2::MouseArea::onCanceled()
 
     This handler is called when mouse events have been canceled, either because an event was not accepted, or
-    because another element stole the mouse event handling.
+    because another item stole the mouse event handling.
 
     This signal is for advanced use: it is useful when there is more than one MouseArea
     that is handling input, or when there is a MouseArea inside a \l Flickable. In the latter
@@ -616,10 +616,10 @@ void QQuickMouseArea::setEnabled(bool a)
     If a MouseArea is placed within an item that filters child mouse
     events, such as Flickable, the mouse
     events may be stolen from the MouseArea if a gesture is recognized
-    by the parent element, e.g. a flick gesture.  If preventStealing is
-    set to true, no element will steal the mouse events.
+    by the parent item, e.g. a flick gesture.  If preventStealing is
+    set to true, no item will steal the mouse events.
 
-    Note that setting preventStealing to true once an element has started
+    Note that setting preventStealing to true once an item has started
     stealing events will have no effect until the next press event.
 
     By default this property is false.
diff --git a/src/quick/items/qquickmultipointtoucharea.cpp b/src/quick/items/qquickmultipointtoucharea.cpp
index f4e49bd..0348c25 100644
--- a/src/quick/items/qquickmultipointtoucharea.cpp
+++ b/src/quick/items/qquickmultipointtoucharea.cpp
@@ -58,7 +58,7 @@ DEFINE_BOOL_CONFIG_OPTION(qmlVisualTouchDebugging, QML_VISUAL_TOUCH_DEBUGGING)
     \ingroup qtquick-input-events
     \brief Describes a touch point in a MultiPointTouchArea
 
-    The TouchPoint element contains information about a touch point, such as the current
+    The TouchPoint type contains information about a touch point, such as the current
     position, pressure, and area.
 */
 
@@ -271,7 +271,7 @@ void QQuickTouchPoint::setSceneY(qreal sceneY)
 /*!
     \qmlsignal QtQuick2::MultiPointTouchArea::onCanceled(list<TouchPoint> touchPoints)
 
-    This handler is called when new touch events have been canceled because another element stole the touch event handling.
+    This handler is called when new touch events have been canceled because another item stole the touch event handling.
 
     This signal is for advanced use: it is useful when there is more than one MultiPointTouchArea
     that is handling input, or when there is a MultiPointTouchArea inside a \l Flickable. In the latter
diff --git a/src/quick/items/qquickpathview.cpp b/src/quick/items/qquickpathview.cpp
index afa988a..52e200d 100644
--- a/src/quick/items/qquickpathview.cpp
+++ b/src/quick/items/qquickpathview.cpp
@@ -458,7 +458,7 @@ void QQuickPathViewPrivate::setDragging(bool d)
     \inherits Item
     \brief Lays out model-provided items on a path
 
-    A PathView displays data from models created from built-in QML elements like ListModel
+    A PathView displays data from models created from built-in QML types like ListModel
     and XmlListModel, or custom model classes defined in C++ that inherit from
     QAbstractListModel.
 
@@ -577,7 +577,7 @@ QQuickPathView::~QQuickPathView()
 
     The model provides a set of data that is used to create the items for the view.
     For large or dynamic datasets the model is usually provided by a C++ model object.
-    Models can also be created directly in QML, using the ListModel element.
+    Models can also be created directly in QML, using the ListModel type.
 
     \sa {qmlmodels}{Data Models}
 */
@@ -1158,10 +1158,10 @@ bool QQuickPathView::isDragging() const
     The index is exposed as an accessible \c index property.  Properties of the
     model are also available depending upon the type of \l {qmlmodels}{Data Model}.
 
-    The number of elements in the delegate has a direct effect on the
+    The number of objects and bindings in the delegate has a direct effect on the
     flicking performance of the view when pathItemCount is specified.  If at all possible, place functionality
     that is not needed for the normal display of the delegate in a \l Loader which
-    can load additional elements when needed.
+    can load additional components when needed.
 
     Note that the PathView will layout the items based on the size of the root
     item in the delegate.
diff --git a/src/quick/items/qquickpincharea.cpp b/src/quick/items/qquickpincharea.cpp
index f589904..848e887 100644
--- a/src/quick/items/qquickpincharea.cpp
+++ b/src/quick/items/qquickpincharea.cpp
@@ -57,7 +57,7 @@ QT_BEGIN_NAMESPACE
     \ingroup qtquick-input-events
     \brief For specifying information about a pinch event
 
-    \b {The PinchEvent element was added in QtQuick 1.1}
+    \b {The PinchEvent type was added in QtQuick 1.1}
 
     The \c center, \c startCenter, \c previousCenter properties provide the center position between the two touch points.
 
@@ -167,7 +167,7 @@ QQuickPinchAreaPrivate::~QQuickPinchAreaPrivate()
     \inherits Item
     \brief Enables simple pinch gesture handling
 
-    \b {The PinchArea element was added in QtQuick 1.1}
+    \b {The PinchArea type was added in QtQuick 1.1}
 
     A PinchArea is an invisible item that is typically used in conjunction with
     a visible item in order to provide pinch gesture handling for that item.
@@ -179,7 +179,7 @@ QQuickPinchAreaPrivate::~QQuickPinchAreaPrivate()
     PinchArea can be used in two ways:
 
     \list
-    \li setting a \c pinch.target to provide automatic interaction with an element
+    \li setting a \c pinch.target to provide automatic interaction with an item
     \li using the onPinchStarted, onPinchUpdated and onPinchFinished handlers
     \endlist
 
diff --git a/src/quick/items/qquickpositioners.cpp b/src/quick/items/qquickpositioners.cpp
index 50af097..fa0d194 100644
--- a/src/quick/items/qquickpositioners.cpp
+++ b/src/quick/items/qquickpositioners.cpp
@@ -498,7 +498,7 @@ void QQuickBasePositioner::updateAttachedProperties(QQuickPositionerAttached *sp
     \ingroup qtquick-positioners
     \brief Provides attached properties that contain details on where an item exists in a positioner
 
-    Positioner is an attached property that is attached to the top-level child item within a
+    An object of type Positioner is attached to the top-level child item within a
     Column, Row, Flow or Grid. It provides properties that allow a child item to determine
     where it exists within the layout of its parent Column, Row, Flow or Grid.
 
@@ -581,7 +581,7 @@ void QQuickPositionerAttached::setIsLastItem(bool isLastItem)
     \ingroup qtquick-positioners
     \brief Positions its children in a column
 
-    Column is an element that positions its child items along a single column.
+    Column is a type that positions its child items along a single column.
     It can be used as a convenient way to vertically position a series of items without
     using \l {Anchor-based Layout in QML}{anchors}.
 
@@ -605,7 +605,7 @@ void QQuickPositionerAttached::setIsLastItem(bool isLastItem)
     Note that items in a Column can use the \l Positioner attached property to access
     more information about its position within the Column.
 
-    For more information on using Column and other related positioner-type elements, see
+    For more information on using Column and other related positioner-types, see
     \l{Item Layouts}.
 
 
@@ -749,7 +749,7 @@ void QQuickColumn::reportConflictingAnchors()
     \ingroup qtquick-positioners
     \brief Positions its children in a row
 
-    Row is an element that positions its child items along a single row.
+    Row is a type that positions its child items along a single row.
     It can be used as a convenient way to horizontally position a series of items without
     using \l {Anchor-based Layout in QML}{anchors}.
 
@@ -773,7 +773,7 @@ void QQuickColumn::reportConflictingAnchors()
     Note that items in a Row can use the \l Positioner attached property to access
     more information about its position within the Row.
 
-    For more information on using Row and other related positioner-type elements, see
+    For more information on using Row and other related positioner-types, see
     \l{Item Layouts}.
 
 
@@ -980,7 +980,7 @@ void QQuickRow::reportConflictingAnchors()
     \ingroup qtquick-positioners
     \brief Positions its children in grid formation
 
-    Grid is an element that positions its child items in grid formation.
+    Grid is a type that positions its child items in grid formation.
 
     A Grid creates a grid of cells that is large enough to hold all of its
     child items, and places these items in the cells from left to right
@@ -1005,7 +1005,7 @@ void QQuickRow::reportConflictingAnchors()
     item within a Grid should not set its \l {Item::x}{x} or \l {Item::y}{y} positions
     or anchor itself with any of the \l {Item::anchors}{anchor} properties.
 
-    For more information on using Grid and other related positioner-type elements, see
+    For more information on using Grid and other related positioner-types, see
     \l{Item Layouts}.
 
 
@@ -1439,7 +1439,7 @@ void QQuickGrid::reportConflictingAnchors()
     item within a Flow should not set its \l {Item::x}{x} or \l {Item::y}{y} positions
     or anchor itself with any of the \l {Item::anchors}{anchor} properties.
 
-    For more information on using Flow and other related positioner-type elements, see
+    For more information on using Flow and other related positioner-types, see
     \l{Item Layouts}.
 
   \sa Column, Row, Grid, Positioner, {qml/positioners}{Positioners example}
diff --git a/src/quick/items/qquickrectangle.cpp b/src/quick/items/qquickrectangle.cpp
index ec300e8..99ad7b7 100644
--- a/src/quick/items/qquickrectangle.cpp
+++ b/src/quick/items/qquickrectangle.cpp
@@ -195,7 +195,7 @@ void QQuickGradientStop::updateGradient()
     A gradient without any gradient stops is rendered as a solid white fill.
 
     Note that this item is not a visual representation of a gradient. To display a
-    gradient, use a visual element (like \l Rectangle) which supports the use
+    gradient, use a visual item (like \l Rectangle) which supports the use
     of gradients.
 
     \section1 Example Usage
@@ -237,7 +237,7 @@ void QQuickGradientStop::updateGradient()
 
     By default, this property contains an empty list.
 
-    To set the gradient stops, define them as children of the Gradient element.
+    To set the gradient stops, define them as children of the Gradient.
 */
 QQuickGradient::QQuickGradient(QObject *parent)
 : QObject(parent)
@@ -265,20 +265,21 @@ int QQuickRectanglePrivate::doUpdateSlotIdx = -1;
     \inqmlmodule QtQuick 2
     \inherits Item
     \ingroup qtquick-visual
-    \brief Describes a filled rectangle with an optional border
+    \brief Paints a filled rectangle with an optional border
 
-    Rectangle items are used to fill areas with solid color or gradients, and are
-    often used to hold other items.
+    Rectangle items are used to fill areas with solid color or gradients, and/or
+    to provide a rectangular border.
 
     \section1 Appearance
 
     Each Rectangle item is painted using either a solid fill color, specified using
-    the \l color property, or a gradient, defined using a Gradient element and set
+    the \l color property, or a gradient, defined using a Gradient type and set
     using the \l gradient property. If both a color and a gradient are specified,
     the gradient is used.
 
     You can add an optional border to a rectangle with its own color and thickness
-    by setting the \l border.color and \l border.width properties.
+    by setting the \l border.color and \l border.width properties.  Set the color
+    to "transparent" to paint a border without a fill color.
 
     You can also create rounded rectangles using the \l radius property. Since this
     introduces curved edges to the corners of a rectangle, it may be appropriate to
diff --git a/src/quick/items/qquickrepeater.cpp b/src/quick/items/qquickrepeater.cpp
index c688fad..3160951 100644
--- a/src/quick/items/qquickrepeater.cpp
+++ b/src/quick/items/qquickrepeater.cpp
@@ -67,13 +67,13 @@ QQuickRepeaterPrivate::~QQuickRepeaterPrivate()
     \ingroup qtquick-models
     \ingroup qtquick-positioning
     \inherits Item
-    \brief Specifies how to repeately create an Item-based component using a model
+    \brief Instantiates a number of Item-based components using a provided model
 
-    The Repeater element is used to create a large number of
-    similar items. Like other view elements, a Repeater has a \l model and a \l delegate:
+    The Repeater type is used to create a large number of
+    similar items. Like other view types, a Repeater has a \l model and a \l delegate:
     for each entry in the model, the delegate is instantiated
     in a context seeded with data from the model. A Repeater item is usually
-    enclosed in a positioner element such as \l Row or \l Column to visually
+    enclosed in a positioner type such as \l Row or \l Column to visually
     position the multiple delegate items created by the Repeater.
 
     The following Repeater creates three instances of a \l Rectangle item within
@@ -107,10 +107,10 @@ QQuickRepeaterPrivate::~QQuickRepeaterPrivate()
 
     \section2 Considerations when using Repeater
 
-    The Repeater element creates all of its delegate items when the repeater is first
+    The Repeater type creates all of its delegate items when the repeater is first
     created. This can be inefficient if there are a large number of delegate items and
     not all of the items are required to be visible at the same time. If this is the case,
-    consider using other view elements like ListView (which only creates delegate items
+    consider using other view types like ListView (which only creates delegate items
     when they are scrolled into view) or use the \l {Dynamic Object Creation} methods to
     create items as they are required.
 
diff --git a/src/quick/items/qquickscreen.cpp b/src/quick/items/qquickscreen.cpp
index aef40df..a55cb1f 100644
--- a/src/quick/items/qquickscreen.cpp
+++ b/src/quick/items/qquickscreen.cpp
@@ -55,15 +55,15 @@ QT_BEGIN_NAMESPACE
     \ingroup qtquick-visual-utility
     \brief The Screen attached object provides information about the Screen an Item is displayed on.
 
-    The Screen attached object is only valid inside Item or Item derived elements, after component completion.
-    Inside these elements it refers to the screen that the element is currently being displayed on.
+    The Screen attached object is only valid inside Item or Item derived types, after component completion.
+    Inside these items it refers to the screen that the item is currently being displayed on.
 
-    To use this element, you will need to import the module with the following line:
+    To use this type, you will need to import the module with the following line:
     \code
     import QtQuick.Window 2.0
     \endcode
 
-    Note that the Screen element is not valid at Component.onCompleted, because the Item has not been displayed on
+    Note that the Screen type is not valid at Component.onCompleted, because the Item has not been displayed on
     a screen by this time.
 
     Restricting this import will allow you to have a QML environment without access to window system features.
diff --git a/src/quick/items/qquickshadereffect.cpp b/src/quick/items/qquickshadereffect.cpp
index ebc7d8f..6695c60 100644
--- a/src/quick/items/qquickshadereffect.cpp
+++ b/src/quick/items/qquickshadereffect.cpp
@@ -539,7 +539,7 @@ void QQuickShaderEffectCommon::propertyChanged(QQuickItem *item, int mappedId,
     \ingroup qtquick-effects
     \brief Applies custom shaders to a rectangle
 
-    The ShaderEffect element applies a custom OpenGL
+    The ShaderEffect type applies a custom OpenGL
     \l{vertexShader}{vertex} and \l{fragmentShader}{fragment} shader to a
     rectangle. It allows you to write effects such as drop shadow, blur,
     colorize and page curl directly in QML.
@@ -795,7 +795,7 @@ void QQuickShaderEffect::setMesh(const QVariant &mesh)
 /*!
     \qmlproperty enumeration QtQuick2::ShaderEffect::cullMode
 
-    This property defines which sides of the element should be visible.
+    This property defines which sides of the item should be visible.
 
     \list
     \li ShaderEffect.NoCulling - Both sides are visible
diff --git a/src/quick/items/qquickshadereffectsource.cpp b/src/quick/items/qquickshadereffectsource.cpp
index 20b9190..b221919 100644
--- a/src/quick/items/qquickshadereffectsource.cpp
+++ b/src/quick/items/qquickshadereffectsource.cpp
@@ -461,24 +461,24 @@ QImage QQuickShaderEffectTexture::toImage() const
     \since 5.0
     \inherits Item
     \ingroup qtquick-effects
-    \brief Renders a QML element into a texture and displays it
+    \brief Renders a QtQuick item into a texture and displays it
 
-    The ShaderEffectSource element renders \l sourceItem into a texture and
+    The ShaderEffectSource type renders \l sourceItem into a texture and
     displays it in the scene. \l sourceItem is drawn into the texture as though
-    it was a fully opaque root element. Thus \l sourceItem itself can be
+    it was a fully opaque root item. Thus \l sourceItem itself can be
     invisible, but still appear in the texture.
 
     ShaderEffectSource can be used as:
     \list
     \li a texture source in a \l ShaderEffect.
-       This allows you to apply custom shader effects to any QML element.
-    \li a cache for a complex element.
-       The complex element can be rendered once into the texture, which can
-       then be animated freely without the need to render the complex element
+       This allows you to apply custom shader effects to any QtQuick item.
+    \li a cache for a complex item.
+       The complex item can be rendered once into the texture, which can
+       then be animated freely without the need to render the complex item
        again every frame.
     \li an opacity layer.
-       ShaderEffectSource allows you to apply an opacity to elements as a group
-       rather than each element individually.
+       ShaderEffectSource allows you to apply an opacity to items as a group
+       rather than each item individually.
     \endlist
 
     \table
@@ -513,7 +513,7 @@ QImage QQuickShaderEffectTexture::toImage() const
     \endrow
     \endtable
 
-    The ShaderEffectSource element does not redirect any mouse or keyboard
+    The ShaderEffectSource type does not redirect any mouse or keyboard
     input to \l sourceItem. If you hide the \l sourceItem by setting
     \l{Item::visible}{visible} to false or \l{Item::opacity}{opacity} to zero,
     it will no longer react to input. In cases where the ShaderEffectSource is
@@ -611,7 +611,7 @@ QSGTextureProvider *QQuickShaderEffectSource::textureProvider() const
     \qmlproperty enumeration ShaderEffectSource::wrapMode
 
     This property defines the OpenGL wrap modes associated with the texture.
-    Modifying this property makes most sense when the element is used as a
+    Modifying this property makes most sense when the item is used as a
     source texture of a \l ShaderEffect.
 
     \list
@@ -642,7 +642,7 @@ void QQuickShaderEffectSource::setWrapMode(WrapMode mode)
 /*!
     \qmlproperty Item ShaderEffectSource::sourceItem
 
-    This property holds the element to be rendered into the texture.
+    This property holds the item to be rendered into the texture.
     Setting this to null while \l live is true, will release the texture
     resources.
 */
@@ -751,7 +751,7 @@ void QQuickShaderEffectSource::setTextureSize(const QSize &size)
     \qmlproperty enumeration ShaderEffectSource::format
 
     This property defines the internal OpenGL format of the texture.
-    Modifying this property makes most sense when the element is used as a
+    Modifying this property makes most sense when the item is used as a
     source texture of a \l ShaderEffect. Depending on the OpenGL
     implementation, this property might allow you to save some texture memory.
 
@@ -783,7 +783,7 @@ void QQuickShaderEffectSource::setFormat(QQuickShaderEffectSource::Format format
 
     If this property is true, the texture is updated whenever the
     \l sourceItem updates. Otherwise, it will be a frozen image, even if
-    \l sourceItem is assigned a new element. The property is true by default.
+    \l sourceItem is assigned a new item. The property is true by default.
 */
 
 bool QQuickShaderEffectSource::live() const
diff --git a/src/quick/items/qquickspritesequence.cpp b/src/quick/items/qquickspritesequence.cpp
index 619092c..def6963 100644
--- a/src/quick/items/qquickspritesequence.cpp
+++ b/src/quick/items/qquickspritesequence.cpp
@@ -214,7 +214,7 @@ struct SpriteVertices {
     \brief Draws a sprite animation
 
     SpriteSequence renders and controls a list of animations defined
-    by \l Sprite elements.
+    by \l Sprite types.
 
     For full details, see the \l{Sprite Animation} overview.
 */
@@ -259,7 +259,7 @@ struct SpriteVertices {
 /*!
     \qmlproperty list<Sprite> QtQuick2::SpriteSequence::sprites
 
-    The sprite or sprites to draw. Sprites will be scaled to the size of this element.
+    The sprite or sprites to draw. Sprites will be scaled to the size of this item.
 */
 
 //TODO: Implicitly size element to size of first sprite?
diff --git a/src/quick/items/qquickstateoperations.cpp b/src/quick/items/qquickstateoperations.cpp
index 7a28689..47e4087 100644
--- a/src/quick/items/qquickstateoperations.cpp
+++ b/src/quick/items/qquickstateoperations.cpp
@@ -563,7 +563,7 @@ void QQuickParentChange::rewind()
     \ingroup qtquick-states
     \brief Specifies how to change the anchors of an item in a state
 
-    The AnchorChanges element is used to modify the anchors of an item in a \l State.
+    The AnchorChanges type is used to modify the anchors of an item in a \l State.
 
     AnchorChanges cannot be used to modify the margins on an item. For this, use
     PropertyChanges intead.
diff --git a/src/quick/items/qquicktext.cpp b/src/quick/items/qquicktext.cpp
index d2db178..fd1fc5e 100644
--- a/src/quick/items/qquicktext.cpp
+++ b/src/quick/items/qquicktext.cpp
@@ -1310,7 +1310,7 @@ QQuickText::~QQuickText()
     \li height
     \endlist
 
-    For example, this will move the first 5 lines of a text element by 100 pixels to the right:
+    For example, this will move the first 5 lines of a Text item by 100 pixels to the right:
     \code
     onLineLaidOut: {
         if (line.number < 5) {
@@ -1901,7 +1901,7 @@ void QQuickText::resetMaximumLineCount()
     \li Text.RichText
     \endlist
 
-    If the text format is \c Text.AutoText the text element
+    If the text format is \c Text.AutoText the Text item
     will automatically determine whether the text should be treated as
     styled text.  This determination is made using Qt::mightBeRichText()
     which uses a fast and therefore simple heuristic. It mainly checks
@@ -2050,7 +2050,7 @@ void QQuickText::setElideMode(QQuickText::TextElideMode mode)
     \row \li http://qt-project.org/content/index.html \li /images/logo.png \li http://qt-project.org/images/logo.png
     \endtable
 
-    By default is the url of the Text element.
+    The default value is the url of the QML file instantiating the Text item.
 */
 
 QUrl QQuickText::baseUrl() const
diff --git a/src/quick/items/qquicktextedit.cpp b/src/quick/items/qquicktextedit.cpp
index 38a510e..7159410 100644
--- a/src/quick/items/qquicktextedit.cpp
+++ b/src/quick/items/qquicktextedit.cpp
@@ -96,7 +96,7 @@ TextEdit {
 
     \snippet qml/texteditor.qml 0
 
-    A particular look-and-feel might use smooth scrolling (eg. using SmoothedFollow), might have a visible
+    A particular look-and-feel might use smooth scrolling (eg. using SmoothedAnimation), might have a visible
     scrollbar, or a scrollbar that fades in to show location, etc.
 
     Clipboard support is provided by the cut(), copy(), and paste() functions, and the selection can
@@ -738,7 +738,7 @@ qreal QQuickTextEdit::contentHeight() const
     This property specifies a base URL which is used to resolve relative URLs
     within the text.
 
-    By default is the url of the TextEdit element.
+    The default value is the url of the QML file instantiating the TextEdit item.
 */
 
 QUrl QQuickTextEdit::baseUrl() const
diff --git a/src/quick/items/qquicktextinput.cpp b/src/quick/items/qquicktextinput.cpp
index 80ee48f..16adcd3 100644
--- a/src/quick/items/qquicktextinput.cpp
+++ b/src/quick/items/qquicktextinput.cpp
@@ -73,7 +73,7 @@ DEFINE_BOOL_CONFIG_OPTION(qmlDisableDistanceField, QML_DISABLE_DISTANCEFIELD)
     \inherits Item
     \brief Displays an editable line of text
 
-    The TextInput element displays a single line of editable plain text.
+    The TextInput type displays a single line of editable plain text.
 
     TextInput is used to accept a line of text input. Input constraints
     can be placed on a TextInput item (for example, through a \l validator or \l inputMask),
@@ -683,7 +683,7 @@ void QQuickTextInput::setMaxLength(int ml)
     forward keys to it and you desire it to look active when this happens
     (but without actually giving it active focus).
 
-    It should not be set directly on the element, like in the below QML,
+    It should not be set directly on the item, like in the below QML,
     as the specified value will be overridden an lost on focus changes.
 
     \code
@@ -884,7 +884,7 @@ void QQuickTextInput::setAutoScroll(bool b)
     \ingroup qtquick-text-utility
     \brief Defines a validator for integer values
 
-    This element provides a validator for integer values.
+    The IntValidator type provides a validator for integer values.
 
     If no \l locale is set IntValidator uses the \l {QLocale::setDefault()}{default locale} to
     interpret the number and will accept locale specific digits, group separators, and positive
@@ -947,7 +947,7 @@ void QQuickIntValidator::resetLocaleName()
     \ingroup qtquick-text-utility
     \brief Defines a validator for non-integer numbers
 
-    This element provides a validator for non-integer numbers.
+    The DoubleValidator type provides a validator for non-integer numbers.
 
     Input is accepted if it contains a double that is within the valid range
     and is in the  correct format.
@@ -1040,7 +1040,7 @@ void QQuickDoubleValidator::resetLocaleName()
     \ingroup qtquick-text-utility
     \brief Provides a string validator
 
-    This element provides a validator, which counts as valid any string which
+    The RegExpValidator type provides a validator, which counts as valid any string which
     matches a specified regular expression.
 */
 /*!
diff --git a/src/quick/items/qquickvisualdatamodel.cpp b/src/quick/items/qquickvisualdatamodel.cpp
index 2f31aca..728240d 100644
--- a/src/quick/items/qquickvisualdatamodel.cpp
+++ b/src/quick/items/qquickvisualdatamodel.cpp
@@ -125,10 +125,10 @@ QQuickVisualDataModelParts::QQuickVisualDataModelParts(QQuickVisualDataModel *pa
     \ingroup qtquick-models
     \brief Encapsulates a model and delegate
 
-    A VisualDataModel encapsulates a model and the delegate that will
+    The VisualDataModel type encapsulates a model and the delegate that will
     be instantiated for items in the model.
 
-    It is usually not necessary to create VisualDataModel elements.
+    It is usually not necessary to create a VisualDataModel.
     However, it can be useful for manipulating and accessing the \l modelIndex
     when a QAbstractItemModel subclass is used as the
     model. Also, VisualDataModel is used together with \l Package to
@@ -706,7 +706,7 @@ void QQuickVisualDataModelPrivate::updateFilterGroup()
 
     The \a parts property selects a VisualDataModel which creates
     delegates from the part named.  This is used in conjunction with
-    the \l Package element.
+    the \l Package type.
 
     For example, the code below selects a model which creates
     delegates named \e list from a \l Package:
diff --git a/src/quick/util/qquickanimation.cpp b/src/quick/util/qquickanimation.cpp
index 5d7e21d..46180cb 100644
--- a/src/quick/util/qquickanimation.cpp
+++ b/src/quick/util/qquickanimation.cpp
@@ -75,10 +75,10 @@ QT_BEGIN_NAMESPACE
     \ingroup qtquick-transitions-animations
     \brief Is the base of all QML animations
 
-    The Animation element cannot be used directly in a QML file.  It exists
+    The Animation type cannot be used directly in a QML file.  It exists
     to provide a set of common properties and methods, available across all the
     other animation types that inherit from it.  Attempting to use the Animation
-    element directly will result in an error.
+    type directly will result in an error.
 */
 
 QQuickAbstractAnimation::QQuickAbstractAnimation(QObject *parent)
@@ -125,7 +125,7 @@ QAbstractAnimationJob* QQuickAbstractAnimation::qtAnimation()
     \endcode
 
     Likewise, the \c running property can be read to determine if the animation
-    is running.  In the following example the text element will indicate whether
+    is running.  In the following example the Text item will indicate whether
     or not the animation is running.
 
     \code
@@ -728,7 +728,7 @@ QAbstractAnimationJob* QQuickPauseAnimation::transition(QQuickStateActions &acti
 
     \snippet qml/coloranimation.qml 0
 
-    Like any other animation element, a ColorAnimation can be applied in a
+    Like any other animation type, a ColorAnimation can be applied in a
     number of ways, including transitions, behaviors and property value
     sources. The \l {QML Animation and Transitions} documentation shows a
     variety of methods for creating animations.
@@ -1250,7 +1250,7 @@ QAbstractAnimationJob* QQuickPropertyAction::transition(QQuickStateActions &acti
 
     \snippet qml/numberanimation.qml 0
 
-    Like any other animation element, a NumberAnimation can be applied in a
+    Like any other animation type, a NumberAnimation can be applied in a
     number of ways, including transitions, behaviors and property value
     sources. The \l {QML Animation and Transitions} documentation shows a
     variety of methods for creating animations.
@@ -1356,7 +1356,7 @@ void QQuickNumberAnimation::setTo(qreal t)
     Vector3dAnimation is a specialized PropertyAnimation that defines an
     animation to be applied when a Vector3d value changes.
 
-    Like any other animation element, a Vector3dAnimation can be applied in a
+    Like any other animation type, a Vector3dAnimation can be applied in a
     number of ways, including transitions, behaviors and property value
     sources. The \l {QML Animation and Transitions} documentation shows a
     variety of methods for creating animations.
@@ -1455,7 +1455,7 @@ void QQuickVector3dAnimation::setTo(QVector3D t)
     the change at the start of the animation using PropertyAction. See the
     PropertyAction documentation for more details.
 
-    Like any other animation element, a RotationAnimation can be applied in a
+    Like any other animation type, a RotationAnimation can be applied in a
     number of ways, including transitions, behaviors and property value
     sources. The \l {QML Animation and Transitions} documentation shows a
     variety of methods for creating animations.
@@ -1669,7 +1669,7 @@ QQmlListProperty<QQuickAbstractAnimation> QQuickAnimationGroup::animations()
     \inherits Animation
     \brief Allows animations to be run sequentially
 
-    The SequentialAnimation and ParallelAnimation elements allow multiple
+    The SequentialAnimation and ParallelAnimation types allow multiple
     animations to be run together. Animations defined in a SequentialAnimation
     are run one after the other, while animations defined in a ParallelAnimation
     are run at the same time.
@@ -1683,7 +1683,7 @@ QQmlListProperty<QQuickAbstractAnimation> QQuickAnimationGroup::animations()
     so SequentialAnimation can be used to enclose the animations in a \l Transition
     if this is the preferred behavior.
 
-    Like any other animation element, a SequentialAnimation can be applied in a
+    Like any other animation type, a SequentialAnimation can be applied in a
     number of ways, including transitions, behaviors and property value
     sources. The \l {QML Animation and Transitions} documentation shows a
     variety of methods for creating animations.
@@ -1742,7 +1742,7 @@ QAbstractAnimationJob* QQuickSequentialAnimation::transition(QQuickStateActions
     \inherits Animation
     \brief Enables animations to be run in parallel
 
-    The SequentialAnimation and ParallelAnimation elements allow multiple
+    The SequentialAnimation and ParallelAnimation types allow multiple
     animations to be run together. Animations defined in a SequentialAnimation
     are run one after the other, while animations defined in a ParallelAnimation
     are run at the same time.
@@ -1752,7 +1752,7 @@ QAbstractAnimationJob* QQuickSequentialAnimation::transition(QQuickStateActions
 
     \snippet qml/parallelanimation.qml 0
 
-    Like any other animation element, a ParallelAnimation can be applied in a
+    Like any other animation type, a ParallelAnimation can be applied in a
     number of ways, including transitions, behaviors and property value
     sources. The \l {QML Animation and Transitions} documentation shows a
     variety of methods for creating animations.
@@ -1917,7 +1917,7 @@ void QQuickBulkValueAnimator::topLevelAnimationLoopChanged()
     different. For more information see the individual property documentation, as well
     as the \l{QML Animation and Transitions} introduction.
 
-    Note that PropertyAnimation inherits the abstract \l Animation element.
+    Note that PropertyAnimation inherits the abstract \l Animation type.
     This includes additional properties and methods for controlling the animation.
 
     \sa {QML Animation and Transitions}, {qml/animation/basics}{Animation basics example}
diff --git a/src/quick/util/qquickbind.cpp b/src/quick/util/qquickbind.cpp
index 0a1cd27..3ccd522 100644
--- a/src/quick/util/qquickbind.cpp
+++ b/src/quick/util/qquickbind.cpp
@@ -111,7 +111,7 @@ public:
 
     The above example will produce a warning whenever we release the mouse, as the value
     of the binding is undefined when the mouse isn't pressed. We can use the Binding
-    element to rewrite the above code and avoid the warning.
+    type to rewrite the above code and avoid the warning.
 
     \qml
     Binding on value {
@@ -120,7 +120,7 @@ public:
     }
     \endqml
 
-    The Binding element will also restore any previously set direct bindings on
+    The Binding type will also restore any previously set direct bindings on
     the property. In that sense, it functions much like a simplified State.
 
     \qml
diff --git a/src/quick/util/qquickconnections.cpp b/src/quick/util/qquickconnections.cpp
index 9b086b9..654d0b7 100644
--- a/src/quick/util/qquickconnections.cpp
+++ b/src/quick/util/qquickconnections.cpp
@@ -96,7 +96,7 @@ public:
         \li Connecting to targets not defined in QML
     \endlist
 
-    When any of these are needed, the Connections element can be used instead.
+    When any of these are needed, the Connections type can be used instead.
 
     For example, the above code can be changed to use a Connections object,
     like this:
diff --git a/src/quick/util/qquickfontloader.cpp b/src/quick/util/qquickfontloader.cpp
index 1d982ce..82f0468 100644
--- a/src/quick/util/qquickfontloader.cpp
+++ b/src/quick/util/qquickfontloader.cpp
@@ -151,7 +151,7 @@ QHash<QUrl, QQuickFontObject*> QQuickFontLoaderPrivate::fonts;
     \ingroup qtquick-text-utility
     \brief Allows fonts to be loaded by name or URL
 
-    The FontLoader element is used to load fonts by name or URL.
+    The FontLoader type is used to load fonts by name or URL.
 
     The \l status indicates when the font has been loaded, which is useful
     for fonts loaded from remote sources.
diff --git a/src/quick/util/qquickimageprovider.cpp b/src/quick/util/qquickimageprovider.cpp
index 42da519..c6ad5ac 100644
--- a/src/quick/util/qquickimageprovider.cpp
+++ b/src/quick/util/qquickimageprovider.cpp
@@ -277,7 +277,7 @@ QQuickImageProvider::Flags QQuickImageProvider::flags() const
     was "image://myprovider/icons/home", the given \a id would be "icons/home".
 
     The \a requestedSize corresponds to the \l {Image::sourceSize} requested by
-    an Image element. If \a requestedSize is a valid size, the image
+    an Image item. If \a requestedSize is a valid size, the image
     returned should be of that size.
 
     In all cases, \a size must be set to the original size of the image. This
@@ -306,7 +306,7 @@ QImage QQuickImageProvider::requestImage(const QString &id, QSize *size, const Q
     was "image://myprovider/icons/home", the given \a id would be "icons/home".
 
     The \a requestedSize corresponds to the \l {Image::sourceSize} requested by
-    an Image element. If \a requestedSize is a valid size, the image
+    an Image item. If \a requestedSize is a valid size, the image
     returned should be of that size.
 
     In all cases, \a size must be set to the original size of the image. This
@@ -333,7 +333,7 @@ QPixmap QQuickImageProvider::requestPixmap(const QString &id, QSize *size, const
     was "image://myprovider/icons/home", the given \a id would be "icons/home".
 
     The \a requestedSize corresponds to the \l {Image::sourceSize} requested by
-    an Image element. If \a requestedSize is a valid size, the image
+    an Image item. If \a requestedSize is a valid size, the image
     returned should be of that size.
 
     In all cases, \a size must be set to the original size of the image. This
diff --git a/src/quick/util/qquickpackage.cpp b/src/quick/util/qquickpackage.cpp
index 3363235..3ec28f3 100644
--- a/src/quick/util/qquickpackage.cpp
+++ b/src/quick/util/qquickpackage.cpp
@@ -60,7 +60,7 @@ QT_BEGIN_NAMESPACE
     \l{Package::name}{Package.name} attached property.
 
     The example below creates a Package containing two named items;
-    \e list and \e grid.  The third element in the package (the \l Rectangle) is parented to whichever
+    \e list and \e grid.  The third item in the package (the \l Rectangle) is parented to whichever
     delegate it should appear in.  This allows an item to move
     between views.
 
diff --git a/src/quick/util/qquickpropertychanges.cpp b/src/quick/util/qquickpropertychanges.cpp
index b51eefc..68e5a0e 100644
--- a/src/quick/util/qquickpropertychanges.cpp
+++ b/src/quick/util/qquickpropertychanges.cpp
@@ -123,7 +123,7 @@ QT_BEGIN_NAMESPACE
     state to those defined in the new state (as defined by PropertyChanges
     objects). However, it is sometimes desirable to set a property value
     \e immediately during a \l Transition, without animation; in these cases,
-    the PropertyAction element can be used to force an immediate property
+    the PropertyAction type can be used to force an immediate property
     change.
 
     See the PropertyAction documentation for more details.
diff --git a/src/quick/util/qquicksmoothedanimation.cpp b/src/quick/util/qquicksmoothedanimation.cpp
index 49dce04..7a79684 100644
--- a/src/quick/util/qquicksmoothedanimation.cpp
+++ b/src/quick/util/qquicksmoothedanimation.cpp
@@ -345,7 +345,7 @@ void QSmoothedAnimation::init()
     set to a value such as 0.5 units/second.  Animating from 0 to 1.0 with a velocity
     of 0.5 will take 2000 ms to complete.
 
-    Like any other animation element, a SmoothedAnimation can be applied in a
+    Like any other animation type, a SmoothedAnimation can be applied in a
     number of ways, including transitions, behaviors and property value
     sources. The \l {QML Animation and Transitions} documentation shows a
     variety of methods for creating animations.
diff --git a/src/quick/util/qquickspringanimation.cpp b/src/quick/util/qquickspringanimation.cpp
index 413f95e..718eaf0 100644
--- a/src/quick/util/qquickspringanimation.cpp
+++ b/src/quick/util/qquickspringanimation.cpp
@@ -359,7 +359,7 @@ void QQuickSpringAnimationPrivate::updateMode()
 
     \snippet qml/springanimation.qml 0
 
-    Like any other animation element, a SpringAnimation can be applied in a
+    Like any other animation type, a SpringAnimation can be applied in a
     number of ways, including transitions, behaviors and property value
     sources. The \l {QML Animation and Transitions} documentation shows a
     variety of methods for creating animations.
diff --git a/src/quick/util/qquickstate.cpp b/src/quick/util/qquickstate.cpp
index f6802b1..98dbd6d 100644
--- a/src/quick/util/qquickstate.cpp
+++ b/src/quick/util/qquickstate.cpp
@@ -134,7 +134,7 @@ QQuickStateOperation::QQuickStateOperation(QObjectPrivate &dd, QObject *parent)
     different scripts.
 
     The following example displays a single \l Rectangle. In the default state, the rectangle
-    is colored black. In the "clicked" state, a PropertyChanges element changes the
+    is colored black. In the "clicked" state, a PropertyChanges object changes the
     rectangle's color to red. Clicking within the MouseArea toggles the rectangle's state
     between the default state and the "clicked" state, thus toggling the color of the
     rectangle between black and red.
diff --git a/src/quick/util/qquickstategroup.cpp b/src/quick/util/qquickstategroup.cpp
index 2d8ed95..9e0909b 100644
--- a/src/quick/util/qquickstategroup.cpp
+++ b/src/quick/util/qquickstategroup.cpp
@@ -95,11 +95,11 @@ public:
    \qmlclass StateGroup QQuickStateGroup
     \inqmlmodule QtQuick 2
    \ingroup qtquick-states
-   \brief Provides built-in state support for non-Item elements
+   \brief Provides built-in state support for non-Item types
 
-   Item (and all derived elements) provides built in support for states and transitions
+   Item (and all derived types) provides built in support for states and transitions
    via its \l{Item::state}{state}, \l{Item::states}{states} and \l{Item::transitions}{transitions} properties. StateGroup provides an easy way to
-   use this support in other (non-Item-derived) elements.
+   use this support in other (non-Item-derived) types.
 
    \qml
    MyCustomObject {
diff --git a/src/quick/util/qquicksystempalette.cpp b/src/quick/util/qquicksystempalette.cpp
index b500f20..7c234a3 100644
--- a/src/quick/util/qquicksystempalette.cpp
+++ b/src/quick/util/qquicksystempalette.cpp
@@ -62,7 +62,7 @@ public:
     \ingroup qtquick-visual-utility
     \brief Provides access to the Qt palettes
 
-    The SystemPalette element provides access to the Qt application
+    The SystemPalette type provides access to the Qt application
     palettes. This provides information about the standard colors used
     for application windows, buttons and other features. These colors
     are grouped into three \e {color groups}: \c Active, \c Inactive,
diff --git a/src/quick/util/qquicktimer.cpp b/src/quick/util/qquicktimer.cpp
index 88dc079..7b74700 100644
--- a/src/quick/util/qquicktimer.cpp
+++ b/src/quick/util/qquicktimer.cpp
@@ -98,7 +98,7 @@ public:
     }
     \endqml
 
-    The Timer element is synchronized with the animation timer.  Since the animation
+    The Timer type is synchronized with the animation timer.  Since the animation
     timer is usually set to 60fps, the resolution of Timer will be
     at best 16ms.