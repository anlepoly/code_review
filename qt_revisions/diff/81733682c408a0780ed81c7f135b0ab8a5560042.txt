diff --git a/modules/qt_graphical_effects.pri b/modules/qt_graphical_effects.pri
index f03645e..eee199d 100644
--- a/modules/qt_graphical_effects.pri
+++ b/modules/qt_graphical_effects.pri
@@ -11,6 +11,6 @@ QT.qtgraphicaleffects.sources = $$QT_MODULE_BASE/src
 QT.qtgraphicaleffects.libs = $$QT_MODULE_LIB_BASE
 QT.qtgraphicaleffects.plugins = $$QT_MODULE_PLUGIN_BASE
 QT.qtgraphicaleffects.imports = $$QT_MODULE_IMPORT_BASE
-QT.qtgraphicaleffects.depends = core declarative
+QT.qtgraphicaleffects.depends = core qml
 
 QT_CONFIG += qtgraphicaleffects
diff --git a/tests/auto/auto.pro b/tests/auto/auto.pro
index 79e21ee..5167f4e 100644
--- a/tests/auto/auto.pro
+++ b/tests/auto/auto.pro
@@ -1,7 +1,7 @@
 
 CONFIG += testcase
 
-QT += opengl declarative testlib quick
+QT += opengl qml testlib quick
 
 TARGET = tst_qtgraphicaleffects
 
diff --git a/tests/auto/tst_qtgraphicaleffects.cpp b/tests/auto/tst_qtgraphicaleffects.cpp
index 48455ec..3a5e4da 100644
--- a/tests/auto/tst_qtgraphicaleffects.cpp
+++ b/tests/auto/tst_qtgraphicaleffects.cpp
@@ -40,7 +40,7 @@
 ****************************************************************************/
 
 #include <qtest.h>
-#include <QtDeclarative>
+#include <QtQml>
 
 class tst_qtgraphicaleffects : public QObject
 {
@@ -76,13 +76,13 @@ private slots:
     void zoomBlur();
 
 private:
-    QString componentErrors(const QDeclarativeComponent*) const;
+    QString componentErrors(const QQmlComponent*) const;
 
     QString importSelf;
-    QDeclarativeEngine engine;
+    QQmlEngine engine;
 };
 
-QString tst_qtgraphicaleffects::componentErrors(const QDeclarativeComponent* component) const
+QString tst_qtgraphicaleffects::componentErrors(const QQmlComponent* component) const
 {
     if (!component) {
         return "(null component)";
@@ -90,7 +90,7 @@ QString tst_qtgraphicaleffects::componentErrors(const QDeclarativeComponent* com
 
     QStringList out;
 
-    foreach (QDeclarativeError const& error, component->errors()) {
+    foreach (QQmlError const& error, component->errors()) {
         out << error.toString();
     }
 
@@ -128,10 +128,10 @@ void tst_qtgraphicaleffects::brightnessContrast()
             "width: 50; height: 50\n"
             "source: ShaderEffectSource {sourceItem: Rectangle {width: 100; height: 100}}"
             "}";
-    QDeclarativeComponent component(&engine);
+    QQmlComponent component(&engine);
     component.setData(componentStr.toLatin1(), QUrl::fromLocalFile(""));
-    QVERIFY2(component.status() != QDeclarativeComponent::Error, qPrintable(componentErrors(&component)));
-    QTRY_COMPARE(component.status(), QDeclarativeComponent::Ready);
+    QVERIFY2(component.status() != QQmlComponent::Error, qPrintable(componentErrors(&component)));
+    QTRY_COMPARE(component.status(), QQmlComponent::Ready);
     QObject *obj = component.create();
     QVERIFY(obj != 0);
 
@@ -153,10 +153,10 @@ void tst_qtgraphicaleffects::colorize()
             "width: 50; height: 50\n"
             "source: ShaderEffectSource {sourceItem: Rectangle {width: 100; height: 100}}"
             "}";
-    QDeclarativeComponent component(&engine);
+    QQmlComponent component(&engine);
     component.setData(componentStr.toLatin1(), QUrl::fromLocalFile(""));
-    QVERIFY2(component.status() != QDeclarativeComponent::Error, qPrintable(componentErrors(&component)));
-    QTRY_COMPARE(component.status(), QDeclarativeComponent::Ready);
+    QVERIFY2(component.status() != QQmlComponent::Error, qPrintable(componentErrors(&component)));
+    QTRY_COMPARE(component.status(), QQmlComponent::Ready);
     QObject *obj = component.create();
     QVERIFY(obj != 0);
 
@@ -179,10 +179,10 @@ void tst_qtgraphicaleffects::fastBlur()
             "width: 50; height: 50\n"
             "source: ShaderEffectSource {sourceItem: Rectangle {width: 100; height: 100}}"
             "}";
-    QDeclarativeComponent component(&engine);
+    QQmlComponent component(&engine);
     component.setData(componentStr.toLatin1(), QUrl::fromLocalFile(""));
-    QVERIFY2(component.status() != QDeclarativeComponent::Error, qPrintable(componentErrors(&component)));
-    QTRY_COMPARE(component.status(), QDeclarativeComponent::Ready);
+    QVERIFY2(component.status() != QQmlComponent::Error, qPrintable(componentErrors(&component)));
+    QTRY_COMPARE(component.status(), QQmlComponent::Ready);
     QObject *obj = component.create();
     QVERIFY(obj != 0);
 
@@ -204,10 +204,10 @@ void tst_qtgraphicaleffects::desaturate()
             "width: 50; height: 50\n"
             "source: ShaderEffectSource {sourceItem: Rectangle {width: 100; height: 100}}"
             "}";
-    QDeclarativeComponent component(&engine);
+    QQmlComponent component(&engine);
     component.setData(componentStr.toLatin1(), QUrl::fromLocalFile(""));
-    QVERIFY2(component.status() != QDeclarativeComponent::Error, qPrintable(componentErrors(&component)));
-    QTRY_COMPARE(component.status(), QDeclarativeComponent::Ready);
+    QVERIFY2(component.status() != QQmlComponent::Error, qPrintable(componentErrors(&component)));
+    QTRY_COMPARE(component.status(), QQmlComponent::Ready);
     QObject *obj = component.create();
     QVERIFY(obj != 0);
 
@@ -228,10 +228,10 @@ void tst_qtgraphicaleffects::hueSaturation()
             "width: 50; height: 50\n"
             "source: ShaderEffectSource {sourceItem: Rectangle {width: 100; height: 100}}"
             "}";
-    QDeclarativeComponent component(&engine);
+    QQmlComponent component(&engine);
     component.setData(componentStr.toLatin1(), QUrl::fromLocalFile(""));
-    QVERIFY2(component.status() != QDeclarativeComponent::Error, qPrintable(componentErrors(&component)));
-    QTRY_COMPARE(component.status(), QDeclarativeComponent::Ready);
+    QVERIFY2(component.status() != QQmlComponent::Error, qPrintable(componentErrors(&component)));
+    QTRY_COMPARE(component.status(), QQmlComponent::Ready);
     QObject *obj = component.create();
     QVERIFY(obj != 0);
 
@@ -255,10 +255,10 @@ void tst_qtgraphicaleffects::opacityMask()
             "source: ShaderEffectSource {sourceItem: Rectangle {width: 100; height: 100}}"
             "maskSource: ShaderEffectSource {sourceItem: Rectangle {width: 100; height: 100}}"
             "}";
-    QDeclarativeComponent component(&engine);
+    QQmlComponent component(&engine);
     component.setData(componentStr.toLatin1(), QUrl::fromLocalFile(""));
-    QVERIFY2(component.status() != QDeclarativeComponent::Error, qPrintable(componentErrors(&component)));
-    QTRY_COMPARE(component.status(), QDeclarativeComponent::Ready);
+    QVERIFY2(component.status() != QQmlComponent::Error, qPrintable(componentErrors(&component)));
+    QTRY_COMPARE(component.status(), QQmlComponent::Ready);
     QObject *obj = component.create();
     QVERIFY(obj != 0);
 
@@ -278,10 +278,10 @@ void tst_qtgraphicaleffects::radialGradient()
             "RadialGradient {"
             "width: 50; height: 50\n"
             "}";
-    QDeclarativeComponent component(&engine);
+    QQmlComponent component(&engine);
     component.setData(componentStr.toLatin1(), QUrl::fromLocalFile(""));
-    QVERIFY2(component.status() != QDeclarativeComponent::Error, qPrintable(componentErrors(&component)));
-    QTRY_COMPARE(component.status(), QDeclarativeComponent::Ready);
+    QVERIFY2(component.status() != QQmlComponent::Error, qPrintable(componentErrors(&component)));
+    QTRY_COMPARE(component.status(), QQmlComponent::Ready);
     QObject *obj = component.create();
     QVERIFY(obj != 0);
 
@@ -306,10 +306,10 @@ void tst_qtgraphicaleffects::linearGradient()
             "LinearGradient {"
             "width: 50; height: 50\n"
             "}";
-    QDeclarativeComponent component(&engine);
+    QQmlComponent component(&engine);
     component.setData(componentStr.toLatin1(), QUrl::fromLocalFile(""));
-    QVERIFY2(component.status() != QDeclarativeComponent::Error, qPrintable(componentErrors(&component)));
-    QTRY_COMPARE(component.status(), QDeclarativeComponent::Ready);
+    QVERIFY2(component.status() != QQmlComponent::Error, qPrintable(componentErrors(&component)));
+    QTRY_COMPARE(component.status(), QQmlComponent::Ready);
     QObject *obj = component.create();
     QVERIFY(obj != 0);
 
@@ -331,10 +331,10 @@ void tst_qtgraphicaleffects::rectangularGlow()
             "RectangularGlow {"
             "width: 50; height: 50\n"
             "}";
-    QDeclarativeComponent component(&engine);
+    QQmlComponent component(&engine);
     component.setData(componentStr.toLatin1(), QUrl::fromLocalFile(""));
-    QVERIFY2(component.status() != QDeclarativeComponent::Error, qPrintable(componentErrors(&component)));
-    QTRY_COMPARE(component.status(), QDeclarativeComponent::Ready);
+    QVERIFY2(component.status() != QQmlComponent::Error, qPrintable(componentErrors(&component)));
+    QTRY_COMPARE(component.status(), QQmlComponent::Ready);
     QObject *obj = component.create();
     QVERIFY(obj != 0);
 
@@ -356,10 +356,10 @@ void tst_qtgraphicaleffects::conicalGradient()
             "ConicalGradient {"
             "width: 50; height: 50\n"
             "}";
-    QDeclarativeComponent component(&engine);
+    QQmlComponent component(&engine);
     component.setData(componentStr.toLatin1(), QUrl::fromLocalFile(""));
-    QVERIFY2(component.status() != QDeclarativeComponent::Error, qPrintable(componentErrors(&component)));
-    QTRY_COMPARE(component.status(), QDeclarativeComponent::Ready);
+    QVERIFY2(component.status() != QQmlComponent::Error, qPrintable(componentErrors(&component)));
+    QTRY_COMPARE(component.status(), QQmlComponent::Ready);
     QObject *obj = component.create();
     QVERIFY(obj != 0);
 
@@ -383,10 +383,10 @@ void tst_qtgraphicaleffects::colorOverlay()
             "width: 50; height: 50\n"
             "source: ShaderEffectSource {sourceItem: Rectangle {width: 100; height: 100}}"
             "}";
-    QDeclarativeComponent component(&engine);
+    QQmlComponent component(&engine);
     component.setData(componentStr.toLatin1(), QUrl::fromLocalFile(""));
-    QVERIFY2(component.status() != QDeclarativeComponent::Error, qPrintable(componentErrors(&component)));
-    QTRY_COMPARE(component.status(), QDeclarativeComponent::Ready);
+    QVERIFY2(component.status() != QQmlComponent::Error, qPrintable(componentErrors(&component)));
+    QTRY_COMPARE(component.status(), QQmlComponent::Ready);
     QObject *obj = component.create();
     QVERIFY(obj != 0);
 
@@ -406,10 +406,10 @@ void tst_qtgraphicaleffects::gaussianBlur()
             "source: ShaderEffectSource {sourceItem: Rectangle {width: 100; height: 100}}"
             "width: 50; height: 50\n"
             "}";
-    QDeclarativeComponent component(&engine);
+    QQmlComponent component(&engine);
     component.setData(componentStr.toLatin1(), QUrl::fromLocalFile(""));
-    QVERIFY2(component.status() != QDeclarativeComponent::Error, qPrintable(componentErrors(&component)));
-    QTRY_COMPARE(component.status(), QDeclarativeComponent::Ready);
+    QVERIFY2(component.status() != QQmlComponent::Error, qPrintable(componentErrors(&component)));
+    QTRY_COMPARE(component.status(), QQmlComponent::Ready);
     QObject *obj = component.create();
     QVERIFY(obj != 0);
 
@@ -436,10 +436,10 @@ void tst_qtgraphicaleffects::dropShadow()
             "source: ShaderEffectSource {sourceItem: Rectangle {width: 100; height: 100}}"
             "width: 50; height: 50\n"
             "}";
-    QDeclarativeComponent component(&engine);
+    QQmlComponent component(&engine);
     component.setData(componentStr.toLatin1(), QUrl::fromLocalFile(""));
-    QVERIFY2(component.status() != QDeclarativeComponent::Error, qPrintable(componentErrors(&component)));
-    QTRY_COMPARE(component.status(), QDeclarativeComponent::Ready);
+    QVERIFY2(component.status() != QQmlComponent::Error, qPrintable(componentErrors(&component)));
+    QTRY_COMPARE(component.status(), QQmlComponent::Ready);
     QObject *obj = component.create();
     QVERIFY(obj != 0);
 
@@ -468,10 +468,10 @@ void tst_qtgraphicaleffects::innerShadow()
             "source: ShaderEffectSource {sourceItem: Rectangle {width: 100; height: 100}}"
             "width: 50; height: 50\n"
             "}";
-    QDeclarativeComponent component(&engine);
+    QQmlComponent component(&engine);
     component.setData(componentStr.toLatin1(), QUrl::fromLocalFile(""));
-    QVERIFY2(component.status() != QDeclarativeComponent::Error, qPrintable(componentErrors(&component)));
-    QTRY_COMPARE(component.status(), QDeclarativeComponent::Ready);
+    QVERIFY2(component.status() != QQmlComponent::Error, qPrintable(componentErrors(&component)));
+    QTRY_COMPARE(component.status(), QQmlComponent::Ready);
     QObject *obj = component.create();
     QVERIFY(obj != 0);
 
@@ -498,10 +498,10 @@ void tst_qtgraphicaleffects::gammaAdjust()
             "source: ShaderEffectSource {sourceItem: Rectangle {width: 100; height: 100}}"
             "width: 50; height: 50\n"
             "}";
-    QDeclarativeComponent component(&engine);
+    QQmlComponent component(&engine);
     component.setData(componentStr.toLatin1(), QUrl::fromLocalFile(""));
-    QVERIFY2(component.status() != QDeclarativeComponent::Error, qPrintable(componentErrors(&component)));
-    QTRY_COMPARE(component.status(), QDeclarativeComponent::Ready);
+    QVERIFY2(component.status() != QQmlComponent::Error, qPrintable(componentErrors(&component)));
+    QTRY_COMPARE(component.status(), QQmlComponent::Ready);
     QObject *obj = component.create();
     //qDebug() << component.errorString();
     QVERIFY(obj != 0);
@@ -524,10 +524,10 @@ void tst_qtgraphicaleffects::thresholdMask()
             "source: ShaderEffectSource {sourceItem: Rectangle {width: 100; height: 100}}"
             "maskSource: ShaderEffectSource {sourceItem: Rectangle {width: 100; height: 100}}"
             "}";
-    QDeclarativeComponent component(&engine);
+    QQmlComponent component(&engine);
     component.setData(componentStr.toLatin1(), QUrl::fromLocalFile(""));
-    QVERIFY2(component.status() != QDeclarativeComponent::Error, qPrintable(componentErrors(&component)));
-    QTRY_COMPARE(component.status(), QDeclarativeComponent::Ready);
+    QVERIFY2(component.status() != QQmlComponent::Error, qPrintable(componentErrors(&component)));
+    QTRY_COMPARE(component.status(), QQmlComponent::Ready);
     QObject *obj = component.create();
     QVERIFY(obj != 0);
 
@@ -550,10 +550,10 @@ void tst_qtgraphicaleffects::glow()
             "source: ShaderEffectSource {sourceItem: Rectangle {width: 100; height: 100}}"
             "width: 50; height: 50\n"
             "}";
-    QDeclarativeComponent component(&engine);
+    QQmlComponent component(&engine);
     component.setData(componentStr.toLatin1(), QUrl::fromLocalFile(""));
-    QVERIFY2(component.status() != QDeclarativeComponent::Error, qPrintable(componentErrors(&component)));
-    QTRY_COMPARE(component.status(), QDeclarativeComponent::Ready);
+    QVERIFY2(component.status() != QQmlComponent::Error, qPrintable(componentErrors(&component)));
+    QTRY_COMPARE(component.status(), QQmlComponent::Ready);
     QObject *obj = component.create();
     QVERIFY(obj != 0);
 
@@ -579,10 +579,10 @@ void tst_qtgraphicaleffects::blend()
             "foregroundSource: ShaderEffectSource {sourceItem: Rectangle {width: 100; height: 100}}"
             "width: 50; height: 50\n"
             "}";
-    QDeclarativeComponent component(&engine);
+    QQmlComponent component(&engine);
     component.setData(componentStr.toLatin1(), QUrl::fromLocalFile(""));
-    QVERIFY2(component.status() != QDeclarativeComponent::Error, qPrintable(componentErrors(&component)));
-    QTRY_COMPARE(component.status(), QDeclarativeComponent::Ready);
+    QVERIFY2(component.status() != QQmlComponent::Error, qPrintable(componentErrors(&component)));
+    QTRY_COMPARE(component.status(), QQmlComponent::Ready);
     QObject *obj = component.create();
     QVERIFY(obj != 0);
 
@@ -605,10 +605,10 @@ void tst_qtgraphicaleffects::displace()
             "displacementSource: ShaderEffectSource {sourceItem: Rectangle {width: 100; height: 100}}"
             "width: 50; height: 50\n"
             "}";
-    QDeclarativeComponent component(&engine);
+    QQmlComponent component(&engine);
     component.setData(componentStr.toLatin1(), QUrl::fromLocalFile(""));
-    QVERIFY2(component.status() != QDeclarativeComponent::Error, qPrintable(componentErrors(&component)));
-    QTRY_COMPARE(component.status(), QDeclarativeComponent::Ready);
+    QVERIFY2(component.status() != QQmlComponent::Error, qPrintable(componentErrors(&component)));
+    QTRY_COMPARE(component.status(), QQmlComponent::Ready);
     QObject *obj = component.create();
     QVERIFY(obj != 0);
 
@@ -630,10 +630,10 @@ void tst_qtgraphicaleffects::recursiveBlur()
             "source: ShaderEffectSource {sourceItem: Rectangle {width: 100; height: 100}}"
             "width: 50; height: 50\n"
             "}";
-    QDeclarativeComponent component(&engine);
+    QQmlComponent component(&engine);
     component.setData(componentStr.toLatin1(), QUrl::fromLocalFile(""));
-    QVERIFY2(component.status() != QDeclarativeComponent::Error, qPrintable(componentErrors(&component)));
-    QTRY_COMPARE(component.status(), QDeclarativeComponent::Ready);
+    QVERIFY2(component.status() != QQmlComponent::Error, qPrintable(componentErrors(&component)));
+    QTRY_COMPARE(component.status(), QQmlComponent::Ready);
     QObject *obj = component.create();
     QVERIFY(obj != 0);
 
@@ -657,10 +657,10 @@ void tst_qtgraphicaleffects::directionalBlur()
             "source: ShaderEffectSource {sourceItem: Rectangle {width: 100; height: 100}}"
             "width: 50; height: 50\n"
             "}";
-    QDeclarativeComponent component(&engine);
+    QQmlComponent component(&engine);
     component.setData(componentStr.toLatin1(), QUrl::fromLocalFile(""));
-    QVERIFY2(component.status() != QDeclarativeComponent::Error, qPrintable(componentErrors(&component)));
-    QTRY_COMPARE(component.status(), QDeclarativeComponent::Ready);
+    QVERIFY2(component.status() != QQmlComponent::Error, qPrintable(componentErrors(&component)));
+    QTRY_COMPARE(component.status(), QQmlComponent::Ready);
     QObject *obj = component.create();
     QVERIFY(obj != 0);
 
@@ -684,10 +684,10 @@ void tst_qtgraphicaleffects::radialBlur()
             "source: ShaderEffectSource {sourceItem: Rectangle {width: 100; height: 100}}"
             "width: 50; height: 50\n"
             "}";
-    QDeclarativeComponent component(&engine);
+    QQmlComponent component(&engine);
     component.setData(componentStr.toLatin1(), QUrl::fromLocalFile(""));
-    QVERIFY2(component.status() != QDeclarativeComponent::Error, qPrintable(componentErrors(&component)));
-    QTRY_COMPARE(component.status(), QDeclarativeComponent::Ready);
+    QVERIFY2(component.status() != QQmlComponent::Error, qPrintable(componentErrors(&component)));
+    QTRY_COMPARE(component.status(), QQmlComponent::Ready);
     QObject *obj = component.create();
     QVERIFY(obj != 0);
 
@@ -712,10 +712,10 @@ void tst_qtgraphicaleffects::zoomBlur()
             "source: ShaderEffectSource {sourceItem: Rectangle {width: 100; height: 100}}"
             "width: 50; height: 50\n"
             "}";
-    QDeclarativeComponent component(&engine);
+    QQmlComponent component(&engine);
     component.setData(componentStr.toLatin1(), QUrl::fromLocalFile(""));
-    QVERIFY2(component.status() != QDeclarativeComponent::Error, qPrintable(componentErrors(&component)));
-    QTRY_COMPARE(component.status(), QDeclarativeComponent::Ready);
+    QVERIFY2(component.status() != QQmlComponent::Error, qPrintable(componentErrors(&component)));
+    QTRY_COMPARE(component.status(), QQmlComponent::Ready);
     QObject *obj = component.create();
 
     // Default values
@@ -738,10 +738,10 @@ void tst_qtgraphicaleffects::levelAdjust()
             "LevelAdjust {"
             "width: 50; height: 50\n"
             "}";
-    QDeclarativeComponent component(&engine);
+    QQmlComponent component(&engine);
     component.setData(componentStr.toLatin1(), QUrl::fromLocalFile(""));
-    QVERIFY2(component.status() != QDeclarativeComponent::Error, qPrintable(componentErrors(&component)));
-    QTRY_COMPARE(component.status(), QDeclarativeComponent::Ready);
+    QVERIFY2(component.status() != QQmlComponent::Error, qPrintable(componentErrors(&component)));
+    QTRY_COMPARE(component.status(), QQmlComponent::Ready);
     QObject *obj = component.create();
     QVERIFY(obj != 0);
 
@@ -766,10 +766,10 @@ void tst_qtgraphicaleffects::maskedBlur()
             "maskSource: ShaderEffectSource {sourceItem: Rectangle {width: 100; height: 100}}"
             "width: 50; height: 50\n"
             "}";
-    QDeclarativeComponent component(&engine);
+    QQmlComponent component(&engine);
     component.setData(componentStr.toLatin1(), QUrl::fromLocalFile(""));
-    QVERIFY2(component.status() != QDeclarativeComponent::Error, qPrintable(componentErrors(&component)));
-    QTRY_COMPARE(component.status(), QDeclarativeComponent::Ready);
+    QVERIFY2(component.status() != QQmlComponent::Error, qPrintable(componentErrors(&component)));
+    QTRY_COMPARE(component.status(), QQmlComponent::Ready);
     QObject *obj = component.create();
     QVERIFY(obj != 0);
 
diff --git a/tools/pngdumper/pngdumper.cpp b/tools/pngdumper/pngdumper.cpp
index 971a985..08714be 100644
--- a/tools/pngdumper/pngdumper.cpp
+++ b/tools/pngdumper/pngdumper.cpp
@@ -41,7 +41,7 @@
 
 #include "pngdumper.h"
 
-#include <QtDeclarative/qdeclarative.h>
+#include <QtQml/qqml.h>
 
 ItemCapturer::ItemCapturer(QQuickItem *parent):
     QQuickItem(parent)
diff --git a/tools/pngdumper/pngdumper_plugin.cpp b/tools/pngdumper/pngdumper_plugin.cpp
index a350458..41d7c4f 100644
--- a/tools/pngdumper/pngdumper_plugin.cpp
+++ b/tools/pngdumper/pngdumper_plugin.cpp
@@ -42,7 +42,7 @@
 #include "pngdumper_plugin.h"
 #include "pngdumper.h"
 
-#include <QtDeclarative/qdeclarative.h>
+#include <QtQml/qqml.h>
 
 void ItemcapturerPlugin::registerTypes(const char *uri)
 {
diff --git a/tools/pngdumper/pngdumper_plugin.h b/tools/pngdumper/pngdumper_plugin.h
index bf8b9eb..8209dfb 100644
--- a/tools/pngdumper/pngdumper_plugin.h
+++ b/tools/pngdumper/pngdumper_plugin.h
@@ -42,9 +42,9 @@
 #ifndef ITEMCAPTURER_PLUGIN_H
 #define ITEMCAPTURER_PLUGIN_H
 
-#include <QtDeclarative/QDeclarativeExtensionPlugin>
+#include <QtQml/QQmlExtensionPlugin>
 
-class ItemcapturerPlugin : public QDeclarativeExtensionPlugin
+class ItemcapturerPlugin : public QQmlExtensionPlugin
 {
     Q_OBJECT