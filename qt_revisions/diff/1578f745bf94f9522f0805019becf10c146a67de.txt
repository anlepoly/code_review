diff --git a/src/particles/qquickimageparticle.cpp b/src/particles/qquickimageparticle.cpp
index 128bdf2..5b46275 100644
--- a/src/particles/qquickimageparticle.cpp
+++ b/src/particles/qquickimageparticle.cpp
@@ -609,7 +609,7 @@ void fillUniformArrayFromImage(float* array, const QImage& img, int size)
 
     This sharing of data happens behind the scenes based off of whether properties were implicitly or explicitly
     set. One drawback of the current implementation is that it is only possible to reset the capabilities as a whole.
-    So if you explicity set an attribute affecting color, such as redVariation, and then reset it (by setting redVariation
+    So if you explicitly set an attribute affecting color, such as redVariation, and then reset it (by setting redVariation
     to undefined), all color data will be reset and it will begin to have an implicit value of any shared color from
     other ImageParticles.
 */
diff --git a/src/qml/qml/ftw/qhashedstring.cpp b/src/qml/qml/ftw/qhashedstring.cpp
index d5098fc..56fd38d 100644
--- a/src/qml/qml/ftw/qhashedstring.cpp
+++ b/src/qml/qml/ftw/qhashedstring.cpp
@@ -42,7 +42,7 @@
 #include "qhashedstring_p.h"
 
 // This is a reimplementation of V8's string hash algorithm.  It is significantly
-// faster to do it here than call into V8, but it adds the maintainence burden of
+// faster to do it here than call into V8, but it adds the maintenance burden of
 // ensuring that the two hashes are identical.  We Q_ASSERT() that the two return
 // the same value.  If these asserts start to fail, the hash code needs to be 
 // synced with V8.
diff --git a/src/qml/qml/qqmlincubator.cpp b/src/qml/qml/qqmlincubator.cpp
index a21f5e0..6cf7774 100644
--- a/src/qml/qml/qqmlincubator.cpp
+++ b/src/qml/qml/qqmlincubator.cpp
@@ -406,9 +406,9 @@ void QQmlIncubationController::incubateWhile(volatile bool *flag, int msecs)
 \inmodule QtQml
 
 Creating QML objects - like delegates in a view, or a new page in an application - can take
-a noticable amount of time, especially on resource constrained mobile devices.  When an
+a noticeable amount of time, especially on resource constrained mobile devices.  When an
 application uses QQmlComponent::create() directly, the QML object instance is created
-synchronously which, depending on the complexity of the object,  can cause noticable pauses or 
+synchronously which, depending on the complexity of the object,  can cause noticeable pauses or
 stutters in the application.
 
 The use of QQmlIncubator gives more control over the creation of a QML object, 
diff --git a/src/qml/qml/qqmltypeloader.cpp b/src/qml/qml/qqmltypeloader.cpp
index 2f9b2cb..10eeb78 100644
--- a/src/qml/qml/qqmltypeloader.cpp
+++ b/src/qml/qml/qqmltypeloader.cpp
@@ -1627,7 +1627,7 @@ Returns a empty string if the path does not exist.
 
 Why a directory cache?  QML checks for files in many paths with
 invalid directories.  By caching whether a directory exists
-we avoid many stats.  We also cache the files' existance in the
+we avoid many stats.  We also cache the files' existence in the
 directory, for the same reason.
 */
 QString QQmlTypeLoader::absoluteFilePath(const QString &path)
diff --git a/src/qml/qml/qqmlvmemetaobject.cpp b/src/qml/qml/qqmlvmemetaobject.cpp
index 2ebb452..416bb25 100644
--- a/src/qml/qml/qqmlvmemetaobject.cpp
+++ b/src/qml/qml/qqmlvmemetaobject.cpp
@@ -1265,7 +1265,7 @@ void QQmlVMEMetaObject::GcPrologueCallback(QV8GCCallback::Node *node)
 
     // add references created by VMEVariant properties
     int maxDataIdx = vmemo->metaData->propertyCount - vmemo->metaData->varPropertyCount;
-    for (int ii = 0; ii < maxDataIdx; ++ii) { // XXX TODO: optimise?
+    for (int ii = 0; ii < maxDataIdx; ++ii) { // XXX TODO: optimize?
         if (vmemo->data[ii].dataType() == QMetaType::QObjectStar) {
             // possible QObject reference.
             QObject *ref = vmemo->data[ii].asQObject();
diff --git a/src/qml/qml/v8/qv8qobjectwrapper.cpp b/src/qml/qml/v8/qv8qobjectwrapper.cpp
index d6e0190..0ba2b35 100644
--- a/src/qml/qml/v8/qv8qobjectwrapper.cpp
+++ b/src/qml/qml/v8/qv8qobjectwrapper.cpp
@@ -978,7 +978,7 @@ v8::Local<v8::Object> QQmlPropertyCache::newQObject(QObject *object, QV8Engine *
 
         // XXX TODO: Enables fast property accessors.  These more than double the property access 
         // performance, but the  cost of setting up this structure hasn't been measured so 
-        // its not guarenteed that this is a win overall.  We need to try and measure the cost.
+        // its not guaranteed that this is a win overall.  We need to try and measure the cost.
         for (StringCache::ConstIterator iter = stringCache.begin(); iter != stringCache.end(); ++iter) {
             if (iter.equals(toString) || iter.equals(destroy))
                 continue;
diff --git a/src/quick/items/context2d/qquickcanvasitem.cpp b/src/quick/items/context2d/qquickcanvasitem.cpp
index 5a29928..9b81f92 100644
--- a/src/quick/items/context2d/qquickcanvasitem.cpp
+++ b/src/quick/items/context2d/qquickcanvasitem.cpp
@@ -951,7 +951,7 @@ bool QQuickCanvasItem::isImageLoading(const QUrl& url) const
 }
 /*!
   \qmlmethod QtQuick2::Canvas::isImageLoaded(url image)
-  Returns true if the \a image is sucessfully loaded and ready to use.
+  Returns true if the \a image is successfully loaded and ready to use.
 
   \sa loadImage()
 */
diff --git a/src/quick/items/qquickanimatedsprite.cpp b/src/quick/items/qquickanimatedsprite.cpp
index 0b82e66..a7d0758 100644
--- a/src/quick/items/qquickanimatedsprite.cpp
+++ b/src/quick/items/qquickanimatedsprite.cpp
@@ -319,7 +319,7 @@ struct AnimatedSpriteVertices {
     \qmlproperty bool QtQuick2::AnimatedSprite::frameSync
 
     If true, then the animation will have no duration. Instead, the animation will advance
-    one frame each time a frame is rendered to the screen. This syncronizes it with the painting
+    one frame each time a frame is rendered to the screen. This synchronizes it with the painting
     rate as opposed to elapsed time.
 
     If frameSync is set to true, it overrides both frameRate and frameDuration.
diff --git a/src/quick/items/qquickitem.cpp b/src/quick/items/qquickitem.cpp
index 12474fd..d955d09 100644
--- a/src/quick/items/qquickitem.cpp
+++ b/src/quick/items/qquickitem.cpp
@@ -401,7 +401,7 @@ void QQuickItemKeyFilter::componentComplete()
     KeyNavigation will implicitly set the other direction to return focus to this item. So if you set
     \l left to another item, \l right will be set on that item's KeyNavigation to set focus back to this
     item. However, if that item's KeyNavigation has had right explicitly set then no change will occur.
-    This means that the above example could have been written, with the same behaviour, without specifing
+    This means that the above example could have been written, with the same behaviour, without specifying
     KeyNavigation.right or KeyNavigation.down for any of the items.
 
     \sa {Keys}{Keys attached property}
diff --git a/src/quick/items/qquickitemviewtransition.cpp b/src/quick/items/qquickitemviewtransition.cpp
index 6fd5404..a5359cb 100644
--- a/src/quick/items/qquickitemviewtransition.cpp
+++ b/src/quick/items/qquickitemviewtransition.cpp
@@ -606,7 +606,7 @@ QQuickViewTransitionAttached::QQuickViewTransitionAttached(QObject *parent)
 
     View transitions have access to a ViewTransition attached property that
     provides details of the items that are under transition and the operation that triggered the
-    transition. Since view transitions are run once per item, these details can be used to customise
+    transition. Since view transitions are run once per item, these details can be used to customize
     each transition for each individual item.
 
     The ViewTransition attached property provides the following properties specific to the item to
@@ -663,7 +663,7 @@ QQuickViewTransitionAttached::QQuickViewTransitionAttached(QObject *parent)
     At its simplest, a view transition may just animate an item to its new position following a
     view operation, just as the \c displaced transition does above, or animate some item properties,
     as in the \c add transition above. Additionally, a view transition may make use of the
-    ViewTransition attached property to customise animation behavior for different items. Following
+    ViewTransition attached property to customize animation behavior for different items. Following
     are some examples of how this can be achieved.
 
 
diff --git a/src/quick/items/qquicksprite.cpp b/src/quick/items/qquicksprite.cpp
index d86b810..b171b85 100644
--- a/src/quick/items/qquicksprite.cpp
+++ b/src/quick/items/qquicksprite.cpp
@@ -197,7 +197,7 @@ QT_BEGIN_NAMESPACE
     \qmlproperty bool QtQuick2::Sprite::frameSync
 
     If true, then the animation will have no duration. Instead, the animation will advance
-    one frame each time a frame is rendered to the screen. This syncronizes it with the painting
+    one frame each time a frame is rendered to the screen. This synchronizes it with the painting
     rate as opposed to elapsed time.
 
     If frameSync is set to true, it overrides all of duration, frameRate and frameDuration.
diff --git a/src/quick/items/qquickspriteengine.cpp b/src/quick/items/qquickspriteengine.cpp
index 724d134..1a6c9e5 100644
--- a/src/quick/items/qquickspriteengine.cpp
+++ b/src/quick/items/qquickspriteengine.cpp
@@ -676,7 +676,7 @@ int QQuickStochasticEngine::goalSeek(int curIdx, int spriteIdx, int dist)
         goalName = m_globalGoal;
     if (goalName.isEmpty())
         return -1;
-    //TODO: caching instead of excessively redoing iterative deepening (which was chosen arbitarily anyways)
+    //TODO: caching instead of excessively redoing iterative deepening (which was chosen arbitrarily anyways)
     // Paraphrased - implement in an *efficient* manner
     for (int i=0; i<m_states.count(); i++)
         if (m_states[curIdx]->name() == goalName)
diff --git a/src/quick/items/qquickthreadedwindowmanager.cpp b/src/quick/items/qquickthreadedwindowmanager.cpp
index d654e3a..3bc7211 100644
--- a/src/quick/items/qquickthreadedwindowmanager.cpp
+++ b/src/quick/items/qquickthreadedwindowmanager.cpp
@@ -358,7 +358,7 @@ void QQuickRenderThreadSingleContextWindowManager::run()
             isPostingSyncEvent = true;
 
 #ifdef THREAD_DEBUG
-            printf("                RenderThread: aquired sync lock...\n");
+            printf("                RenderThread: acquired sync lock...\n");
 #endif
             QCoreApplication::postEvent(this, new QEvent(QEvent_Sync));
 
@@ -641,7 +641,7 @@ void QQuickRenderThreadSingleContextWindowManager::lockInGui()
         lock();
 
 #ifdef THREAD_DEBUG
-    printf("GUI: aquired lock... level=%d\n", isGuiLocked);
+    printf("GUI: acquired lock... level=%d\n", isGuiLocked);
 #endif
 }
 
diff --git a/src/quick/items/qquickwindow.cpp b/src/quick/items/qquickwindow.cpp
index c761b38..88aff07 100644
--- a/src/quick/items/qquickwindow.cpp
+++ b/src/quick/items/qquickwindow.cpp
@@ -2699,7 +2699,7 @@ bool QQuickWindow::clearBeforeRendering() const
     initialized.
 
     \warning The returned texture is not memory managed by the scene graph and
-    must be explicitely deleted by the caller on the rendering thread.
+    must be explicitly deleted by the caller on the rendering thread.
     This is acheived by deleting the texture from a QSGNode destructor
     or by using deleteLater() in the case where the texture already has affinity
     to the rendering thread.
diff --git a/src/quick/scenegraph/coreapi/qsggeometry.cpp b/src/quick/scenegraph/coreapi/qsggeometry.cpp
index 8855e5c..50fd336 100644
--- a/src/quick/scenegraph/coreapi/qsggeometry.cpp
+++ b/src/quick/scenegraph/coreapi/qsggeometry.cpp
@@ -224,7 +224,7 @@ const QSGGeometry::AttributeSet &QSGGeometry::defaultAttributes_ColoredPoint2D()
     to be used for textured 2D geometry. The vertex data is internally
     stored as a \c {void *} and is accessible with the vertexData()
     function. Convenience accessors for the common attribute sets are
-    availble with vertexDataAsPoint2D() and
+    available with vertexDataAsPoint2D() and
     vertexDataAsTexturedPoint2D(). Vertex data is allocated by passing
     a vertex count to the constructor or by calling allocate() later.
 
diff --git a/src/quick/scenegraph/coreapi/qsgmaterial.cpp b/src/quick/scenegraph/coreapi/qsgmaterial.cpp
index 50d445c..8d37992 100644
--- a/src/quick/scenegraph/coreapi/qsgmaterial.cpp
+++ b/src/quick/scenegraph/coreapi/qsgmaterial.cpp
@@ -277,7 +277,7 @@ void QSGMaterialShader::updateState(const RenderState & /* state */, QSGMaterial
 
 /*!
     This function is called when the shader is initialized to compile the
-    actual QOpenGLShaderProgram. Do not call it explicitely.
+    actual QOpenGLShaderProgram. Do not call it explicitly.
 
     The default implementation will extract the vertexShader() and
     fragmentShader() and bind the names returned from attributeNames()
@@ -625,7 +625,7 @@ int QSGMaterial::compare(const QSGMaterial *other) const
     \fn QSGMaterialShader *QSGMaterial::createShader() const
 
     This function returns a new instance of a the QSGMaterialShader
-    implementatation used to render geometry for a specifc implementation
+    implementatation used to render geometry for a specific implementation
     of QSGMaterial.
 
     The function will be called only once for each material type that
diff --git a/src/quick/scenegraph/qsgdistancefieldglyphnode.cpp b/src/quick/scenegraph/qsgdistancefieldglyphnode.cpp
index 3f5fb04..7e09e68 100644
--- a/src/quick/scenegraph/qsgdistancefieldglyphnode.cpp
+++ b/src/quick/scenegraph/qsgdistancefieldglyphnode.cpp
@@ -312,7 +312,7 @@ void QSGDistanceFieldGlyphNode::updateGeometry()
         subNode->setPreferredAntialiasingMode(m_antialiasingMode);
         subNode->setGlyphs(m_originalPosition, subNodeGlyphRun);
         subNode->update();
-        subNode->updateGeometry(); // we have to explicity call this now as preprocess won't be called before it's rendered
+        subNode->updateGeometry(); // we have to explicitly call this now as preprocess won't be called before it's rendered
         appendChildNode(subNode);
 
         ++ite;
diff --git a/src/quick/scenegraph/util/qsgsimplematerial.cpp b/src/quick/scenegraph/util/qsgsimplematerial.cpp
index 73f1a2d..87d1104 100644
--- a/src/quick/scenegraph/util/qsgsimplematerial.cpp
+++ b/src/quick/scenegraph/util/qsgsimplematerial.cpp
@@ -138,7 +138,7 @@
     \warning The QSGSimpleMaterialShader relies on template
     instantiation to create a QSGMaterialType which the scene graph
     renderer internally uses to identify this shader. For this reason,
-    the unique QSGSimpleMaterialShader implemenation must be
+    the unique QSGSimpleMaterialShader implementation must be
     instantiated with a unique C++ type.
 
     \sa {Simple Material Example}
diff --git a/src/quick/scenegraph/util/qsgtexture.cpp b/src/quick/scenegraph/util/qsgtexture.cpp
index 98378ca..3564a64 100644
--- a/src/quick/scenegraph/util/qsgtexture.cpp
+++ b/src/quick/scenegraph/util/qsgtexture.cpp
@@ -655,7 +655,7 @@ void QSGPlainTexture::bind()
 /*!
     \fn bool QSGDynamicTexture::updateTexture()
 
-    Call this function to explicitely update the dynamic texture. Calling bind() will bind
+    Call this function to explicitly update the dynamic texture. Calling bind() will bind
     the content that was previously updated.
 
     The function returns true if the texture was changed as a resul of the update; otherwise
diff --git a/src/quick/scenegraph/util/qsgtexturematerial.cpp b/src/quick/scenegraph/util/qsgtexturematerial.cpp
index e10514c..bc96025 100644
--- a/src/quick/scenegraph/util/qsgtexturematerial.cpp
+++ b/src/quick/scenegraph/util/qsgtexturematerial.cpp
@@ -144,7 +144,7 @@ void QSGOpaqueTextureMaterialShader::updateState(const RenderState &state, QSGMa
     attribute set compatible with this material.
 
     The texture to be rendered is can be set using setTexture(). How the
-    texure should be rendered can be specified using setMipmapFiltering(),
+    texture should be rendered can be specified using setMipmapFiltering(),
     setFiltering(), setHorizontalWrapMode() and setVerticalWrapMode().
     The rendering state is set on the texture instance just before it
     is bound.
@@ -334,7 +334,7 @@ int QSGOpaqueTextureMaterial::compare(const QSGMaterial *o) const
     attribute set compatible with this material.
 
     The texture to be rendered is set using setTexture(). How the
-    texure should be rendered can be specified using setMipmapFiltering(),
+    texture should be rendered can be specified using setMipmapFiltering(),
     setFiltering(), setHorizontalWrapMode() and setVerticalWrapMode().
     The rendering state is set on the texture instance just before it
     is bound.
diff --git a/src/quick/util/qquickbind.cpp b/src/quick/util/qquickbind.cpp
index 9bb3185..af57b28 100644
--- a/src/quick/util/qquickbind.cpp
+++ b/src/quick/util/qquickbind.cpp
@@ -102,7 +102,7 @@ public:
 
     In some circumstances you may want to control the value of a property
     only when a certain condition is true (and relinquish control in all
-    other cirumstances). This often isn't possible to accomplish with a direct
+    other circumstances). This often isn't possible to accomplish with a direct
     binding, as you need to supply values for all possible branches.
 
     \code
diff --git a/src/quick/util/qquicklistcompositor.cpp b/src/quick/util/qquicklistcompositor.cpp
index 5713f3f..b728874 100644
--- a/src/quick/util/qquicklistcompositor.cpp
+++ b/src/quick/util/qquicklistcompositor.cpp
@@ -1051,7 +1051,7 @@ void QQuickListCompositor::listItemsInserted(
     This corrects the indexes of each range for that list in the compositor, splitting the range
     in two if the insert index is in the middle of that range.  If a range at the insert position
     has the Prepend flag set then a new range will be inserted at that position with the groups
-    specified in defaultGroups().  If the insert index correponds to the end of a range with
+    specified in defaultGroups().  If the insert index corresponds to the end of a range with
     the Append flag set a new range will be inserted before the end of the append range.
 
     The \a translatedInsertions list is populated with insert notifications for affected
diff --git a/src/quick/util/qquicktransitionmanager.cpp b/src/quick/util/qquicktransitionmanager.cpp
index 910043e..2282490 100644
--- a/src/quick/util/qquicktransitionmanager.cpp
+++ b/src/quick/util/qquicktransitionmanager.cpp
@@ -156,7 +156,7 @@ void QQuickTransitionManager::transition(const QList<QQuickAction> &list,
     // some cases - but whatcha going to do?
     //
     // Note that we only fast forward if both a transition and bindings are
-    // present, as it is unneccessary (and potentially expensive) otherwise.
+    // present, as it is unnecessary (and potentially expensive) otherwise.
 
     if (transition && !d->bindingsList.isEmpty()) {
 
diff --git a/tests/auto/qml/qqmlecmascript/testtypes.cpp b/tests/auto/qml/qqmlecmascript/testtypes.cpp
index a2ccb3a..5c1a242 100644
--- a/tests/auto/qml/qqmlecmascript/testtypes.cpp
+++ b/tests/auto/qml/qqmlecmascript/testtypes.cpp
@@ -266,7 +266,7 @@ void registerTypes()
     qmlRegisterType<MyRevisionedClass,1>("Qt.test",1,1,"MyRevisionedClass");
     qmlRegisterType<MyWorkerObject>("Qt.test", 1,0, "MyWorkerObject");
 
-    // test scarce resource property binding post-evaluation optimisation
+    // test scarce resource property binding post-evaluation optimization
     // and for testing memory usage in property var circular reference test
     qmlRegisterType<ScarceResourceObject>("Qt.test", 1,0, "MyScarceResourceObject");
 
diff --git a/tests/auto/quick/qquicktextedit/tst_qquicktextedit.cpp b/tests/auto/quick/qquicktextedit/tst_qquicktextedit.cpp
index 4953874..b93d9f0 100644
--- a/tests/auto/quick/qquicktextedit/tst_qquicktextedit.cpp
+++ b/tests/auto/quick/qquicktextedit/tst_qquicktextedit.cpp
@@ -2268,7 +2268,7 @@ void tst_qquicktextedit::cursorDelegate()
     view.requestActivateWindow();
     QQuickTextEdit *textEditObject = view.rootObject()->findChild<QQuickTextEdit*>("textEditObject");
     QVERIFY(textEditObject != 0);
-    // Delegate creation is deferred until focus in or cursor visiblity is forced.
+    // Delegate creation is deferred until focus in or cursor visibility is forced.
     QVERIFY(!textEditObject->findChild<QQuickItem*>("cursorInstance"));
     QVERIFY(!textEditObject->isCursorVisible());
     //Test Delegate gets created
diff --git a/tests/auto/quick/qquicktextinput/tst_qquicktextinput.cpp b/tests/auto/quick/qquicktextinput/tst_qquicktextinput.cpp
index 60f7469..5f280d1 100644
--- a/tests/auto/quick/qquicktextinput/tst_qquicktextinput.cpp
+++ b/tests/auto/quick/qquicktextinput/tst_qquicktextinput.cpp
@@ -1533,7 +1533,7 @@ void tst_qquicktextinput::horizontalAlignment_RightToLeft()
     QTest::qWaitForWindowActive(&window);
     QVERIFY(textInput->hasActiveFocus());
 
-    // If there is no commited text, the preedit text should determine the alignment.
+    // If there is no committed text, the preedit text should determine the alignment.
     textInput->setText(QString());
     { QInputMethodEvent ev(rtlText, QList<QInputMethodEvent::Attribute>()); QGuiApplication::sendEvent(textInput, &ev); }
     QCOMPARE(textInput->hAlign(), QQuickTextInput::AlignRight);