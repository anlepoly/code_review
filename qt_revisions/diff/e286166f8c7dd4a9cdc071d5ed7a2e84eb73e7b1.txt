diff --git a/Source/WebCore/ChangeLog b/Source/WebCore/ChangeLog
index 292b7cc..d812c3a 100644
--- a/Source/WebCore/ChangeLog
+++ b/Source/WebCore/ChangeLog
@@ -1,3 +1,18 @@
+2012-12-11  Zeno Albisser  <zeno@webkit.org>
+
+        [Qt][Mac] Fix transparency for WebGL content.
+        https://bugs.webkit.org/show_bug.cgi?id=104659
+
+        When drawing a texture to the TextureMapper the flag SupportsBlending
+        must be passed in order to allow for transparent webgl content.
+        We are doing this for GLX already, but the flag was still missing
+        in GraphicsSurfaceMac.
+
+        Reviewed by Kenneth Rohde Christiansen.
+
+        * platform/graphics/surfaces/mac/GraphicsSurfaceMac.cpp:
+        (WebCore::GraphicsSurface::platformPaintToTextureMapper):
+
 2012-12-05  Allan Sandfeld Jensen  <allan.jensen@digia.com>
 
         [Qt] Don't rely on QMimeDatabase for essential MIME types
diff --git a/Source/WebCore/platform/graphics/surfaces/mac/GraphicsSurfaceMac.cpp b/Source/WebCore/platform/graphics/surfaces/mac/GraphicsSurfaceMac.cpp
index 5dfc8c5..439bf9a 100644
--- a/Source/WebCore/platform/graphics/surfaces/mac/GraphicsSurfaceMac.cpp
+++ b/Source/WebCore/platform/graphics/surfaces/mac/GraphicsSurfaceMac.cpp
@@ -345,7 +345,7 @@ void GraphicsSurface::platformPaintToTextureMapper(TextureMapper* textureMapper,
 {
     TransformationMatrix adjustedTransform = transform;
     adjustedTransform.multiply(TransformationMatrix::rectToRect(FloatRect(FloatPoint::zero(), m_private->size()), targetRect));
-    static_cast<TextureMapperGL*>(textureMapper)->drawTextureRectangleARB(m_private->frontBufferTextureID(), 0, m_private->size(), targetRect, adjustedTransform, opacity, mask);
+    static_cast<TextureMapperGL*>(textureMapper)->drawTextureRectangleARB(m_private->frontBufferTextureID(), TextureMapperGL::SupportsBlending, m_private->size(), targetRect, adjustedTransform, opacity, mask);
 }
 
 uint32_t GraphicsSurface::platformFrontBuffer() const