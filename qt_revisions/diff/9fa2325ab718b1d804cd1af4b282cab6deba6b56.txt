diff --git a/src/script/api/qscriptengine.cpp b/src/script/api/qscriptengine.cpp
index efb19f4..8002454 100644
--- a/src/script/api/qscriptengine.cpp
+++ b/src/script/api/qscriptengine.cpp
@@ -800,10 +800,23 @@ JSC::JSValue JSC_HOST_CALL functionQsTranslate(JSC::ExecState *exec, JSC::JSObje
         return JSC::throwError(exec, JSC::GeneralError, "qsTranslate(): second argument (text) must be a string");
     if ((args.size() > 2) && !args.at(2).isString())
         return JSC::throwError(exec, JSC::GeneralError, "qsTranslate(): third argument (comment) must be a string");
-    if ((args.size() > 3) && !args.at(3).isString())
-        return JSC::throwError(exec, JSC::GeneralError, "qsTranslate(): fourth argument (encoding) must be a string");
-    if ((args.size() > 4) && !args.at(4).isNumber())
-        return JSC::throwError(exec, JSC::GeneralError, "qsTranslate(): fifth argument (n) must be a number");
+
+    int n = -1;
+    if ((args.size() > 3)) {
+        if (args.at(3).isString()) {
+            qWarning("qsTranslate(): specifying the encoding as fourth argument is deprecated");
+            if (args.size() > 4) {
+                if (args.at(4).isNumber())
+                    n = args.at(4).toInt32(exec);
+                else
+                    return JSC::throwError(exec, JSC::GeneralError, "qsTranslate(): fifth argument (n) must be a number");
+            }
+        } else if (args.at(3).isNumber()) {
+            n = args.at(3).toInt32(exec);
+        } else {
+            return JSC::throwError(exec, JSC::GeneralError, "qsTranslate(): fourth argument (n) must be a number");
+        }
+    }
 #ifndef QT_NO_QOBJECT
     JSC::UString context = args.at(0).toString(exec);
 #endif
@@ -812,26 +825,13 @@ JSC::JSValue JSC_HOST_CALL functionQsTranslate(JSC::ExecState *exec, JSC::JSObje
     JSC::UString comment;
     if (args.size() > 2)
         comment = args.at(2).toString(exec);
-    QCoreApplication::Encoding encoding = QCoreApplication::UnicodeUTF8;
-    if (args.size() > 3) {
-        JSC::UString encStr = args.at(3).toString(exec);
-        if (encStr == "CodecForTr")
-            encoding = QCoreApplication::DefaultCodec;
-        else if (encStr == "UnicodeUTF8")
-            encoding = QCoreApplication::UnicodeUTF8;
-        else
-            return JSC::throwError(exec, JSC::GeneralError, QString::fromLatin1("qsTranslate(): invalid encoding '%0'").arg(encStr));
-    }
-    int n = -1;
-    if (args.size() > 4)
-        n = args.at(4).toInt32(exec);
 #endif
     JSC::UString result;
 #ifndef QT_NO_QOBJECT
     result = QCoreApplication::translate(context.UTF8String().c_str(),
                                          text.UTF8String().c_str(),
                                          comment.UTF8String().c_str(),
-                                         encoding, n);
+                                         n);
 #else
     result = text;
 #endif
@@ -886,7 +886,7 @@ JSC::JSValue JSC_HOST_CALL functionQsTr(JSC::ExecState *exec, JSC::JSObject*, JS
     result = QCoreApplication::translate(context.UTF8String().c_str(),
                                          text.UTF8String().c_str(),
                                          comment.UTF8String().c_str(),
-                                         QCoreApplication::UnicodeUTF8, n);
+                                         n);
 #else
     result = text;
 #endif
diff --git a/tests/auto/qscriptengine/translatable.js b/tests/auto/qscriptengine/translatable.js
index c0d7ed0..5d6ad9b 100644
--- a/tests/auto/qscriptengine/translatable.js
+++ b/tests/auto/qscriptengine/translatable.js
@@ -9,4 +9,4 @@ var greeting_strings = [
 qsTr("One", "not the same one");
 
 qsTr("%n message(s) saved", "", 10);
-qsTranslate("FooContext", "%n fooish bar(s) found", "", "UnicodeUTF8", 10);
+qsTranslate("FooContext", "%n fooish bar(s) found", "", 10);
diff --git a/tests/auto/qscriptengine/tst_qscriptengine.cpp b/tests/auto/qscriptengine/tst_qscriptengine.cpp
index a7aee35..3494813 100644
--- a/tests/auto/qscriptengine/tst_qscriptengine.cpp
+++ b/tests/auto/qscriptengine/tst_qscriptengine.cpp
@@ -5020,13 +5020,11 @@ void tst_QScriptEngine::translateScript_data()
     QTest::newRow("eval('qsTranslate(\\'FooContext\\', \\'Goodbye\\')')@translatable.js")
             << QString::fromLatin1("eval('qsTranslate(\\'FooContext\\', \\'Goodbye\\')')") << fileName << QString::fromLatin1("Farvel");
 
-    QTest::newRow("qsTranslate('FooContext', 'Goodbye', '', 'UnicodeUTF8')@translatable.js")
-            << QString::fromLatin1("qsTranslate('FooContext', 'Goodbye', '', 'UnicodeUTF8')") << fileName << QString::fromLatin1("Farvel");
-    QTest::newRow("qsTranslate('FooContext', 'Goodbye', '', 'CodecForTr')@translatable.js")
-            << QString::fromLatin1("qsTranslate('FooContext', 'Goodbye', '', 'CodecForTr')") << fileName << QString::fromLatin1("Farvel");
+    QTest::newRow("qsTranslate('FooContext', 'Goodbye', '')@translatable.js")
+            << QString::fromLatin1("qsTranslate('FooContext', 'Goodbye', '')") << fileName << QString::fromLatin1("Farvel");
 
-    QTest::newRow("qsTranslate('FooContext', 'Goodbye', '', 'UnicodeUTF8', 42)@translatable.js")
-            << QString::fromLatin1("qsTranslate('FooContext', 'Goodbye', '', 'UnicodeUTF8', 42)") << fileName << QString::fromLatin1("Goodbye");
+    QTest::newRow("qsTranslate('FooContext', 'Goodbye', '', 42)@translatable.js")
+            << QString::fromLatin1("qsTranslate('FooContext', 'Goodbye', '', 42)") << fileName << QString::fromLatin1("Goodbye");
 
     QTest::newRow("qsTr('One', 'not the same one')@translatable.js")
             << QString::fromLatin1("qsTr('One', 'not the same one')") << fileName << QString::fromLatin1("Enda en");
@@ -5035,10 +5033,10 @@ void tst_QScriptEngine::translateScript_data()
             << QString::fromLatin1("qsTr('One', 'not the same one', 42)") << fileName << QString::fromLatin1("One");
 
     // Plural
-    QTest::newRow("qsTranslate('FooContext', '%n fooish bar(s) found', '', 'UnicodeUTF8', 1)@translatable.js")
-            << QString::fromLatin1("qsTranslate('FooContext', '%n fooish bar(s) found', '', 'UnicodeUTF8', 1)") << fileName << QString::fromLatin1("1 fooaktig bar funnet");
-    QTest::newRow("qsTranslate('FooContext', '%n fooish bar(s) found', '', 'UnicodeUTF8', 2)@translatable.js")
-            << QString::fromLatin1("qsTranslate('FooContext', '%n fooish bar(s) found', '', 'UnicodeUTF8', 2)") << fileName << QString::fromLatin1("2 fooaktige barer funnet");
+    QTest::newRow("qsTranslate('FooContext', '%n fooish bar(s) found', '', 1)@translatable.js")
+            << QString::fromLatin1("qsTranslate('FooContext', '%n fooish bar(s) found', '', 1)") << fileName << QString::fromLatin1("1 fooaktig bar funnet");
+    QTest::newRow("qsTranslate('FooContext', '%n fooish bar(s) found', '', 2)@translatable.js")
+            << QString::fromLatin1("qsTranslate('FooContext', '%n fooish bar(s) found', '', 2)") << fileName << QString::fromLatin1("2 fooaktige barer funnet");
 
     // Don't exist in translation
     QTest::newRow("qsTr('Three')@translatable.js")
@@ -5168,9 +5166,7 @@ void tst_QScriptEngine::translateWithInvalidArgs_data()
     QTest::newRow("qsTranslate(123, 'foo')")  << "qsTranslate(123, 'foo')" << "Error: qsTranslate(): first argument (context) must be a string";
     QTest::newRow("qsTranslate('foo', 123)")  << "qsTranslate('foo', 123)" << "Error: qsTranslate(): second argument (text) must be a string";
     QTest::newRow("qsTranslate('foo', 'bar', 123)")  << "qsTranslate('foo', 'bar', 123)" << "Error: qsTranslate(): third argument (comment) must be a string";
-    QTest::newRow("qsTranslate('foo', 'bar', 'baz', 123)")  << "qsTranslate('foo', 'bar', 'baz', 123)" << "Error: qsTranslate(): fourth argument (encoding) must be a string";
     QTest::newRow("qsTranslate('foo', 'bar', 'baz', 'zab', 'rab')")  << "qsTranslate('foo', 'bar', 'baz', 'zab', 'rab')" << "Error: qsTranslate(): fifth argument (n) must be a number";
-    QTest::newRow("qsTranslate('foo', 'bar', 'baz', 'zab', 123)")  << "qsTranslate('foo', 'bar', 'baz', 'zab', 123)" << "Error: qsTranslate(): invalid encoding 'zab'";
 
     QTest::newRow("qsTrId()")  << "qsTrId()" << "Error: qsTrId() requires at least one argument";
     QTest::newRow("qsTrId(123)")  << "qsTrId(123)" << "TypeError: qsTrId(): first argument (id) must be a string";