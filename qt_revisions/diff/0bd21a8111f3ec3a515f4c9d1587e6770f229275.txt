diff --git a/src/corelib/global/qlogging.cpp b/src/corelib/global/qlogging.cpp
index 5270213..fb17496 100644
--- a/src/corelib/global/qlogging.cpp
+++ b/src/corelib/global/qlogging.cpp
@@ -126,7 +126,7 @@ static void qEmergencyOut(QtMsgType msgType, const char *msg, va_list ap) Q_DECL
 
     if (msgType == QtFatalMsg
             || (msgType == QtWarningMsg
-                && (!qgetenv("QT_FATAL_WARNINGS").isNull())) ) {
+                && qEnvironmentVariableIsSet("QT_FATAL_WARNINGS"))) {
 #if defined(Q_CC_MSVC) && defined(QT_DEBUG) && defined(_DEBUG) && defined(_CRT_ERROR)
         // get the current report mode
         int reportMode = _CrtSetReportMode(_CRT_ERROR, _CRTDBG_MODE_WNDW);
@@ -679,7 +679,7 @@ void qt_message_output(QtMsgType msgType, const QMessageLogContext &context, con
 
     if (msgType == QtFatalMsg
             || (msgType == QtWarningMsg
-                && (!qgetenv("QT_FATAL_WARNINGS").isNull())) ) {
+                && qEnvironmentVariableIsSet("QT_FATAL_WARNINGS")) ) {
 
 #if defined(Q_CC_MSVC) && defined(QT_DEBUG) && defined(_DEBUG) && defined(_CRT_ERROR)
         // get the current report mode
diff --git a/src/corelib/kernel/qcoreapplication.cpp b/src/corelib/kernel/qcoreapplication.cpp
index 4c1f159..d3fb7f4 100644
--- a/src/corelib/kernel/qcoreapplication.cpp
+++ b/src/corelib/kernel/qcoreapplication.cpp
@@ -350,7 +350,7 @@ void QCoreApplicationPrivate::createEventDispatcher()
     eventDispatcher = new QEventDispatcherBlackberry(q);
 #  else
 #  if !defined(QT_NO_GLIB)
-    if (qgetenv("QT_NO_GLIB").isEmpty() && QEventDispatcherGlib::versionSupported())
+    if (qEnvironmentVariableIsEmpty("QT_NO_GLIB") && QEventDispatcherGlib::versionSupported())
         eventDispatcher = new QEventDispatcherGlib(q);
     else
 #  endif
diff --git a/src/corelib/kernel/qeventdispatcher_glib.cpp b/src/corelib/kernel/qeventdispatcher_glib.cpp
index 3f75c4e..73abe8c 100644
--- a/src/corelib/kernel/qeventdispatcher_glib.cpp
+++ b/src/corelib/kernel/qeventdispatcher_glib.cpp
@@ -293,7 +293,7 @@ static GSourceFuncs postEventSourceFuncs = {
 QEventDispatcherGlibPrivate::QEventDispatcherGlibPrivate(GMainContext *context)
     : mainContext(context)
 {
-    if (qgetenv("QT_NO_THREADED_GLIB").isEmpty()) {
+    if (qEnvironmentVariableIsEmpty("QT_NO_THREADED_GLIB")) {
         static QBasicMutex mutex;
         QMutexLocker locker(&mutex);
         if (!g_thread_supported())
diff --git a/src/corelib/mimetypes/qmimeprovider.cpp b/src/corelib/mimetypes/qmimeprovider.cpp
index 1f7d06c..3b0e0f5 100644
--- a/src/corelib/mimetypes/qmimeprovider.cpp
+++ b/src/corelib/mimetypes/qmimeprovider.cpp
@@ -188,7 +188,7 @@ enum {
 bool QMimeBinaryProvider::isValid()
 {
 #if defined(QT_USE_MMAP)
-    if (!qgetenv("QT_NO_MIME_CACHE").isEmpty())
+    if (!qEnvironmentVariableIsEmpty("QT_NO_MIME_CACHE"))
         return false;
 
     Q_ASSERT(m_cacheFiles.isEmpty()); // this method is only ever called once
diff --git a/src/corelib/thread/qthread_unix.cpp b/src/corelib/thread/qthread_unix.cpp
index b3040f3..e9db276 100644
--- a/src/corelib/thread/qthread_unix.cpp
+++ b/src/corelib/thread/qthread_unix.cpp
@@ -256,8 +256,8 @@ void QThreadPrivate::createEventDispatcher(QThreadData *data)
     data->eventDispatcher = new QEventDispatcherBlackberry;
 #else
 #if !defined(QT_NO_GLIB)
-    if (qgetenv("QT_NO_GLIB").isEmpty()
-        && qgetenv("QT_NO_THREADED_GLIB").isEmpty()
+    if (qEnvironmentVariableIsEmpty("QT_NO_GLIB")
+        && qEnvironmentVariableIsEmpty("QT_NO_THREADED_GLIB")
         && QEventDispatcherGlib::versionSupported())
         data->eventDispatcher = new QEventDispatcherGlib;
     else
diff --git a/src/platformsupport/eventdispatchers/qgenericunixeventdispatcher.cpp b/src/platformsupport/eventdispatchers/qgenericunixeventdispatcher.cpp
index 5853ed5..a109295 100644
--- a/src/platformsupport/eventdispatchers/qgenericunixeventdispatcher.cpp
+++ b/src/platformsupport/eventdispatchers/qgenericunixeventdispatcher.cpp
@@ -48,7 +48,7 @@ QT_BEGIN_NAMESPACE
 class QAbstractEventDispatcher *createUnixEventDispatcher()
 {
 #if !defined(QT_NO_GLIB) && !defined(Q_OS_WIN)
-    if (qgetenv("QT_NO_GLIB").isEmpty() && QEventDispatcherGlib::versionSupported())
+    if (qEnvironmentVariableIsEmpty("QT_NO_GLIB") && QEventDispatcherGlib::versionSupported())
         return new QPAEventDispatcherGlib();
     else
 #endif