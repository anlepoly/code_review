diff --git a/src/quick/items/qquickanimatedimage.cpp b/src/quick/items/qquickanimatedimage.cpp
index 9f18d87..6b4a26a 100644
--- a/src/quick/items/qquickanimatedimage.cpp
+++ b/src/quick/items/qquickanimatedimage.cpp
@@ -100,30 +100,6 @@ QT_BEGIN_NAMESPACE
     \sa QQuickImageProvider
 */
 
-/*!
-    \qmlproperty bool QtQuick2::AnimatedImage::asynchronous
-
-    Specifies that images on the local filesystem should be loaded
-    asynchronously in a separate thread.  The default value is
-    false, causing the user interface thread to block while the
-    image is loaded.  Setting \a asynchronous to true is useful where
-    maintaining a responsive user interface is more desirable
-    than having images immediately visible.
-
-    Note that this property is only valid for images read from the
-    local filesystem.  Images loaded via a network resource (e.g. HTTP)
-    are always loaded asynchronously.
-*/
-
-/*!
-    \qmlproperty bool QtQuick2::AnimatedImage::mirror
-
-    This property holds whether the image should be horizontally inverted
-    (effectively displaying a mirrored image).
-
-    The default value is false.
-*/
-
 QQuickAnimatedImage::QQuickAnimatedImage(QQuickItem *parent)
     : QQuickImage(*(new QQuickAnimatedImagePrivate), parent)
 {
diff --git a/src/quick/items/qquickpathview.cpp b/src/quick/items/qquickpathview.cpp
index 748166a..a30a292 100644
--- a/src/quick/items/qquickpathview.cpp
+++ b/src/quick/items/qquickpathview.cpp
@@ -705,6 +705,10 @@ int QQuickPathView::currentIndex() const
     return d->currentIndex;
 }
 
+/*!
+    \qmlproperty int QtQuick2::PathView::currentItem
+    This property holds the current item in the view.
+*/
 void QQuickPathView::setCurrentIndex(int idx)
 {
     Q_D(QQuickPathView);
diff --git a/src/quick/items/qquickspritesequence.cpp b/src/quick/items/qquickspritesequence.cpp
index e7d1e3a..7654d41 100644
--- a/src/quick/items/qquickspritesequence.cpp
+++ b/src/quick/items/qquickspritesequence.cpp
@@ -235,7 +235,7 @@ struct SpriteVertices {
     Default is true.
 */
 /*!
-    \qmlproperty string QtQuick2::SpriteSequence::goalSprite
+    \qmlproperty string QtQuick2::SpriteSequence::currentSprite
 
     The name of the Sprite which is currently animating.
 */
diff --git a/src/quick/items/qquicktext.cpp b/src/quick/items/qquicktext.cpp
index 16cf6ac..e39ae00 100644
--- a/src/quick/items/qquicktext.cpp
+++ b/src/quick/items/qquicktext.cpp
@@ -635,6 +635,11 @@ void QQuickTextLine::setY(qreal y)
         m_line->setPosition(QPointF(m_line->x(), y));
 }
 
+/*!
+    \qmlmethod QtQuick2::Text::doLayout()
+
+    Triggers a re-layout of the displayed text.
+*/
 void QQuickText::doLayout()
 {
     Q_D(QQuickText);
@@ -1285,13 +1290,16 @@ QQuickText::~QQuickText()
 */
 
 /*!
-    \qmlsignal QtQuick2::Text::onLineLaidOut(line)
+    \qmlsignal QtQuick2::Text::onLineLaidOut(object line)
+
+    This handler is called for each line of text that is laid out during the layout
+    process. The specified \a line object provides more details about the line that
+    is currently being laid out.
 
-    This handler is called for every line during the layout process.
     This gives the opportunity to position and resize a line as it is being laid out.
     It can for example be used to create columns or lay out text around objects.
 
-    The properties of a line are:
+    The properties of the specified \a line object are:
     \list
     \li number (read-only)
     \li x
diff --git a/src/quick/items/qquicktextedit.cpp b/src/quick/items/qquicktextedit.cpp
index d84a0e6..2cc0dd4 100644
--- a/src/quick/items/qquicktextedit.cpp
+++ b/src/quick/items/qquicktextedit.cpp
@@ -1484,7 +1484,7 @@ void QQuickTextEdit::paste()
 
 
 /*!
-    \qmlmethod QtQuick2::QQuickTextEdit::undo()
+    \qmlmethod QtQuick2::TextEdit::undo()
 
     Undoes the last operation if undo is \l {canUndo}{available}. Deselects any
     current selection, and updates the selection start to the current cursor
@@ -1498,7 +1498,7 @@ void QQuickTextEdit::undo()
 }
 
 /*!
-    \qmlmethod QtQuick2::QQuickTextEdit::redo()
+    \qmlmethod QtQuick2::TextEdit::redo()
 
     Redoes the last operation if redo is \l {canRedo}{available}.
 */
@@ -2131,7 +2131,7 @@ void QQuickTextEdit::insert(int position, const QString &text)
 }
 
 /*!
-    \qmlmethod string QtQuick2::TextEdit::getText(int start, int end)
+    \qmlmethod string QtQuick2::TextEdit::remove(int start, int end)
 
     Removes the section of text that is between the \a start and \a end positions from the TextEdit.
 */
diff --git a/src/quick/util/qquickpath.cpp b/src/quick/util/qquickpath.cpp
index c942959..e32ae29 100644
--- a/src/quick/util/qquickpath.cpp
+++ b/src/quick/util/qquickpath.cpp
@@ -1070,8 +1070,8 @@ void QQuickPathQuad::setControlY(qreal y)
 }
 
 /*!
-   \qmlproperty real QtQuick2::PathCubic::relativeControlX
-   \qmlproperty real QtQuick2::PathCubic::relativeControlY
+   \qmlproperty real QtQuick2::PathQuad::relativeControlX
+   \qmlproperty real QtQuick2::PathQuad::relativeControlY
 
     Defines the position of the control point relative to the curve's start.