diff --git a/src/quick/items/qquicktext.cpp b/src/quick/items/qquicktext.cpp
index 70a1551..f34c062 100644
--- a/src/quick/items/qquicktext.cpp
+++ b/src/quick/items/qquicktext.cpp
@@ -913,12 +913,13 @@ QRectF QQuickTextPrivate::setupTextLayout(qreal *const naturalWidth, qreal *cons
                 QTextLayout widthLayout(layoutText.mid(characterCount), scaledFont);
                 widthLayout.setTextOption(layout.textOption());
 
+                widthLayout.beginLayout();
                 for (; unwrappedLineCount <= maxLineCount; ++unwrappedLineCount) {
                     QTextLine line = widthLayout.createLine();
                     if (!line.isValid())
                         break;
                 }
-
+                widthLayout.endLayout();
                 *naturalWidth = qMax(*naturalWidth, widthLayout.maximumWidth());
             }
 
diff --git a/tests/auto/quick/qquicktext/tst_qquicktext.cpp b/tests/auto/quick/qquicktext/tst_qquicktext.cpp
index 86de501..7ef232b 100644
--- a/tests/auto/quick/qquicktext/tst_qquicktext.cpp
+++ b/tests/auto/quick/qquicktext/tst_qquicktext.cpp
@@ -1582,18 +1582,20 @@ void tst_qquicktext::implicitSize()
     QFETCH(QString, wrap);
     QFETCH(QString, elide);
     QString componentStr = "import QtQuick 2.0\nText { "
+            "property real iWidth: implicitWidth; "
             "text: \"" + text + "\"; "
             "width: " + width + "; "
             "textFormat: " + format + "; "
             "wrapMode: " + wrap + "; "
             "elide: " + elide + "; "
-            "maximumLineCount: 1 }";
+            "maximumLineCount: 2 }";
     QQmlComponent textComponent(&engine);
     textComponent.setData(componentStr.toLatin1(), QUrl::fromLocalFile(""));
     QQuickText *textObject = qobject_cast<QQuickText*>(textComponent.create());
 
     QVERIFY(textObject->width() < textObject->implicitWidth());
     QVERIFY(textObject->height() == textObject->implicitHeight());
+    QCOMPARE(textObject->property("iWidth").toReal(), textObject->implicitWidth());
 
     textObject->resetWidth();
     QVERIFY(textObject->width() == textObject->implicitWidth());