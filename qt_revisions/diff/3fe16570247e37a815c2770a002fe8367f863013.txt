diff --git a/src/serialportengine_unix.cpp b/src/serialportengine_unix.cpp
index 5334b0e..7f70979 100755
--- a/src/serialportengine_unix.cpp
+++ b/src/serialportengine_unix.cpp
@@ -155,7 +155,9 @@ bool UnixSerialPortEngine::open(const QString &location, QIODevice::OpenMode mod
 {
     // First, here need check locked device or not.
     bool byCurrPid = false;
-    if (TTYLocker::isLocked(location, &byCurrPid)) {
+    QByteArray portName = fromSystemLocation(location).toLocal8Bit();
+    const char *ptr = portName.constData();
+    if (TTYLocker::isLocked(ptr, &byCurrPid)) {
         dptr->setError(SerialPort::PermissionDeniedError);
         return false;
     }
@@ -183,8 +185,8 @@ bool UnixSerialPortEngine::open(const QString &location, QIODevice::OpenMode mod
     }
 
     // Try lock device by location and check it state is locked.
-    TTYLocker::lock(location);
-    if (!TTYLocker::isLocked(location, &byCurrPid)) {
+    TTYLocker::lock(ptr);
+    if (!TTYLocker::isLocked(ptr, &byCurrPid)) {
         dptr->setError(SerialPort::PermissionDeniedError);
         return false;
     }
@@ -239,8 +241,10 @@ void UnixSerialPortEngine::close(const QString &location)
 
     // Try unlock device by location.
     bool byCurrPid = false;
-    if (TTYLocker::isLocked(location, &byCurrPid) && byCurrPid)
-        TTYLocker::unlock(location);
+    QByteArray portName = fromSystemLocation(location).toLocal8Bit();
+    const char *ptr = portName.constData();
+    if (TTYLocker::isLocked(ptr, &byCurrPid) && byCurrPid)
+        TTYLocker::unlock(ptr);
 
     m_descriptor = -1;
     m_isCustomRateSupported = false;
diff --git a/src/serialportinfo_mac.cpp b/src/serialportinfo_mac.cpp
index fc557ea..a3245a7 100644
--- a/src/serialportinfo_mac.cpp
+++ b/src/serialportinfo_mac.cpp
@@ -284,7 +284,7 @@ QList<qint32> SerialPortInfo::standardRates()
 bool SerialPortInfo::isBusy() const
 {
     bool currPid = false;
-    return TTYLocker::isLocked(systemLocation(), &currPid);
+    return TTYLocker::isLocked(portName().toLocal8Bit().constData(), &currPid);
 }
 
 bool SerialPortInfo::isValid() const
diff --git a/src/serialportinfo_unix.cpp b/src/serialportinfo_unix.cpp
index 0236289..6e2856f 100644
--- a/src/serialportinfo_unix.cpp
+++ b/src/serialportinfo_unix.cpp
@@ -254,7 +254,7 @@ QList<qint32> SerialPortInfo::standardRates()
 bool SerialPortInfo::isBusy() const
 {
     bool currentPid = false;
-    return TTYLocker::isLocked(systemLocation(), &currentPid);
+    return TTYLocker::isLocked(portName().toLocal8Bit().constData(), &currentPid);
 }
 
 bool SerialPortInfo::isValid() const
diff --git a/src/ttylocker_unix.cpp b/src/ttylocker_unix.cpp
index 06dd04a..f137616 100644
--- a/src/ttylocker_unix.cpp
+++ b/src/ttylocker_unix.cpp
@@ -58,15 +58,6 @@
 #  include <QtCore/qstringlist.h>
 #endif // defined (HAVE_BAUDBOY_H)
 
-// Truncate the full name of the device to short.
-// For example the long name "/dev/ttyS0" will cut up to "ttyS0".
-static
-QString shortNameFromLocation(const QString &location)
-{
-    return QDir::cleanPath(location).section(QDir::separator() , -1);
-}
-
-
 #if !(defined (HAVE_BAUDBOY_H) || defined (HAVE_LOCKDEV_H))
 
 static
@@ -84,60 +75,25 @@ const char *entryLockDirectoryList[] = {
 // Verification of directories is of the order in accordance with the order
 // of records in the variable lockDirList.
 static
-QString getFirstSharedLockDir()
+QString lookupFirstSharedLockDir()
 {
     for (int i = 0; entryLockDirectoryList[i] != 0; ++i) {
-        if (::access(entryLockDirectoryList[i], (R_OK | W_OK)) == 0)
+        if (::access(entryLockDirectoryList[i], R_OK | W_OK) == 0)
             return QLatin1String(entryLockDirectoryList[i]);
     }
     return QString();
 }
 
-/*
-// Returns the name of the lock file, which is tied to the
-// major and minor device number, eg "LCK.30.50" etc.
-static QString get_lock_file_in_numeric_form(const QString &location)
-{
-    QString result = getFirstSharedLockDir();
-    if (!result.isEmpty()) {
-        struct stat buf;
-        if (::stat(location.toLocal8Bit().constData(), &buf))
-            result.clear();
-        else {
-            result.append("/LCK.%1.%2");
-            result = result.arg(major(buf.st_rdev)).arg(minor(buf.st_rdev));
-        }
-    }
-    return result;
-}
-*/
-
 // Returns the name of the lock file which is tied to the
 // device name, eg "LCK..ttyS0", etc.
 static
-QString getLockFileInNamedForm(const QString &location)
-{
-    QString result(getFirstSharedLockDir());
-    if (!result.isEmpty()) {
-        result.append(QLatin1String("/LCK..%1"));
-        result = result.arg(shortNameFromLocation(location));
-    }
-    return result;
-}
-
-/*
-// Returns the name of the lock file, which is tied to the number of
-// the process which uses a device, such as "LCK...999", etc.
-static QString get_lock_file_in_pid_form(const QString &location)
+QString generateLockFileNameAsNamedForm(const char *portName)
 {
-    QString result = getFirstSharedLockDir();
-    if (!result.isEmpty()) {
-        result.append("/LCK...%1");
-        result = result.arg(::getpid());
-    }
+    QString result(lookupFirstSharedLockDir());
+    if (!result.isEmpty())
+        result.append(QLatin1String("/LCK..") + QLatin1String(portName));
     return result;
 }
-*/
 
 #endif //!(defined (HAVE_BAUDBOY_H) || defined (HAVE_LOCKDEV_H))
 
@@ -145,107 +101,79 @@ static QString get_lock_file_in_pid_form(const QString &location)
 QT_BEGIN_NAMESPACE_SERIALPORT
 
 // Try lock serial device. However, other processes can not access it.
-bool TTYLocker::lock(const QString &location)
+bool TTYLocker::lock(const char *portName)
 {
-    bool result = false;
 #if defined (HAVE_BAUDBOY_H)
-    if (::ttylock(shortNameFromLocation(location).toLocal8Bit().constData()))
-        ::ttywait(shortNameFromLocation(location).toLocal8Bit().constData());
-    result = (::ttylock(shortNameFromLocation(location).toLocal8Bit().constData()) != -1);
+    if (::ttylock(portName)
+        ::ttywait(portName);
+    return ::ttylock(portName) != -1;
 #elif defined (HAVE_LOCKDEV_H)
-    result = (::dev_lock(shortNameFromLocation(location).toLocal8Bit().constData()) != -1);
+    return ::dev_lock(portName) != -1;
 #else
-    QFile f(getLockFileInNamedForm(location));
+    QFile f(generateLockFileNameAsNamedForm(portName));
     if (f.open(QIODevice::WriteOnly | QIODevice::Truncate)) {
         QString content(QLatin1String("     %1 %2\x0A"));
         content = content.arg(::getpid()).arg(::getuid());
-
-        if (f.write(content.toLocal8Bit()) > 0)
-            result = true;
+        if (f.write(content.toLocal8Bit()) > 0) {
+            f.close();
+            return true;
+        }
         f.close();
     }
+    return false;
 #endif
-    return result;
 }
 
 // Try unlock serial device. However, other processes can access it.
-bool TTYLocker::unlock(const QString &location)
+bool TTYLocker::unlock(const char *portName)
 {
-    bool result = true;
 #if defined (HAVE_BAUDBOY_H)
-    result = (::ttyunlock(shortNameFromLocation(location).toLocal8Bit().constData()) != -1);
+    return ::ttyunlock(portName != -1;
 #elif defined (HAVE_LOCKDEV_H)
-    result = (::dev_unlock(shortNameFromLocation(location).toLocal8Bit().constData(), ::getpid()) != -1);
+    return ::dev_unlock(portName, ::getpid()) != -1;
 #else
-    QFile f(getLockFileInNamedForm(location));
-    f.remove();
+    QFile f(generateLockFileNameAsNamedForm(portName));
+    return f.remove();
 #endif
-    return result;
 }
 
 // Verifies the device is locked or not.
 // If returned currentPid = true - this means that the device is locked the current process.
-bool TTYLocker::isLocked(const QString &location, bool *currentPid)
+bool TTYLocker::isLocked(const char *portName, bool *currentPid)
 {
-    bool result = false;
-#if defined (HAVE_BAUDBOY_H)
-    result = (::ttylocked(shortNameFromLocation(location).toLocal8Bit().constData()) != -1);
+    if (!currentPid)
+        return true;
+
     *currentPid = false;
+
+#if defined (HAVE_BAUDBOY_H)
+    return ::ttylocked(portName) != -1;
 #elif defined (HAVE_LOCKDEV_H)
-    result = (::dev_testlock(shortNameFromLocation(location).toLocal8Bit().constData()) != -1);
-    *currentPid = false;
+    return ::dev_testlock(portName) != -1;
 #else
 
-    enum CheckPidResult {
-        CHK_PID_PROCESS_NOT_EXISTS,     /* process does not exist */
-        CHK_PID_PROCESS_EXISTS_FOREIGN, /* process exists and it is "foreign" (ie not current) */
-        CHK_PID_PROCESS_EXISTS_CURRENT, /* process exists and it is "their" (ie, current) */
-        CHK_PID_UNKNOWN_ERROR           /* another error */
-    };
+    QFile f(generateLockFileNameAsNamedForm(portName));
+    if (!f.exists())
+        return false;
+    if (!f.open(QIODevice::ReadOnly))
+        return true;
 
-    *currentPid = false;
+    QString content(QLatin1String(f.readAll()));
+    f.close();
 
-    QFile f(getLockFileInNamedForm(location));
-    if (f.exists()) {
-        if (!f.open(QIODevice::ReadOnly)) {
-            result = true;
-        } else {
-            QString content(QLatin1String(f.readAll()));
-            f.close();
-            bool ok = false;
-            const int pid = content.section(' ', 0, 0, QString::SectionSkipEmpty).toInt(&ok);
-            if (ok) {
-
-                // Checks the validity of the process number that was obtained from the Lock file.
-                enum CheckPidResult pidResult = CHK_PID_UNKNOWN_ERROR;
-
-                if (::kill(pid, 0) == -1) {
-                    pidResult = (errno == ESRCH) ?
-                                (CHK_PID_PROCESS_NOT_EXISTS) : (CHK_PID_UNKNOWN_ERROR);
-                } else {
-                    pidResult = (::getpid() == pid) ?
-                                (CHK_PID_PROCESS_EXISTS_CURRENT) : (CHK_PID_PROCESS_EXISTS_FOREIGN);
-                }
-
-                switch (pidResult) {
-                case CHK_PID_PROCESS_NOT_EXISTS:
-                    break;
-                case CHK_PID_PROCESS_EXISTS_FOREIGN:
-                    result = true;
-                    break;
-                case CHK_PID_PROCESS_EXISTS_CURRENT:
-                    result = true;
-                    *currentPid = true;
-                    break;
-                default:
-                    result = true;
-                    break;
-                }
-            }
-        }
+    const pid_t pid = content.section(' ', 0, 0, QString::SectionSkipEmpty).toInt();
+
+    if (::kill(pid, 0) == -1) {
+        if (errno == ESRCH) // Process does not exists
+            return false;
+    } else {
+        if (::getpid() == pid) // Process exists and it is "their", i.e current
+            *currentPid = true;
     }
+
+    return true;
+
 #endif
-    return result;
 }
 
 QT_END_NAMESPACE_SERIALPORT
diff --git a/src/ttylocker_unix_p.h b/src/ttylocker_unix_p.h
index dce4a72..09c2036 100644
--- a/src/ttylocker_unix_p.h
+++ b/src/ttylocker_unix_p.h
@@ -49,9 +49,9 @@ QT_BEGIN_NAMESPACE_SERIALPORT
 class TTYLocker
 {
 public:
-    static bool lock(const QString &location);
-    static bool unlock(const QString &location);
-    static bool isLocked(const QString &location, bool *currentPid);
+    static bool lock(const char *portName);
+    static bool unlock(const char *portName);
+    static bool isLocked(const char *portName, bool *currentPid);
 };
 
 QT_END_NAMESPACE_SERIALPORT