diff --git a/src/doc/src/qtmultimedia-cpp.qdoc b/src/doc/src/qtmultimedia-cpp.qdoc
deleted file mode 100644
index c996339..0000000
--- a/src/doc/src/qtmultimedia-cpp.qdoc
+++ /dev/null
@@ -1,45 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/
-**
-** This file is part of the documentation of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:FDL$
-** GNU Free Documentation License
-** Alternatively, this file may be used under the terms of the GNU Free
-** Documentation License version 1.3 as published by the Free Software
-** Foundation and appearing in the file included in the packaging of
-** this file.
-**
-** Other Usage
-** Alternatively, this file may be used in accordance with the terms
-** and conditions contained in a signed written agreement between you
-** and Nokia.
-**
-**
-**
-**
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-/*!
-    \module QtMultimedia
-    \title QtMultimedia Module
-    \ingroup modules
-
-    \brief The QtMultimedia module provides audio, video, radio and camera functionality.
-
-    To include the definitions of the module's classes, use the
-    following directive:
-
-    \snippet doc/src/snippets/code/doc_src_qtmultimedia.cpp 1
-
-    To link against the module, add this line to your \l qmake \c
-    .pro file:
-
-    \snippet doc/src/snippets/code/doc_src_qtmultimedia.pro 0
-
-*/
diff --git a/src/imports/multimedia/qdeclarativecamera.cpp b/src/imports/multimedia/qdeclarativecamera.cpp
index b082b55..c39daaf 100644
--- a/src/imports/multimedia/qdeclarativecamera.cpp
+++ b/src/imports/multimedia/qdeclarativecamera.cpp
@@ -225,7 +225,7 @@ QDeclarativeCamera::Error QDeclarativeCamera::errorCode() const
 /*!
     \qmlproperty string QtMultimedia5::Camera::errorString
 
-    A description of the current error, if any.
+    This property holds the last error string, if any.
 
     \sa QtMultimedia5::Camera::onError
 */
@@ -237,24 +237,22 @@ QString QDeclarativeCamera::errorString() const
 /*!
     \qmlproperty enumeration QtMultimedia5::Camera::availability
 
-    Returns the availability state of the camera.
+    This property holds the availability state of the camera.
 
-    This is one of:
+    The availability states can be one of the following:
 
     \table
     \header \li Value \li Description
     \row \li Available
         \li The camera is available to use
     \row \li Busy
-        \li The camera is usually available to use, but is currently busy.
-           This can happen when some other process needs to use the camera
-           hardware.
+        \li The camera is busy at the moment as it is being used by another process.
     \row \li Unavailable
         \li The camera is not available to use (there may be no camera
            hardware)
     \row \li ResourceMissing
-        \li There is one or more resources missing, so the camera cannot
-           be used.  It may be possible to try again at a later time.
+        \li The camera cannot be used because of missing resources.
+         It may be possible to try again at a later time.
     \endtable
  */
 QDeclarativeCamera::Availability QDeclarativeCamera::availability() const
@@ -266,6 +264,9 @@ QDeclarativeCamera::Availability QDeclarativeCamera::availability() const
 /*!
     \qmlproperty enumeration QtMultimedia5::Camera::captureMode
 
+    This property holds the camera capture mode, which can be one of the
+    following:
+
     \table
     \header \li Value \li Description
     \row \li CaptureViewfinder
@@ -294,7 +295,7 @@ void QDeclarativeCamera::setCaptureMode(QDeclarativeCamera::CaptureMode mode)
 /*!
     \qmlproperty enumeration QtMultimedia5::Camera::cameraState
 
-    The current state of the camera object.
+    This property holds the camera object's current state, which can be one of the following:
 
     \table
     \header \li Value \li Description
@@ -331,7 +332,7 @@ QDeclarativeCamera::State QDeclarativeCamera::cameraState() const
 /*!
     \qmlproperty enumeration QtMultimedia5::Camera::cameraStatus
 
-    The current status of the camera instance.
+    This property holds the camera object's current status, which can be one of the following:
 
     \table
     \header \li Value \li Description
@@ -339,17 +340,17 @@ QDeclarativeCamera::State QDeclarativeCamera::cameraState() const
          \li The camera has been started and can produce data,
              viewfinder displays video frames.
 
-             Depending on backend, changing some camera settings like
-             capture mode, codecs or resolution in ActiveState may lead
-             to changing the camera status to LoadedStatus and StartingStatus while
-             the settings are applied and back to ActiveStatus when the camera is ready.
+             Depending on backend, changing camera settings such as
+             capture mode, codecs, or resolution in ActiveState may lead
+             to changing the status to LoadedStatus and StartingStatus while
+             the settings are applied, and back to ActiveStatus when the camera is ready.
 
     \row \li StartingStatus
-         \li The camera is starting in result of state transition to Camera.ActiveState.
+         \li The camera is starting as a result of state transition to Camera.ActiveState.
              The camera service is not ready to capture yet.
 
     \row \li StoppingStatus
-         \li The camera is stopping in result of state transition from Camera.ActiveState
+         \li The camera is stopping as a result of state transition from Camera.ActiveState
              to Camera.LoadedState or Camera.UnloadedState.
 
     \row \li StandbyStatus
@@ -360,15 +361,15 @@ QDeclarativeCamera::State QDeclarativeCamera::cameraState() const
     \row \li LoadedStatus
          \li The camera is loaded and ready to be configured.
              This status indicates the camera device is opened and
-             it's possible to query for supported image and video capture settings,
-             like resolution, framerate and codecs.
+             it's possible to query for supported image and video capture settings
+             such as resolution, frame rate, and codecs.
 
     \row \li LoadingStatus
-         \li The camera device loading in result of state transition from
+         \li The camera device loading as a result of state transition from
              Camera.UnloadedState to Camera.LoadedState or Camera.ActiveState.
 
     \row \li UnloadingStatus
-         \li The camera device is unloading in result of state transition from
+         \li The camera device is unloading as a result of state transition from
              Camera.LoadedState or Camera.ActiveState to Camera.UnloadedState.
 
     \row \li UnloadedStatus
@@ -432,25 +433,27 @@ void QDeclarativeCamera::stop()
 /*!
     \qmlproperty enumeration QtMultimedia5::Camera::lockStatus
 
-    The overall status for all the requested camera locks.
+    This property holds the status of all the requested camera locks.
+
+    The status can be one of the following values:
 
     \table
     \header \li Value \li Description
     \row \li Unlocked
         \li The application is not interested in camera settings value.
-        The camera may keep this parameter without changes, this is common with camera focus,
+        The camera may keep this parameter without changes, which is common with camera focus,
         or adjust exposure and white balance constantly to keep the viewfinder image nice.
 
     \row \li Searching
-        \li The application has requested the camera focus, exposure or white balance lock with
+        \li The application has requested the camera focus, exposure, or white balance lock with
         searchAndLock(). This state indicates the camera is focusing or calculating exposure and white balance.
 
     \row \li Locked
-        \li The camera focus, exposure or white balance is locked.
-        The camera is ready to capture, application may check the exposure parameters.
+        \li The camera focus, exposure, or white balance is locked.
+        The camera is ready to capture, and the application may check the exposure parameters.
 
         The locked state usually means the requested parameter stays the same,
-        except in the cases when the parameter is requested to be constantly updated.
+        except in cases where the parameter is requested to be updated constantly.
         For example in continuous focusing mode, the focus is considered locked as long
         as the object is in focus, even while the actual focusing distance may be constantly changing.
     \endtable
@@ -458,7 +461,9 @@ void QDeclarativeCamera::stop()
 /*!
     \property QDeclarativeCamera::lockStatus
 
-    The overall status for all the requested camera locks.
+    This property holds the status of all the requested camera locks.
+
+    The status can be one of the following:
 
     \table
     \header \li Value \li Description
@@ -473,10 +478,10 @@ void QDeclarativeCamera::stop()
 
     \row \li Locked
         \li The camera focus, exposure or white balance is locked.
-        The camera is ready to capture, application may check the exposure parameters.
+        The camera is ready to capture, and the application may check the exposure parameters.
 
         The locked state usually means the requested parameter stays the same,
-        except in the cases when the parameter is requested to be constantly updated.
+        except in the cases when the parameter is requested to be updated constantly.
         For example in continuous focusing mode, the focus is considered locked as long
         and the object is in focus, even while the actual focusing distance may be constantly changing.
     \endtable
@@ -510,34 +515,44 @@ void QDeclarativeCamera::unlock()
 {
     m_camera->unlock();
 }
+/*!
+    \property QDeclarativeCamera::maximumOpticalZoom
 
+    This property holds the maximum optical zoom factor supported, or 1.0 if optical zoom is not supported.
+*/
 /*!
     \qmlproperty real QtMultimedia5::Camera::maximumOpticalZoom
-    \property QDeclarativeCamera::maximumOpticalZoom
 
-    The maximum optical zoom factor, or 1.0 if optical zoom is not supported.
+    This property holds the maximum optical zoom factor supported, or 1.0 if optical zoom is not supported.
 */
 qreal QDeclarativeCamera::maximumOpticalZoom() const
 {
     return m_camera->focus()->maximumOpticalZoom();
 }
+/*!
+    \property  QDeclarativeCamera::maximumDigitalZoom
 
+    This property holds the maximum digital zoom factor supported, or 1.0 if digital zoom is not supported.
+*/
 /*!
     \qmlproperty real QtMultimedia5::Camera::maximumDigitalZoom
-    \property  QDeclarativeCamera::maximumDigitalZoom
 
-    The maximum digital zoom factor, or 1.0 if digital zoom is not supported.
+    This property holds the maximum digital zoom factor supported, or 1.0 if digital zoom is not supported.
 */
 qreal QDeclarativeCamera::maximumDigitalZoom() const
 {
     return m_camera->focus()->maximumDigitalZoom();
 }
+/*!
+    \property QDeclarativeCamera::opticalZoom
+
+    This property holds the current optical zoom factor.
+*/
 
 /*!
     \qmlproperty real QtMultimedia5::Camera::opticalZoom
-    \property QDeclarativeCamera::opticalZoom
 
-    The current optical zoom factor.
+    This property holds the current optical zoom factor.
 */
 qreal QDeclarativeCamera::opticalZoom() const
 {
@@ -548,12 +563,15 @@ void QDeclarativeCamera::setOpticalZoom(qreal value)
 {
     m_camera->focus()->zoomTo(value, digitalZoom());
 }
+/*!
+    \property   QDeclarativeCamera::digitalZoom
 
+    This property holds the current digital zoom factor.
+*/
 /*!
     \qmlproperty real QtMultimedia5::Camera::digitalZoom
-    \property   QDeclarativeCamera::digitalZoom
 
-    The current digital zoom factor.
+    This property holds the current digital zoom factor.
 */
 qreal QDeclarativeCamera::digitalZoom() const
 {
@@ -568,13 +586,13 @@ void QDeclarativeCamera::setDigitalZoom(qreal value)
 /*!
     \qmlproperty variant QtMultimedia5::Camera::mediaObject
 
-    The media object for the Camera.
+    This property holds the media object for the camera.
 */
 
 /*!
     \qmlproperty enumeration QtMultimedia5::Camera::errorCode
 
-    Error state of the camera.
+    This property holds the last error code.
 
     \sa QtMultimedia5::Camera::onError
 */
@@ -582,8 +600,9 @@ void QDeclarativeCamera::setDigitalZoom(qreal value)
 /*!
     \qmlsignal QtMultimedia5::Camera::onError(errorCode, errorString)
 
-    This handler is called when an error occurs.  The enumeration value \a errorCode is one of the
-    values defined below, and a descriptive string value is available in \a errorString.
+    This handler is called when an error occurs. The enumeration value
+    \a errorCode is one of the values defined below, and a descriptive string
+    value is available in \a errorString.
 
     \table
     \header \li Value \li Description
diff --git a/src/imports/multimedia/qdeclarativecameracapture.cpp b/src/imports/multimedia/qdeclarativecameracapture.cpp
index f5a072f..f028bce 100644
--- a/src/imports/multimedia/qdeclarativecameracapture.cpp
+++ b/src/imports/multimedia/qdeclarativecameracapture.cpp
@@ -126,16 +126,27 @@ QDeclarativeCameraCapture::~QDeclarativeCameraCapture()
 }
 
 /*!
-    \qmlproperty bool QtMultimedia5::CameraCapture::ready
     \property QDeclarativeCameraCapture::ready
 
-    Indicates camera is ready to capture photo.
+    This property holds a bool value indicating whether the camera
+    is ready to capture photos or not.
+
+   If camera is not ready to capture image immediately,
+   the capture request is queued with all the related camera settings,
+   and the request will be executed as soon as possible.
+*/
+
+/*!
+    \qmlproperty bool QtMultimedia5::CameraCapture::ready
+
+    This property holds a bool value indicating whether the camera
+    is ready to capture photos or not.
 
    It's permissible to call capture() while the camera is active
    regardless of the \e ready property value.
    If camera is not ready to capture image immediately,
-   the capture request is queued with all the related camera settings
-   to be executed as soon as possible.
+   the capture request is queued with all the related camera settings,
+   and the request will be executed as soon as possible.
 */
 bool QDeclarativeCameraCapture::isReadyForCapture() const
 {
@@ -194,12 +205,15 @@ void QDeclarativeCameraCapture::cancelCapture()
 {
     m_capture->cancelCapture();
 }
+/*!
+    \property QDeclarativeCameraCapture::capturedImagePath
 
+    This property holds the location of the last captured image.
+*/
 /*!
     \qmlproperty string QtMultimedia5::CameraCapture::capturedImagePath
-    \property QDeclarativeCameraCapture::capturedImagePath
 
-    The path to the last captured image.
+    This property holds the location of the last captured image.
 */
 QString QDeclarativeCameraCapture::capturedImagePath() const
 {
@@ -232,13 +246,18 @@ void QDeclarativeCameraCapture::_q_captureFailed(int id, QCameraImageCapture::Er
     qWarning() << "QCameraImageCapture error:" << message;
     emit captureFailed(id, message);
 }
+/*!
+    \property QDeclarativeCameraCapture::resolution
+
+    This property holds the resolution/size of the image to be captured.
+    If empty, the system chooses the appropriate resolution.
+*/
 
 /*!
     \qmlproperty size QtMultimedia5::CameraCapture::resolution
-    \property QDeclarativeCameraCapture::resolution
 
-    The resolution to capture the image at.  If empty, the system will pick
-    a good size.
+    This property holds the resolution/size of the image to be captured.
+    If empty, the system chooses the appropriate resolution.
 */
 
 QSize QDeclarativeCameraCapture::resolution()
@@ -259,13 +278,16 @@ QCameraImageCapture::Error QDeclarativeCameraCapture::error() const
 {
     return m_capture->error();
 }
+/*!
+    \property QDeclarativeCameraCapture::errorString
 
+    This property holds the error message related to the last capture.
+*/
 
 /*!
     \qmlproperty string QtMultimedia5::CameraCapture::errorString
-    \property QDeclarativeCameraCapture::errorString
 
-    The last capture related error message.
+    This property holds the error message related to the last capture.
 */
 QString QDeclarativeCameraCapture::errorString() const
 {
diff --git a/src/imports/multimedia/qdeclarativecameraexposure.cpp b/src/imports/multimedia/qdeclarativecameraexposure.cpp
index e9b7f88..fddc682 100644
--- a/src/imports/multimedia/qdeclarativecameraexposure.cpp
+++ b/src/imports/multimedia/qdeclarativecameraexposure.cpp
@@ -118,12 +118,15 @@ QDeclarativeCameraExposure::QDeclarativeCameraExposure(QCamera *camera, QObject
 QDeclarativeCameraExposure::~QDeclarativeCameraExposure()
 {
 }
+/*!
+    \property QDeclarativeCameraExposure::exposureCompensation
 
+    This property holds the adjustment value for the automatically calculated exposure. The value is in EV units.
+ */
 /*!
     \qmlproperty real QtMultimedia5::CameraExposure::exposureCompensation
-    \property QDeclarativeCameraExposure::exposureCompensation
 
-    Adjustment for the automatically calculated exposure.  The value is
+    This property holds the adjustment value for the automatically calculated exposure.  The value is
     in EV units.
  */
 qreal QDeclarativeCameraExposure::exposureCompensation() const
@@ -135,24 +138,33 @@ void QDeclarativeCameraExposure::setExposureCompensation(qreal ev)
 {
     m_exposure->setExposureCompensation(ev);
 }
-
 /*!
-    \qmlproperty integer QtMultimedia5::CameraExposure::iso
     \property QDeclarativeCameraExposure::iso
 
-    The sensor's ISO sensitivity.
+    This property holds the sensor's ISO sensitivity value.
+ */
+/*!
+    \qmlproperty int QtMultimedia5::CameraExposure::iso
+
+    This property holds the sensor's ISO sensitivity value.
  */
 int QDeclarativeCameraExposure::isoSensitivity() const
 {
     return m_exposure->isoSensitivity();
 }
+/*!
+    \property QDeclarativeCameraExposure::shutterSpeed
 
+    This property holds the camera's shutter speed value in seconds.
+    To affect the shutter speed you can use the \l manualShutterSpeed
+    property and \l setAutoShutterSpeed().
+
+*/
 /*!
     \qmlproperty real QtMultimedia5::CameraExposure::shutterSpeed
-    \property QDeclarativeCameraExposure::shutterSpeed
 
-    The camera's current shutter speed setting, in seconds.  To affect
-    the shutter speed you can use the \l manualShutterSpeed
+    This property holds the camera's current shutter speed value in seconds.
+    To affect the shutter speed you can use the \l manualShutterSpeed
     property and \l setAutoShutterSpeed().
 
 */
@@ -160,12 +172,17 @@ qreal QDeclarativeCameraExposure::shutterSpeed() const
 {
     return m_exposure->shutterSpeed();
 }
+/*!
+    \property QDeclarativeCameraExposure::aperture
+
+    This property holds the current lens aperture as an F number (the ratio of the focal length to effective aperture diameter).
 
+    \sa manualAperture, setAutoAperture()
+*/
 /*!
     \qmlproperty real QtMultimedia5::CameraExposure::aperture
-    \property QDeclarativeCameraExposure::aperture
 
-    The current lens aperture as an F number (the ratio of
+    This property holds the current lens aperture as an F number (the ratio of
     the focal length to effective aperture diameter).
 
     \sa manualAperture, setAutoAperture()
@@ -174,13 +191,20 @@ qreal QDeclarativeCameraExposure::aperture() const
 {
     return m_exposure->aperture();
 }
+/*!
+    \property QDeclarativeCameraExposure::manualIso
+
+    This property holds the ISO settings for capturing photos.
+
+    If the value is negative, the camera will
+    automatically determine an appropriate value.
 
+    \sa iso, setAutoIsoSensitivity()
+*/
 /*!
     \qmlproperty real QtMultimedia5::CameraExposure::manualIso
-    \property QReal QDeclarativeCameraExposure::manualIso
 
-    This property allows you to set a specific ISO setting
-    for image capturing.
+    This property holds the ISO settings for capturing photos.
 
     If a negative value is specified, the camera will
     automatically determine an appropriate value.
@@ -203,15 +227,21 @@ void QDeclarativeCameraExposure::setManualIsoSensitivity(int iso)
 
     emit manualIsoSensitivityChanged(iso);
 }
+/*!
+    \property QDeclarativeCameraExposure::manualShutterSpeed
 
+    This property holds the shutter speed value (in seconds).
+    If the value is less than zero, the camera automatically
+    determines an appropriate shutter speed.
+
+    \l shutterSpeed, setAutoShutterSpeed()
+*/
 /*!
     \qmlproperty real QtMultimedia5::CameraExposure::manualShutterSpeed
-    \property QDeclarativeCameraExposure::manualShutterSpeed
 
-    This property allows you to set the shutter speed to
-    use during capture (in seconds).  If the value is less than zero,
-    then an automatic value is used and the camera will
-    determine an appropriate shutter speed.
+    This property holds the shutter speed value (in seconds).
+    If the value is less than zero, the camera automatically
+    determines an appropriate shutter speed.
 
     \l shutterSpeed, setAutoShutterSpeed()
 */
@@ -230,15 +260,25 @@ void QDeclarativeCameraExposure::setManualShutterSpeed(qreal speed)
 
     emit manualShutterSpeedChanged(speed);
 }
+/*!
+    \property QDeclarativeCameraExposure::manualAperture
+
+    This property holds aperture (F number) value
+    for capturing photos.
+
+    If the value is less than zero,
+    the camera automatically determines an appropriate aperture value.
 
+    \l aperture, setAutoAperture()
+*/
 /*!
     \qmlproperty real QtMultimedia5::CameraExposure::manualAperture
-    \property QDeclarativeCameraExposure::manualAperture
 
-    This property allows you to set the aperture (F number)
-    setting to use during capture.  If the value is less than zero,
-    then an automatic value is used and the camera will
-    determine an appropriate aperture value.
+    This property holds the aperture (F number) value
+    for capturing photos.
+
+    If the value is less than zero, the camera automatically
+    determines an appropriate aperture value.
 
     \l aperture, setAutoAperture()
 */
@@ -284,12 +324,18 @@ void QDeclarativeCameraExposure::setAutoIsoSensitivity()
 {
     setManualIsoSensitivity(-1);
 }
+/*!
+    \property QDeclarativeCameraExposure::exposureMode
 
+    This property holds the camera exposure mode. The mode can one of the values in \l QCameraExposure::ExposureMode.
+*/
 /*!
     \qmlproperty enumeration QtMultimedia5::CameraExposure::exposureMode
     \property QDeclarativeCameraExposure::exposureMode
 
-    Set the camera exposure mode to one of the following:
+    This property holds the camera exposure mode.
+
+    The mode can be one of the following:
 
     \table
     \header \li Value \li Description
@@ -320,13 +366,18 @@ void QDeclarativeCameraExposure::setExposureMode(QDeclarativeCamera::ExposureMod
         emit exposureModeChanged(exposureMode());
     }
 }
+/*!
+    \property QDeclarativeCameraExposure::spotMeteringPoint
 
+    This property holds the relative frame coordinates of the point to use
+    for exposure metering. This point is only used in spot metering mode, and it
+    typically defaults to the center \c (0.5, 0.5).
+ */
 /*!
     \qmlproperty QPointF QtMultimedia5::CameraExposure::spotMeteringPoint
-    \property QDeclarativeCameraExposure::spotMeteringPoint
 
-    The relative frame coordinates of the point to use for exposure metering.
-    This point is only used in spot metering mode, and typically defaults
+    The property holds the frame coordinates of the point to use for exposure metering.
+    This point is only used in spot metering mode, and it typically defaults
     to the center \c (0.5, 0.5).
  */
 
@@ -343,13 +394,19 @@ void QDeclarativeCameraExposure::setSpotMeteringPoint(const QPointF &point)
     if (oldPoint != spotMeteringPoint())
         emit spotMeteringPointChanged(spotMeteringPoint());
 }
+/*!
+    \property QDeclarativeCameraExposure::meteringMode
 
+    This property holds the camera metering mode (how exposure is balanced).
+    The mode can be one of the constants in \l QCameraExposure::MeteringMode.
+*/
 /*!
     \qmlproperty enumeration QtMultimedia5::CameraExposure::meteringMode
     \property QDeclarativeCameraExposure::meteringMode
 
-    Set the camera metering mode (how exposure is balanced)
-    to one of the following:
+    This property holds the camera metering mode (how exposure is balanced).
+
+    The mode can be one of the following:
 
     \table
     \header \li Value \li Description
diff --git a/src/imports/multimedia/qdeclarativecameraflash.cpp b/src/imports/multimedia/qdeclarativecameraflash.cpp
index fb12563..faff5fc 100644
--- a/src/imports/multimedia/qdeclarativecameraflash.cpp
+++ b/src/imports/multimedia/qdeclarativecameraflash.cpp
@@ -89,22 +89,31 @@ QDeclarativeCameraFlash::QDeclarativeCameraFlash(QCamera *camera, QObject *paren
 QDeclarativeCameraFlash::~QDeclarativeCameraFlash()
 {
 }
+/*!
+    \property bool QDeclarativeCameraFlash::ready
 
+    This property indicates whether the flash is charged.
+*/
 /*!
     \qmlproperty bool QtMultimedia5::CameraFlash::ready
-    \property bool QDeclarativeCameraFlash::ready
 
-    Indicates flash is charged.
+    This property indicates whether the flash is charged.
 */
 bool QDeclarativeCameraFlash::isFlashReady() const
 {
     return m_exposure->isFlashReady();
 }
+/*!
+    \property QDeclarativeCameraFlash::mode
 
+    This property holds the camera flash mode. The mode can be one of the constants in \l QCameraExposure::FlashMode.
+*/
 /*!
     \qmlproperty enumeration QtMultimedia5::CameraFlash::mode
-    \property int QDeclarativeCameraFlash::mode
 
+    This property holds the camera flash mode.
+
+    The mode can be one of the following:
     \table
     \header \li Value \li Description
     \row \li Camera.FlashOff             \li Flash is Off.
diff --git a/src/imports/multimedia/qdeclarativecamerafocus.cpp b/src/imports/multimedia/qdeclarativecamerafocus.cpp
index 80fa9ce..4303ab1 100644
--- a/src/imports/multimedia/qdeclarativecamerafocus.cpp
+++ b/src/imports/multimedia/qdeclarativecamerafocus.cpp
@@ -112,13 +112,47 @@ QDeclarativeCameraFocus::QDeclarativeCameraFocus(QCamera *camera, QObject *paren
 QDeclarativeCameraFocus::~QDeclarativeCameraFocus()
 {
 }
+/*!
+    \property QDeclarativeCameraFocus::focusMode
+
+    This property holds the current camera focus mode.
+
+    It's possible to combine multiple QCameraFocus::FocusMode enum values,
+    for example QCameraFocus::MacroFocus + QCameraFocus::ContinuousFocus.
 
+    In automatic focusing modes, the \l focusPointMode
+    and \l focusZones properties provide information and control
+    over how automatic focusing is performed.
+*/
 
 /*!
-    \qmlproperty QtMultimedia5::Camera::FocusMode CameraFocus::focusMode
-    \property QDeclarativeCameraFocus::focusMode
+    \qmlproperty enumeration CameraFocus::focusMode
+
+    This property holds the current camera focus mode, which can be one of the following values:
 
-    The current camera focus mode.
+    \table
+     \header
+      \li Value
+      \li Description
+     \row
+      \li FocusManual
+      \li Manual or fixed focus mode.
+     \row
+      \li FocusHyperfocal
+      \li Focus to hyperfocal distance, with the maximum depth of field achieved. All objects at distances from half of this distance out to infinity will be acceptably sharp.
+     \row
+      \li FocusInfinity
+      \li Focus strictly to infinity.
+     \row
+      \li FocusAuto
+      \li One-shot auto focus mode.
+     \row
+      \li FocusContinuous
+      \li Continuous auto focus mode.
+     \row
+      \li FocusMacro
+      \li One shot auto focus to objects close to camera.
+    \endtable
 
     It's possible to combine multiple Camera::FocusMode values,
     for example Camera.FocusMacro + Camera.FocusContinuous.
@@ -147,18 +181,43 @@ void QDeclarativeCameraFocus::setFocusMode(QDeclarativeCamera::FocusMode mode)
 {
     m_focus->setFocusMode(QCameraFocus::FocusModes(int(mode)));
 }
-
 /*!
-    \qmlproperty QtMultimedia5::CameraFocus::FocusPointMode CameraFocus::focusPointMode
     \property QDeclarativeCameraFocus::focusPointMode
 
-    The current camera focus point mode.  This is used in automatic
-    focusing modes to determine what to focus on.
+    This property holds the current camera focus point mode. It is used in
+    automatic focusing modes to determine what to focus on.
 
-    If the current focus point mode is \c Camera.FocusPointCustom, the
+    If the current focus point mode is \l QCameraFocus::FocusPointCustom, the
     \l customFocusPoint property allows you to specify which part of
     the frame to focus on.
 */
+/*!
+    \qmlproperty enumeration CameraFocus::focusPointMode
+
+    This property holds the current camera focus point mode. It is used in automatic
+    focusing modes to determine what to focus on. If the current
+    focus point mode is \c Camera.FocusPointCustom, the \l customFocusPoint
+    property allows you to specify which part of the frame to focus on.
+
+    The property can take one of the following values:
+    \table
+     \header
+      \li Value
+      \li Description
+     \row
+      \li FocusPointAuto
+      \li Automatically select one or multiple focus points.
+     \row
+      \li FocusPointCenter
+      \li Focus to the frame center.
+     \row
+      \li FocusPointFaceDetection
+      \li Focus on faces in the frame.
+     \row
+      \li FocusPointCustom
+      \li Focus to the custom point, defined by the customFocusPoint property.
+    \endtable
+*/
 QDeclarativeCamera::FocusPointMode QDeclarativeCameraFocus::focusPointMode() const
 {
     return QDeclarativeCamera::FocusPointMode(m_focus->focusPointMode());
@@ -182,12 +241,20 @@ bool QDeclarativeCameraFocus::isFocusPointModeSupported(QDeclarativeCamera::Focu
 {
     return m_focus->isFocusPointModeSupported(QCameraFocus::FocusPointMode(mode));
 }
-
 /*!
-    \qmlproperty QPointF QtMultimedia5::CameraFocus::customFocusPoint
   \property QDeclarativeCameraFocus::customFocusPoint
 
-  Position of custom focus point, in relative frame coordinates:
+  This property holds the position of the custom focus point in relative
+  frame coordinates. For example, QPointF(0,0) pointing to the left top corner of the frame, and QPointF(0.5,0.5)
+  pointing to the center of the frame.
+
+  Custom focus point is used only in QCameraFocus::FocusPointCustom focus mode.
+*/
+
+/*!
+  \qmlproperty point QtMultimedia5::CameraFocus::customFocusPoint
+
+  This property holds the position of custom focus point, in relative frame coordinates:
   QPointF(0,0) points to the left top frame point, QPointF(0.5,0.5)
   points to the frame center.
 
@@ -206,13 +273,23 @@ void QDeclarativeCameraFocus::setCustomFocusPoint(const QPointF &point)
         emit customFocusPointChanged(customFocusPoint());
     }
 }
-
 /*!
-    \qmlproperty QPointF QtMultimedia5::CameraFocus::focusZones
   \property QDeclarativeCameraFocus::focusZones
 
-  List of current camera focus zones,
-  each including \c area specified in the same coordinates as \l customFocusPoint
+  This property holds the list of current camera focus zones,
+  each including \c area specified in the same coordinates as \l customFocusPoint, and zone \c status as one of the following values:
+    \table
+    \header \li Value \li Description
+    \row \li QCameraFocusZone::Unused  \li This focus point area is currently unused in autofocusing.
+    \row \li QCameraFocusZone::Selected    \li This focus point area is used in autofocusing, but is not in focus.
+    \row \li QCameraFocusZone::Focused  \li This focus point is used in autofocusing, and is in focus.
+    \endtable
+*/
+/*!
+  \qmlproperty list<focusZone> QtMultimedia5::CameraFocus::focusZones
+
+  This property holds the list of current camera focus zones,
+  each including \c area specified in the same coordinates as \l customFocusPoint,
   and zone \c status as one of the following values:
 
     \table
@@ -222,7 +299,6 @@ void QDeclarativeCameraFocus::setCustomFocusPoint(const QPointF &point)
     \row \li Camera.FocusAreaFocused  \li This focus point is used in autofocusing, and is in focus.
     \endtable
 
-
   \qml
 
   VideoOutput {
diff --git a/src/imports/multimedia/qdeclarativecamerarecorder.cpp b/src/imports/multimedia/qdeclarativecamerarecorder.cpp
index ccf87a2..1523cc7 100644
--- a/src/imports/multimedia/qdeclarativecamerarecorder.cpp
+++ b/src/imports/multimedia/qdeclarativecamerarecorder.cpp
@@ -101,8 +101,7 @@ QDeclarativeCameraRecorder::~QDeclarativeCameraRecorder()
 /*!
     \qmlproperty size QtMultimedia5::CameraRecorder::resolution
 
-    The video frame dimensions to use when capturing
-    video.
+    This property holds the video frame dimensions to be used for video capture.
 */
 QSize QDeclarativeCameraRecorder::captureResolution()
 {
@@ -112,8 +111,8 @@ QSize QDeclarativeCameraRecorder::captureResolution()
 /*!
     \qmlproperty string QtMultimedia5::CameraRecorder::audioCodec
 
-    The audio codec to use for recording video.
-    Typically this is something like \c aac or \c amr-wb.
+    This property holds the audio codec to be used for recording video.
+    Typically this is \c aac or \c amr-wb.
 
     \sa {QtMultimedia5::CameraImageProcessing::whiteBalanceMode}{whileBalanceMode}
 */
@@ -125,8 +124,8 @@ QString QDeclarativeCameraRecorder::audioCodec() const
 /*!
     \qmlproperty string QtMultimedia5::CameraRecorder::videoCodec
 
-    The video codec to use for recording video.
-    Typically this is something like \c h264.
+    This property holds the video codec to be used for recording video.
+    Typically this is \c h264.
 */
 QString QDeclarativeCameraRecorder::videoCodec() const
 {
@@ -136,8 +135,8 @@ QString QDeclarativeCameraRecorder::videoCodec() const
 /*!
     \qmlproperty string QtMultimedia5::CameraRecorder::mediaContainer
 
-    The media container to use for recording video.
-    Typically this is something like \c mp4.
+    This property holds the media container to be used for recording video.
+    Typically this is \c mp4.
 */
 QString QDeclarativeCameraRecorder::mediaContainer() const
 {
@@ -183,8 +182,7 @@ void QDeclarativeCameraRecorder::setMediaContainer(const QString &container)
 /*!
     \qmlproperty qreal QtMultimedia5::CameraRecorder::frameRate
 
-    The video framerate to use when recording video,
-    in frames per second.
+    This property holds the framerate (in frames per second) to be used for recording video.
 */
 qreal QDeclarativeCameraRecorder::frameRate() const
 {
@@ -194,8 +192,7 @@ qreal QDeclarativeCameraRecorder::frameRate() const
 /*!
     \qmlproperty int QtMultimedia5::CameraRecorder::videoBitRate
 
-    The video bit rate to use when recording video,
-    in bits per second.
+    This property holds the bit rate (in bits per second) to be used for recording video.
 */
 int QDeclarativeCameraRecorder::videoBitRate() const
 {
@@ -205,8 +202,7 @@ int QDeclarativeCameraRecorder::videoBitRate() const
 /*!
     \qmlproperty int QtMultimedia5::CameraRecorder::audioBitRate
 
-    The audio bit rate to use when recording video,
-    in bits per second.
+    This property holds the audio bit rate (in bits per second) to be used for recording video.
 */
 int QDeclarativeCameraRecorder::audioBitRate() const
 {
@@ -216,7 +212,7 @@ int QDeclarativeCameraRecorder::audioBitRate() const
 /*!
     \qmlproperty int QtMultimedia5::CameraRecorder::audioChannels
 
-    The number of audio channels to encode when
+    This property indicates the number of audio channels to be encoded while
     recording video (1 is mono, 2 is stereo).
 */
 int QDeclarativeCameraRecorder::audioChannels() const
@@ -227,8 +223,7 @@ int QDeclarativeCameraRecorder::audioChannels() const
 /*!
     \qmlproperty int QtMultimedia5::CameraRecorder::audioSampleRate
 
-    The audio sample rate to encode audio at, when
-    recording video.
+    This property holds the sample rate to be used to encode audio while recording video.
 */
 int QDeclarativeCameraRecorder::audioSampleRate() const
 {
@@ -238,7 +233,9 @@ int QDeclarativeCameraRecorder::audioSampleRate() const
 /*!
     \qmlproperty enumeration QtMultimedia5::CameraRecorder::videoEncodingMode
 
-    The type of encoding method to use when recording video.
+    This property holds the type of encoding method to be used for recording video.
+
+    The following are the different encoding methods used:
 
     \table
     \header \li Value \li Description
@@ -348,7 +345,7 @@ void QDeclarativeCameraRecorder::setVideoEncodingMode(QDeclarativeCameraRecorder
 /*!
     \qmlproperty enumeration QtMultimedia5::CameraRecorder::errorCode
 
-    The current error code, if any.
+    This property holds the last error code.
 
     \table
     \header \li Value \li Description
@@ -374,7 +371,7 @@ QDeclarativeCameraRecorder::Error QDeclarativeCameraRecorder::errorCode() const
 /*!
     \qmlproperty string QtMultimedia5::CameraRecorder::errorString
 
-    A description of the current error, if any.
+    This property holds the description of the last error.
 */
 QString QDeclarativeCameraRecorder::errorString() const
 {
@@ -384,7 +381,9 @@ QString QDeclarativeCameraRecorder::errorString() const
 /*!
     \qmlproperty enumeration QtMultimedia5::CameraRecorder::recorderState
 
-    The current state of the camera recorder object.
+    This property holds the current state of the camera recorder object.
+
+    The state can be one of these two:
 
     \table
     \header \li Value \li Description
@@ -410,7 +409,7 @@ QDeclarativeCameraRecorder::RecorderState QDeclarativeCameraRecorder::recorderSt
 /*!
     \qmlproperty enumeration QtMultimedia5::CameraRecorder::recorderStatus
 
-    The actual current status of media recording.
+    This property holds the current status of media recording.
 
     \table
     \header \li Value \li Description
@@ -472,30 +471,35 @@ void QDeclarativeCameraRecorder::setRecorderState(QDeclarativeCameraRecorder::Re
         break;
     }
 }
-
 /*!
-    \qmlproperty string QtMultimedia5::CameraRecorder::outputLocation
     \property QDeclarativeCameraRecorder::outputLocation
 
-    \brief the destination location of media content.
+    This property holds the destination location of the media content. If it is empty,
+    the recorder uses the system-specific place and file naming scheme.
+*/
+/*!
+    \qmlproperty string QtMultimedia5::CameraRecorder::outputLocation
 
-    The location can be relative or empty;
-    in this case the recorder uses the system specific place and file naming scheme.
+    This property holds the destination location of the media content. If the location is empty,
+    the recorder uses the system-specific place and file naming scheme.
 */
 
 QString QDeclarativeCameraRecorder::outputLocation() const
 {
     return m_recorder->outputLocation().toString();
 }
-
 /*!
-    \qmlproperty string QtMultimedia5::CameraRecorder::actualLocation
     \property QDeclarativeCameraRecorder::actualLocation
 
-    \brief the actual location of the last media content.
+    This property holds the absolute location to the last saved media content.
+    The location is usually available after recording starts, and reset when
+    new location is set or new recording starts.
+*/
+/*!
+    \qmlproperty string QtMultimedia5::CameraRecorder::actualLocation
 
-    The actual location is usually available after recording starts,
-    and reset when new location is set or new recording starts.
+    This property holds the actual location of the last saved media content. The actual location is
+    usually available after the recording starts, and reset when new location is set or the new recording starts.
 */
 
 QString QDeclarativeCameraRecorder::actualLocation() const
@@ -510,26 +514,31 @@ void QDeclarativeCameraRecorder::setOutputLocation(const QString &location)
         emit outputLocationChanged(outputLocation());
     }
 }
+/*!
+    \property QDeclarativeCameraRecorder::duration
 
+    This property holds the duration (in miliseconds) of the last recording.
+*/
 /*!
     \qmlproperty int QtMultimedia5::CameraRecorder::duration
-    \property QDeclarativeCameraRecorder::duration
 
-    Returns the current duration of the recording, in
-    milliseconds.
+   This property holds the duration (in miliseconds) of the last recording.
 */
 qint64 QDeclarativeCameraRecorder::duration() const
 {
     return m_recorder->duration();
 }
-
 /*!
-    \qmlproperty bool QtMultimedia5::CameraRecorder::muted
     \property QDeclarativeCameraRecorder::muted
 
-    Whether or not the audio input is muted during
+    This property indicates whether the audio input is muted during
     recording.
 */
+/*!
+    \qmlproperty bool QtMultimedia5::CameraRecorder::muted
+
+    This property indicates whether the audio input is muted during recording.
+*/
 bool QDeclarativeCameraRecorder::isMuted() const
 {
     return m_recorder->isMuted();
diff --git a/src/imports/multimedia/qdeclarativetorch.cpp b/src/imports/multimedia/qdeclarativetorch.cpp
index b884a2f..01623bd 100644
--- a/src/imports/multimedia/qdeclarativetorch.cpp
+++ b/src/imports/multimedia/qdeclarativetorch.cpp
@@ -93,16 +93,17 @@ QDeclarativeTorch::~QDeclarativeTorch()
 
 /*!
     \qmlproperty bool QtMultimedia5::Torch::enabled
-    \property QDeclarativeTorch::enabled
 
-    Whether the torch is on.  If the torch functionality is shared
+    This property indicates whether the torch is enabled.  If the torch functionality is shared
     with the camera flash hardware, the camera will take priority
-    over torch settings and the torch may be disabled.
+    over torch settings and the torch is disabled.
 */
 /*!
-    Returns whether the torch is on.  If the torch functionality
+    \property QDeclarativeTorch::enabled
+
+    This property indicates whether the torch is enabled.  If the torch functionality
     is shared with the camera flash hardware, the camera will take
-    priority and the torch may be disabled.
+    priority and the torch is disabled.
  */
 bool QDeclarativeTorch::enabled() const
 {
@@ -140,15 +141,16 @@ void QDeclarativeTorch::setEnabled(bool on)
 
 /*!
     \qmlproperty int QtMultimedia5::Torch::power
-    \property QDeclarativeTorch::power
 
-    The current torch power setting, as a percentage of full power.
+    This property holds the current torch power setting, as a percentage of full power.
 
     In some cases this setting may change automatically as a result
     of temperature or battery conditions.
 */
 /*!
-    Returns the current torch power settings, as a percentage of full power.
+    \property QDeclarativeTorch::power
+
+    This property holds the current torch power settings, as a percentage of full power.
 */
 int QDeclarativeTorch::power() const
 {
diff --git a/src/multimedia/doc/src/audiooverview.qdoc b/src/multimedia/doc/src/audiooverview.qdoc
index 916174d..099b2d7 100644
--- a/src/multimedia/doc/src/audiooverview.qdoc
+++ b/src/multimedia/doc/src/audiooverview.qdoc
@@ -136,10 +136,6 @@ There are both C++ and QML examples available.
 
 \annotatedlist audio_examples
 
-\section2 QML Examples
-
-[TBD]
-
 \section1 Reference Documentation
 
 \section2 C++ Classes
diff --git a/src/multimedia/doc/src/multimedia.qdoc b/src/multimedia/doc/src/multimedia.qdoc
index 2b73fdf..78025af 100644
--- a/src/multimedia/doc/src/multimedia.qdoc
+++ b/src/multimedia/doc/src/multimedia.qdoc
@@ -27,7 +27,7 @@
 
 /*!
 \page multimediaoverview.html
-\title Multimedia Overview
+\title Qt Multimedia Overview
 \brief A set of APIs for working with audio, video, radio and camera devices.
 
 \ingroup technology-apis
diff --git a/src/multimedia/doc/src/qtmultimedia-cpp.qdoc b/src/multimedia/doc/src/qtmultimedia-cpp.qdoc
index 1df7ddf..7dc0f5d 100644
--- a/src/multimedia/doc/src/qtmultimedia-cpp.qdoc
+++ b/src/multimedia/doc/src/qtmultimedia-cpp.qdoc
@@ -27,7 +27,7 @@
 
 /*!
     \module QtMultimedia
-    \title QtMultimedia Module
+    \title Qt Multimedia - C++ Classes
     \ingroup modules
 
     \brief The QtMultimedia module provides audio, video, radio and camera functionality.
diff --git a/src/multimedia/doc/src/qtmultimedia-index.qdoc b/src/multimedia/doc/src/qtmultimedia-index.qdoc
new file mode 100644
index 0000000..8857c8c
--- /dev/null
+++ b/src/multimedia/doc/src/qtmultimedia-index.qdoc
@@ -0,0 +1,100 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/
+**
+** This file is part of the documentation of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:FDL$
+** GNU Free Documentation License
+** Alternatively, this file may be used under the terms of the GNU Free
+** Documentation License version 1.3 as published by the Free Software
+** Foundation and appearing in the file included in the packaging of
+** this file.
+**
+** Other Usage
+** Alternatively, this file may be used in accordance with the terms
+** and conditions contained in a signed written agreement between you
+** and Nokia.
+**
+**
+**
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+/*!
+    \page qtmultimedia-index.html
+    \title Qt Multimedia
+    \brief The Qt Multimedia module provides APIs for audio, video, radio and camera-related functionality.
+
+    Qt Multimedia is an essential module that provides a rich set of QML types and C++ classes to handle multimedia content. It also provides necessary APIs to access the camera and radio functionality.
+
+   \section1 Getting started
+
+    To start using the QML types and C++ classes in your application, include/import the QtMultimedia module. Refer to \l {Qt Multimedia - QML Types} and \l {Qt Multimedia - C++ Classes}, for the include/import statements and the complete list of QML types and C++ classes.
+
+    \section1 Key types and classes
+
+    The following is a list of key QML types and C++ classes provided by this module:
+
+    \table
+    \header
+     \li Type
+     \li Description
+    \row
+     \li \l {QtMultimedia5::Audio}{Audio}
+     \li Add audio playback functionality to a scene
+    \row
+     \li \l {QtMultimedia5::Camera}{Camera}
+     \li Access camera viewfinder frames
+    \row
+     \li MediaPlayer
+     \li Add media playback functionality to a scene. It is same as Audio type, but can be used for video playback with the VideoOutput type.
+    \row
+     \li \l {QtMultimedia5::Radio}{Radio}
+     \li Access radio functionality
+    \row
+     \li \l {QtMultimedia5::Video}{Video}
+     \li Add Video playback functionality to a scene. It uses MediaPlayer and VideoOutput types to provide video playback functionality.
+    \endtable
+
+    \table
+    \header
+     \li Class
+     \li Description
+    \row
+     \li QAudioOutput
+     \li Sends audio data to an audio output device
+    \row
+     \li QCamera
+     \li Access camera viewfinder.
+    \row
+     \li QCameraImageCapture
+     \li Record media content. Intended to be used with QCamera to record media.
+    \row
+     \li QMediaPlayer
+     \li Playback media from a source.
+    \row
+     \li QRadioTuner
+     \li Access radio device.
+    \row
+     \li QVideoRendererControl
+     \li Control video data.
+    \endtable
+
+    \section1 Related topics
+    \list
+     \li \l {Qt Multimedia Overview}
+     \li \l {Changes in Qt Multimedia}
+     \li \l {Audio Overview}
+     \li \l {Camera Overview}
+     \li \l {Radio Overview}
+     \li \l {Video Overview}
+     \li \l {Positional Audio}
+    \endlist
+
+
+ */
diff --git a/src/multimedia/doc/src/qtmultimedia5.qdoc b/src/multimedia/doc/src/qtmultimedia5.qdoc
index 53d9f61..f44d6ba 100644
--- a/src/multimedia/doc/src/qtmultimedia5.qdoc
+++ b/src/multimedia/doc/src/qtmultimedia5.qdoc
@@ -27,8 +27,8 @@
 
 /*!
 \qmlmodule QtMultimedia 5
-\title QML import for multimedia
-\brief The import for the QML types in the Qt Multimedia module
+\title Qt Multimedia - QML Types
+\brief List of all QML types in the Qt Multimedia module.
 
 \section1 Overview