diff --git a/src/serialportengine_unix.cpp b/src/serialportengine_unix.cpp
index d3430ec..4297b61 100755
--- a/src/serialportengine_unix.cpp
+++ b/src/serialportengine_unix.cpp
@@ -105,9 +105,8 @@ UnixSerialPortEngine::UnixSerialPortEngine(SerialPortPrivate *d)
 {
     Q_ASSERT(d);
     dptr = d;
-    const int size = sizeof(struct termios);
-    ::memset(&m_currentTermios, 0, size);
-    ::memset(&m_restoredTermios, 0, size);
+    ::memset(&m_currentTermios, 0, sizeof(m_currentTermios));
+    ::memset(&m_restoredTermios, 0, sizeof(m_restoredTermios));
 }
 
 /*!
diff --git a/src/serialportengine_win.cpp b/src/serialportengine_win.cpp
index 588111c..90db821 100755
--- a/src/serialportengine_win.cpp
+++ b/src/serialportengine_win.cpp
@@ -135,19 +135,16 @@ WinSerialPortEngine::WinSerialPortEngine(SerialPortPrivate *d)
 {
     Q_ASSERT(d);
     dptr = d;
-    size_t size = sizeof(DCB);
-    ::memset(&m_currentDcb, 0, size);
-    ::memset(&m_restoredDcb, 0, size);
-    size = sizeof(COMMTIMEOUTS);
-    ::memset(&m_currentCommTimeouts, 0, size);
-    ::memset(&m_restoredCommTimeouts, 0, size);
+    ::memset(&m_currentDcb, 0, sizeof(m_currentDcb));
+    ::memset(&m_restoredDcb, 0, sizeof(m_restoredDcb));
+    ::memset(&m_currentCommTimeouts, 0, sizeof(m_currentCommTimeouts));
+    ::memset(&m_restoredCommTimeouts, 0, sizeof(m_restoredCommTimeouts));
 
 #if !defined (Q_OS_WINCE)
-    size = sizeof(OVERLAPPED);
-    ::memset(&m_readOverlapped, 0, size);
-    ::memset(&m_writeOverlapped, 0, size);
-    ::memset(&m_selectOverlapped, 0, size);
-    ::memset(&m_notifyOverlapped, 0, size);
+    ::memset(&m_readOverlapped, 0, sizeof(m_readOverlapped));
+    ::memset(&m_writeOverlapped, 0, sizeof(m_writeOverlapped));
+    ::memset(&m_selectOverlapped, 0, sizeof(m_selectOverlapped));
+    ::memset(&m_notifyOverlapped, 0, sizeof(m_notifyOverlapped));
 #endif
 }
 
@@ -242,7 +239,7 @@ bool WinSerialPortEngine::open(const QString &location, QIODevice::OpenMode mode
     m_currentCommTimeouts = m_restoredCommTimeouts;
 
     // Set new port timeouts.
-    ::memset(&m_currentCommTimeouts, 0, sizeof(COMMTIMEOUTS));
+    ::memset(&m_currentCommTimeouts, 0, sizeof(m_currentCommTimeouts));
     m_currentCommTimeouts.ReadIntervalTimeout = MAXDWORD;
 
     // Apply new port timeouts.
@@ -311,7 +308,7 @@ SerialPort::Lines WinSerialPortEngine::lines() const
 
     DWORD bytesReturned = 0;
     if (::DeviceIoControl(m_descriptor, IOCTL_SERIAL_GET_DTRRTS, 0, 0,
-                          &modemStat, sizeof(DWORD),
+                          &modemStat, sizeof(bytesReturned),
                           &bytesReturned, 0)) {
 
         if (modemStat & SERIAL_DTR_STATE)
@@ -408,7 +405,7 @@ bool WinSerialPortEngine::setBreak(bool set)
 qint64 WinSerialPortEngine::bytesAvailable() const
 {
     COMSTAT cs;
-    ::memset(&cs, 0, sizeof(COMSTAT));
+    ::memset(&cs, 0, sizeof(cs));
     if (::ClearCommError(m_descriptor, 0, &cs) == 0)
         return -1;
     return cs.cbInQue;
@@ -426,7 +423,7 @@ qint64 WinSerialPortEngine::bytesAvailable() const
 qint64 WinSerialPortEngine::bytesToWrite() const
 {
     COMSTAT cs;
-    ::memset(&cs, 0, sizeof(COMSTAT));
+    ::memset(&cs, 0, sizeof(cs));
     if (::ClearCommError(m_descriptor, 0, &cs) == 0)
         return -1;
     return cs.cbOutQue;
@@ -1137,11 +1134,10 @@ void WinSerialPortEngine::closeEvents()
     if (m_notifyOverlapped.hEvent)
         ::CloseHandle(m_notifyOverlapped.hEvent);
 
-    const size_t size = sizeof(OVERLAPPED);
-    ::memset(&m_readOverlapped, 0, size);
-    ::memset(&m_writeOverlapped, 0, size);
-    ::memset(&m_selectOverlapped, 0, size);
-    ::memset(&m_notifyOverlapped, 0, size);
+    ::memset(&m_readOverlapped, 0, sizeof(m_readOverlapped));
+    ::memset(&m_writeOverlapped, 0, sizeof(m_writeOverlapped));
+    ::memset(&m_selectOverlapped, 0, sizeof(m_selectOverlapped));
+    ::memset(&m_notifyOverlapped, 0, sizeof(m_notifyOverlapped));
 }
 
 #endif
diff --git a/src/serialportinfo_win.cpp b/src/serialportinfo_win.cpp
index e641269..237c6fc 100755
--- a/src/serialportinfo_win.cpp
+++ b/src/serialportinfo_win.cpp
@@ -135,7 +135,7 @@ static QVariant getDeviceRegistryProperty(HDEVINFO deviceInfoSet,
         case REG_DWORD: {
             Q_ASSERT(data.size() == sizeof(int));
             int i = 0;
-            ::memcpy(&i, data.constData(), sizeof(int));
+            ::memcpy(&i, data.constData(), sizeof(i));
             v = i;
             break;
         }
@@ -273,7 +273,7 @@ QT_BEGIN_NAMESPACE_SERIALPORT
 QList<SerialPortInfo> SerialPortInfo::availablePorts()
 {
     QList<SerialPortInfo> ports;
-    static const int guidCount = sizeof(guidsArray)/sizeof(GUID);
+    static const int guidCount = sizeof(guidsArray)/sizeof(guidsArray[0]);
 
 #if !defined (Q_OS_WINCE)
     for (int i = 0; i < guidCount; ++i) {
@@ -284,9 +284,8 @@ QList<SerialPortInfo> SerialPortInfo::availablePorts()
             return ports;
 
         SP_DEVINFO_DATA deviceInfoData;
-        const int size = sizeof(SP_DEVINFO_DATA);
-        ::memset(&deviceInfoData, 0, size);
-        deviceInfoData.cbSize = size;
+        ::memset(&deviceInfoData, 0, sizeof(deviceInfoData));
+        deviceInfoData.cbSize = sizeof(deviceInfoData);
 
         DWORD index = 0;
         while (::SetupDiEnumDeviceInfo(deviceInfoSet, index++, &deviceInfoData)) {
@@ -319,7 +318,7 @@ QList<SerialPortInfo> SerialPortInfo::availablePorts()
 #else
     //for (int i = 0; i < guidCount; ++i) {
     DEVMGR_DEVICE_INFORMATION di;
-    di.dwSize = sizeof(DEVMGR_DEVICE_INFORMATION);
+    di.dwSize = sizeof(di);
     const HANDLE hSearch = ::FindFirstDevice(DeviceSearchByLegacyName/*DeviceSearchByGuid*/,
                                              L"COM*"/*&guidsArray[i]*/,
                                              &di);