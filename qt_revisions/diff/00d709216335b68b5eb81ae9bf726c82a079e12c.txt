diff --git a/examples/camera/camera.cpp b/examples/camera/camera.cpp
index 99b0123..e1031b1 100644
--- a/examples/camera/camera.cpp
+++ b/examples/camera/camera.cpp
@@ -124,7 +124,7 @@ void Camera::setCamera(const QByteArray &cameraDevice)
     connect(mediaRecorder, SIGNAL(durationChanged(qint64)), this, SLOT(updateRecordTime()));
     connect(mediaRecorder, SIGNAL(error(QMediaRecorder::Error)), this, SLOT(displayRecorderError()));
 
-    mediaRecorder->setMetaData(QtMultimedia::MetaData::Title, QVariant(QLatin1String("Test Title")));
+    mediaRecorder->setMetaData(QMediaMetaData::Title, QVariant(QLatin1String("Test Title")));
 
     connect(ui->exposureCompensation, SIGNAL(valueChanged(int)), SLOT(setExposureCompensation(int)));
 
diff --git a/examples/player/player.cpp b/examples/player/player.cpp
index 653c491..9169f3c 100644
--- a/examples/player/player.cpp
+++ b/examples/player/player.cpp
@@ -236,11 +236,11 @@ void Player::metaDataChanged()
 {
     if (player->isMetaDataAvailable()) {
         setTrackInfo(QString("%1 - %2")
-                .arg(player->metaData(QtMultimedia::MetaData::AlbumArtist).toString())
-                .arg(player->metaData(QtMultimedia::MetaData::Title).toString()));
+                .arg(player->metaData(QMediaMetaData::AlbumArtist).toString())
+                .arg(player->metaData(QMediaMetaData::Title).toString()));
 
         if (coverLabel) {
-            QUrl url = player->metaData(QtMultimedia::MetaData::CoverArtUrlLarge).value<QUrl>();
+            QUrl url = player->metaData(QMediaMetaData::CoverArtUrlLarge).value<QUrl>();
 
             coverLabel->setPixmap(!url.isEmpty()
                     ? QPixmap(url.toString())
diff --git a/src/imports/multimedia/Video.qml b/src/imports/multimedia/Video.qml
index ad55aee..58d1656 100644
--- a/src/imports/multimedia/Video.qml
+++ b/src/imports/multimedia/Video.qml
@@ -397,7 +397,7 @@ Item {
 
     This property holds the title of the media.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -405,7 +405,7 @@ Item {
 
     This property holds the sub-title of the media.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -413,7 +413,7 @@ Item {
 
     This property holds the author of the media.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -421,7 +421,7 @@ Item {
 
     This property holds a user comment about the media.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -429,7 +429,7 @@ Item {
 
     This property holds a description of the media.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -437,7 +437,7 @@ Item {
 
     This property holds the category of the media
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -445,7 +445,7 @@ Item {
 
     This property holds the genre of the media.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -453,7 +453,7 @@ Item {
 
     This property holds the year of release of the media.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -461,7 +461,7 @@ Item {
 
     This property holds the date of the media.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -469,7 +469,7 @@ Item {
 
     This property holds a user rating of the media in the range of 0 to 100.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -477,7 +477,7 @@ Item {
 
     This property holds a list of keywords describing the media.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -485,7 +485,7 @@ Item {
 
     This property holds the language of the media, as an ISO 639-2 code.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -493,7 +493,7 @@ Item {
 
     This property holds the publisher of the media.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -501,7 +501,7 @@ Item {
 
     This property holds the media's copyright notice.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -509,7 +509,7 @@ Item {
 
     This property holds the parental rating of the media.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -518,7 +518,7 @@ Item {
     This property holds the name of the rating organization responsible for the
     parental rating of the media.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -526,7 +526,7 @@ Item {
 
     This property property holds the size of the media in bytes.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -534,7 +534,7 @@ Item {
 
     This property holds the type of the media.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -543,7 +543,7 @@ Item {
     This property holds the bit rate of the media's audio stream in bits per
     second.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -551,7 +551,7 @@ Item {
 
     This property holds the encoding of the media audio stream.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -559,7 +559,7 @@ Item {
 
     This property holds the average volume level of the media.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -567,7 +567,7 @@ Item {
 
     This property holds the number of channels in the media's audio stream.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -575,7 +575,7 @@ Item {
 
     This property holds the peak volume of the media's audio stream.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -583,7 +583,7 @@ Item {
 
     This property holds the sample rate of the media's audio stream in Hertz.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -591,7 +591,7 @@ Item {
 
     This property holds the title of the album the media belongs to.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -600,7 +600,7 @@ Item {
     This property holds the name of the principal artist of the album the media
     belongs to.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -608,7 +608,7 @@ Item {
 
     This property holds the names of artists contributing to the media.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -616,7 +616,7 @@ Item {
 
     This property holds the composer of the media.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -624,7 +624,7 @@ Item {
 
     This property holds the conductor of the media.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -632,7 +632,7 @@ Item {
 
     This property holds the lyrics to the media.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -640,7 +640,7 @@ Item {
 
     This property holds the mood of the media.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -648,7 +648,7 @@ Item {
 
     This property holds the track number of the media.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -656,7 +656,7 @@ Item {
 
     This property holds the number of track on the album containing the media.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -664,7 +664,7 @@ Item {
 
     This property holds the URL of a small cover art image.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -672,7 +672,7 @@ Item {
 
     This property holds the URL of a large cover art image.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -680,7 +680,7 @@ Item {
 
     This property holds the dimension of an image or video.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -688,7 +688,7 @@ Item {
 
     This property holds the pixel aspect ratio of an image or video.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -696,7 +696,7 @@ Item {
 
     This property holds the frame rate of the media's video stream.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -705,7 +705,7 @@ Item {
     This property holds the bit rate of the media's video stream in bits per
     second.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -713,7 +713,7 @@ Item {
 
     This property holds the encoding of the media's video stream.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -721,7 +721,7 @@ Item {
 
     This property holds the URL of a poster image.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -729,7 +729,7 @@ Item {
 
     This property holds the chapter number of the media.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -737,7 +737,7 @@ Item {
 
     This property holds the director of the media.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -745,7 +745,7 @@ Item {
 
     This property holds the lead performer in the media.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -753,7 +753,7 @@ Item {
 
     This property holds the writer of the media.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 // The remaining properties are related to photos, and are technically
@@ -762,156 +762,156 @@ Item {
 /*!
     \qmlproperty variant Video::metaData.cameraManufacturer
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
     \qmlproperty variant Video::metaData.cameraModel
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
     \qmlproperty variant Video::metaData.event
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
     \qmlproperty variant Video::metaData.subject
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
     \qmlproperty variant Video::metaData.orientation
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
     \qmlproperty variant Video::metaData.exposureTime
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
     \qmlproperty variant Video::metaData.fNumber
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
     \qmlproperty variant Video::metaData.exposureProgram
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
     \qmlproperty variant Video::metaData.isoSpeedRatings
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
     \qmlproperty variant Video::metaData.exposureBiasValue
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
     \qmlproperty variant Video::metaData.dateTimeDigitized
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
     \qmlproperty variant Video::metaData.subjectDistance
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
     \qmlproperty variant Video::metaData.meteringMode
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
     \qmlproperty variant Video::metaData.lightSource
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
     \qmlproperty variant Video::metaData.flash
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
     \qmlproperty variant Video::metaData.focalLength
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
     \qmlproperty variant Video::metaData.exposureMode
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
     \qmlproperty variant Video::metaData.whiteBalance
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
     \qmlproperty variant Video::metaData.DigitalZoomRatio
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
     \qmlproperty variant Video::metaData.focalLengthIn35mmFilm
 
-    \sa {QtMultimedia::MetaData::FocalLengthIn35mmFile}
+    \sa {QMediaMetaData::FocalLengthIn35mmFile}
 */
 
 /*!
     \qmlproperty variant Video::metaData.sceneCaptureType
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
     \qmlproperty variant Video::metaData.gainControl
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
     \qmlproperty variant Video::metaData.contrast
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
     \qmlproperty variant Video::metaData.saturation
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
     \qmlproperty variant Video::metaData.sharpness
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
     \qmlproperty variant Video::metaData.deviceSettingDescription
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
diff --git a/src/imports/multimedia/qdeclarativeaudio.cpp b/src/imports/multimedia/qdeclarativeaudio.cpp
index 5c1bff8..85d65d3 100644
--- a/src/imports/multimedia/qdeclarativeaudio.cpp
+++ b/src/imports/multimedia/qdeclarativeaudio.cpp
@@ -757,7 +757,7 @@ void QDeclarativeAudio::_q_statusChanged()
 
     This property holds the title of the media.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -765,7 +765,7 @@ void QDeclarativeAudio::_q_statusChanged()
 
     This property holds the sub-title of the media.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -773,7 +773,7 @@ void QDeclarativeAudio::_q_statusChanged()
 
     This property holds the author of the media.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -781,7 +781,7 @@ void QDeclarativeAudio::_q_statusChanged()
 
     This property holds a user comment about the media.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -789,7 +789,7 @@ void QDeclarativeAudio::_q_statusChanged()
 
     This property holds a description of the media.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -797,7 +797,7 @@ void QDeclarativeAudio::_q_statusChanged()
 
     This property holds the category of the media
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -805,7 +805,7 @@ void QDeclarativeAudio::_q_statusChanged()
 
     This property holds the genre of the media.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -813,7 +813,7 @@ void QDeclarativeAudio::_q_statusChanged()
 
     This property holds the year of release of the media.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -821,7 +821,7 @@ void QDeclarativeAudio::_q_statusChanged()
 
     This property holds the date of the media.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -829,7 +829,7 @@ void QDeclarativeAudio::_q_statusChanged()
 
     This property holds a user rating of the media in the range of 0 to 100.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -837,7 +837,7 @@ void QDeclarativeAudio::_q_statusChanged()
 
     This property holds a list of keywords describing the media.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -845,7 +845,7 @@ void QDeclarativeAudio::_q_statusChanged()
 
     This property holds the language of the media, as an ISO 639-2 code.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -853,7 +853,7 @@ void QDeclarativeAudio::_q_statusChanged()
 
     This property holds the publisher of the media.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -861,7 +861,7 @@ void QDeclarativeAudio::_q_statusChanged()
 
     This property holds the media's copyright notice.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -869,7 +869,7 @@ void QDeclarativeAudio::_q_statusChanged()
 
     This property holds the parental rating of the media.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -878,7 +878,7 @@ void QDeclarativeAudio::_q_statusChanged()
     This property holds the name of the rating organization responsible for the
     parental rating of the media.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -886,7 +886,7 @@ void QDeclarativeAudio::_q_statusChanged()
 
     This property property holds the size of the media in bytes.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -894,7 +894,7 @@ void QDeclarativeAudio::_q_statusChanged()
 
     This property holds the type of the media.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -903,7 +903,7 @@ void QDeclarativeAudio::_q_statusChanged()
     This property holds the bit rate of the media's audio stream in bits per
     second.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -911,7 +911,7 @@ void QDeclarativeAudio::_q_statusChanged()
 
     This property holds the encoding of the media audio stream.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -919,7 +919,7 @@ void QDeclarativeAudio::_q_statusChanged()
 
     This property holds the average volume level of the media.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -927,7 +927,7 @@ void QDeclarativeAudio::_q_statusChanged()
 
     This property holds the number of channels in the media's audio stream.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -935,7 +935,7 @@ void QDeclarativeAudio::_q_statusChanged()
 
     This property holds the peak volume of media's audio stream.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -943,7 +943,7 @@ void QDeclarativeAudio::_q_statusChanged()
 
     This property holds the sample rate of the media's audio stream in hertz.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -951,7 +951,7 @@ void QDeclarativeAudio::_q_statusChanged()
 
     This property holds the title of the album the media belongs to.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -960,7 +960,7 @@ void QDeclarativeAudio::_q_statusChanged()
     This property holds the name of the principal artist of the album the media
     belongs to.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -968,7 +968,7 @@ void QDeclarativeAudio::_q_statusChanged()
 
     This property holds the names of artists contributing to the media.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -976,7 +976,7 @@ void QDeclarativeAudio::_q_statusChanged()
 
     This property holds the composer of the media.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -984,7 +984,7 @@ void QDeclarativeAudio::_q_statusChanged()
 
     This property holds the conductor of the media.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -992,7 +992,7 @@ void QDeclarativeAudio::_q_statusChanged()
 
     This property holds the lyrics to the media.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -1000,7 +1000,7 @@ void QDeclarativeAudio::_q_statusChanged()
 
     This property holds the mood of the media.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -1008,7 +1008,7 @@ void QDeclarativeAudio::_q_statusChanged()
 
     This property holds the track number of the media.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -1016,7 +1016,7 @@ void QDeclarativeAudio::_q_statusChanged()
 
     This property holds the number of tracks on the album containing the media.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -1024,7 +1024,7 @@ void QDeclarativeAudio::_q_statusChanged()
 
     This property holds the URL of a small cover art image.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -1032,7 +1032,7 @@ void QDeclarativeAudio::_q_statusChanged()
 
     This property holds the URL of a large cover art image.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -1040,7 +1040,7 @@ void QDeclarativeAudio::_q_statusChanged()
 
     This property holds the dimension of an image or video.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -1048,7 +1048,7 @@ void QDeclarativeAudio::_q_statusChanged()
 
     This property holds the pixel aspect ratio of an image or video.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -1056,7 +1056,7 @@ void QDeclarativeAudio::_q_statusChanged()
 
     This property holds the frame rate of the media's video stream.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -1065,7 +1065,7 @@ void QDeclarativeAudio::_q_statusChanged()
     This property holds the bit rate of the media's video stream in bits per
     second.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -1073,7 +1073,7 @@ void QDeclarativeAudio::_q_statusChanged()
 
     This property holds the encoding of the media's video stream.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -1081,7 +1081,7 @@ void QDeclarativeAudio::_q_statusChanged()
 
     This property holds the URL of a poster image.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -1089,7 +1089,7 @@ void QDeclarativeAudio::_q_statusChanged()
 
     This property holds the chapter number of the media.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -1097,7 +1097,7 @@ void QDeclarativeAudio::_q_statusChanged()
 
     This property holds the director of the media.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -1105,7 +1105,7 @@ void QDeclarativeAudio::_q_statusChanged()
 
     This property holds the lead performer in the media.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -1113,7 +1113,7 @@ void QDeclarativeAudio::_q_statusChanged()
 
     This property holds the writer of the media.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 ///////////// MediaPlayer Docs /////////////
@@ -1425,7 +1425,7 @@ void QDeclarativeAudio::_q_statusChanged()
 
     This property holds the title of the media.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -1433,7 +1433,7 @@ void QDeclarativeAudio::_q_statusChanged()
 
     This property holds the sub-title of the media.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -1441,7 +1441,7 @@ void QDeclarativeAudio::_q_statusChanged()
 
     This property holds the author of the media.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -1449,7 +1449,7 @@ void QDeclarativeAudio::_q_statusChanged()
 
     This property holds a user comment about the media.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -1457,7 +1457,7 @@ void QDeclarativeAudio::_q_statusChanged()
 
     This property holds a description of the media.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -1465,7 +1465,7 @@ void QDeclarativeAudio::_q_statusChanged()
 
     This property holds the category of the media
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -1473,7 +1473,7 @@ void QDeclarativeAudio::_q_statusChanged()
 
     This property holds the genre of the media.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -1481,7 +1481,7 @@ void QDeclarativeAudio::_q_statusChanged()
 
     This property holds the year of release of the media.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -1489,7 +1489,7 @@ void QDeclarativeAudio::_q_statusChanged()
 
     This property holds the date of the media.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -1497,7 +1497,7 @@ void QDeclarativeAudio::_q_statusChanged()
 
     This property holds a user rating of the media in the range of 0 to 100.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -1505,7 +1505,7 @@ void QDeclarativeAudio::_q_statusChanged()
 
     This property holds a list of keywords describing the media.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -1513,7 +1513,7 @@ void QDeclarativeAudio::_q_statusChanged()
 
     This property holds the language of the media, as an ISO 639-2 code.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -1521,7 +1521,7 @@ void QDeclarativeAudio::_q_statusChanged()
 
     This property holds the publisher of the media.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -1529,7 +1529,7 @@ void QDeclarativeAudio::_q_statusChanged()
 
     This property holds the media's copyright notice.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -1537,7 +1537,7 @@ void QDeclarativeAudio::_q_statusChanged()
 
     This property holds the parental rating of the media.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -1546,7 +1546,7 @@ void QDeclarativeAudio::_q_statusChanged()
     This property holds the name of the rating organization responsible for the
     parental rating of the media.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -1554,7 +1554,7 @@ void QDeclarativeAudio::_q_statusChanged()
 
     This property property holds the size of the media in bytes.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -1562,7 +1562,7 @@ void QDeclarativeAudio::_q_statusChanged()
 
     This property holds the type of the media.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -1571,7 +1571,7 @@ void QDeclarativeAudio::_q_statusChanged()
     This property holds the bit rate of the media's audio stream in bits per
     second.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -1579,7 +1579,7 @@ void QDeclarativeAudio::_q_statusChanged()
 
     This property holds the encoding of the media audio stream.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -1587,7 +1587,7 @@ void QDeclarativeAudio::_q_statusChanged()
 
     This property holds the average volume level of the media.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -1595,7 +1595,7 @@ void QDeclarativeAudio::_q_statusChanged()
 
     This property holds the number of channels in the media's audio stream.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -1603,7 +1603,7 @@ void QDeclarativeAudio::_q_statusChanged()
 
     This property holds the peak volume of media's audio stream.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -1611,7 +1611,7 @@ void QDeclarativeAudio::_q_statusChanged()
 
     This property holds the sample rate of the media's audio stream in hertz.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -1619,7 +1619,7 @@ void QDeclarativeAudio::_q_statusChanged()
 
     This property holds the title of the album the media belongs to.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -1628,7 +1628,7 @@ void QDeclarativeAudio::_q_statusChanged()
     This property holds the name of the principal artist of the album the media
     belongs to.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -1636,7 +1636,7 @@ void QDeclarativeAudio::_q_statusChanged()
 
     This property holds the names of artists contributing to the media.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -1644,7 +1644,7 @@ void QDeclarativeAudio::_q_statusChanged()
 
     This property holds the composer of the media.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -1652,7 +1652,7 @@ void QDeclarativeAudio::_q_statusChanged()
 
     This property holds the conductor of the media.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -1660,7 +1660,7 @@ void QDeclarativeAudio::_q_statusChanged()
 
     This property holds the lyrics to the media.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -1668,7 +1668,7 @@ void QDeclarativeAudio::_q_statusChanged()
 
     This property holds the mood of the media.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -1676,7 +1676,7 @@ void QDeclarativeAudio::_q_statusChanged()
 
     This property holds the track number of the media.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -1684,7 +1684,7 @@ void QDeclarativeAudio::_q_statusChanged()
 
     This property holds the number of tracks on the album containing the media.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -1692,7 +1692,7 @@ void QDeclarativeAudio::_q_statusChanged()
 
     This property holds the URL of a small cover art image.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -1700,7 +1700,7 @@ void QDeclarativeAudio::_q_statusChanged()
 
     This property holds the URL of a large cover art image.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -1708,7 +1708,7 @@ void QDeclarativeAudio::_q_statusChanged()
 
     This property holds the dimension of an image or video.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -1716,7 +1716,7 @@ void QDeclarativeAudio::_q_statusChanged()
 
     This property holds the pixel aspect ratio of an image or video.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -1724,7 +1724,7 @@ void QDeclarativeAudio::_q_statusChanged()
 
     This property holds the frame rate of the media's video stream.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -1733,7 +1733,7 @@ void QDeclarativeAudio::_q_statusChanged()
     This property holds the bit rate of the media's video stream in bits per
     second.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -1741,7 +1741,7 @@ void QDeclarativeAudio::_q_statusChanged()
 
     This property holds the encoding of the media's video stream.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -1749,7 +1749,7 @@ void QDeclarativeAudio::_q_statusChanged()
 
     This property holds the URL of a poster image.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -1757,7 +1757,7 @@ void QDeclarativeAudio::_q_statusChanged()
 
     This property holds the chapter number of the media.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -1765,7 +1765,7 @@ void QDeclarativeAudio::_q_statusChanged()
 
     This property holds the director of the media.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -1773,7 +1773,7 @@ void QDeclarativeAudio::_q_statusChanged()
 
     This property holds the lead performer in the media.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 /*!
@@ -1781,7 +1781,7 @@ void QDeclarativeAudio::_q_statusChanged()
 
     This property holds the writer of the media.
 
-    \sa {QtMultimedia::MetaData}
+    \sa {QMediaMetaData}
 */
 
 QT_END_NAMESPACE
diff --git a/src/imports/multimedia/qdeclarativecameracapture.cpp b/src/imports/multimedia/qdeclarativecameracapture.cpp
index 0e7a3ba..3ef8665 100644
--- a/src/imports/multimedia/qdeclarativecameracapture.cpp
+++ b/src/imports/multimedia/qdeclarativecameracapture.cpp
@@ -300,7 +300,7 @@ QString QDeclarativeCameraCapture::errorString() const
 
     Sets a particular metadata \a key to \a value for the subsequent image captures.
 
-    \sa QtMultimedia::MetaData
+    \sa QMediaMetaData
 */
 void QDeclarativeCameraCapture::setMetadata(const QString &key, const QVariant &value)
 {
diff --git a/src/imports/multimedia/qdeclarativemediametadata_p.h b/src/imports/multimedia/qdeclarativemediametadata_p.h
index f05e218..b9c45ac 100644
--- a/src/imports/multimedia/qdeclarativemediametadata_p.h
+++ b/src/imports/multimedia/qdeclarativemediametadata_p.h
@@ -116,57 +116,57 @@ public:
     {
     }
 
-    QVariant title() const { return m_mediaObject->metaData(QtMultimedia::MetaData::Title); }
-    QVariant subTitle() const { return m_mediaObject->metaData(QtMultimedia::MetaData::SubTitle); }
-    QVariant author() const { return m_mediaObject->metaData(QtMultimedia::MetaData::Author); }
-    QVariant comment() const { return m_mediaObject->metaData(QtMultimedia::MetaData::Comment); }
-    QVariant description() const { return m_mediaObject->metaData(QtMultimedia::MetaData::Description); }
-    QVariant category() const { return m_mediaObject->metaData(QtMultimedia::MetaData::Category); }
-    QVariant genre() const { return m_mediaObject->metaData(QtMultimedia::MetaData::Genre); }
-    QVariant year() const { return m_mediaObject->metaData(QtMultimedia::MetaData::Year); }
-    QVariant date() const { return m_mediaObject->metaData(QtMultimedia::MetaData::Date); }
-    QVariant userRating() const { return m_mediaObject->metaData(QtMultimedia::MetaData::UserRating); }
-    QVariant keywords() const { return m_mediaObject->metaData(QtMultimedia::MetaData::Keywords); }
-    QVariant language() const { return m_mediaObject->metaData(QtMultimedia::MetaData::Language); }
-    QVariant publisher() const { return m_mediaObject->metaData(QtMultimedia::MetaData::Publisher); }
-    QVariant copyright() const { return m_mediaObject->metaData(QtMultimedia::MetaData::Copyright); }
-    QVariant parentalRating() const { return m_mediaObject->metaData(QtMultimedia::MetaData::ParentalRating); }
+    QVariant title() const { return m_mediaObject->metaData(QMediaMetaData::Title); }
+    QVariant subTitle() const { return m_mediaObject->metaData(QMediaMetaData::SubTitle); }
+    QVariant author() const { return m_mediaObject->metaData(QMediaMetaData::Author); }
+    QVariant comment() const { return m_mediaObject->metaData(QMediaMetaData::Comment); }
+    QVariant description() const { return m_mediaObject->metaData(QMediaMetaData::Description); }
+    QVariant category() const { return m_mediaObject->metaData(QMediaMetaData::Category); }
+    QVariant genre() const { return m_mediaObject->metaData(QMediaMetaData::Genre); }
+    QVariant year() const { return m_mediaObject->metaData(QMediaMetaData::Year); }
+    QVariant date() const { return m_mediaObject->metaData(QMediaMetaData::Date); }
+    QVariant userRating() const { return m_mediaObject->metaData(QMediaMetaData::UserRating); }
+    QVariant keywords() const { return m_mediaObject->metaData(QMediaMetaData::Keywords); }
+    QVariant language() const { return m_mediaObject->metaData(QMediaMetaData::Language); }
+    QVariant publisher() const { return m_mediaObject->metaData(QMediaMetaData::Publisher); }
+    QVariant copyright() const { return m_mediaObject->metaData(QMediaMetaData::Copyright); }
+    QVariant parentalRating() const { return m_mediaObject->metaData(QMediaMetaData::ParentalRating); }
     QVariant ratingOrganization() const {
-        return m_mediaObject->metaData(QtMultimedia::MetaData::RatingOrganization); }
-    QVariant size() const { return m_mediaObject->metaData(QtMultimedia::MetaData::Size); }
-    QVariant mediaType() const { return m_mediaObject->metaData(QtMultimedia::MetaData::MediaType); }
-    QVariant duration() const { return m_mediaObject->metaData(QtMultimedia::MetaData::Duration); }
-    QVariant audioBitRate() const { return m_mediaObject->metaData(QtMultimedia::MetaData::AudioBitRate); }
-    QVariant audioCodec() const { return m_mediaObject->metaData(QtMultimedia::MetaData::AudioCodec); }
-    QVariant averageLevel() const { return m_mediaObject->metaData(QtMultimedia::MetaData::AverageLevel); }
-    QVariant channelCount() const { return m_mediaObject->metaData(QtMultimedia::MetaData::ChannelCount); }
-    QVariant peakValue() const { return m_mediaObject->metaData(QtMultimedia::MetaData::PeakValue); }
-    QVariant sampleRate() const { return m_mediaObject->metaData(QtMultimedia::MetaData::SampleRate); }
-    QVariant albumTitle() const { return m_mediaObject->metaData(QtMultimedia::MetaData::AlbumTitle); }
-    QVariant albumArtist() const { return m_mediaObject->metaData(QtMultimedia::MetaData::AlbumArtist); }
+        return m_mediaObject->metaData(QMediaMetaData::RatingOrganization); }
+    QVariant size() const { return m_mediaObject->metaData(QMediaMetaData::Size); }
+    QVariant mediaType() const { return m_mediaObject->metaData(QMediaMetaData::MediaType); }
+    QVariant duration() const { return m_mediaObject->metaData(QMediaMetaData::Duration); }
+    QVariant audioBitRate() const { return m_mediaObject->metaData(QMediaMetaData::AudioBitRate); }
+    QVariant audioCodec() const { return m_mediaObject->metaData(QMediaMetaData::AudioCodec); }
+    QVariant averageLevel() const { return m_mediaObject->metaData(QMediaMetaData::AverageLevel); }
+    QVariant channelCount() const { return m_mediaObject->metaData(QMediaMetaData::ChannelCount); }
+    QVariant peakValue() const { return m_mediaObject->metaData(QMediaMetaData::PeakValue); }
+    QVariant sampleRate() const { return m_mediaObject->metaData(QMediaMetaData::SampleRate); }
+    QVariant albumTitle() const { return m_mediaObject->metaData(QMediaMetaData::AlbumTitle); }
+    QVariant albumArtist() const { return m_mediaObject->metaData(QMediaMetaData::AlbumArtist); }
     QVariant contributingArtist() const {
-        return m_mediaObject->metaData(QtMultimedia::MetaData::ContributingArtist); }
-    QVariant composer() const { return m_mediaObject->metaData(QtMultimedia::MetaData::Composer); }
-    QVariant conductor() const { return m_mediaObject->metaData(QtMultimedia::MetaData::Conductor); }
-    QVariant lyrics() const { return m_mediaObject->metaData(QtMultimedia::MetaData::Lyrics); }
-    QVariant mood() const { return m_mediaObject->metaData(QtMultimedia::MetaData::Mood); }
-    QVariant trackNumber() const { return m_mediaObject->metaData(QtMultimedia::MetaData::TrackNumber); }
-    QVariant trackCount() const { return m_mediaObject->metaData(QtMultimedia::MetaData::TrackCount); }
+        return m_mediaObject->metaData(QMediaMetaData::ContributingArtist); }
+    QVariant composer() const { return m_mediaObject->metaData(QMediaMetaData::Composer); }
+    QVariant conductor() const { return m_mediaObject->metaData(QMediaMetaData::Conductor); }
+    QVariant lyrics() const { return m_mediaObject->metaData(QMediaMetaData::Lyrics); }
+    QVariant mood() const { return m_mediaObject->metaData(QMediaMetaData::Mood); }
+    QVariant trackNumber() const { return m_mediaObject->metaData(QMediaMetaData::TrackNumber); }
+    QVariant trackCount() const { return m_mediaObject->metaData(QMediaMetaData::TrackCount); }
     QVariant coverArtUrlSmall() const {
-        return m_mediaObject->metaData(QtMultimedia::MetaData::CoverArtUrlSmall); }
+        return m_mediaObject->metaData(QMediaMetaData::CoverArtUrlSmall); }
     QVariant coverArtUrlLarge() const {
-        return m_mediaObject->metaData(QtMultimedia::MetaData::CoverArtUrlLarge); }
-    QVariant resolution() const { return m_mediaObject->metaData(QtMultimedia::MetaData::Resolution); }
+        return m_mediaObject->metaData(QMediaMetaData::CoverArtUrlLarge); }
+    QVariant resolution() const { return m_mediaObject->metaData(QMediaMetaData::Resolution); }
     QVariant pixelAspectRatio() const {
-        return m_mediaObject->metaData(QtMultimedia::MetaData::PixelAspectRatio); }
-    QVariant videoFrameRate() const { return m_mediaObject->metaData(QtMultimedia::MetaData::VideoFrameRate); }
-    QVariant videoBitRate() const { return m_mediaObject->metaData(QtMultimedia::MetaData::VideoBitRate); }
-    QVariant videoCodec() const { return m_mediaObject->metaData(QtMultimedia::MetaData::VideoCodec); }
-    QVariant posterUrl() const { return m_mediaObject->metaData(QtMultimedia::MetaData::PosterUrl); }
-    QVariant chapterNumber() const { return m_mediaObject->metaData(QtMultimedia::MetaData::ChapterNumber); }
-    QVariant director() const { return m_mediaObject->metaData(QtMultimedia::MetaData::Director); }
-    QVariant leadPerformer() const { return m_mediaObject->metaData(QtMultimedia::MetaData::LeadPerformer); }
-    QVariant writer() const { return m_mediaObject->metaData(QtMultimedia::MetaData::Writer); }
+        return m_mediaObject->metaData(QMediaMetaData::PixelAspectRatio); }
+    QVariant videoFrameRate() const { return m_mediaObject->metaData(QMediaMetaData::VideoFrameRate); }
+    QVariant videoBitRate() const { return m_mediaObject->metaData(QMediaMetaData::VideoBitRate); }
+    QVariant videoCodec() const { return m_mediaObject->metaData(QMediaMetaData::VideoCodec); }
+    QVariant posterUrl() const { return m_mediaObject->metaData(QMediaMetaData::PosterUrl); }
+    QVariant chapterNumber() const { return m_mediaObject->metaData(QMediaMetaData::ChapterNumber); }
+    QVariant director() const { return m_mediaObject->metaData(QMediaMetaData::Director); }
+    QVariant leadPerformer() const { return m_mediaObject->metaData(QMediaMetaData::LeadPerformer); }
+    QVariant writer() const { return m_mediaObject->metaData(QMediaMetaData::Writer); }
 
 Q_SIGNALS:
     void metaDataChanged();
diff --git a/src/multimedia/controls/qmediastreamscontrol.cpp b/src/multimedia/controls/qmediastreamscontrol.cpp
index 292b532..501f97f 100644
--- a/src/multimedia/controls/qmediastreamscontrol.cpp
+++ b/src/multimedia/controls/qmediastreamscontrol.cpp
@@ -129,8 +129,8 @@ QMediaStreamsControl::~QMediaStreamsControl()
 
     Returns the meta-data value of \a key for a given \a stream.
 
-    Useful metadata keys are QtMultimedia::MetaData::Title,
-    QtMultimedia::MetaData::Description and QtMultimedia::MetaData::Language.
+    Useful metadata keys are QMediaMetaData::Title,
+    QMediaMetaData::Description and QMediaMetaData::Language.
 */
 
 /*!
diff --git a/src/multimedia/controls/qmetadatareadercontrol.cpp b/src/multimedia/controls/qmetadatareadercontrol.cpp
index 514a9ed..aef80a3 100644
--- a/src/multimedia/controls/qmetadatareadercontrol.cpp
+++ b/src/multimedia/controls/qmetadatareadercontrol.cpp
@@ -60,7 +60,7 @@ QT_BEGIN_NAMESPACE
     its current media it will implement QMetaDataReaderControl.  This control
     provides functions for both retrieving and setting meta-data values.
     Meta-data may be addressed by the keys defined in the
-    QtMultimedia::MetaData namespace.
+    QMediaMetaData namespace.
 
     The functionality provided by this control is exposed to application
     code by the meta-data members of QMediaObject, and so meta-data access
diff --git a/src/multimedia/controls/qmetadatawritercontrol.cpp b/src/multimedia/controls/qmetadatawritercontrol.cpp
index 9f62da5..45d43da 100644
--- a/src/multimedia/controls/qmetadatawritercontrol.cpp
+++ b/src/multimedia/controls/qmetadatawritercontrol.cpp
@@ -60,7 +60,7 @@ QT_BEGIN_NAMESPACE
     current media it will implement QMetaDataWriterControl.  This control
     provides functions for both retrieving and setting meta-data values.
     Meta-data may be addressed by the keys defined in the
-    QtMultimedia::MetaData namespace.
+    QMediaMetaData namespace.
 
     The functionality provided by this control is exposed to application code
     by the meta-data members of QMediaObject, and so meta-data access is
diff --git a/src/multimedia/doc/src/changes.qdoc b/src/multimedia/doc/src/changes.qdoc
index d210498..1b0e4b7 100644
--- a/src/multimedia/doc/src/changes.qdoc
+++ b/src/multimedia/doc/src/changes.qdoc
@@ -114,9 +114,9 @@ they are documented elsewhere.
         \li Meta-data enumeration changes
         \li In Qt Multimedia Kit the available meta-data keys were in an enumeration
            in the \c QtMultimediaKit namespace.  These meta-data keys have been changed
-           to string literals in the \c {QtMultimedia::MetaData} namespace - generally your
+           to string literals in the \c {QMediaMetaData} namespace - generally your
            source code will mostly be compatible unless you have created variables or
-           parameters with the \c {QtMultimedia::MetaData} type - you should replace these
+           parameters with the \c {QMediaMetaData} type - you should replace these
            with \c QString.
     \row
         \li Meta-data method changes
diff --git a/src/multimedia/playback/playlistfileparser.cpp b/src/multimedia/playback/playlistfileparser.cpp
index f984824..19870e4 100644
--- a/src/multimedia/playback/playlistfileparser.cpp
+++ b/src/multimedia/playback/playlistfileparser.cpp
@@ -103,18 +103,18 @@ public:
                     int length = line.mid(8, artistStart < 8 ? -1 : artistStart - 8).trimmed().toInt(&ok);
                     if (ok && length > 0) {
                         //convert from second to milisecond
-                        m_extraInfo[QtMultimedia::MetaData::Duration] = QVariant(length * 1000);
+                        m_extraInfo[QMediaMetaData::Duration] = QVariant(length * 1000);
                     }
                     if (artistStart > 0) {
                         int titleStart = getSplitIndex(line, artistStart);
                         if (titleStart > artistStart) {
-                            m_extraInfo[QtMultimedia::MetaData::Author] = line.mid(artistStart + 1,
+                            m_extraInfo[QMediaMetaData::Author] = line.mid(artistStart + 1,
                                                              titleStart - artistStart - 1).trimmed().
                                                              replace(QLatin1String("--"), QLatin1String("-"));
-                            m_extraInfo[QtMultimedia::MetaData::Title] = line.mid(titleStart + 1).trimmed().
+                            m_extraInfo[QMediaMetaData::Title] = line.mid(titleStart + 1).trimmed().
                                                    replace(QLatin1String("--"), QLatin1String("-"));
                         } else {
-                            m_extraInfo[QtMultimedia::MetaData::Title] = line.mid(artistStart + 1).trimmed().
+                            m_extraInfo[QMediaMetaData::Title] = line.mid(artistStart + 1).trimmed().
                                                    replace(QLatin1String("--"), QLatin1String("-"));
                         }
                     }
@@ -262,13 +262,13 @@ Version=2
                 m_item[QLatin1String("url")] = getValue(lineIndex, line);
                 setFlag(FileRead);
             } else if (!containsFlag(TitleRead) && line.startsWith(m_titleName)) {
-                m_item[QtMultimedia::MetaData::Title] = getValue(lineIndex, line);
+                m_item[QMediaMetaData::Title] = getValue(lineIndex, line);
                 setFlag(TitleRead);
             } else if (!containsFlag(LengthRead) && line.startsWith(m_lengthName)) {
                 //convert from seconds to miliseconds
                 int length = getValue(lineIndex, line).toInt();
                 if (length > 0)
-                    m_item[QtMultimedia::MetaData::Duration] = length * 1000;
+                    m_item[QMediaMetaData::Duration] = length * 1000;
                 setFlag(LengthRead);
             } else if (line.startsWith(QLatin1String("NumberOfEntries"))) {
                 m_state = Footer;
diff --git a/src/multimedia/playback/qmediaplayer.cpp b/src/multimedia/playback/qmediaplayer.cpp
index 99a7435..2555deb 100644
--- a/src/multimedia/playback/qmediaplayer.cpp
+++ b/src/multimedia/playback/qmediaplayer.cpp
@@ -83,7 +83,7 @@ QT_BEGIN_NAMESPACE
     functions for things like:
 
     \list
-    \li Accessing the currently playing media's metadata (\l {QMediaObject::metaData()} and \l {QtMultimedia::MetaData}{predefined meta-data keys})
+    \li Accessing the currently playing media's metadata (\l {QMediaObject::metaData()} and \l {QMediaMetaData}{predefined meta-data keys})
     \li Checking to see if the media playback service is currently available (\l {QMediaObject::availability()})
     \endlist
 
diff --git a/src/multimedia/qmediaobject.cpp b/src/multimedia/qmediaobject.cpp
index 7f083ec..2495622 100644
--- a/src/multimedia/qmediaobject.cpp
+++ b/src/multimedia/qmediaobject.cpp
@@ -347,7 +347,7 @@ bool QMediaObject::isMetaDataAvailable() const
 /*!
     Returns the value associated with a meta-data \a key.
 
-    See the list of predefined \l {QtMultimedia::MetaData}{meta-data keys}.
+    See the list of predefined \l {QMediaMetaData}{meta-data keys}.
 */
 QVariant QMediaObject::metaData(const QString &key) const
 {
diff --git a/src/multimedia/qtmedianamespace.cpp b/src/multimedia/qtmedianamespace.cpp
index 47c5557..c22af7f 100644
--- a/src/multimedia/qtmedianamespace.cpp
+++ b/src/multimedia/qtmedianamespace.cpp
@@ -68,9 +68,9 @@ namespace
     Fall back to the less-performant QLatin1String in this case.
 */
 #if defined(Q_CC_GNU) && defined(Q_COMPILER_LAMBDA)
-#    define Q_DEFINE_METADATA(key) const QString QtMultimedia::MetaData::key(QStringLiteral(#key))
+#    define Q_DEFINE_METADATA(key) const QString QMediaMetaData::key(QStringLiteral(#key))
 #else
-#    define Q_DEFINE_METADATA(key) const QString QtMultimedia::MetaData::key(QLatin1String(#key))
+#    define Q_DEFINE_METADATA(key) const QString QMediaMetaData::key(QLatin1String(#key))
 #endif
 
 // Common
@@ -187,7 +187,7 @@ Q_DEFINE_METADATA(ThumbnailImage);
 
 
 /*!
-    \namespace QtMultimedia::MetaData
+    \namespace QMediaMetaData
     \inheaderfile qtmedianamespace.h
 
     This namespace provides identifiers for meta-data attributes.
diff --git a/src/multimedia/qtmedianamespace.h b/src/multimedia/qtmedianamespace.h
index f85111c..c3af78f 100644
--- a/src/multimedia/qtmedianamespace.h
+++ b/src/multimedia/qtmedianamespace.h
@@ -57,9 +57,7 @@ class QString;
 
 #define Q_DECLARE_METADATA(key) Q_MULTIMEDIA_EXPORT extern const QString key
 
-namespace QtMultimedia
-{
-    namespace MetaData {
+    namespace QMediaMetaData {
 #ifdef Q_QDOC
         // QDoc does not like macros, so try to keep this in sync :)
         QString Title;
@@ -287,6 +285,8 @@ namespace QtMultimedia
 #endif
     }
 
+namespace QtMultimedia
+{
     enum SupportEstimate
     {
         NotSupported,
diff --git a/src/plugins/avfoundation/mediaplayer/avfmediaplayermetadatacontrol.mm b/src/plugins/avfoundation/mediaplayer/avfmediaplayermetadatacontrol.mm
index 84a6bef..3a7e860 100644
--- a/src/plugins/avfoundation/mediaplayer/avfmediaplayermetadatacontrol.mm
+++ b/src/plugins/avfoundation/mediaplayer/avfmediaplayermetadatacontrol.mm
@@ -113,33 +113,33 @@ void AVFMediaPlayerMetaDataControl::updateTags()
             if (keyString.length != 0) {
                 //Process "commonMetadata" tags here:
                 if ([keyString isEqualToString:AVMetadataCommonKeyTitle]) {
-                    m_tags.insert(QtMultimedia::MetaData::Title, QString([value UTF8String]));
+                    m_tags.insert(QMediaMetaData::Title, QString([value UTF8String]));
                 } else if ([keyString isEqualToString: AVMetadataCommonKeyCreator]) {
-                    m_tags.insert(QtMultimedia::MetaData::Author, QString([value UTF8String]));
+                    m_tags.insert(QMediaMetaData::Author, QString([value UTF8String]));
                 } else if ([keyString isEqualToString: AVMetadataCommonKeySubject]) {
-                    m_tags.insert(QtMultimedia::MetaData::SubTitle, QString([value UTF8String]));
+                    m_tags.insert(QMediaMetaData::SubTitle, QString([value UTF8String]));
                 } else if ([keyString isEqualToString: AVMetadataCommonKeyDescription]) {
-                    m_tags.insert(QtMultimedia::MetaData::Description, QString([value UTF8String]));
+                    m_tags.insert(QMediaMetaData::Description, QString([value UTF8String]));
                 } else if ([keyString isEqualToString: AVMetadataCommonKeyPublisher]) {
-                    m_tags.insert(QtMultimedia::MetaData::Publisher, QString([value UTF8String]));
+                    m_tags.insert(QMediaMetaData::Publisher, QString([value UTF8String]));
                 } else if ([keyString isEqualToString: AVMetadataCommonKeyContributor]) {
-                    m_tags.insert(QtMultimedia::MetaData::ContributingArtist, QString([value UTF8String]));
+                    m_tags.insert(QMediaMetaData::ContributingArtist, QString([value UTF8String]));
                 } else if ([keyString isEqualToString: AVMetadataCommonKeyCreationDate]) {
-                    m_tags.insert(QtMultimedia::MetaData::Date, QString([value UTF8String]));
+                    m_tags.insert(QMediaMetaData::Date, QString([value UTF8String]));
                 } else if ([keyString isEqualToString: AVMetadataCommonKeyType]) {
-                    m_tags.insert(QtMultimedia::MetaData::MediaType, QString([value UTF8String]));
+                    m_tags.insert(QMediaMetaData::MediaType, QString([value UTF8String]));
                 } else if ([keyString isEqualToString: AVMetadataCommonKeyLanguage]) {
-                    m_tags.insert(QtMultimedia::MetaData::Language, QString([value UTF8String]));
+                    m_tags.insert(QMediaMetaData::Language, QString([value UTF8String]));
                 } else if ([keyString isEqualToString: AVMetadataCommonKeyCopyrights]) {
-                    m_tags.insert(QtMultimedia::MetaData::Copyright, QString([value UTF8String]));
+                    m_tags.insert(QMediaMetaData::Copyright, QString([value UTF8String]));
                 } else if ([keyString isEqualToString: AVMetadataCommonKeyAlbumName]) {
-                    m_tags.insert(QtMultimedia::MetaData::AlbumTitle, QString([value UTF8String]));
+                    m_tags.insert(QMediaMetaData::AlbumTitle, QString([value UTF8String]));
                 } else if ([keyString isEqualToString: AVMetadataCommonKeyAuthor]) {
-                    m_tags.insert(QtMultimedia::MetaData::Author, QString([value UTF8String]));
+                    m_tags.insert(QMediaMetaData::Author, QString([value UTF8String]));
                 } else if ([keyString isEqualToString: AVMetadataCommonKeyArtist]) {
-                    m_tags.insert(QtMultimedia::MetaData::AlbumArtist, QString([value UTF8String]));
+                    m_tags.insert(QMediaMetaData::AlbumArtist, QString([value UTF8String]));
                 } else if ([keyString isEqualToString: AVMetadataCommonKeyArtwork]) {
-                    m_tags.insert(QtMultimedia::MetaData::PosterUrl, QString([value UTF8String]));
+                    m_tags.insert(QMediaMetaData::PosterUrl, QString([value UTF8String]));
                 }
             }
 
diff --git a/src/plugins/directshow/player/directshowmetadatacontrol.cpp b/src/plugins/directshow/player/directshowmetadatacontrol.cpp
index 3b61860..19da90e 100644
--- a/src/plugins/directshow/player/directshowmetadatacontrol.cpp
+++ b/src/plugins/directshow/player/directshowmetadatacontrol.cpp
@@ -61,69 +61,69 @@ namespace
 
 static const QWMMetaDataKeyLookup qt_wmMetaDataKeys[] =
 {
-    { QtMultimedia::MetaData::Title, L"Title" },
-    { QtMultimedia::MetaData::SubTitle, L"WM/SubTitle" },
-    { QtMultimedia::MetaData::Author, L"Author" },
-    { QtMultimedia::MetaData::Comment, L"Comment" },
-    { QtMultimedia::MetaData::Description, L"Description" },
-    { QtMultimedia::MetaData::Category, L"WM/Category" },
-    { QtMultimedia::MetaData::Genre, L"WM/Genre" },
-    //{ QtMultimedia::MetaData::Date, 0 },
-    { QtMultimedia::MetaData::Year, L"WM/Year" },
-    { QtMultimedia::MetaData::UserRating, L"UserRating" },
-    //{ QtMultimedia::MetaData::MetaDatawords, 0 },
-    { QtMultimedia::MetaData::Language, L"Language" },
-    { QtMultimedia::MetaData::Publisher, L"WM/Publisher" },
-    { QtMultimedia::MetaData::Copyright, L"Copyright" },
-    { QtMultimedia::MetaData::ParentalRating, L"ParentalRating" },
-    //{ QtMultimedia::MetaData::RatingOrganisation, L"RatingOrganisation" },
+    { QMediaMetaData::Title, L"Title" },
+    { QMediaMetaData::SubTitle, L"WM/SubTitle" },
+    { QMediaMetaData::Author, L"Author" },
+    { QMediaMetaData::Comment, L"Comment" },
+    { QMediaMetaData::Description, L"Description" },
+    { QMediaMetaData::Category, L"WM/Category" },
+    { QMediaMetaData::Genre, L"WM/Genre" },
+    //{ QMediaMetaData::Date, 0 },
+    { QMediaMetaData::Year, L"WM/Year" },
+    { QMediaMetaData::UserRating, L"UserRating" },
+    //{ QMediaMetaData::MetaDatawords, 0 },
+    { QMediaMetaData::Language, L"Language" },
+    { QMediaMetaData::Publisher, L"WM/Publisher" },
+    { QMediaMetaData::Copyright, L"Copyright" },
+    { QMediaMetaData::ParentalRating, L"ParentalRating" },
+    //{ QMediaMetaData::RatingOrganisation, L"RatingOrganisation" },
 
     // Media
-    { QtMultimedia::MetaData::Size, L"FileSize" },
-    { QtMultimedia::MetaData::MediaType, L"MediaType" },
-    { QtMultimedia::MetaData::Duration, L"Duration" },
+    { QMediaMetaData::Size, L"FileSize" },
+    { QMediaMetaData::MediaType, L"MediaType" },
+    { QMediaMetaData::Duration, L"Duration" },
 
     // Audio
-    { QtMultimedia::MetaData::AudioBitRate, L"AudioBitRate" },
-    { QtMultimedia::MetaData::AudioCodec, L"AudioCodec" },
-    { QtMultimedia::MetaData::ChannelCount, L"ChannelCount" },
-    { QtMultimedia::MetaData::SampleRate, L"Frequency" },
+    { QMediaMetaData::AudioBitRate, L"AudioBitRate" },
+    { QMediaMetaData::AudioCodec, L"AudioCodec" },
+    { QMediaMetaData::ChannelCount, L"ChannelCount" },
+    { QMediaMetaData::SampleRate, L"Frequency" },
 
     // Music
-    { QtMultimedia::MetaData::AlbumTitle, L"WM/AlbumTitle" },
-    { QtMultimedia::MetaData::AlbumArtist, L"WM/AlbumArtist" },
-    { QtMultimedia::MetaData::ContributingArtist, L"Author" },
-    { QtMultimedia::MetaData::Composer, L"WM/Composer" },
-    { QtMultimedia::MetaData::Conductor, L"WM/Conductor" },
-    { QtMultimedia::MetaData::Lyrics, L"WM/Lyrics" },
-    { QtMultimedia::MetaData::Mood, L"WM/Mood" },
-    { QtMultimedia::MetaData::TrackNumber, L"WM/TrackNumber" },
-    //{ QtMultimedia::MetaData::TrackCount, 0 },
-    //{ QtMultimedia::MetaData::CoverArtUriSmall, 0 },
-    //{ QtMultimedia::MetaData::CoverArtUriLarge, 0 },
+    { QMediaMetaData::AlbumTitle, L"WM/AlbumTitle" },
+    { QMediaMetaData::AlbumArtist, L"WM/AlbumArtist" },
+    { QMediaMetaData::ContributingArtist, L"Author" },
+    { QMediaMetaData::Composer, L"WM/Composer" },
+    { QMediaMetaData::Conductor, L"WM/Conductor" },
+    { QMediaMetaData::Lyrics, L"WM/Lyrics" },
+    { QMediaMetaData::Mood, L"WM/Mood" },
+    { QMediaMetaData::TrackNumber, L"WM/TrackNumber" },
+    //{ QMediaMetaData::TrackCount, 0 },
+    //{ QMediaMetaData::CoverArtUriSmall, 0 },
+    //{ QMediaMetaData::CoverArtUriLarge, 0 },
 
     // Image/Video
-    //{ QtMultimedia::MetaData::Resolution, 0 },
-    //{ QtMultimedia::MetaData::PixelAspectRatio, 0 },
+    //{ QMediaMetaData::Resolution, 0 },
+    //{ QMediaMetaData::PixelAspectRatio, 0 },
 
     // Video
-    //{ QtMultimedia::MetaData::FrameRate, 0 },
-    { QtMultimedia::MetaData::VideoBitRate, L"VideoBitRate" },
-    { QtMultimedia::MetaData::VideoCodec, L"VideoCodec" },
+    //{ QMediaMetaData::FrameRate, 0 },
+    { QMediaMetaData::VideoBitRate, L"VideoBitRate" },
+    { QMediaMetaData::VideoCodec, L"VideoCodec" },
 
-    //{ QtMultimedia::MetaData::PosterUri, 0 },
+    //{ QMediaMetaData::PosterUri, 0 },
 
     // Movie
-    { QtMultimedia::MetaData::ChapterNumber, L"ChapterNumber" },
-    { QtMultimedia::MetaData::Director, L"WM/Director" },
-    { QtMultimedia::MetaData::LeadPerformer, L"LeadPerformer" },
-    { QtMultimedia::MetaData::Writer, L"WM/Writer" },
+    { QMediaMetaData::ChapterNumber, L"ChapterNumber" },
+    { QMediaMetaData::Director, L"WM/Director" },
+    { QMediaMetaData::LeadPerformer, L"LeadPerformer" },
+    { QMediaMetaData::Writer, L"WM/Writer" },
 
     // Photos
-    { QtMultimedia::MetaData::CameraManufacturer, L"CameraManufacturer" },
-    { QtMultimedia::MetaData::CameraModel, L"CameraModel" },
-    { QtMultimedia::MetaData::Event, L"Event" },
-    { QtMultimedia::MetaData::Subject, L"Subject" }
+    { QMediaMetaData::CameraManufacturer, L"CameraManufacturer" },
+    { QMediaMetaData::CameraModel, L"CameraModel" },
+    { QMediaMetaData::Event, L"Event" },
+    { QMediaMetaData::Subject, L"Subject" }
 };
 
 static QVariant getValue(IWMHeaderInfo *header, const wchar_t *key)
@@ -268,15 +268,15 @@ QVariant DirectShowMetaDataControl::metaData(const QString &key) const
 #endif
         BSTR string = 0;
 
-        if (key == QtMultimedia::MetaData::Author)
+        if (key == QMediaMetaData::Author)
             m_content->get_AuthorName(&string);
-        else if (key == QtMultimedia::MetaData::Title)
+        else if (key == QMediaMetaData::Title)
             m_content->get_Title(&string);
-        else if (key == QtMultimedia::MetaData::ParentalRating)
+        else if (key == QMediaMetaData::ParentalRating)
             m_content->get_Rating(&string);
-        else if (key == QtMultimedia::MetaData::Description)
+        else if (key == QMediaMetaData::Description)
             m_content->get_Description(&string);
-        else if (key == QtMultimedia::MetaData::Copyright)
+        else if (key == QMediaMetaData::Copyright)
             m_content->get_Copyright(&string);
 
         if (string) {
diff --git a/src/plugins/gstreamer/camerabin/camerabinimagecapture.cpp b/src/plugins/gstreamer/camerabin/camerabinimagecapture.cpp
index 6e6f503..1d4c209 100644
--- a/src/plugins/gstreamer/camerabin/camerabinimagecapture.cpp
+++ b/src/plugins/gstreamer/camerabin/camerabinimagecapture.cpp
@@ -126,16 +126,16 @@ gboolean CameraBinImageCapture::metadataEventProbe(GstPad *pad, GstEvent *event,
 #endif
 
         QVariantMap tags;
-        tags[QtMultimedia::MetaData::ISOSpeedRatings] = extendedTags.value("capturing-iso-speed");
-        tags[QtMultimedia::MetaData::DigitalZoomRatio] = extendedTags.value("capturing-digital-zoom-ratio");
-        tags[QtMultimedia::MetaData::ExposureTime] = extendedTags.value("capturing-shutter-speed");
-        tags[QtMultimedia::MetaData::WhiteBalance] = extendedTags.value("capturing-white-balance");
-        tags[QtMultimedia::MetaData::Flash] = extendedTags.value("capturing-flash-fired");
-        tags[QtMultimedia::MetaData::FocalLengthIn35mmFilm] = extendedTags.value("capturing-focal-length");
-        tags[QtMultimedia::MetaData::MeteringMode] = extendedTags.value("capturing-metering-mode");
-        tags[QtMultimedia::MetaData::ExposureMode] = extendedTags.value("capturing-exposure-mode");
-        tags[QtMultimedia::MetaData::FNumber] = extendedTags.value("capturing-focal-ratio");
-        tags[QtMultimedia::MetaData::ExposureMode] = extendedTags.value("capturing-exposure-mode");
+        tags[QMediaMetaData::ISOSpeedRatings] = extendedTags.value("capturing-iso-speed");
+        tags[QMediaMetaData::DigitalZoomRatio] = extendedTags.value("capturing-digital-zoom-ratio");
+        tags[QMediaMetaData::ExposureTime] = extendedTags.value("capturing-shutter-speed");
+        tags[QMediaMetaData::WhiteBalance] = extendedTags.value("capturing-white-balance");
+        tags[QMediaMetaData::Flash] = extendedTags.value("capturing-flash-fired");
+        tags[QMediaMetaData::FocalLengthIn35mmFilm] = extendedTags.value("capturing-focal-length");
+        tags[QMediaMetaData::MeteringMode] = extendedTags.value("capturing-metering-mode");
+        tags[QMediaMetaData::ExposureMode] = extendedTags.value("capturing-exposure-mode");
+        tags[QMediaMetaData::FNumber] = extendedTags.value("capturing-focal-ratio");
+        tags[QMediaMetaData::ExposureMode] = extendedTags.value("capturing-exposure-mode");
 
         QMapIterator<QString, QVariant> i(tags);
         while (i.hasNext()) {
diff --git a/src/plugins/gstreamer/camerabin/camerabinmetadata.cpp b/src/plugins/gstreamer/camerabin/camerabinmetadata.cpp
index 4b45df8..9e160f9 100644
--- a/src/plugins/gstreamer/camerabin/camerabinmetadata.cpp
+++ b/src/plugins/gstreamer/camerabin/camerabinmetadata.cpp
@@ -54,71 +54,71 @@ struct QGstreamerMetaDataKeyLookup
 
 static const QGstreamerMetaDataKeyLookup qt_gstreamerMetaDataKeys[] =
 {
-    { QtMultimedia::MetaData::Title, GST_TAG_TITLE },
-    //{ QtMultimedia::MetaData::SubTitle, 0 },
-    //{ QtMultimedia::MetaData::Author, 0 },
-    { QtMultimedia::MetaData::Comment, GST_TAG_COMMENT },
-    { QtMultimedia::MetaData::Description, GST_TAG_DESCRIPTION },
-    //{ QtMultimedia::MetaData::Category, 0 },
-    { QtMultimedia::MetaData::Genre, GST_TAG_GENRE },
-    //{ QtMultimedia::MetaData::Year, 0 },
-    //{ QtMultimedia::MetaData::UserRating, 0 },
-
-    { QtMultimedia::MetaData::Language, GST_TAG_LANGUAGE_CODE },
-
-    { QtMultimedia::MetaData::Publisher, GST_TAG_ORGANIZATION },
-    { QtMultimedia::MetaData::Copyright, GST_TAG_COPYRIGHT },
-    //{ QtMultimedia::MetaData::ParentalRating, 0 },
-    //{ QtMultimedia::MetaData::RatingOrganisation, 0 },
+    { QMediaMetaData::Title, GST_TAG_TITLE },
+    //{ QMediaMetaData::SubTitle, 0 },
+    //{ QMediaMetaData::Author, 0 },
+    { QMediaMetaData::Comment, GST_TAG_COMMENT },
+    { QMediaMetaData::Description, GST_TAG_DESCRIPTION },
+    //{ QMediaMetaData::Category, 0 },
+    { QMediaMetaData::Genre, GST_TAG_GENRE },
+    //{ QMediaMetaData::Year, 0 },
+    //{ QMediaMetaData::UserRating, 0 },
+
+    { QMediaMetaData::Language, GST_TAG_LANGUAGE_CODE },
+
+    { QMediaMetaData::Publisher, GST_TAG_ORGANIZATION },
+    { QMediaMetaData::Copyright, GST_TAG_COPYRIGHT },
+    //{ QMediaMetaData::ParentalRating, 0 },
+    //{ QMediaMetaData::RatingOrganisation, 0 },
 
     // Media
-    //{ QtMultimedia::MetaData::Size, 0 },
-    //{ QtMultimedia::MetaData::MediaType, 0 },
-    { QtMultimedia::MetaData::Duration, GST_TAG_DURATION },
+    //{ QMediaMetaData::Size, 0 },
+    //{ QMediaMetaData::MediaType, 0 },
+    { QMediaMetaData::Duration, GST_TAG_DURATION },
 
     // Audio
-    { QtMultimedia::MetaData::AudioBitRate, GST_TAG_BITRATE },
-    { QtMultimedia::MetaData::AudioCodec, GST_TAG_AUDIO_CODEC },
-    //{ QtMultimedia::MetaData::ChannelCount, 0 },
-    //{ QtMultimedia::MetaData::SampleRate, 0 },
+    { QMediaMetaData::AudioBitRate, GST_TAG_BITRATE },
+    { QMediaMetaData::AudioCodec, GST_TAG_AUDIO_CODEC },
+    //{ QMediaMetaData::ChannelCount, 0 },
+    //{ QMediaMetaData::SampleRate, 0 },
 
     // Music
-    { QtMultimedia::MetaData::AlbumTitle, GST_TAG_ALBUM },
-    { QtMultimedia::MetaData::AlbumArtist,  GST_TAG_ARTIST},
-    { QtMultimedia::MetaData::ContributingArtist, GST_TAG_PERFORMER },
+    { QMediaMetaData::AlbumTitle, GST_TAG_ALBUM },
+    { QMediaMetaData::AlbumArtist,  GST_TAG_ARTIST},
+    { QMediaMetaData::ContributingArtist, GST_TAG_PERFORMER },
 #if (GST_VERSION_MAJOR >= 0) && (GST_VERSION_MINOR >= 10) && (GST_VERSION_MICRO >= 19)
-    { QtMultimedia::MetaData::Composer, GST_TAG_COMPOSER },
+    { QMediaMetaData::Composer, GST_TAG_COMPOSER },
 #endif
-    //{ QtMultimedia::MetaData::Conductor, 0 },
-    //{ QtMultimedia::MetaData::Lyrics, 0 },
-    //{ QtMultimedia::MetaData::Mood, 0 },
-    { QtMultimedia::MetaData::TrackNumber, GST_TAG_TRACK_NUMBER },
+    //{ QMediaMetaData::Conductor, 0 },
+    //{ QMediaMetaData::Lyrics, 0 },
+    //{ QMediaMetaData::Mood, 0 },
+    { QMediaMetaData::TrackNumber, GST_TAG_TRACK_NUMBER },
 
-    //{ QtMultimedia::MetaData::CoverArtUrlSmall, 0 },
-    //{ QtMultimedia::MetaData::CoverArtUrlLarge, 0 },
+    //{ QMediaMetaData::CoverArtUrlSmall, 0 },
+    //{ QMediaMetaData::CoverArtUrlLarge, 0 },
 
     // Image/Video
-    //{ QtMultimedia::MetaData::Resolution, 0 },
-    //{ QtMultimedia::MetaData::PixelAspectRatio, 0 },
+    //{ QMediaMetaData::Resolution, 0 },
+    //{ QMediaMetaData::PixelAspectRatio, 0 },
 
     // Video
-    //{ QtMultimedia::MetaData::VideoFrameRate, 0 },
-    //{ QtMultimedia::MetaData::VideoBitRate, 0 },
-    { QtMultimedia::MetaData::VideoCodec, GST_TAG_VIDEO_CODEC },
+    //{ QMediaMetaData::VideoFrameRate, 0 },
+    //{ QMediaMetaData::VideoBitRate, 0 },
+    { QMediaMetaData::VideoCodec, GST_TAG_VIDEO_CODEC },
 
-    //{ QtMultimedia::MetaData::PosterUrl, 0 },
+    //{ QMediaMetaData::PosterUrl, 0 },
 
     // Movie
-    //{ QtMultimedia::MetaData::ChapterNumber, 0 },
-    //{ QtMultimedia::MetaData::Director, 0 },
-    { QtMultimedia::MetaData::LeadPerformer, GST_TAG_PERFORMER },
-    //{ QtMultimedia::MetaData::Writer, 0 },
+    //{ QMediaMetaData::ChapterNumber, 0 },
+    //{ QMediaMetaData::Director, 0 },
+    { QMediaMetaData::LeadPerformer, GST_TAG_PERFORMER },
+    //{ QMediaMetaData::Writer, 0 },
 
     // Photos
-    //{ QtMultimedia::MetaData::CameraManufacturer, 0 },
-    //{ QtMultimedia::MetaData::CameraModel, 0 },
-    //{ QtMultimedia::MetaData::Event, 0 },
-    //{ QtMultimedia::MetaData::Subject, 0 }
+    //{ QMediaMetaData::CameraManufacturer, 0 },
+    //{ QMediaMetaData::CameraModel, 0 },
+    //{ QMediaMetaData::Event, 0 },
+    //{ QMediaMetaData::Subject, 0 }
 };
 
 CameraBinMetaData::CameraBinMetaData(QObject *parent)
diff --git a/src/plugins/gstreamer/mediacapture/qgstreamercapturemetadatacontrol.cpp b/src/plugins/gstreamer/mediacapture/qgstreamercapturemetadatacontrol.cpp
index 44e622a..3c1e115 100644
--- a/src/plugins/gstreamer/mediacapture/qgstreamercapturemetadatacontrol.cpp
+++ b/src/plugins/gstreamer/mediacapture/qgstreamercapturemetadatacontrol.cpp
@@ -52,71 +52,71 @@ struct QGstreamerMetaDataKeyLookup
 
 static const QGstreamerMetaDataKeyLookup qt_gstreamerMetaDataKeys[] =
 {
-    { QtMultimedia::MetaData::Title, GST_TAG_TITLE },
-    //{ QtMultimedia::MetaData::SubTitle, 0 },
-    //{ QtMultimedia::MetaData::Author, 0 },
-    { QtMultimedia::MetaData::Comment, GST_TAG_COMMENT },
-    { QtMultimedia::MetaData::Description, GST_TAG_DESCRIPTION },
-    //{ QtMultimedia::MetaData::Category, 0 },
-    { QtMultimedia::MetaData::Genre, GST_TAG_GENRE },
-    //{ QtMultimedia::MetaData::Year, 0 },
-    //{ QtMultimedia::MetaData::UserRating, 0 },
-
-    { QtMultimedia::MetaData::Language, GST_TAG_LANGUAGE_CODE },
-
-    { QtMultimedia::MetaData::Publisher, GST_TAG_ORGANIZATION },
-    { QtMultimedia::MetaData::Copyright, GST_TAG_COPYRIGHT },
-    //{ QtMultimedia::MetaData::ParentalRating, 0 },
-    //{ QtMultimedia::MetaData::RatingOrganisation, 0 },
+    { QMediaMetaData::Title, GST_TAG_TITLE },
+    //{ QMediaMetaData::SubTitle, 0 },
+    //{ QMediaMetaData::Author, 0 },
+    { QMediaMetaData::Comment, GST_TAG_COMMENT },
+    { QMediaMetaData::Description, GST_TAG_DESCRIPTION },
+    //{ QMediaMetaData::Category, 0 },
+    { QMediaMetaData::Genre, GST_TAG_GENRE },
+    //{ QMediaMetaData::Year, 0 },
+    //{ QMediaMetaData::UserRating, 0 },
+
+    { QMediaMetaData::Language, GST_TAG_LANGUAGE_CODE },
+
+    { QMediaMetaData::Publisher, GST_TAG_ORGANIZATION },
+    { QMediaMetaData::Copyright, GST_TAG_COPYRIGHT },
+    //{ QMediaMetaData::ParentalRating, 0 },
+    //{ QMediaMetaData::RatingOrganisation, 0 },
 
     // Media
-    //{ QtMultimedia::MetaData::Size, 0 },
-    //{ QtMultimedia::MetaData::MediaType, 0 },
-    { QtMultimedia::MetaData::Duration, GST_TAG_DURATION },
+    //{ QMediaMetaData::Size, 0 },
+    //{ QMediaMetaData::MediaType, 0 },
+    { QMediaMetaData::Duration, GST_TAG_DURATION },
 
     // Audio
-    { QtMultimedia::MetaData::AudioBitRate, GST_TAG_BITRATE },
-    { QtMultimedia::MetaData::AudioCodec, GST_TAG_AUDIO_CODEC },
-    //{ QtMultimedia::MetaData::ChannelCount, 0 },
-    //{ QtMultimedia::MetaData::SampleRate, 0 },
+    { QMediaMetaData::AudioBitRate, GST_TAG_BITRATE },
+    { QMediaMetaData::AudioCodec, GST_TAG_AUDIO_CODEC },
+    //{ QMediaMetaData::ChannelCount, 0 },
+    //{ QMediaMetaData::SampleRate, 0 },
 
     // Music
-    { QtMultimedia::MetaData::AlbumTitle, GST_TAG_ALBUM },
-    { QtMultimedia::MetaData::AlbumArtist,  GST_TAG_ARTIST},
-    { QtMultimedia::MetaData::ContributingArtist, GST_TAG_PERFORMER },
+    { QMediaMetaData::AlbumTitle, GST_TAG_ALBUM },
+    { QMediaMetaData::AlbumArtist,  GST_TAG_ARTIST},
+    { QMediaMetaData::ContributingArtist, GST_TAG_PERFORMER },
 #if (GST_VERSION_MAJOR >= 0) && (GST_VERSION_MINOR >= 10) && (GST_VERSION_MICRO >= 19)
-    { QtMultimedia::MetaData::Composer, GST_TAG_COMPOSER },
+    { QMediaMetaData::Composer, GST_TAG_COMPOSER },
 #endif
-    //{ QtMultimedia::MetaData::Conductor, 0 },
-    //{ QtMultimedia::MetaData::Lyrics, 0 },
-    //{ QtMultimedia::MetaData::Mood, 0 },
-    { QtMultimedia::MetaData::TrackNumber, GST_TAG_TRACK_NUMBER },
+    //{ QMediaMetaData::Conductor, 0 },
+    //{ QMediaMetaData::Lyrics, 0 },
+    //{ QMediaMetaData::Mood, 0 },
+    { QMediaMetaData::TrackNumber, GST_TAG_TRACK_NUMBER },
 
-    //{ QtMultimedia::MetaData::CoverArtUrlSmall, 0 },
-    //{ QtMultimedia::MetaData::CoverArtUrlLarge, 0 },
+    //{ QMediaMetaData::CoverArtUrlSmall, 0 },
+    //{ QMediaMetaData::CoverArtUrlLarge, 0 },
 
     // Image/Video
-    //{ QtMultimedia::MetaData::Resolution, 0 },
-    //{ QtMultimedia::MetaData::PixelAspectRatio, 0 },
+    //{ QMediaMetaData::Resolution, 0 },
+    //{ QMediaMetaData::PixelAspectRatio, 0 },
 
     // Video
-    //{ QtMultimedia::MetaData::VideoFrameRate, 0 },
-    //{ QtMultimedia::MetaData::VideoBitRate, 0 },
-    { QtMultimedia::MetaData::VideoCodec, GST_TAG_VIDEO_CODEC },
+    //{ QMediaMetaData::VideoFrameRate, 0 },
+    //{ QMediaMetaData::VideoBitRate, 0 },
+    { QMediaMetaData::VideoCodec, GST_TAG_VIDEO_CODEC },
 
-    //{ QtMultimedia::MetaData::PosterUrl, 0 },
+    //{ QMediaMetaData::PosterUrl, 0 },
 
     // Movie
-    //{ QtMultimedia::MetaData::ChapterNumber, 0 },
-    //{ QtMultimedia::MetaData::Director, 0 },
-    { QtMultimedia::MetaData::LeadPerformer, GST_TAG_PERFORMER },
-    //{ QtMultimedia::MetaData::Writer, 0 },
+    //{ QMediaMetaData::ChapterNumber, 0 },
+    //{ QMediaMetaData::Director, 0 },
+    { QMediaMetaData::LeadPerformer, GST_TAG_PERFORMER },
+    //{ QMediaMetaData::Writer, 0 },
 
     // Photos
-    //{ QtMultimedia::MetaData::CameraManufacturer, 0 },
-    //{ QtMultimedia::MetaData::CameraModel, 0 },
-    //{ QtMultimedia::MetaData::Event, 0 },
-    //{ QtMultimedia::MetaData::Subject, 0 }
+    //{ QMediaMetaData::CameraManufacturer, 0 },
+    //{ QMediaMetaData::CameraModel, 0 },
+    //{ QMediaMetaData::Event, 0 },
+    //{ QMediaMetaData::Subject, 0 }
 };
 
 QGstreamerCaptureMetaDataControl::QGstreamerCaptureMetaDataControl(QObject *parent)
diff --git a/src/plugins/gstreamer/mediaplayer/qgstreamermetadataprovider.cpp b/src/plugins/gstreamer/mediaplayer/qgstreamermetadataprovider.cpp
index 278801d..6221426 100644
--- a/src/plugins/gstreamer/mediaplayer/qgstreamermetadataprovider.cpp
+++ b/src/plugins/gstreamer/mediaplayer/qgstreamermetadataprovider.cpp
@@ -55,71 +55,71 @@ struct QGstreamerMetaDataKeyLookup
 
 static const QGstreamerMetaDataKeyLookup qt_gstreamerMetaDataKeys[] =
 {
-    { QtMultimedia::MetaData::Title, GST_TAG_TITLE },
-    //{ QtMultimedia::MetaData::SubTitle, 0 },
-    //{ QtMultimedia::MetaData::Author, 0 },
-    { QtMultimedia::MetaData::Comment, GST_TAG_COMMENT },
-    { QtMultimedia::MetaData::Description, GST_TAG_DESCRIPTION },
-    //{ QtMultimedia::MetaData::Category, 0 },
-    { QtMultimedia::MetaData::Genre, GST_TAG_GENRE },
-    { QtMultimedia::MetaData::Year, "year" },
-    //{ QtMultimedia::MetaData::UserRating, 0 },
-
-    { QtMultimedia::MetaData::Language, GST_TAG_LANGUAGE_CODE },
-
-    { QtMultimedia::MetaData::Publisher, GST_TAG_ORGANIZATION },
-    { QtMultimedia::MetaData::Copyright, GST_TAG_COPYRIGHT },
-    //{ QtMultimedia::MetaData::ParentalRating, 0 },
-    //{ QtMultimedia::MetaData::RatingOrganisation, 0 },
+    { QMediaMetaData::Title, GST_TAG_TITLE },
+    //{ QMediaMetaData::SubTitle, 0 },
+    //{ QMediaMetaData::Author, 0 },
+    { QMediaMetaData::Comment, GST_TAG_COMMENT },
+    { QMediaMetaData::Description, GST_TAG_DESCRIPTION },
+    //{ QMediaMetaData::Category, 0 },
+    { QMediaMetaData::Genre, GST_TAG_GENRE },
+    { QMediaMetaData::Year, "year" },
+    //{ QMediaMetaData::UserRating, 0 },
+
+    { QMediaMetaData::Language, GST_TAG_LANGUAGE_CODE },
+
+    { QMediaMetaData::Publisher, GST_TAG_ORGANIZATION },
+    { QMediaMetaData::Copyright, GST_TAG_COPYRIGHT },
+    //{ QMediaMetaData::ParentalRating, 0 },
+    //{ QMediaMetaData::RatingOrganisation, 0 },
 
     // Media
-    //{ QtMultimedia::MetaData::Size, 0 },
-    //{ QtMultimedia::MetaData::MediaType, 0 },
-    { QtMultimedia::MetaData::Duration, GST_TAG_DURATION },
+    //{ QMediaMetaData::Size, 0 },
+    //{ QMediaMetaData::MediaType, 0 },
+    { QMediaMetaData::Duration, GST_TAG_DURATION },
 
     // Audio
-    { QtMultimedia::MetaData::AudioBitRate, GST_TAG_BITRATE },
-    { QtMultimedia::MetaData::AudioCodec, GST_TAG_AUDIO_CODEC },
-    //{ QtMultimedia::MetaData::ChannelCount, 0 },
-    //{ QtMultimedia::MetaData::SampleRate, 0 },
+    { QMediaMetaData::AudioBitRate, GST_TAG_BITRATE },
+    { QMediaMetaData::AudioCodec, GST_TAG_AUDIO_CODEC },
+    //{ QMediaMetaData::ChannelCount, 0 },
+    //{ QMediaMetaData::SampleRate, 0 },
 
     // Music
-    { QtMultimedia::MetaData::AlbumTitle, GST_TAG_ALBUM },
-    { QtMultimedia::MetaData::AlbumArtist,  GST_TAG_ARTIST},
-    { QtMultimedia::MetaData::ContributingArtist, GST_TAG_PERFORMER },
+    { QMediaMetaData::AlbumTitle, GST_TAG_ALBUM },
+    { QMediaMetaData::AlbumArtist,  GST_TAG_ARTIST},
+    { QMediaMetaData::ContributingArtist, GST_TAG_PERFORMER },
 #if (GST_VERSION_MAJOR >= 0) && (GST_VERSION_MINOR >= 10) && (GST_VERSION_MICRO >= 19)
-    { QtMultimedia::MetaData::Composer, GST_TAG_COMPOSER },
+    { QMediaMetaData::Composer, GST_TAG_COMPOSER },
 #endif
-    //{ QtMultimedia::MetaData::Conductor, 0 },
-    //{ QtMultimedia::MetaData::Lyrics, 0 },
-    //{ QtMultimedia::MetaData::Mood, 0 },
-    { QtMultimedia::MetaData::TrackNumber, GST_TAG_TRACK_NUMBER },
+    //{ QMediaMetaData::Conductor, 0 },
+    //{ QMediaMetaData::Lyrics, 0 },
+    //{ QMediaMetaData::Mood, 0 },
+    { QMediaMetaData::TrackNumber, GST_TAG_TRACK_NUMBER },
 
-    //{ QtMultimedia::MetaData::CoverArtUrlSmall, 0 },
-    //{ QtMultimedia::MetaData::CoverArtUrlLarge, 0 },
+    //{ QMediaMetaData::CoverArtUrlSmall, 0 },
+    //{ QMediaMetaData::CoverArtUrlLarge, 0 },
 
     // Image/Video
-    { QtMultimedia::MetaData::Resolution, "resolution" },
-    { QtMultimedia::MetaData::PixelAspectRatio, "pixel-aspect-ratio" },
+    { QMediaMetaData::Resolution, "resolution" },
+    { QMediaMetaData::PixelAspectRatio, "pixel-aspect-ratio" },
 
     // Video
-    //{ QtMultimedia::MetaData::VideoFrameRate, 0 },
-    //{ QtMultimedia::MetaData::VideoBitRate, 0 },
-    { QtMultimedia::MetaData::VideoCodec, GST_TAG_VIDEO_CODEC },
+    //{ QMediaMetaData::VideoFrameRate, 0 },
+    //{ QMediaMetaData::VideoBitRate, 0 },
+    { QMediaMetaData::VideoCodec, GST_TAG_VIDEO_CODEC },
 
-    //{ QtMultimedia::MetaData::PosterUrl, 0 },
+    //{ QMediaMetaData::PosterUrl, 0 },
 
     // Movie
-    //{ QtMultimedia::MetaData::ChapterNumber, 0 },
-    //{ QtMultimedia::MetaData::Director, 0 },
-    { QtMultimedia::MetaData::LeadPerformer, GST_TAG_PERFORMER },
-    //{ QtMultimedia::MetaData::Writer, 0 },
+    //{ QMediaMetaData::ChapterNumber, 0 },
+    //{ QMediaMetaData::Director, 0 },
+    { QMediaMetaData::LeadPerformer, GST_TAG_PERFORMER },
+    //{ QMediaMetaData::Writer, 0 },
 
     // Photos
-    //{ QtMultimedia::MetaData::CameraManufacturer, 0 },
-    //{ QtMultimedia::MetaData::CameraModel, 0 },
-    //{ QtMultimedia::MetaData::Event, 0 },
-    //{ QtMultimedia::MetaData::Subject, 0 }
+    //{ QMediaMetaData::CameraManufacturer, 0 },
+    //{ QMediaMetaData::CameraModel, 0 },
+    //{ QMediaMetaData::Event, 0 },
+    //{ QMediaMetaData::Subject, 0 }
 };
 
 QGstreamerMetaDataProvider::QGstreamerMetaDataProvider(QGstreamerPlayerSession *session, QObject *parent)
diff --git a/src/plugins/gstreamer/mediaplayer/qgstreamerplayerservice.h b/src/plugins/gstreamer/mediaplayer/qgstreamerplayerservice.h
index 84c5300..e539445 100644
--- a/src/plugins/gstreamer/mediaplayer/qgstreamerplayerservice.h
+++ b/src/plugins/gstreamer/mediaplayer/qgstreamerplayerservice.h
@@ -48,7 +48,6 @@
 #include <qmediaservice.h>
 
 QT_BEGIN_NAMESPACE
-class QMediaMetaData;
 class QMediaPlayerControl;
 class QMediaPlaylist;
 class QMediaPlaylistNavigator;
diff --git a/src/plugins/gstreamer/mediaplayer/qgstreamerplayersession.cpp b/src/plugins/gstreamer/mediaplayer/qgstreamerplayersession.cpp
index a7e84ac..081893d 100644
--- a/src/plugins/gstreamer/mediaplayer/qgstreamerplayersession.cpp
+++ b/src/plugins/gstreamer/mediaplayer/qgstreamerplayersession.cpp
@@ -1313,7 +1313,7 @@ void QGstreamerPlayerSession::getStreamsInfo()
         if (tags && gst_is_tag_list(tags)) {
             gchar *languageCode = 0;
             if (gst_tag_list_get_string(tags, GST_TAG_LANGUAGE_CODE, &languageCode))
-                streamProperties[QtMultimedia::MetaData::Language] = QString::fromUtf8(languageCode);
+                streamProperties[QMediaMetaData::Language] = QString::fromUtf8(languageCode);
 
             //qDebug() << "language for setream" << i << QString::fromUtf8(languageCode);
             g_free (languageCode);
diff --git a/src/plugins/qt7/mediaplayer/qt7playermetadata.mm b/src/plugins/qt7/mediaplayer/qt7playermetadata.mm
index 9c14c45..7217b43 100644
--- a/src/plugins/qt7/mediaplayer/qt7playermetadata.mm
+++ b/src/plugins/qt7/mediaplayer/qt7playermetadata.mm
@@ -233,13 +233,13 @@ void QT7PlayerMetaDataControl::updateTags()
         metaMap.insert(QLatin1String("nam"), QString::fromUtf8([name UTF8String]));
 #endif // QUICKTIME_C_API_AVAILABLE
 
-        m_tags.insert(QtMultimedia::MetaData::AlbumArtist, metaMap.value(QLatin1String("ART")));
-        m_tags.insert(QtMultimedia::MetaData::AlbumTitle, metaMap.value(QLatin1String("alb")));
-        m_tags.insert(QtMultimedia::MetaData::Title, metaMap.value(QLatin1String("nam")));
-        m_tags.insert(QtMultimedia::MetaData::Date, metaMap.value(QLatin1String("day")));
-        m_tags.insert(QtMultimedia::MetaData::Genre, metaMap.value(QLatin1String("gnre")));
-        m_tags.insert(QtMultimedia::MetaData::TrackNumber, metaMap.value(QLatin1String("trk")));
-        m_tags.insert(QtMultimedia::MetaData::Description, metaMap.value(QLatin1String("des")));
+        m_tags.insert(QMediaMetaData::AlbumArtist, metaMap.value(QLatin1String("ART")));
+        m_tags.insert(QMediaMetaData::AlbumTitle, metaMap.value(QLatin1String("alb")));
+        m_tags.insert(QMediaMetaData::Title, metaMap.value(QLatin1String("nam")));
+        m_tags.insert(QMediaMetaData::Date, metaMap.value(QLatin1String("day")));
+        m_tags.insert(QMediaMetaData::Genre, metaMap.value(QLatin1String("gnre")));
+        m_tags.insert(QMediaMetaData::TrackNumber, metaMap.value(QLatin1String("trk")));
+        m_tags.insert(QMediaMetaData::Description, metaMap.value(QLatin1String("des")));
     }
 
     if (!wasEmpty || !m_tags.isEmpty())
diff --git a/src/plugins/qt7/mediaplayer/qt7playerservice.h b/src/plugins/qt7/mediaplayer/qt7playerservice.h
index 0c9a0b9..ae9cc11 100644
--- a/src/plugins/qt7/mediaplayer/qt7playerservice.h
+++ b/src/plugins/qt7/mediaplayer/qt7playerservice.h
@@ -48,7 +48,6 @@
 
 
 QT_BEGIN_NAMESPACE
-class QMediaMetaData;
 class QMediaPlayerControl;
 class QMediaPlaylist;
 class QMediaPlaylistNavigator;
diff --git a/src/plugins/wmf/player/mfmetadatacontrol.cpp b/src/plugins/wmf/player/mfmetadatacontrol.cpp
index a3df0dc..18c6a42 100644
--- a/src/plugins/wmf/player/mfmetadatacontrol.cpp
+++ b/src/plugins/wmf/player/mfmetadatacontrol.cpp
@@ -144,15 +144,15 @@ void MFMetaDataControl::updateSource(IMFPresentationDescriptor* sourcePD, IMFMed
                     continue;
                 bool common = true;
                 if (key == PKEY_Author) {
-                    m_availableMetaDatas.push_back(QtMultimedia::MetaData::Author);
+                    m_availableMetaDatas.push_back(QMediaMetaData::Author);
                 } else if (key == PKEY_Title) {
-                    m_availableMetaDatas.push_back(QtMultimedia::MetaData::Title);
+                    m_availableMetaDatas.push_back(QMediaMetaData::Title);
                 } else if (key == PKEY_ParentalRating) {
-                    m_availableMetaDatas.push_back(QtMultimedia::MetaData::ParentalRating);
+                    m_availableMetaDatas.push_back(QMediaMetaData::ParentalRating);
                 } else if (key == PKEY_Comment) {
-                    m_availableMetaDatas.push_back(QtMultimedia::MetaData::Description);
+                    m_availableMetaDatas.push_back(QMediaMetaData::Description);
                 } else if (key == PKEY_Copyright) {
-                    m_availableMetaDatas.push_back(QtMultimedia::MetaData::Copyright);
+                    m_availableMetaDatas.push_back(QMediaMetaData::Copyright);
                 //TODO: add more common keys
                 } else {
                     common = false;
@@ -183,15 +183,15 @@ void MFMetaDataControl::updateSource(IMFPresentationDescriptor* sourcePD, IMFMed
                         qDebug() << "metadata: " << QString::fromUtf16(sName);
 #endif
                         if (wcscmp(sName, L"Author") == 0) {
-                            m_availableMetaDatas.push_back(QtMultimedia::MetaData::Author);
+                            m_availableMetaDatas.push_back(QMediaMetaData::Author);
                         } else if (wcscmp(sName, L"Title") == 0) {
-                            m_availableMetaDatas.push_back(QtMultimedia::MetaData::Title);
+                            m_availableMetaDatas.push_back(QMediaMetaData::Title);
                         } else if (wcscmp(sName, L"Rating") == 0) {
-                            m_availableMetaDatas.push_back(QtMultimedia::MetaData::ParentalRating);
+                            m_availableMetaDatas.push_back(QMediaMetaData::ParentalRating);
                         } else if (wcscmp(sName, L"Description") == 0) {
-                            m_availableMetaDatas.push_back(QtMultimedia::MetaData::Description);
+                            m_availableMetaDatas.push_back(QMediaMetaData::Description);
                         } else if (wcscmp(sName, L"Copyright") == 0) {
-                            m_availableMetaDatas.push_back(QtMultimedia::MetaData::Copyright);
+                            m_availableMetaDatas.push_back(QMediaMetaData::Copyright);
                             //TODO: add more common keys
                         } else {
                             m_availableMetaDatas.push_back(QString::fromUtf16(reinterpret_cast<const ushort*>(sName)));
diff --git a/tests/auto/unit/qcamera/tst_qcamera.cpp b/tests/auto/unit/qcamera/tst_qcamera.cpp
index 7885795..a39945c 100644
--- a/tests/auto/unit/qcamera/tst_qcamera.cpp
+++ b/tests/auto/unit/qcamera/tst_qcamera.cpp
@@ -497,12 +497,12 @@ void tst_QCamera::testCameraCaptureMetadata()
 
     QVariantList metadata = metadataSignal[0];
     QCOMPARE(metadata[0].toInt(), id);
-    QCOMPARE(metadata[1].toString(), QtMultimedia::MetaData::FocalLengthIn35mmFilm);
+    QCOMPARE(metadata[1].toString(), QMediaMetaData::FocalLengthIn35mmFilm);
     QCOMPARE(metadata[2].value<QVariant>().toInt(), 50);
 
     metadata = metadataSignal[1];
     QCOMPARE(metadata[0].toInt(), id);
-    QCOMPARE(metadata[1].toString(), QtMultimedia::MetaData::DateTimeOriginal);
+    QCOMPARE(metadata[1].toString(), QMediaMetaData::DateTimeOriginal);
     QDateTime captureTime = metadata[2].value<QVariant>().value<QDateTime>();
     QVERIFY(qAbs(captureTime.secsTo(QDateTime::currentDateTime()) < 5)); //it should not takes more than 5 seconds for signal to arrive here
 
diff --git a/tests/auto/unit/qdeclarativeaudio/tst_qdeclarativeaudio.cpp b/tests/auto/unit/qdeclarativeaudio/tst_qdeclarativeaudio.cpp
index bc67733..5049b77 100644
--- a/tests/auto/unit/qdeclarativeaudio/tst_qdeclarativeaudio.cpp
+++ b/tests/auto/unit/qdeclarativeaudio/tst_qdeclarativeaudio.cpp
@@ -846,17 +846,17 @@ void tst_QDeclarativeAudio::metaData_data()
 
     QTest::newRow("title")
             << QByteArray("title")
-            << QtMultimedia::MetaData::Title
+            << QMediaMetaData::Title
             << QVariant(QString::fromLatin1("This is a title"));
 
     QTest::newRow("genre")
             << QByteArray("genre")
-            << QtMultimedia::MetaData::Genre
+            << QMediaMetaData::Genre
             << QVariant(QString::fromLatin1("rock"));
 
     QTest::newRow("trackNumber")
             << QByteArray("trackNumber")
-            << QtMultimedia::MetaData::TrackNumber
+            << QMediaMetaData::TrackNumber
             << QVariant(8);
 }
 
diff --git a/tests/auto/unit/qmediaobject/tst_qmediaobject.cpp b/tests/auto/unit/qmediaobject/tst_qmediaobject.cpp
index 9fd8c74..1b83e1a 100644
--- a/tests/auto/unit/qmediaobject/tst_qmediaobject.cpp
+++ b/tests/auto/unit/qmediaobject/tst_qmediaobject.cpp
@@ -346,7 +346,7 @@ void tst_QMediaObject::nullMetaDataControl()
 
     QCOMPARE(object.isMetaDataAvailable(), false);
 
-    QCOMPARE(object.metaData(QtMultimedia::MetaData::Title).toString(), QString());
+    QCOMPARE(object.metaData(QMediaMetaData::Title).toString(), QString());
     QCOMPARE(object.availableMetaData(), QStringList());
     QCOMPARE(spy.count(), 0);
 }
@@ -422,18 +422,18 @@ void tst_QMediaObject::metaData()
     QtTestMediaObject object(&service);
     QVERIFY(object.availableMetaData().isEmpty());
 
-    service.metaData.m_data.insert(QtMultimedia::MetaData::AlbumArtist, artist);
-    service.metaData.m_data.insert(QtMultimedia::MetaData::Title, title);
-    service.metaData.m_data.insert(QtMultimedia::MetaData::Genre, genre);
+    service.metaData.m_data.insert(QMediaMetaData::AlbumArtist, artist);
+    service.metaData.m_data.insert(QMediaMetaData::Title, title);
+    service.metaData.m_data.insert(QMediaMetaData::Genre, genre);
 
-    QCOMPARE(object.metaData(QtMultimedia::MetaData::AlbumArtist).toString(), artist);
-    QCOMPARE(object.metaData(QtMultimedia::MetaData::Title).toString(), title);
+    QCOMPARE(object.metaData(QMediaMetaData::AlbumArtist).toString(), artist);
+    QCOMPARE(object.metaData(QMediaMetaData::Title).toString(), title);
 
     QStringList metaDataKeys = object.availableMetaData();
     QCOMPARE(metaDataKeys.size(), 3);
-    QVERIFY(metaDataKeys.contains(QtMultimedia::MetaData::AlbumArtist));
-    QVERIFY(metaDataKeys.contains(QtMultimedia::MetaData::Title));
-    QVERIFY(metaDataKeys.contains(QtMultimedia::MetaData::Genre));
+    QVERIFY(metaDataKeys.contains(QMediaMetaData::AlbumArtist));
+    QVERIFY(metaDataKeys.contains(QMediaMetaData::Title));
+    QVERIFY(metaDataKeys.contains(QMediaMetaData::Genre));
 }
 
 void tst_QMediaObject::availability()
diff --git a/tests/auto/unit/qmediarecorder/tst_qmediarecorder.cpp b/tests/auto/unit/qmediarecorder/tst_qmediarecorder.cpp
index 6f39658..c544e99 100644
--- a/tests/auto/unit/qmediarecorder/tst_qmediarecorder.cpp
+++ b/tests/auto/unit/qmediarecorder/tst_qmediarecorder.cpp
@@ -843,9 +843,9 @@ void tst_QMediaRecorder::nullMetaDataControl()
     QCOMPARE(recorder.isMetaDataAvailable(), false);
     QCOMPARE(recorder.isMetaDataWritable(), false);
 
-    recorder.setMetaData(QtMultimedia::MetaData::Title, title);
+    recorder.setMetaData(QMediaMetaData::Title, title);
 
-    QCOMPARE(recorder.metaData(QtMultimedia::MetaData::Title).toString(), QString());
+    QCOMPARE(recorder.metaData(QMediaMetaData::Title).toString(), QString());
     QCOMPARE(recorder.availableMetaData(), QStringList());
     QCOMPARE(spy.count(), 0);
 }
@@ -959,19 +959,19 @@ void tst_QMediaRecorder::metaData()
     QMediaRecorder recorder(&object);
     QVERIFY(object.availableMetaData().isEmpty());
 
-    service.mockMetaDataControl->m_data.insert(QtMultimedia::MetaData::AlbumArtist, artist);
-    service.mockMetaDataControl->m_data.insert(QtMultimedia::MetaData::Title, title);
-    service.mockMetaDataControl->m_data.insert(QtMultimedia::MetaData::Genre, genre);
+    service.mockMetaDataControl->m_data.insert(QMediaMetaData::AlbumArtist, artist);
+    service.mockMetaDataControl->m_data.insert(QMediaMetaData::Title, title);
+    service.mockMetaDataControl->m_data.insert(QMediaMetaData::Genre, genre);
     service.mockMetaDataControl->m_data.insert(QLatin1String("CustomEntry"), custom );
 
-    QCOMPARE(recorder.metaData(QtMultimedia::MetaData::AlbumArtist).toString(), artist);
-    QCOMPARE(recorder.metaData(QtMultimedia::MetaData::Title).toString(), title);
+    QCOMPARE(recorder.metaData(QMediaMetaData::AlbumArtist).toString(), artist);
+    QCOMPARE(recorder.metaData(QMediaMetaData::Title).toString(), title);
 
     QStringList metaDataKeys = recorder.availableMetaData();
     QCOMPARE(metaDataKeys.size(), 4);
-    QVERIFY(metaDataKeys.contains(QtMultimedia::MetaData::AlbumArtist));
-    QVERIFY(metaDataKeys.contains(QtMultimedia::MetaData::Title));
-    QVERIFY(metaDataKeys.contains(QtMultimedia::MetaData::Genre));
+    QVERIFY(metaDataKeys.contains(QMediaMetaData::AlbumArtist));
+    QVERIFY(metaDataKeys.contains(QMediaMetaData::Title));
+    QVERIFY(metaDataKeys.contains(QMediaMetaData::Genre));
     QVERIFY(metaDataKeys.contains(QLatin1String("CustomEntry")));
 }
 
@@ -995,9 +995,9 @@ void tst_QMediaRecorder::setMetaData()
 
     QMediaRecorder recorder(&object);
 
-    recorder.setMetaData(QtMultimedia::MetaData::Title, title);
-    QCOMPARE(recorder.metaData(QtMultimedia::MetaData::Title).toString(), title);
-    QCOMPARE(service.mockMetaDataControl->m_data.value(QtMultimedia::MetaData::Title).toString(), title);
+    recorder.setMetaData(QMediaMetaData::Title, title);
+    QCOMPARE(recorder.metaData(QMediaMetaData::Title).toString(), title);
+    QCOMPARE(service.mockMetaDataControl->m_data.value(QMediaMetaData::Title).toString(), title);
 }
 
 void tst_QMediaRecorder::testAudioSettingsCopyConstructor()
diff --git a/tests/auto/unit/qmetadatareadercontrol/tst_qmetadatareadercontrol.cpp b/tests/auto/unit/qmetadatareadercontrol/tst_qmetadatareadercontrol.cpp
index 2efc57e..84e169b 100644
--- a/tests/auto/unit/qmetadatareadercontrol/tst_qmetadatareadercontrol.cpp
+++ b/tests/auto/unit/qmetadatareadercontrol/tst_qmetadatareadercontrol.cpp
@@ -91,7 +91,7 @@ void tst_QMetaDataReaderControl::metaDataReaderControlMetaData ()
 {
     MockMetaDataReaderControl *metaData = new MockMetaDataReaderControl();
     QVERIFY(metaData !=NULL);
-    metaData->metaData(QtMultimedia::MetaData::Title);
+    metaData->metaData(QMediaMetaData::Title);
     delete metaData;
 }
 
diff --git a/tests/auto/unit/qmetadatawritercontrol/tst_qmetadatawritercontrol.cpp b/tests/auto/unit/qmetadatawritercontrol/tst_qmetadatawritercontrol.cpp
index c0c8988..c3cfd22 100644
--- a/tests/auto/unit/qmetadatawritercontrol/tst_qmetadatawritercontrol.cpp
+++ b/tests/auto/unit/qmetadatawritercontrol/tst_qmetadatawritercontrol.cpp
@@ -74,8 +74,8 @@ void tst_QMetaDataWriterControl::constructor()
     mock->availableMetaData();
     mock->isMetaDataAvailable();
     mock->isWritable();
-    mock->metaData(QtMultimedia::MetaData::Title);
-    mock->setMetaData(QtMultimedia::MetaData::Title, QVariant());
+    mock->metaData(QMediaMetaData::Title);
+    mock->setMetaData(QMediaMetaData::Title, QVariant());
     ((MockMetaDataWriterControl*)mock)->setWritable();
     ((MockMetaDataWriterControl*)mock)->setMetaDataAvailable();
     delete mock;
diff --git a/tests/auto/unit/qmultimedia_common/mockcameraimagecapturecontrol.h b/tests/auto/unit/qmultimedia_common/mockcameraimagecapturecontrol.h
index a11c140..6fcd356 100644
--- a/tests/auto/unit/qmultimedia_common/mockcameraimagecapturecontrol.h
+++ b/tests/auto/unit/qmultimedia_common/mockcameraimagecapturecontrol.h
@@ -95,11 +95,11 @@ private Q_SLOTS:
             emit imageCaptured(m_captureRequest, QImage());
 
             emit imageMetadataAvailable(m_captureRequest,
-                                        QtMultimedia::MetaData::FocalLengthIn35mmFilm,
+                                        QMediaMetaData::FocalLengthIn35mmFilm,
                                         QVariant(50));
 
             emit imageMetadataAvailable(m_captureRequest,
-                                        QtMultimedia::MetaData::DateTimeOriginal,
+                                        QMediaMetaData::DateTimeOriginal,
                                         QVariant(QDateTime::currentDateTime()));
 
             emit imageMetadataAvailable(m_captureRequest,