diff --git a/src/plugins/script/qtdbus/main.cpp b/src/plugins/script/qtdbus/main.cpp
index 37db668..fd93579 100644
--- a/src/plugins/script/qtdbus/main.cpp
+++ b/src/plugins/script/qtdbus/main.cpp
@@ -108,7 +108,7 @@ static QScriptValue setupDBusInterface(QScriptEngine *engine, QDBusAbstractInter
         const QMetaObject *mo = iface->metaObject();
         for (int i = 0; i < mo->methodCount(); ++i) {
             const QMetaMethod method = mo->method(i);
-            const QByteArray signature = method.signature();
+            const QByteArray signature = method.methodSignature();
             //qDebug() << "signature" << signature;
             int parenIndex = signature.indexOf('(');
             if (parenIndex == -1)
diff --git a/src/script/api/qscriptengine.cpp b/src/script/api/qscriptengine.cpp
index 73e1549..5773983 100644
--- a/src/script/api/qscriptengine.cpp
+++ b/src/script/api/qscriptengine.cpp
@@ -621,7 +621,7 @@ JSC::JSValue JSC_HOST_CALL functionDisconnect(JSC::ExecState *exec, JSC::JSObjec
     if (sig.methodType() != QMetaMethod::Signal) {
         QString message = QString::fromLatin1("Function.prototype.disconnect: %0::%1 is not a signal")
                           .arg(QLatin1String(qtSignal->metaObject()->className()))
-                          .arg(QLatin1String(sig.signature()));
+                          .arg(QLatin1String(sig.methodSignature().constData()));
         return JSC::throwError(exec, JSC::TypeError, message);
     }
 
@@ -652,7 +652,7 @@ JSC::JSValue JSC_HOST_CALL functionDisconnect(JSC::ExecState *exec, JSC::JSObjec
     if (!ok) {
         QString message = QString::fromLatin1("Function.prototype.disconnect: failed to disconnect from %0::%1")
                           .arg(QLatin1String(qtSignal->metaObject()->className()))
-                          .arg(QLatin1String(sig.signature()));
+                          .arg(QLatin1String(sig.methodSignature().constData()));
         return JSC::throwError(exec, JSC::GeneralError, message);
     }
     return JSC::jsUndefined();
@@ -685,7 +685,7 @@ JSC::JSValue JSC_HOST_CALL functionConnect(JSC::ExecState *exec, JSC::JSObject *
     if (sig.methodType() != QMetaMethod::Signal) {
         QString message = QString::fromLatin1("Function.prototype.connect: %0::%1 is not a signal")
                           .arg(QLatin1String(qtSignal->metaObject()->className()))
-                          .arg(QLatin1String(sig.signature()));
+                          .arg(QLatin1String(sig.methodSignature().constData()));
         return JSC::throwError(exec, JSC::TypeError, message);
     }
 
@@ -693,13 +693,13 @@ JSC::JSValue JSC_HOST_CALL functionConnect(JSC::ExecState *exec, JSC::JSObject *
         QList<int> overloads = qtSignal->overloadedIndexes();
         if (!overloads.isEmpty()) {
             overloads.append(qtSignal->initialIndex());
-            QByteArray signature = sig.signature();
+            QByteArray signature = sig.methodSignature();
             QString message = QString::fromLatin1("Function.prototype.connect: ambiguous connect to %0::%1(); candidates are\n")
                               .arg(QLatin1String(qtSignal->metaObject()->className()))
                               .arg(QLatin1String(signature.left(signature.indexOf('('))));
             for (int i = 0; i < overloads.size(); ++i) {
                 QMetaMethod mtd = meta->method(overloads.at(i));
-                message.append(QString::fromLatin1("    %0\n").arg(QString::fromLatin1(mtd.signature())));
+                message.append(QString::fromLatin1("    %0\n").arg(QString::fromLatin1(mtd.methodSignature().constData())));
             }
             message.append(QString::fromLatin1("Use e.g. object['%0'].connect() to connect to a particular overload")
                            .arg(QLatin1String(signature)));
@@ -734,7 +734,7 @@ JSC::JSValue JSC_HOST_CALL functionConnect(JSC::ExecState *exec, JSC::JSObject *
     if (!ok) {
         QString message = QString::fromLatin1("Function.prototype.connect: failed to connect to %0::%1")
                           .arg(QLatin1String(qtSignal->metaObject()->className()))
-                          .arg(QLatin1String(sig.signature()));
+                          .arg(QLatin1String(sig.methodSignature().constData()));
         return JSC::throwError(exec, JSC::GeneralError, message);
     }
     return JSC::jsUndefined();
diff --git a/src/script/bridge/qscriptqobject.cpp b/src/script/bridge/qscriptqobject.cpp
index ffc0ba7..415e9e7 100644
--- a/src/script/bridge/qscriptqobject.cpp
+++ b/src/script/bridge/qscriptqobject.cpp
@@ -168,11 +168,11 @@ static bool isEnumerableMetaProperty(const QMetaProperty &prop,
 */
 static inline int methodNameLength(const QMetaMethod &method)
 {
-    const char *signature = method.signature();
-    const char *s = signature;
+    QByteArray signature = method.methodSignature();
+    const char *s = signature.constData();
     while (*s && (*s != '('))
         ++s;
-    return s - signature;
+    return s - signature.constData();
 }
 
 /*! \internal
@@ -191,10 +191,10 @@ static inline QByteArray methodName(const char *signature, int nameLength)
   false.
 */
 static inline bool methodNameEquals(const QMetaMethod &method,
-                                    const char *signature, int nameLength)
+                                    const QByteArray &signature, int nameLength)
 {
-    const char *otherSignature = method.signature();
-    return !qstrncmp(otherSignature, signature, nameLength)
+    QByteArray otherSignature = method.methodSignature();
+    return !qstrncmp(otherSignature.constData(), signature.constData(), nameLength)
         && (otherSignature[nameLength] == '(');
 }
 
@@ -320,7 +320,7 @@ QList<int> QScript::QtFunction::overloadedIndexes() const
     QMetaMethod method = meta->method(initialIndex());
     int nameLength = methodNameLength(method);
     for (int index = mostGeneralMethod() - 1; index >= 0; --index) {
-        if (methodNameEquals(meta->method(index), method.signature(), nameLength))
+        if (methodNameEquals(meta->method(index), method.methodSignature(), nameLength))
             result.append(index);
     }
     return result;
@@ -499,14 +499,14 @@ static JSC::JSValue callQtMethod(JSC::ExecState *exec, QMetaMethod::MethodType c
     QVector<int> conversionFailed;
     int index;
     int nameLength = 0;
-    const char *initialMethodSignature = 0;
+    QByteArray initialMethodSignature;
     exec->clearException();
     QScriptEnginePrivate *engine = QScript::scriptEngineFromExec(exec);
     for (index = initialIndex; index >= 0; --index) {
         QMetaMethod method = metaMethod(meta, callType, index);
 
         if (index == initialIndex) {
-            initialMethodSignature = method.signature();
+            initialMethodSignature = method.methodSignature();
             nameLength = methodNameLength(method);
         } else {
             if (!methodNameEquals(method, initialMethodSignature, nameLength))
@@ -836,7 +836,7 @@ static JSC::JSValue callQtMethod(JSC::ExecState *exec, QMetaMethod::MethodType c
                 if (i > 0)
                     message += QLatin1String("\n");
                 QMetaMethod mtd = metaMethod(meta, callType, conversionFailed.at(i));
-                message += QString::fromLatin1("    %0").arg(QString::fromLatin1(mtd.signature()));
+                message += QString::fromLatin1("    %0").arg(QString::fromLatin1(mtd.methodSignature().constData()));
             }
             result = JSC::throwError(exec, JSC::TypeError, message);
         } else if (!unresolved.isEmpty()) {
@@ -863,7 +863,7 @@ static JSC::JSValue callQtMethod(JSC::ExecState *exec, QMetaMethod::MethodType c
                 if (i > 0)
                     message += QLatin1String("\n");
                 QMetaMethod mtd = metaMethod(meta, callType, tooFewArgs.at(i));
-                message += QString::fromLatin1("    %0").arg(QString::fromLatin1(mtd.signature()));
+                message += QString::fromLatin1("    %0").arg(QString::fromLatin1(mtd.methodSignature().constData()));
             }
             result = JSC::throwError(exec, JSC::SyntaxError, message);
         }
@@ -881,7 +881,7 @@ static JSC::JSValue callQtMethod(JSC::ExecState *exec, QMetaMethod::MethodType c
                     if (i > 0)
                         message += QLatin1String("\n");
                     QMetaMethod mtd = metaMethod(meta, callType, candidates.at(i).index);
-                    message += QString::fromLatin1("    %0").arg(QString::fromLatin1(mtd.signature()));
+                    message += QString::fromLatin1("    %0").arg(QString::fromLatin1(mtd.methodSignature().constData()));
                 }
                 result = JSC::throwError(exec, JSC::TypeError, message);
             } else {
@@ -1594,7 +1594,7 @@ void QObjectDelegate::getOwnPropertyNames(QScriptObject *object, JSC::ExecState
             QMetaMethod method = meta->method(i);
             if (hasMethodAccess(method, i, opt)) {
                 QMetaMethod method = meta->method(i);
-                QString sig = QString::fromLatin1(method.signature());
+                QString sig = QString::fromLatin1(method.methodSignature().constData());
                 propertyNames.add(JSC::Identifier(exec, sig));
             }
         }
@@ -2120,7 +2120,7 @@ void QObjectConnectionManager::execute(int slotIndex, void **argv)
         if (!argType) {
             qWarning("QScriptEngine: Unable to handle unregistered datatype '%s' "
                         "when invoking handler of signal %s::%s",
-                        typeName.constData(), meta->className(), method.signature());
+                        typeName.constData(), meta->className(), method.methodSignature().constData());
             actual = JSC::jsUndefined();
         } else if (argType == QMetaType::QVariant) {
             actual = QScriptEnginePrivate::jscValueFromVariant(exec, *reinterpret_cast<QVariant*>(arg));
@@ -2196,7 +2196,7 @@ bool QObjectConnectionManager::addSignalHandler(
         QMetaMethod signal = sender->metaObject()->method(signalIndex);
         QByteArray signalString;
         signalString.append('2'); // signal code
-        signalString.append(signal.signature());
+        signalString.append(signal.methodSignature());
         static_cast<QObjectNotifyCaller*>(sender)->callConnectNotify(signalString);
     }
     return ok;
@@ -2219,7 +2219,7 @@ bool QObjectConnectionManager::removeSignalHandler(
                 QMetaMethod signal = sender->metaObject()->method(signalIndex);
                 QByteArray signalString;
                 signalString.append('2'); // signal code
-                signalString.append(signal.signature());
+                signalString.append(signal.methodSignature());
                 static_cast<QScript::QObjectNotifyCaller*>(sender)->callDisconnectNotify(signalString);
             }
             return ok;
diff --git a/tests/benchmarks/script/qscriptqobject/tst_qscriptqobject.cpp b/tests/benchmarks/script/qscriptqobject/tst_qscriptqobject.cpp
index 52d6f08..ea560bb 100644
--- a/tests/benchmarks/script/qscriptqobject/tst_qscriptqobject.cpp
+++ b/tests/benchmarks/script/qscriptqobject/tst_qscriptqobject.cpp
@@ -407,7 +407,7 @@ void tst_QScriptQObject::readMethodByName_dataHelper(const QMetaObject *mo)
         QMetaMethod method = mo->method(i);
         if (method.access() == QMetaMethod::Private)
             continue;
-        QByteArray signature = method.signature();
+        QByteArray signature = method.methodSignature();
         QByteArray name = signature.left(signature.indexOf('('));
         if (uniqueNames.contains(name))
             continue;
@@ -424,7 +424,7 @@ void tst_QScriptQObject::readMethodBySignature_dataHelper(const QMetaObject *mo)
         QMetaMethod method = mo->method(i);
         if (method.access() == QMetaMethod::Private)
             continue;
-        QTest::newRow(method.signature()) << QString::fromLatin1(method.signature());
+        QTest::newRow(method.methodSignature().constData()) << QString::fromLatin1(method.methodSignature().constData());
     }
 }