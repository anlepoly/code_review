diff --git a/src/qml/qml/qqmlcomponent.cpp b/src/qml/qml/qqmlcomponent.cpp
index 10f684d..c210639 100644
--- a/src/qml/qml/qqmlcomponent.cpp
+++ b/src/qml/qml/qqmlcomponent.cpp
@@ -503,7 +503,9 @@ QQmlComponent::QQmlComponent(QQmlEngine *engine, const QUrl &url, QObject *paren
     \l QUrl::fromLocalFile() when loading a file from the local filesystem.
 
     \sa loadUrl()
-*/QQmlComponent::QQmlComponent(QQmlEngine *engine, const QUrl &url, CompilationMode mode, QObject *parent)
+*/
+QQmlComponent::QQmlComponent(QQmlEngine *engine, const QUrl &url, CompilationMode mode,
+                             QObject *parent)
 : QObject(*(new QQmlComponentPrivate), parent)
 {
     Q_D(QQmlComponent);
@@ -518,7 +520,7 @@ QQmlComponent::QQmlComponent(QQmlEngine *engine, const QUrl &url, QObject *paren
     \sa loadUrl()
 */
 QQmlComponent::QQmlComponent(QQmlEngine *engine, const QString &fileName, 
-                           QObject *parent)
+                             QObject *parent)
 : QObject(*(new QQmlComponentPrivate), parent)
 {
     Q_D(QQmlComponent);
@@ -534,7 +536,7 @@ QQmlComponent::QQmlComponent(QQmlEngine *engine, const QString &fileName,
     \sa loadUrl()
 */
 QQmlComponent::QQmlComponent(QQmlEngine *engine, const QString &fileName,
-                           CompilationMode mode, QObject *parent)
+                             CompilationMode mode, QObject *parent)
 : QObject(*(new QQmlComponentPrivate), parent)
 {
     Q_D(QQmlComponent);
diff --git a/src/quick/items/context2d/qquickcanvasitem.cpp b/src/quick/items/context2d/qquickcanvasitem.cpp
index 0e5a3a0..571b4b0 100644
--- a/src/quick/items/context2d/qquickcanvasitem.cpp
+++ b/src/quick/items/context2d/qquickcanvasitem.cpp
@@ -254,7 +254,7 @@ bool QQuickCanvasItem::isAvailable() const
     The type name is the same as used in the getContext() call, for the 2d
     canvas the value will be "2d".
 
-    \sa QtQuick2::Canvas::getContext QtQuick2::Canvas::available
+    \sa QtQuick2::Canvas::getContext, QtQuick2::Canvas::available
 */
 
 QString QQuickCanvasItem::contextType() const
@@ -312,7 +312,7 @@ QQmlV8Handle QQuickCanvasItem::context() const
     Only those tiles within the current canvas window are painted by the Canvas
     render engine.
 
-    \sa QtQuick2::Canvas::tileSize QtQuick2::Canvas::canvasWindow
+    \sa QtQuick2::Canvas::tileSize, QtQuick2::Canvas::canvasWindow
 */
 QSizeF QQuickCanvasItem::canvasSize() const
 {
@@ -346,7 +346,7 @@ void QQuickCanvasItem::setCanvasSize(const QSizeF & size)
 
     By default the tileSize is the same as the canvasSize.
 
-    \sa QtQuick2::Canvas::canvaasSize QtQuick2::Canvas::canvasWindow
+    \sa QtQuick2::Canvas::canvaasSize, QtQuick2::Canvas::canvasWindow
 */
 QSize QQuickCanvasItem::tileSize() const
 {
@@ -379,7 +379,7 @@ void QQuickCanvasItem::setTileSize(const QSize & size)
      can display different visible areas by changing the canvas windowSize
      and/or position.
 
-    \sa QtQuick2::Canvas::canvasSize QtQuick2::Canvas::tileSize
+    \sa QtQuick2::Canvas::canvasSize, QtQuick2::Canvas::tileSize
 */
 QRectF QQuickCanvasItem::canvasWindow() const
 {
@@ -746,8 +746,8 @@ void QQuickCanvasItem::requestPaint()
     canvas renderer will redraw it. This will trigger the "onPaint" signal
     handler function.
 
-    \sa QtQuick2::Canvas::paint QtQuick2::Canvas::requestPaint
-  */
+    \sa QtQuick2::Canvas::paint, QtQuick2::Canvas::requestPaint
+*/
 
 void QQuickCanvasItem::markDirty(const QRectF& rect)
 {
@@ -776,8 +776,8 @@ void QQuickCanvasItem::checkAnimationCallbacks()
    Note: calling this method will force painting the whole canvas, not just the
    current canvas visible window.
 
-   \sa canvasWindow canvasSize toDataURL
-  */
+   \sa canvasWindow, canvasSize, toDataURL
+*/
 bool QQuickCanvasItem::save(const QString &filename) const
 {
     Q_D(const QQuickCanvasItem);
@@ -807,9 +807,9 @@ QImage QQuickCanvasItem::loadedImage(const QUrl& url)
     The loaded image can be unloaded by the \a QtQuick2::Canvas::unloadImage method.
 
     Note: Only loaded images can be painted on the Canvas item.
-  \sa QtQuick2::Canvas::unloadImage QtQuick2::Canvas::imageLoaded QtQuick2::Canvas::isImageLoaded
-  \sa QtQuick2::Context2D::createImageData QtQuick2::Context2D::drawImage
-  */
+  \sa QtQuick2::Canvas::unloadImage, QtQuick2::Canvas::imageLoaded, QtQuick2::Canvas::isImageLoaded,
+      QtQuick2::Context2D::createImageData, QtQuick2::Context2D::drawImage
+*/
 void QQuickCanvasItem::loadImage(const QUrl& url)
 {
     Q_D(QQuickCanvasItem);
@@ -832,9 +832,9 @@ void QQuickCanvasItem::loadImage(const QUrl& url)
   Once an image is unloaded it cannot be painted by the canvas context
   unless it is loaded again.
 
-  \sa QtQuick2::Canvas::loadImage QtQuick2::Canvas::imageLoaded QtQuick2::Canvas::isImageLoaded
-  \sa QtQuick2::Context2D::createImageData QtQuick2::Context2D::drawImage
-  */
+  \sa QtQuick2::Canvas::loadImage, QtQuick2::Canvas::imageLoaded, QtQuick2::Canvas::isImageLoaded,
+      QtQuick2::Context2D::createImageData, QtQuick2::Context2D::drawImage
+*/
 void QQuickCanvasItem::unloadImage(const QUrl& url)
 {
     Q_D(QQuickCanvasItem);
@@ -850,7 +850,7 @@ void QQuickCanvasItem::unloadImage(const QUrl& url)
   Returns true if the \a image failed to load.
 
   \sa QtQuick2::Canvas::loadImage
-  */
+*/
 bool QQuickCanvasItem::isImageError(const QUrl& url) const
 {
     Q_D(const QQuickCanvasItem);
@@ -864,7 +864,7 @@ bool QQuickCanvasItem::isImageError(const QUrl& url) const
   Returns true if the \a image is currently loading.
 
   \sa QtQuick2::Canvas::loadImage
-  */
+*/
 bool QQuickCanvasItem::isImageLoading(const QUrl& url) const
 {
     Q_D(const QQuickCanvasItem);
@@ -877,7 +877,7 @@ bool QQuickCanvasItem::isImageLoading(const QUrl& url) const
   Returns true if the \a image is sucessfully loaded and ready to use.
 
   \sa QtQuick2::Canvas::loadImage
-  */
+*/
 bool QQuickCanvasItem::isImageLoaded(const QUrl& url) const
 {
     Q_D(const QQuickCanvasItem);
@@ -907,7 +907,7 @@ QImage QQuickCanvasItem::toImage(const QRectF& rect) const
    The default \a mimeType is "image/png".
 
    \sa QtQuick2::Canvas::save
-  */
+*/
 QString QQuickCanvasItem::toDataURL(const QString& mimeType) const
 {
     QImage image = toImage();
diff --git a/src/quick/items/context2d/qquickcontext2d.cpp b/src/quick/items/context2d/qquickcontext2d.cpp
index 6fa3644..0a45ecf 100644
--- a/src/quick/items/context2d/qquickcontext2d.cpp
+++ b/src/quick/items/context2d/qquickcontext2d.cpp
@@ -1586,8 +1586,8 @@ static v8::Handle<v8::Value> ctx2d_strokeRect(const v8::Arguments &args)
   \qmlmethod object QtQuick2::Context2D::arc(real x, real y, real radius, real startAngle, real endAngle, bool anticlockwise)
   Adds an arc to the current subpath that lies on the circumference of the circle whose center is at the point (\c x,\cy) and whose radius is \c radius.
   \image qml-item-canvas-arcTo2.png
-  \sa  QtQuick2::Context2D::arcTo
-  See {http://www.w3.org/TR/2dcontext/#dom-context-2d-arc}{W3C 2d context standard for arc}
+  \sa QtQuick2::Context2D::arcTo,
+      {http://www.w3.org/TR/2dcontext/#dom-context-2d-arc}{W3C 2d context standard for arc}
   */
 static v8::Handle<v8::Value> ctx2d_arc(const v8::Arguments &args)
 {
@@ -1633,8 +1633,8 @@ static v8::Handle<v8::Value> ctx2d_arc(const v8::Arguments &args)
 
     \image qml-item-canvas-startAngle.png
     The anticlockwise has the value TRUE for each arc in the figure above because they are all drawn in the counterclockwise direction.
-  \sa  QtQuick2::Context2D::arc
-  \sa {http://www.w3.org/TR/2dcontext/#dom-context-2d-arcto}{W3C 2d context standard for arcTo}
+  \sa QtQuick2::Context2D::arc, {http://www.w3.org/TR/2dcontext/#dom-context-2d-arcto}{W3C 2d
+      context standard for arcTo}
   */
 static v8::Handle<v8::Value> ctx2d_arcTo(const v8::Arguments &args)
 {
diff --git a/src/quick/util/qquickstategroup.cpp b/src/quick/util/qquickstategroup.cpp
index 3a31927..45af0e8 100644
--- a/src/quick/util/qquickstategroup.cpp
+++ b/src/quick/util/qquickstategroup.cpp
@@ -118,7 +118,7 @@ public:
    }
    \endqml
 
-   \sa {qmlstate}{States} {QML Animation and Transitions}{Transitions}, {QtQml}
+   \sa {qmlstate}{States}, {QML Animation and Transitions}{Transitions}, {QtQml}
 */
 
 QQuickStateGroup::QQuickStateGroup(QObject *parent)