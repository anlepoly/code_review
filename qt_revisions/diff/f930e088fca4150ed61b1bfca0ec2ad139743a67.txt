diff --git a/doc/config/compat.qdocconf b/doc/config/compat.qdocconf
deleted file mode 100644
index 924db57..0000000
--- a/doc/config/compat.qdocconf
+++ /dev/null
@@ -1,30 +0,0 @@
-alias.include                   = input
-
-macro.0                         = "\\\\0"
-macro.b                         = "\\\\b"
-macro.n                         = "\\\\n"
-macro.r                         = "\\\\r"
-macro.i                         = "\\li"
-macro.i11                       = "\\li{1,1}"
-macro.i12                       = "\\li{1,2}"
-macro.i13                       = "\\li{1,3}"
-macro.i14                       = "\\li{1,4}"
-macro.i15                       = "\\li{1,5}"
-macro.i16                       = "\\li{1,6}"
-macro.i17                       = "\\li{1,7}"
-macro.i18                       = "\\li{1,8}"
-macro.i19                       = "\\li{1,9}"
-macro.i21                       = "\\li{2,1}"
-macro.i31                       = "\\li{3,1}"
-macro.i41                       = "\\li{4,1}"
-macro.i51                       = "\\li{5,1}"
-macro.i61                       = "\\li{6,1}"
-macro.i71                       = "\\li{7,1}"
-macro.i81                       = "\\li{8,1}"
-macro.i91                       = "\\li{9,1}"
-macro.img                       = "\\image"
-macro.endquote                  = "\\endquotation"
-macro.relatesto                 = "\\relates"
-
-spurious                        = "Missing comma in .*" \
-                                  "Missing pattern .*"
diff --git a/doc/config/images/arrow_down.png b/doc/config/images/arrow_down.png
deleted file mode 100644
index 9d01e97..0000000
Binary files a/doc/config/images/arrow_down.png and /dev/null differ
diff --git a/doc/config/images/bg_l.png b/doc/config/images/bg_l.png
deleted file mode 100755
index 90b1da1..0000000
Binary files a/doc/config/images/bg_l.png and /dev/null differ
diff --git a/doc/config/images/bg_l_blank.png b/doc/config/images/bg_l_blank.png
deleted file mode 100755
index 5a9673d..0000000
Binary files a/doc/config/images/bg_l_blank.png and /dev/null differ
diff --git a/doc/config/images/bg_ll_blank.png b/doc/config/images/bg_ll_blank.png
deleted file mode 100644
index 95a1c45..0000000
Binary files a/doc/config/images/bg_ll_blank.png and /dev/null differ
diff --git a/doc/config/images/bg_r.png b/doc/config/images/bg_r.png
deleted file mode 100755
index f0fb121..0000000
Binary files a/doc/config/images/bg_r.png and /dev/null differ
diff --git a/doc/config/images/bg_ul_blank.png b/doc/config/images/bg_ul_blank.png
deleted file mode 100644
index 7051261..0000000
Binary files a/doc/config/images/bg_ul_blank.png and /dev/null differ
diff --git a/doc/config/images/box_bg.png b/doc/config/images/box_bg.png
deleted file mode 100755
index 3322f92..0000000
Binary files a/doc/config/images/box_bg.png and /dev/null differ
diff --git a/doc/config/images/breadcrumb.png b/doc/config/images/breadcrumb.png
deleted file mode 100755
index 0ded551..0000000
Binary files a/doc/config/images/breadcrumb.png and /dev/null differ
diff --git a/doc/config/images/bullet_dn.png b/doc/config/images/bullet_dn.png
deleted file mode 100644
index f776247..0000000
Binary files a/doc/config/images/bullet_dn.png and /dev/null differ
diff --git a/doc/config/images/bullet_gt.png b/doc/config/images/bullet_gt.png
deleted file mode 100755
index 7561b4e..0000000
Binary files a/doc/config/images/bullet_gt.png and /dev/null differ
diff --git a/doc/config/images/bullet_sq.png b/doc/config/images/bullet_sq.png
deleted file mode 100755
index a84845e..0000000
Binary files a/doc/config/images/bullet_sq.png and /dev/null differ
diff --git a/doc/config/images/bullet_up.png b/doc/config/images/bullet_up.png
deleted file mode 100644
index 7de2f06..0000000
Binary files a/doc/config/images/bullet_up.png and /dev/null differ
diff --git a/doc/config/images/feedbackground.png b/doc/config/images/feedbackground.png
deleted file mode 100755
index 3a38d99..0000000
Binary files a/doc/config/images/feedbackground.png and /dev/null differ
diff --git a/doc/config/images/header_bg.png b/doc/config/images/header_bg.png
deleted file mode 100644
index a436aa6..0000000
Binary files a/doc/config/images/header_bg.png and /dev/null differ
diff --git a/doc/config/images/horBar.png b/doc/config/images/horBar.png
deleted file mode 100755
index 100fe91..0000000
Binary files a/doc/config/images/horBar.png and /dev/null differ
diff --git a/doc/config/images/page.png b/doc/config/images/page.png
deleted file mode 100644
index 1db151b..0000000
Binary files a/doc/config/images/page.png and /dev/null differ
diff --git a/doc/config/images/page_bg.png b/doc/config/images/page_bg.png
deleted file mode 100755
index 9b3bd99..0000000
Binary files a/doc/config/images/page_bg.png and /dev/null differ
diff --git a/doc/config/images/qt-logo.png b/doc/config/images/qt-logo.png
deleted file mode 100644
index 14ddf2a..0000000
Binary files a/doc/config/images/qt-logo.png and /dev/null differ
diff --git a/doc/config/images/spinner.gif b/doc/config/images/spinner.gif
deleted file mode 100644
index 1ed786f..0000000
Binary files a/doc/config/images/spinner.gif and /dev/null differ
diff --git a/doc/config/images/sprites-combined.png b/doc/config/images/sprites-combined.png
deleted file mode 100755
index 7f96866..0000000
Binary files a/doc/config/images/sprites-combined.png and /dev/null differ
diff --git a/doc/config/macros.qdocconf b/doc/config/macros.qdocconf
deleted file mode 100644
index d8b96c0..0000000
--- a/doc/config/macros.qdocconf
+++ /dev/null
@@ -1,37 +0,0 @@
-macro.aacute.HTML       = "&aacute;"
-macro.Aring.HTML        = "&Aring;"
-macro.aring.HTML        = "&aring;"
-macro.Auml.HTML         = "&Auml;"
-macro.author            = "\\b{Author:}"
-macro.br.HTML           = "<br />"
-macro.BR.HTML           = "<br />"
-macro.copyright.HTML    = "&copy;"
-macro.eacute.HTML       = "&eacute;"
-macro.gui               = "\\b"
-macro.hr.HTML           = "<hr />"
-macro.iacute.HTML       = "&iacute;"
-macro.key               = "\\b"
-macro.menu              = "\\b"
-macro.note              = "\\b{Note:}"
-macro.oslash.HTML       = "&oslash;"
-macro.ouml.HTML         = "&ouml;"
-macro.QA                = "\\e{Qt Assistant}"
-macro.QD                = "\\e{Qt Designer}"
-macro.QL                = "\\e{Qt Linguist}"
-macro.QQV               = "\\e{Qt QML Viewer}"
-macro.param             = "\\e"
-macro.raisedaster.HTML  = "<sup>*</sup>"
-macro.rarrow.HTML       = "&rarr;"
-macro.reg.HTML          = "<sup>&reg;</sup>"
-macro.return            = "Returns"
-macro.starslash         = "\\c{*/}"
-macro.begincomment      = "\\c{/*}"
-macro.endcomment        = "\\c{*/}"
-macro.uuml.HTML         = "&uuml;"
-macro.mdash.HTML        = "&mdash;"
-
-macro.beginfloatleft.HTML   = "<div style=\"float: left; margin-right: 2em\">"
-macro.beginfloatright.HTML  = "<div style=\"float: right; margin-left: 2em\">"
-macro.endfloat.HTML         = "</div>"
-macro.clearfloat.HTML       = "<br style=\"clear: both\" />"
-macro.emptyspan.HTML        = "<span></span>"
diff --git a/doc/config/qt-cpp-ignore.qdocconf b/doc/config/qt-cpp-ignore.qdocconf
deleted file mode 100644
index b3a8602..0000000
--- a/doc/config/qt-cpp-ignore.qdocconf
+++ /dev/null
@@ -1,100 +0,0 @@
-Cpp.ignoretokens        = QAXFACTORY_EXPORT \
-                          QDESIGNER_COMPONENTS_LIBRARY \
-                          QDESIGNER_EXTENSION_LIBRARY \
-                          QDESIGNER_SDK_LIBRARY \
-                          QDESIGNER_SHARED_LIBRARY \
-                          QDESIGNER_UILIB_LIBRARY \
-                          QM_EXPORT_CANVAS \
-                          QM_EXPORT_DNS \
-                          QM_EXPORT_DOM \
-                          QM_EXPORT_FTP \
-                          QM_EXPORT_HTTP \
-                          QM_EXPORT_ICONVIEW \
-                          QM_EXPORT_NETWORK \
-                          QM_EXPORT_OPENGL \
-                          QM_EXPORT_OPENVG \
-                          QM_EXPORT_SQL \
-                          QM_EXPORT_TABLE \
-                          QM_EXPORT_WORKSPACE \
-                          QM_EXPORT_XML \
-                          QT_ASCII_CAST_WARN \
-                          QT_ASCII_CAST_WARN_CONSTRUCTOR \
-                          QT_BEGIN_HEADER \
-                          QT_DESIGNER_STATIC \
-                          QT_END_HEADER \
-                          QT_FASTCALL \
-                          QT_WIDGET_PLUGIN_EXPORT \
-                          Q_COMPAT_EXPORT \
-                          Q_CORE_EXPORT \
-                          Q_CORE_EXPORT_INLINE \
-                          Q_EXPLICIT \
-                          Q_EXPORT \
-                          Q_EXPORT_CODECS_CN \
-                          Q_EXPORT_CODECS_JP \
-                          Q_EXPORT_CODECS_KR \
-                          Q_EXPORT_PLUGIN \
-                          Q_GFX_INLINE \
-                          Q_AUTOTEST_EXPORT \
-                          QM_AUTOTEST_EXPORT \
-                          Q_GUI_EXPORT \
-                          Q_GUI_EXPORT_INLINE \
-                          Q_GUI_EXPORT_STYLE_CDE \
-                          Q_GUI_EXPORT_STYLE_COMPACT \
-                          Q_GUI_EXPORT_STYLE_MAC \
-                          Q_GUI_EXPORT_STYLE_MOTIF \
-                          Q_GUI_EXPORT_STYLE_MOTIFPLUS \
-                          Q_GUI_EXPORT_STYLE_PLATINUM \
-                          Q_GUI_EXPORT_STYLE_POCKETPC \
-                          Q_GUI_EXPORT_STYLE_SGI \
-                          Q_GUI_EXPORT_STYLE_WINDOWS \
-                          Q_GUI_EXPORT_STYLE_WINDOWSXP \
-                          QHELP_EXPORT \
-                          Q_INLINE_TEMPLATE \
-                          Q_INTERNAL_WIN_NO_THROW \
-                          Q_NETWORK_EXPORT \
-                          Q_OPENGL_EXPORT \
-                          Q_OPENVG_EXPORT \
-                          Q_OUTOFLINE_TEMPLATE \
-                          Q_SQL_EXPORT \
-                          Q_SVG_EXPORT \
-                          Q_SCRIPT_EXPORT \
-                          Q_SCRIPTTOOLS_EXPORT \
-                          Q_TESTLIB_EXPORT \
-                          Q_TYPENAME \
-                          Q_XML_EXPORT \
-                          Q_XMLSTREAM_EXPORT \
-                          Q_XMLPATTERNS_EXPORT \
-                          QDBUS_EXPORT \
-                          Q_DBUS_EXPORT \
-                          QT_BEGIN_NAMESPACE \
-                          QT_BEGIN_INCLUDE_NAMESPACE \
-                          QT_END_NAMESPACE \
-                          QT_END_INCLUDE_NAMESPACE \
-                          PHONON_EXPORT \
-                          Q_DECLARATIVE_EXPORT \
-                          Q_GADGET \
-                          QWEBKIT_EXPORT \
-                          Q_INVOKABLE \
-                          Q_MULTIMEDIA_EXPORT
-Cpp.ignoredirectives    = Q_DECLARE_HANDLE \
-                          Q_DECLARE_INTERFACE \
-                          Q_DECLARE_METATYPE \
-                          Q_DECLARE_OPERATORS_FOR_FLAGS \
-                          Q_DECLARE_PRIVATE \
-                          Q_DECLARE_PUBLIC \
-                          Q_DECLARE_SHARED \
-                          Q_DECLARE_TR_FUNCTIONS \
-                          Q_DECLARE_TYPEINFO \
-                          Q_DISABLE_COPY \
-                          QT_FORWARD_DECLARE_CLASS \
-                          Q_DUMMY_COMPARISON_OPERATOR \
-                          Q_ENUMS \
-                          Q_FLAGS \
-                          Q_INTERFACES \
-                          __attribute__ \
-                          K_DECLARE_PRIVATE \
-                          PHONON_OBJECT \
-                          PHONON_HEIR \
-                          Q_PRIVATE_PROPERTY \
-                          Q_DECLARE_PRIVATE_D \
-                          Q_CLASSINFO
diff --git a/doc/config/qt-defines.qdocconf b/doc/config/qt-defines.qdocconf
deleted file mode 100644
index 50a355f..0000000
--- a/doc/config/qt-defines.qdocconf
+++ /dev/null
@@ -1,17 +0,0 @@
-defines                 = Q_QDOC \
-                          QT_.*_SUPPORT \
-                          QT_.*_LIB \
-                          QT_COMPAT \
-                          QT_KEYPAD_NAVIGATION \
-                          QT_NO_EGL \
-                          QT3_SUPPORT \
-                          Q_WS_.* \
-                          Q_OS_.* \
-                          Q_BYTE_ORDER \
-                          QT_DEPRECATED \
-                          Q_NO_USING_KEYWORD \
-                          __cplusplus
-
-versionsym              = QT_VERSION_STR
-
-codeindent              = 1
diff --git a/doc/config/qt-html-default-styles.qdocconf b/doc/config/qt-html-default-styles.qdocconf
deleted file mode 100644
index b2e39d0..0000000
--- a/doc/config/qt-html-default-styles.qdocconf
+++ /dev/null
@@ -1,32 +0,0 @@
-# Define the location of the templates to use. Style sheets and scripts are
-# specified relative to the template directory and will be copied into
-# subdirectories of the output directory.
-
-HTML.templatedir = .
-
-HTML.stylesheets = style/offline.css
-
-HTML.scripts     =
-
-# Files not referenced in any qdoc file (last four needed by qtdemo)
-# See also qhp.Qt.extraFiles
-extraimages.HTML        = qt-logo.png \
-                          arrow_down.png \
-                          breadcrumb.png \
-                          bullet_gt.png \
-                          bullet_dn.png \
-                          bullet_sq.png \
-                          bullet_up.png \
-                          horBar.png \
-                          sprites-combined.png
-
-# Include the style sheets and scripts used.
-
-HTML.headerstyles = \
-    "  <link rel=\"stylesheet\" type=\"text/css\" href=\"style/offline.css\" />\n"
-
-HTML.headerscripts =
-
-HTML.endheader = \
-    "</head>\n" \
-    "<body>\n"
diff --git a/doc/config/qt-html-online-styles.qdocconf b/doc/config/qt-html-online-styles.qdocconf
deleted file mode 100644
index 4ffd6ca..0000000
--- a/doc/config/qt-html-online-styles.qdocconf
+++ /dev/null
@@ -1,72 +0,0 @@
-# Define the location of the templates to use. Style sheets and scripts are
-# specified relative to the template directory and will be copied into
-# subdirectories of the output directory.
-
-HTML.templatedir = .
-
-HTML.stylesheets = style/narrow.css \
-                   style/style.css \
-                   style/style_ie6.css \
-                   style/style_ie7.css \
-                   style/style_ie8.css \
-                   style/superfish.css
-
-# Adding jquery and functions - providing online tools and search features
-HTML.scripts     = scripts/functions.js \
-                   scripts/narrow.js \
-                   scripts/superfish.js \
-                   scripts/jquery.js
-
-
-# Files not referenced in any qdoc file.
-# See also qhp.Qt.extraFiles
-extraimages.HTML        = qt-logo.png \
-                          bg_l.png \
-                          bg_l_blank.png \
-                          bg_ll_blank.png \
-                          bg_ul_blank.png \
-                          header_bg.png \
-                          bg_r.png \
-                          box_bg.png \
-                          breadcrumb.png \
-                          bullet_gt.png \
-                          bullet_dn.png \
-                          bullet_sq.png \
-                          bullet_up.png \
-                          arrow_down.png \
-                          feedbackground.png \
-                          horBar.png \
-                          page.png \
-                          page_bg.png \
-                          sprites-combined.png \
-                          spinner.gif
-
-# Include the style sheets and scripts used.
-
-HTML.headerstyles = \
-    "  <link rel=\"stylesheet\" type=\"text/css\" href=\"style/style.css\" />\n" \
-    "  <script src=\"scripts/jquery.js\" type=\"text/javascript\"></script>\n" \
-    "  <script src=\"scripts/functions.js\" type=\"text/javascript\"></script>\n" \
-    "  <link rel=\"stylesheet\" type=\"text/css\" href=\"style/superfish.css\" />\n" \
-    "  <link rel=\"stylesheet\" type=\"text/css\" href=\"style/narrow.css\" />\n" \
-    "  <!--[if IE]>\n" \
-    "<meta name=\"MSSmartTagsPreventParsing\" content=\"true\">\n" \
-    "<meta http-equiv=\"imagetoolbar\" content=\"no\">\n" \
-    "<![endif]-->\n" \
-    "<!--[if lt IE 7]>\n" \
-    "<link rel=\"stylesheet\" type=\"text/css\" href=\"style/style_ie6.css\">\n" \
-    "<![endif]-->\n" \
-    "<!--[if IE 7]>\n" \
-    "<link rel=\"stylesheet\" type=\"text/css\" href=\"style/style_ie7.css\">\n" \
-    "<![endif]-->\n" \
-    "<!--[if IE 8]>\n" \
-    "<link rel=\"stylesheet\" type=\"text/css\" href=\"style/style_ie8.css\">\n" \
-    "<![endif]-->\n\n"
-
-HTML.headerscripts = \
-    "<script src=\"scripts/superfish.js\" type=\"text/javascript\"></script>\n" \
-    "<script src=\"scripts/narrow.js\" type=\"text/javascript\"></script>\n\n"
-
-HTML.endheader = \
-    "</head>\n" \
-    "<body class=\"\" onload=\"CheckEmptyAndLoadList();\">\n"
diff --git a/doc/config/qt-html-templates-online.qdocconf b/doc/config/qt-html-templates-online.qdocconf
deleted file mode 100644
index 6f267b0..0000000
--- a/doc/config/qt-html-templates-online.qdocconf
+++ /dev/null
@@ -1,142 +0,0 @@
-include(qt-html-online-styles.qdocconf)
-
-HTML.postheader = \
-    " <div class=\"header\" id=\"qtdocheader\">\n" \
-    "    <div class=\"content\"> \n" \
-    "    <div id=\"nav-logo\">\n" \
-    "      <a href=\"index.html\">Home</a></div>\n" \
-    "    <a href=\"index.html\" class=\"qtref\"><span>QtMobility Reference Documentation</span></a>\n" \
-    "    <div id=\"narrowsearch\"></div>\n" \
-    "    <div id=\"nav-topright\">\n" \
-    "      <ul>\n" \
-    "        <li class=\"nav-topright-home\"><a href=\"http://qt.nokia.com/\">Qt HOME</a></li>\n" \
-    "        <li class=\"nav-topright-dev\"><a href=\"http://developer.qt.nokia.com/\">DEV</a></li>\n" \
-    "        <li class=\"nav-topright-labs\"><a href=\"http://labs.qt.nokia.com/blogs/\">LABS</a></li>\n" \
-    "        <li class=\"nav-topright-doc nav-topright-doc-active\"><a href=\"http://doc.qt.nokia.com/\">\n" \
-    "          DOC</a></li>\n" \
-    "        <li class=\"nav-topright-blog\"><a href=\"http://blog.qt.nokia.com/\">BLOG</a></li>\n" \
-    "      </ul>\n" \
-    "    </div>\n" \
-    "    <div id=\"shortCut\">\n" \
-    "      <ul>\n" \
-    "        <li class=\"shortCut-topleft-inactive\"><span><a href=\"index.html\">QtMobility 1.2</a></span></li>\n" \
-    "        <li class=\"shortCut-topleft-active\"><a href=\"http://doc.qt.nokia.com\">ALL VERSIONS" \
-    "        </a></li>\n" \
-    "      </ul>\n" \
-    "     </div>\n" \
-    "    </div>\n" \
-    "  </div>\n" \
-    "  <div class=\"wrapper\">\n" \
-    "    <div class=\"hd\">\n" \
-    "      <span></span>\n" \
-    "    </div>\n" \
-    "    <div class=\"bd group\">\n" \
-    "      <div class=\"sidebar\">\n" \
-    "        <div class=\"box first bottombar\" id=\"lookup\">\n" \
-    "          <h2 title=\"API Lookup\">\n" \
-    "            API Lookup</h2>\n" \
-    "          <div  id=\"list001\" class=\"list\">\n" \
-    "          <ul id=\"ul001\" >\n" \
-    "              <li class=\"defaultLink\"><a href=\"classes.html\">Class index</a></li>\n" \
-    "              <li class=\"defaultLink\"><a href=\"functions.html\">Function index</a></li>\n" \
-    "              <li class=\"defaultLink\"><a href=\"modules.html\">Modules</a></li>\n" \
-    "              <li class=\"defaultLink\"><a href=\"qml-plugins.html\">QML Plugins</a></li>\n" \
-    "            </ul> \n" \
-    "          </div>\n" \
-    "        </div>\n" \
-    "        <div class=\"box bottombar\" id=\"topics\">\n" \
-    "          <h2 title=\"QtMobility Topics\"><span></span>\n" \
-    "            Qt Topics</h2>\n" \
-    "          <div id=\"list002\" class=\"list\">\n" \
-    "            <ul id=\"ul002\" >\n" \
-    "               <li class=\"defaultLink\"><a href=\"quickstart.html\">Quickstart Guide</a></li> \n" \
-    "               <li class=\"defaultLink\"><a href=\"index.html#platform-compatibility\">Platform-specific info</a></li> \n" \
-    "            </ul>  \n" \
-    "          </div>\n" \
-    "        </div>\n" \
-    "        <div class=\"box\" id=\"examples\">\n" \
-    "          <h2 title=\"Examples\"><span></span>\n" \
-    "            Examples</h2>\n" \
-    "          <div id=\"list003\" class=\"list\">\n" \
-    "        <ul id=\"ul003\">\n" \
-    "              <li class=\"defaultLink\"><a href=\"all-examples.html\">Examples</a></li>\n" \
-    "              <li class=\"defaultLink\"><a href=\"tutorials.html\">Tutorials</a></li>\n" \
-    "            </ul> \n" \
-    "          </div>\n" \
-    "        </div>\n" \
-    "      </div>\n" \
-    "      <div class=\"wrap\">\n" \
-    "        <div class=\"toolbar\">\n" \
-    "          <div class=\"breadcrumb toolblock\">\n" \
-    "            <ul>\n" \
-    "              <li class=\"first\"><a href=\"index.html\">Home</a></li>\n" \
-    "              <!--  Breadcrumbs go here -->\n"
-
-HTML.postpostheader = \
-    "            </ul>\n" \
-    "          </div>\n" \
-    "          <div class=\"toolbuttons toolblock\">\n" \
-    "            <ul>\n" \
-    "              <li id=\"smallA\" class=\"t_button\">A</li>\n" \
-    "              <li id=\"medA\" class=\"t_button active\">A</li>\n" \
-    "              <li id=\"bigA\" class=\"t_button\">A</li>\n" \
-    "              <li id=\"print\" class=\"t_button\"><a href=\"javascript:this.print();\">\n" \
-    "                <span>Print</span></a></li>\n" \
-    "            </ul>\n" \
-    "        </div>\n" \
-    "        </div>\n" \
-    "        <div class=\"content mainContent\">\n"
-
-HTML.footer = \
-    "        <div class=\"feedback t_button\">\n" \
-    "          [+] Documentation Feedback</div>\n" \
-    "      </div>\n" \
-    "    </div>\n" \
-    "    </div> \n" \
-    "    <div class=\"ft\">\n" \
-    "      <span></span>\n" \
-    "    </div>\n" \
-    "  </div> \n" \
-    "  <div class=\"footer\">\n" \
-    "    <p>\n" \
-    "      <acronym title=\"Copyright\">&copy;</acronym> 2012 Nokia Corporation and/or its\n" \
-    "      subsidiaries. Nokia, Qt and their respective logos are trademarks of Nokia Corporation \n" \
-    "      in Finland and/or other countries worldwide.</p>\n" \
-    "    <p>\n" \
-    "      All other trademarks are property of their respective owners. <a title=\"Privacy Policy\"\n" \
-    "        href=\"http://qt.nokia.com/about/privacy-policy\">Privacy Policy</a></p>\n" \
-    "    <br />\n" \
-    "    <p>\n" \
-    "      Licensees holding valid Qt Commercial licenses may use this document in accordance with the" \
-    "      Qt Commercial License Agreement provided with the Software or, alternatively, in accordance" \
-    "      with the terms contained in a written agreement between you and Nokia.</p>\n" \
-    "    <p>\n" \
-    "      Alternatively, this document may be used under the terms of the <a href=\"http://www.gnu.org/licenses/fdl.html\">GNU\n" \
-    "      Free Documentation License version 1.3</a>\n" \
-    "      as published by the Free Software Foundation.</p>\n" \
-    "  </div>\n" \
-    "  <div id=\"feedbackBox\">\n" \
-    "      <div id=\"feedcloseX\" class=\"feedclose t_button\">X</div>\n" \
-    "    <form id=\"feedform\" action=\"http://doc.qt.nokia.com/docFeedbck/feedback.php\" method=\"get\">\n" \
-    "      <p id=\"noteHead\">Thank you for giving your feedback.</p> <p class=\"note\">Make sure it is related to this specific page. For more general bugs and \n" \
-    "      requests, please use the <a href=\"http://bugreports.qt-project.org/secure/Dashboard.jspa\">Qt Bug Tracker</a>.</p>\n" \
-    "      <p><textarea id=\"feedbox\" name=\"feedText\" rows=\"5\" cols=\"40\"></textarea></p>\n" \
-    "      <p><input id=\"feedsubmit\" class=\"feedclose\" type=\"submit\" name=\"feedback\" /></p>\n" \
-    "    </form>\n" \
-    "  </div>\n" \
-    "  <div id=\"blurpage\">\n" \
-    "  </div>\n" \
-    "\n" \
-    "  <script src=\"scripts/functions.js\" type=\"text/javascript\"></script>\n" \
-    "  <script type=\"text/javascript\">\n" \
-    "  var _gaq = _gaq || [];\n" \
-    "  _gaq.push(['_setAccount', 'UA-4457116-5']);\n" \
-    "  _gaq.push(['_trackPageview']);\n" \
-    "  (function() {\n" \
-    "  var ga = document.createElement('script'); " \
-    "ga.type = 'text/javascript'; ga.async = true;\n" \
-    "  ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + " \
-    "'.google-analytics.com/ga.js';\n" \
-    "  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);\n" \
-    "  })();\n" \
-    "  </script>\n"
diff --git a/doc/config/qt-html-templates.qdocconf b/doc/config/qt-html-templates.qdocconf
deleted file mode 100644
index 6c5c11d..0000000
--- a/doc/config/qt-html-templates.qdocconf
+++ /dev/null
@@ -1,54 +0,0 @@
-include(qt-html-default-styles.qdocconf)
-
-HTML.postheader = \
-    "<div class=\"header\" id=\"qtdocheader\">\n" \
-    "  <div class=\"content\"> \n" \
-    "    <a href=\"index.html\" class=\"qtref\"><span>QtMobility Reference Documentation</span></a>\n" \
-    "  </div>\n" \
-    "  <div class=\"breadcrumb toolblock\">\n" \
-    "    <ul>\n" \
-    "      <li class=\"first\"><a href=\"index.html\">Home</a></li>\n" \
-    "      <!--  Breadcrumbs go here -->\n"
-
-HTML.postpostheader = \
-    "    </ul>\n" \
-    "  </div>\n" \
-    "</div>\n" \
-    "<div class=\"content mainContent\">\n"
-
-HTML.footer = \
-    "  <div class=\"ft\">\n" \
-    "    <span></span>\n" \
-    "  </div>\n" \
-    "</div> \n" \
-    "<div class=\"footer\">\n" \
-    "  <p>\n" \
-    "     <acronym title=\"Copyright\">&copy;</acronym> 2012 Nokia Corporation and/or its\n" \
-    "     subsidiaries. Nokia, Qt and their respective logos are trademarks of Nokia Corporation \n" \
-    "     in Finland and/or other countries worldwide.</p>\n" \
-    "  <p>\n" \
-    "     All other trademarks are property of their respective owners. <a title=\"Privacy Policy\"\n" \
-    "     href=\"http://qt.nokia.com/about/privacy-policy\">Privacy Policy</a></p>\n" \
-    "  <br />\n" \
-    "  <p>\n" \
-    "    Licensees holding valid Qt Commercial licenses may use this document in accordance with the" \
-    "    Qt Commercial License Agreement provided with the Software or, alternatively, in accordance" \
-    "    with the terms contained in a written agreement between you and Nokia.</p>\n" \
-    "  <p>\n" \
-    "    Alternatively, this document may be used under the terms of the <a href=\"http://www.gnu.org/licenses/fdl.html\">GNU\n" \
-    "    Free Documentation License version 1.3</a>\n" \
-    "    as published by the Free Software Foundation.</p>\n" \
-    "</div>\n" \
-
-# Files not referenced in any qdoc file.
-# See also extraimages.HTML
-qhp.QtMobility.extraFiles = index.html \
-                            images/arrow_down.png \
-                            images/breadcrumb.png \
-                            images/bullet_gt.png \
-                            images/bullet_dn.png \
-                            images/bullet_sq.png \
-                            images/bullet_up.png \
-                            images/horBar.png \
-                            images/sprites-combined.png \
-                            style/offline.css
diff --git a/doc/config/qtmultimedia-dita.qdocconf b/doc/config/qtmultimedia-dita.qdocconf
deleted file mode 100644
index cb8a73c..0000000
--- a/doc/config/qtmultimedia-dita.qdocconf
+++ /dev/null
@@ -1,32 +0,0 @@
-# Name of the project.
-project = Qt Multimedia
-
-# Directories in which to search for files to document and images.
-# By default set to the root directory of the project for sources
-# and headers and qdoc will therefore generate output for each file.
-# Images should be placed in <rootdir>/dic/images and examples in
-# <rootdir>/examples.
-# Paths are relative to the location of this file.
-exampledirs += ../src/examples \
-               ../.. \
-               ../../examples
-
-headerdirs += ../src \
-              ../../src
-
-imagedirs += ../src/images \
-
-sourcedirs += ../src \
-              ../../src
-
-excludedirs +=
-
-#Do not change the variables after this line unless you know what you are doing.
-
-outputdir = ../ditaxml
-outputformats = DITAXML
-
-examples.fileextensions = "*.cpp *.h *.js *.svg *.xml *.ui *.qml"
-examples.imageextensions = "*.png *.jpeg *.jpg *.gif *.mng"
-headers.fileextensions = "*.h *.ch *.h++ *.hh *.hpp *.hxx"
-sources.fileextensions = "*.cpp *.qdoc *.mm *.qml"
diff --git a/doc/config/qtmultimedia.qdocconf b/doc/config/qtmultimedia.qdocconf
deleted file mode 100644
index 1535add..0000000
--- a/doc/config/qtmultimedia.qdocconf
+++ /dev/null
@@ -1,86 +0,0 @@
-include(compat.qdocconf)
-include(macros.qdocconf)
-include(qt-cpp-ignore.qdocconf)
-include(qt-defines.qdocconf)
-
-# Name of the project.
-project = Qt Multimedia
-description = Qt Multimedia Documentation
-
-# Directories in which to search for files to document and images.
-# By default set to the root directory of the project for sources
-# and headers and qdoc will therefore generate output for each file.
-# Images should be placed in <rootdir>/dic/images and examples in
-# <rootdir>/examples.
-# Paths are relative to the  location of this file.
-
-exampledirs += ../src/examples \
-               ../.. \
-               ../../examples
-
-headerdirs += ../src \
-              ../../src
-
-imagedirs += ../src/images \
-
-sourcedirs += ../src \
-              ../../src
-
-excludedirs +=
-
-# The index file contains links to the Qt 5 documentation.
-# Point to the any .index file to cross link to other projects
-#indexes = $QT5DOC/doc/html/qt.index
-
-# The following parameters are for creating a qhp file, the qhelpgenerator
-# program can convert the qhp file into a qch file which can be opened in
-# Qt Assistant and/or Qt Creator.
-
-# Defines the name of the project. You cannot use operators (+, =, -) in
-# the name. Properties for this project are set using a qhp.<projectname>.property
-# format.
-qhp.projects = qtmultimedia
-
-# Sets the name of the output qhp file.
-qhp.qtmultimedia.file = qtmultimedia.qhp
-
-# Namespace for the output file. This namespace is used to distinguish between
-# different documentation files in Creator/Assistant.
-qhp.qtmultimedia.namespace = qtmultimedia.500
-
-# Title for the package, will be the main title for the package in
-# Assistant/Creator.
-qhp.qtmultimedia.indexTitle = Qt Multimedia Documentation
-
-# Extra files to add to the output which are not linked to from anywhere
-# using a qdoc \l command.
-qhp.qtmultimedia.extraFiles = style/qtmultimedia.css
-
-# Only update the name of the project for the next variables.
-qhp.qtmultimedia.virtualFolder  = qdoc
-qhp.qtmultimedia.subprojects = classes
-qhp.qtmultimedia.subprojects.classes.title = Classes
-qhp.qtmultimedia.subprojects.classes.selectors = class fake:headerfile
-qhp.qtmultimedia.subprojects.classes.sortPages = true
-
-
-
-# Do NOT change the variables after this line unless you know what you are doing.
-
-outputdir = ../html
-outputformats = HTML
-
-examples.fileextensions = "*.cpp *.h *.js *.svg *.xml *.ui *.qml"
-examples.imageextensions = "*.png *.jpeg *.jpg *.gif *.mng"
-headers.fileextensions = "*.h *.ch *.h++ *.hh *.hpp *.hxx"
-sources.fileextensions = "*.cpp *.qdoc *.mm *.qml"
-
-HTML.nobreadcrumbs = "true"
-
-HTML.templatedir = .
-HTML.stylesheets = style/qtmultimedia.css
-
-HTML.headerstyles = "  <link rel=\"stylesheet\" type=\"text/css\" href=\"style/qtmultimedia.css\" />\n"
-HTML.endheader = "</head>\n<body>\n"
-
-HTML.footer = "<div class=\"footer\">Copyright (c) 2012 Nokia Corporation and/or its subsidiaries. All rights reserved.</div>\n"
diff --git a/doc/config/qtmultimedia_doc.pri b/doc/config/qtmultimedia_doc.pri
deleted file mode 100644
index caa8032..0000000
--- a/doc/config/qtmultimedia_doc.pri
+++ /dev/null
@@ -1,47 +0,0 @@
-
-win32:!win32-g++ {
-    unixstyle = false
-} else:win32-g++:isEmpty(QMAKE_SH) {
-    unixstyle = false
-} else {
-    unixstyle = true
-}
-
-qtPrepareTool(QDOC, qdoc)
-isEmpty(QDOC): warning("No qdoc executable found.")
-
-ONLINE_CONF = $$PWD/qtmultimedia.qdocconf
-DITA_CONF = $$PWD/qtmultimedia-dita.qdocconf
-QCH_CONF = #nothing yet
-
-$$unixstyle {
-} else {
-    QDOC = $$replace(QDOC, "qdoc", "qdoc3.exe")
-    ONLINE_CONF = $$replace(ONLINE_CONF, "/", "\\")
-    DITA_DOCS = $$replace(ONLINE_CONF, "/", "\\")
-}
-
-# Build rules
-docs.depends = dita_docs online_docs qch_docs
-
-online_docs.commands = $$QDOC $$ONLINE_CONF
-
-dita_docs.commands = $$QDOC $$DITA_CONF
-
-qch_docs.commands = #no commands yet
-
-QMAKE_EXTRA_TARGETS += docs dita_docs online_docs qch_docs
-QMAKE_CLEAN += \
-               "-r $$PWD/../html" \
-               "-r $$PWD/../ditaxml"
-
-
-OTHER_FILES += \
-    doc/src/cameraoverview.qdoc \
-    doc/src/changes.qdoc \
-    doc/src/multimediabackend.qdoc \
-    doc/src/multimedia.qdoc \
-    doc/src/audiooverview.qdoc \
-    doc/src/radiooverview.qdoc \
-    doc/src/videooverview.qdoc \
-    doc/src/plugins/qml-multimedia.qdoc
diff --git a/doc/config/scripts/functions.js b/doc/config/scripts/functions.js
deleted file mode 100644
index d8be935..0000000
--- a/doc/config/scripts/functions.js
+++ /dev/null
@@ -1,258 +0,0 @@
-// Removing search results
-function hideSearchResults() {
-/* hiding search results as the user clicks on the different categories */
-  $('#resultdialog').removeClass('active');
-    $("#resultlist").removeClass().addClass('all');
-    $("#resultlinks").removeClass().addClass('all');
-    $("#searchcount").removeClass().addClass('all');
-}
-/* closing the searhc result dialog */
-$('#resultclose').click(function(e) {
-  e.preventDefault();
-  hideSearchResults();
-});
-
-$(document.body).click(function() {
-});
-
-/* START non link areas where cursor should change to pointing hand */
-$('.t_button').mouseover(function() {
-    $('.t_button').css('cursor','pointer');
-});
-/* END non link areas  */
-/* Changing font size to smaller */
-$('#smallA').click(function() {
-        $('.mainContent .heading,.mainContent h1, .mainContent h2, .mainContent h3, .mainContent p, .mainContent li, .mainContent table').css('font-size','smaller');
-        $('.t_button').removeClass('active')
-        $(this).addClass('active')
-});
-
-/* Reset font size */
-$('#medA').click(function() {
-        $('.mainContent .heading').css('font','600 16px/1 Arial');
-        $('.mainContent h1').css('font','600 18px/1.2 Arial');
-        $('.mainContent h2').css('font','600 16px/1.2 Arial');
-        $('.mainContent h3').css('font','600 14px/1.2 Arial');
-        $('.mainContent p').css('font','13px/20px Verdana');
-        $('.mainContent li').css('font','400 13px/1 Verdana');
-        $('.mainContent li').css('line-height','14px');
-        $('.mainContent .toc li').css('font', 'normal 10px/1.2 Verdana');
-        $('.mainContent table').css('font','13px/1.2 Verdana');
-        $('.mainContent .heading').css('font','600 16px/1 Arial');
-        $('.mainContent .indexboxcont li').css('font','600 13px/1 Verdana');
-        $('.t_button').removeClass('active')
-        $(this).addClass('active')
-});
-/* Changing font size to bigger */
-$('#bigA').click(function() {
-        $('.mainContent .heading,.mainContent h1, .mainContent h2, .mainContent h3, .mainContent p, .mainContent li, .mainContent table').css('font-size','large');
-        $('.mainContent .heading,.mainContent h1, .mainContent h2, .mainContent h3, .mainContent p, .mainContent li, .mainContent table').css('line-height','25px');
-        $('.t_button').removeClass('active')
-        $(this).addClass('active')
-});
-
-/* Show page content after closing feedback box */
-$('.feedclose').click(function() {
-    $('.bd').show();
-    $('.hd').show();
-    $('.footer').show();
-    $('#feedbackBox').hide();
-    $('#blurpage').hide();
-});
-
-/* Hide page content and show feedback box */
-$('.feedback').click(function() {
-    $('.bd').hide();
-    $('.hd').hide();
-    $('.footer').hide();
-    $('#feedbackBox').show();
-    $('#blurpage').show();
-});
-/* Default search URL */
-var qturl = "";
-
-/* The next function handles the response data (in xml) returned by the search engine */
-
-// Process data sent back from the server. The data is structured as a XML.
-/*
-XML structure handled by function processNokiaData()
-<page> - container for each page returned
-<pageWords/> - contains keywords
-<pageTitle/> - contains page title/header content
-<pageUrl/> - contains page URL - URL relative to root
-<pageType> - contains page type - APIPage/Article/Example
-</page>
-*/
-
-
-function processNokiaData(response){
-/* fetch the responce from the server using page as the root element */
-    var propertyTags = response.getElementsByTagName('page');
-    /* reset counters */
-    var apiCount = 0;
-    var articleCount = 0;
-    var exampleCount = 0;
-    var full_li_element;
-
-/* remove any old results */
-    $('#resultlist li').remove();
-
-
-    /* running through the elements in the xml structure */
-    for (var i=0; i<propertyTags.length; i++) {
-        /* for every element named pageWords*/
-        for (var j=0; j< propertyTags[i].getElementsByTagName('pageWords').length; j++) {
-            /* start a new list element */
-            full_li_element = '<li';
-                    /* if the pageType element reads APIPage, add class name api */
-      if (propertyTags[i].getElementsByTagName('pageType')[0].firstChild.nodeValue == 'APIPage') {
-          full_li_element += ' class="api"';
-          apiCount++;
-      }
-                    /* if the pageType element reads Article, add class name article */
-      else if (propertyTags[i].getElementsByTagName('pageType')[0].firstChild.nodeValue == 'Article') {
-          full_li_element += ' class="article"';
-          articleCount++;
-      }
-                    /* if the pageType element reads Example, add class name example */
-      else if (propertyTags[i].getElementsByTagName('pageType')[0].firstChild.nodeValue == 'Example') {
-          full_li_element += ' class="example"';
-          exampleCount++;
-      }
-            /* adding the link element*/
-            full_li_element += '><a href="'+qturl;
-            /* adding the URL attribute*/
-            full_li_element += propertyTags[i].getElementsByTagName('pageUrl')[j].firstChild.nodeValue;
-              /* adding the link title and closing the link and list elements */
-            full_li_element += '">' + propertyTags[i].getElementsByTagName('pageWords')[0].firstChild.nodeValue + '</a></li>';
-            /* appending the list element to the #resultlist div*/
-            $('#resultlist').append(full_li_element);
-        }
-    }
-
-    /* if the result is not empty */
-    if (propertyTags.length > 0) {
-    /* add class name active to show the dialog */
-      $('#resultdialog').addClass('active');
-      /* setting number of hits*/
-      $('#resultcount').html(propertyTags.length);
-      $('#apicount').html(apiCount);
-      $('#articlecount').html(articleCount);
-      $('#examplecount').html(exampleCount);
-
-    }
-    else {
-      $('#pageType').addClass('red');
-      }
-
-
-
-  // Filtering results in display
-    $('p#resultlinks a').click(function(e) {
-      e.preventDefault();
-    // Displays API ref pages
-        if (this.id == "showapiresults") {
-            $("#resultlist").removeClass().addClass('api');
-            $("#resultlinks").removeClass().addClass('api');
-            $("#searchcount").removeClass().addClass('api');
-        }
-    // Displays Articles
-        else if (this.id == "showarticleresults") {
-            $("#resultlist").removeClass().addClass('article');
-            $("#resultlinks").removeClass().addClass('article');
-            $("#searchcount").removeClass().addClass('article');
-        }
-    // Displays Examples
-        if (this.id == "showexampleresults") {
-            $("#resultlist").removeClass().addClass('example');
-            $("#resultlinks").removeClass().addClass('example');
-            $("#searchcount").removeClass().addClass('example');
-        }
-    // Displays All
-        if (this.id == "showallresults") {
-            $("#resultlist").removeClass().addClass('all');
-            $("#resultlinks").removeClass().addClass('all');
-            $("#searchcount").removeClass().addClass('all');
-        }
-    });
-}
-
-//build regular expression object to find empty string or any number of blank
-var blankRE=/^\s*$/;
-
-
-function CheckEmptyAndLoadList()
-{
-    /* Start Extracting information for feedback and adding this to the feedback form */
-    var pageUrl = window.location.href;
-    var pageVal = $('title').html();
-    $('#pageType').removeClass('red');
-    $('#feedUrl').remove();
-    $('#pageVal').remove();
-    $('.menuAlert').remove();
-    $('#feedform').append('<input id="feedUrl" name="feedUrl" value="'+pageUrl+'" style="display:none;">');
-    $('#feedform').append('<input id="pageVal" name="pageVal" value="'+pageVal+'" style="display:none;">');
-    /* End Extracting information for feedback and adding this to the feedback form */
-
-    /* extracts search query */
-    var value = document.getElementById('pageType').value;
-    /* if the search is less than three chars long remove class names and remove elements from old search*/
-    if ((blankRE.test(value)) || (value.length < 3))
-    {
-    $('#resultdialog').removeClass('active');
-    $('#resultlist li').remove();
-    }
-}
-
-// Loads on doc ready - prepares search
-    $(document).ready(function () {
-    /* fetch page title*/
-    var pageTitle = $('title').html();
-    /* getting content from search box */
-          var currentString = $('#pageType').val() ;
-      /* if the search box is not empty run CheckEmptyAndLoadList*/
-        if (currentString.length < 1){
-            CheckEmptyAndLoadList();
-        }
-
-        /* on key-up in the search box execute the following */
-        $('#pageType').keyup(function () {
-        /* extract the search box content */
-          var searchString = $('#pageType').val() ;
-      /* if the string is less than three characters */
-          if ((searchString == null) || (searchString.length < 3)) {
-            /* remove classes and elements*/
-                $('#pageType').removeClass('loading');
-                 $('.searching').remove();
-            /*  run CheckEmptyAndLoadList */
-                     CheckEmptyAndLoadList();
-
-                $('.report').remove();
-                return;
-           }
-       /* if timer checks out */
-            if (this.timer) clearTimeout(this.timer);
-            this.timer = setTimeout(function () {
-            /* add loading image by adding loading class */
-                $('#pageType').addClass('loading');
-                $('.searching').remove();
-
-            /* run the actual search */
-               $.ajax({
-                contentType: "application/x-www-form-urlencoded",
-                url: 'http://' + location.host + '/nokiasearch/GetDataServlet',
-                data: 'searchString='+searchString,
-                dataType:'xml',
-                type: 'post',
-                success: function (response, textStatus) {
-                /* on success remove loading img */
-                $('.searching').remove();
-                $('#pageType').removeClass('loading');
-
-                processNokiaData(response);
-
- }
-              });
-            }, 500); /* timer set to 500 ms */
-        });
-      });
\ No newline at end of file
diff --git a/doc/config/scripts/jquery.js b/doc/config/scripts/jquery.js
deleted file mode 100644
index b92e35f..0000000
--- a/doc/config/scripts/jquery.js
+++ /dev/null
@@ -1,152 +0,0 @@
-/*!
- * jQuery JavaScript Library v1.4.1
- * http://jquery.com/
- *
- * Copyright 2010, John Resig
- * Dual licensed under the MIT or GPL Version 2 licenses.
- * http://jquery.org/license
- *
- * Includes Sizzle.js
- * http://sizzlejs.com/
- * Copyright 2010, The Dojo Foundation
- * Released under the MIT, BSD, and GPL Licenses.
- *
- * Date: Mon Jan 25 19:43:33 2010 -0500
- */
-(function(z,v){function la(){if (!c.isReady){try{r.documentElement.doScroll("left")}catch(a){setTimeout(la,1);return}c.ready()}}function Ma(a,b){b.src?c.ajax({url:b.src,async:false,dataType:"script"}):c.globalEval(b.text||b.textContent||b.innerHTML||"");b.parentNode&&b.parentNode.removeChild(b)}function X(a,b,d,f,e,i){var j=a.length;if (typeof b==="object"){for (var n in b)X(a,n,b[n],f,e,d);return a}if (d!==v){f=!i&&f&&c.isFunction(d);for (n=0;n<j;n++)e(a[n],b,f?d.call(a[n],n,e(a[n],b)):d,i);return a}return j?
-e(a[0],b):null}function J(){return(new Date).getTime()}function Y(){return false}function Z(){return true}function ma(a,b,d){d[0].type=a;return c.event.handle.apply(b,d)}function na(a){var b,d=[],f=[],e=arguments,i,j,n,o,m,s,x=c.extend({},c.data(this,"events").live);if (!(a.button&&a.type==="click")){for (o in x){j=x[o];if (j.live===a.type||j.altLive&&c.inArray(a.type,j.altLive)>-1){i=j.data;i.beforeFilter&&i.beforeFilter[a.type]&&!i.beforeFilter[a.type](a)||f.push(j.selector)}else delete x[o]}i=c(a.target).closest(f,
-a.currentTarget);m=0;for (s=i.length;m<s;m++)for (o in x){j=x[o];n=i[m].elem;f=null;if (i[m].selector===j.selector){if (j.live==="mouseenter"||j.live==="mouseleave")f=c(a.relatedTarget).closest(j.selector)[0];if (!f||f!==n)d.push({elem:n,fn:j})}}m=0;for (s=d.length;m<s;m++){i=d[m];a.currentTarget=i.elem;a.data=i.fn.data;if (i.fn.apply(i.elem,e)===false){b=false;break}}return b}}function oa(a,b){return"live."+(a?a+".":"")+b.replace(/\./g,"`").replace(/ /g,"&")}function pa(a){return!a||!a.parentNode||a.parentNode.nodeType===
-11}function qa(a,b){var d=0;b.each(function(){if (this.nodeName===(a[d]&&a[d].nodeName)){var f=c.data(a[d++]),e=c.data(this,f);if (f=f&&f.events){delete e.handle;e.events={};for (var i in f)for (var j in f[i])c.event.add(this,i,f[i][j],f[i][j].data)}}})}function ra(a,b,d){var f,e,i;if (a.length===1&&typeof a[0]==="string"&&a[0].length<512&&a[0].indexOf("<option")<0&&(c.support.checkClone||!sa.test(a[0]))){e=true;if (i=c.fragments[a[0]])if (i!==1)f=i}if (!f){b=b&&b[0]?b[0].ownerDocument||b[0]:r;f=b.createDocumentFragment();
-c.clean(a,b,f,d)}if (e)c.fragments[a[0]]=i?f:1;return{fragment:f,cacheable:e}}function K(a,b){var d={};c.each(ta.concat.apply([],ta.slice(0,b)),function(){d[this]=a});return d}function ua(a){return"scrollTo"in a&&a.document?a:a.nodeType===9?a.defaultView||a.parentWindow:false}var c=function(a,b){return new c.fn.init(a,b)},Na=z.jQuery,Oa=z.$,r=z.document,S,Pa=/^[^<]*(<[\w\W]+>)[^>]*$|^#([\w-]+)$/,Qa=/^.[^:#\[\.,]*$/,Ra=/\S/,Sa=/^(\s|\u00A0)+|(\s|\u00A0)+$/g,Ta=/^<(\w+)\s*\/?>(?:<\/\1>)?$/,O=navigator.userAgent,
-va=false,P=[],L,$=Object.prototype.toString,aa=Object.prototype.hasOwnProperty,ba=Array.prototype.push,Q=Array.prototype.slice,wa=Array.prototype.indexOf;c.fn=c.prototype={init:function(a,b){var d,f;if (!a)return this;if (a.nodeType){this.context=this[0]=a;this.length=1;return this}if (typeof a==="string")if ((d=Pa.exec(a))&&(d[1]||!b))if (d[1]){f=b?b.ownerDocument||b:r;if (a=Ta.exec(a))if (c.isPlainObject(b)){a=[r.createElement(a[1])];c.fn.attr.call(a,b,true)}else a=[f.createElement(a[1])];else{a=ra([d[1]],
-[f]);a=(a.cacheable?a.fragment.cloneNode(true):a.fragment).childNodes}}else{if (b=r.getElementById(d[2])){if (b.id!==d[2])return S.find(a);this.length=1;this[0]=b}this.context=r;this.selector=a;return this}else if (!b&&/^\w+$/.test(a)){this.selector=a;this.context=r;a=r.getElementsByTagName(a)}else return!b||b.jquery?(b||S).find(a):c(b).find(a);else if (c.isFunction(a))return S.ready(a);if (a.selector!==v){this.selector=a.selector;this.context=a.context}return c.isArray(a)?this.setArray(a):c.makeArray(a,
-this)},selector:"",jquery:"1.4.1",length:0,size:function(){return this.length},toArray:function(){return Q.call(this,0)},get:function(a){return a==null?this.toArray():a<0?this.slice(a)[0]:this[a]},pushStack:function(a,b,d){a=c(a||null);a.prevObject=this;a.context=this.context;if (b==="find")a.selector=this.selector+(this.selector?" ":"")+d;else if (b)a.selector=this.selector+"."+b+"("+d+")";return a},setArray:function(a){this.length=0;ba.apply(this,a);return this},each:function(a,b){return c.each(this,
-a,b)},ready:function(a){c.bindReady();if (c.isReady)a.call(r,c);else P&&P.push(a);return this},eq:function(a){return a===-1?this.slice(a):this.slice(a,+a+1)},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},slice:function(){return this.pushStack(Q.apply(this,arguments),"slice",Q.call(arguments).join(","))},map:function(a){return this.pushStack(c.map(this,function(b,d){return a.call(b,d,b)}))},end:function(){return this.prevObject||c(null)},push:ba,sort:[].sort,splice:[].splice};
-c.fn.init.prototype=c.fn;c.extend=c.fn.extend=function(){var a=arguments[0]||{},b=1,d=arguments.length,f=false,e,i,j,n;if (typeof a==="boolean"){f=a;a=arguments[1]||{};b=2}if (typeof a!=="object"&&!c.isFunction(a))a={};if (d===b){a=this;--b}for (;b<d;b++)if ((e=arguments[b])!=null)for (i in e){j=a[i];n=e[i];if (a!==n)if (f&&n&&(c.isPlainObject(n)||c.isArray(n))){j=j&&(c.isPlainObject(j)||c.isArray(j))?j:c.isArray(n)?[]:{};a[i]=c.extend(f,j,n)}else if (n!==v)a[i]=n}return a};c.extend({noConflict:function(a){z.$=
-Oa;if (a)z.jQuery=Na;return c},isReady:false,ready:function(){if (!c.isReady){if (!r.body)return setTimeout(c.ready,13);c.isReady=true;if (P){for (var a,b=0;a=P[b++];)a.call(r,c);P=null}c.fn.triggerHandler&&c(r).triggerHandler("ready")}},bindReady:function(){if (!va){va=true;if (r.readyState==="complete")return c.ready();if (r.addEventListener){r.addEventListener("DOMContentLoaded",L,false);z.addEventListener("load",c.ready,false)}else if (r.attachEvent){r.attachEvent("onreadystatechange",L);z.attachEvent("onload",
-c.ready);var a=false;try{a=z.frameElement==null}catch(b){}r.documentElement.doScroll&&a&&la()}}},isFunction:function(a){return $.call(a)==="[object Function]"},isArray:function(a){return $.call(a)==="[object Array]"},isPlainObject:function(a){if (!a||$.call(a)!=="[object Object]"||a.nodeType||a.setInterval)return false;if (a.constructor&&!aa.call(a,"constructor")&&!aa.call(a.constructor.prototype,"isPrototypeOf"))return false;var b;for (b in a);return b===v||aa.call(a,b)},isEmptyObject:function(a){for (var b in a)return false;
-return true},error:function(a){throw a;},parseJSON:function(a){if (typeof a!=="string"||!a)return null;if (/^[\],:{}\s]*$/.test(a.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,"@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,"]").replace(/(?:^|:|,)(?:\s*\[)+/g,"")))return z.JSON&&z.JSON.parse?z.JSON.parse(a):(new Function("return "+a))();else c.error("Invalid JSON: "+a)},noop:function(){},globalEval:function(a){if (a&&Ra.test(a)){var b=r.getElementsByTagName("head")[0]||
-r.documentElement,d=r.createElement("script");d.type="text/javascript";if (c.support.scriptEval)d.appendChild(r.createTextNode(a));else d.text=a;b.insertBefore(d,b.firstChild);b.removeChild(d)}},nodeName:function(a,b){return a.nodeName&&a.nodeName.toUpperCase()===b.toUpperCase()},each:function(a,b,d){var f,e=0,i=a.length,j=i===v||c.isFunction(a);if (d)if (j)for (f in a){if (b.apply(a[f],d)===false)break}else for (;e<i;){if (b.apply(a[e++],d)===false)break}else if (j)for (f in a){if (b.call(a[f],f,a[f])===false)break}else for (d=
-a[0];e<i&&b.call(d,e,d)!==false;d=a[++e]);return a},trim:function(a){return(a||"").replace(Sa,"")},makeArray:function(a,b){b=b||[];if (a!=null)a.length==null||typeof a==="string"||c.isFunction(a)||typeof a!=="function"&&a.setInterval?ba.call(b,a):c.merge(b,a);return b},inArray:function(a,b){if (b.indexOf)return b.indexOf(a);for (var d=0,f=b.length;d<f;d++)if (b[d]===a)return d;return-1},merge:function(a,b){var d=a.length,f=0;if (typeof b.length==="number")for (var e=b.length;f<e;f++)a[d++]=b[f];else for (;b[f]!==
-v;)a[d++]=b[f++];a.length=d;return a},grep:function(a,b,d){for (var f=[],e=0,i=a.length;e<i;e++)!d!==!b(a[e],e)&&f.push(a[e]);return f},map:function(a,b,d){for (var f=[],e,i=0,j=a.length;i<j;i++){e=b(a[i],i,d);if (e!=null)f[f.length]=e}return f.concat.apply([],f)},guid:1,proxy:function(a,b,d){if (arguments.length===2)if (typeof b==="string"){d=a;a=d[b];b=v}else if (b&&!c.isFunction(b)){d=b;b=v}if (!b&&a)b=function(){return a.apply(d||this,arguments)};if (a)b.guid=a.guid=a.guid||b.guid||c.guid++;return b},
-uaMatch:function(a){a=a.toLowerCase();a=/(webkit)[ \/]([\w.]+)/.exec(a)||/(opera)(?:.*version)?[ \/]([\w.]+)/.exec(a)||/(msie) ([\w.]+)/.exec(a)||!/compatible/.test(a)&&/(mozilla)(?:.*? rv:([\w.]+))?/.exec(a)||[];return{browser:a[1]||"",version:a[2]||"0"}},browser:{}});O=c.uaMatch(O);if (O.browser){c.browser[O.browser]=true;c.browser.version=O.version}if (c.browser.webkit)c.browser.safari=true;if (wa)c.inArray=function(a,b){return wa.call(b,a)};S=c(r);if (r.addEventListener)L=function(){r.removeEventListener("DOMContentLoaded",
-L,false);c.ready()};else if (r.attachEvent)L=function(){if (r.readyState==="complete"){r.detachEvent("onreadystatechange",L);c.ready()}};(function(){c.support={};var a=r.documentElement,b=r.createElement("script"),d=r.createElement("div"),f="script"+J();d.style.display="none";d.innerHTML="   <link/><table></table><a href='/a' style='color:red;float:left;opacity:.55;'>a</a><input type='checkbox'/>";var e=d.getElementsByTagName("*"),i=d.getElementsByTagName("a")[0];if (!(!e||!e.length||!i)){c.support=
-{leadingWhitespace:d.firstChild.nodeType===3,tbody:!d.getElementsByTagName("tbody").length,htmlSerialize:!!d.getElementsByTagName("link").length,style:/red/.test(i.getAttribute("style")),hrefNormalized:i.getAttribute("href")==="/a",opacity:/^0.55$/.test(i.style.opacity),cssFloat:!!i.style.cssFloat,checkOn:d.getElementsByTagName("input")[0].value==="on",optSelected:r.createElement("select").appendChild(r.createElement("option")).selected,checkClone:false,scriptEval:false,noCloneEvent:true,boxModel:null};
-b.type="text/javascript";try{b.appendChild(r.createTextNode("window."+f+"=1;"))}catch(j){}a.insertBefore(b,a.firstChild);if (z[f]){c.support.scriptEval=true;delete z[f]}a.removeChild(b);if (d.attachEvent&&d.fireEvent){d.attachEvent("onclick",function n(){c.support.noCloneEvent=false;d.detachEvent("onclick",n)});d.cloneNode(true).fireEvent("onclick")}d=r.createElement("div");d.innerHTML="<input type='radio' name='radiotest' checked='checked'/>";a=r.createDocumentFragment();a.appendChild(d.firstChild);
-c.support.checkClone=a.cloneNode(true).cloneNode(true).lastChild.checked;c(function(){var n=r.createElement("div");n.style.width=n.style.paddingLeft="1px";r.body.appendChild(n);c.boxModel=c.support.boxModel=n.offsetWidth===2;r.body.removeChild(n).style.display="none"});a=function(n){var o=r.createElement("div");n="on"+n;var m=n in o;if (!m){o.setAttribute(n,"return;");m=typeof o[n]==="function"}return m};c.support.submitBubbles=a("submit");c.support.changeBubbles=a("change");a=b=d=e=i=null}})();c.props=
-{"for":"htmlFor","class":"className",readonly:"readOnly",maxlength:"maxLength",cellspacing:"cellSpacing",rowspan:"rowSpan",colspan:"colSpan",tabindex:"tabIndex",usemap:"useMap",frameborder:"frameBorder"};var G="jQuery"+J(),Ua=0,xa={},Va={};c.extend({cache:{},expando:G,noData:{embed:true,object:true,applet:true},data:function(a,b,d){if (!(a.nodeName&&c.noData[a.nodeName.toLowerCase()])){a=a==z?xa:a;var f=a[G],e=c.cache;if (!b&&!f)return null;f||(f=++Ua);if (typeof b==="object"){a[G]=f;e=e[f]=c.extend(true,
-{},b)}else e=e[f]?e[f]:typeof d==="undefined"?Va:(e[f]={});if (d!==v){a[G]=f;e[b]=d}return typeof b==="string"?e[b]:e}},removeData:function(a,b){if (!(a.nodeName&&c.noData[a.nodeName.toLowerCase()])){a=a==z?xa:a;var d=a[G],f=c.cache,e=f[d];if (b){if (e){delete e[b];c.isEmptyObject(e)&&c.removeData(a)}}else{try{delete a[G]}catch(i){a.removeAttribute&&a.removeAttribute(G)}delete f[d]}}}});c.fn.extend({data:function(a,b){if (typeof a==="undefined"&&this.length)return c.data(this[0]);else if (typeof a==="object")return this.each(function(){c.data(this,
-a)});var d=a.split(".");d[1]=d[1]?"."+d[1]:"";if (b===v){var f=this.triggerHandler("getData"+d[1]+"!",[d[0]]);if (f===v&&this.length)f=c.data(this[0],a);return f===v&&d[1]?this.data(d[0]):f}else return this.trigger("setData"+d[1]+"!",[d[0],b]).each(function(){c.data(this,a,b)})},removeData:function(a){return this.each(function(){c.removeData(this,a)})}});c.extend({queue:function(a,b,d){if (a){b=(b||"fx")+"queue";var f=c.data(a,b);if (!d)return f||[];if (!f||c.isArray(d))f=c.data(a,b,c.makeArray(d));else f.push(d);
-return f}},dequeue:function(a,b){b=b||"fx";var d=c.queue(a,b),f=d.shift();if (f==="inprogress")f=d.shift();if (f){b==="fx"&&d.unshift("inprogress");f.call(a,function(){c.dequeue(a,b)})}}});c.fn.extend({queue:function(a,b){if (typeof a!=="string"){b=a;a="fx"}if (b===v)return c.queue(this[0],a);return this.each(function(){var d=c.queue(this,a,b);a==="fx"&&d[0]!=="inprogress"&&c.dequeue(this,a)})},dequeue:function(a){return this.each(function(){c.dequeue(this,a)})},delay:function(a,b){a=c.fx?c.fx.speeds[a]||
-a:a;b=b||"fx";return this.queue(b,function(){var d=this;setTimeout(function(){c.dequeue(d,b)},a)})},clearQueue:function(a){return this.queue(a||"fx",[])}});var ya=/[\n\t]/g,ca=/\s+/,Wa=/\r/g,Xa=/href|src|style/,Ya=/(button|input)/i,Za=/(button|input|object|select|textarea)/i,$a=/^(a|area)$/i,za=/radio|checkbox/;c.fn.extend({attr:function(a,b){return X(this,a,b,true,c.attr)},removeAttr:function(a){return this.each(function(){c.attr(this,a,"");this.nodeType===1&&this.removeAttribute(a)})},addClass:function(a){if (c.isFunction(a))return this.each(function(o){var m=
-c(this);m.addClass(a.call(this,o,m.attr("class")))});if (a&&typeof a==="string")for (var b=(a||"").split(ca),d=0,f=this.length;d<f;d++){var e=this[d];if (e.nodeType===1)if (e.className)for (var i=" "+e.className+" ",j=0,n=b.length;j<n;j++){if (i.indexOf(" "+b[j]+" ")<0)e.className+=" "+b[j]}else e.className=a}return this},removeClass:function(a){if (c.isFunction(a))return this.each(function(o){var m=c(this);m.removeClass(a.call(this,o,m.attr("class")))});if (a&&typeof a==="string"||a===v)for (var b=(a||"").split(ca),
-d=0,f=this.length;d<f;d++){var e=this[d];if (e.nodeType===1&&e.className)if (a){for (var i=(" "+e.className+" ").replace(ya," "),j=0,n=b.length;j<n;j++)i=i.replace(" "+b[j]+" "," ");e.className=i.substring(1,i.length-1)}else e.className=""}return this},toggleClass:function(a,b){var d=typeof a,f=typeof b==="boolean";if (c.isFunction(a))return this.each(function(e){var i=c(this);i.toggleClass(a.call(this,e,i.attr("class"),b),b)});return this.each(function(){if (d==="string")for (var e,i=0,j=c(this),n=b,o=
-a.split(ca);e=o[i++];){n=f?n:!j.hasClass(e);j[n?"addClass":"removeClass"](e)}else if (d==="undefined"||d==="boolean"){this.className&&c.data(this,"__className__",this.className);this.className=this.className||a===false?"":c.data(this,"__className__")||""}})},hasClass:function(a){a=" "+a+" ";for (var b=0,d=this.length;b<d;b++)if ((" "+this[b].className+" ").replace(ya," ").indexOf(a)>-1)return true;return false},val:function(a){if (a===v){var b=this[0];if (b){if (c.nodeName(b,"option"))return(b.attributes.value||
-{}).specified?b.value:b.text;if (c.nodeName(b,"select")){var d=b.selectedIndex,f=[],e=b.options;b=b.type==="select-one";if (d<0)return null;var i=b?d:0;for (d=b?d+1:e.length;i<d;i++){var j=e[i];if (j.selected){a=c(j).val();if (b)return a;f.push(a)}}return f}if (za.test(b.type)&&!c.support.checkOn)return b.getAttribute("value")===null?"on":b.value;return(b.value||"").replace(Wa,"")}return v}var n=c.isFunction(a);return this.each(function(o){var m=c(this),s=a;if (this.nodeType===1){if (n)s=a.call(this,o,m.val());
-if (typeof s==="number")s+="";if (c.isArray(s)&&za.test(this.type))this.checked=c.inArray(m.val(),s)>=0;else if (c.nodeName(this,"select")){var x=c.makeArray(s);c("option",this).each(function(){this.selected=c.inArray(c(this).val(),x)>=0});if (!x.length)this.selectedIndex=-1}else this.value=s}})}});c.extend({attrFn:{val:true,css:true,html:true,text:true,data:true,width:true,height:true,offset:true},attr:function(a,b,d,f){if (!a||a.nodeType===3||a.nodeType===8)return v;if (f&&b in c.attrFn)return c(a)[b](d);
-f=a.nodeType!==1||!c.isXMLDoc(a);var e=d!==v;b=f&&c.props[b]||b;if (a.nodeType===1){var i=Xa.test(b);if (b in a&&f&&!i){if (e){b==="type"&&Ya.test(a.nodeName)&&a.parentNode&&c.error("type property can't be changed");a[b]=d}if (c.nodeName(a,"form")&&a.getAttributeNode(b))return a.getAttributeNode(b).nodeValue;if (b==="tabIndex")return(b=a.getAttributeNode("tabIndex"))&&b.specified?b.value:Za.test(a.nodeName)||$a.test(a.nodeName)&&a.href?0:v;return a[b]}if (!c.support.style&&f&&b==="style"){if (e)a.style.cssText=
-""+d;return a.style.cssText}e&&a.setAttribute(b,""+d);a=!c.support.hrefNormalized&&f&&i?a.getAttribute(b,2):a.getAttribute(b);return a===null?v:a}return c.style(a,b,d)}});var ab=function(a){return a.replace(/[^\w\s\.\|`]/g,function(b){return"\\"+b})};c.event={add:function(a,b,d,f){if (!(a.nodeType===3||a.nodeType===8)){if (a.setInterval&&a!==z&&!a.frameElement)a=z;if (!d.guid)d.guid=c.guid++;if (f!==v){d=c.proxy(d);d.data=f}var e=c.data(a,"events")||c.data(a,"events",{}),i=c.data(a,"handle"),j;if (!i){j=
-function(){return typeof c!=="undefined"&&!c.event.triggered?c.event.handle.apply(j.elem,arguments):v};i=c.data(a,"handle",j)}if (i){i.elem=a;b=b.split(/\s+/);for (var n,o=0;n=b[o++];){var m=n.split(".");n=m.shift();if (o>1){d=c.proxy(d);if (f!==v)d.data=f}d.type=m.slice(0).sort().join(".");var s=e[n],x=this.special[n]||{};if (!s){s=e[n]={};if (!x.setup||x.setup.call(a,f,m,d)===false)if (a.addEventListener)a.addEventListener(n,i,false);else a.attachEvent&&a.attachEvent("on"+n,i)}if (x.add)if ((m=x.add.call(a,
-d,f,m,s))&&c.isFunction(m)){m.guid=m.guid||d.guid;m.data=m.data||d.data;m.type=m.type||d.type;d=m}s[d.guid]=d;this.global[n]=true}a=null}}},global:{},remove:function(a,b,d){if (!(a.nodeType===3||a.nodeType===8)){var f=c.data(a,"events"),e,i,j;if (f){if (b===v||typeof b==="string"&&b.charAt(0)===".")for (i in f)this.remove(a,i+(b||""));else{if (b.type){d=b.handler;b=b.type}b=b.split(/\s+/);for (var n=0;i=b[n++];){var o=i.split(".");i=o.shift();var m=!o.length,s=c.map(o.slice(0).sort(),ab);s=new RegExp("(^|\\.)"+
-s.join("\\.(?:.*\\.)?")+"(\\.|$)");var x=this.special[i]||{};if (f[i]){if (d){j=f[i][d.guid];delete f[i][d.guid]}else for (var A in f[i])if (m||s.test(f[i][A].type))delete f[i][A];x.remove&&x.remove.call(a,o,j);for (e in f[i])break;if (!e){if (!x.teardown||x.teardown.call(a,o)===false)if (a.removeEventListener)a.removeEventListener(i,c.data(a,"handle"),false);else a.detachEvent&&a.detachEvent("on"+i,c.data(a,"handle"));e=null;delete f[i]}}}}for (e in f)break;if (!e){if (A=c.data(a,"handle"))A.elem=null;c.removeData(a,
-"events");c.removeData(a,"handle")}}}},trigger:function(a,b,d,f){var e=a.type||a;if (!f){a=typeof a==="object"?a[G]?a:c.extend(c.Event(e),a):c.Event(e);if (e.indexOf("!")>=0){a.type=e=e.slice(0,-1);a.exclusive=true}if (!d){a.stopPropagation();this.global[e]&&c.each(c.cache,function(){this.events&&this.events[e]&&c.event.trigger(a,b,this.handle.elem)})}if (!d||d.nodeType===3||d.nodeType===8)return v;a.result=v;a.target=d;b=c.makeArray(b);b.unshift(a)}a.currentTarget=d;(f=c.data(d,"handle"))&&f.apply(d,
-b);f=d.parentNode||d.ownerDocument;try{if (!(d&&d.nodeName&&c.noData[d.nodeName.toLowerCase()]))if (d["on"+e]&&d["on"+e].apply(d,b)===false)a.result=false}catch(i){}if (!a.isPropagationStopped()&&f)c.event.trigger(a,b,f,true);else if (!a.isDefaultPrevented()){d=a.target;var j;if (!(c.nodeName(d,"a")&&e==="click")&&!(d&&d.nodeName&&c.noData[d.nodeName.toLowerCase()])){try{if (d[e]){if (j=d["on"+e])d["on"+e]=null;this.triggered=true;d[e]()}}catch(n){}if (j)d["on"+e]=j;this.triggered=false}}},handle:function(a){var b,
-d;a=arguments[0]=c.event.fix(a||z.event);a.currentTarget=this;d=a.type.split(".");a.type=d.shift();b=!d.length&&!a.exclusive;var f=new RegExp("(^|\\.)"+d.slice(0).sort().join("\\.(?:.*\\.)?")+"(\\.|$)");d=(c.data(this,"events")||{})[a.type];for (var e in d){var i=d[e];if (b||f.test(i.type)){a.handler=i;a.data=i.data;i=i.apply(this,arguments);if (i!==v){a.result=i;if (i===false){a.preventDefault();a.stopPropagation()}}if (a.isImmediatePropagationStopped())break}}return a.result},props:"altKey attrChange attrName bubbles button cancelable charCode clientX clientY ctrlKey currentTarget data detail eventPhase fromElement handler keyCode layerX layerY metaKey newValue offsetX offsetY originalTarget pageX pageY prevValue relatedNode relatedTarget screenX screenY shiftKey srcElement target toElement view wheelDelta which".split(" "),
-fix:function(a){if (a[G])return a;var b=a;a=c.Event(b);for (var d=this.props.length,f;d;){f=this.props[--d];a[f]=b[f]}if (!a.target)a.target=a.srcElement||r;if (a.target.nodeType===3)a.target=a.target.parentNode;if (!a.relatedTarget&&a.fromElement)a.relatedTarget=a.fromElement===a.target?a.toElement:a.fromElement;if (a.pageX==null&&a.clientX!=null){b=r.documentElement;d=r.body;a.pageX=a.clientX+(b&&b.scrollLeft||d&&d.scrollLeft||0)-(b&&b.clientLeft||d&&d.clientLeft||0);a.pageY=a.clientY+(b&&b.scrollTop||
-d&&d.scrollTop||0)-(b&&b.clientTop||d&&d.clientTop||0)}if (!a.which&&(a.charCode||a.charCode===0?a.charCode:a.keyCode))a.which=a.charCode||a.keyCode;if (!a.metaKey&&a.ctrlKey)a.metaKey=a.ctrlKey;if (!a.which&&a.button!==v)a.which=a.button&1?1:a.button&2?3:a.button&4?2:0;return a},guid:1E8,proxy:c.proxy,special:{ready:{setup:c.bindReady,teardown:c.noop},live:{add:function(a,b){c.extend(a,b||{});a.guid+=b.selector+b.live;b.liveProxy=a;c.event.add(this,b.live,na,b)},remove:function(a){if (a.length){var b=
-0,d=new RegExp("(^|\\.)"+a[0]+"(\\.|$)");c.each(c.data(this,"events").live||{},function(){d.test(this.type)&&b++});b<1&&c.event.remove(this,a[0],na)}},special:{}},beforeunload:{setup:function(a,b,d){if (this.setInterval)this.onbeforeunload=d;return false},teardown:function(a,b){if (this.onbeforeunload===b)this.onbeforeunload=null}}}};c.Event=function(a){if (!this.preventDefault)return new c.Event(a);if (a&&a.type){this.originalEvent=a;this.type=a.type}else this.type=a;this.timeStamp=J();this[G]=true};
-c.Event.prototype={preventDefault:function(){this.isDefaultPrevented=Z;var a=this.originalEvent;if (a){a.preventDefault&&a.preventDefault();a.returnValue=false}},stopPropagation:function(){this.isPropagationStopped=Z;var a=this.originalEvent;if (a){a.stopPropagation&&a.stopPropagation();a.cancelBubble=true}},stopImmediatePropagation:function(){this.isImmediatePropagationStopped=Z;this.stopPropagation()},isDefaultPrevented:Y,isPropagationStopped:Y,isImmediatePropagationStopped:Y};var Aa=function(a){for (var b=
-a.relatedTarget;b&&b!==this;)try{b=b.parentNode}catch(d){break}if (b!==this){a.type=a.data;c.event.handle.apply(this,arguments)}},Ba=function(a){a.type=a.data;c.event.handle.apply(this,arguments)};c.each({mouseenter:"mouseover",mouseleave:"mouseout"},function(a,b){c.event.special[a]={setup:function(d){c.event.add(this,b,d&&d.selector?Ba:Aa,a)},teardown:function(d){c.event.remove(this,b,d&&d.selector?Ba:Aa)}}});if (!c.support.submitBubbles)c.event.special.submit={setup:function(a,b,d){if (this.nodeName.toLowerCase()!==
-"form"){c.event.add(this,"click.specialSubmit."+d.guid,function(f){var e=f.target,i=e.type;if ((i==="submit"||i==="image")&&c(e).closest("form").length)return ma("submit",this,arguments)});c.event.add(this,"keypress.specialSubmit."+d.guid,function(f){var e=f.target,i=e.type;if ((i==="text"||i==="password")&&c(e).closest("form").length&&f.keyCode===13)return ma("submit",this,arguments)})}else return false},remove:function(a,b){c.event.remove(this,"click.specialSubmit"+(b?"."+b.guid:""));c.event.remove(this,
-"keypress.specialSubmit"+(b?"."+b.guid:""))}};if (!c.support.changeBubbles){var da=/textarea|input|select/i;function Ca(a){var b=a.type,d=a.value;if (b==="radio"||b==="checkbox")d=a.checked;else if (b==="select-multiple")d=a.selectedIndex>-1?c.map(a.options,function(f){return f.selected}).join("-"):"";else if (a.nodeName.toLowerCase()==="select")d=a.selectedIndex;return d}function ea(a,b){var d=a.target,f,e;if (!(!da.test(d.nodeName)||d.readOnly)){f=c.data(d,"_change_data");e=Ca(d);if (a.type!=="focusout"||
-d.type!=="radio")c.data(d,"_change_data",e);if (!(f===v||e===f))if (f!=null||e){a.type="change";return c.event.trigger(a,b,d)}}}c.event.special.change={filters:{focusout:ea,click:function(a){var b=a.target,d=b.type;if (d==="radio"||d==="checkbox"||b.nodeName.toLowerCase()==="select")return ea.call(this,a)},keydown:function(a){var b=a.target,d=b.type;if (a.keyCode===13&&b.nodeName.toLowerCase()!=="textarea"||a.keyCode===32&&(d==="checkbox"||d==="radio")||d==="select-multiple")return ea.call(this,a)},beforeactivate:function(a){a=
-a.target;a.nodeName.toLowerCase()==="input"&&a.type==="radio"&&c.data(a,"_change_data",Ca(a))}},setup:function(a,b,d){for (var f in T)c.event.add(this,f+".specialChange."+d.guid,T[f]);return da.test(this.nodeName)},remove:function(a,b){for (var d in T)c.event.remove(this,d+".specialChange"+(b?"."+b.guid:""),T[d]);return da.test(this.nodeName)}};var T=c.event.special.change.filters}r.addEventListener&&c.each({focus:"focusin",blur:"focusout"},function(a,b){function d(f){f=c.event.fix(f);f.type=b;return c.event.handle.call(this,
-f)}c.event.special[b]={setup:function(){this.addEventListener(a,d,true)},teardown:function(){this.removeEventListener(a,d,true)}}});c.each(["bind","one"],function(a,b){c.fn[b]=function(d,f,e){if (typeof d==="object"){for (var i in d)this[b](i,f,d[i],e);return this}if (c.isFunction(f)){e=f;f=v}var j=b==="one"?c.proxy(e,function(n){c(this).unbind(n,j);return e.apply(this,arguments)}):e;return d==="unload"&&b!=="one"?this.one(d,f,e):this.each(function(){c.event.add(this,d,j,f)})}});c.fn.extend({unbind:function(a,
-b){if (typeof a==="object"&&!a.preventDefault){for (var d in a)this.unbind(d,a[d]);return this}return this.each(function(){c.event.remove(this,a,b)})},trigger:function(a,b){return this.each(function(){c.event.trigger(a,b,this)})},triggerHandler:function(a,b){if (this[0]){a=c.Event(a);a.preventDefault();a.stopPropagation();c.event.trigger(a,b,this[0]);return a.result}},toggle:function(a){for (var b=arguments,d=1;d<b.length;)c.proxy(a,b[d++]);return this.click(c.proxy(a,function(f){var e=(c.data(this,"lastToggle"+
-a.guid)||0)%d;c.data(this,"lastToggle"+a.guid,e+1);f.preventDefault();return b[e].apply(this,arguments)||false}))},hover:function(a,b){return this.mouseenter(a).mouseleave(b||a)}});c.each(["live","die"],function(a,b){c.fn[b]=function(d,f,e){var i,j=0;if (c.isFunction(f)){e=f;f=v}for (d=(d||"").split(/\s+/);(i=d[j++])!=null;){i=i==="focus"?"focusin":i==="blur"?"focusout":i==="hover"?d.push("mouseleave")&&"mouseenter":i;b==="live"?c(this.context).bind(oa(i,this.selector),{data:f,selector:this.selector,
-live:i},e):c(this.context).unbind(oa(i,this.selector),e?{guid:e.guid+this.selector+i}:null)}return this}});c.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error".split(" "),function(a,b){c.fn[b]=function(d){return d?this.bind(b,d):this.trigger(b)};if (c.attrFn)c.attrFn[b]=true});z.attachEvent&&!z.addEventListener&&z.attachEvent("onunload",function(){for (var a in c.cache)if (c.cache[a].handle)try{c.event.remove(c.cache[a].handle.elem)}catch(b){}});
-(function(){function a(g){for (var h="",k,l=0;g[l];l++){k=g[l];if (k.nodeType===3||k.nodeType===4)h+=k.nodeValue;else if (k.nodeType!==8)h+=a(k.childNodes)}return h}function b(g,h,k,l,q,p){q=0;for (var u=l.length;q<u;q++){var t=l[q];if (t){t=t[g];for (var y=false;t;){if (t.sizcache===k){y=l[t.sizset];break}if (t.nodeType===1&&!p){t.sizcache=k;t.sizset=q}if (t.nodeName.toLowerCase()===h){y=t;break}t=t[g]}l[q]=y}}}function d(g,h,k,l,q,p){q=0;for (var u=l.length;q<u;q++){var t=l[q];if (t){t=t[g];for (var y=false;t;){if (t.sizcache===
-k){y=l[t.sizset];break}if (t.nodeType===1){if (!p){t.sizcache=k;t.sizset=q}if (typeof h!=="string"){if (t===h){y=true;break}}else if (o.filter(h,[t]).length>0){y=t;break}}t=t[g]}l[q]=y}}}var f=/((?:\((?:\([^()]+\)|[^()]+)+\)|\[(?:\[[^[\]]*\]|['"][^'"]*['"]|[^[\]'"]+)+\]|\\.|[^ >+~,(\[\\]+)+|[>+~])(\s*,\s*)?((?:.|\r|\n)*)/g,e=0,i=Object.prototype.toString,j=false,n=true;[0,0].sort(function(){n=false;return 0});var o=function(g,h,k,l){k=k||[];var q=h=h||r;if (h.nodeType!==1&&h.nodeType!==9)return[];if (!g||
-typeof g!=="string")return k;for (var p=[],u,t,y,R,H=true,M=w(h),I=g;(f.exec(""),u=f.exec(I))!==null;){I=u[3];p.push(u[1]);if (u[2]){R=u[3];break}}if (p.length>1&&s.exec(g))if (p.length===2&&m.relative[p[0]])t=fa(p[0]+p[1],h);else for (t=m.relative[p[0]]?[h]:o(p.shift(),h);p.length;){g=p.shift();if (m.relative[g])g+=p.shift();t=fa(g,t)}else{if (!l&&p.length>1&&h.nodeType===9&&!M&&m.match.ID.test(p[0])&&!m.match.ID.test(p[p.length-1])){u=o.find(p.shift(),h,M);h=u.expr?o.filter(u.expr,u.set)[0]:u.set[0]}if (h){u=
-l?{expr:p.pop(),set:A(l)}:o.find(p.pop(),p.length===1&&(p[0]==="~"||p[0]==="+")&&h.parentNode?h.parentNode:h,M);t=u.expr?o.filter(u.expr,u.set):u.set;if (p.length>0)y=A(t);else H=false;for (;p.length;){var D=p.pop();u=D;if (m.relative[D])u=p.pop();else D="";if (u==null)u=h;m.relative[D](y,u,M)}}else y=[]}y||(y=t);y||o.error(D||g);if (i.call(y)==="[object Array]")if (H)if (h&&h.nodeType===1)for (g=0;y[g]!=null;g++){if (y[g]&&(y[g]===true||y[g].nodeType===1&&E(h,y[g])))k.push(t[g])}else for (g=0;y[g]!=null;g++)y[g]&&
-y[g].nodeType===1&&k.push(t[g]);else k.push.apply(k,y);else A(y,k);if (R){o(R,q,k,l);o.uniqueSort(k)}return k};o.uniqueSort=function(g){if (C){j=n;g.sort(C);if (j)for (var h=1;h<g.length;h++)g[h]===g[h-1]&&g.splice(h--,1)}return g};o.matches=function(g,h){return o(g,null,null,h)};o.find=function(g,h,k){var l,q;if (!g)return[];for (var p=0,u=m.order.length;p<u;p++){var t=m.order[p];if (q=m.leftMatch[t].exec(g)){var y=q[1];q.splice(1,1);if (y.substr(y.length-1)!=="\\"){q[1]=(q[1]||"").replace(/\\/g,"");l=m.find[t](q,
-h,k);if (l!=null){g=g.replace(m.match[t],"");break}}}}l||(l=h.getElementsByTagName("*"));return{set:l,expr:g}};o.filter=function(g,h,k,l){for (var q=g,p=[],u=h,t,y,R=h&&h[0]&&w(h[0]);g&&h.length;){for (var H in m.filter)if ((t=m.leftMatch[H].exec(g))!=null&&t[2]){var M=m.filter[H],I,D;D=t[1];y=false;t.splice(1,1);if (D.substr(D.length-1)!=="\\"){if (u===p)p=[];if (m.preFilter[H])if (t=m.preFilter[H](t,u,k,p,l,R)){if (t===true)continue}else y=I=true;if (t)for (var U=0;(D=u[U])!=null;U++)if (D){I=M(D,t,U,u);var Da=
-l^!!I;if (k&&I!=null)if (Da)y=true;else u[U]=false;else if (Da){p.push(D);y=true}}if (I!==v){k||(u=p);g=g.replace(m.match[H],"");if (!y)return[];break}}}if (g===q)if (y==null)o.error(g);else break;q=g}return u};o.error=function(g){throw"Syntax error, unrecognized expression: "+g;};var m=o.selectors={order:["ID","NAME","TAG"],match:{ID:/#((?:[\w\u00c0-\uFFFF-]|\\.)+)/,CLASS:/\.((?:[\w\u00c0-\uFFFF-]|\\.)+)/,NAME:/\[name=['"]*((?:[\w\u00c0-\uFFFF-]|\\.)+)['"]*\]/,ATTR:/\[\s*((?:[\w\u00c0-\uFFFF-]|\\.)+)\s*(?:(\S?=)\s*(['"]*)(.*?)\3|)\s*\]/,
-TAG:/^((?:[\w\u00c0-\uFFFF\*-]|\\.)+)/,CHILD:/:(only|nth|last|first)-child(?:\((even|odd|[\dn+-]*)\))?/,POS:/:(nth|eq|gt|lt|first|last|even|odd)(?:\((\d*)\))?(?=[^-]|$)/,PSEUDO:/:((?:[\w\u00c0-\uFFFF-]|\\.)+)(?:\((['"]?)((?:\([^\)]+\)|[^\(\)]*)+)\2\))?/},leftMatch:{},attrMap:{"class":"className","for":"htmlFor"},attrHandle:{href:function(g){return g.getAttribute("href")}},relative:{"+":function(g,h){var k=typeof h==="string",l=k&&!/\W/.test(h);k=k&&!l;if (l)h=h.toLowerCase();l=0;for (var q=g.length,
-p;l<q;l++)if (p=g[l]){for (;(p=p.previousSibling)&&p.nodeType!==1;);g[l]=k||p&&p.nodeName.toLowerCase()===h?p||false:p===h}k&&o.filter(h,g,true)},">":function(g,h){var k=typeof h==="string";if (k&&!/\W/.test(h)){h=h.toLowerCase();for (var l=0,q=g.length;l<q;l++){var p=g[l];if (p){k=p.parentNode;g[l]=k.nodeName.toLowerCase()===h?k:false}}}else{l=0;for (q=g.length;l<q;l++)if (p=g[l])g[l]=k?p.parentNode:p.parentNode===h;k&&o.filter(h,g,true)}},"":function(g,h,k){var l=e++,q=d;if (typeof h==="string"&&!/\W/.test(h)){var p=
-h=h.toLowerCase();q=b}q("parentNode",h,l,g,p,k)},"~":function(g,h,k){var l=e++,q=d;if (typeof h==="string"&&!/\W/.test(h)){var p=h=h.toLowerCase();q=b}q("previousSibling",h,l,g,p,k)}},find:{ID:function(g,h,k){if (typeof h.getElementById!=="undefined"&&!k)return(g=h.getElementById(g[1]))?[g]:[]},NAME:function(g,h){if (typeof h.getElementsByName!=="undefined"){var k=[];h=h.getElementsByName(g[1]);for (var l=0,q=h.length;l<q;l++)h[l].getAttribute("name")===g[1]&&k.push(h[l]);return k.length===0?null:k}},
-TAG:function(g,h){return h.getElementsByTagName(g[1])}},preFilter:{CLASS:function(g,h,k,l,q,p){g=" "+g[1].replace(/\\/g,"")+" ";if (p)return g;p=0;for (var u;(u=h[p])!=null;p++)if (u)if (q^(u.className&&(" "+u.className+" ").replace(/[\t\n]/g," ").indexOf(g)>=0))k||l.push(u);else if (k)h[p]=false;return false},ID:function(g){return g[1].replace(/\\/g,"")},TAG:function(g){return g[1].toLowerCase()},CHILD:function(g){if (g[1]==="nth"){var h=/(-?)(\d*)n((?:\+|-)?\d*)/.exec(g[2]==="even"&&"2n"||g[2]==="odd"&&
-"2n+1"||!/\D/.test(g[2])&&"0n+"+g[2]||g[2]);g[2]=h[1]+(h[2]||1)-0;g[3]=h[3]-0}g[0]=e++;return g},ATTR:function(g,h,k,l,q,p){h=g[1].replace(/\\/g,"");if (!p&&m.attrMap[h])g[1]=m.attrMap[h];if (g[2]==="~=")g[4]=" "+g[4]+" ";return g},PSEUDO:function(g,h,k,l,q){if (g[1]==="not")if ((f.exec(g[3])||"").length>1||/^\w/.test(g[3]))g[3]=o(g[3],null,null,h);else{g=o.filter(g[3],h,k,true^q);k||l.push.apply(l,g);return false}else if (m.match.POS.test(g[0])||m.match.CHILD.test(g[0]))return true;return g},POS:function(g){g.unshift(true);
-return g}},filters:{enabled:function(g){return g.disabled===false&&g.type!=="hidden"},disabled:function(g){return g.disabled===true},checked:function(g){return g.checked===true},selected:function(g){return g.selected===true},parent:function(g){return!!g.firstChild},empty:function(g){return!g.firstChild},has:function(g,h,k){return!!o(k[3],g).length},header:function(g){return/h\d/i.test(g.nodeName)},text:function(g){return"text"===g.type},radio:function(g){return"radio"===g.type},checkbox:function(g){return"checkbox"===
-g.type},file:function(g){return"file"===g.type},password:function(g){return"password"===g.type},submit:function(g){return"submit"===g.type},image:function(g){return"image"===g.type},reset:function(g){return"reset"===g.type},button:function(g){return"button"===g.type||g.nodeName.toLowerCase()==="button"},input:function(g){return/input|select|textarea|button/i.test(g.nodeName)}},setFilters:{first:function(g,h){return h===0},last:function(g,h,k,l){return h===l.length-1},even:function(g,h){return h%2===
-0},odd:function(g,h){return h%2===1},lt:function(g,h,k){return h<k[3]-0},gt:function(g,h,k){return h>k[3]-0},nth:function(g,h,k){return k[3]-0===h},eq:function(g,h,k){return k[3]-0===h}},filter:{PSEUDO:function(g,h,k,l){var q=h[1],p=m.filters[q];if (p)return p(g,k,h,l);else if (q==="contains")return(g.textContent||g.innerText||a([g])||"").indexOf(h[3])>=0;else if (q==="not"){h=h[3];k=0;for (l=h.length;k<l;k++)if (h[k]===g)return false;return true}else o.error("Syntax error, unrecognized expression: "+
-q)},CHILD:function(g,h){var k=h[1],l=g;switch(k){case "only":case "first":for (;l=l.previousSibling;)if (l.nodeType===1)return false;if (k==="first")return true;l=g;case "last":for (;l=l.nextSibling;)if (l.nodeType===1)return false;return true;case "nth":k=h[2];var q=h[3];if (k===1&&q===0)return true;h=h[0];var p=g.parentNode;if (p&&(p.sizcache!==h||!g.nodeIndex)){var u=0;for (l=p.firstChild;l;l=l.nextSibling)if (l.nodeType===1)l.nodeIndex=++u;p.sizcache=h}g=g.nodeIndex-q;return k===0?g===0:g%k===0&&g/k>=
-0}},ID:function(g,h){return g.nodeType===1&&g.getAttribute("id")===h},TAG:function(g,h){return h==="*"&&g.nodeType===1||g.nodeName.toLowerCase()===h},CLASS:function(g,h){return(" "+(g.className||g.getAttribute("class"))+" ").indexOf(h)>-1},ATTR:function(g,h){var k=h[1];g=m.attrHandle[k]?m.attrHandle[k](g):g[k]!=null?g[k]:g.getAttribute(k);k=g+"";var l=h[2];h=h[4];return g==null?l==="!=":l==="="?k===h:l==="*="?k.indexOf(h)>=0:l==="~="?(" "+k+" ").indexOf(h)>=0:!h?k&&g!==false:l==="!="?k!==h:l==="^="?
-k.indexOf(h)===0:l==="$="?k.substr(k.length-h.length)===h:l==="|="?k===h||k.substr(0,h.length+1)===h+"-":false},POS:function(g,h,k,l){var q=m.setFilters[h[2]];if (q)return q(g,k,h,l)}}},s=m.match.POS;for (var x in m.match){m.match[x]=new RegExp(m.match[x].source+/(?![^\[]*\])(?![^\(]*\))/.source);m.leftMatch[x]=new RegExp(/(^(?:.|\r|\n)*?)/.source+m.match[x].source.replace(/\\(\d+)/g,function(g,h){return"\\"+(h-0+1)}))}var A=function(g,h){g=Array.prototype.slice.call(g,0);if (h){h.push.apply(h,g);return h}return g};
-try{Array.prototype.slice.call(r.documentElement.childNodes,0)}catch(B){A=function(g,h){h=h||[];if (i.call(g)==="[object Array]")Array.prototype.push.apply(h,g);else if (typeof g.length==="number")for (var k=0,l=g.length;k<l;k++)h.push(g[k]);else for (k=0;g[k];k++)h.push(g[k]);return h}}var C;if (r.documentElement.compareDocumentPosition)C=function(g,h){if (!g.compareDocumentPosition||!h.compareDocumentPosition){if (g==h)j=true;return g.compareDocumentPosition?-1:1}g=g.compareDocumentPosition(h)&4?-1:g===
-h?0:1;if (g===0)j=true;return g};else if ("sourceIndex"in r.documentElement)C=function(g,h){if (!g.sourceIndex||!h.sourceIndex){if (g==h)j=true;return g.sourceIndex?-1:1}g=g.sourceIndex-h.sourceIndex;if (g===0)j=true;return g};else if (r.createRange)C=function(g,h){if (!g.ownerDocument||!h.ownerDocument){if (g==h)j=true;return g.ownerDocument?-1:1}var k=g.ownerDocument.createRange(),l=h.ownerDocument.createRange();k.setStart(g,0);k.setEnd(g,0);l.setStart(h,0);l.setEnd(h,0);g=k.compareBoundaryPoints(Range.START_TO_END,
-l);if (g===0)j=true;return g};(function(){var g=r.createElement("div"),h="script"+(new Date).getTime();g.innerHTML="<a name='"+h+"'/>";var k=r.documentElement;k.insertBefore(g,k.firstChild);if (r.getElementById(h)){m.find.ID=function(l,q,p){if (typeof q.getElementById!=="undefined"&&!p)return(q=q.getElementById(l[1]))?q.id===l[1]||typeof q.getAttributeNode!=="undefined"&&q.getAttributeNode("id").nodeValue===l[1]?[q]:v:[]};m.filter.ID=function(l,q){var p=typeof l.getAttributeNode!=="undefined"&&l.getAttributeNode("id");
-return l.nodeType===1&&p&&p.nodeValue===q}}k.removeChild(g);k=g=null})();(function(){var g=r.createElement("div");g.appendChild(r.createComment(""));if (g.getElementsByTagName("*").length>0)m.find.TAG=function(h,k){k=k.getElementsByTagName(h[1]);if (h[1]==="*"){h=[];for (var l=0;k[l];l++)k[l].nodeType===1&&h.push(k[l]);k=h}return k};g.innerHTML="<a href='#'></a>";if (g.firstChild&&typeof g.firstChild.getAttribute!=="undefined"&&g.firstChild.getAttribute("href")!=="#")m.attrHandle.href=function(h){return h.getAttribute("href",
-2)};g=null})();r.querySelectorAll&&function(){var g=o,h=r.createElement("div");h.innerHTML="<p class='TEST'></p>";if (!(h.querySelectorAll&&h.querySelectorAll(".TEST").length===0)){o=function(l,q,p,u){q=q||r;if (!u&&q.nodeType===9&&!w(q))try{return A(q.querySelectorAll(l),p)}catch(t){}return g(l,q,p,u)};for (var k in g)o[k]=g[k];h=null}}();(function(){var g=r.createElement("div");g.innerHTML="<div class='test e'></div><div class='test'></div>";if (!(!g.getElementsByClassName||g.getElementsByClassName("e").length===
-0)){g.lastChild.className="e";if (g.getElementsByClassName("e").length!==1){m.order.splice(1,0,"CLASS");m.find.CLASS=function(h,k,l){if (typeof k.getElementsByClassName!=="undefined"&&!l)return k.getElementsByClassName(h[1])};g=null}}})();var E=r.compareDocumentPosition?function(g,h){return g.compareDocumentPosition(h)&16}:function(g,h){return g!==h&&(g.contains?g.contains(h):true)},w=function(g){return(g=(g?g.ownerDocument||g:0).documentElement)?g.nodeName!=="HTML":false},fa=function(g,h){var k=[],
-l="",q;for (h=h.nodeType?[h]:h;q=m.match.PSEUDO.exec(g);){l+=q[0];g=g.replace(m.match.PSEUDO,"")}g=m.relative[g]?g+"*":g;q=0;for (var p=h.length;q<p;q++)o(g,h[q],k);return o.filter(l,k)};c.find=o;c.expr=o.selectors;c.expr[":"]=c.expr.filters;c.unique=o.uniqueSort;c.getText=a;c.isXMLDoc=w;c.contains=E})();var bb=/Until$/,cb=/^(?:parents|prevUntil|prevAll)/,db=/,/;Q=Array.prototype.slice;var Ea=function(a,b,d){if (c.isFunction(b))return c.grep(a,function(e,i){return!!b.call(e,i,e)===d});else if (b.nodeType)return c.grep(a,
-function(e){return e===b===d});else if (typeof b==="string"){var f=c.grep(a,function(e){return e.nodeType===1});if (Qa.test(b))return c.filter(b,f,!d);else b=c.filter(b,f)}return c.grep(a,function(e){return c.inArray(e,b)>=0===d})};c.fn.extend({find:function(a){for (var b=this.pushStack("","find",a),d=0,f=0,e=this.length;f<e;f++){d=b.length;c.find(a,this[f],b);if (f>0)for (var i=d;i<b.length;i++)for (var j=0;j<d;j++)if (b[j]===b[i]){b.splice(i--,1);break}}return b},has:function(a){var b=c(a);return this.filter(function(){for (var d=
-0,f=b.length;d<f;d++)if (c.contains(this,b[d]))return true})},not:function(a){return this.pushStack(Ea(this,a,false),"not",a)},filter:function(a){return this.pushStack(Ea(this,a,true),"filter",a)},is:function(a){return!!a&&c.filter(a,this).length>0},closest:function(a,b){if (c.isArray(a)){var d=[],f=this[0],e,i={},j;if (f&&a.length){e=0;for (var n=a.length;e<n;e++){j=a[e];i[j]||(i[j]=c.expr.match.POS.test(j)?c(j,b||this.context):j)}for (;f&&f.ownerDocument&&f!==b;){for (j in i){e=i[j];if (e.jquery?e.index(f)>
--1:c(f).is(e)){d.push({selector:j,elem:f});delete i[j]}}f=f.parentNode}}return d}var o=c.expr.match.POS.test(a)?c(a,b||this.context):null;return this.map(function(m,s){for (;s&&s.ownerDocument&&s!==b;){if (o?o.index(s)>-1:c(s).is(a))return s;s=s.parentNode}return null})},index:function(a){if (!a||typeof a==="string")return c.inArray(this[0],a?c(a):this.parent().children());return c.inArray(a.jquery?a[0]:a,this)},add:function(a,b){a=typeof a==="string"?c(a,b||this.context):c.makeArray(a);b=c.merge(this.get(),
-a);return this.pushStack(pa(a[0])||pa(b[0])?b:c.unique(b))},andSelf:function(){return this.add(this.prevObject)}});c.each({parent:function(a){return(a=a.parentNode)&&a.nodeType!==11?a:null},parents:function(a){return c.dir(a,"parentNode")},parentsUntil:function(a,b,d){return c.dir(a,"parentNode",d)},next:function(a){return c.nth(a,2,"nextSibling")},prev:function(a){return c.nth(a,2,"previousSibling")},nextAll:function(a){return c.dir(a,"nextSibling")},prevAll:function(a){return c.dir(a,"previousSibling")},
-nextUntil:function(a,b,d){return c.dir(a,"nextSibling",d)},prevUntil:function(a,b,d){return c.dir(a,"previousSibling",d)},siblings:function(a){return c.sibling(a.parentNode.firstChild,a)},children:function(a){return c.sibling(a.firstChild)},contents:function(a){return c.nodeName(a,"iframe")?a.contentDocument||a.contentWindow.document:c.makeArray(a.childNodes)}},function(a,b){c.fn[a]=function(d,f){var e=c.map(this,b,d);bb.test(a)||(f=d);if (f&&typeof f==="string")e=c.filter(f,e);e=this.length>1?c.unique(e):
-e;if ((this.length>1||db.test(f))&&cb.test(a))e=e.reverse();return this.pushStack(e,a,Q.call(arguments).join(","))}});c.extend({filter:function(a,b,d){if (d)a=":not("+a+")";return c.find.matches(a,b)},dir:function(a,b,d){var f=[];for (a=a[b];a&&a.nodeType!==9&&(d===v||a.nodeType!==1||!c(a).is(d));){a.nodeType===1&&f.push(a);a=a[b]}return f},nth:function(a,b,d){b=b||1;for (var f=0;a;a=a[d])if (a.nodeType===1&&++f===b)break;return a},sibling:function(a,b){for (var d=[];a;a=a.nextSibling)a.nodeType===1&&a!==
-b&&d.push(a);return d}});var Fa=/ jQuery\d+="(?:\d+|null)"/g,V=/^\s+/,Ga=/(<([\w:]+)[^>]*?)\/>/g,eb=/^(?:area|br|col|embed|hr|img|input|link|meta|param)$/i,Ha=/<([\w:]+)/,fb=/<tbody/i,gb=/<|&\w+;/,sa=/checked\s*(?:[^=]|=\s*.checked.)/i,Ia=function(a,b,d){return eb.test(d)?a:b+"></"+d+">"},F={option:[1,"<select multiple='multiple'>","</select>"],legend:[1,"<fieldset>","</fieldset>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],
-col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],area:[1,"<map>","</map>"],_default:[0,"",""]};F.optgroup=F.option;F.tbody=F.tfoot=F.colgroup=F.caption=F.thead;F.th=F.td;if (!c.support.htmlSerialize)F._default=[1,"div<div>","</div>"];c.fn.extend({text:function(a){if (c.isFunction(a))return this.each(function(b){var d=c(this);d.text(a.call(this,b,d.text()))});if (typeof a!=="object"&&a!==v)return this.empty().append((this[0]&&this[0].ownerDocument||r).createTextNode(a));return c.getText(this)},
-wrapAll:function(a){if (c.isFunction(a))return this.each(function(d){c(this).wrapAll(a.call(this,d))});if (this[0]){var b=c(a,this[0].ownerDocument).eq(0).clone(true);this[0].parentNode&&b.insertBefore(this[0]);b.map(function(){for (var d=this;d.firstChild&&d.firstChild.nodeType===1;)d=d.firstChild;return d}).append(this)}return this},wrapInner:function(a){if (c.isFunction(a))return this.each(function(b){c(this).wrapInner(a.call(this,b))});return this.each(function(){var b=c(this),d=b.contents();d.length?
-d.wrapAll(a):b.append(a)})},wrap:function(a){return this.each(function(){c(this).wrapAll(a)})},unwrap:function(){return this.parent().each(function(){c.nodeName(this,"body")||c(this).replaceWith(this.childNodes)}).end()},append:function(){return this.domManip(arguments,true,function(a){this.nodeType===1&&this.appendChild(a)})},prepend:function(){return this.domManip(arguments,true,function(a){this.nodeType===1&&this.insertBefore(a,this.firstChild)})},before:function(){if (this[0]&&this[0].parentNode)return this.domManip(arguments,
-false,function(b){this.parentNode.insertBefore(b,this)});else if (arguments.length){var a=c(arguments[0]);a.push.apply(a,this.toArray());return this.pushStack(a,"before",arguments)}},after:function(){if (this[0]&&this[0].parentNode)return this.domManip(arguments,false,function(b){this.parentNode.insertBefore(b,this.nextSibling)});else if (arguments.length){var a=this.pushStack(this,"after",arguments);a.push.apply(a,c(arguments[0]).toArray());return a}},clone:function(a){var b=this.map(function(){if (!c.support.noCloneEvent&&
-!c.isXMLDoc(this)){var d=this.outerHTML,f=this.ownerDocument;if (!d){d=f.createElement("div");d.appendChild(this.cloneNode(true));d=d.innerHTML}return c.clean([d.replace(Fa,"").replace(V,"")],f)[0]}else return this.cloneNode(true)});if (a===true){qa(this,b);qa(this.find("*"),b.find("*"))}return b},html:function(a){if (a===v)return this[0]&&this[0].nodeType===1?this[0].innerHTML.replace(Fa,""):null;else if (typeof a==="string"&&!/<script/i.test(a)&&(c.support.leadingWhitespace||!V.test(a))&&!F[(Ha.exec(a)||
-["",""])[1].toLowerCase()]){a=a.replace(Ga,Ia);try{for (var b=0,d=this.length;b<d;b++)if (this[b].nodeType===1){c.cleanData(this[b].getElementsByTagName("*"));this[b].innerHTML=a}}catch(f){this.empty().append(a)}}else c.isFunction(a)?this.each(function(e){var i=c(this),j=i.html();i.empty().append(function(){return a.call(this,e,j)})}):this.empty().append(a);return this},replaceWith:function(a){if (this[0]&&this[0].parentNode){if (c.isFunction(a))return this.each(function(b){var d=c(this),f=d.html();d.replaceWith(a.call(this,
-b,f))});else a=c(a).detach();return this.each(function(){var b=this.nextSibling,d=this.parentNode;c(this).remove();b?c(b).before(a):c(d).append(a)})}else return this.pushStack(c(c.isFunction(a)?a():a),"replaceWith",a)},detach:function(a){return this.remove(a,true)},domManip:function(a,b,d){function f(s){return c.nodeName(s,"table")?s.getElementsByTagName("tbody")[0]||s.appendChild(s.ownerDocument.createElement("tbody")):s}var e,i,j=a[0],n=[];if (!c.support.checkClone&&arguments.length===3&&typeof j===
-"string"&&sa.test(j))return this.each(function(){c(this).domManip(a,b,d,true)});if (c.isFunction(j))return this.each(function(s){var x=c(this);a[0]=j.call(this,s,b?x.html():v);x.domManip(a,b,d)});if (this[0]){e=a[0]&&a[0].parentNode&&a[0].parentNode.nodeType===11?{fragment:a[0].parentNode}:ra(a,this,n);if (i=e.fragment.firstChild){b=b&&c.nodeName(i,"tr");for (var o=0,m=this.length;o<m;o++)d.call(b?f(this[o],i):this[o],e.cacheable||this.length>1||o>0?e.fragment.cloneNode(true):e.fragment)}n&&c.each(n,
-Ma)}return this}});c.fragments={};c.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(a,b){c.fn[a]=function(d){var f=[];d=c(d);for (var e=0,i=d.length;e<i;e++){var j=(e>0?this.clone(true):this).get();c.fn[b].apply(c(d[e]),j);f=f.concat(j)}return this.pushStack(f,a,d.selector)}});c.each({remove:function(a,b){if (!a||c.filter(a,[this]).length){if (!b&&this.nodeType===1){c.cleanData(this.getElementsByTagName("*"));c.cleanData([this])}this.parentNode&&
-this.parentNode.removeChild(this)}},empty:function(){for (this.nodeType===1&&c.cleanData(this.getElementsByTagName("*"));this.firstChild;)this.removeChild(this.firstChild)}},function(a,b){c.fn[a]=function(){return this.each(b,arguments)}});c.extend({clean:function(a,b,d,f){b=b||r;if (typeof b.createElement==="undefined")b=b.ownerDocument||b[0]&&b[0].ownerDocument||r;var e=[];c.each(a,function(i,j){if (typeof j==="number")j+="";if (j){if (typeof j==="string"&&!gb.test(j))j=b.createTextNode(j);else if (typeof j===
-"string"){j=j.replace(Ga,Ia);var n=(Ha.exec(j)||["",""])[1].toLowerCase(),o=F[n]||F._default,m=o[0];i=b.createElement("div");for (i.innerHTML=o[1]+j+o[2];m--;)i=i.lastChild;if (!c.support.tbody){m=fb.test(j);n=n==="table"&&!m?i.firstChild&&i.firstChild.childNodes:o[1]==="<table>"&&!m?i.childNodes:[];for (o=n.length-1;o>=0;--o)c.nodeName(n[o],"tbody")&&!n[o].childNodes.length&&n[o].parentNode.removeChild(n[o])}!c.support.leadingWhitespace&&V.test(j)&&i.insertBefore(b.createTextNode(V.exec(j)[0]),i.firstChild);
-j=c.makeArray(i.childNodes)}if (j.nodeType)e.push(j);else e=c.merge(e,j)}});if (d)for (a=0;e[a];a++)if (f&&c.nodeName(e[a],"script")&&(!e[a].type||e[a].type.toLowerCase()==="text/javascript"))f.push(e[a].parentNode?e[a].parentNode.removeChild(e[a]):e[a]);else{e[a].nodeType===1&&e.splice.apply(e,[a+1,0].concat(c.makeArray(e[a].getElementsByTagName("script"))));d.appendChild(e[a])}return e},cleanData:function(a){for (var b=0,d;(d=a[b])!=null;b++){c.event.remove(d);c.removeData(d)}}});var hb=/z-?index|font-?weight|opacity|zoom|line-?height/i,
-Ja=/alpha\([^)]*\)/,Ka=/opacity=([^)]*)/,ga=/float/i,ha=/-([a-z])/ig,ib=/([A-Z])/g,jb=/^-?\d+(?:px)?$/i,kb=/^-?\d/,lb={position:"absolute",visibility:"hidden",display:"block"},mb=["Left","Right"],nb=["Top","Bottom"],ob=r.defaultView&&r.defaultView.getComputedStyle,La=c.support.cssFloat?"cssFloat":"styleFloat",ia=function(a,b){return b.toUpperCase()};c.fn.css=function(a,b){return X(this,a,b,true,function(d,f,e){if (e===v)return c.curCSS(d,f);if (typeof e==="number"&&!hb.test(f))e+="px";c.style(d,f,e)})};
-c.extend({style:function(a,b,d){if (!a||a.nodeType===3||a.nodeType===8)return v;if ((b==="width"||b==="height")&&parseFloat(d)<0)d=v;var f=a.style||a,e=d!==v;if (!c.support.opacity&&b==="opacity"){if (e){f.zoom=1;b=parseInt(d,10)+""==="NaN"?"":"alpha(opacity="+d*100+")";a=f.filter||c.curCSS(a,"filter")||"";f.filter=Ja.test(a)?a.replace(Ja,b):b}return f.filter&&f.filter.indexOf("opacity=")>=0?parseFloat(Ka.exec(f.filter)[1])/100+"":""}if (ga.test(b))b=La;b=b.replace(ha,ia);if (e)f[b]=d;return f[b]},css:function(a,
-b,d,f){if (b==="width"||b==="height"){var e,i=b==="width"?mb:nb;function j(){e=b==="width"?a.offsetWidth:a.offsetHeight;f!=="border"&&c.each(i,function(){f||(e-=parseFloat(c.curCSS(a,"padding"+this,true))||0);if (f==="margin")e+=parseFloat(c.curCSS(a,"margin"+this,true))||0;else e-=parseFloat(c.curCSS(a,"border"+this+"Width",true))||0})}a.offsetWidth!==0?j():c.swap(a,lb,j);return Math.max(0,Math.round(e))}return c.curCSS(a,b,d)},curCSS:function(a,b,d){var f,e=a.style;if (!c.support.opacity&&b==="opacity"&&
-a.currentStyle){f=Ka.test(a.currentStyle.filter||"")?parseFloat(RegExp.$1)/100+"":"";return f===""?"1":f}if (ga.test(b))b=La;if (!d&&e&&e[b])f=e[b];else if (ob){if (ga.test(b))b="float";b=b.replace(ib,"-$1").toLowerCase();e=a.ownerDocument.defaultView;if (!e)return null;if (a=e.getComputedStyle(a,null))f=a.getPropertyValue(b);if (b==="opacity"&&f==="")f="1"}else if (a.currentStyle){d=b.replace(ha,ia);f=a.currentStyle[b]||a.currentStyle[d];if (!jb.test(f)&&kb.test(f)){b=e.left;var i=a.runtimeStyle.left;a.runtimeStyle.left=
-a.currentStyle.left;e.left=d==="fontSize"?"1em":f||0;f=e.pixelLeft+"px";e.left=b;a.runtimeStyle.left=i}}return f},swap:function(a,b,d){var f={};for (var e in b){f[e]=a.style[e];a.style[e]=b[e]}d.call(a);for (e in b)a.style[e]=f[e]}});if (c.expr&&c.expr.filters){c.expr.filters.hidden=function(a){var b=a.offsetWidth,d=a.offsetHeight,f=a.nodeName.toLowerCase()==="tr";return b===0&&d===0&&!f?true:b>0&&d>0&&!f?false:c.curCSS(a,"display")==="none"};c.expr.filters.visible=function(a){return!c.expr.filters.hidden(a)}}var pb=
-J(),qb=/<script(.|\s)*?\/script>/gi,rb=/select|textarea/i,sb=/color|date|datetime|email|hidden|month|number|password|range|search|tel|text|time|url|week/i,N=/=\?(&|$)/,ja=/\?/,tb=/(\?|&)_=.*?(&|$)/,ub=/^(\w+:)?\/\/([^\/?#]+)/,vb=/%20/g;c.fn.extend({_load:c.fn.load,load:function(a,b,d){if (typeof a!=="string")return this._load(a);else if (!this.length)return this;var f=a.indexOf(" ");if (f>=0){var e=a.slice(f,a.length);a=a.slice(0,f)}f="GET";if (b)if (c.isFunction(b)){d=b;b=null}else if (typeof b==="object"){b=
-c.param(b,c.ajaxSettings.traditional);f="POST"}var i=this;c.ajax({url:a,type:f,dataType:"html",data:b,complete:function(j,n){if (n==="success"||n==="notmodified")i.html(e?c("<div />").append(j.responseText.replace(qb,"")).find(e):j.responseText);d&&i.each(d,[j.responseText,n,j])}});return this},serialize:function(){return c.param(this.serializeArray())},serializeArray:function(){return this.map(function(){return this.elements?c.makeArray(this.elements):this}).filter(function(){return this.name&&!this.disabled&&
-(this.checked||rb.test(this.nodeName)||sb.test(this.type))}).map(function(a,b){a=c(this).val();return a==null?null:c.isArray(a)?c.map(a,function(d){return{name:b.name,value:d}}):{name:b.name,value:a}}).get()}});c.each("ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend".split(" "),function(a,b){c.fn[b]=function(d){return this.bind(b,d)}});c.extend({get:function(a,b,d,f){if (c.isFunction(b)){f=f||d;d=b;b=null}return c.ajax({type:"GET",url:a,data:b,success:d,dataType:f})},getScript:function(a,
-b){return c.get(a,null,b,"script")},getJSON:function(a,b,d){return c.get(a,b,d,"json")},post:function(a,b,d,f){if (c.isFunction(b)){f=f||d;d=b;b={}}return c.ajax({type:"POST",url:a,data:b,success:d,dataType:f})},ajaxSetup:function(a){c.extend(c.ajaxSettings,a)},ajaxSettings:{url:location.href,global:true,type:"GET",contentType:"application/x-www-form-urlencoded",processData:true,async:true,xhr:z.XMLHttpRequest&&(z.location.protocol!=="file:"||!z.ActiveXObject)?function(){return new z.XMLHttpRequest}:
-function(){try{return new z.ActiveXObject("Microsoft.XMLHTTP")}catch(a){}},accepts:{xml:"application/xml, text/xml",html:"text/html",script:"text/javascript, application/javascript",json:"application/json, text/javascript",text:"text/plain",_default:"*/*"}},lastModified:{},etag:{},ajax:function(a){function b(){e.success&&e.success.call(o,n,j,w);e.global&&f("ajaxSuccess",[w,e])}function d(){e.complete&&e.complete.call(o,w,j);e.global&&f("ajaxComplete",[w,e]);e.global&&!--c.active&&c.event.trigger("ajaxStop")}
-function f(q,p){(e.context?c(e.context):c.event).trigger(q,p)}var e=c.extend(true,{},c.ajaxSettings,a),i,j,n,o=a&&a.context||e,m=e.type.toUpperCase();if (e.data&&e.processData&&typeof e.data!=="string")e.data=c.param(e.data,e.traditional);if (e.dataType==="jsonp"){if (m==="GET")N.test(e.url)||(e.url+=(ja.test(e.url)?"&":"?")+(e.jsonp||"callback")+"=?");else if (!e.data||!N.test(e.data))e.data=(e.data?e.data+"&":"")+(e.jsonp||"callback")+"=?";e.dataType="json"}if (e.dataType==="json"&&(e.data&&N.test(e.data)||
-N.test(e.url))){i=e.jsonpCallback||"jsonp"+pb++;if (e.data)e.data=(e.data+"").replace(N,"="+i+"$1");e.url=e.url.replace(N,"="+i+"$1");e.dataType="script";z[i]=z[i]||function(q){n=q;b();d();z[i]=v;try{delete z[i]}catch(p){}A&&A.removeChild(B)}}if (e.dataType==="script"&&e.cache===null)e.cache=false;if (e.cache===false&&m==="GET"){var s=J(),x=e.url.replace(tb,"$1_="+s+"$2");e.url=x+(x===e.url?(ja.test(e.url)?"&":"?")+"_="+s:"")}if (e.data&&m==="GET")e.url+=(ja.test(e.url)?"&":"?")+e.data;e.global&&!c.active++&&
-c.event.trigger("ajaxStart");s=(s=ub.exec(e.url))&&(s[1]&&s[1]!==location.protocol||s[2]!==location.host);if (e.dataType==="script"&&m==="GET"&&s){var A=r.getElementsByTagName("head")[0]||r.documentElement,B=r.createElement("script");B.src=e.url;if (e.scriptCharset)B.charset=e.scriptCharset;if (!i){var C=false;B.onload=B.onreadystatechange=function(){if (!C&&(!this.readyState||this.readyState==="loaded"||this.readyState==="complete")){C=true;b();d();B.onload=B.onreadystatechange=null;A&&B.parentNode&&
-A.removeChild(B)}}}A.insertBefore(B,A.firstChild);return v}var E=false,w=e.xhr();if (w){e.username?w.open(m,e.url,e.async,e.username,e.password):w.open(m,e.url,e.async);try{if (e.data||a&&a.contentType)w.setRequestHeader("Content-Type",e.contentType);if (e.ifModified){c.lastModified[e.url]&&w.setRequestHeader("If-Modified-Since",c.lastModified[e.url]);c.etag[e.url]&&w.setRequestHeader("If-None-Match",c.etag[e.url])}s||w.setRequestHeader("X-Requested-With","XMLHttpRequest");w.setRequestHeader("Accept",
-e.dataType&&e.accepts[e.dataType]?e.accepts[e.dataType]+", */*":e.accepts._default)}catch(fa){}if (e.beforeSend&&e.beforeSend.call(o,w,e)===false){e.global&&!--c.active&&c.event.trigger("ajaxStop");w.abort();return false}e.global&&f("ajaxSend",[w,e]);var g=w.onreadystatechange=function(q){if (!w||w.readyState===0||q==="abort"){E||d();E=true;if (w)w.onreadystatechange=c.noop}else if (!E&&w&&(w.readyState===4||q==="timeout")){E=true;w.onreadystatechange=c.noop;j=q==="timeout"?"timeout":!c.httpSuccess(w)?
-"error":e.ifModified&&c.httpNotModified(w,e.url)?"notmodified":"success";var p;if (j==="success")try{n=c.httpData(w,e.dataType,e)}catch(u){j="parsererror";p=u}if (j==="success"||j==="notmodified")i||b();else c.handleError(e,w,j,p);d();q==="timeout"&&w.abort();if (e.async)w=null}};try{var h=w.abort;w.abort=function(){w&&h.call(w);g("abort")}}catch(k){}e.async&&e.timeout>0&&setTimeout(function(){w&&!E&&g("timeout")},e.timeout);try{w.send(m==="POST"||m==="PUT"||m==="DELETE"?e.data:null)}catch(l){c.handleError(e,
-w,null,l);d()}e.async||g();return w}},handleError:function(a,b,d,f){if (a.error)a.error.call(a.context||a,b,d,f);if (a.global)(a.context?c(a.context):c.event).trigger("ajaxError",[b,a,f])},active:0,httpSuccess:function(a){try{return!a.status&&location.protocol==="file:"||a.status>=200&&a.status<300||a.status===304||a.status===1223||a.status===0}catch(b){}return false},httpNotModified:function(a,b){var d=a.getResponseHeader("Last-Modified"),f=a.getResponseHeader("Etag");if (d)c.lastModified[b]=d;if (f)c.etag[b]=
-f;return a.status===304||a.status===0},httpData:function(a,b,d){var f=a.getResponseHeader("content-type")||"",e=b==="xml"||!b&&f.indexOf("xml")>=0;a=e?a.responseXML:a.responseText;e&&a.documentElement.nodeName==="parsererror"&&c.error("parsererror");if (d&&d.dataFilter)a=d.dataFilter(a,b);if (typeof a==="string")if (b==="json"||!b&&f.indexOf("json")>=0)a=c.parseJSON(a);else if (b==="script"||!b&&f.indexOf("javascript")>=0)c.globalEval(a);return a},param:function(a,b){function d(j,n){if (c.isArray(n))c.each(n,
-function(o,m){b?f(j,m):d(j+"["+(typeof m==="object"||c.isArray(m)?o:"")+"]",m)});else!b&&n!=null&&typeof n==="object"?c.each(n,function(o,m){d(j+"["+o+"]",m)}):f(j,n)}function f(j,n){n=c.isFunction(n)?n():n;e[e.length]=encodeURIComponent(j)+"="+encodeURIComponent(n)}var e=[];if (b===v)b=c.ajaxSettings.traditional;if (c.isArray(a)||a.jquery)c.each(a,function(){f(this.name,this.value)});else for (var i in a)d(i,a[i]);return e.join("&").replace(vb,"+")}});var ka={},wb=/toggle|show|hide/,xb=/^([+-]=)?([\d+-.]+)(.*)$/,
-W,ta=[["height","marginTop","marginBottom","paddingTop","paddingBottom"],["width","marginLeft","marginRight","paddingLeft","paddingRight"],["opacity"]];c.fn.extend({show:function(a,b){if (a||a===0)return this.animate(K("show",3),a,b);else{a=0;for (b=this.length;a<b;a++){var d=c.data(this[a],"olddisplay");this[a].style.display=d||"";if (c.css(this[a],"display")==="none"){d=this[a].nodeName;var f;if (ka[d])f=ka[d];else{var e=c("<"+d+" />").appendTo("body");f=e.css("display");if (f==="none")f="block";e.remove();
-ka[d]=f}c.data(this[a],"olddisplay",f)}}a=0;for (b=this.length;a<b;a++)this[a].style.display=c.data(this[a],"olddisplay")||"";return this}},hide:function(a,b){if (a||a===0)return this.animate(K("hide",3),a,b);else{a=0;for (b=this.length;a<b;a++){var d=c.data(this[a],"olddisplay");!d&&d!=="none"&&c.data(this[a],"olddisplay",c.css(this[a],"display"))}a=0;for (b=this.length;a<b;a++)this[a].style.display="none";return this}},_toggle:c.fn.toggle,toggle:function(a,b){var d=typeof a==="boolean";if (c.isFunction(a)&&
-c.isFunction(b))this._toggle.apply(this,arguments);else a==null||d?this.each(function(){var f=d?a:c(this).is(":hidden");c(this)[f?"show":"hide"]()}):this.animate(K("toggle",3),a,b);return this},fadeTo:function(a,b,d){return this.filter(":hidden").css("opacity",0).show().end().animate({opacity:b},a,d)},animate:function(a,b,d,f){var e=c.speed(b,d,f);if (c.isEmptyObject(a))return this.each(e.complete);return this[e.queue===false?"each":"queue"](function(){var i=c.extend({},e),j,n=this.nodeType===1&&c(this).is(":hidden"),
-o=this;for (j in a){var m=j.replace(ha,ia);if (j!==m){a[m]=a[j];delete a[j];j=m}if (a[j]==="hide"&&n||a[j]==="show"&&!n)return i.complete.call(this);if ((j==="height"||j==="width")&&this.style){i.display=c.css(this,"display");i.overflow=this.style.overflow}if (c.isArray(a[j])){(i.specialEasing=i.specialEasing||{})[j]=a[j][1];a[j]=a[j][0]}}if (i.overflow!=null)this.style.overflow="hidden";i.curAnim=c.extend({},a);c.each(a,function(s,x){var A=new c.fx(o,i,s);if (wb.test(x))A[x==="toggle"?n?"show":"hide":x](a);
-else{var B=xb.exec(x),C=A.cur(true)||0;if (B){x=parseFloat(B[2]);var E=B[3]||"px";if (E!=="px"){o.style[s]=(x||1)+E;C=(x||1)/A.cur(true)*C;o.style[s]=C+E}if (B[1])x=(B[1]==="-="?-1:1)*x+C;A.custom(C,x,E)}else A.custom(C,x,"")}});return true})},stop:function(a,b){var d=c.timers;a&&this.queue([]);this.each(function(){for (var f=d.length-1;f>=0;f--)if (d[f].elem===this){b&&d[f](true);d.splice(f,1)}});b||this.dequeue();return this}});c.each({slideDown:K("show",1),slideUp:K("hide",1),slideToggle:K("toggle",
-1),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"}},function(a,b){c.fn[a]=function(d,f){return this.animate(b,d,f)}});c.extend({speed:function(a,b,d){var f=a&&typeof a==="object"?a:{complete:d||!d&&b||c.isFunction(a)&&a,duration:a,easing:d&&b||b&&!c.isFunction(b)&&b};f.duration=c.fx.off?0:typeof f.duration==="number"?f.duration:c.fx.speeds[f.duration]||c.fx.speeds._default;f.old=f.complete;f.complete=function(){f.queue!==false&&c(this).dequeue();c.isFunction(f.old)&&f.old.call(this)};return f},easing:{linear:function(a,
-b,d,f){return d+f*a},swing:function(a,b,d,f){return(-Math.cos(a*Math.PI)/2+0.5)*f+d}},timers:[],fx:function(a,b,d){this.options=b;this.elem=a;this.prop=d;if (!b.orig)b.orig={}}});c.fx.prototype={update:function(){this.options.step&&this.options.step.call(this.elem,this.now,this);(c.fx.step[this.prop]||c.fx.step._default)(this);if ((this.prop==="height"||this.prop==="width")&&this.elem.style)this.elem.style.display="block"},cur:function(a){if (this.elem[this.prop]!=null&&(!this.elem.style||this.elem.style[this.prop]==
-null))return this.elem[this.prop];return(a=parseFloat(c.css(this.elem,this.prop,a)))&&a>-10000?a:parseFloat(c.curCSS(this.elem,this.prop))||0},custom:function(a,b,d){function f(i){return e.step(i)}this.startTime=J();this.start=a;this.end=b;this.unit=d||this.unit||"px";this.now=this.start;this.pos=this.state=0;var e=this;f.elem=this.elem;if (f()&&c.timers.push(f)&&!W)W=setInterval(c.fx.tick,13)},show:function(){this.options.orig[this.prop]=c.style(this.elem,this.prop);this.options.show=true;this.custom(this.prop===
-"width"||this.prop==="height"?1:0,this.cur());c(this.elem).show()},hide:function(){this.options.orig[this.prop]=c.style(this.elem,this.prop);this.options.hide=true;this.custom(this.cur(),0)},step:function(a){var b=J(),d=true;if (a||b>=this.options.duration+this.startTime){this.now=this.end;this.pos=this.state=1;this.update();this.options.curAnim[this.prop]=true;for (var f in this.options.curAnim)if (this.options.curAnim[f]!==true)d=false;if (d){if (this.options.display!=null){this.elem.style.overflow=
-this.options.overflow;a=c.data(this.elem,"olddisplay");this.elem.style.display=a?a:this.options.display;if (c.css(this.elem,"display")==="none")this.elem.style.display="block"}this.options.hide&&c(this.elem).hide();if (this.options.hide||this.options.show)for (var e in this.options.curAnim)c.style(this.elem,e,this.options.orig[e]);this.options.complete.call(this.elem)}return false}else{e=b-this.startTime;this.state=e/this.options.duration;a=this.options.easing||(c.easing.swing?"swing":"linear");this.pos=
-c.easing[this.options.specialEasing&&this.options.specialEasing[this.prop]||a](this.state,e,0,1,this.options.duration);this.now=this.start+(this.end-this.start)*this.pos;this.update()}return true}};c.extend(c.fx,{tick:function(){for (var a=c.timers,b=0;b<a.length;b++)a[b]()||a.splice(b--,1);a.length||c.fx.stop()},stop:function(){clearInterval(W);W=null},speeds:{slow:600,fast:200,_default:400},step:{opacity:function(a){c.style(a.elem,"opacity",a.now)},_default:function(a){if (a.elem.style&&a.elem.style[a.prop]!=
-null)a.elem.style[a.prop]=(a.prop==="width"||a.prop==="height"?Math.max(0,a.now):a.now)+a.unit;else a.elem[a.prop]=a.now}}});if (c.expr&&c.expr.filters)c.expr.filters.animated=function(a){return c.grep(c.timers,function(b){return a===b.elem}).length};c.fn.offset="getBoundingClientRect"in r.documentElement?function(a){var b=this[0];if (a)return this.each(function(e){c.offset.setOffset(this,a,e)});if (!b||!b.ownerDocument)return null;if (b===b.ownerDocument.body)return c.offset.bodyOffset(b);var d=b.getBoundingClientRect(),
-f=b.ownerDocument;b=f.body;f=f.documentElement;return{top:d.top+(self.pageYOffset||c.support.boxModel&&f.scrollTop||b.scrollTop)-(f.clientTop||b.clientTop||0),left:d.left+(self.pageXOffset||c.support.boxModel&&f.scrollLeft||b.scrollLeft)-(f.clientLeft||b.clientLeft||0)}}:function(a){var b=this[0];if (a)return this.each(function(s){c.offset.setOffset(this,a,s)});if (!b||!b.ownerDocument)return null;if (b===b.ownerDocument.body)return c.offset.bodyOffset(b);c.offset.initialize();var d=b.offsetParent,f=
-b,e=b.ownerDocument,i,j=e.documentElement,n=e.body;f=(e=e.defaultView)?e.getComputedStyle(b,null):b.currentStyle;for (var o=b.offsetTop,m=b.offsetLeft;(b=b.parentNode)&&b!==n&&b!==j;){if (c.offset.supportsFixedPosition&&f.position==="fixed")break;i=e?e.getComputedStyle(b,null):b.currentStyle;o-=b.scrollTop;m-=b.scrollLeft;if (b===d){o+=b.offsetTop;m+=b.offsetLeft;if (c.offset.doesNotAddBorder&&!(c.offset.doesAddBorderForTableAndCells&&/^t(able|d|h)$/i.test(b.nodeName))){o+=parseFloat(i.borderTopWidth)||
-0;m+=parseFloat(i.borderLeftWidth)||0}f=d;d=b.offsetParent}if (c.offset.subtractsBorderForOverflowNotVisible&&i.overflow!=="visible"){o+=parseFloat(i.borderTopWidth)||0;m+=parseFloat(i.borderLeftWidth)||0}f=i}if (f.position==="relative"||f.position==="static"){o+=n.offsetTop;m+=n.offsetLeft}if (c.offset.supportsFixedPosition&&f.position==="fixed"){o+=Math.max(j.scrollTop,n.scrollTop);m+=Math.max(j.scrollLeft,n.scrollLeft)}return{top:o,left:m}};c.offset={initialize:function(){var a=r.body,b=r.createElement("div"),
-d,f,e,i=parseFloat(c.curCSS(a,"marginTop",true))||0;c.extend(b.style,{position:"absolute",top:0,left:0,margin:0,border:0,width:"1px",height:"1px",visibility:"hidden"});b.innerHTML="<div style='position:absolute;top:0;left:0;margin:0;border:5px solid #000;padding:0;width:1px;height:1px;'><div></div></div><table style='position:absolute;top:0;left:0;margin:0;border:5px solid #000;padding:0;width:1px;height:1px;' cellpadding='0' cellspacing='0'><tr><td></td></tr></table>";a.insertBefore(b,a.firstChild);
-d=b.firstChild;f=d.firstChild;e=d.nextSibling.firstChild.firstChild;this.doesNotAddBorder=f.offsetTop!==5;this.doesAddBorderForTableAndCells=e.offsetTop===5;f.style.position="fixed";f.style.top="20px";this.supportsFixedPosition=f.offsetTop===20||f.offsetTop===15;f.style.position=f.style.top="";d.style.overflow="hidden";d.style.position="relative";this.subtractsBorderForOverflowNotVisible=f.offsetTop===-5;this.doesNotIncludeMarginInBodyOffset=a.offsetTop!==i;a.removeChild(b);c.offset.initialize=c.noop},
-bodyOffset:function(a){var b=a.offsetTop,d=a.offsetLeft;c.offset.initialize();if (c.offset.doesNotIncludeMarginInBodyOffset){b+=parseFloat(c.curCSS(a,"marginTop",true))||0;d+=parseFloat(c.curCSS(a,"marginLeft",true))||0}return{top:b,left:d}},setOffset:function(a,b,d){if (/static/.test(c.curCSS(a,"position")))a.style.position="relative";var f=c(a),e=f.offset(),i=parseInt(c.curCSS(a,"top",true),10)||0,j=parseInt(c.curCSS(a,"left",true),10)||0;if (c.isFunction(b))b=b.call(a,d,e);d={top:b.top-e.top+i,left:b.left-
-e.left+j};"using"in b?b.using.call(a,d):f.css(d)}};c.fn.extend({position:function(){if (!this[0])return null;var a=this[0],b=this.offsetParent(),d=this.offset(),f=/^body|html$/i.test(b[0].nodeName)?{top:0,left:0}:b.offset();d.top-=parseFloat(c.curCSS(a,"marginTop",true))||0;d.left-=parseFloat(c.curCSS(a,"marginLeft",true))||0;f.top+=parseFloat(c.curCSS(b[0],"borderTopWidth",true))||0;f.left+=parseFloat(c.curCSS(b[0],"borderLeftWidth",true))||0;return{top:d.top-f.top,left:d.left-f.left}},offsetParent:function(){return this.map(function(){for (var a=
-this.offsetParent||r.body;a&&!/^body|html$/i.test(a.nodeName)&&c.css(a,"position")==="static";)a=a.offsetParent;return a})}});c.each(["Left","Top"],function(a,b){var d="scroll"+b;c.fn[d]=function(f){var e=this[0],i;if (!e)return null;if (f!==v)return this.each(function(){if (i=ua(this))i.scrollTo(!a?f:c(i).scrollLeft(),a?f:c(i).scrollTop());else this[d]=f});else return(i=ua(e))?"pageXOffset"in i?i[a?"pageYOffset":"pageXOffset"]:c.support.boxModel&&i.document.documentElement[d]||i.document.body[d]:e[d]}});
-c.each(["Height","Width"],function(a,b){var d=b.toLowerCase();c.fn["inner"+b]=function(){return this[0]?c.css(this[0],d,false,"padding"):null};c.fn["outer"+b]=function(f){return this[0]?c.css(this[0],d,false,f?"margin":"border"):null};c.fn[d]=function(f){var e=this[0];if (!e)return f==null?null:this;if (c.isFunction(f))return this.each(function(i){var j=c(this);j[d](f.call(this,i,j[d]()))});return"scrollTo"in e&&e.document?e.document.compatMode==="CSS1Compat"&&e.document.documentElement["client"+b]||
-e.document.body["client"+b]:e.nodeType===9?Math.max(e.documentElement["client"+b],e.body["scroll"+b],e.documentElement["scroll"+b],e.body["offset"+b],e.documentElement["offset"+b]):f===v?c.css(e,d):this.css(d,typeof f==="string"?f:f+"px")}});z.jQuery=z.$=c})(window);
diff --git a/doc/config/scripts/narrow.js b/doc/config/scripts/narrow.js
deleted file mode 100644
index cc506f7..0000000
--- a/doc/config/scripts/narrow.js
+++ /dev/null
@@ -1,133 +0,0 @@
-/* This function generates menus and search box in narrow/slim fit mode */
-var narrowInit = function() {
-  /* 1: Create search form */
-  var narrowSearch = $('<div id="narrowsearch"></div>');
-  var searchform = $("#qtdocsearch");
-  narrowSearch.append(searchform);
-  $("#qtdocheader .content .qtref").after(narrowSearch);
-
-  /* 2: Create dropdowns */
-  var narrowmenu = $('<ul id="narrowmenu" class="sf-menu"></ul>');
-
-  /* Lookup */
-  var lookuptext = $("#lookup h2").attr("title");
-  $("#lookup ul").removeAttr("id");
-  $("#lookup ul li").removeAttr("class");
-  $("#lookup ul li").removeAttr("style");
-  var lookupul = $("#lookup ul");
-  var lookuplist = $('<li></li>');
-  var lookuplink = $('<a href="#"></a>');
-  lookuplink.append(lookuptext);
-  lookuplist.append(lookuplink);
-  lookuplist.append(lookupul);
-  narrowmenu.append(lookuplist);
-
-  /* Topics */
-  var topicstext = $("#topics h2").attr("title");
-  $("#topics ul").removeAttr("id");
-  $("#topics ul li").removeAttr("class");
-  $("#topics ul li").removeAttr("style");
-  var topicsul = $("#topics ul");
-  var topicslist = $('<li></li>');
-  var topicslink = $('<a href="#"></a>');
-  topicslink.append(topicstext);
-  topicslist.append(topicslink);
-  topicslist.append(topicsul);
-  narrowmenu.append(topicslist);
-
-  /* Examples */
-  var examplestext = $("#examples h2").attr("title");
-  $("#examples ul").removeAttr("id");
-  $("#examples ul li").removeAttr("class");
-  $("#examples ul li").removeAttr("style");
-  var examplesul = $("#examples ul");
-  var exampleslist = $('<li></li>');
-  var exampleslink = $('<a href="#"></a>');
-  exampleslink.append(examplestext);
-  exampleslist.append(exampleslink);
-  exampleslist.append(examplesul);
-  narrowmenu.append(exampleslist);
-
-  $("#shortCut").after(narrowmenu);
-  $('ul#narrowmenu').superfish({
-    delay: 100,
-    autoArrows: false,
-    disableHI: true
-  });
-}
-
-/* Executes on doc ready */
-$(document).ready(function(){
-    /* check if body has the narrow class */
-    if ($('body').hasClass('narrow')) {
-        /* run narrowInit */
-        narrowInit();
-    }
-
-    /* messure window width and add class if it is smaller than 600 px */
-    if($(window).width()<600) {
-        $('body').addClass('narrow');
-        /* if the search box contains */
-        if ($("#narrowsearch").length == 0) {
-            /* run narrowInit */
-            narrowInit();
-        }
-      }
-      else { /* if the window is wider than 600 px, narrow is removed */
-        $('body').removeClass('narrow');
-        if ($("#narrowsearch").length == 0) {
-        }
-    }
-});
-/* binding resize event to this funciton */
-$(window).bind('resize', function () {
-    /*  if the window is wider than 600 px, narrow class is added */
-    if($(window).width()<600) {
-        $('body').addClass('narrow');
-        if ($("#narrowsearch").length == 0) {
-          narrowInit();
-        }
-    }
-    else {
-        /* else we remove the narrow class */
-        $('body').removeClass('narrow');
-  }
-});
-
-    $('#narrowsearch').keyup(function () {
-        /* extract the search box content */
-      var searchString = $('#narrowsearch').val();
-      /* if the string is less than three characters */
-      if ((searchString == null) || (searchString.length < 3)) {
-            /* remove classes and elements*/
-            $('#narrowsearch').removeClass('loading');
-            $('.searching').remove();
-            /*  run CheckEmptyAndLoadList */
-            CheckEmptyAndLoadList();
-
-            $('.report').remove();
-            return;
-       }
-       /* if timer checks out */
-        if (this.timer) clearTimeout(this.timer);
-        this.timer = setTimeout(function () {
-            /* add loading image by adding loading class */
-            $('#narrowsearch').addClass('loading');
-            $('.searching').remove();
-
-            /* run the actual search */
-           $.ajax({
-            contentType: "application/x-www-form-urlencoded",
-            url: 'http://' + location.host + '/nokiasearch/GetDataServlet',
-            data: 'searchString='+searchString,
-            dataType:'xml',
-            type: 'post',
-            success: function (response, textStatus) {
-                /* on success remove loading img */
-                $('.searching').remove();
-                $('#narrowsearch').removeClass('loading');
-                processNokiaData(response);
-            }
-          });
-        }, 500); /* timer set to 500 ms */
-    });
\ No newline at end of file
diff --git a/doc/config/scripts/superfish.js b/doc/config/scripts/superfish.js
deleted file mode 100644
index 4018e00..0000000
--- a/doc/config/scripts/superfish.js
+++ /dev/null
@@ -1,121 +0,0 @@
-
-/*
- * Superfish v1.4.8 - jQuery menu widget
- * Copyright (c) 2008 Joel Birch
- *
- * Dual licensed under the MIT and GPL licenses:
- *     http://www.opensource.org/licenses/mit-license.php
- *     http://www.gnu.org/licenses/gpl.html
- *
- * CHANGELOG: http://users.tpg.com.au/j_birch/plugins/superfish/changelog.txt
- */
-
-;(function($){
-    $.fn.superfish = function(op){
-
-        var sf = $.fn.superfish,
-            c = sf.c,
-            $arrow = $(['<span class="',c.arrowClass,'"> &#187;</span>'].join('')),
-            over = function(){
-                var $$ = $(this), menu = getMenu($$);
-                clearTimeout(menu.sfTimer);
-                $$.showSuperfishUl().siblings().hideSuperfishUl();
-            },
-            out = function(){
-                var $$ = $(this), menu = getMenu($$), o = sf.op;
-                clearTimeout(menu.sfTimer);
-                menu.sfTimer=setTimeout(function(){
-                    o.retainPath=($.inArray($$[0],o.$path)>-1);
-                    $$.hideSuperfishUl();
-                    if (o.$path.length && $$.parents(['li.',o.hoverClass].join('')).length<1){over.call(o.$path);}
-                },o.delay);
-            },
-            getMenu = function($menu){
-                var menu = $menu.parents(['ul.',c.menuClass,':first'].join(''))[0];
-                sf.op = sf.o[menu.serial];
-                return menu;
-            },
-            addArrow = function($a){ $a.addClass(c.anchorClass).append($arrow.clone()); };
-
-        return this.each(function() {
-            var s = this.serial = sf.o.length;
-            var o = $.extend({},sf.defaults,op);
-            o.$path = $('li.'+o.pathClass,this).slice(0,o.pathLevels).each(function(){
-                $(this).addClass([o.hoverClass,c.bcClass].join(' '))
-                    .filter('li:has(ul)').removeClass(o.pathClass);
-            });
-            sf.o[s] = sf.op = o;
-
-            $('li:has(ul)',this)[($.fn.hoverIntent && !o.disableHI) ? 'hoverIntent' : 'hover'](over,out).each(function() {
-                if (o.autoArrows) addArrow( $('>a:first-child',this) );
-            })
-            .not('.'+c.bcClass)
-                .hideSuperfishUl();
-
-            var $a = $('a',this);
-            $a.each(function(i){
-                var $li = $a.eq(i).parents('li');
-                $a.eq(i).focus(function(){over.call($li);}).blur(function(){out.call($li);});
-            });
-            o.onInit.call(this);
-
-        }).each(function() {
-            var menuClasses = [c.menuClass];
-            if (sf.op.dropShadows  && !($.browser.msie && $.browser.version < 7)) menuClasses.push(c.shadowClass);
-            $(this).addClass(menuClasses.join(' '));
-        });
-    };
-
-    var sf = $.fn.superfish;
-    sf.o = [];
-    sf.op = {};
-    sf.IE7fix = function(){
-        var o = sf.op;
-        if ($.browser.msie && $.browser.version > 6 && o.dropShadows && o.animation.opacity!=undefined)
-            this.toggleClass(sf.c.shadowClass+'-off');
-        };
-    sf.c = {
-        bcClass     : 'sf-breadcrumb',
-        menuClass   : 'sf-js-enabled',
-        anchorClass : 'sf-with-ul',
-        arrowClass  : 'sf-sub-indicator',
-        shadowClass : 'sf-shadow'
-    };
-    sf.defaults = {
-        hoverClass    : 'sfHover',
-        pathClass    : 'overideThisToUse',
-        pathLevels    : 1,
-        delay        : 800,
-        animation    : {opacity:'show'},
-        speed        : 'normal',
-        autoArrows    : true,
-        dropShadows : true,
-        disableHI    : false,        // true disables hoverIntent detection
-        onInit        : function(){}, // callback functions
-        onBeforeShow: function(){},
-        onShow        : function(){},
-        onHide        : function(){}
-    };
-    $.fn.extend({
-        hideSuperfishUl : function(){
-            var o = sf.op,
-                not = (o.retainPath===true) ? o.$path : '';
-            o.retainPath = false;
-            var $ul = $(['li.',o.hoverClass].join(''),this).add(this).not(not).removeClass(o.hoverClass)
-                    .find('>ul').hide().css('visibility','hidden');
-            o.onHide.call($ul);
-            return this;
-        },
-        showSuperfishUl : function(){
-            var o = sf.op,
-                sh = sf.c.shadowClass+'-off',
-                $ul = this.addClass(o.hoverClass)
-                    .find('>ul:hidden').css('visibility','visible');
-            sf.IE7fix.call($ul);
-            o.onBeforeShow.call($ul);
-            $ul.animate(o.animation,o.speed,function(){ sf.IE7fix.call($ul); o.onShow.call($ul); });
-            return this;
-        }
-    });
-
-})(jQuery);
diff --git a/doc/config/style/narrow.css b/doc/config/style/narrow.css
deleted file mode 100644
index 40be7ea..0000000
--- a/doc/config/style/narrow.css
+++ /dev/null
@@ -1,270 +0,0 @@
-    /* start narrow mode */
-
-    body.narrow
-    {
-      background-image: none;
-    }
-
-    .narrow a {
-      color: #44a51c;
-    }
-
-    .narrow .header, .narrow .header .content, .narrow .footer, .narrow .wrapper {
-      margin: 0 7px;
-      min-width: 300px;
-    }
-
-    .narrow .footer {
-      margin: 0px;
-    }
-
-    .creator .header, .creator .header .content, .creator .footer, .creator .wrapper {
-      margin: 0px;
-      min-width: 300px;
-    }
-    .narrow .header
-    {
-      width: 100%;
-      margin: 0;
-      height: auto;
-      background: #fff url(../images/header_bg.png) repeat-x 0 100%;
-      padding: 10px 0 5px 0;
-      overflow: visible;
-    }
-
-    .narrow .header .content
-    {
-    }
-
-    .narrow .header #nav-logo
-    {
-      display: none;
-    }
-
-    .narrow .header .qtref
-    {
-      width: auto;
-      height: auto;
-      color: #363534;
-      position: static;
-      float: left;
-      margin-left: 25px;
-      font: bold 18px/1 Arial;
-    }
-
-    .narrow .header .qtref a
-    {
-      color: #00732F;
-    }
-
-    .narrow .header .qtref span
-    {
-      background-image: none;
-      text-indent: 0;
-    }
-
-    .narrow .header #nav-topright
-    {
-      display: none;
-    }
-
-    .narrow .header #shortCut
-    {
-      clear: both;
-      font-weight: normal;
-      position: static;
-      float: left;
-      margin: 15px 0 0 25px;
-      overflow: hidden;
-      padding: 0;
-      height: auto;
-    }
-
-    .narrow .header #shortCut ul
-    {
-      float: none;
-      margin: 0;
-      width: auto;
-      font-size: 11px;
-    }
-
-    .narrow .header #shortCut ul li
-    {
-      background-image: none;
-    }
-
-    .narrow .header #shortCut ul .shortCut-topleft-active,
-    .narrow .header #shortCut ul .shortCut-topleft-inactive
-    {
-      background-image: none;
-      height: auto;
-      padding: 0;
-      width: auto;
-    }
-    .narrow .header #shortCut ul li a
-    {
-      color: #00732F;
-    }
-
-    .narrow .wrapper .hd
-    {
-        background: url(../images/bg_ul_blank.png) no-repeat 0 0;
-    }
-
-    .narrow .wrapper .bd
-    {
-        background: url(../images/bg_l_blank.png) repeat-y 0 0;
-    }
-
-    .narrow .wrapper .ft
-    {
-        background: url(../images/bg_ll_blank.png) no-repeat 0 0;
-    }
-
-    .narrow .sidebar
-    {
-        display: none;
-    }
-
-    .narrow .wrap
-    {
-        margin: 0 5px 0 5px;
-    }
-
-    .creator .wrap
-    {
-        margin: 0px;
-        background:#FFFFFF;
-    }
-    .narrow .wrap .toolbar
-    {
-      border-bottom: none;
-    }
-
-    .narrow .wrap .content
-    {
-        padding-top: 15px;
-    }
-    .creator .wrap .content
-    {
-        padding-top: 10px;
-    }
-    .creator .wrap .content .guide
-    {
-        padding-top: 15px;
-    }
-    .narrow .wrap .feedback
-    {
-        display: none;
-    }
-
-    .narrow .wrap .breadcrumb ul li {
-      font-weight: normal;
-    }
-
-    .narrow .wrap .breadcrumb ul li a {
-      color: #44a51c;
-    }
-
-    .narrow .wrap .breadcrumb ul li.last a {
-      color: #363534;
-    }
-
-    #narrowsearch {
-      display: none;
-    }
-
-    .narrow #narrowsearch {
-      display: block;
-      float: right;
-      margin-right: 25px;
-      _position: relative;
-    }
-
-    .narrow #narrowsearch fieldset {
-      _position: absolute;
-      _margin-top: -1px;
-    }
-
-    .narrow #narrowsearch {
-      background: url("http://doc.qt.nokia.com/prototype/html/images/sprites-combined.png") no-repeat scroll -6px -348px transparent;
-      height: 21px;
-      padding: 2px 0 0 5px;
-      width: 167px;
-    }
-
-    .narrow #narrowsearch input {
-      border: none;
-      font: 13px/1.2 Verdana;
-      height: 19px;
-      outline: none;
-      padding: 0;
-      width: 158px;
-      *border: 1px solid #fff;
-      *height: 17px;
-      _height: 18px;
-      /* to be fixed */
-      display: none;
-      /* to be fixed */
-    }
-
-    .narrow .indexbox .indexIcon {
-      display: none;
-    }
-
-    .narrow .indexboxcont .section {
-      width: 64%;
-      padding-left: 0;
-    }
-
-    .narrow .indexboxcont .sectionlist {
-      width: 32.5%;
-    }
-
-    #narrowmenu {
-      display: none;
-      float: right;
-      margin: 15px 40px 0 0;
-      font-size: 11px;
-    }
-
-    .narrow #narrowmenu {
-      display: block;
-    }
-
-    #narrowmenu a {
-      line-height: 1.1;
-      background: url(../images/arrow_down.png) no-repeat 100% 50%;
-      white-space: nowrap;
-      padding: 0 16px 0 5px;
-    }
-
-    #narrowmenu li {
-      margin-left: 20px;
-    }
-
-    #narrowmenu li li {
-      margin: 0 0 5px 0;
-    }
-
-    #narrowmenu li li a {
-      padding: 0;
-      background-image: none;
-    }
-
-    #narrowmenu li,
-    #narrowmenu li ul {
-      background-color: #fff;
-      margin-top:-1px;
-    }
-
-    #narrowmenu li ul {
-      width: auto;
-      padding: 5px;
-    }
-
-    .sf-menu li:hover ul, .sf-menu li.sfHover ul {
-      top: 1.2em;
-    }
-
-    /* end narrow mode */
diff --git a/doc/config/style/offline.css b/doc/config/style/offline.css
deleted file mode 100644
index c3f90c3..0000000
--- a/doc/config/style/offline.css
+++ /dev/null
@@ -1,675 +0,0 @@
-@media screen
-{
-
-/* basic elements */
-    html
-    {
-        color: #000000;
-        background: #FFFFFF;
-    }
-    table
-    {
-        border-collapse: collapse;
-        border-spacing: 0;
-    }
-    fieldset, img
-    {
-        border: 0;
-        max-width:100%;
-    }
-    address, caption, cite, code, dfn, em, strong, th, var, optgroup
-    {
-        font-style: inherit;
-        font-weight: inherit;
-    }
-    del, ins
-    {
-        text-decoration: none;
-    }
-    ol li
-    {
-        list-style: decimal;
-    }
-    ul li
-    {
-        list-style: none;
-    }
-    caption, th
-    {
-        text-align: left;
-    }
-    h1, h2, h3, h4, h5, h6
-    {
-        font-size: 100%;
-    }
-    q:before, q:after
-    {
-        content: '';
-    }
-    abbr, acronym
-    {
-        border: 0;
-        font-variant: normal;
-    }
-    sup, sub
-    {
-        vertical-align: baseline;
-    }
-    tt, .qmlreadonly span, .qmldefault span
-    {
-        word-spacing:0.5em;
-    }
-    legend
-    {
-        color: #000000;
-    }
-    strong
-    {
-        font-weight: bold;
-    }
-    em
-    {
-        font-style: italic;
-    }
-
-    body
-    {
-        margin-left: 0.5em;
-        margin-right: 0.5em;
-        font-family: sans-serif;
-        line-height: normal
-    }
-    a
-    {
-        color: #00732F;
-        text-decoration: none;
-    }
-    hr
-    {
-        background-color: #E6E6E6;
-        border: 1px solid #E6E6E6;
-        height: 1px;
-        width: 100%;
-        text-align: left;
-        margin: 1.5em 0 1.5em 0;
-    }
-
-    pre
-    {
-        border: 1px solid #DDDDDD;
-        -moz-border-radius: 0.7em 0.7em 0.7em 0.7em;
-        -webkit-border-radius: 0.7em 0.7em 0.7em 0.7em;
-        border-radius: 0.7em 0.7em 0.7em 0.7em;
-        margin: 0 1.5em 1em 1em;
-        padding: 1em 1em 1em 1em;
-        overflow-x: auto;
-    }
-    table, pre
-    {
-        -moz-border-radius: 0.7em 0.7em 0.7em 0.7em;
-        -webkit-border-radius: 0.7em 0.7em 0.7em 0.7em;
-        border-radius: 0.7em 0.7em 0.7em 0.7em;
-        background-color: #F6F6F6;
-        border: 1px solid #E6E6E6;
-        border-collapse: separate;
-        margin-bottom: 2.5em;
-    }
-    pre {
-        font-size: 90%;
-        display: block;
-        overflow:hidden;
-    }
-    thead
-    {
-        margin-top: 0.5em;
-        font-weight: bold
-    }
-    th
-    {
-        padding: 0.5em 1.5em 0.5em 1em;
-        background-color: #E1E1E1;
-        border-left: 1px solid #E6E6E6;
-    }
-    td
-    {
-        padding: 0.25em 1.5em 0.25em 1em;
-    }
-
-    td.rightAlign
-    {
-        padding: 0.25em 0.5em 0.25em 1em;
-    }
-    table tr.odd
-    {
-        border-left: 1px solid #E6E6E6;
-        background-color: #F6F6F6;
-        color: #66666E;
-    }
-    table tr.even
-    {
-        border-left: 1px solid #E6E6E6;
-        background-color: #ffffff;
-        color: #66666E;
-    }
-
-    div.float-left
-    {
-        float: left; margin-right: 2em
-    }
-    div.float-right
-    {
-        float: right; margin-left: 2em
-    }
-
-    span.comment
-    {
-        color: #008B00;
-    }
-    span.string, span.char
-    {
-        color: #000084;
-    }
-    span.number
-    {
-        color: #a46200;
-    }
-    span.operator
-    {
-        color: #202020;
-    }
-    span.keyword
-    {
-        color: #840000;
-    }
-    span.name
-    {
-        color: black
-    }
-    span.type
-    {
-        font-weight: bold
-    }
-    span.type a:visited
-    {
-        color: #0F5300;
-    }
-    span.preprocessor
-    {
-        color: #404040
-    }
-/* end basic elements */
-
-/* font style elements */
-    .heading
-    {
-        font-weight: bold;
-        font-size: 125%;
-    }
-    .subtitle
-    {
-        font-size: 110%
-    }
-    .small-subtitle
-    {
-        font-size: 100%
-    }
-    .red
-    {
-        color:red;
-    }
-/* end font style elements */
-
-/* global settings*/
-    .header, .footer
-    {
-        display: block;
-        clear: both;
-        overflow: hidden;
-    }
-/* end global settings*/
-
-/* header elements */
-    .header .qtref
-    {
-        color: #00732F;
-        font-weight: bold;
-        font-size: 130%;
-    }
-
-    .header .content
-    {
-        margin-bottom: 0.5em
-    }
-
-    .header .breadcrumb
-    {
-        font-size: 90%;
-        padding: 0.5em 0 0.5em 1em;
-        margin: 0;
-        background-color: #fafafa;
-        height: 1.35em;
-        border-bottom: 1px solid #d1d1d1;
-    }
-
-    .header .breadcrumb ul
-    {
-        margin: 0;
-        padding: 0;
-    }
-
-    .header .content
-    {
-        word-wrap: break-word;
-    }
-
-    .header .breadcrumb ul li
-    {
-        float: left;
-        background: url(../images/breadcrumb.png) no-repeat 0 3px;
-        padding-left: 1.5em;
-        margin-left: 1.5em;
-    }
-
-    .header .breadcrumb ul li.last
-    {
-        font-weight: normal;
-    }
-
-    .header .breadcrumb ul li a
-    {
-        color: #00732F;
-    }
-
-    .header .breadcrumb ul li.first
-    {
-        background-image: none;
-        padding-left: 0;
-        margin-left: 0;
-    }
-
-    .header .content ol li {
-        background: none;
-        margin-bottom: 1.0em;
-        margin-left: 1.2em;
-        padding-left: 0
-    }
-
-    .header .content li
-    {
-        background: url(../images/bullet_sq.png) no-repeat 0 5px;
-        margin-bottom: 1em;
-        padding-left: 1.2em;
-    }
-
-/* end header elements */
-
-/* content elements */
-    .content h1
-    {
-        font-weight: bold;
-        font-size: 130%
-    }
-
-    .content h2
-    {
-        font-weight: bold;
-        font-size: 120%;
-        width: 100%;
-    }
-    .content h3
-    {
-        font-weight: bold;
-        font-size: 110%;
-        width: 100%;
-    }
-    .content table p
-    {
-        margin: 0
-    }
-    .content ul
-    {
-        padding-left: 2.5em;
-    }
-    .content li
-    {
-        padding-top: 0.25em;
-        padding-bottom: 0.25em;
-    }
-    .content ul img {
-        vertical-align: middle;
-    }
-
-    .content a:visited
-    {
-        color: #4c0033;
-        text-decoration: none;
-    }
-
-    .content a:visited:hover
-    {
-        color: #4c0033;
-        text-decoration: underline;
-    }
-
-    a:hover
-    {
-        color: #4c0033;
-        text-decoration: underline;
-    }
-    descr p a
-    {
-        text-decoration: underline;
-    }
-
-    .descr p a:visited
-    {
-        text-decoration: underline;
-    }
-
-    .alphaChar{
-        width:95%;
-        background-color:#F6F6F6;
-        border:1px solid #E6E6E6;
-        -moz-border-radius: 7px 7px 7px 7px;
-        border-radius: 7px 7px 7px 7px;
-        -webkit-border-radius: 7px 7px 7px 7px;
-        font-size:12pt;
-        padding-left:10px;
-        margin-top:10px;
-        margin-bottom:10px;
-    }
-    .flowList{
-        /*vertical-align:top;*/
-        /*margin:20px auto;*/
-
-        column-count:3;
-        -webkit-column-count:3;
-        -moz-column-count:3;
-/*
-        column-width:100%;
-        -webkit-column-width:200px;
-        -col-column-width:200px;
-*/
-        column-gap:41px;
-        -webkit-column-gap:41px;
-        -moz-column-gap:41px;
-
-        column-rule: 1px dashed #ccc;
-        -webkit-column-rule: 1px dashed #ccc;
-        -moz-column-rule: 1px dashed #ccc;
-    }
-
-    .flowList dl{
-    }
-    .flowList dd{
-        /*display:inline-block;*/
-        margin-left:10px;
-        min-width:250px;
-        line-height: 1.5;
-        min-width:100%;
-        min-height:15px;
-    }
-
-    .flowList dd a{
-    }
-
-    .content .flowList p{
-        padding:0px;
-    }
-
-    .content .alignedsummary
-    {
-        margin: 15px;
-    }
-
-
-    .qmltype
-    {
-        text-align: center;
-        font-size: 120%;
-    }
-    .qmlreadonly
-    {
-        padding-left: 5px;
-        float: right;
-        color: #254117;
-    }
-
-    .qmldefault
-    {
-        padding-left: 5px;
-        float: right;
-        color: red;
-    }
-
-    .qmldoc
-    {
-    }
-
-    .generic .alphaChar{
-        margin-top:5px;
-    }
-
-    .generic .odd .alphaChar{
-        background-color: #F6F6F6;
-    }
-
-    .generic .even .alphaChar{
-        background-color: #FFFFFF;
-    }
-
-    .memItemRight{
-        padding: 0.25em 1.5em 0.25em 0;
-    }
-    .highlightedCode
-    {
-        margin: 1.0em;
-    }
-    .annotated td {
-        padding: 0.25em 0.5em 0.25em 0.5em;
-    }
-
-    .toc
-    {
-        font-size: 80%
-    }
-
-    .header .content .toc ul
-    {
-        padding-left: 0px;
-    }
-
-    .content .toc h3 {
-        border-bottom: 0px;
-        margin-top: 0px;
-    }
-
-    .content .toc h3 a:hover {
-        color: #00732F;
-        text-decoration: none;
-    }
-
-    .content .toc .level2
-    {
-        margin-left: 1.5em;
-    }
-
-    .content .toc .level3
-    {
-        margin-left: 3.0em;
-    }
-
-    .content ul li
-    {
-        background: url(../images/bullet_sq.png) no-repeat 0 0.7em;
-        padding-left: 1em
-    }
-
-    .content .toc li
-    {
-        background: url(../images/bullet_dn.png) no-repeat 0 5px;
-        padding-left: 1em
-    }
-
-    .relpage
-    {
-        -moz-border-radius: 7px 7px 7px 7px;
-        -webkit-border-radius: 7px 7px 7px 7px;
-        border-radius: 7px 7px 7px 7px;
-        border: 1px solid #DDDDDD;
-        padding: 25px 25px;
-        clear: both;
-    }
-    .relpage ul
-    {
-        float: none;
-        padding: 1.5em;
-    }
-
-    h3.fn, span.fn
-    {
-        -moz-border-radius:7px 7px 7px 7px;
-        -webkit-border-radius:7px 7px 7px 7px;
-        border-radius:7px 7px 7px 7px;
-        background-color: #F6F6F6;
-        border-width: 1px;
-        border-style: solid;
-        border-color: #E6E6E6;
-        font-weight: bold;
-        word-spacing:3px;
-        padding:3px 5px;
-    }
-
-    .functionIndex {
-        font-size:12pt;
-        word-spacing:10px;
-        margin-bottom:10px;
-        background-color: #F6F6F6;
-        border-width: 1px;
-        border-style: solid;
-        border-color: #E6E6E6;
-        -moz-border-radius: 7px 7px 7px 7px;
-        -webkit-border-radius: 7px 7px 7px 7px;
-        border-radius: 7px 7px 7px 7px;
-        width:100%;
-    }
-
-    .centerAlign
-    {
-        text-align:center;
-    }
-
-    .rightAlign
-    {
-        text-align:right;
-    }
-
-    .leftAlign
-    {
-        text-align:left;
-    }
-
-    .topAlign{
-        vertical-align:top
-    }
-
-    .functionIndex a{
-        display:inline-block;
-    }
-
-/* end content elements */
-/* footer elements */
-
-    .footer
-    {
-        color: #393735;
-        font-size: 0.75em;
-        text-align: center;
-        padding-top: 1.5em;
-        padding-bottom: 1em;
-        background-color: #E6E7E8;
-        margin: 0;
-    }
-    .footer p
-    {
-        margin: 0.25em
-    }
-    .small
-    {
-        font-size: 0.5em;
-    }
-/* end footer elements */
-
-    .item {
-      float: left;
-      position: relative;
-      width: 100%;
-      overflow: hidden;
-    }
-
-
-    .item .primary {
-      margin-right: 220px;
-      position: relative;
-    }
-
-    .item hr {
-      margin-left: -220px;
-    }
-
-    .item .secondary {
-      float: right;
-      width: 200px;
-      position: relative;
-    }
-
-    .item .cols {
-      clear: both;
-      display: block;
-    }
-
-    .item .cols .col {
-      float: left;
-      margin-left: 1.5%;
-    }
-
-    .item .cols .col.first {
-      margin-left: 0;
-    }
-
-    .item .cols.two .col {
-      width: 45%;
-    }
-
-    .item .box {
-      margin: 0 0 10px 0;
-    }
-
-    .item .box h3 {
-      margin: 0 0 10px 0;
-    }
-
-    .cols.unclear {
-        clear:none;
-    }
-}
-
-/* end of screen media */
-
-/* start of print media */
-
-@media print
-{
-    input, textarea, .header, .footer, .toolbar, .feedback, .wrapper .hd, .wrapper .bd .sidebar, .wrapper .ft, #feedbackBox, #blurpage, .toc, .breadcrumb, .toolbar, .floatingResult
-    {
-        display: none;
-        background: none;
-    }
-    .content
-    {
-        background: none;
-        display: block;
-        width: 100%; margin: 0; float: none;
-    }
-}
-/* end of print media */
diff --git a/doc/config/style/qtmultimedia.css b/doc/config/style/qtmultimedia.css
deleted file mode 100644
index 282f596..0000000
--- a/doc/config/style/qtmultimedia.css
+++ /dev/null
@@ -1,160 +0,0 @@
-a:link, a:visited {
-    color: #00732F;
-    text-decoration: none;
-    font-weight: bold;
-}
-
-body {
-    font: normal 400 14px/1.2 Arial;
-    margin-top: 85px;
-}
-
-h1 {
-    margin: 0;
-}
-
-h2 {
-    font: 500 20px/1.2 Arial;
-}
-
-h3.fn, span.fn {
-    -moz-border-radius: 7px 7px 7px 7px;
-    -webkit-border-radius: 7px 7px 7px 7px;
-    border-radius: 7px 7px 7px 7px;
-    background-color: #F6F6F6;
-    border-width: 1px;
-    border-style: solid;
-    border-color: #E6E6E6;
-    word-spacing: 3px;
-    padding: 3px 5px;
-}
-
-table, pre {
-    -moz-border-radius: 7px 7px 7px 7px;
-    -webkit-border-radius: 7px 7px 7px 7px;
-    border-radius: 7px 7px 7px 7px;
-    background-color: #F6F6F6;
-    border: 1px solid #E6E6E6;
-    border-collapse: separate;
-    font-size: 12px;
-    line-height: 1.2;
-    margin-bottom: 25px;
-    margin-left: 15px;
-}
-
-table td {
-    padding: 3px 15px 3px 20px;
-}
-
-table tr.even {
-    background-color: white;
-    color: #66666E;
-}
-
-table tr.odd {
-    background-color: #F6F6F6;
-    color: #66666E;
-}
-
-li {
-    margin-bottom: 10px;
-    padding-left: 12px;
-}
-
-.cpp {
-    display: block;
-    margin: 10;
-    overflow: hidden;
-    overflow-x: hidden;
-    overflow-y: hidden;
-    padding: 20px 0 20px 0;
-}
-
-.footer {
-    margin-top: 50px;
-}
-
-.memItemLeft {
-    padding-right: 3px;
-}
-
-.memItemRight {
-    padding: 3px 15px 3px 0;
-}
-
-.qml {
-    display: block;
-    margin: 10;
-    overflow: hidden;
-    overflow-x: hidden;
-    overflow-y: hidden;
-    padding: 20px 0 20px 0;
-}
-
-.qmldefault {
-    padding-left: 5px;
-    float: right;
-    color: red;
-}
-
-.qmlreadonly {
-    padding-left: 5px;
-    float: right;
-    color: #254117;
-}
-
-.rightAlign {
-    padding: 3px 5px 3px 10px;
-    text-align: right;
-}
-
-.title {
-    background-color: white;
-    color: #44A51C;
-    font-family: Verdana;
-    font-size: 35px;
-    font-weight: normal;
-    left: 0;
-    padding-bottom: 5px;
-    padding-left: 16px;
-    padding-top: 20px;
-    position: absolute;
-    right: 0;
-    top: 0;
-}
-
-.toc {
-    float: right;
-    -moz-border-radius: 7px 7px 7px 7px;
-    -webkit-border-radius: 7px 7px 7px 7px;
-    border-radius: 7px 7px 7px 7px;
-    background-color: #F6F6F6;
-    border: 1px solid #DDD;
-    margin: 0 20px 10px 10px;
-    padding: 20px 15px 20px 20px;
-    height: auto;
-    width: 200px;
-}
-/* offset the child sections */
-.toc .level2 {
-    margin-left: 15px;
-}
-.toc .level3 {
-    margin-left: 30px;
-}
-.toc .level4 {
-    margin-left: 40px;
-}
-
-/* modify the TOC layouts */
-div.toc ul {
-    padding-left: 20px;
-}
-div.toc li {
-    padding-left: 4px;
-}
-/* Remove the border around images*/
-a img
-{
-    border:none;
-}
diff --git a/doc/config/style/style.css b/doc/config/style/style.css
deleted file mode 100644
index 128eb27..0000000
--- a/doc/config/style/style.css
+++ /dev/null
@@ -1,1627 +0,0 @@
-@media screen
-{
-
-/* basic elements */
-    html
-    {
-        color: #000000;
-        background: #FFFFFF;
-    }
-    body, div, dl, dt, dd, ul, ol, li, h1, h2, h3, h4, h5, h6, pre, code, form, fieldset, legend, input, button, textarea, p, blockquote, th, td
-    {
-        margin: 0;
-        padding: 0;
-    }
-    table
-    {
-        border-collapse: collapse;
-        border-spacing: 0;
-    }
-    fieldset, img
-    {
-        border: 0;
-        max-width:100%;
-    }
-    address, caption, cite, code, dfn, em, strong, th, var, optgroup
-    {
-        font-style: inherit;
-        font-weight: inherit;
-    }
-    del, ins
-    {
-        text-decoration: none;
-    }
-    li
-    {
-        list-style: none;
-    }
-    ol li
-    {
-        list-style: decimal;
-    }
-    caption, th
-    {
-        text-align: left;
-    }
-    h1, h2, h3, h4, h5, h6
-    {
-        font-size: 100%;
-    }
-    q:before, q:after
-    {
-        content: '';
-    }
-    abbr, acronym
-    {
-        border: 0;
-        font-variant: normal;
-    }
-    sup, sub
-    {
-        vertical-align: baseline;
-    }
-    tt, .qmlreadonly span, .qmldefault span
-    {
-        word-spacing:5px;
-    }
-    legend
-    {
-        color: #000000;
-    }
-    input, button, textarea, select, optgroup, option
-    {
-        font-family: inherit;
-        font-size: inherit;
-        font-style: inherit;
-        font-weight: inherit;
-    }
-    input, button, textarea, select
-    {
-        font-size: 100%;
-    }
-    strong
-    {
-        font-weight: bold;
-    }
-    em
-    {
-        font-style: italic;
-    }
-
-    /* adding Qt theme */
-    html
-    {
-      /*  background-color: #e5e5e5;*/
-    }
-    body
-    {
-        background: #e6e7e8 url(../images/page_bg.png) repeat-x 0 0;
-        font: normal 13px/1.2 Verdana;
-        color: #363534;
-    }
-    a
-    {
-        color: #00732f;
-        text-decoration: none;
-    }
-    hr
-    {
-        background-color: #E6E6E6;
-        border: 1px solid #E6E6E6;
-        height: 1px;
-        width: 100%;
-        text-align: left;
-        margin: 15px 0px 15px 0px;
-    }
-
-    pre
-    {
-        border: 1px solid #DDDDDD;
-        -moz-border-radius: 7px 7px 7px 7px;
-        -webkit-border-radius: 7px 7px 7px 7px;
-        border-radius: 7px 7px 7px 7px;
-        margin: 0 20px 10px 10px;
-        padding: 20px 15px 20px 20px;
-        overflow-x: auto;
-    }
-    table, pre
-    {
-        -moz-border-radius: 7px 7px 7px 7px;
-        -webkit-border-radius: 7px 7px 7px 7px;
-        border-radius: 7px 7px 7px 7px;
-        background-color: #F6F6F6;
-        border: 1px solid #E6E6E6;
-        border-collapse: separate;
-        font-size: 11px;
-        margin-bottom: 25px;
-    }
-    pre.highlightedCode {
-        display: block;
-        overflow:hidden;
-    }
-    thead
-    {
-        margin-top: 5px;
-        font:600 12px/1.2 Arial;
-    }
-    th
-    {
-        padding: 5px 15px 5px 15px;
-        background-color: #E1E1E1;
-        border-left: 1px solid #E6E6E6;
-    }
-    td
-    {
-        padding: 3px 15px 3px 15px;
-    }
-    tr.odd td:hover,  tr.even td:hover    {}
-
-    td.rightAlign
-    {
-        padding: 3px 5px 3px 10px;
-    }
-    table tr.odd
-    {
-        border-left: 1px solid #E6E6E6;
-        background-color: #F6F6F6;
-        color: #66666E;
-    }
-    table tr.even
-    {
-        border-left: 1px solid #E6E6E6;
-        background-color: #ffffff;
-        color: #66666E;
-    }
-    table tr.odd td:hover, table tr.even td:hover
-    {
-     /*   background-color: #E6E6E6;*/ /* disabled until further notice */
-    }
-
-    div.float-left
-    {
-        float: left; margin-right: 2em
-    }
-    div.float-right
-    {
-        float: right; margin-left: 2em
-    }
-
-    span.comment
-    {
-        color: #008B00;
-        font-style: italic
-    }
-    span.string, span.char
-    {
-        color: #000084;
-    }
-    span.number
-    {
-        color: #a46200;
-    }
-    span.operator
-    {
-        color: #202020;
-    }
-    span.keyword
-    {
-        color: #840000;
-    }
-    span.name
-    {
-        color: black
-    }
-    span.type
-    {
-        font-weight: bold
-    }
-    span.type a:visited
-    {
-        color: #0F5300;
-    }
-    span.preprocessor
-    {
-        color: #404040
-    }
-/* end basic elements */
-
-/* font style elements */
-    .heading
-    {
-        font: normal bold 16px/1.2 Arial;
-        padding-bottom: 15px;
-    }
-    .subtitle
-    {
-        font-size: 13px;
-    }
-    .small-subtitle
-    {
-        font-size: 13px;
-    }
-/* end font style elements */
-
-/* global settings*/
-    .header, .footer, .wrapper
-    {
-        min-width: 600px;
-        max-width: 1500px;
-        margin: 0 30px;
-    }
-    .header, .footer
-    {
-        display: block;
-        clear: both;
-        overflow: hidden;
-    }
-    .header:after, .footer:after, .breadcrumb:after, .wrap .content:after, .group:after
-    {
-        content: ".";
-        display: block;
-        height: 0;
-        clear: both;
-        visibility: hidden;
-    }
-
-/* end global settings*/
-/* header elements */
-    .header
-    {
-        height: 115px;
-        position: relative;
-    }
-    .header .icon
-    {
-        position: absolute;
-        top: 13px;
-        left: 0;
-    }
-    .header .qtref
-    {
-        position: absolute;
-        top: 28px;
-        left: 88px;
-        width: 302px;
-        height: 22px;
-    }
-    .header .qtref span
-    {
-        display: block;
-        width: 420px;
-        height: 30px;
-        text-indent: -999em;
-        background: url(../images/sprites-combined.png) no-repeat -80px -235px;
-    }
-    .content a:visited
-    {
-        color: #4c0033;
-        text-decoration: none;
-    }
-     .content a:visited:hover
-    {
-        color: #4c0033;
-        text-decoration: underline;
-    }
-
-    #nav-topright
-    {
-        height: 70px;
-    }
-
-    #nav-topright ul
-    {
-        list-style-type: none;
-        float: right;
-        width: 370px;
-        margin-top: 11px;
-    }
-
-    #nav-topright li
-    {
-        display: inline-block;
-        margin-right: 20px;
-        float: left;
-    }
-
-    #nav-topright li.nav-topright-last
-    {
-        margin-right: 0;
-    }
-
-    #nav-topright li a
-    {
-        background: transparent url(../images/sprites-combined.png) no-repeat;
-        height: 18px;
-        display: block;
-        overflow: hidden;
-        text-indent: -9999px;
-    }
-
-    #nav-topright li.nav-topright-home a
-    {
-        width: 65px;
-        background-position: -2px -91px;
-    }
-
-    #nav-topright li.nav-topright-home a:hover
-    {
-        background-position: -2px -117px;
-    }
-
-
-    #nav-topright li.nav-topright-dev a
-    {
-        width: 30px;
-        background-position: -76px -91px;
-    }
-
-    #nav-topright li.nav-topright-dev a:hover
-    {
-        background-position: -76px -117px;
-    }
-
-
-    #nav-topright li.nav-topright-labs a
-    {
-        width: 40px;
-        background-position: -114px -91px;
-    }
-
-    #nav-topright li.nav-topright-labs a:hover
-    {
-        background-position: -114px -117px;
-    }
-
-    #nav-topright li.nav-topright-doc a
-    {
-        width: 32px;
-        background-position: -162px -91px;
-    }
-
-    #nav-topright li.nav-topright-doc a:hover, #nav-topright li.nav-topright-doc-active a
-    {
-        background-position: -162px -117px;
-    }
-
-    #nav-topright li.nav-topright-blog a
-    {
-        width: 40px;
-        background-position: -203px -91px;
-    }
-
-    #nav-topright li.nav-topright-blog a:hover, #nav-topright li.nav-topright-blog-active a
-    {
-        background-position: -203px -117px;
-    }
-
-    #nav-topright li.nav-topright-shop a
-    {
-        width: 40px;
-        background-position: -252px -91px;
-    }
-
-    #nav-topright li.nav-topright-shop a:hover, #nav-topright li.nav-topright-shop-active a
-    {
-        background-position: -252px -117px;
-    }
-
-    #nav-logo
-    {
-        background: transparent url(../images/sprites-combined.png ) no-repeat 0 -225px;
-        left: -3px;
-        position: absolute;
-        width: 75px;
-        height: 75px;
-        top: 13px;
-    }
-    #nav-logo a
-    {
-        width: 75px;
-        height: 75px;
-        display: block;
-        text-indent: -9999px;
-        overflow: hidden;
-    }
-
-
-    .shortCut-topleft-inactive
-    {
-        padding-left: 3px;
-        padding-right: 3px;
-        background: transparent url( ../images/sprites-combined.png) no-repeat 0px -58px;
-        height: 20px;
-    }
-    .shortCut-topleft-inactive span
-    {
-        font-variant: normal;
-    }
-        .shortCut-topleft-inactive span a:hover,     .shortCut-topleft-active a:hover
-    {
-        text-decoration:none;
-    }
-    #shortCut
-    {
-        padding-top: 10px;
-        font-weight: bolder;
-        color: #b0adab;
-    }
-    #shortCut ul
-    {
-        list-style-type: none;
-        float: left;
-        width: 347px;
-        margin-left: 100px;
-    }
-    #shortCut li
-    {
-        display: inline-block;
-        margin-right: 25px;
-        float: left;
-        white-space: nowrap;
-    }
-    #shortCut li a
-    {
-        color: #b0adab;
-    }
-    #shortCut li a:hover
-    {
-        color: #44a51c;
-    }
-
-
-
-/* end header elements */
-/* content and sidebar elements */
-    .wrapper
-    {
-        background: url(../images/bg_r.png) repeat-y 100% 0;
-    }
-    .wrapper .hd
-    {
-        padding-left: 216px;
-        height: 15px;
-        background: url(../images/page.png) no-repeat 0 0;
-        overflow: hidden;
-    }
-
-
-
-
-    .wrapper .hd span
-    {
-        height: 15px;
-        display: block;
-        overflow: hidden;
-        background: url(../images/page.png) no-repeat 100% -30px;
-    }
-    .wrapper .bd
-    {
-        background: url(../images/bg_l.png) repeat-y 0 0;
-        position: relative;
-    }
-
-
-
-
-    .wrapper .ft
-    {
-        padding-left: 216px;
-        height: 15px;
-        background: url(../images/page.png) no-repeat 0 -75px;
-        overflow: hidden;
-    }
-
-
-
-
-    .wrapper .ft span
-    {
-        height: 15px;
-        display: block;
-        background: url(../images/page.png) no-repeat 100% -60px;
-        overflow: hidden;
-    }
-    .navTop{
-    float:right;
-    display:block;
-    padding-right:15px;
-
-
-    }
-
-
-
-/* end content and sidebar elements */
-/* sidebar elements */
-    .sidebar
-    {
-        float: left;
-        margin-left: 5px;
-        width: 200px;
-        font-size: 11px;
-    }
-
-
-
-
-
-
-    .sidebar .searchlabel
-    {
-        padding: 0 0 2px 17px;
-        font: normal bold 11px/1.2 Verdana;
-    }
-
-    .sidebar .search
-    {
-        padding: 0 15px 0 16px;
-    }
-
-    .sidebar .search form
-    {
-        background: url(../images/sprites-combined.png) no-repeat -6px -348px;
-        height:21px;
-        padding:2px 0 0 5px;
-        width:167px;
-    }
-
-    .sidebar .search form input#pageType
-    {
-        width: 158px;
-        height: 19px;
-        padding: 0;
-        border: 0px;
-        outline: none;
-        font: 13px/1.2 Verdana;
-    }
-
-    .sidebar .box
-    {
-        padding: 17px 15px 5px 16px;
-    }
-
-    .sidebar .box .first
-    {
-        background-image: none;
-    }
-
-    .sidebar .box h2
-    {
-        font: bold 16px/1.2 Arial;
-        padding: 0;
-    }
-    .sidebar .box h2 span
-    {
-        overflow: hidden;
-        display: inline-block;
-    }
-    .sidebar .box#lookup h2
-    {
-        background-image: none;
-    }
-    .sidebar #lookup.box h2 span
-    {
-    }
-    .sidebar .box#topics h2
-    {
-        background-image: none;
-    }
-    .sidebar #topics.box h2 span
-    {
-    }
-    .sidebar .box#examples h2
-    {
-        background-image: none;
-    }
-    .sidebar #examples.box h2 span
-    {
-    }
-
-    .sidebar .box .list
-    {
-        display: block;
-        max-height:200px;
-        min-height:120px;
-        overflow-y:auto;
-        overflow-x:none;
-    }
-    .list li a:hover
-    {
-        text-decoration: underline;
-    }
-    .sidebar .box ul
-    {
-    padding-bottom:5px;
-    padding-left:10px;
-    padding-top:5px;
-    }
-    .sidebar .box ul li
-    {
-        padding-left: 12px;
-        background: url(../images/bullet_gt.png) no-repeat 0 5px;
-        margin-bottom: 5px;
-    }
-    .sidebar .bottombar
-    {
-        background: url(../images/box_bg.png) repeat-x 0 bottom;
-    }
-     .sidebar .box ul li.noMatch
-    {
-        background: none;
-        color:#FF2A00;
-        font-style:italic;
-    }
-     .sidebar .box ul li.hit
-    {
-        background: none;
-        color:#AAD2F0;
-        font-style:italic;
-    }
-    .sidebar .search form input.loading
-    {
-            background:url("../images/spinner.gif") no-repeat scroll right center transparent;
-    }
-
-.floatingResult{
-    z-index:1;
-    position:relative;
-    padding-top:0px;
-    background-color:white;
-    border:solid 1px black;
-    height:250px;
-    width:600px;
-    overflow-x:hidden;
-    overflow-y:auto;
-}
-
-    .floatingResult:hover{
-        display:block;
-    }
-    .floatingResult:hover{
-    }
-
-/* end sidebar elements */
-/* content elements */
-    .wrap
-    {
-        margin: 0 5px 0 208px;
-        overflow: visible;
-    }
-
-
-
-
-    .wrap .toolbar
-    {
-        background-color: #fafafa;
-        border-bottom: 1px solid #d1d1d1;
-        height: 20px;
-        position: relative;
-    }
-    .wrap .toolbar .toolblock
-    {
-        position: absolute;
-    }
-    .wrap .toolbar .breadcrumb
-    {
-        font-size: 11px;
-        line-height: 1.2;
-        padding: 0 0 10px 21px;
-        height: 10px;
-    }
-    .wrap .toolbar .toolbuttons
-    {
-        padding: 0 0 10px 21px;
-        right: 5px;
-        vertical-align: middle;
-        overflow: hidden;
-    }
-    .wrap .toolbar .toolbuttons .active
-    {
-        color: #00732F;
-    }
-    .wrap .toolbar .toolbuttons ul
-    {
-        float: right;
-    }
-    .wrap .toolbar .toolbuttons li
-    {
-        float: left;
-        text-indent: -10px;
-        margin-top: -5px;
-        margin-right: 15px;
-        font-weight: bold;
-        color: #B0ADAB;
-    }
-
-    .toolbuttons #print
-    {
-        border-left: 1px solid #c5c4c4;
-        margin-top: 0;
-        padding-left: 7px;
-        text-indent: 0;
-    }
-    .toolbuttons #print a
-    {
-        width: 16px;
-        height: 16px;
-    }
-
-    .toolbuttons #print a span
-    {
-        width: 16px;
-        height: 16px;
-        text-indent: -999em;
-        display: block;
-        overflow: hidden;
-        background: url(../images/sprites-combined.png) no-repeat -137px -311px;
-    }
-
-    .toolbuttons #smallA
-    {
-        font-size: 10pt;
-    }
-    .toolbuttons #medA
-    {
-        font-size: 12pt;
-    }
-    .toolbuttons #bigA
-    {
-        font-size: 14pt;
-        margin-right: 7px;
-    }
-
-    #smallA:hover, #medA:hover, #bigA:hover
-    {
-        color: #00732F;
-    }
-
-
-    .wrap .content
-    {
-        padding: 30px;
-        word-wrap:break-word;
-    }
-
-    .wrap .breadcrumb ul
-    {
-    }
-    .wrap .breadcrumb ul li
-    {
-        float: left;
-        background: url(../images/breadcrumb.png) no-repeat 0 3px;
-        padding-left: 15px;
-        margin-left: 15px;
-        font-weight: bold;
-    }
-    .wrap .breadcrumb ul li.last
-    {
-        font-weight: normal;
-    }
-    .wrap .breadcrumb ul li a
-    {
-        color: #363534;
-    }
-    .wrap .breadcrumb ul li.first
-    {
-        background-image: none;
-        padding-left: 0;
-        margin-left: 0;
-    }
-
-
-
-
-    .wrap .content ol li {
-    background:none;
-    font:normal 10pt/1.2 Verdana;
-
-    margin-bottom:10px;
-    margin-left:12px;
-    /*list-style-type:disc;*/
-    }
-
-    .wrap .content ol li
-    {
-    background:none;
-    margin-bottom: 10px;
-    padding-left:0px;
-    margin-left:52px;
-    }
-
-    .wrap .content li
-    {
-        background: url(../images/bullet_sq.png) no-repeat 0 5px;
-        font: normal 400 10pt/1.2 Verdana;
-        margin-bottom: 10px;
-        padding-left:12px;
-    }
-
-    .content li:hover  {}
-
-    .wrap .content h1
-    {
-        font: bold 18px/1.2 Arial;
-    }
-    .wrap .content h2
-    {
-    border-bottom:1px solid #DDDDDD;
-    font:600 16px/1.2 Arial;
-    margin-top:15px;
-    width:100%;
-    }
-    .wrap .content h3
-    {
-        font: bold 14px/1.2 Arial;
-        font:600 16px/1.2 Arial;
-        margin-top:15px;
-        width:100%;
-    }
-    .wrap .content p
-    {
-        line-height: 20px;
-        padding: 5px;
-    }
-    .wrap .content table p
-    {
-        line-height: 20px;
-      /*  padding: 0px;*/
-    }
-    .wrap .content ul
-    {
-        padding-left: 25px;
-        padding-top: 10px;
-    }
-    .wrap .content ul img {
-        vertical-align:middle;
-    }
-    a:hover
-    {
-        color: #4c0033;
-        text-decoration: underline;
-    }
-    .feedback
-    {
-        float: none;
-        position: absolute;
-        right: 15px;
-        bottom: 10px;
-        font: normal 8px/1 Verdana;
-        color: #B0ADAB;
-    }
-    .feedback:hover
-    {
-        float: right;
-        font: normal 8px/1 Verdana;
-        color: #00732F;
-        text-decoration: underline;
-    }
-    .alphaChar{
-    width:95%;
-    background-color:#F6F6F6;
-    border:1px solid #E6E6E6;
-    -moz-border-radius: 7px 7px 7px 7px;
-    border-radius: 7px 7px 7px 7px;
-    -webkit-border-radius: 7px 7px 7px 7px;
-    font-size:12pt;
-    padding-left:10px;
-    margin-top:10px;
-    margin-bottom:10px;
-    }
-    .flowList{
-    /*vertical-align:top;*/
-    /*margin:20px auto;*/
-
-    column-count:3;
-    -webkit-column-count:3;
-    -moz-column-count:3;
-/*
-    column-width:100%;
-    -webkit-column-width:200px;
-    -col-column-width:200px;
-*/
-    column-gap:41px;
-    -webkit-column-gap:41px;
-    -moz-column-gap:41px;
-
-    column-rule: 1px dashed #ccc;
-    -webkit-column-rule: 1px dashed #ccc;
-    -moz-column-rule: 1px dashed #ccc;
-    }
-
-    .flowList dl{
-    }
-    .flowList dd{
-    /*display:inline-block;*/
-    margin-left:10px;
-    min-width:250px;
-    line-height: 1.2;
-    min-width:100%;
-
-    }
-
-    .flowList dd a{
-    }
-
-    .wrap .content .flowList p{
-    padding:0px;
-    }
-
-    .content .alignedsummary
-    {
-        margin: 15px;
-    }
-
-
-    .qmltype
-    {
-        text-align: center;
-        font-size: 160%;
-    }
-    .qmlreadonly
-    {
-        padding-left: 5px;
-        float: right;
-        color: #254117;
-    }
-
-    .qmldefault
-    {
-        padding-left: 5px;
-        float: right;
-        color: red;
-    }
-
-    .qmldoc
-    {
-    }
-
-    *.qmlitem p
-    {
-    }
-    #feedbackBox
-    {
-        display: none;
-        -moz-border-radius: 7px 7px 7px 7px;
-        -webkit-border-radius: 7px 7px 7px 7px;
-        border-radius: 7px 7px 7px 7px;
-        border: 1px solid #DDDDDD;
-        position: fixed;
-        top: 100px;
-        left: 33%;
-        height: 230px;
-        width: 400px;
-        padding: 5px;
-        background-color: #e6e7e8;
-        z-index: 4;
-    }
-    #feedcloseX
-    {
-        display: inline;
-        padding: 5px 5px 0 0;
-        margin-bottom: 3px;
-        color: #363534;
-        font-weight: bold;
-        float: right;
-        text-decoration: none;
-    }
-
-    #feedbox
-    {
-        display: inline;
-        width: 370px;
-        height: 120px;
-        margin: 0px 25px 10px 15px;
-    }
-    #noteHead
-    {
-        font-weight:bold;
-        padding:10px 10px 10px 20px;
-    }
-    #feedsubmit
-    {
-        display: inline;
-        float: right;
-        margin: 4px 32px 0 0;
-    }
-
-    .note
-    {
-        font-size:7pt;
-        padding-bottom:3px;
-        padding-left:20px;
-    }
-
-    #blurpage
-    {
-        display: none;
-        position: fixed;
-        float: none;
-        top: 0px;
-        left: 0px;
-        right: 0px;
-        bottom: 0px;
-        background: transparent url(../images/feedbackground.png) 0 0;
-        z-index: 3;
-    }
-    .toc
-    {
-        float: right;
-        -moz-border-radius: 7px 7px 7px 7px;
-        -webkit-border-radius: 7px 7px 7px 7px;
-        border-radius: 7px 7px 7px 7px;
-        background-color: #F6F6F6;
-        border: 1px solid #DDDDDD;
-        margin: 0 20px 10px 10px;
-        padding: 20px 15px 20px 20px;
-        height: auto;
-        width: 200px;
-    }
-
-    .toc h3, .generic a
-    {
-        font: bold 12px/1.2 Arial;
-    }
-
-    .generic{
-    }
-    .generic td{
-    /*    padding:5px;*/
-    }
-    .generic .alphaChar{
-    margin-top:5px;
-    }
-
-    .generic .odd .alphaChar{
-        background-color: #F6F6F6;
-    }
-
-    .generic .even .alphaChar{
-        background-color: #FFFFFF;
-    }
-
-    .alignedsummary{}
-    .propsummary{}
-    .memItemLeft{}
-    .memItemRight{
-        padding:3px 15px 3px 0;
-    }
-    .bottomAlign{}
-    .highlightedCode
-    {
-    margin:10px;
-    }
-    .LegaleseLeft{}
-    .valuelist{}
-    .annotated td{
-            padding: 3px 5px 3px 5px;
-    }
-    .obsolete{}
-    .compat{}
-    .flags{}
-    .qmlsummary{}
-    .qmlitem{}
-    .qmlproto{}
-    .qmlname{}
-    .qmlreadonly{}
-    .qmldefault{}
-    .qmldoc{}
-    .qt-style{}
-    .redFont{}
-    code{}
-
-    .wrap .content .toc ul
-    {
-        padding-left: 0px;
-    }
-
-    .wrap .content .toc h3{
-    border-bottom:0px;
-    margin-top:0px;
-    }
-
-    .wrap .content .toc h3  a:hover{
-    color:#00732F;
-    text-decoration:none;
-    }
-
-
-    .wrap .content .toc .level2
-    {
-        margin-left: 15px;
-    }
-
-    .wrap .content .toc .level3
-    {
-        margin-left: 30px;
-    }
-
-    .content .toc li
-    {
-        font: normal 10px/1.2 Verdana;
-        background: url(../images/bullet_dn.png) no-repeat 0 5px;
-    }
-    .relpage
-    {
-        -moz-border-radius: 7px 7px 7px 7px;
-        -webkit-border-radius: 7px 7px 7px 7px;
-        border-radius: 7px 7px 7px 7px;
-        border: 1px solid #DDDDDD;
-        padding: 25px 25px;
-        clear: both;
-    }
-    .relpage ul
-    {
-        float: none;
-        padding: 15px;
-    }
-    .content .relpage li
-    {
-        font: normal 11px/1.2 Verdana;
-    }
-    h3.fn, span.fn
-    {
-        -moz-border-radius:7px 7px 7px 7px;
-        -webkit-border-radius:7px 7px 7px 7px;
-        border-radius:7px 7px 7px 7px;
-        background-color: #F6F6F6;
-        border-width: 1px;
-        border-style: solid;
-        border-color: #E6E6E6;
-        font-weight: bold;
-        word-spacing:3px;
-        padding:3px 5px;
-    }
-
-    .functionIndex {
-    font-size:12pt;
-    word-spacing:10px;
-    margin-bottom:10px;
-    background-color: #F6F6F6;
-    border-width: 1px;
-    border-style: solid;
-    border-color: #E6E6E6;
-    -moz-border-radius: 7px 7px 7px 7px;
-    -webkit-border-radius: 7px 7px 7px 7px;
-    border-radius: 7px 7px 7px 7px;
-    width:100%;
-    }
-
-    .centerAlign
-    {
-    text-align:center;
-    }
-
-    .rightAlign
-    {
-    text-align:right;
-    }
-
-
-    .leftAlign
-    {
-    text-align:left;
-    }
-
-    .topAlign{
-    vertical-align:top
-    }
-
-    .functionIndex a{
-    display:inline-block;
-    }
-
-/* end content elements */
-/* footer elements */
-
-    .footer
-    {
-        min-height: 100px;
-        color: #797775;
-        font: normal 9px/1 Verdana;
-        text-align: center;
-        padding-top: 40px;
-        background-color: #E6E7E8;
-        margin: 0;
-    }
-/* end footer elements */
-
-
-
-
-    /* start index box */
-    .indexbox
-    {
-        width: 100%;
-        display:inline-block;
-    }
-
-    .indexboxcont
-    {
-        display: block;
-
-    }
-
-    .indexboxbar
-    {
-        background: transparent url(../images/horBar.png ) repeat-x left bottom;
-        margin-bottom: 25px;
-
-
-    }
-
-    .indexboxcont .section
-    {
-        display: inline-block;
-        width: 49%;
-        *width:42%;
-        _width:42%;
-        padding:0 2% 0 1%;
-        vertical-align:top;
-
-}
-
-    .indexboxcont .indexIcon
-    {
-        width: 11%;
-        *width:18%;
-        _width:18%;
-        overflow:hidden;
-
-}
-
-.indexboxcont .section {
-  float: left;
-}
-
-    .indexboxcont .section p
-    {
-        padding-top: 20px;
-        padding-bottom: 20px;
-    }
-    .indexboxcont .sectionlist
-    {
-        display: inline-block;
-        vertical-align:top;
-        width: 32.5%;
-        padding: 0;
-    }
-    .indexboxcont .sectionlist ul
-    {
-        margin-bottom: 20px;
-    }
-
-    .indexboxcont .sectionlist ul li
-    {
-        line-height: 12px;
-    }
-
-    .content .indexboxcont li
-    {
-        font: normal bold 13px/1 Verdana;
-    }
-
-    .indexbox a:hover, .indexbox a:visited:hover
-    {
-        color: #4c0033;
-        text-decoration: underline;
-    }
-
-    .indexbox a:visited
-    {
-        color: #00732f;
-        text-decoration: none;
-    }
-
-    .indexbox .indexIcon {
-    width: 11%;
-    }
-
-
-    .indexbox .indexIcon span
-    {
-        display: block;
-    }
-
-    .indexbox.guide .indexIcon span
-    {
-        width: 96px;
-        height: 137px;
-        background: url(../images/sprites-combined.png) no-repeat -5px -376px;
-        padding: 0;
-    }
-
-    .indexbox.tools .indexIcon span
-    {
-        width: 115px;
-        height: 137px;
-        background: url(../images/sprites-combined.png) no-repeat -111px -376px;
-        padding: 0;
-    }
-    .indexboxcont:after
-    {
-        content: ".";
-        display: block;
-        height: 0;
-        clear: both;
-        visibility: hidden;
-    }
-
-
-
-/* start of creator spec*/
-    .creator
-    {
-    margin-left:0px;
-    margin-right:0px;
-    padding-left:0px;
-    padding-right:0px;
-    }
-    .creator .wrap .content ol li {
-    list-style-type:decimal;
-
-    }
-    .creator .header .icon,
-    .creator .feedback,
-    .creator .t_button,
-    .creator .feedback,
-    .creator #feedbackBox,
-    .creator #feedback,
-    .creator #blurpage,
-    /*.creator .indexbox .indexIcon span,*/
-    .creator .wrapper .hd,
-/*    .creator  .indexbox .indexIcon,*/
-    .creator .header #nav-logo,
-    .creator #offlinemenu,
-    .creator #offlinesearch,
-    .creator  .header #nav-topright,
-    .creator .header #shortCut ,
-    .creator .wrapper .hd,
-    .creator .wrapper .ft,
-    .creator .sidebar,
-    .creator .wrap .feedback
-    {
-    display:none;
-    }
-
-    body.creator
-    {
-    background: none;
-
-        font: normal 13px/1.2 Verdana;
-        color: #363534;
-        background-color: #FAFAFA;
-    }
-
-    .wrap .content ol li {
-
-    }
-
-
-    .creator .header, .footer, .wrapper
-    {
-        max-width: 1500px;
-        margin: 0px;
-    }
-
-    .creator .wrapper
-    {
-    position:relative;
-    top:5px;
-    }
-    .creator .wrapper .bd
-    {
-
-    background:#FFFFFF;
-    }
-
-
-    .creator .header, .footer
-    {
-        display: block;
-        clear: both;
-        overflow: hidden;
-    }
-    .creator .wrap .content p
-
-    {
-        line-height: 20px;
-        padding: 5px;
-    }
-
-    .creator .header .qtref span
-    {
-        background:none;
-    }
-
-
-
-        .creator .footer
-    {
-        border-top:1px solid #E5E5E5;
-        height: 50px;
-        margin:0px;
-        padding:10px;
-    }
-
-        .creator .footer p
-        {
-        text-align:justify;
-        max-width:900px;
-    }
-
-     .creator .wrap
-    {
-
-        padding:0 5px 0 5px;
-        margin: 0px;
-    }
-    .creator .wrap .toolbar
-    {
-
-
-    border-bottom:1px solid #E5E5E5;
-    /*width:100%;*/
-    margin-left:-5px;
-    margin-right:-5px;
-    }
-    .creator .wrap .breadcrumb ul li a
-    {
-      /*  color: #363534;*/
-        color: #00732F;
-    }
-
-    .creator .wrap .content
-    {
-        padding: 0px;
-        word-wrap:break-word;
-    }
-
-    .creator .wrap .content ol li {
-        background:none;
-        font: inherit;
-        padding-left: 0px;
-    }
-
-    .creator .wrap .content .descr ol li {
-    margin-left: 45px;
-
-    }
-    .creator .content .alignedsummary
-    {
-        margin: 5px;
-        width:100%;
-    }
-    .creator .generic{
-        max-width:75%;
-    }
-    .creator .generic td{
-    /*    padding:0;*/
-    }
-    .creator .indexboxbar
-    {
-        border-bottom:1px solid #E5E5E5;
-        margin-bottom: 25px;
-        background: none;
-    }
-
-
-
-    .creator .header
-    {
-      width: 100%;
-      margin: 0;
-      height: auto;
-      background-color: #ffffff;
-      padding: 10px 0 5px 0;
-      overflow: visible;
-      border-bottom: solid #E5E5E5 1px;
-      z-index:1;
-
-
-
-
-
-
-
-
-    /*  position:fixed;*/
-    }
-
-
-    .creator .header .content
-    {
-    }
-    .creator .header .qtref
-    {
-      color: #00732F;
-      position: static;
-      float: left;
-      margin-left: 5px;
-      font: bold 18px/1 Arial;
-    }
-
-    .creator .header .qtref:visited
-    {
-      color: #00732F;
-      }
-    .creator .header .qtref:hover
-    {
-      color: #00732F;
-      text-decoration:none;
-      }
-    .creator .header .qtref span
-    {
-      background-image: none;
-      text-indent: 0;
-      text-decoration:none;
-    }
-
-
-
-
-
-
-    .creator .wrap .toolbar
-    {
-      display:block;
-      padding-top:0px;
-    }
-
-
-
-    .creator .wrap .breadcrumb ul li {
-      font-weight: normal;
-    }
-
-    .creator .wrap .breadcrumb ul li a {
-      /*color: #44a51c;*/
-    }
-
-    .creator .wrap .breadcrumb ul li.last a {
-      /*color: #363534;*/
-    }
-
-    .creator #narrowmenu ul
-    {
-      border-bottom:solid 1px #E5E5E5;
-      border-left:solid 1px #E5E5E5;
-      border-right:solid 1px #E5E5E5;
-    }
-
-    .creator #narrowmenu li ul {
-      margin-top:-15px;
-   }
-
-
-    .creator .toc {
-    margin:10px 20px 10px 10px;
-    }
-
-    .creator #narrowsearch, .creator #narrowmenu{
-        display:none;
-    }
-/* end of creator spec*/
-
-}
-
-/* end of screen media */
-
-/* start of print media */
-
-@media print
-{
-     input, textarea, .header, .footer, .toolbar, .feedback, .wrapper .hd, .wrapper .bd .sidebar, .wrapper .ft, #feedbackBox, #blurpage, .toc, .breadcrumb, .toolbar, .floatingResult
-    {
-        display: none;
-        background: none;
-    }
-    .content
-    {
-        background: none;
-        display: block;
-        width: 100%; margin: 0; float: none;
-
-    }
-}
-/* end of print media */
diff --git a/doc/config/style/style_ie6.css b/doc/config/style/style_ie6.css
deleted file mode 100644
index 16fb850..0000000
--- a/doc/config/style/style_ie6.css
+++ /dev/null
@@ -1,54 +0,0 @@
-.indexbox, .indexboxcont, .group {
-  zoom: 1;
-  height: 1%;
-}
-
-.sidebar {
-  margin-left: 3px;
-  width: 199px;
-  overflow: hidden;
-}
-
-.sidebar .search form {
-  position: relative;
-}
-
-.sidebar .search form fieldset {
-  position: absolute;
-  margin-top: -1px;
-}
-
-.sidebar .search form input#searchstring  {
-  border: 1px solid #fff;
-  height: 18px;
-}
-
-.wrap {
-  zoom: 1;
-}
-
-.content,
-.toolbar {
-  zoom: 1;
-  margin-left: -3px;
-  position: relative;
-}
-
-.indexbox {
-  clear: both;
-}
-
-.indexboxcont .section {
-  zoom: 1;
-  float: left;
-}
-
-.indexboxcont .sectionlist {
-  zoom: 1;
-  float: left;
-}
-
-.wrap .toolbar .toolbuttons li {
-  text-indent: 0;
-  margin-right: 8px;
-}
\ No newline at end of file
diff --git a/doc/config/style/style_ie7.css b/doc/config/style/style_ie7.css
deleted file mode 100644
index afbff5f..0000000
--- a/doc/config/style/style_ie7.css
+++ /dev/null
@@ -1,19 +0,0 @@
-.indexbox, .indexboxcont, .group {
-  min-height: 1px;
-}
-
-.sidebar .search form input#searchstring  {
-  border: 1px solid #fff;
-  height: 17px;
-}
-
-
-.indexboxcont .section {
-  zoom: 1;
-  float: left;
-}
-
-.indexboxcont .sectionlist {
-  zoom: 1;
-  float: left;
-}
diff --git a/doc/config/style/style_ie8.css b/doc/config/style/style_ie8.css
deleted file mode 100644
index e69de29..0000000
diff --git a/doc/config/style/superfish.css b/doc/config/style/superfish.css
deleted file mode 100644
index 2bdaef4..0000000
--- a/doc/config/style/superfish.css
+++ /dev/null
@@ -1,51 +0,0 @@
-.sf-menu, .sf-menu * {
-  margin: 0;
-  padding: 0;
-  list-style: none;
-}
-.sf-menu {
-  line-height: 1.0;
-}
-.sf-menu ul {
-  position: absolute;
-  top: -999em;
-  width: 10em; /* left offset of submenus need to match (see below) */
-}
-.sf-menu ul li {
-  width: 100%;
-}
-.sf-menu li:hover {
-  visibility: inherit; /* fixes IE7 'sticky bug' */
-}
-.sf-menu li {
-  float: left;
-  position: relative;
-}
-.sf-menu a {
-  display: block;
-  position: relative;
-}
-.sf-menu li:hover ul,
-.sf-menu li.sfHover ul {
-  left: 0;
-  top: 2.5em; /* match top ul list item height */
-  z-index: 99;
-}
-ul.sf-menu li:hover li ul,
-ul.sf-menu li.sfHover li ul {
-  top: -999em;
-}
-ul.sf-menu li li:hover ul,
-ul.sf-menu li li.sfHover ul {
-  left: 10em; /* match ul width */
-  top: 0;
-}
-ul.sf-menu li li:hover li ul,
-ul.sf-menu li li.sfHover li ul {
-  top: -999em;
-}
-ul.sf-menu li li li:hover ul,
-ul.sf-menu li li li.sfHover ul {
-  left: 10em; /* match ul width */
-  top: 0;
-}
diff --git a/doc/doc.pro b/doc/doc.pro
deleted file mode 100644
index d4655c9..0000000
--- a/doc/doc.pro
+++ /dev/null
@@ -1,35 +0,0 @@
-######################################################################
-#
-# Mobility API project
-#
-######################################################################
-
-TEMPLATE = subdirs
-
-# Doc snippets use widgets
-!isEmpty(QT.widgets.name): SUBDIRS += src/snippets
-
-OTHER_FILES += \
-    src/audioengineoverview.qdoc \
-    src/audiooverview.qdoc \
-    src/cameraoverview.qdoc \
-    src/changes.qdoc \
-    src/multimediabackend.qdoc \
-    src/multimedia.qdoc \
-    src/qtmultimedia5.qdoc \
-    src/radiooverview.qdoc \
-    src/videooverview.qdoc \
-    src/examples/audiodevices.qdoc \
-    src/examples/audioengine.qdoc \
-    src/examples/audioinput.qdoc \
-    src/examples/audiooutput.qdoc \
-    src/examples/audiorecorder.qdoc \
-    src/examples/camera.qdoc \
-    src/examples/declarative-camera.qdoc \
-    src/examples/declarative-radio.qdoc \
-    src/examples/player.qdoc \
-    src/examples/qmlvideofx.qdoc \
-    src/examples/qmlvideo.qdoc \
-    src/examples/spectrum.qdoc \
-    src/examples/videographicsitem.qdoc \
-    src/examples/videowidget.qdoc
diff --git a/doc/src/audioengineoverview.qdoc b/doc/src/audioengineoverview.qdoc
deleted file mode 100644
index 6ccc955..0000000
--- a/doc/src/audioengineoverview.qdoc
+++ /dev/null
@@ -1,79 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/
-**
-** This file is part of the documentation of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:FDL$
-** GNU Free Documentation License
-** Alternatively, this file may be used under the terms of the GNU Free
-** Documentation License version 1.3 as published by the Free Software
-** Foundation and appearing in the file included in the packaging of
-** this file.
-**
-** Other Usage
-** Alternatively, this file may be used in accordance with the terms
-** and conditions contained in a signed written agreement between you
-** and Nokia.
-**
-**
-**
-**
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-/*!
-\page audioengineoverview.html
-\title Positional Audio
-\brief 3D positional audio playback and content management
-
-\section1 QtAudioEngine Features
-
-Qt Multimedia includes the \c QtAudioEngine QML module for
-providing 3D positional audio playback and content management.
-
-QtAudioEngine enables developers to organize wave files into discrete \l Sound with different
-\l {PlayVariation}{play variations}, group sound controls by \l {AudioCategory} categories and
-define \l {AttenuationModelLinear}{attenuation models} and various 3d audio settings all in one
-place. Playback of \l {SoundInstance}{sound instances} can be conveniently activated by in-app
-events and managed by QtAudioEngine or controlled by explicitly defining \l SoundInstance
-for easier QML bindings.
-
-To access these QML types import the
-\b{QtAudioEngine 1.0} module.
-
-\qml
-import QtQuick 2.0
-import QtAudioEngine 1.0
-
-AudioEngine {
-//...
-}
-\endqml
-
-\section1 Examples
-\list
-    \li \l {AudioEngine Example}{Audio Engine}
-\endlist
-
-\section1 Reference Documentation
-
-\section2 QML Types
-
-\list
-    \li \l AudioEngine
-    \li \l AudioSample
-    \li \l AudioCategory
-    \li \l AttenuationModelLinear
-    \li \l AttenuationModelInverse
-    \li \l Sound
-    \li \l PlayVariation
-    \li \l AudioListener
-    \li \l SoundInstance
-
-\endlist
-
-*/
diff --git a/doc/src/audiooverview.qdoc b/doc/src/audiooverview.qdoc
deleted file mode 100644
index 916174d..0000000
--- a/doc/src/audiooverview.qdoc
+++ /dev/null
@@ -1,153 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/
-**
-** This file is part of the documentation of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:FDL$
-** GNU Free Documentation License
-** Alternatively, this file may be used under the terms of the GNU Free
-** Documentation License version 1.3 as published by the Free Software
-** Foundation and appearing in the file included in the packaging of
-** this file.
-**
-** Other Usage
-** Alternatively, this file may be used in accordance with the terms
-** and conditions contained in a signed written agreement between you
-** and Nokia.
-**
-**
-**
-**
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-/*!
-\page audiooverview.html
-\title Audio Overview
-\brief Audio playback, recording and processing
-
-\section1 Audio Features
-
-Qt Multimedia offers a range of audio classes, covering both low and
-high level approaches to audio input, output and processing.  In
-addition to traditional audio usage, the \l {Positional Audio}{Qt AudioEngine}
-QML types offer high level 3D positional audio for QML applications.
-See that documentation for more information.
-
-\section1 Audio Implementation Details
-
-\section2 Playing Compressed Audio
-For playing media or audio files that are not simple, uncompressed audio, you can
-use the \l QMediaPlayer C++ class, or the \l {Audio} and \l {MediaPlayer} QML types.
-The QMediaPlayer class and associated QML types are also capable of playing
-\l{multimedia-playing-video}{video}, if required.  The compressed audio formats supported does depend
-on the operating system environment, and also what media plugins the user
-may have installed.
-
-Here is how you play a local file using C++:
-
-    \snippet doc/src/snippets/multimedia-snippets/media.cpp Local playback
-
-You can also put files (even remote URLs) into a playlist:
-    \snippet doc/src/snippets/multimedia-snippets/media.cpp Audio playlist
-
-\section2 Recording Audio to a File
-For recording audio to a file, the \l {QAudioRecorder} class allows you
-to compress audio data from an input device and record it.
-
-    \snippet doc/src/snippets/multimedia-snippets/media.cpp Audio recorder
-
-\section2 Low Latency Sound Effects
-
-In addition to the raw access to sound devices described above, the QSoundEffect class (and
-\l {SoundEffect} QML type) offers a slightly higher level way to play
-sounds.  These classes allow you to specify a WAV format file which can
-then be played with low latency when necessary.  Both QSoundEffect and
-SoundEffect have essentially the same API.
-
-You can adjust the number of \l {QSoundEffect::loopCount()}{loops} a sound effect is played, as well as
-the \l {QSoundEffect::setVolume()}{volume} (or \l {QSoundEffect::setMuted()}{muting}) of the effect.
-
-For older, Qt 4.x based applications \l QSound is also available.  Applications
-are recommended to use QSoundEffect where possible.
-
-\section2 Monitoring Audio Data During Playback or Recording
-
-The \l QAudioProbe class allows you to monitor audio data being played or
-recorded in the higher level classes like \l QMediaPlayer, \l QCamera and
-\l QAudioRecorder.  After creating your high level class, you can simply
-set the source of the probe to your class, and receive audio buffers as they
-are processed.  This is useful for several audio processing tasks, particularly
-for visualization or adjusting gain.  You cannot modify the buffers, and
-they may arrive at a slightly different time than the media pipeline
-processes them.
-
-Here's an example of installing a probe during recording:
-    \snippet doc/src/snippets/multimedia-snippets/media.cpp Audio probe
-
-\section2 Low Level Audio Playback and Recording
-Qt Multimedia offers classes for raw access to audio input and output
-facilities, allowing applications to receive raw data from devices like
-microphones, and to write raw data to speakers or other devices.  Generally
-these classes do not do any audio decoding, or other processing, but they
-can support different types of raw audio data.
-
-The QAudioOutput class offers raw audio data output, while QAudioInput
-offers raw audio data input.  Both classes have adjustable buffers and
-latency, so they are suitable for both low latency use cases (like games
-or VOIP) and high latency (like music playback).  The available hardware
-determines what audio outputs and inputs are available.
-
-\section3 Push and Pull
-The low level audio classes can operate in two modes - \c push and \c pull.
-In \c pull mode, the audio device is started by giving it a QIODevice.  For
-an output device, the QAudioOutput class will pull data from the QIODevice
-(using \l QIODevice::read()) when more audio data is required.  Conversely,
-for \c pull mode with QAudioInput, when audio data is available then the
-data will be written directly to the QIODevice.
-
-In \c push mode, the audio device provides a QIODevice instance that
-can be written or read to as needed.  Typically this results in simpler
-code but more buffering, which may affect latency.
-
-\section2 Decoding Compressed Audio to Memory
-In some cases you may want to decode a compressed audio file and do further
-processing yourself (like mix multiple samples, or some custom digital signal
-processing algorithms).  Qt Multimedia 5.0 offers a preliminary API for this
-case - the \l QAudioDecoder class.  QAudioDecoder supports decoding local files
-or from a QIODevice instances.
-
-Here's an example of decoding a local file:
-
-    \snippet doc/src/snippets/multimedia-snippets/audio.cpp Local audio decoding
-
-Note:  This API is preliminary at this time - the API may change or be
-removed before the final 5.0 release.
-
-\section1 Examples
-
-There are both C++ and QML examples available.
-
-\section2 C++ Examples
-
-\annotatedlist audio_examples
-
-\section2 QML Examples
-
-[TBD]
-
-\section1 Reference Documentation
-
-\section2 C++ Classes
-
-\annotatedlist multimedia_audio
-
-\section2 QML Types
-
-\annotatedlist multimedia_audio_qml
-
-*/
diff --git a/doc/src/cameraoverview.qdoc b/doc/src/cameraoverview.qdoc
deleted file mode 100644
index a3698ed..0000000
--- a/doc/src/cameraoverview.qdoc
+++ /dev/null
@@ -1,262 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/
-**
-** This file is part of the documentation of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:FDL$
-** GNU Free Documentation License
-** Alternatively, this file may be used under the terms of the GNU Free
-** Documentation License version 1.3 as published by the Free Software
-** Foundation and appearing in the file included in the packaging of
-** this file.
-**
-** Other Usage
-** Alternatively, this file may be used in accordance with the terms
-** and conditions contained in a signed written agreement between you
-** and Nokia.
-**
-**
-**
-**
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-/*!
-\page cameraoverview.html
-\title Camera Overview
-\brief Camera viewfinder, still image capture, and video recording.
-
-The Qt Multimedia API provides a number of camera related classes, so you
-can access images and videos from mobile device cameras or webcameras.
-There are both C++ and QML APIs for common tasks.
-
-\section1 Camera Features
-
-In order to use the camera classes a quick overview of the way a camera
-works is needed.  If you're already familiar with this, you can skip ahead to
-\l {camera-tldr}{Camera implementation details}.
-
-[TBD - this needs a diagram]
-* Camera features
- * lens -> sensors -> image processing -> capture/recording
-
-\section2 The Lens Assembly
-At one end of the camera assembly is the lens assembly (one or
-more lenses, arranged to focus light onto the sensor).  The lenses
-themselves can sometimes be moved to adjust things like focus and zoom,
-or they might be fixed in an arrangement to give a good balance between
-objects in focus, and cost.
-
-Some lens assemblies can automatically be adjusted so that
-an object at different distances from the camera can be kept in focus.
-This is usually done by measuring how sharp a particular area of the
-frame is, and by adjusting the lens assembly until it is maximally
-sharp.  In some cases the camera will always use the center of the
-frame for this.  Other cameras may also allow the region to focus
-to be specified (for "touch to zoom", or "face zoom" features).
-
-\section2 The Sensor
-Once light arrives at the sensor, it gets converted into digital pixels.
-This process can depend on a number of things but ultimately comes down
-to two things - how long the conversion is allowed to take, and how
-bright the light is.  The longer a conversion can take, the better the
-quality.  Using a flash can assist with letting more light hit the sensor,
-allowing it to convert pixels faster, giving better quality for the same
-amount of time.  Conversely, allowing a longer conversion time can let you
-take photos in darker environments, as long as the camera is steady.
-
-\section2 Image Processing
-After the image has been captured by the sensor, the camera firmware performs
-various image processing tasks on it to compensate for various sensor
-characteristics, current lighting, and desired image properties.  Faster sensor
-pixel conversion times tend to introduce digital noise, so some amount of image
-processing can be done to remove this based on the camera sensor settings.
-
-The color of the image can also be adjusted at this stage to compensate for
-different light sources - fluorescent lights and sunlight give very different
-appearances to the same object, so the image can be adjusted based on the
-white balance of the picture (due to the different color temperatures of the
-light sources).
-
-Some forms of "special effects" can also be performed at this stage.  Black
-and white, sepia, or "negative" style images can be produced.
-
-\section2 Recording for Posterity
-Finally, once a perfectly focused, exposed and processed image has been
-created, it can be put to good use.  Camera images can be further processed
-by application code (for example, to detect barcodes, or to stitch together a
-panoramic image), or saved to a common format like JPEG, or used to create a movie.
-Many of these tasks have classes to assist them.
-
-\target camera-tldr
-\section1 Camera Implementation Details
-\section2 Viewfinder
-
-While not strictly necessary, it's often useful to be able to see
-what the camera is pointing at.  Most digital cameras allow an image
-feed from the camera sensor at a lower resolution (usually up to
-the size of the display of the camera) so you can compose
-a photo or video, and then switch to a slower but higher resolution
-mode for capturing the image.
-
-Depending on whether you're using QML or C++, you can do this in multiple ways.
-In QML, you can use \l Camera and \l VideoOutput together to show a
-simple viewfinder:
-
-\qml
-    Camera {
-        id: camera
-        // You can adjust various settings in here
-    }
-
-    VideoOutput {
-        source: camera
-    }
-\endqml
-
-In C++, your choice depends on whether you are using widgets, or QGraphicsView.
-The \l QVideoWidget class is used in the widgets case, and \l QGraphicsVideoItem
-is useful for QGraphicsView.
-
-    \snippet doc/src/snippets/multimedia-snippets/camera.cpp Camera overview viewfinder
-
-For advanced usage (like processing viewfinder frames as they come, to detect
-objects or patterns), you can also derive from \l QAbstractVideoSurface and
-set that as the viewfinder for the QCamera object.  In this case you will
-need to render the viewfinder image yourself.
-
-    \snippet doc/src/snippets/multimedia-snippets/camera.cpp Camera overview surface
-
-\section2 Still Images
-
-After setting up a viewfinder and finding something photogenic,
-to capture an image we need to initialize a new QCameraImageCapture
-object. All that is then needed is to start the camera, lock it so
-that things are in focus and the settings are not different from the
-viewfinder while the image capture occurs, capture the image, and
-finally unlock the camera ready for the next photo.
-
-    \snippet doc/src/snippets/multimedia-snippets/camera.cpp Camera overview capture
-
-\section2 Movies
-
-Previously we saw code that allowed the capture of a still image. Recording
-video requires the use of a \l QMediaRecorder object.
-
-To record video we need to create a camera object as before but this time as
-well as creating a viewfinder, we will also initialize a media recorder object.
-
-    \snippet doc/src/snippets/multimedia-snippets/camera.cpp Camera overview movie
-
-Signals from the \e mediaRecorder can be connected to slots to react to
-changes in the state of the recorder or error events. Recording itself
-starts with the \l {QMediaRecorder::record()}{record()} function of
-mediaRecorder being called, this causes the signal \l
-{QMediaRecorder::stateChanged()}{stateChanged()} to be emitted. The
-recording process can be changed with the \l {QMediaRecorder::record()}{record()},
-\l {QMediaRecorder::stop()}{stop()} and \l {QMediaRecorder::setMuted()}{setMuted()}
-slots in \l QMediaRecorder.
-
-\section2 Controlling the Imaging Pipeline
-
-Now that the basics of capturing images or movies are covered, there are a number
-of ways to control the imaging pipeline to implement some interesting techniques.
-As explained earlier, several physical and electronic elements combine to determine
-the final images, and you can control them with different classes.
-
-\section3 Focus and Zoom
-
-Focusing (and zoom) is managed primarily by the \l QCameraFocus class.
-QCameraFocus allows the developer to set the general policy by means of the
-enums for the \l {QCameraFocus::FocusMode}{FocusMode} and the
-\l {QCameraFocus::FocusPointMode}{FocusPointMode}. \l {QCameraFocus::FocusMode}{FocusMode}
-deals with settings such as \l {QCameraFocus::FocusMode}{AutoFocus},
-\l {QCameraFocus::FocusMode}{ContinuousFocus} and \l {QCameraFocus::FocusMode}{InfinityFocus},
-whereas \l {QCameraFocus::FocusMode}{FocusPointMode} deals with the
-various focus zones within the view that are used for autofocus modes. \l {QCameraFocus::FocusMode}{FocusPointMode}
-has support for face recognition (where the camera supports it), center focus and a custom
-focus where the focus point can be specified.
-
-For camera hardware that supports it, \l {QCameraFocus::FocusMode}{Macro focus} allows
-imaging of things that are close to the sensor.  This is useful in applications like
-barcode recognition, or business card scanning.
-
-In addition to focus, QCameraFocus allows you to control any available optical or
-digital zoom.  In general, optical zoom is higher quality, but more expensive to
-manufacture, so the available zoom range might be limited (or fixed to unity).
-
-\section3 Exposure, Aperture, Shutter Speed and Flash
-
-There are a number of settings that affect the amount of light that hits the
-camera sensor, and hence the quality of the resulting image.  The \l QCameraExposure
-class allows you to adjust these settings.  You can use this class to implement
-some techniques like High Dynamic Range (HDR) photos by locking the exposure
-parameters (with \l {QCamera::searchAndLock()}), or motion blur by setting slow shutter speeds
-with small apertures.
-
-The main settings for automatic image taking are the \l {QCameraExposure::ExposureMode}{exposure mode}
-and \l {QCameraExposure::FlashMode}{flash mode}.  Several other settings (aperture, ISO setting,
- shutter speed) are usually managed automatically but can also be overridden if desired.
-
-You can also adjust the \l {QCameraExposure::meteringMode()} to control which parts
-of the camera frame to measure exposure at.  Some camera implementations also allow
-you to specify a specific point that should be used for exposure metering - this is
-useful if you can let the user touch or click on an interesting part of the viewfinder,
-and then use this point so that the image exposure is best at that point.
-
-Finally, you can control the flash hardware (if present) using this class.  In some cases
-the hardware may also double as a torch (typically when the flash is LED based, rather than
-a xenon or other bulb).  See also \l {Torch} for an easy to use API for
-torch functionality.
-
-\target camera_image_processing
-\section3 Image Processing
-
-The QCameraImageProcessing class lets you adjust the image processing
-part of the pipeline.  This includes the \l {QCameraImageProcessing::WhiteBalanceMode}{white balance}
-(or color temperature), \l {QCameraImageProcessing::contrast()}{contrast},
-\l {QCameraImageProcessing::saturation()}{saturation}, \l {QCameraImageProcessing::setSharpeningLevel()}{sharpening}
-and \l {QCameraImageProcessing::setDenoisingLevel()}{denoising}.  Most cameras support automatic settings
-for all of these, so you shouldn't need to adjust them unless the user wants a specific setting.
-
-If you're taking a series of images (for example, to stitch them together for
-a panoramic image), you should lock the image processing settings so that all the
-images taken appear similar with \e {QCamera::lock(QCamera::LockWhiteBalance)}/
-
-\section3 Canceling Asynchronous Operations
-
-Various operations such as image capture and auto focusing occur
-asynchrously. These operations can often be canceled by the start of a new
-operation as long as this is supported by the camera. For image capture,
-the operation can be canceled by calling
-\l {QCameraImageCapture::cancelCapture()}{cancelCapture()}. For AutoFocus,
-autoexposure or white balance cancellation can be done by calling
-\e {QCamera::unlock(QCamera::LockFocus)}.
-
-\section1 Examples
-
-There are both C++ and QML examples available.
-
-\section2 C++ Examples
-
-\annotatedlist camera_examples
-
-\section2 QML Examples
-
-\annotatedlist camera_examples_qml
-
-\section1 Reference Documentation
-
-\section2 C++ Classes
-
-\annotatedlist multimedia_camera
-
-\section2 QML Types
-
-\annotatedlist camera_qml
-
-*/
diff --git a/doc/src/changes.qdoc b/doc/src/changes.qdoc
deleted file mode 100644
index f60b4e7..0000000
--- a/doc/src/changes.qdoc
+++ /dev/null
@@ -1,157 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/
-**
-** This file is part of the documentation of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:FDL$
-** GNU Free Documentation License
-** Alternatively, this file may be used under the terms of the GNU Free
-** Documentation License version 1.3 as published by the Free Software
-** Foundation and appearing in the file included in the packaging of
-** this file.
-**
-** Other Usage
-** Alternatively, this file may be used in accordance with the terms
-** and conditions contained in a signed written agreement between you
-** and Nokia.
-**
-**
-**
-**
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-/*!
-
-\page changes.html
-\title Changes in Qt Multimedia
-\brief A description of changes in this version of Qt Multimedia
-
-
-The Qt Multimedia module in Qt 5 is a combination of the Qt Multimedia module
-in Qt 4.x and the Qt Multimedia Kit module of Qt Mobility.  It replaces both
-of these modules by combining the code.  If you've previously used Qt Multimedia
-there are not too many changes required for existing code, but there are some
-larger changes required for porting code that used Qt Multimedia Kit (most notably
-the namespace and header file prefix has changed, and the qmake pro file changes
-needed to enable Qt Multimedia).
-
-One other change of note is that widget related classes (like \l QVideoWidget)
-are now in a new library (Qt Multimedia Widgets).
-
-\section1 New features in 5.0
-
-There are a number of new features in Qt Multimedia 5.0:
-\list
-\li Expanded QML API
-\li New \l QAudioRecorder class
-\li Volume support for QAudioOutput and QAudioInput
-\li More examples and documentation
-\li QML \l Torch class
-\li QSound moved from QtGui to QtMultimedia
-\li QSoundEffect available to C++ now, as well as QML
-\li FM Radio Data System classes and types now available (\l QRadioData, \l RadioData)
-\li Various other API improvements and bugfixes
-\endlist
-
-\section1 Removed features
-
-A number of classes or features previously offered in Qt Multimedia or Qt Multimedia Kit have
-been removed.
-
-\table 70%
-    \header
-        \li Removed feature
-        \li Notes
-    \row
-        \li QMediaImageViewer
-        \li This class (and related controls and services) were removed since
-           their functionality was not suitable for many applications
-\endtable
-
-\section1 Changed features
-
-A number of classes previously offered in Qt Multimedia or Qt Multimedia Kit have
-changed in ways that may affect previously written code.  There may be other
-changes (like new features) that will not affect previously written code, and
-they are documented elsewhere.
-
-\table 70%
-    \header
-        \li Changed feature
-        \li Notes
-    \row
-        \li qmake .pro file changes
-        \li If you've used QtMultimediaKit in the past, you needed to put
-           \code
-           CONFIG += mobility
-           MOBILITY += multimedia
-           \endcode
-           in your .pro file.  Now you need to use:
-           \code
-           QT += multimedia
-           \endcode
-           or
-           \code
-           QT += multimedia multimediawidgets
-           \endcode
-           if you need to use the widget classes.
-    \row
-        \li Namespace changes
-        \li For Qt Multimedia Kit the majority of the classes were in the
-           normal Qt namespace (usually nothing, unless built specially).  There
-           was a Qt Multimedia Kit namespace for several enumerations.  This namespace
-           has now changed to Qt Multimedia, so if you've used one of the
-           \c SupportEstimate, \c EncodingQuality, \c EncodingMode or \c AvailabilityStatus
-           enumerations you'll need to change your code.  In fact, running a global
-           search and replace on \c QtMultimediaKit (to replace it with \c QtMultimedia) will
-           go a long way with porting your code.
-    \row
-        \li Meta-data enumeration changes
-        \li In Qt Multimedia Kit the available meta-data keys were in an enumeration
-           in the \c QtMultimediaKit namespace.  These meta-data keys have been changed
-           to string literals in the \c {QtMultimedia::MetaData} namespace - generally your
-           source code will mostly be compatible unless you have created variables or
-           parameters with the \c {QtMultimedia::MetaData} type - you should replace these
-           with \c QString.
-    \row
-        \li Meta-data method changes
-        \li In Qt Multimedia Kit the available meta-data was split between methods to
-           access standard, pre-defined keys, and methods to access extensible free
-           form key meta-data.  These have been combined into a single method to
-           access meta-data given a string key, and a list of pre-defined keys.  If
-           you've used the \c extendedMetaData method of any class, you will need
-           to change your code to combine the standard and extended metadata methods.
-    \row
-        \li Qt Metatype registration
-        \li In Qt Multimedia 5.0 we've tried to make sure that we register any classes
-           or types that would be useful to use in cross process signals or in
-           QVariants.  If you've previously added Q_DECLARE_METATYPE macros for any
-           Qt Multimedia class you will probably need to remove them.
-    \row
-        \li Video QML type
-        \li If you've previously used \l Video you may be excited
-           to learn that it should still work as expected, but you also have
-           the choice of using \l MediaPlayer and \l VideoOutput
-           together for more flexible and advanced use cases.
-    \row
-        \li QSoundEffect
-        \li The SoundEffect QML type was public and accessible in Qt Multimeda Kit,
-           and now the C++ version is also available.  If you managed to use the
-           private class previously, you'll need to update your code.
-    \row
-        \li Camera controls
-        \li A large number of the camera controls (QCameraImageProcessingControl,
-           QCameraFocusControl etc) have been updated to address a number of
-           design flaws.  If you have previously been using these classes, you
-           should check the new design.  In particular, a number of discrete
-           accessor methods have been collapsed into parametrized methods, and
-           the range or data type of some parameters has been adjusted.
-
-\endtable
-
-*/
diff --git a/doc/src/classic.css b/doc/src/classic.css
deleted file mode 100644
index b8cae8e..0000000
--- a/doc/src/classic.css
+++ /dev/null
@@ -1,284 +0,0 @@
-BODY,H1,H2,H3,H4,H5,H6,P,CENTER,TD,TH,UL,DL,DIV {
-  font-family: Arial, Geneva, Helvetica, sans-serif;
-}
-H1 {
-  text-align: center;
-  font-size: 160%;
-}
-H2 {
-  font-size: 120%;
-}
-H3 {
-  font-size: 100%;
-}
-
-h3.fn,span.fn
-{
-  background-color: #eee;
-  border-width: 1px;
-  border-style: solid;
-  border-color: #ddd;
-  font-weight: bold;
-  padding: 6px 0px 6px 10px;
-  margin: 42px 0px 0px 0px;
-}
-
-hr {
-  border: 0;
-  color: #a0a0a0;
-  background-color: #ccc;
-  height: 1px;
-  width: 100%;
-  text-align: left;
-  margin: 34px 0px 34px 0px;
-}
-
-table.valuelist {
-	border-width: 1px 1px 1px 1px;
-	border-style: solid;
-	border-color: #dddddd;
-	border-collapse: collapse;
-	background-color: #f0f0f0;
-}
-
-table.indextable {
-	border-width: 1px 1px 1px 1px;
-	border-style: solid;
-	border-collapse: collapse;
-	background-color: #f0f0f0;
-    border-color:#555;
-    font-size: 100%;
-}
-
-table td.largeindex {
-	border-width: 1px 1px 1px 1px;
-	border-collapse: collapse;
-	background-color: #f0f0f0;
-    border-color:#555;
-    font-size: 120%;
-}
-
-table.valuelist th {
-	border-width: 1px 1px 1px 2px;
-	padding: 4px;
-	border-style: solid;
-	border-color: #666;
-    color:white;
-    background-color:#666;
-}
-
-th.titleheader  {
-	border-width: 1px 0px 1px 0px;
-	padding: 2px;
-	border-style: solid;
-	border-color: #666;
-    color:white;
-    background-color:#555;
-    background-image:url('images/gradient.png')};
-    background-repeat: repeat-x;
-    font-size: 100%;
-}
-
-
-th.largeheader {
-	border-width: 1px 0px 1px 0px;
-	padding: 4px;
-	border-style: solid;
-	border-color: #444;
-    color:white;
-    background-color:#555555;
-    font-size: 120%;
-}
-
-p {
-
-  margin-left: 4px;
-  margin-top: 8px;
-  margin-bottom: 8px;
-}
-
-a:link
-{
-  color: #0046ad;
-  text-decoration: none
-}
-
-a:visited
-{
-  color: #672967;
-  text-decoration: none
-}
-
-a.obsolete
-{
-  color: #661100;
-  text-decoration: none
-}
-
-a.compat
-{
-  color: #661100;
-  text-decoration: none
-}
-
-a.obsolete:visited
-{
-  color: #995500;
-  text-decoration: none
-}
-
-a.compat:visited
-{
-  color: #995500;
-  text-decoration: none
-}
-
-body
-{
-  background: #ffffff;
-  color: black
-}
-
-table.generic, table.annotated
-{
-  border-width: 1px;
-  border-color:#bbb;
-  border-style:solid;  
-  border-collapse:collapse;
-}
-
-table td.memItemLeft {
-  width: 180px;
-  padding: 2px 0px 0px 8px;
-  margin: 4px;
-  border-width: 1px;
-  border-color: #E0E0E0;
-  border-style: none;
-  font-size: 100%;
-  white-space: nowrap
-}
-
-table td.memItemRight {
-  padding: 2px 8px 0px 8px;
-  margin: 4px;
-  border-width: 1px;
-  border-color: #E0E0E0;
-  border-style: none;
-  font-size: 100%;
-}
-
-table tr.odd {
-  background: #f0f0f0;
-  color: black;
-}
-
-table tr.even {
-  background: #e4e4e4;
-  color: black;
-}
-
-table.annotated th {
-  padding: 3px;
-  text-align: left
-}
-
-table.annotated td {
-  padding: 3px;
-}
-
-table tr pre
-{
-  padding-top: 0px;
-  padding-bottom: 0px;
-  padding-left: 0px;
-  padding-right: 0px;
-  border: none;
-  background: none
-}
-
-tr.qt-style
-{
-  background: #96E066;
-  color: black
-}
-
-body pre
-{
-  padding: 0.2em;
-  border: #e7e7e7 1px solid;
-  background: #f1f1f1;
-  color: black
-}
-
-table tr.qt-code pre
-{
-  padding: 0.2em;
-  border: #e7e7e7 1px solid;
-  background: #f1f1f1;
-  color: black
-}
-
-span.preprocessor, span.preprocessor a
-{
-  color: darkblue;
-}
-
-span.comment
-{
-  color: darkred;
-  font-style: italic
-}
-
-span.string,span.char
-{
-  color: darkgreen;
-}
-
-.title
-{
-    text-align: center
-}
-
-.subtitle
-{
-    font-size: 0.8em
-}
-
-.small-subtitle
-{
-    font-size: 0.65em
-}
-
-.qmlitem {
-    padding: 0;
-}
-
-.qmlname {
-    white-space: nowrap;
-}
-
-.qmltype {
-    text-align: center;
-    font-size: 160%;
-}
-
-.qmlproto {
-    background-color: #eee;
-    border-width: 1px;
-    border-style: solid;
-    border-color: #ddd;
-    font-weight: bold;
-    padding: 6px 10px 6px 10px;
-    margin: 42px 0px 0px 0px;
-}
-
-.qmlreadonly {
-    float: right;
-    color: red
-}
-
-.qmldoc {
-}
-
-*.qmlitem p {
-}
diff --git a/doc/src/examples/audiodevices.qdoc b/doc/src/examples/audiodevices.qdoc
deleted file mode 100644
index 1b28854..0000000
--- a/doc/src/examples/audiodevices.qdoc
+++ /dev/null
@@ -1,43 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/
-**
-** This file is part of the documentation of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:FDL$
-** GNU Free Documentation License
-** Alternatively, this file may be used under the terms of the GNU Free
-** Documentation License version 1.3 as published by the Free Software
-** Foundation and appearing in the file included in the packaging of
-** this file.
-**
-** Other Usage
-** Alternatively, this file may be used in accordance with the terms
-** and conditions contained in a signed written agreement between you
-** and Nokia.
-**
-**
-**
-**
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-/*!
-    \example audiodevices
-    \title Audio Devices Example
-    \ingroup audio_examples
-    \brief The Audio Devices example shows the application of the audio devices APIs
-
-
-    This example shows how to create a simple application to list and test
-    the configuration for the various audio devices available on the device
-    or machine. This is done using the QtMobility Multimedia API.
-
-    \image audiodevices.png
-
-*/
-
-
diff --git a/doc/src/examples/audioengine.qdoc b/doc/src/examples/audioengine.qdoc
deleted file mode 100644
index 24067cf..0000000
--- a/doc/src/examples/audioengine.qdoc
+++ /dev/null
@@ -1,39 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/
-**
-** This file is part of the documentation of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:FDL$
-** GNU Free Documentation License
-** Alternatively, this file may be used under the terms of the GNU Free
-** Documentation License version 1.3 as published by the Free Software
-** Foundation and appearing in the file included in the packaging of
-** this file.
-**
-** Other Usage
-** Alternatively, this file may be used in accordance with the terms
-** and conditions contained in a signed written agreement between you
-** and Nokia.
-**
-**
-**
-**
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-/*!
-    \example audioengine
-    \title AudioEngine Example
-    \ingroup audioengine_examples
-    \brief The Audio Engine example demonstrates 3D sound control using
-    the QtAudioEngine API.
-
-    \image audioengine.png
-
-*/
-
-
diff --git a/doc/src/examples/audioinput.qdoc b/doc/src/examples/audioinput.qdoc
deleted file mode 100644
index 9a0ec5e..0000000
--- a/doc/src/examples/audioinput.qdoc
+++ /dev/null
@@ -1,36 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/
-**
-** This file is part of the documentation of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:FDL$
-** GNU Free Documentation License
-** Alternatively, this file may be used under the terms of the GNU Free
-** Documentation License version 1.3 as published by the Free Software
-** Foundation and appearing in the file included in the packaging of
-** this file.
-**
-** Other Usage
-** Alternatively, this file may be used in accordance with the terms
-** and conditions contained in a signed written agreement between you
-** and Nokia.
-**
-**
-**
-**
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-/*!
-    \example audioinput
-    \title Audio Input Example
-    \ingroup audio_examples
-    \brief The Audio Input Example shows the use of the QAudioInput class.
-
-*/
-
-
diff --git a/doc/src/examples/audiooutput.qdoc b/doc/src/examples/audiooutput.qdoc
deleted file mode 100644
index 988d489..0000000
--- a/doc/src/examples/audiooutput.qdoc
+++ /dev/null
@@ -1,38 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/
-**
-** This file is part of the documentation of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:FDL$
-** GNU Free Documentation License
-** Alternatively, this file may be used under the terms of the GNU Free
-** Documentation License version 1.3 as published by the Free Software
-** Foundation and appearing in the file included in the packaging of
-** this file.
-**
-** Other Usage
-** Alternatively, this file may be used in accordance with the terms
-** and conditions contained in a signed written agreement between you
-** and Nokia.
-**
-**
-**
-**
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-/*!
-    \example audiooutput
-    \title Audio Output Example
-    \ingroup audio_examples
-    \brief The Audio Output Example show the use of the QAudioOutput API.
-
-
-
-*/
-
-
diff --git a/doc/src/examples/audiorecorder.qdoc b/doc/src/examples/audiorecorder.qdoc
deleted file mode 100644
index 25fe079..0000000
--- a/doc/src/examples/audiorecorder.qdoc
+++ /dev/null
@@ -1,104 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/
-**
-** This file is part of the documentation of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:FDL$
-** GNU Free Documentation License
-** Alternatively, this file may be used under the terms of the GNU Free
-** Documentation License version 1.3 as published by the Free Software
-** Foundation and appearing in the file included in the packaging of
-** this file.
-**
-** Other Usage
-** Alternatively, this file may be used in accordance with the terms
-** and conditions contained in a signed written agreement between you
-** and Nokia.
-**
-**
-**
-**
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-/*!
-    \example audiorecorder
-    \title Audio Recorder Example
-    \ingroup audio_examples
-    \brief The Audio Recorder Example shows how to create a simple audio recorder.
-
-    It demonstrates the discovery of the supported devices and codecs and the use
-    of recording functions in the QAudioRecorder class.
-
-    We display a window for the user to select the appropriate audio input,
-    codec, container, and sample rate. Allow a setting of either quality or
-    bitrate. Finally, the output file can be selected and recording can be
-    started.
-
-    The lists are setup using the \l{QAudioRecorder::audioInputs()}{audioInputs()},
-    \l{QAudioRecorder::supportedAudioCodecs()}{supportedAudioCodecs()},
-    \l{QAudioRecorder::supportedContainers()}{supportedContainers()},
-    \l{QAudioRecorder::supportedContainers()}{supportedContainers()}, and
-    \l{QAudioRecorder::supportedAudioSampleRates()}{supportedAudioSampleRates()}
-    methods. The quality slider is setup from 0 (zero) to
-    \l{QtMultimedia::VeryHighQuality} with a default value of
-    \l{QtMultimedia::NormalQuality}, while the bitrates are hardcoded
-    into the list.
-
-    \image audiorecorder.png
-
-    To record audio we simply create a QAudioRecorder object.
-
-    \code
-    audioRecorder = new QAudioRecorder(this);
-    \endcode
-
-    And setup the lists as described above. The text on the record and pause
-    buttons are toggled depending on the \l{QMediaRecorder::State}{state} of
-    the \c audioRecorder object. This means that if the state is
-    \l{QMediaRecorder::StoppedState} then the button text will be "Record" and
-    "Pause". In \l{QMediaRecorder::RecordingState} the record button will have
-    the text "Stop", and in \l{QMediaRecorder::PausedState} the pause button
-    will have the text "Resume".
-
-    Pressing the buttons will also result in a toggle based on the state. If
-    recording is stopped, then pressing the record button will setup the
-    \l{QAudioEncoderSettings} based on the values of the selection lists,
-    will set the encoding settings and container on the \c audioRecorder
-    object, and start recording using the
-    \l{QMediaRecorder::record()}{record()} method.
-
-    \code
-        QAudioEncoderSettings settings;
-        settings.setCodec(boxValue(ui->audioCodecBox).toString());
-        settings.setSampleRate(boxValue(ui->sampleRateBox).toInt());
-        settings.setBitRate(boxValue(ui->bitrateBox).toInt());
-        settings.setQuality(QtMultimedia::EncodingQuality(ui->qualitySlider->value()));
-        settings.setEncodingMode(ui->constantQualityRadioButton->isChecked() ?
-                                 QtMultimedia::ConstantQualityEncoding :
-                                 QtMultimedia::ConstantBitRateEncoding);
-
-        QString container = boxValue(ui->containerBox).toString();
-
-        audioRecorder->setEncodingSettings(settings, QVideoEncoderSettings(), container);
-        audioRecorder->record();
-    \endcode
-
-    While recording, the status bar of the application is updated with duration information
-    from the \l{QMediaRecorder::durationChanged()}{durationChanged} signal from the
-    \c audioRecorder object.
-
-    \code
-    ui->statusbar->showMessage(tr("Recorded %1 sec").arg(duration / 1000));
-    \endcode
-
-
-
-
-*/
-
-
diff --git a/doc/src/examples/camera.qdoc b/doc/src/examples/camera.qdoc
deleted file mode 100644
index bce7747..0000000
--- a/doc/src/examples/camera.qdoc
+++ /dev/null
@@ -1,80 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/
-**
-** This file is part of the documentation of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:FDL$
-** GNU Free Documentation License
-** Alternatively, this file may be used under the terms of the GNU Free
-** Documentation License version 1.3 as published by the Free Software
-** Foundation and appearing in the file included in the packaging of
-** this file.
-**
-** Other Usage
-** Alternatively, this file may be used in accordance with the terms
-** and conditions contained in a signed written agreement between you
-** and Nokia.
-**
-**
-**
-**
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-
-
-/*!
-
-\example camera
-\title  Camera Example
-\ingroup camera_examples
-\brief  The Camera Example shows how to use the API to capture a still image
-or video.
-
-
-
-The Camera Example demonstrates how you can use QtMultimedia to implement
-some basic Camera functionality to take still images and record video clips
-with audio.
-
-A Camera class is created that will act as our Camera. It has a user interface,
-control functions, setting values and a means of defining the location where
-the image or video clip is to be saved. It will also store the image and video
-settings.
-
-The Camera class contains an instance of \l {QCamera}, the API class interface to
-the hardware. It also has an instance of \l {QCameraImageCapture} to take still images
-and an instance of \l {QMediaRecorder} to record video. It also contains the user
-interface object.
-
-The Camera constructor does some basic initialization. The camera object is
-set to '0', the user interface is initialized and UI signal are connected to
-slots that react to the triggering event. However, most of the work is done when
-the \e{setCamera()} function is called, passing in a \l {QByteArray}.
-
-\e{setCamera()} sets up various connections between the user interface and the functionality
-of the Camera class using signals and slots. It also instantiates and initializes the \l {QCamera},
-\l {QCameraImageCapture} and \l {QMediaRecorder} objects mentioned above. The still
-and video recording visual tabs are enabled and finally the
-\l {QCamera::start()}{start()} function of the \l{QCamera} object is called.
-
-Now that the camera is ready for user commands it waits for a suitable event.
-Such an event will be the key press of either the \l {Qt::Key_CameraFocus} or
-\l {Qt::Key_Camera} buttons on the application window. Camera focus will
-simply display the viewfinder and lock the camera settings. Key_Camera will
-either call \e{takeImage()} if the \l {QCamera::captureMode()}{captureMode()}
-is QCamera::CaptureStillImage, or if the capture mode is for video then one
-of two actions will occur. If the recording state shows that we are currently
-recording then the \e{stop()} function is called resulting in a call to
-\l {QCamera::stop()}, whereas if we are not recording then a video recording
-is started with a call to \l {QMediaRecorder::record()}.
-
-\image camera-example.png
-
-*/
-
-
diff --git a/doc/src/examples/declarative-camera.qdoc b/doc/src/examples/declarative-camera.qdoc
deleted file mode 100644
index 7219e85..0000000
--- a/doc/src/examples/declarative-camera.qdoc
+++ /dev/null
@@ -1,69 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/
-**
-** This file is part of the documentation of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:FDL$
-** GNU Free Documentation License
-** Alternatively, this file may be used under the terms of the GNU Free
-** Documentation License version 1.3 as published by the Free Software
-** Foundation and appearing in the file included in the packaging of
-** this file.
-**
-** Other Usage
-** Alternatively, this file may be used in accordance with the terms
-** and conditions contained in a signed written agreement between you
-** and Nokia.
-**
-**
-**
-**
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-/*!
-\example declarative-camera
-\title QML Camera Example
-\ingroup camera_examples_qml
-
-\brief  The Camera Example shows how to use the API to capture a still image
-or video.
-
-\image qml-camera.png
-
-This example demonstrates how to use the Qt Multimedia QML API to access
-camera functions. It shows how to change settings and to capture images.
-
-Most of the QML code supports the user interface for this application with the
-camera types being mostly found in \e {declarative-camera.qml} and
-\e {CaptureControls.qml}.
-
-In \e {declarative-camera.qml} the \l Camera is initialized with an id
-of \e {camera}, a photo preview is setup, states are implemented for image
-preview or capture and \l CaptureControls is initialized. The initial
-\e state is \e PhotoCapture. \l CameraCapture includes a handler, \e onImageCaptured,
-for the \l {imageCaptured} signal. The handler sets up the application to process
-the preview including a change in the user interface state. The \l PhotoPreview
-becomes visible with any key press being picked up by the handler
-in PhotoPreview and returning the state to \e PhotoCapture.
-
-\e CaptureControls, which is implemented in \e {CaptureControls.qml},
-generates a column on the right hand side of the screen which includes control
-buttons for \e focus (not initially visible), \e {capture}, \e {flash modes},
-\e {white balance}, \e {exposure compensation}, and if a preview is
-available a \e {preview} button. The last button exits from the application.
-
-When the Capture button is pressed the \e onClicked handler calls
-\l {Camera::captureImage()}{captureImage()}
-
-
-
-
-
-
-
-*/
diff --git a/doc/src/examples/declarative-radio.qdoc b/doc/src/examples/declarative-radio.qdoc
deleted file mode 100644
index d56379f..0000000
--- a/doc/src/examples/declarative-radio.qdoc
+++ /dev/null
@@ -1,35 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/
-**
-** This file is part of the documentation of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:FDL$
-** GNU Free Documentation License
-** Alternatively, this file may be used under the terms of the GNU Free
-** Documentation License version 1.3 as published by the Free Software
-** Foundation and appearing in the file included in the packaging of
-** this file.
-**
-** Other Usage
-** Alternatively, this file may be used in accordance with the terms
-** and conditions contained in a signed written agreement between you
-** and Nokia.
-**
-**
-**
-**
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-/*!
-    \example declarative-radio
-    \title Declarative Radio Example
-
-
-*/
-
-
diff --git a/doc/src/examples/player.qdoc b/doc/src/examples/player.qdoc
deleted file mode 100644
index b35a74c..0000000
--- a/doc/src/examples/player.qdoc
+++ /dev/null
@@ -1,96 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/
-**
-** This file is part of the documentation of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:FDL$
-** GNU Free Documentation License
-** Alternatively, this file may be used under the terms of the GNU Free
-** Documentation License version 1.3 as published by the Free Software
-** Foundation and appearing in the file included in the packaging of
-** this file.
-**
-** Other Usage
-** Alternatively, this file may be used in accordance with the terms
-** and conditions contained in a signed written agreement between you
-** and Nokia.
-**
-**
-**
-**
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-/*!
-    \example player
-    \title Media Player Example
-    \ingroup video_examples
-
-
-    This example creates a simple multimedia player. We can play audio and
-    or video files using various codecs.
-
-    The example uses a QMediaPlayer object passed into a QVideoWidget to
-    control the video output. To give the application playlist capability
-    we also use a QPlayList object.
-
-    To activate the various functions such as play and stop on the dialog
-    we connect clicked() signals to slots that emit the play() and stop()
-    signals and in turn which we connect to the play() and stop() slots in
-    QMediaPlayer.
-
-    \code
-        connect(controls, SIGNAL(play()), player, SLOT(play()));
-        connect(controls, SIGNAL(pause()), player, SLOT(pause()));
-        connect(controls, SIGNAL(stop()), player, SLOT(stop()));
-    \endcode
-
-    We can get the volume (and set our user interface representation)
-
-    \code
-        controls->setVolume(player->volume());
-    \endcode
-
-    and we can make widget 'volume' changes change the volume
-
-    \code
-        connect(controls, SIGNAL(changeVolume(int)), player, SLOT(setVolume(int)));
-    \endcode
-
-    The example also allows us to change various video properties by means
-    of the QVideoWidget object. We can go to Full Screen mode with a single
-    button click, and back again. Or if we press the "Color Options" dialog
-    button we can have access to more subtle influences. The dialog has a
-    set of sliders so that we can change the brightness, contrast, hue and
-    saturation of the video being watched. The connect() statements are in
-    pairs so that changes to either the user interface widget (the relevant
-    slider) or the QVideoWidget object will update the other object.
-
-    \code
-            connect(brightnessSlider, SIGNAL(sliderMoved(int)), videoWidget, 
-                SLOT(setBrightness(int)));
-            connect(videoWidget, SIGNAL(brightnessChanged(int)), 
-                brightnessSlider, SLOT(setValue(int)));
-
-            connect(contrastSlider, SIGNAL(sliderMoved(int)), videoWidget, 
-                SLOT(setContrast(int)));
-            connect(videoWidget, SIGNAL(contrastChanged(int)), contrastSlider, 
-                SLOT(setValue(int)));
-
-            connect(hueSlider, SIGNAL(sliderMoved(int)), videoWidget, 
-                SLOT(setHue(int)));
-            connect(videoWidget, SIGNAL(hueChanged(int)), hueSlider, 
-                SLOT(setValue(int)));
-
-            connect(saturationSlider, SIGNAL(sliderMoved(int)), videoWidget, 
-                SLOT(setSaturation(int)));
-            connect(videoWidget, SIGNAL(saturationChanged(int)), 
-                saturationSlider, SLOT(setValue(int)));
-    \endcode
-
-*/
-
diff --git a/doc/src/examples/qmlvideo.qdoc b/doc/src/examples/qmlvideo.qdoc
deleted file mode 100644
index 47afeb9..0000000
--- a/doc/src/examples/qmlvideo.qdoc
+++ /dev/null
@@ -1,148 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/
-**
-** This file is part of the documentation of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:FDL$
-** GNU Free Documentation License
-** Alternatively, this file may be used under the terms of the GNU Free
-** Documentation License version 1.3 as published by the Free Software
-** Foundation and appearing in the file included in the packaging of
-** this file.
-**
-** Other Usage
-** Alternatively, this file may be used in accordance with the terms
-** and conditions contained in a signed written agreement between you
-** and Nokia.
-**
-**
-**
-**
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-/*!
-\example video/qmlvideo
-\title QML Video Example
-\ingroup video_examples_qml
-
-\brief The QML Video Example demonstrates the various manipulations (move;
-resize; rotate; change aspect ratio) which can be applied to QML \l{VideoOutput}
-items.
-
-\section1 Overview
-
-This example demonstrates the various manipulations (move; resize; rotate;
-change aspect ratio) which can be applied to QML \l{VideoOutput} items.
-
-It also shows how native code can be combined with QML to implement more
-advanced functionality - in this case, C++ code is used to calculate the QML
-frame rate.  This value is rendered in QML in a semi-transparent item
-overlaid on the video content.
-
-The following image shows the application executing the video-overlay scene,
-which creates a dummy overlay item (just a semi-transparent \l{Rectangle}),
-which moves across the \l{VideoOutput} item.
-
-\image qmlvideo-overlay.png
-
-\section1 Application structure
-
-The \l{video/qmlvideo/qml/qmlvideo/main.qml} file creates a UI which includes
-the following items:
-
-\list
-    \li Two \l{video/qmlvideo/qml/qmlvideo/Button.qml}{Button} instances, each
-       of which displays a filename, and can be used to launch a
-       \l{video/qmlvideo/qml/qmlvideo/FileBrowser.qml}{FileBrowser}
-    \li An exit \l{video/qmlvideo/qml/qmlvideo/Button.qml}{Button}
-    \li A \l{video/qmlvideo/qml/qmlvideo/SceneSelectionPanel.qml}{SceneSelectionPanel},
-       which is a flickable list displaying the available scenes
-    \li At the lower left, an item which displays the QML repainting rate - the
-       upper number is the instantaneous frame rate and the lower number is the
-       average over the past second.
-\endlist
-
-\image qmlvideo-menu.png
-
-Each scene in the flickable list is implemented in its own QML file - for
-example the video-basic scene (which just displays a static \l{VideoOutput}
-in the center of the screen) is implemented in the
-\l{video/qmlvideo/qml/qmlvideo/VideoBasic.qml}{VideoBasic.qml} file.  As you
-can see from the code, this makes use of a type of inheritance: a
-\l{video/qmlvideo/qml/qmlvideo/VideoBasic.qml}{VideoBasic} item ...
-
-\quotefromfile video/qmlvideo/qml/qmlvideo/VideoBasic.qml
-\skipto import
-\printuntil /^\}/
-
-... is-a
-\l{video/qmlvideo/qml/qmlvideo/SceneBasic.qml}{SceneBasic} ...
-
-\quotefromfile examples/video/qmlvideo/qml/qmlvideo/SceneBasic.qml
-\skipto import
-\printuntil contentType
-\dots
-\skipto Content
-\printuntil content
-\dots
-\skipto }
-\printuntil /^\}/
-
-... which is-a
-\l{video/qmlvideo/qml/qmlvideo/Scene.qml}{Scene}:
-
-\quotefromfile video/qmlvideo/qml/qmlvideo/Scene.qml
-\skipto import
-\printuntil root
-\dots
-\skipto property QtObject content
-\printuntil content
-\dots
-\skipto Button
-\printuntil /^\}/
-
-\l{video/qmlvideo/qml/qmlvideo/SceneBasic.qml}{SceneBasic} describes the
-structure and behaviour of the scene, but is agnostic of the type of content
-which will be displayed - this is abstracted by
-\l{video/qmlvideo/qml/qmlvideo/Content.qml}{Content}.
-
-This pattern allows us to define a particular use case (in this case, simply
-display a static piece of content), and then instantiate that use case for
-both video content
-(\l{video/qmlvideo/qml/qmlvideo/VideoBasic.qml}{VideoBasic}) and cameracontent
-(\l{video/qmlvideo/qml/qmlvideo/CameraBasic.qml}{CameraBasic}).  This approach
-is used to implement many of the other scenes - for example, "repeatedly slide
-the content from left to right and back again" is implemented by
-\l{video/qmlvideo/qml/qmlvideo/SceneMove.qml}{SceneMove}, on which
-\l{video/qmlvideo/qml/qmlvideo/VideoMove.qml}{VideoMove} and
-\l{video/qmlvideo/qml/qmlvideo/CameraMove.qml}{CameraMove} are based.
-
-Depending on the value of the contentType property in the top-level scene
-instance, the embedded
-\l{video/qmlvideo/qml/qmlvideo/Content.qml}{Content} item creates either a
-\l{MediaPlayer} or a \l{Camera} item.
-
-\section1 Calculating and displaying QML painting rate
-
-\input examples/video-qml-paint-rate.qdocinc
-
-All that remains is to connect the afterRendering() signal of the QQuickView
-object to a JavaScript function, which will eventually call frequencyItem.notify():
-
-\quotefromfile video/qmlvideo/main.cpp
-\skipto QmlApplicationViewer
-\printuntil ;
-\dots
-\skipto QQuickItem
-\printuntil ;
-\dots
-\skipto QObject::connect
-\printuntil SLOT(qmlFramePainted()));
-
-*/
-
diff --git a/doc/src/examples/qmlvideofx.qdoc b/doc/src/examples/qmlvideofx.qdoc
deleted file mode 100644
index da713f3..0000000
--- a/doc/src/examples/qmlvideofx.qdoc
+++ /dev/null
@@ -1,223 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/
-**
-** This file is part of the documentation of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:FDL$
-** GNU Free Documentation License
-** Alternatively, this file may be used under the terms of the GNU Free
-** Documentation License version 1.3 as published by the Free Software
-** Foundation and appearing in the file included in the packaging of
-** this file.
-**
-** Other Usage
-** Alternatively, this file may be used in accordance with the terms
-** and conditions contained in a signed written agreement between you
-** and Nokia.
-**
-**
-**
-**
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-/*!
-\example video/qmlvideofx
-\title QML Video Shader Effects Example
-\ingroup video_examples_qml
-\ingroup camera_examples_qml
-
-\brief The QML Video Shader Effects Example shows how \l {ShaderEffect}
-can be used to apply postprocessing effects, expressed in \c GLSL, to video
-and camera viewfinder content.
-
-\section1 Overview
-
-This example shows how a \l {ShaderEffectItem} can be used to apply
-postprocessing effects, expressed in GLSL, to QML \l {VideoOutput} items.
-
-It also shows how native code can be combined with QML to implement more
-advanced functionality - in this case, C++ code is used to calculate the QML
-frame rate.  This value is rendered in QML in a semi-transparent item
-overlaid on the video content.
-
-Finally, this application demonstrates the use of different top-level QML
-files to handle different physical screen sizes.  On small-screen devices,
-menus are by default hidden, and only appear when summoned by a gesture.
-Large-screen devices show a more traditional layout in which menus are
-displayed around the video content pane.
-
-The following screenshots show shader effects being applied.  In each case,
-the effect is implemented using a fragment shader.
-
-Here we see an edge detection algorithm being applied to a video clip
-(\l{http://orange.blender.org/}{Elephant's Dream from blender.org}).
-\image qmlvideofx-video-edgedetection.png
-
-This image shows a page curl effect, applied to the same video clip.
-\image qmlvideofx-video-pagecurl.png
-
-Here we see a 'glow' effect (edge detection plus colour quantization) being
-applied to the camera viewfinder.
-\image qmlvideofx-camera-glow.png
-
-This image shows a 'lens magnification' effect applied to the viewfinder.
-\image qmlvideofx-camera-magnify.png
-
-The application includes many more effects than the ones shown here - look
-for Effect*.qml files in the list above to see the full range.
-
-\section1 Application structure
-
-Shader effects can be applied to video or viewfinder content using
-\l{ShaderEffectItem}, as shown in the following example, which applies
-a wiggly effect to the content:
-
-\code
-import QtQuick 2.0
-import QtMultimedia 5.0
-
-Rectangle {
-    width: 300
-    height: 300
-    color: "black"
-
-    MediaPlayer {
-        id: mediaPlayer
-        source: "test.mp4"
-        playing: true
-    }
-
-    VideoOutput {
-        id: video
-        anchors.fill: parent
-        source: mediaPlayer
-    }
-
-    ShaderEffect {
-        property variant source: ShaderEffectSource { sourceItem: video; hideSource: true }
-        property real wiggleAmount: 0.005
-        anchors.fill: video
-
-        fragmentShader: "
-            varying highp vec2 qt_TexCoord0;
-            uniform sampler2D source;
-            uniform highp float wiggleAmount;
-            void main(void)
-            {
-                highp vec2 wiggledTexCoord = qt_TexCoord0;
-                wiggledTexCoord.s += sin(4.0 * 3.141592653589 * wiggledTexCoord.t) * wiggleAmount;
-                gl_FragColor = texture2D(source, wiggledTexCoord.st);
-            }
-        "
-    }
-}
-\endcode
-
-In this application, the usage of the \l{ShaderEffect} and \l{VideoOutput}
-types is a bit more complicated, for the following reasons:
-
-\list
-    \li Each effect can be applied to either a \l{VideoOutput} or an
-       \l{Image} item, so the type of the source item must be abstracted away
-       from the effect implementation
-    \li For some effects (such as the edge detection and glow examples shown in
-       the screenshots above), the transformation is applied only to pixels to
-       the left of a dividing line - this allows the effect to be easily
-       compared with the untransformed image on the right
-    \li Most effects have one or more parameters which can be modified by the
-       user - these are controlled by sliders in the UI which are connected
-       to uniform values passed into the GLSL code
-\endlist
-
-The abstraction of source item type is achieved by the
-\l{video/qmlvideofx/qml/qmlvideofx/Content.qml}{Content}, which uses a
-\l{Loader} to create either a \l{MediaPlayer}, \l{Camera} or \l{Image}:
-
-\quotefromfile video/qmlvideofx/qml/qmlvideofx/Content.qml
-\skipto import
-\printuntil {
-\dots
-\skipto Loader {
-\printuntil }
-\dots
-\skipto function openImage
-\printuntil "ContentImage.qml"
-\skipto contentLoader.item.source
-\printuntil path
-\skipto }
-\printuntil }
-\skipto function openVideo
-\printuntil "ContentVideo.qml"
-\skipto contentLoader.item.mediaSource
-\printuntil path
-\skipto }
-\printuntil }
-\skipto function openCamera
-\printuntil "ContentCamera.qml"
-\skipto }
-\printuntil }
-\skipto /^\}/
-\printuntil }
-
-Each effect is implemented as a QML item which is based on the
-\l{video/qmlvideofx/qml/qmlvideofx/Effect.qml}{Effect}, which in turn
-is based on the \l{ShaderEffect}:
-
-\quotefromfile video/qmlvideofx/qml/qmlvideofx/Effect.qml
-\skipto import
-\printuntil /^\}/
-
-The interface of the \l Effect allows for derived effects to specify the
-number of parameters which they support (and therefore the number of sliders
-which should be displayed), and whether a vertical dividing line should be drawn
-between transformed and untransformed image regions.  As an example, here is the
-implementation of the pixelation effect.  As you can see, the pixelation effect
-supports one parameter (which controls the pixelation granularity), and states
-that the divider should be displayed.
-
-\quotefromfile video/qmlvideofx/qml/qmlvideofx/EffectPixelate.qml
-\skipto import
-\printuntil /^\}/
-
-The main.qml file shows a
-\l{video/qmlvideofx/qml/qmlvideofx/FileOpen.qml}{FileOpen}, which allows
-the user to select the input source and an
-\l{video/qmlvideofx/qml/qmlvideofx/EffectSelectionPanel.qml}{EffectSelectionPanel}
-item, which lists each of the available shader effects.  As described above, a
-\l{video/qmlvideofx/qml/qmlvideofx/Content.qml}{Content} item is used to load the
-appropriate input and effect type.  A
-\l{video/qmlvideofx/qml/qmlvideofx/Divider.qml}{Divider} item draws the
-vertical dividing line, which can be dragged left / right by the user.  Finally,
-a \l{video/qmlvideofx/qml/qmlvideofx/ParameterPanel.qml}{ParameterPanel} item
-renders the sliders corresponding to each effect parameter.
-
-Here is the source selection menu:
-\image qmlvideofx-source-menu.png
-
-And here is the effect selection menu:
-\image qmlvideofx-effects-menu.png
-
-\section1 Calculating and displaying QML painting rate
-
-\input examples/video-qml-paint-rate.qdocinc
-
-All that remains is to connect the afterRendering() signal of the QQuickView
-object to a JavaScript function, which will eventually call frequencyItem.notify():
-
-\quotefromfile video/qmlvideofx/main.cpp
-\skipto QmlApplicationViewer
-\printuntil ;
-\dots
-\skipto QQuickItem
-\printuntil ;
-\dots
-\skipto QObject::connect
-\printuntil SLOT(qmlFramePainted()));
-
-*/
-
diff --git a/doc/src/examples/spectrum.qdoc b/doc/src/examples/spectrum.qdoc
deleted file mode 100644
index 504ccce..0000000
--- a/doc/src/examples/spectrum.qdoc
+++ /dev/null
@@ -1,36 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/
-**
-** This file is part of the documentation of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:FDL$
-** GNU Free Documentation License
-** Alternatively, this file may be used under the terms of the GNU Free
-** Documentation License version 1.3 as published by the Free Software
-** Foundation and appearing in the file included in the packaging of
-** this file.
-**
-** Other Usage
-** Alternatively, this file may be used in accordance with the terms
-** and conditions contained in a signed written agreement between you
-** and Nokia.
-**
-**
-**
-**
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-/*!
-    \example spectrum
-    \title Spectrum Example
-    \ingroup audio_examples
-    \brief The Spectrum Example uses a combination multimedia APIs to process microphone input.
-
-*/
-
-
diff --git a/doc/src/examples/video-qml-paint-rate.qdocinc b/doc/src/examples/video-qml-paint-rate.qdocinc
deleted file mode 100644
index 84098e2..0000000
--- a/doc/src/examples/video-qml-paint-rate.qdocinc
+++ /dev/null
@@ -1,43 +0,0 @@
-The QML painting rate is calculated by the FrequencyMonitor class, which
-turns a stream of events (received via the notify() slot), into an
-instantaneous and an averaged frequency:
-
-\quotefromfile video/snippets/frequencymonitor/frequencymonitor.h
-\skipto class FrequencyMonitor : public QObject
-\printuntil Q_OBJECT
-\skipto Q_PROPERTY(qreal instantaneousFrequency
-\printuntil averageFrequencyChanged)
-\skipto public
-\printuntil :
-\dots
-\skipto static void qmlRegisterType
-\printuntil ;
-\skipto public slots
-\printuntil notify();
-\skipto };
-\printline };
-
-The FrequencyMonitor class is exposed to QML like this
-
-\quotefromfile video/snippets/frequencymonitor/frequencymonitordeclarative.cpp
-\skipto FrequencyMonitor::qmlRegisterType
-\printuntil }
-
-and its data is displayed by defining a QML item called FrequencyItem, like this:
-
-\quotefromfile video/snippets/frequencymonitor/qml/frequencymonitor/FrequencyItem.qml
-\skipto import FrequencyMonitor
-\printuntil id: root
-\dots
-\skipto function notify
-\printuntil id: monitor
-\skipto onAverageFrequencyChanged
-\printuntil {
-\skipto averageFrequencyText
-\printuntil /^\}/
-
-The result looks like this:
-
-\image video-qml-paint-rate.png
-
-
diff --git a/doc/src/examples/videographicsitem.qdoc b/doc/src/examples/videographicsitem.qdoc
deleted file mode 100644
index 7bbc01f..0000000
--- a/doc/src/examples/videographicsitem.qdoc
+++ /dev/null
@@ -1,36 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/
-**
-** This file is part of the documentation of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:FDL$
-** GNU Free Documentation License
-** Alternatively, this file may be used under the terms of the GNU Free
-** Documentation License version 1.3 as published by the Free Software
-** Foundation and appearing in the file included in the packaging of
-** this file.
-**
-** Other Usage
-** Alternatively, this file may be used in accordance with the terms
-** and conditions contained in a signed written agreement between you
-** and Nokia.
-**
-**
-**
-**
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-/*!
-\example videographicsitem
-\title Video Graphics Item Example
-\ingroup video_examples
-
-\brief This example demonstrates how to make a simple video player using the QMediaPlayer
-and QVideoGraphicsItem classes in the Graphics View framework.
-
-*/
diff --git a/doc/src/examples/videowidget.qdoc b/doc/src/examples/videowidget.qdoc
deleted file mode 100644
index 345fdea..0000000
--- a/doc/src/examples/videowidget.qdoc
+++ /dev/null
@@ -1,36 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/
-**
-** This file is part of the documentation of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:FDL$
-** GNU Free Documentation License
-** Alternatively, this file may be used under the terms of the GNU Free
-** Documentation License version 1.3 as published by the Free Software
-** Foundation and appearing in the file included in the packaging of
-** this file.
-**
-** Other Usage
-** Alternatively, this file may be used in accordance with the terms
-** and conditions contained in a signed written agreement between you
-** and Nokia.
-**
-**
-**
-**
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-/*!
-\example videowidget
-\title Video Widget Example
-\ingroup video_examples
-
-\brief This example demonstrates how to make a simple video player using the QMediaPlayer
-and QVideoWidget classes
-
-*/
diff --git a/doc/src/images/annotatedurl.png b/doc/src/images/annotatedurl.png
deleted file mode 100644
index 38d86fb..0000000
Binary files a/doc/src/images/annotatedurl.png and /dev/null differ
diff --git a/doc/src/images/audiodevices.png b/doc/src/images/audiodevices.png
deleted file mode 100644
index 419b40f..0000000
Binary files a/doc/src/images/audiodevices.png and /dev/null differ
diff --git a/doc/src/images/audiorecorder.png b/doc/src/images/audiorecorder.png
deleted file mode 100644
index 6643bf3..0000000
Binary files a/doc/src/images/audiorecorder.png and /dev/null differ
diff --git a/doc/src/images/camera-example.png b/doc/src/images/camera-example.png
deleted file mode 100644
index 12e1b57..0000000
Binary files a/doc/src/images/camera-example.png and /dev/null differ
diff --git a/doc/src/images/codeless.png b/doc/src/images/codeless.png
deleted file mode 100644
index 3901022..0000000
Binary files a/doc/src/images/codeless.png and /dev/null differ
diff --git a/doc/src/images/declarative-radio-example.png b/doc/src/images/declarative-radio-example.png
deleted file mode 100644
index 6c03934..0000000
Binary files a/doc/src/images/declarative-radio-example.png and /dev/null differ
diff --git a/doc/src/images/qml-camera.png b/doc/src/images/qml-camera.png
deleted file mode 100644
index 0cd61f0..0000000
Binary files a/doc/src/images/qml-camera.png and /dev/null differ
diff --git a/doc/src/images/qmlcamera-menu.png b/doc/src/images/qmlcamera-menu.png
deleted file mode 100644
index b2d7733..0000000
Binary files a/doc/src/images/qmlcamera-menu.png and /dev/null differ
diff --git a/doc/src/images/qmlvideo-menu.png b/doc/src/images/qmlvideo-menu.png
deleted file mode 100644
index b2d7733..0000000
Binary files a/doc/src/images/qmlvideo-menu.png and /dev/null differ
diff --git a/doc/src/images/qmlvideo-overlay.png b/doc/src/images/qmlvideo-overlay.png
deleted file mode 100644
index f5dc839..0000000
Binary files a/doc/src/images/qmlvideo-overlay.png and /dev/null differ
diff --git a/doc/src/images/qmlvideofx-camera-glow.png b/doc/src/images/qmlvideofx-camera-glow.png
deleted file mode 100644
index aca874b..0000000
Binary files a/doc/src/images/qmlvideofx-camera-glow.png and /dev/null differ
diff --git a/doc/src/images/qmlvideofx-camera-magnify.png b/doc/src/images/qmlvideofx-camera-magnify.png
deleted file mode 100644
index c3156ce..0000000
Binary files a/doc/src/images/qmlvideofx-camera-magnify.png and /dev/null differ
diff --git a/doc/src/images/qmlvideofx-effects-menu.png b/doc/src/images/qmlvideofx-effects-menu.png
deleted file mode 100644
index 507fd73..0000000
Binary files a/doc/src/images/qmlvideofx-effects-menu.png and /dev/null differ
diff --git a/doc/src/images/qmlvideofx-source-menu.png b/doc/src/images/qmlvideofx-source-menu.png
deleted file mode 100644
index 661aaa7..0000000
Binary files a/doc/src/images/qmlvideofx-source-menu.png and /dev/null differ
diff --git a/doc/src/images/qmlvideofx-video-edgedetection.png b/doc/src/images/qmlvideofx-video-edgedetection.png
deleted file mode 100644
index cedb314..0000000
Binary files a/doc/src/images/qmlvideofx-video-edgedetection.png and /dev/null differ
diff --git a/doc/src/images/qmlvideofx-video-pagecurl.png b/doc/src/images/qmlvideofx-video-pagecurl.png
deleted file mode 100644
index 5f5bdfb..0000000
Binary files a/doc/src/images/qmlvideofx-video-pagecurl.png and /dev/null differ
diff --git a/doc/src/images/radio-example.png b/doc/src/images/radio-example.png
deleted file mode 100644
index 2fdb1b2..0000000
Binary files a/doc/src/images/radio-example.png and /dev/null differ
diff --git a/doc/src/images/slideshow-img1.png b/doc/src/images/slideshow-img1.png
deleted file mode 100644
index 72255d6..0000000
Binary files a/doc/src/images/slideshow-img1.png and /dev/null differ
diff --git a/doc/src/images/video-graphics-memory.png b/doc/src/images/video-graphics-memory.png
deleted file mode 100644
index 9479cce..0000000
Binary files a/doc/src/images/video-graphics-memory.png and /dev/null differ
diff --git a/doc/src/images/video-qml-paint-rate.png b/doc/src/images/video-qml-paint-rate.png
deleted file mode 100644
index 1519ff6..0000000
Binary files a/doc/src/images/video-qml-paint-rate.png and /dev/null differ
diff --git a/doc/src/multimedia.qdoc b/doc/src/multimedia.qdoc
deleted file mode 100644
index 2b73fdf..0000000
--- a/doc/src/multimedia.qdoc
+++ /dev/null
@@ -1,183 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/
-**
-** This file is part of the documentation of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:FDL$
-** GNU Free Documentation License
-** Alternatively, this file may be used under the terms of the GNU Free
-** Documentation License version 1.3 as published by the Free Software
-** Foundation and appearing in the file included in the packaging of
-** this file.
-**
-** Other Usage
-** Alternatively, this file may be used in accordance with the terms
-** and conditions contained in a signed written agreement between you
-** and Nokia.
-**
-**
-**
-**
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-/*!
-\page multimediaoverview.html
-\title Multimedia Overview
-\brief A set of APIs for working with audio, video, radio and camera devices.
-
-\ingroup technology-apis
-
-
-\section1 Overview
-
-\section2 Features
-
-Qt Multimedia offers APIs for doing many multimedia related tasks:
-
-\list
-\li Accessing raw audio devices for input and output
-\li Play low latency sound effects
-\li Play media files in playlists (like compressed audio, or video files)
-\li Record audio and compress it
-\li Tune and listen to radio stations, and receive radio program information
-\li Use a camera, including viewfinder, image capture, and movie recording
-\li Play 3D positional audio with \l {Positional Audio} {QtAudioEngine}
-\li Decode audio media files into memory for processing
-\li Accessing video frames or audio buffers as they are played or recorded
-\endlist
-
-\section2 Multimedia Components
-
-All of these tasks can be broadly broken down into four main areas.  More information
-(including background information and class references) are available here:
-
-\list
-\li \l {Audio Overview}
-\li \l {Video Overview}
-\li \l {Camera Overview}
-\li \l {Radio Overview}
-\endlist
-
-\section2 Multimedia Recipes
-For some quick recipes for specific tasks, look at the overviews above and consult this table:
-
-\table 70%
-    \header
-        \li Use case
-        \li Examples
-        \li QML Types
-        \li C++ Classes
-    \row
-        \li Playing a sound effect
-        \li TBD
-        \li \l SoundEffect
-        \li QSoundEffect
-    \row
-        \li Playing low latency audio
-        \li \l{audiooutput}, \l{spectrum}
-        \li
-        \li QAudioOutput
-    \row
-        \li Playing encoded audio (MP3, AAC etc)
-        \li \l{player}
-        \li \l Audio, \l {MediaPlayer}
-        \li QMediaPlayer
-    \row
-        \li Accessing raw audio input data
-        \li \l{spectrum}, \l audioinput
-        \li
-        \li QAudioInput
-    \row
-        \li Recording encoded audio data
-        \li \l audiorecorder
-        \li
-        \li QAudioRecorder
-    \row
-        \li Discovering raw audio devices
-        \li \l audiodevices
-        \li
-        \li QAudioDeviceInfo
-    \row
-        \li Video Playback
-        \li \l {player}, \l {video/qmlvideo}{qmlvideo}, \l{video/qmlvideofx}{qmlvideofx}
-        \li \l MediaPlayer, \l VideoOutput, \l Video
-        \li QMediaPlayer, QVideoWidget, QGraphicsVideoItem
-    \row
-        \li Video Processing
-        \li \l {video/qmlvideofx}{qmlvideofx}
-        \li \l {MediaPlayer}, \l VideoOutput
-        \li QMediaPlayer, QAbstractVideoSurface, QVideoFrame
-    \row
-        \li Listening to the radio
-        \li \l declarative-radio
-        \li \l Radio, \l RadioData
-        \li QRadioTuner, QRadioData
-    \row
-        \li Accessing camera viewfinder
-        \li \l {Camera Example}{camera}, \l declarative-camera
-        \li \l Camera, \l VideoOutput
-        \li QCamera, QVideoWidget, QGraphicsVideoItem
-    \row
-        \li Viewfinder processing
-        \li
-        \li \l Camera, \l VideoOutput
-        \li QCamera, QAbstractVideoSurface, QVideoFrame
-    \row
-        \li Capturing photos
-        \li \l {Camera Example}{camera}, \l declarative-camera
-        \li \l Camera
-        \li QCamera, QCameraImageCapture
-    \row
-        \li Capturing movies
-        \li \l {Camera Example}{camera}, \l declarative-camera
-        \li \l Camera
-        \li QCamera, QMediaRecorder
-    \row
-        \li 3D sound sources
-        \li \l {AudioEngine Example}{Audio Engine}
-        \li \l {AudioEngine}, \l Sound
-        \li
-\endtable
-
-\section1 Limitations
-
-In many cases the Qt Multimedia APIs build upon the multimedia framework of the underlying system.
-This can mean that support for various codec or containers can vary between machines,
-depending on what the end user has installed.
-
-\section1 Advanced Usage
-
-For developers wishing to access some platform specific settings,
-or to port the Qt Multimedia APIs to a new platform or technology,
-see \l{Multimedia Backend Development}.
-
-\section1 Changes from Previous Versions
-
-If you've previously used Qt Multimedia in Qt 4.x, or used Qt Multimedia Kit in Qt Mobility, please see
-\l {Changes in Qt Multimedia} for more information on what has changed, and what you might need to
-change when porting code.
-
-\section1 Reference Documentation
-
-\section2 QML Types
-The following types are accessed by using:
-\qml
-import QtMultimedia 5.0
-\endqml
-\annotatedlist multimedia_qml
-The following types are accessed by using \l {Positional Audio} {QtAudioEngine}:
-\qml
-import QtAudioEngine 1.0
-\endqml
-\annotatedlist multimedia_audioengine
-
-\section2 Multimedia Classes
-
-\annotatedlist multimedia
-
-*/
diff --git a/doc/src/multimediabackend.qdoc b/doc/src/multimediabackend.qdoc
deleted file mode 100644
index 2c359d0..0000000
--- a/doc/src/multimediabackend.qdoc
+++ /dev/null
@@ -1,140 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/
-**
-** This file is part of the documentation of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:FDL$
-** GNU Free Documentation License
-** Alternatively, this file may be used under the terms of the GNU Free
-** Documentation License version 1.3 as published by the Free Software
-** Foundation and appearing in the file included in the packaging of
-** this file.
-**
-** Other Usage
-** Alternatively, this file may be used in accordance with the terms
-** and conditions contained in a signed written agreement between you
-** and Nokia.
-**
-**
-**
-**
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-
-/*!
-
-\title Multimedia Backend Development
-\page multimediabackend.html
-\brief Information for implementing a new multimedia backend.
-\ingroup mobility
-
-\tableofcontents
-
-\section1 Overview
-
-A multimedia backend provides the glue between platform specific libraries, and
-Qt Multimedia. In some cases the available cross-platform Multimedia APIs or
-implementations are not sufficient, or not immediately available on a certain
-platform. Alternatively, the multimedia implementation on a platform might expose
-certain extra properties or functionality that other platforms do not, or a finer
-degree of control might be possible.  For these cases, it is possible to use
-extended controls directly.
-
-In addition, if you plan to port the Qt Multimedia APIs to a new platform, you do
-this by implementing certain control and service classes, as detailed below.
-
-\section1 Extending the API
-
-For the developer who wishes to extend the functionality of the Qt Multimedia
-classes there are several classes of particular importance. The classes
-providing default functionality are QMediaService, QMediaServiceProvider and
-QMediaControl.  Some of these classes are not in the public API since they
-are very seldom useful to application developers.
-
-To extend the Multimedia API you would use the following three classes or
-classes derived from them.
-
-    \list
-    \li QMediaServiceProvider is used by the top level client class to
-    request a service. The top level class knowing what kind of service it needs.
-
-    \li \l QMediaService provides a service and when asked by the top level
-    object, say a component, will return a QMediaControl object.
-
-    \li \l QMediaControl allows the control of the service using a known interface.
-    \endlist
-
-Consider a developer creating, for example, a media player class called MyPlayer.
-It may have special requirements beyond ordinary media players and so may
-need a custom service and a custom control. We can subclass \l QMediaServiceProvider
-to create our MyServiceProvider class. Also we will create a
-MyMediaService, and the MyMediaControl to manipulate the media service.
-
-The MyPlayer object calls MyServiceProvider::requestService() to get an
-instance of MyMediaService. Then the MyPlayer object calls this service
-object it has just received and calling \l {QMediaService::requestControl()}{requestControl()}
-it will receive the control object derived from QMediaControl.
-
-Now we have all the parts necessary for our media application. We have the service
-provider, the service it provides and the control used to manipulate the
-service. Since our MyPlayer object has instances of the service and its
-control then it would be possible for these to be used by associated classes
-that could do additional actions, perhaps with their own control since the
-parameter to requestControl() is a zero-terminated string, \e {const char *},
-for the interface.
-
-\section2 Adding a Media Service Provider
-
-In general, adding a new media service provider is outside the scope of this documentation.
-For best results, consult the existing provider source code, and seek assistance on the relevant
-mailing lists and IRC channels.
-
-\omit
-The base class for creating new service providers is \l{QMediaServiceProvider}.
-The user must implement the \l{QMediaServiceProvider::requestService()}{requestService()}
-function
-
-\code
-    QMediaService* requestService(const QByteArray &type, const QMediaServiceProviderHint &hint);
-\endcode
-
-The details of implementation will depend on the provider. Looking at the
-class \l QMediaServiceProvider for the default implementation. Notice that
-\l {QMediaServiceProvider::requestService()}{requestService()} uses the
-\l QMediaServiceProviderHint to look for the appropriate plugin and then to
-insert it into the plugin map. However, for a specific service provider there
-is probably no need for this approach, it will simply depend on what the
-developer wants to implement.
-
-Other methods that may be overloaded
-\code
-    void releaseService(QMediaService *service);
-
-    QtMediaServices::SupportEstimate hasSupport(const QByteArray &serviceType,
-                                        const QString &mimeType,
-                                        const QStringList& codecs,
-                                        int flags) const;
-
-    QStringList supportedMimeTypes(const QByteArray &serviceType, int flags) const;
-
-    QList<QByteArray> devices(const QByteArray &serviceType) const;
-
-    QString deviceDescription(const QByteArray &serviceType, const QByteArray &device);
-\endcode
-
-The choice of what needs to be done depends on what the developer wishes to do with the service.
-
-\endomit
-
-\section2 Classes for service implementers.
-
-\annotatedlist multimedia_control
-
-*/
-
-
diff --git a/doc/src/plugins/qml-multimedia.qdoc b/doc/src/plugins/qml-multimedia.qdoc
deleted file mode 100644
index 460f08a..0000000
--- a/doc/src/plugins/qml-multimedia.qdoc
+++ /dev/null
@@ -1,229 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/
-**
-** This file is part of the documentation of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:FDL$
-** GNU Free Documentation License
-** Alternatively, this file may be used under the terms of the GNU Free
-** Documentation License version 1.3 as published by the Free Software
-** Foundation and appearing in the file included in the packaging of
-** this file.
-**
-** Other Usage
-** Alternatively, this file may be used in accordance with the terms
-** and conditions contained in a signed written agreement between you
-** and Nokia.
-**
-**
-**
-**
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-/*!
-    \group qml-multimedia
-    \title QML Multimedia Plugin
-    QML Support for the Qt Multimedia API.
-*/
-
-/*!
-    \page qml-multimedia.html
-
-    \title Qt Multimedia QML API
-
-    \brief A QML API for the Qt Multimedia module.
-
-
-    \section1 Overview
-
-    The Qt Multimedia module gives developers a simplified way to use audio and video playback, and access camera functionality. The Multimedia QML API provides a QML friendly interface to these features.
-
-    \section1 Types
-
-    \section2 Audio
-
-    \l Audio is an easy way to add audio playback to a Qt Quick
-    scene. QtMultimedia provides properties for control, methods (functions) and signals.
-
-    The code extract below shows the creation and use of an Audio instance.
-
-    \qml
-
-    import QtQuick 2.0
-    import QtMultimedia 5.0
-    // ...
-
-    Item {
-        width: 640
-        height: 360
-
-        Audio {
-            id: playMusic
-            source: "music.wav"
-        }
-
-        MouseArea {
-            id: playArea
-            anchors.fill: parent
-            onPressed:  { playMusic.play() }
-        }
-    }
-
-    \endqml
-
-    The snippet above shows how the inclusion of \e playMusic enables audio features on the type that contains it. So that when the parent's MouseArea is clicked the \l {Audio::play()}{play()} method of Audio is run. Other typical audio control methods are available such as \l {Audio::pause}{pause()} and \l {Audio::stop()}{stop()}.
-
-    Much of the getting / setting of \l Audio parameters is done through properties. These include
-    \table 70%
-        \header
-            \li Property
-            \li Description
-        \row
-            \li \l {Audio::source}{source}
-            \li The source URL of the media.
-        \row
-            \li \l {Audio::autoLoad}{autoLoad}
-            \li Indicates if loading of media should begin immediately.
-        \row
-            \li \l{Audio::playing}{playing}
-            \li Indicates that the media is playing.
-        \row
-            \li \l {Audio::paused}{paused}
-            \li The media is paused.
-        \row
-            \li \l{Audio::status}{status}
-            \li The status of media loading.
-        \row
-            \li \l{Audio::duration}{duration}
-            \li Amount of time in milliseconds the media will play.
-        \row
-            \li \l{Audio::position}{position}
-            \li Current position in the media in milliseconds of play.
-        \row
-            \li \l{Audio::volume}{volume}
-            \li Audio output volume: from 0.0 (silent) to 1.0 (maximum)
-        \row
-            \li \l{Audio::muted}{muted}
-            \li Indicates audio is muted.
-        \row
-            \li \l{Audio::bufferProgress}{bufferProgress}
-            \li Indicates how full the data buffer is: 0.0 (empty) to 1.0 (full).
-        \row
-            \li \l{Audio::seekable}{seekable}
-            \li Indicates whether the audio position can be changed.
-        \row
-            \li \l{Audio::playbackRate}{playbackRate}
-            \li The rate at which audio is played at as a multiple of the normal rate.
-        \row
-            \li \l{Audio::error}{error}
-            \li An error code for the error state including NoError
-        \row
-            \li \l{Audio::errorString}{errorString}
-            \li A description of the current error condition.
-    \endtable
-
-    The set of signals available allow the developer to create custom behavior when the following events occur,
-
-    \table 70%
-        \header
-            \li Signal
-            \li Description
-        \row
-            \li \l{Audio::playing}{playing}
-            \li Called when playback is started, or when resumed from paused state.
-        \row
-            \li \l{Audio::paused}{paused}
-            \li Called when playback is paused.
-        \row
-            \li \l{Audio::stopped}{stopped}
-            \li Called when playback is stopped.
-        \row
-            \li \l{Audio::error}{error}
-            \li Called when the specified error occurs.
-    \endtable
-
-    \section2 Camera
-
-    \l Camera enables still image and video capture using
-    QML. It has a number of properties that help setting it up.
-
-    The details of using a \l Camera are described in further depth
-    in the \l {Camera Overview} and in the corresponding reference documentation.
-
-    \section2 Video
-
-    Adding video playback, with sound, to a Qt Quick scene is also easy. The process is very similar to that of Audio above, in fact \l {Video} shares many of the property names, methods and signals. Here is the equivalent sample code to implement video playback in a scene
-
-    \qml
-
-    Video {
-        id: video
-        width : 800
-        height : 600
-        source: "video.avi"
-
-        MouseArea {
-            anchors.fill: parent
-            onClicked: {
-                video.play()
-            }
-        }
-
-        focus: true
-        Keys.onSpacePressed: video.paused = !video.paused
-        Keys.onLeftPressed: video.position -= 5000
-        Keys.onRightPressed: video.position += 5000
-    }
-
-    \endqml
-
-    There are similar features like \l {Video::play()}{play()} with new
-    features specific to video.
-
-    In the above sample when the parent of MouseArea is clicked, an area of 800x600 pixels with an id of 'video', the source "video.avi" will play in that area. Notice also that signals for the \l Keys have been defined so that a spacebar will toggle the pause button; the left arrow will move the current position in the video to 5 seconds previously; and the right arrow will advance the current position in the video by 5 seconds.
-
-    Most of the differences will obviously be about video control and information. There are many properties associated with \l {Video}, most of them deal with meta-data, control of the video media and aspects of presentation.
-
-    \section2 SoundEffect
-
-    \l SoundEffect provides a way to play short sound effects, like in video games. Multiple sound effect instances can be played simultaneously.
-    You should use \l Audio for music playback.
-
-    \qml
-
-    import QtQuick 2.0
-    import QtMultimedia 5.0
-
-    Item {
-        width: 640
-        height: 360
-
-        SoundEffect {
-            id: effect
-            source: "test.wav"
-        }
-        MouseArea {
-            id: playArea
-            anchors.fill: parent
-            onPressed:  { effect.play() }
-        }
-    }
-
-    \endqml
-
-
-    In the above sample the sound effect will be played when the MouseArea is clicked.
-
-    For a complete description of this type, see \l SoundEffect
-
-    \section1 Multimedia QML Types
-
-    \annotatedlist multimedia_qml
-*/
-
-
diff --git a/doc/src/qtmultimedia5.qdoc b/doc/src/qtmultimedia5.qdoc
deleted file mode 100644
index f8397ea..0000000
--- a/doc/src/qtmultimedia5.qdoc
+++ /dev/null
@@ -1,42 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/
-**
-** This file is part of the documentation of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:FDL$
-** GNU Free Documentation License
-** Alternatively, this file may be used under the terms of the GNU Free
-** Documentation License version 1.3 as published by the Free Software
-** Foundation and appearing in the file included in the packaging of
-** this file.
-**
-** Other Usage
-** Alternatively, this file may be used in accordance with the terms
-** and conditions contained in a signed written agreement between you
-** and Nokia.
-**
-**
-**
-**
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-/*!
-\qmlmodule QtMultimedia 5
-\title QML import for multimedia
-\brief The import for the QML types in the Qt Multimedia module
-
-\section1 Overview
-
-The identifying string for this component is \e QtMultimedia. Use this in the QML \e import statement.
-
-\section1 QML types
-
-\annotatedlist multimedia_qml
-
-*/
-
diff --git a/doc/src/radiooverview.qdoc b/doc/src/radiooverview.qdoc
deleted file mode 100644
index 4697aa0..0000000
--- a/doc/src/radiooverview.qdoc
+++ /dev/null
@@ -1,89 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/
-**
-** This file is part of the documentation of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:FDL$
-** GNU Free Documentation License
-** Alternatively, this file may be used under the terms of the GNU Free
-** Documentation License version 1.3 as published by the Free Software
-** Foundation and appearing in the file included in the packaging of
-** this file.
-**
-** Other Usage
-** Alternatively, this file may be used in accordance with the terms
-** and conditions contained in a signed written agreement between you
-** and Nokia.
-**
-**
-**
-**
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-/*!
-
-\page radiooverview.html
-\title Radio Overview
-\brief An API to control system radio tuner
-
-The Qt Multimedia API provides a number of radio related classes for control
-over the radio tuner of the system, and gives access to Radio Data System
-(RDS) information for radio stations that broadcasts it.
-
-\section1 Radio Features
-
-The Radio API consists of two separate components. The radio tuner,
-\l QRadioTuner or the \l Radio QML type, which handles control of
-the radio hardware as well as tuning. The other is the radio data
-component, either \l QRadioData or the \l RadioData QML type, which
-gives access to RDS information.
-
-\section1 Radio Implementation Details
-
-The actual level of support depends on the underlying system support. It should
-be noted that only analog radio is supported, and the properties of the radio
-data component will only be populated if the system radio tuner supports RDS.
-
-\section1 Examples
-
-There are two examples showing the usage of the Radio API. One shows how to use
-the QRadioTuner class from C++. The other shows how to implement a similar
-application using QML and \l Radio.
-
-\section2 Radio Example
-
-This image shows the example using the QRadioTuner API.
-
-\image radio-example.png
-
-The example reads the frequency from the radio tuner, and sets the "Got Signal"
-text based on the signal strength. The buttons allow the user to tune and scan
-up and down the frequency band, while the slider to the side allows volume
-adjustments.
-
-Only the FM frequency band is used in this example.
-
-\section2 Declarative Radio Example
-
-\image declarative-radio-example.png
-
-This example has the same functionality of the regular radio example mentioned
-above, but it includes a nice horizontal dial showing the position of the
-current frequency inside the band.
-
-\section1 Reference documentation
-
-\section2 C++ Classes
-
-\annotatedlist multimedia_radio
-
-\section2 QML Types
-
-\annotatedlist multimedia_radio_qml
-
-*/
diff --git a/doc/src/snippets/multimedia-snippets/audio.cpp b/doc/src/snippets/multimedia-snippets/audio.cpp
deleted file mode 100644
index 3ad9e52..0000000
--- a/doc/src/snippets/multimedia-snippets/audio.cpp
+++ /dev/null
@@ -1,251 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/
-**
-** This file is part of the Qt Mobility Components.
-**
-** $QT_BEGIN_LICENSE:LGPL$
-** GNU Lesser General Public License Usage
-** This file may be used under the terms of the GNU Lesser General Public
-** License version 2.1 as published by the Free Software Foundation and
-** appearing in the file LICENSE.LGPL included in the packaging of this
-** file. Please review the following information to ensure the GNU Lesser
-** General Public License version 2.1 requirements will be met:
-** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
-**
-** In addition, as a special exception, Nokia gives you certain additional
-** rights. These rights are described in the Nokia Qt LGPL Exception
-** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
-**
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU General
-** Public License version 3.0 as published by the Free Software Foundation
-** and appearing in the file LICENSE.GPL included in the packaging of this
-** file. Please review the following information to ensure the GNU General
-** Public License version 3.0 requirements will be met:
-** http://www.gnu.org/copyleft/gpl.html.
-**
-** Other Usage
-** Alternatively, this file may be used in accordance with the terms and
-** conditions contained in a signed written agreement between you and Nokia.
-**
-**
-**
-**
-**
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-/* Audio related snippets */
-#include <QFile>
-#include <QTimer>
-#include <QDebug>
-
-#include "qaudiodeviceinfo.h"
-#include "qaudioinput.h"
-#include "qaudiooutput.h"
-#include "qaudioprobe.h"
-#include "qaudiodecoder.h"
-
-class AudioInputExample : public QObject {
-    Q_OBJECT
-public:
-    void setup();
-
-
-public Q_SLOTS:
-    void stopRecording();
-    void stateChanged(QAudio::State newState);
-
-private:
-    //! [Audio input class members]
-    QFile destinationFile;   // class member.
-    QAudioInput* audio; // class member.
-    //! [Audio input class members]
-};
-
-
-void AudioInputExample::setup()
-//! [Audio input setup]
-{
-    destinationFile.setFileName("/tmp/test.raw");
-    destinationFile.open( QIODevice::WriteOnly | QIODevice::Truncate );
-
-    QAudioFormat format;
-    // set up the format you want, eg.
-    format.setSampleRate(8000);
-    format.setChannelCount(1);
-    format.setSampleSize(8);
-    format.setCodec("audio/pcm");
-    format.setByteOrder(QAudioFormat::LittleEndian);
-    format.setSampleType(QAudioFormat::UnSignedInt);
-
-    QAudioDeviceInfo info = QAudioDeviceInfo::defaultInputDevice();
-    if (!info.isFormatSupported(format)) {
-        qWarning()<<"default format not supported try to use nearest";
-        format = info.nearestFormat(format);
-    }
-
-    audio = new QAudioInput(format, this);
-    connect(audio, SIGNAL(stateChanged(QAudio::State)), this, SLOT(stateChanged(QAudio::State)));
-
-    QTimer::singleShot(3000, this, SLOT(stopRecording()));
-    audio->start(&destinationFile);
-    // Records audio for 3000ms
-}
-//! [Audio input setup]
-
-//! [Audio input stop recording]
-void AudioInputExample::stopRecording()
-{
-    audio->stop();
-    destinationFile.close();
-    delete audio;
-}
-//! [Audio input stop recording]
-
-//! [Audio input state changed]
-void AudioInputExample::stateChanged(QAudio::State newState)
-{
-    switch (newState) {
-        case QAudio::StoppedState:
-            if (audio->error() != QAudio::NoError) {
-                // Error handling
-            } else {
-                // Finished recording
-            }
-            break;
-
-        case QAudio::ActiveState:
-            // Started recording - read from IO device
-            break;
-
-        default:
-            // ... other cases as appropriate
-            break;
-    }
-}
-//! [Audio input state changed]
-
-
-class AudioOutputExample : public QObject {
-    Q_OBJECT
-public:
-    void setup();
-
-public Q_SLOTS:
-    void stateChanged(QAudio::State newState);
-
-private:
-    //! [Audio output class members]
-    QFile sourceFile;   // class member.
-    QAudioOutput* audio; // class member.
-    //! [Audio output class members]
-};
-
-
-void AudioOutputExample::setup()
-//! [Audio output setup]
-{
-    sourceFile.setFileName("/tmp/test.raw");
-    sourceFile.open(QIODevice::ReadOnly);
-
-    QAudioFormat format;
-    // Set up the format, eg.
-    format.setSampleRate(8000);
-    format.setChannelCount(1);
-    format.setSampleSize(8);
-    format.setCodec("audio/pcm");
-    format.setByteOrder(QAudioFormat::LittleEndian);
-    format.setSampleType(QAudioFormat::UnSignedInt);
-
-    QAudioDeviceInfo info(QAudioDeviceInfo::defaultOutputDevice());
-    if (!info.isFormatSupported(format)) {
-        qWarning() << "raw audio format not supported by backend, cannot play audio.";
-        return;
-    }
-
-    audio = new QAudioOutput(format, this);
-    connect(audio, SIGNAL(stateChanged(QAudio::State)), this, SLOT(stateChanged(QAudio::State)));
-    audio->start(&sourceFile);
-}
-//! [Audio output setup]
-
-//! [Audio output state changed]
-void AudioOutputExample::stateChanged(QAudio::State newState)
-{
-    switch (newState) {
-        case QAudio::IdleState:
-            // Finished playing (no more data)
-            audio->stop();
-            sourceFile.close();
-            delete audio;
-            break;
-
-        case QAudio::StoppedState:
-            // Stopped for other reasons
-            if (audio->error() != QAudio::NoError) {
-                // Error handling
-            }
-            break;
-
-        default:
-            // ... other cases as appropriate
-            break;
-    }
-}
-//! [Audio output state changed]
-
-void AudioDeviceInfo()
-{
-    //! [Setting audio format]
-    QAudioFormat format;
-    format.setSampleRate(44100);
-    // ... other format parameters
-    format.setSampleType(QAudioFormat::SignedInt);
-
-    QAudioDeviceInfo info(QAudioDeviceInfo::defaultOutputDevice());
-
-    if (!info.isFormatSupported(format))
-        format = info.nearestFormat(format);
-    //! [Setting audio format]
-
-    //! [Dumping audio formats]
-    foreach (const QAudioDeviceInfo &deviceInfo, QAudioDeviceInfo::availableDevices(QAudio::AudioOutput))
-        qDebug() << "Device name: " << deviceInfo.deviceName();
-    //! [Dumping audio formats]
-}
-
-class AudioDecodingExample : public QObject {
-    Q_OBJECT
-public:
-    void decode();
-
-public Q_SLOTS:
-    void stateChanged(QAudio::State newState);
-    void readBuffer();
-};
-
-void AudioDecodingExample::decode()
-{
-    //! [Local audio decoding]
-    QAudioFormat desiredFormat;
-    desiredFormat.setChannelCount(2);
-    desiredFormat.setCodec("audio/x-raw");
-    desiredFormat.setSampleType(QAudioFormat::UnSignedInt);
-    desiredFormat.setSampleRate(48000);
-    desiredFormat.setSampleSize(16);
-
-    QAudioDecoder *decoder = new QAudioDecoder(this);
-    decoder->setAudioFormat(desiredFormat);
-    decoder->setSourceFilename("level1.mp3");
-
-    connect(decoder, SIGNAL(bufferReady()), this, SLOT(readBuffer()));
-    decoder->start();
-
-    // Now wait for bufferReady() signal and call decoder->read()
-    //! [Local audio decoding]
-}
diff --git a/doc/src/snippets/multimedia-snippets/audiorecorder.cpp b/doc/src/snippets/multimedia-snippets/audiorecorder.cpp
deleted file mode 100644
index e2828ac..0000000
--- a/doc/src/snippets/multimedia-snippets/audiorecorder.cpp
+++ /dev/null
@@ -1,213 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/
-**
-** This file is part of the Qt Mobility Components.
-**
-** $QT_BEGIN_LICENSE:LGPL$
-** GNU Lesser General Public License Usage
-** This file may be used under the terms of the GNU Lesser General Public
-** License version 2.1 as published by the Free Software Foundation and
-** appearing in the file LICENSE.LGPL included in the packaging of this
-** file. Please review the following information to ensure the GNU Lesser
-** General Public License version 2.1 requirements will be met:
-** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
-**
-** In addition, as a special exception, Nokia gives you certain additional
-** rights. These rights are described in the Nokia Qt LGPL Exception
-** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
-**
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU General
-** Public License version 3.0 as published by the Free Software Foundation
-** and appearing in the file LICENSE.GPL included in the packaging of this
-** file. Please review the following information to ensure the GNU General
-** Public License version 3.0 requirements will be met:
-** http://www.gnu.org/copyleft/gpl.html.
-**
-** Other Usage
-** Alternatively, this file may be used in accordance with the terms and
-** conditions contained in a signed written agreement between you and Nokia.
-**
-**
-**
-**
-**
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-#include <QtWidgets>
-
-#include <qaudiorecorder.h>
-#include <qmediaservice.h>
-
-#include <QtMultimedia/qaudioformat.h>
-
-#include "audiorecorder.h"
-
-AudioRecorder::AudioRecorder()
-{
-//! [create-objs-1]
-    capture = new QAudioRecorder();
-//! [create-objs-1]
-
-    // set a default file
-    capture->setOutputLocation(QUrl("test.raw"));
-
-    QWidget *window = new QWidget;
-    QGridLayout* layout = new QGridLayout;
-
-    QLabel* deviceLabel = new QLabel;
-    deviceLabel->setText("Devices");
-    deviceBox = new QComboBox(this);
-    deviceBox->setSizePolicy(QSizePolicy::Expanding,QSizePolicy::Fixed);
-
-    QLabel* codecLabel = new QLabel;
-    codecLabel->setText("Codecs");
-    codecsBox = new QComboBox(this);
-    codecsBox->setSizePolicy(QSizePolicy::Expanding,QSizePolicy::Fixed);
-
-    QLabel* qualityLabel = new QLabel;
-    qualityLabel->setText("Quality");
-    qualityBox = new QComboBox(this);
-    qualityBox->setSizePolicy(QSizePolicy::Expanding,QSizePolicy::Fixed);
-
-//! [device-list]
-    for(int i = 0; i < audiosource->deviceCount(); i++)
-        deviceBox->addItem(audiosource->name(i));
-//! [device-list]
-
-//! [codec-list]
-    QStringList codecs = capture->supportedAudioCodecs();
-    for(int i = 0; i < codecs.count(); i++)
-        codecsBox->addItem(codecs.at(i));
-//! [codec-list]
-
-    qualityBox->addItem("Low");
-    qualityBox->addItem("Medium");
-    qualityBox->addItem("High");
-
-    connect(capture, SIGNAL(durationChanged(qint64)), this, SLOT(updateProgress(qint64)));
-    connect(capture, SIGNAL(stateChanged(QMediaRecorder::State)), this, SLOT(stateChanged(QMediaRecorder::State)));
-
-    layout->addWidget(deviceLabel,0,0,Qt::AlignHCenter);
-    connect(deviceBox,SIGNAL(activated(int)),SLOT(deviceChanged(int)));
-    layout->addWidget(deviceBox,0,1,1,3,Qt::AlignLeft);
-
-    layout->addWidget(codecLabel,1,0,Qt::AlignHCenter);
-    connect(codecsBox,SIGNAL(activated(int)),SLOT(codecChanged(int)));
-    layout->addWidget(codecsBox,1,1,Qt::AlignLeft);
-
-    layout->addWidget(qualityLabel,1,2,Qt::AlignHCenter);
-    connect(qualityBox,SIGNAL(activated(int)),SLOT(qualityChanged(int)));
-    layout->addWidget(qualityBox,1,3,Qt::AlignLeft);
-
-    fileButton = new QPushButton(this);
-    fileButton->setText(tr("Output File"));
-    connect(fileButton,SIGNAL(clicked()),SLOT(selectOutputFile()));
-    layout->addWidget(fileButton,3,0,Qt::AlignHCenter);
-
-    button = new QPushButton(this);
-    button->setText(tr("Record"));
-    connect(button,SIGNAL(clicked()),SLOT(toggleRecord()));
-    layout->addWidget(button,3,3,Qt::AlignHCenter);
-
-    recTime = new QLabel;
-    recTime->setText("0 sec");
-    layout->addWidget(recTime,4,0,Qt::AlignHCenter);
-
-    window->setLayout(layout);
-    setCentralWidget(window);
-    window->show();
-
-    active = false;
-}
-
-AudioRecorder::~AudioRecorder()
-{
-    delete capture;
-    delete audiosource;
-}
-
-void AudioRecorder::updateProgress(qint64 pos)
-{
-    currentTime = pos;
-    if(currentTime == 0) currentTime = 1;
-    QString text = QString("%1 secs").arg(currentTime/1000);
-    recTime->setText(text);
-}
-
-void AudioRecorder::stateChanged(QMediaRecorder::State state)
-{
-    qWarning()<<"stateChanged() "<<state;
-}
-
-void AudioRecorder::deviceChanged(int idx)
-{
-//! [get-device]
-    for(int i = 0; i < audiosource->deviceCount(); i++) {
-        if(deviceBox->itemText(idx).compare(audiosource->name(i)) == 0)
-            audiosource->setSelectedDevice(i);
-    }
-//! [get-device]
-}
-
-void AudioRecorder::codecChanged(int idx)
-{
-    Q_UNUSED(idx);
-    //capture->setAudioCodec(codecsBox->itemText(idx));
-}
-
-void AudioRecorder::qualityChanged(int idx)
-{
-    Q_UNUSED(idx);
-    /*
-    if(capture->audioCodec().compare("audio/pcm") == 0) {
-        if(qualityBox->itemText(idx).compare("Low") == 0) {
-            // 8000Hz mono is 8kbps
-            capture->setAudioBitrate(8);
-        } else if(qualityBox->itemText(idx).compare("Medium") == 0) {
-            // 22050Hz mono is 44.1kbps
-            capture->setAudioBitrate(44);
-        } else if(qualityBox->itemText(idx).compare("High") == 0) {
-            // 44100Hz mono is 88.2kbps
-            capture->setAudioBitrate(88);
-        }
-    }
-    */
-}
-
-//! [toggle-record]
-void AudioRecorder::toggleRecord()
-{
-    if(!active) {
-        recTime->setText("0 sec");
-        currentTime = 0;
-        capture->record();
-
-        button->setText(tr("Stop"));
-        active = true;
-    } else {
-        capture->stop();
-        button->setText(tr("Record"));
-        active = false;
-    }
-}
-//! [toggle-record]
-
-void AudioRecorder::selectOutputFile()
-{
-    QStringList fileNames;
-
-    QFileDialog dialog(this);
-
-    dialog.setFileMode(QFileDialog::AnyFile);
-    if (dialog.exec())
-        fileNames = dialog.selectedFiles();
-
-    if(fileNames.size() > 0)
-        capture->setOutputLocation(QUrl(fileNames.first()));
-}
diff --git a/doc/src/snippets/multimedia-snippets/camera.cpp b/doc/src/snippets/multimedia-snippets/camera.cpp
deleted file mode 100644
index a44421e..0000000
--- a/doc/src/snippets/multimedia-snippets/camera.cpp
+++ /dev/null
@@ -1,201 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/
-**
-** This file is part of the Qt Mobility Components.
-**
-** $QT_BEGIN_LICENSE:LGPL$
-** GNU Lesser General Public License Usage
-** This file may be used under the terms of the GNU Lesser General Public
-** License version 2.1 as published by the Free Software Foundation and
-** appearing in the file LICENSE.LGPL included in the packaging of this
-** file. Please review the following information to ensure the GNU Lesser
-** General Public License version 2.1 requirements will be met:
-** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
-**
-** In addition, as a special exception, Nokia gives you certain additional
-** rights. These rights are described in the Nokia Qt LGPL Exception
-** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
-**
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU General
-** Public License version 3.0 as published by the Free Software Foundation
-** and appearing in the file LICENSE.GPL included in the packaging of this
-** file. Please review the following information to ensure the GNU General
-** Public License version 3.0 requirements will be met:
-** http://www.gnu.org/copyleft/gpl.html.
-**
-** Other Usage
-** Alternatively, this file may be used in accordance with the terms and
-** conditions contained in a signed written agreement between you and Nokia.
-**
-**
-**
-**
-**
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-/* Camera snippets */
-
-#include "qcamera.h"
-#include "qcameraviewfinder.h"
-#include "qmediarecorder.h"
-#include "qcameraimagecapture.h"
-#include "qcameraimageprocessing.h"
-#include "qabstractvideosurface.h"
-
-/* Globals so that everything is consistent. */
-QCamera *camera = 0;
-QCameraViewfinder *viewfinder = 0;
-QMediaRecorder *recorder = 0;
-QCameraImageCapture *imageCapture = 0;
-
-void overview_viewfinder()
-{
-    //! [Camera overview viewfinder]
-    camera = new QCamera;
-    viewfinder = new QCameraViewfinder;
-    camera->setViewfinder(viewfinder);
-    viewfinder->show();
-
-    camera->start(); // to start the viewfinder
-    //! [Camera overview viewfinder]
-}
-
-// -.-
-class MyVideoSurface : public QAbstractVideoSurface
-{
-    QList<QVideoFrame::PixelFormat> supportedPixelFormats(QAbstractVideoBuffer::HandleType handleType) const
-    {
-        Q_UNUSED(handleType);
-        return QList<QVideoFrame::PixelFormat>();
-    }
-    bool present(const QVideoFrame &frame)
-    {
-        Q_UNUSED(frame);
-        return true;
-    }
-};
-
-void overview_surface()
-{
-    MyVideoSurface *mySurface;
-    //! [Camera overview surface]
-    camera = new QCamera;
-    mySurface = new MyVideoSurface;
-    camera->setViewfinder(mySurface);
-
-    camera->start();
-    // MyVideoSurface::present(..) will be called with viewfinder frames
-    //! [Camera overview surface]
-}
-
-void overview_still()
-{
-    //! [Camera overview capture]
-    imageCapture = new QCameraImageCapture(camera);
-
-    camera->setCaptureMode(QCamera::CaptureStillImage);
-    camera->start(); // Viewfinder frames start flowing
-
-    //on half pressed shutter button
-    camera->searchAndLock();
-
-    //on shutter button pressed
-    imageCapture->capture();
-
-    //on shutter button released
-    camera->unlock();
-    //! [Camera overview capture]
-}
-
-void overview_movie()
-{
-    //! [Camera overview movie]
-    camera = new QCamera;
-    recorder = new QMediaRecorder(camera);
-
-    camera->setCaptureMode(QCamera::CaptureVideo);
-    camera->start();
-
-    //on shutter button pressed
-    recorder->record();
-
-    // sometime later, or on another press
-    recorder->stop();
-    //! [Camera overview movie]
-}
-
-void camera_blah()
-{
-    //! [Camera]
-    camera = new QCamera;
-
-    viewfinder = new QCameraViewfinder();
-    viewfinder->show();
-
-    camera->setViewfinder(viewfinder);
-
-    imageCapture = new QCameraImageCapture(camera);
-
-    camera->setCaptureMode(QCamera::CaptureStillImage);
-    camera->start();
-    //! [Camera]
-
-    //! [Camera keys]
-    //on half pressed shutter button
-    camera->searchAndLock();
-
-    //on shutter button pressed
-    imageCapture->capture();
-
-    //on shutter button released
-    camera->unlock();
-    //! [Camera keys]
-}
-
-void cameraimageprocessing()
-{
-    //! [Camera image whitebalance]
-    camera = new QCamera;
-    QCameraImageProcessing *imageProcessing = camera->imageProcessing();
-
-    if (imageProcessing->isAvailable()) {
-        imageProcessing->setWhiteBalanceMode(QCameraImageProcessing::WhiteBalanceFluorescent);
-    }
-    //! [Camera image whitebalance]
-
-    //! [Camera image denoising]
-    imageProcessing->setDenoisingLevel(-0.3); //reduce the amount of denoising applied
-    //! [Camera image denoising]
-}
-
-void camerafocus()
-{
-    //! [Camera custom zoom]
-    QCameraFocus *focus = camera->focus();
-    focus->setFocusPointMode(QCameraFocus::FocusPointCustom);
-    focus->setCustomFocusPoint(QPointF(0.25f, 0.75f)); // A point near the bottom left, 25% away from the corner, near that shiny vase
-    //! [Camera custom zoom]
-
-    //! [Camera combined zoom]
-    focus->zoomTo(3.0, 4.0); // Super zoom!
-    //! [Camera combined zoom]
-
-    //! [Camera focus zones]
-    focus->setFocusPointMode(QCameraFocus::FocusPointAuto);
-    QList<QCameraFocusZone> zones = focus->focusZones();
-    foreach (QCameraFocusZone zone, zones) {
-        if (zone.status() == QCameraFocusZone::Focused) {
-            // Draw a green box at zone.area()
-        } else if (zone.status() == QCameraFocusZone::Selected) {
-            // This area is selected for autofocusing, but is not in focus
-            // Draw a yellow box at zone.area()
-        }
-    }
-    //! [Camera focus zones]
-}
diff --git a/doc/src/snippets/multimedia-snippets/media.cpp b/doc/src/snippets/multimedia-snippets/media.cpp
deleted file mode 100644
index 2515465..0000000
--- a/doc/src/snippets/multimedia-snippets/media.cpp
+++ /dev/null
@@ -1,315 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/
-**
-** This file is part of the Qt Mobility Components.
-**
-** $QT_BEGIN_LICENSE:LGPL$
-** GNU Lesser General Public License Usage
-** This file may be used under the terms of the GNU Lesser General Public
-** License version 2.1 as published by the Free Software Foundation and
-** appearing in the file LICENSE.LGPL included in the packaging of this
-** file. Please review the following information to ensure the GNU Lesser
-** General Public License version 2.1 requirements will be met:
-** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
-**
-** In addition, as a special exception, Nokia gives you certain additional
-** rights. These rights are described in the Nokia Qt LGPL Exception
-** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
-**
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU General
-** Public License version 3.0 as published by the Free Software Foundation
-** and appearing in the file LICENSE.GPL included in the packaging of this
-** file. Please review the following information to ensure the GNU General
-** Public License version 3.0 requirements will be met:
-** http://www.gnu.org/copyleft/gpl.html.
-**
-** Other Usage
-** Alternatively, this file may be used in accordance with the terms and
-** conditions contained in a signed written agreement between you and Nokia.
-**
-**
-**
-**
-**
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-/* Media related snippets */
-#include <QFile>
-#include <QTimer>
-
-#include "qmediaplaylist.h"
-#include "qmediarecorder.h"
-#include "qmediaservice.h"
-#include "qmediaplayercontrol.h"
-#include "qmediaplayer.h"
-#include "qradiotuner.h"
-#include "qradiodata.h"
-#include "qvideowidget.h"
-#include "qcameraimagecapture.h"
-#include "qcamera.h"
-#include "qcameraviewfinder.h"
-#include "qaudioprobe.h"
-#include "qaudiorecorder.h"
-#include "qvideoprobe.h"
-
-class MediaExample : public QObject {
-    Q_OBJECT
-
-    void MediaControl();
-    void MediaPlayer();
-    void RadioTuna();
-    void MediaRecorder();
-    void AudioRecorder();
-    void EncoderSettings();
-    void ImageEncoderSettings();
-    void AudioProbe();
-    void VideoProbe();
-
-private:
-    // Common naming
-    QMediaService *mediaService;
-    QVideoWidget *videoWidget;
-    QWidget *widget;
-    QMediaPlayer *player;
-    QMediaPlaylist *playlist;
-    QMediaContent video;
-    QMediaRecorder *recorder;
-    QCamera *camera;
-    QCameraViewfinder *viewfinder;
-    QCameraImageCapture *imageCapture;
-    QString fileName;
-    QRadioTuner *radio;
-    QRadioData *radioData;
-    QAudioRecorder *audioRecorder;
-    QAudioProbe *audioProbe;
-    QVideoProbe *videoProbe;
-
-    QMediaContent image1;
-    QMediaContent image2;
-    QMediaContent image3;
-
-    static const int yourRadioStationFrequency = 11;
-};
-
-void MediaExample::MediaControl()
-{
-    {
-    //! [Request control]
-    QMediaPlayerControl *control = qobject_cast<QMediaPlayerControl *>(
-            mediaService->requestControl("org.qt-project.qt.mediaplayercontrol/5.0"));
-    //! [Request control]
-    Q_UNUSED(control);
-    }
-
-    {
-    //! [Request control templated]
-    QMediaPlayerControl *control = mediaService->requestControl<QMediaPlayerControl *>();
-    //! [Request control templated]
-    Q_UNUSED(control);
-    }
-}
-
-
-void MediaExample::EncoderSettings()
-{
-    //! [Audio encoder settings]
-    QAudioEncoderSettings audioSettings;
-    audioSettings.setCodec("audio/mpeg");
-    audioSettings.setChannelCount(2);
-
-    recorder->setAudioSettings(audioSettings);
-    //! [Audio encoder settings]
-
-    //! [Video encoder settings]
-    QVideoEncoderSettings videoSettings;
-    videoSettings.setCodec("video/mpeg2");
-    videoSettings.setResolution(640, 480);
-
-    recorder->setVideoSettings(videoSettings);
-    //! [Video encoder settings]
-}
-
-void MediaExample::ImageEncoderSettings()
-{
-    //! [Image encoder settings]
-    QImageEncoderSettings imageSettings;
-    imageSettings.setCodec("image/jpeg");
-    imageSettings.setResolution(1600, 1200);
-
-    imageCapture->setEncodingSettings(imageSettings);
-    //! [Image encoder settings]
-}
-
-void MediaExample::MediaPlayer()
-{
-    //! [Player]
-    player = new QMediaPlayer;
-    connect(player, SIGNAL(positionChanged(qint64)), this, SLOT(positionChanged(qint64)));
-    player->setMedia(QUrl::fromLocalFile("/Users/me/Music/coolsong.mp3"));
-    player->setVolume(50);
-    player->play();
-    //! [Player]
-
-    //! [Local playback]
-    player = new QMediaPlayer;
-    // ...
-    player->setMedia(QUrl::fromLocalFile("/Users/me/Music/coolsong.mp3"));
-    player->setVolume(50);
-    player->play();
-    //! [Local playback]
-
-    //! [Audio playlist]
-    player = new QMediaPlayer;
-
-    playlist = new QMediaPlaylist(player);
-    playlist->addMedia(QUrl("http://example.com/myfile1.mp3"));
-    playlist->addMedia(QUrl("http://example.com/myfile2.mp3"));
-    // ...
-    playlist->setCurrentIndex(1);
-    player->play();
-    //! [Audio playlist]
-
-    //! [Movie playlist]
-    playlist = new QMediaPlaylist;
-    playlist->addMedia(QUrl("http://example.com/movie1.mp4"));
-    playlist->addMedia(QUrl("http://example.com/movie2.mp4"));
-    playlist->addMedia(QUrl("http://example.com/movie3.mp4"));
-    playlist->setCurrentIndex(1);
-
-    player = new QMediaPlayer;
-    player->setPlaylist(playlist);
-
-    videoWidget = new QVideoWidget;
-    player->setVideoOutput(videoWidget);
-    videoWidget->show();
-
-    player->play();
-    //! [Movie playlist]
-}
-
-void MediaExample::MediaRecorder()
-{
-    //! [Media recorder]
-    recorder = new QMediaRecorder(camera);
-
-    QAudioEncoderSettings audioSettings;
-    audioSettings.setCodec("audio/amr");
-    audioSettings.setQuality(QtMultimedia::HighQuality);
-
-    recorder->setAudioSettings(audioSettings);
-
-    recorder->setOutputLocation(QUrl::fromLocalFile(fileName));
-    recorder->record();
-    //! [Media recorder]
-}
-
-void MediaExample::AudioRecorder()
-{
-    //! [Audio recorder]
-    audioRecorder = new QAudioRecorder;
-
-    QAudioEncoderSettings audioSettings;
-    audioSettings.setCodec("audio/amr");
-    audioSettings.setQuality(QtMultimedia::HighQuality);
-
-    audioRecorder->setEncodingSettings(audioSettings);
-
-    audioRecorder->setOutputLocation(QUrl::fromLocalFile("test.amr"));
-    audioRecorder->record();
-    //! [Audio recorder]
-
-    //! [Audio recorder inputs]
-    QStringList inputs = audioRecorder->audioInputs();
-    QString selectedInput = audioRecorder->defaultAudioInput();
-
-    foreach (QString input, inputs) {
-        QString description = audioRecorder->audioInputDescription(input);
-        // show descriptions to user and allow selection
-        selectedInput = input;
-    }
-
-    audioRecorder->setAudioInput(selectedInput);
-    //! [Audio recorder inputs]
-}
-
-void MediaExample::RadioTuna()
-{
-    //! [Radio tuner]
-    radio = new QRadioTuner;
-    connect(radio, SIGNAL(frequencyChanged(int)), this, SLOT(freqChanged(int)));
-    if (radio->isBandSupported(QRadioTuner::FM)) {
-        radio->setBand(QRadioTuner::FM);
-        radio->setFrequency(yourRadioStationFrequency);
-        radio->setVolume(100);
-        radio->start();
-    }
-    //! [Radio tuner]
-
-    //! [Radio data setup]
-    radio = new QRadioTuner;
-    radioData = radio->radioData();
-    //! [Radio data setup]
-}
-
-void MediaExample::AudioProbe()
-{
-    //! [Audio probe]
-    audioRecorder = new QAudioRecorder;
-
-    QAudioEncoderSettings audioSettings;
-    audioSettings.setCodec("audio/amr");
-    audioSettings.setQuality(QtMultimedia::HighQuality);
-
-    audioRecorder->setEncodingSettings(audioSettings);
-
-    audioRecorder->setOutputLocation(QUrl::fromLocalFile("test.amr"));
-
-    audioProbe = new QAudioProbe(this);
-    if (audioProbe->setSource(audioRecorder)) {
-        // Probing succeeded, audioProbe->isValid() should be true.
-        connect(audioProbe, SIGNAL(audioBufferProbed(QAudioBuffer)),
-                this, SLOT(calculateLevel(QAudioBuffer)));
-    }
-
-    audioRecorder->record();
-    // Now audio buffers being recorded should be signaled
-    // by the probe, so we can do things like calculating the
-    // audio power level, or performing a frequency transform
-    //! [Audio probe]
-}
-
-void MediaExample::VideoProbe()
-{
-    //! [Video probe]
-    camera = new QCamera;
-    viewfinder = new QCameraViewfinder();
-    camera->setViewfinder(viewfinder);
-
-    camera->setCaptureMode(QCamera::CaptureVideo);
-
-    videoProbe = new QVideoProbe(this);
-
-    if (videoProbe->setSource(camera)) {
-        // Probing succeeded, videoProbe->isValid() should be true.
-        connect(videoProbe, SIGNAL(videoFrameProbed(QVideoFrame)),
-                this, SLOT(detectBarcodes(QVideoFrame)));
-    }
-
-    camera->start();
-    // Viewfinder frames should now also be emitted by
-    // the video probe, even in still image capture mode.
-    // Another alternative is to install the probe on a
-    // QMediaRecorder connected to the camera to get the
-    // recorded frames, if they are different from the
-    // viewfinder frames.
-
-    //! [Video probe]
-}
-
-
diff --git a/doc/src/snippets/multimedia-snippets/multimedia-snippets.pro b/doc/src/snippets/multimedia-snippets/multimedia-snippets.pro
deleted file mode 100644
index 9571b02..0000000
--- a/doc/src/snippets/multimedia-snippets/multimedia-snippets.pro
+++ /dev/null
@@ -1,24 +0,0 @@
-# Doc snippets - compiled for truthiness
-
-TEMPLATE = lib
-TARGET = qtmmksnippets
-
-INCLUDEPATH += ../../../../src/global \
-               ../../../../src/multimedia \
-               ../../../../src/multimedia/audio \
-               ../../../../src/multimedia/video \
-               ../../../../src/multimedia/camera
-
-CONFIG += console
-
-QT += multimedia multimediawidgets widgets multimedia-private
-
-SOURCES += \
-    audio.cpp \
-    video.cpp \
-    camera.cpp \
-    media.cpp \
-    qsound.cpp
-
-OTHER_FILES += \
-    soundeffect.qml
diff --git a/doc/src/snippets/multimedia-snippets/qsound.cpp b/doc/src/snippets/multimedia-snippets/qsound.cpp
deleted file mode 100644
index 3fdb63e..0000000
--- a/doc/src/snippets/multimedia-snippets/qsound.cpp
+++ /dev/null
@@ -1,85 +0,0 @@
- /****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/
-**
-** This file is part of the documentation of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:BSD$
-** You may use this file under the terms of the BSD license as follows:
-**
-** "Redistribution and use in source and binary forms, with or without
-** modification, are permitted provided that the following conditions are
-** met:
-**   * Redistributions of source code must retain the above copyright
-**     notice, this list of conditions and the following disclaimer.
-**   * Redistributions in binary form must reproduce the above copyright
-**     notice, this list of conditions and the following disclaimer in
-**     the documentation and/or other materials provided with the
-**     distribution.
-**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
-**     the names of its contributors may be used to endorse or promote
-**     products derived from this software without specific prior written
-**     permission.
-**
-** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-#include "qobject.h"
-#include "qsound.h"
-#include "qsoundeffect.h"
-
-void qsoundsnippet() {
-    //! [0]
-    QSound::play("mysounds/bells.wav");
-    //! [0]
-
-
-    //! [1]
-    QSound bells("mysounds/bells.wav");
-    bells.play();
-    //! [1]
-}
-
-void qsoundeffectsnippet() {
-    //! [2]
-    QSoundEffect effect;
-    effect.setSource(QUrl::fromLocalFile("engine.wav"));
-    effect.setLoopCount(QSoundEffect::Infinite);
-    effect.setVolume(0.25f);
-    effect.play();
-    //! [2]
-}
-
-QObject *clickSource;
-
-class MyGame : public QObject {
-    Q_OBJECT
-public:
-    //! [3]
-    MyGame()
-        : m_explosion(this)
-    {
-        m_explosion.setSource(QUrl::fromLocalFile("explosion.wav"));
-        m_explosion.setVolume(0.25f);
-
-        // Set up click handling etc.
-        connect(clickSource, SIGNAL(clicked()), &m_explosion, SLOT(play()));
-    }
-private:
-    QSoundEffect m_explosion;
-    //! [3]
-};
diff --git a/doc/src/snippets/multimedia-snippets/soundeffect.qml b/doc/src/snippets/multimedia-snippets/soundeffect.qml
deleted file mode 100644
index 527f276..0000000
--- a/doc/src/snippets/multimedia-snippets/soundeffect.qml
+++ /dev/null
@@ -1,63 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/
-**
-** This file is part of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:LGPL$
-** GNU Lesser General Public License Usage
-** This file may be used under the terms of the GNU Lesser General Public
-** License version 2.1 as published by the Free Software Foundation and
-** appearing in the file LICENSE.LGPL included in the packaging of this
-** file. Please review the following information to ensure the GNU Lesser
-** General Public License version 2.1 requirements will be met:
-** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
-**
-** In addition, as a special exception, Nokia gives you certain additional
-** rights. These rights are described in the Nokia Qt LGPL Exception
-** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
-**
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU General
-** Public License version 3.0 as published by the Free Software Foundation
-** and appearing in the file LICENSE.GPL included in the packaging of this
-** file. Please review the following information to ensure the GNU General
-** Public License version 3.0 requirements will be met:
-** http://www.gnu.org/copyleft/gpl.html.
-**
-** Other Usage
-** Alternatively, this file may be used in accordance with the terms and
-** conditions contained in a signed written agreement between you and Nokia.
-**
-**
-**
-**
-**
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-//! [complete snippet]
-import QtQuick 2.0
-import QtMultimedia 5.0
-
-Text {
-    text: "Click Me!";
-    font.pointSize: 24;
-    width: 150; height: 50;
-
-    //! [play sound on click]
-    SoundEffect {
-        id: playSound
-        source: "soundeffect.wav"
-    }
-    MouseArea {
-        id: playArea
-        anchors.fill: parent
-        onPressed: { playSound.play() }
-    }
-    //! [play sound on click]
-}
-//! [complete snippet]
diff --git a/doc/src/snippets/multimedia-snippets/video.cpp b/doc/src/snippets/multimedia-snippets/video.cpp
deleted file mode 100644
index 5ab5ed0..0000000
--- a/doc/src/snippets/multimedia-snippets/video.cpp
+++ /dev/null
@@ -1,193 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/
-**
-** This file is part of the Qt Mobility Components.
-**
-** $QT_BEGIN_LICENSE:LGPL$
-** GNU Lesser General Public License Usage
-** This file may be used under the terms of the GNU Lesser General Public
-** License version 2.1 as published by the Free Software Foundation and
-** appearing in the file LICENSE.LGPL included in the packaging of this
-** file. Please review the following information to ensure the GNU Lesser
-** General Public License version 2.1 requirements will be met:
-** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
-**
-** In addition, as a special exception, Nokia gives you certain additional
-** rights. These rights are described in the Nokia Qt LGPL Exception
-** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
-**
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU General
-** Public License version 3.0 as published by the Free Software Foundation
-** and appearing in the file LICENSE.GPL included in the packaging of this
-** file. Please review the following information to ensure the GNU General
-** Public License version 3.0 requirements will be met:
-** http://www.gnu.org/copyleft/gpl.html.
-**
-** Other Usage
-** Alternatively, this file may be used in accordance with the terms and
-** conditions contained in a signed written agreement between you and Nokia.
-**
-**
-**
-**
-**
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-/* Video related snippets */
-#include "qvideorenderercontrol.h"
-#include "qmediaservice.h"
-#include "qmediaplayer.h"
-#include "qabstractvideosurface.h"
-#include "qvideowidgetcontrol.h"
-#include "qvideowindowcontrol.h"
-#include "qgraphicsvideoitem.h"
-#include "qmediaplaylist.h"
-#include "qvideosurfaceformat.h"
-
-#include <QFormLayout>
-#include <QGraphicsView>
-
-//! [Derived Surface]
-class MyVideoSurface : public QAbstractVideoSurface
-{
-    QList<QVideoFrame::PixelFormat> supportedPixelFormats(
-            QAbstractVideoBuffer::HandleType handleType = QAbstractVideoBuffer::NoHandle) const
-    {
-        Q_UNUSED(handleType);
-
-        // Return the formats you will support
-        return QList<QVideoFrame::PixelFormat>() << QVideoFrame::Format_RGB565;
-    }
-
-    bool present(const QVideoFrame &frame)
-    {
-        Q_UNUSED(frame);
-        // Handle the frame and do your processing
-
-        return true;
-    }
-};
-//! [Derived Surface]
-
-//! [Video producer]
-class MyVideoProducer : public QObject
-{
-    Q_OBJECT
-    Q_PROPERTY(QAbstractVideoSurface *videoSurface WRITE setVideoSurface)
-
-public:
-    void setVideoSurface(QAbstractVideoSurface *surface)
-    {
-        m_surface = surface;
-        m_surface->start(m_format);
-    }
-
-    // ...
-
-public slots:
-    void onNewVideoContentReceived(const QVideoFrame &frame)
-    {
-        if (m_surface)
-            m_surface->present(frame);
-    }
-
-private:
-    QAbstractVideoSurface *m_surface;
-    QVideoSurfaceFormat m_format;
-};
-
-//! [Video producer]
-
-
-class VideoExample : public QObject {
-    Q_OBJECT
-public:
-    void VideoGraphicsItem();
-    void VideoRendererControl();
-    void VideoWidget();
-    void VideoWindowControl();
-    void VideoWidgetControl();
-
-private:
-    // Common naming
-    QMediaService *mediaService;
-    QMediaPlaylist *playlist;
-    QVideoWidget *videoWidget;
-    QWidget *widget;
-    QFormLayout *layout;
-    QAbstractVideoSurface *myVideoSurface;
-    QMediaPlayer *player;
-    QMediaContent video;
-    QGraphicsView *graphicsView;
-};
-
-void VideoExample::VideoRendererControl()
-{
-    //! [Video renderer control]
-    QVideoRendererControl *rendererControl = mediaService->requestControl<QVideoRendererControl *>();
-    rendererControl->setSurface(myVideoSurface);
-    //! [Video renderer control]
-}
-
-void VideoExample::VideoWidget()
-{
-    //! [Video widget]
-    player = new QMediaPlayer;
-
-    playlist = new QMediaPlaylist(player);
-    playlist->addMedia(QUrl("http://example.com/myclip1.mp4"));
-    playlist->addMedia(QUrl("http://example.com/myclip2.mp4"));
-
-    videoWidget = new QVideoWidget;
-    player->setVideoOutput(videoWidget);
-
-    videoWidget->show();
-    playlist->setCurrentIndex(1);
-    player->play();
-    //! [Video widget]
-
-    player->stop();
-
-    //! [Setting surface in player]
-    player->setVideoOutput(myVideoSurface);
-    //! [Setting surface in player]
-}
-
-void VideoExample::VideoWidgetControl()
-{
-    //! [Video widget control]
-    QVideoWidgetControl *widgetControl = mediaService->requestControl<QVideoWidgetControl *>();
-    layout->addWidget(widgetControl->videoWidget());
-    //! [Video widget control]
-}
-
-void VideoExample::VideoWindowControl()
-{
-    //! [Video window control]
-    QVideoWindowControl *windowControl = mediaService->requestControl<QVideoWindowControl *>();
-    windowControl->setWinId(widget->winId());
-    windowControl->setDisplayRect(widget->rect());
-    windowControl->setAspectRatioMode(Qt::KeepAspectRatio);
-    //! [Video window control]
-}
-
-void VideoExample::VideoGraphicsItem()
-{
-    //! [Video graphics item]
-    player = new QMediaPlayer(this);
-
-    QGraphicsVideoItem *item = new QGraphicsVideoItem;
-    player->setVideoOutput(item);
-    graphicsView->scene()->addItem(item);
-    graphicsView->show();
-
-    player->setMedia(QUrl("http://example.com/myclip4.ogv"));
-    player->play();
-    //! [Video graphics item]
-}
diff --git a/doc/src/snippets/snippets.pro b/doc/src/snippets/snippets.pro
deleted file mode 100644
index 31a3a09..0000000
--- a/doc/src/snippets/snippets.pro
+++ /dev/null
@@ -1,3 +0,0 @@
-TEMPLATE = subdirs
-
-SUBDIRS += multimedia-snippets
diff --git a/doc/src/videooverview.qdoc b/doc/src/videooverview.qdoc
deleted file mode 100644
index c789152..0000000
--- a/doc/src/videooverview.qdoc
+++ /dev/null
@@ -1,143 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/
-**
-** This file is part of the documentation of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:FDL$
-** GNU Free Documentation License
-** Alternatively, this file may be used under the terms of the GNU Free
-** Documentation License version 1.3 as published by the Free Software
-** Foundation and appearing in the file included in the packaging of
-** this file.
-**
-** Other Usage
-** Alternatively, this file may be used in accordance with the terms
-** and conditions contained in a signed written agreement between you
-** and Nokia.
-**
-**
-**
-**
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-/*!
-
-\page videooverview.html
-\title Video Overview
-\brief Video playback
-
-\section1 Video Features
-
-Qt Multimedia offers both high and low level C++ classes for playing and
-manipulating video data, and QML types for playback and control.  Some
-of these classes also overlap with both \l {Camera Overview}{camera} and
-\l {Audio Overview}{audio} classes, which can be useful.
-
-\section1 Video Implementation Details
-
-\target multimedia-playing-video
-\section2 Playing Video in C++
-
-You can use the \l QMediaPlayer class to decode a video file, and display
-it using \l QVideoWidget, \l QGraphicsVideoItem, or a custom class.
-
-Here's an example of using QVideoWidget:
-    \snippet doc/src/snippets/multimedia-snippets/video.cpp Video widget
-
-And an example with QGraphicsVideoItem:
-    \snippet doc/src/snippets/multimedia-snippets/video.cpp Video graphics item
-
-\section2 Playing Video in QML
-
-You can use \l VideoOutput to render content that is
-provided by either a \l MediaPlayer or a \l Camera.
-The VideoOutput is a visual component that can be transformed
-or acted upon by shaders (as the \l {QML Video Shader Effects Example} shows), while
-all media decoding and playback control is handled by the \l MediaPlayer.
-
-Alternatively there is also a higher level \l Video type that
-acts as a single, visual element to play video and control playback.
-
-\section2 Working with Low Level Video Frames
-
-Qt Multimedia offers a number of low level classes to make handling
-video frames a bit easier.  These classes are primarily used when
-writing code that processes video or camera frames (for example,
-detecting barcodes, or applying a fancy vignette effect), or needs
-to display video in a special way that is otherwise unsupported.
-
-The \l QVideoFrame class encapsulates a video frame and allows the
-contents to be mapped into system memory for manipulation or
-processing, while deriving a class from \l QAbstractVideoSurface
-allows you to receive these frames from \l QMediaPlayer and
-\l QCamera.
-
-\snippet doc/src/snippets/multimedia-snippets/video.cpp Derived Surface
-
-and with an instance of this surface, \c myVideoSurface, you can set
-the surface as the \l {QMediaPlayer::setVideoOutput()}{video output} for QMediaPlayer.
-
-\snippet doc/src/snippets/multimedia-snippets/video.cpp Setting Surface in Player
-
-Several of the built-in Qt classes offer this functionality
-as well, so if you decode video in your application, you can present
-it to classes that offer a \l QVideoRendererControl class, and in QML
-you can set a custom object for the source of a \l VideoOutput
-with either a writable \c videoSurface property (that the instance will
-set it's internal video surface to) or a readable \c mediaObject property
-with a QMediaObject derived class that implements the \l QVideoRendererControl
-interface.
-
-The following snippet shows a class that has a writable \c videoSurface property
-and receives frames through a public slot \c onNewVideoContentReceived(). These
-frames are then presented on the surface set in \c setVideoSurface().
-
-\snippet doc/src/snippets/multimedia-snippets/video.cpp Video producer
-
-\section2 Recording Video
-You can use the \l QMediaRecorder class in conjunction with other
-classes to record video to disk.  Primarily this is used with
-the camera, so consult the \l {Camera Overview} for more information.
-
-\section2 Monitoring Video Frames
-You can use the \l QVideoProbe class to access video frames as they
-flow through different parts of a media pipeline when using other
-classes like \l QMediaPlayer, \l QMediaRecorder or \l QCamera.  After
-creating the high level media class, you can set the source of the
-video probe to that instance.  This can be useful for performing
-some video processing tasks (like barcode recognition, or object
-detection) while the video is rendered normally.  You can not affect
-the video frames using this class, and they may arrive at a slightly
-different time than they are being rendered.
-
-Here's an example of installing a video probe while recording the camera:
-    \snippet doc/src/snippets/multimedia-snippets/media.cpp Video probe
-
-\section1 Examples
-
-There are both C++ and QML examples available.
-
-\section2 C++ Examples
-
-\annotatedlist video_examples
-
-\section2 QML Examples
-
-\annotatedlist video_examples_qml
-
-\section1 Reference Documentation
-
-\section2 C++ Classes
-
-\annotatedlist multimedia_video
-
-\section2 QML Types
-
-\annotatedlist multimedia_video_qml
-
-*/
diff --git a/qtmultimedia.pro b/qtmultimedia.pro
index 79fbe76..98d6365 100644
--- a/qtmultimedia.pro
+++ b/qtmultimedia.pro
@@ -20,12 +20,5 @@ win32 {
 
 load(qt_parts)
 
-module_qtmultimedia_docsnippets.subdir = doc
-module_qtmultimedia_docsnippets.target = sub-doc
-module_qtmultimedia_docsnippets.depends = sub_src
-module_qtmultimedia_docsnippets.CONFIG = no_default_install
-
-SUBDIRS += module_qtmultimedia_docsnippets
-
 # for make docs:
-include(doc/config/qtmultimedia_doc.pri)
+include(src/multimedia/doc/qtmultimedia_doc.pri)
diff --git a/src/multimedia/doc/compat.qdocconf b/src/multimedia/doc/compat.qdocconf
new file mode 100644
index 0000000..924db57
--- /dev/null
+++ b/src/multimedia/doc/compat.qdocconf
@@ -0,0 +1,30 @@
+alias.include                   = input
+
+macro.0                         = "\\\\0"
+macro.b                         = "\\\\b"
+macro.n                         = "\\\\n"
+macro.r                         = "\\\\r"
+macro.i                         = "\\li"
+macro.i11                       = "\\li{1,1}"
+macro.i12                       = "\\li{1,2}"
+macro.i13                       = "\\li{1,3}"
+macro.i14                       = "\\li{1,4}"
+macro.i15                       = "\\li{1,5}"
+macro.i16                       = "\\li{1,6}"
+macro.i17                       = "\\li{1,7}"
+macro.i18                       = "\\li{1,8}"
+macro.i19                       = "\\li{1,9}"
+macro.i21                       = "\\li{2,1}"
+macro.i31                       = "\\li{3,1}"
+macro.i41                       = "\\li{4,1}"
+macro.i51                       = "\\li{5,1}"
+macro.i61                       = "\\li{6,1}"
+macro.i71                       = "\\li{7,1}"
+macro.i81                       = "\\li{8,1}"
+macro.i91                       = "\\li{9,1}"
+macro.img                       = "\\image"
+macro.endquote                  = "\\endquotation"
+macro.relatesto                 = "\\relates"
+
+spurious                        = "Missing comma in .*" \
+                                  "Missing pattern .*"
diff --git a/src/multimedia/doc/macros.qdocconf b/src/multimedia/doc/macros.qdocconf
new file mode 100644
index 0000000..d8b96c0
--- /dev/null
+++ b/src/multimedia/doc/macros.qdocconf
@@ -0,0 +1,37 @@
+macro.aacute.HTML       = "&aacute;"
+macro.Aring.HTML        = "&Aring;"
+macro.aring.HTML        = "&aring;"
+macro.Auml.HTML         = "&Auml;"
+macro.author            = "\\b{Author:}"
+macro.br.HTML           = "<br />"
+macro.BR.HTML           = "<br />"
+macro.copyright.HTML    = "&copy;"
+macro.eacute.HTML       = "&eacute;"
+macro.gui               = "\\b"
+macro.hr.HTML           = "<hr />"
+macro.iacute.HTML       = "&iacute;"
+macro.key               = "\\b"
+macro.menu              = "\\b"
+macro.note              = "\\b{Note:}"
+macro.oslash.HTML       = "&oslash;"
+macro.ouml.HTML         = "&ouml;"
+macro.QA                = "\\e{Qt Assistant}"
+macro.QD                = "\\e{Qt Designer}"
+macro.QL                = "\\e{Qt Linguist}"
+macro.QQV               = "\\e{Qt QML Viewer}"
+macro.param             = "\\e"
+macro.raisedaster.HTML  = "<sup>*</sup>"
+macro.rarrow.HTML       = "&rarr;"
+macro.reg.HTML          = "<sup>&reg;</sup>"
+macro.return            = "Returns"
+macro.starslash         = "\\c{*/}"
+macro.begincomment      = "\\c{/*}"
+macro.endcomment        = "\\c{*/}"
+macro.uuml.HTML         = "&uuml;"
+macro.mdash.HTML        = "&mdash;"
+
+macro.beginfloatleft.HTML   = "<div style=\"float: left; margin-right: 2em\">"
+macro.beginfloatright.HTML  = "<div style=\"float: right; margin-left: 2em\">"
+macro.endfloat.HTML         = "</div>"
+macro.clearfloat.HTML       = "<br style=\"clear: both\" />"
+macro.emptyspan.HTML        = "<span></span>"
diff --git a/src/multimedia/doc/qt-cpp-ignore.qdocconf b/src/multimedia/doc/qt-cpp-ignore.qdocconf
new file mode 100644
index 0000000..b3a8602
--- /dev/null
+++ b/src/multimedia/doc/qt-cpp-ignore.qdocconf
@@ -0,0 +1,100 @@
+Cpp.ignoretokens        = QAXFACTORY_EXPORT \
+                          QDESIGNER_COMPONENTS_LIBRARY \
+                          QDESIGNER_EXTENSION_LIBRARY \
+                          QDESIGNER_SDK_LIBRARY \
+                          QDESIGNER_SHARED_LIBRARY \
+                          QDESIGNER_UILIB_LIBRARY \
+                          QM_EXPORT_CANVAS \
+                          QM_EXPORT_DNS \
+                          QM_EXPORT_DOM \
+                          QM_EXPORT_FTP \
+                          QM_EXPORT_HTTP \
+                          QM_EXPORT_ICONVIEW \
+                          QM_EXPORT_NETWORK \
+                          QM_EXPORT_OPENGL \
+                          QM_EXPORT_OPENVG \
+                          QM_EXPORT_SQL \
+                          QM_EXPORT_TABLE \
+                          QM_EXPORT_WORKSPACE \
+                          QM_EXPORT_XML \
+                          QT_ASCII_CAST_WARN \
+                          QT_ASCII_CAST_WARN_CONSTRUCTOR \
+                          QT_BEGIN_HEADER \
+                          QT_DESIGNER_STATIC \
+                          QT_END_HEADER \
+                          QT_FASTCALL \
+                          QT_WIDGET_PLUGIN_EXPORT \
+                          Q_COMPAT_EXPORT \
+                          Q_CORE_EXPORT \
+                          Q_CORE_EXPORT_INLINE \
+                          Q_EXPLICIT \
+                          Q_EXPORT \
+                          Q_EXPORT_CODECS_CN \
+                          Q_EXPORT_CODECS_JP \
+                          Q_EXPORT_CODECS_KR \
+                          Q_EXPORT_PLUGIN \
+                          Q_GFX_INLINE \
+                          Q_AUTOTEST_EXPORT \
+                          QM_AUTOTEST_EXPORT \
+                          Q_GUI_EXPORT \
+                          Q_GUI_EXPORT_INLINE \
+                          Q_GUI_EXPORT_STYLE_CDE \
+                          Q_GUI_EXPORT_STYLE_COMPACT \
+                          Q_GUI_EXPORT_STYLE_MAC \
+                          Q_GUI_EXPORT_STYLE_MOTIF \
+                          Q_GUI_EXPORT_STYLE_MOTIFPLUS \
+                          Q_GUI_EXPORT_STYLE_PLATINUM \
+                          Q_GUI_EXPORT_STYLE_POCKETPC \
+                          Q_GUI_EXPORT_STYLE_SGI \
+                          Q_GUI_EXPORT_STYLE_WINDOWS \
+                          Q_GUI_EXPORT_STYLE_WINDOWSXP \
+                          QHELP_EXPORT \
+                          Q_INLINE_TEMPLATE \
+                          Q_INTERNAL_WIN_NO_THROW \
+                          Q_NETWORK_EXPORT \
+                          Q_OPENGL_EXPORT \
+                          Q_OPENVG_EXPORT \
+                          Q_OUTOFLINE_TEMPLATE \
+                          Q_SQL_EXPORT \
+                          Q_SVG_EXPORT \
+                          Q_SCRIPT_EXPORT \
+                          Q_SCRIPTTOOLS_EXPORT \
+                          Q_TESTLIB_EXPORT \
+                          Q_TYPENAME \
+                          Q_XML_EXPORT \
+                          Q_XMLSTREAM_EXPORT \
+                          Q_XMLPATTERNS_EXPORT \
+                          QDBUS_EXPORT \
+                          Q_DBUS_EXPORT \
+                          QT_BEGIN_NAMESPACE \
+                          QT_BEGIN_INCLUDE_NAMESPACE \
+                          QT_END_NAMESPACE \
+                          QT_END_INCLUDE_NAMESPACE \
+                          PHONON_EXPORT \
+                          Q_DECLARATIVE_EXPORT \
+                          Q_GADGET \
+                          QWEBKIT_EXPORT \
+                          Q_INVOKABLE \
+                          Q_MULTIMEDIA_EXPORT
+Cpp.ignoredirectives    = Q_DECLARE_HANDLE \
+                          Q_DECLARE_INTERFACE \
+                          Q_DECLARE_METATYPE \
+                          Q_DECLARE_OPERATORS_FOR_FLAGS \
+                          Q_DECLARE_PRIVATE \
+                          Q_DECLARE_PUBLIC \
+                          Q_DECLARE_SHARED \
+                          Q_DECLARE_TR_FUNCTIONS \
+                          Q_DECLARE_TYPEINFO \
+                          Q_DISABLE_COPY \
+                          QT_FORWARD_DECLARE_CLASS \
+                          Q_DUMMY_COMPARISON_OPERATOR \
+                          Q_ENUMS \
+                          Q_FLAGS \
+                          Q_INTERFACES \
+                          __attribute__ \
+                          K_DECLARE_PRIVATE \
+                          PHONON_OBJECT \
+                          PHONON_HEIR \
+                          Q_PRIVATE_PROPERTY \
+                          Q_DECLARE_PRIVATE_D \
+                          Q_CLASSINFO
diff --git a/src/multimedia/doc/qt-defines.qdocconf b/src/multimedia/doc/qt-defines.qdocconf
new file mode 100644
index 0000000..50a355f
--- /dev/null
+++ b/src/multimedia/doc/qt-defines.qdocconf
@@ -0,0 +1,17 @@
+defines                 = Q_QDOC \
+                          QT_.*_SUPPORT \
+                          QT_.*_LIB \
+                          QT_COMPAT \
+                          QT_KEYPAD_NAVIGATION \
+                          QT_NO_EGL \
+                          QT3_SUPPORT \
+                          Q_WS_.* \
+                          Q_OS_.* \
+                          Q_BYTE_ORDER \
+                          QT_DEPRECATED \
+                          Q_NO_USING_KEYWORD \
+                          __cplusplus
+
+versionsym              = QT_VERSION_STR
+
+codeindent              = 1
diff --git a/src/multimedia/doc/qtmultimedia-dita.qdocconf b/src/multimedia/doc/qtmultimedia-dita.qdocconf
new file mode 100644
index 0000000..cb8a73c
--- /dev/null
+++ b/src/multimedia/doc/qtmultimedia-dita.qdocconf
@@ -0,0 +1,32 @@
+# Name of the project.
+project = Qt Multimedia
+
+# Directories in which to search for files to document and images.
+# By default set to the root directory of the project for sources
+# and headers and qdoc will therefore generate output for each file.
+# Images should be placed in <rootdir>/dic/images and examples in
+# <rootdir>/examples.
+# Paths are relative to the location of this file.
+exampledirs += ../src/examples \
+               ../.. \
+               ../../examples
+
+headerdirs += ../src \
+              ../../src
+
+imagedirs += ../src/images \
+
+sourcedirs += ../src \
+              ../../src
+
+excludedirs +=
+
+#Do not change the variables after this line unless you know what you are doing.
+
+outputdir = ../ditaxml
+outputformats = DITAXML
+
+examples.fileextensions = "*.cpp *.h *.js *.svg *.xml *.ui *.qml"
+examples.imageextensions = "*.png *.jpeg *.jpg *.gif *.mng"
+headers.fileextensions = "*.h *.ch *.h++ *.hh *.hpp *.hxx"
+sources.fileextensions = "*.cpp *.qdoc *.mm *.qml"
diff --git a/src/multimedia/doc/qtmultimedia.qdocconf b/src/multimedia/doc/qtmultimedia.qdocconf
new file mode 100644
index 0000000..98e2bd3
--- /dev/null
+++ b/src/multimedia/doc/qtmultimedia.qdocconf
@@ -0,0 +1,85 @@
+include(compat.qdocconf)
+include(macros.qdocconf)
+include(qt-cpp-ignore.qdocconf)
+include(qt-defines.qdocconf)
+
+# Name of the project.
+project = Qt Multimedia
+description = Qt Multimedia Documentation
+
+# Directories in which to search for files to document and images.
+# By default set to the root directory of the project for sources
+# and headers and qdoc will therefore generate output for each file.
+# Images should be placed in <rootdir>/dic/images and examples in
+# <rootdir>/examples.
+# Paths are relative to the  location of this file.
+
+exampledirs += .. \
+               ../../../examples
+
+headerdirs += src \
+              ../..
+
+imagedirs += src/images \
+
+sourcedirs += src \
+              ../..
+
+excludedirs +=
+
+# The index file contains links to the Qt 5 documentation.
+# Point to the any .index file to cross link to other projects
+#indexes = $QT5DOC/doc/html/qt.index
+
+# The following parameters are for creating a qhp file, the qhelpgenerator
+# program can convert the qhp file into a qch file which can be opened in
+# Qt Assistant and/or Qt Creator.
+
+# Defines the name of the project. You cannot use operators (+, =, -) in
+# the name. Properties for this project are set using a qhp.<projectname>.property
+# format.
+qhp.projects = qtmultimedia
+
+# Sets the name of the output qhp file.
+qhp.qtmultimedia.file = qtmultimedia.qhp
+
+# Namespace for the output file. This namespace is used to distinguish between
+# different documentation files in Creator/Assistant.
+qhp.qtmultimedia.namespace = qtmultimedia.500
+
+# Title for the package, will be the main title for the package in
+# Assistant/Creator.
+qhp.qtmultimedia.indexTitle = Qt Multimedia Documentation
+
+# Extra files to add to the output which are not linked to from anywhere
+# using a qdoc \l command.
+qhp.qtmultimedia.extraFiles = style/qtmultimedia.css
+
+# Only update the name of the project for the next variables.
+qhp.qtmultimedia.virtualFolder  = qdoc
+qhp.qtmultimedia.subprojects = classes
+qhp.qtmultimedia.subprojects.classes.title = Classes
+qhp.qtmultimedia.subprojects.classes.selectors = class fake:headerfile
+qhp.qtmultimedia.subprojects.classes.sortPages = true
+
+
+
+# Do NOT change the variables after this line unless you know what you are doing.
+
+outputdir = html
+outputformats = HTML
+
+examples.fileextensions = "*.cpp *.h *.js *.svg *.xml *.ui *.qml"
+examples.imageextensions = "*.png *.jpeg *.jpg *.gif *.mng"
+headers.fileextensions = "*.h *.ch *.h++ *.hh *.hpp *.hxx"
+sources.fileextensions = "*.cpp *.qdoc *.mm *.qml"
+
+HTML.nobreadcrumbs = "true"
+
+HTML.templatedir = .
+HTML.stylesheets = style/qtmultimedia.css
+
+HTML.headerstyles = "  <link rel=\"stylesheet\" type=\"text/css\" href=\"style/qtmultimedia.css\" />\n"
+HTML.endheader = "</head>\n<body>\n"
+
+HTML.footer = "<div class=\"footer\">Copyright (c) 2012 Nokia Corporation and/or its subsidiaries. All rights reserved.</div>\n"
diff --git a/src/multimedia/doc/qtmultimedia_doc.pri b/src/multimedia/doc/qtmultimedia_doc.pri
new file mode 100644
index 0000000..caa8032
--- /dev/null
+++ b/src/multimedia/doc/qtmultimedia_doc.pri
@@ -0,0 +1,47 @@
+
+win32:!win32-g++ {
+    unixstyle = false
+} else:win32-g++:isEmpty(QMAKE_SH) {
+    unixstyle = false
+} else {
+    unixstyle = true
+}
+
+qtPrepareTool(QDOC, qdoc)
+isEmpty(QDOC): warning("No qdoc executable found.")
+
+ONLINE_CONF = $$PWD/qtmultimedia.qdocconf
+DITA_CONF = $$PWD/qtmultimedia-dita.qdocconf
+QCH_CONF = #nothing yet
+
+$$unixstyle {
+} else {
+    QDOC = $$replace(QDOC, "qdoc", "qdoc3.exe")
+    ONLINE_CONF = $$replace(ONLINE_CONF, "/", "\\")
+    DITA_DOCS = $$replace(ONLINE_CONF, "/", "\\")
+}
+
+# Build rules
+docs.depends = dita_docs online_docs qch_docs
+
+online_docs.commands = $$QDOC $$ONLINE_CONF
+
+dita_docs.commands = $$QDOC $$DITA_CONF
+
+qch_docs.commands = #no commands yet
+
+QMAKE_EXTRA_TARGETS += docs dita_docs online_docs qch_docs
+QMAKE_CLEAN += \
+               "-r $$PWD/../html" \
+               "-r $$PWD/../ditaxml"
+
+
+OTHER_FILES += \
+    doc/src/cameraoverview.qdoc \
+    doc/src/changes.qdoc \
+    doc/src/multimediabackend.qdoc \
+    doc/src/multimedia.qdoc \
+    doc/src/audiooverview.qdoc \
+    doc/src/radiooverview.qdoc \
+    doc/src/videooverview.qdoc \
+    doc/src/plugins/qml-multimedia.qdoc
diff --git a/src/multimedia/doc/src/audioengineoverview.qdoc b/src/multimedia/doc/src/audioengineoverview.qdoc
new file mode 100644
index 0000000..6ccc955
--- /dev/null
+++ b/src/multimedia/doc/src/audioengineoverview.qdoc
@@ -0,0 +1,79 @@
+/****************************************************************************
+**
+** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/
+**
+** This file is part of the documentation of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:FDL$
+** GNU Free Documentation License
+** Alternatively, this file may be used under the terms of the GNU Free
+** Documentation License version 1.3 as published by the Free Software
+** Foundation and appearing in the file included in the packaging of
+** this file.
+**
+** Other Usage
+** Alternatively, this file may be used in accordance with the terms
+** and conditions contained in a signed written agreement between you
+** and Nokia.
+**
+**
+**
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+/*!
+\page audioengineoverview.html
+\title Positional Audio
+\brief 3D positional audio playback and content management
+
+\section1 QtAudioEngine Features
+
+Qt Multimedia includes the \c QtAudioEngine QML module for
+providing 3D positional audio playback and content management.
+
+QtAudioEngine enables developers to organize wave files into discrete \l Sound with different
+\l {PlayVariation}{play variations}, group sound controls by \l {AudioCategory} categories and
+define \l {AttenuationModelLinear}{attenuation models} and various 3d audio settings all in one
+place. Playback of \l {SoundInstance}{sound instances} can be conveniently activated by in-app
+events and managed by QtAudioEngine or controlled by explicitly defining \l SoundInstance
+for easier QML bindings.
+
+To access these QML types import the
+\b{QtAudioEngine 1.0} module.
+
+\qml
+import QtQuick 2.0
+import QtAudioEngine 1.0
+
+AudioEngine {
+//...
+}
+\endqml
+
+\section1 Examples
+\list
+    \li \l {AudioEngine Example}{Audio Engine}
+\endlist
+
+\section1 Reference Documentation
+
+\section2 QML Types
+
+\list
+    \li \l AudioEngine
+    \li \l AudioSample
+    \li \l AudioCategory
+    \li \l AttenuationModelLinear
+    \li \l AttenuationModelInverse
+    \li \l Sound
+    \li \l PlayVariation
+    \li \l AudioListener
+    \li \l SoundInstance
+
+\endlist
+
+*/
diff --git a/src/multimedia/doc/src/audiooverview.qdoc b/src/multimedia/doc/src/audiooverview.qdoc
new file mode 100644
index 0000000..916174d
--- /dev/null
+++ b/src/multimedia/doc/src/audiooverview.qdoc
@@ -0,0 +1,153 @@
+/****************************************************************************
+**
+** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/
+**
+** This file is part of the documentation of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:FDL$
+** GNU Free Documentation License
+** Alternatively, this file may be used under the terms of the GNU Free
+** Documentation License version 1.3 as published by the Free Software
+** Foundation and appearing in the file included in the packaging of
+** this file.
+**
+** Other Usage
+** Alternatively, this file may be used in accordance with the terms
+** and conditions contained in a signed written agreement between you
+** and Nokia.
+**
+**
+**
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+/*!
+\page audiooverview.html
+\title Audio Overview
+\brief Audio playback, recording and processing
+
+\section1 Audio Features
+
+Qt Multimedia offers a range of audio classes, covering both low and
+high level approaches to audio input, output and processing.  In
+addition to traditional audio usage, the \l {Positional Audio}{Qt AudioEngine}
+QML types offer high level 3D positional audio for QML applications.
+See that documentation for more information.
+
+\section1 Audio Implementation Details
+
+\section2 Playing Compressed Audio
+For playing media or audio files that are not simple, uncompressed audio, you can
+use the \l QMediaPlayer C++ class, or the \l {Audio} and \l {MediaPlayer} QML types.
+The QMediaPlayer class and associated QML types are also capable of playing
+\l{multimedia-playing-video}{video}, if required.  The compressed audio formats supported does depend
+on the operating system environment, and also what media plugins the user
+may have installed.
+
+Here is how you play a local file using C++:
+
+    \snippet doc/src/snippets/multimedia-snippets/media.cpp Local playback
+
+You can also put files (even remote URLs) into a playlist:
+    \snippet doc/src/snippets/multimedia-snippets/media.cpp Audio playlist
+
+\section2 Recording Audio to a File
+For recording audio to a file, the \l {QAudioRecorder} class allows you
+to compress audio data from an input device and record it.
+
+    \snippet doc/src/snippets/multimedia-snippets/media.cpp Audio recorder
+
+\section2 Low Latency Sound Effects
+
+In addition to the raw access to sound devices described above, the QSoundEffect class (and
+\l {SoundEffect} QML type) offers a slightly higher level way to play
+sounds.  These classes allow you to specify a WAV format file which can
+then be played with low latency when necessary.  Both QSoundEffect and
+SoundEffect have essentially the same API.
+
+You can adjust the number of \l {QSoundEffect::loopCount()}{loops} a sound effect is played, as well as
+the \l {QSoundEffect::setVolume()}{volume} (or \l {QSoundEffect::setMuted()}{muting}) of the effect.
+
+For older, Qt 4.x based applications \l QSound is also available.  Applications
+are recommended to use QSoundEffect where possible.
+
+\section2 Monitoring Audio Data During Playback or Recording
+
+The \l QAudioProbe class allows you to monitor audio data being played or
+recorded in the higher level classes like \l QMediaPlayer, \l QCamera and
+\l QAudioRecorder.  After creating your high level class, you can simply
+set the source of the probe to your class, and receive audio buffers as they
+are processed.  This is useful for several audio processing tasks, particularly
+for visualization or adjusting gain.  You cannot modify the buffers, and
+they may arrive at a slightly different time than the media pipeline
+processes them.
+
+Here's an example of installing a probe during recording:
+    \snippet doc/src/snippets/multimedia-snippets/media.cpp Audio probe
+
+\section2 Low Level Audio Playback and Recording
+Qt Multimedia offers classes for raw access to audio input and output
+facilities, allowing applications to receive raw data from devices like
+microphones, and to write raw data to speakers or other devices.  Generally
+these classes do not do any audio decoding, or other processing, but they
+can support different types of raw audio data.
+
+The QAudioOutput class offers raw audio data output, while QAudioInput
+offers raw audio data input.  Both classes have adjustable buffers and
+latency, so they are suitable for both low latency use cases (like games
+or VOIP) and high latency (like music playback).  The available hardware
+determines what audio outputs and inputs are available.
+
+\section3 Push and Pull
+The low level audio classes can operate in two modes - \c push and \c pull.
+In \c pull mode, the audio device is started by giving it a QIODevice.  For
+an output device, the QAudioOutput class will pull data from the QIODevice
+(using \l QIODevice::read()) when more audio data is required.  Conversely,
+for \c pull mode with QAudioInput, when audio data is available then the
+data will be written directly to the QIODevice.
+
+In \c push mode, the audio device provides a QIODevice instance that
+can be written or read to as needed.  Typically this results in simpler
+code but more buffering, which may affect latency.
+
+\section2 Decoding Compressed Audio to Memory
+In some cases you may want to decode a compressed audio file and do further
+processing yourself (like mix multiple samples, or some custom digital signal
+processing algorithms).  Qt Multimedia 5.0 offers a preliminary API for this
+case - the \l QAudioDecoder class.  QAudioDecoder supports decoding local files
+or from a QIODevice instances.
+
+Here's an example of decoding a local file:
+
+    \snippet doc/src/snippets/multimedia-snippets/audio.cpp Local audio decoding
+
+Note:  This API is preliminary at this time - the API may change or be
+removed before the final 5.0 release.
+
+\section1 Examples
+
+There are both C++ and QML examples available.
+
+\section2 C++ Examples
+
+\annotatedlist audio_examples
+
+\section2 QML Examples
+
+[TBD]
+
+\section1 Reference Documentation
+
+\section2 C++ Classes
+
+\annotatedlist multimedia_audio
+
+\section2 QML Types
+
+\annotatedlist multimedia_audio_qml
+
+*/
diff --git a/src/multimedia/doc/src/cameraoverview.qdoc b/src/multimedia/doc/src/cameraoverview.qdoc
new file mode 100644
index 0000000..a3698ed
--- /dev/null
+++ b/src/multimedia/doc/src/cameraoverview.qdoc
@@ -0,0 +1,262 @@
+/****************************************************************************
+**
+** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/
+**
+** This file is part of the documentation of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:FDL$
+** GNU Free Documentation License
+** Alternatively, this file may be used under the terms of the GNU Free
+** Documentation License version 1.3 as published by the Free Software
+** Foundation and appearing in the file included in the packaging of
+** this file.
+**
+** Other Usage
+** Alternatively, this file may be used in accordance with the terms
+** and conditions contained in a signed written agreement between you
+** and Nokia.
+**
+**
+**
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+/*!
+\page cameraoverview.html
+\title Camera Overview
+\brief Camera viewfinder, still image capture, and video recording.
+
+The Qt Multimedia API provides a number of camera related classes, so you
+can access images and videos from mobile device cameras or webcameras.
+There are both C++ and QML APIs for common tasks.
+
+\section1 Camera Features
+
+In order to use the camera classes a quick overview of the way a camera
+works is needed.  If you're already familiar with this, you can skip ahead to
+\l {camera-tldr}{Camera implementation details}.
+
+[TBD - this needs a diagram]
+* Camera features
+ * lens -> sensors -> image processing -> capture/recording
+
+\section2 The Lens Assembly
+At one end of the camera assembly is the lens assembly (one or
+more lenses, arranged to focus light onto the sensor).  The lenses
+themselves can sometimes be moved to adjust things like focus and zoom,
+or they might be fixed in an arrangement to give a good balance between
+objects in focus, and cost.
+
+Some lens assemblies can automatically be adjusted so that
+an object at different distances from the camera can be kept in focus.
+This is usually done by measuring how sharp a particular area of the
+frame is, and by adjusting the lens assembly until it is maximally
+sharp.  In some cases the camera will always use the center of the
+frame for this.  Other cameras may also allow the region to focus
+to be specified (for "touch to zoom", or "face zoom" features).
+
+\section2 The Sensor
+Once light arrives at the sensor, it gets converted into digital pixels.
+This process can depend on a number of things but ultimately comes down
+to two things - how long the conversion is allowed to take, and how
+bright the light is.  The longer a conversion can take, the better the
+quality.  Using a flash can assist with letting more light hit the sensor,
+allowing it to convert pixels faster, giving better quality for the same
+amount of time.  Conversely, allowing a longer conversion time can let you
+take photos in darker environments, as long as the camera is steady.
+
+\section2 Image Processing
+After the image has been captured by the sensor, the camera firmware performs
+various image processing tasks on it to compensate for various sensor
+characteristics, current lighting, and desired image properties.  Faster sensor
+pixel conversion times tend to introduce digital noise, so some amount of image
+processing can be done to remove this based on the camera sensor settings.
+
+The color of the image can also be adjusted at this stage to compensate for
+different light sources - fluorescent lights and sunlight give very different
+appearances to the same object, so the image can be adjusted based on the
+white balance of the picture (due to the different color temperatures of the
+light sources).
+
+Some forms of "special effects" can also be performed at this stage.  Black
+and white, sepia, or "negative" style images can be produced.
+
+\section2 Recording for Posterity
+Finally, once a perfectly focused, exposed and processed image has been
+created, it can be put to good use.  Camera images can be further processed
+by application code (for example, to detect barcodes, or to stitch together a
+panoramic image), or saved to a common format like JPEG, or used to create a movie.
+Many of these tasks have classes to assist them.
+
+\target camera-tldr
+\section1 Camera Implementation Details
+\section2 Viewfinder
+
+While not strictly necessary, it's often useful to be able to see
+what the camera is pointing at.  Most digital cameras allow an image
+feed from the camera sensor at a lower resolution (usually up to
+the size of the display of the camera) so you can compose
+a photo or video, and then switch to a slower but higher resolution
+mode for capturing the image.
+
+Depending on whether you're using QML or C++, you can do this in multiple ways.
+In QML, you can use \l Camera and \l VideoOutput together to show a
+simple viewfinder:
+
+\qml
+    Camera {
+        id: camera
+        // You can adjust various settings in here
+    }
+
+    VideoOutput {
+        source: camera
+    }
+\endqml
+
+In C++, your choice depends on whether you are using widgets, or QGraphicsView.
+The \l QVideoWidget class is used in the widgets case, and \l QGraphicsVideoItem
+is useful for QGraphicsView.
+
+    \snippet doc/src/snippets/multimedia-snippets/camera.cpp Camera overview viewfinder
+
+For advanced usage (like processing viewfinder frames as they come, to detect
+objects or patterns), you can also derive from \l QAbstractVideoSurface and
+set that as the viewfinder for the QCamera object.  In this case you will
+need to render the viewfinder image yourself.
+
+    \snippet doc/src/snippets/multimedia-snippets/camera.cpp Camera overview surface
+
+\section2 Still Images
+
+After setting up a viewfinder and finding something photogenic,
+to capture an image we need to initialize a new QCameraImageCapture
+object. All that is then needed is to start the camera, lock it so
+that things are in focus and the settings are not different from the
+viewfinder while the image capture occurs, capture the image, and
+finally unlock the camera ready for the next photo.
+
+    \snippet doc/src/snippets/multimedia-snippets/camera.cpp Camera overview capture
+
+\section2 Movies
+
+Previously we saw code that allowed the capture of a still image. Recording
+video requires the use of a \l QMediaRecorder object.
+
+To record video we need to create a camera object as before but this time as
+well as creating a viewfinder, we will also initialize a media recorder object.
+
+    \snippet doc/src/snippets/multimedia-snippets/camera.cpp Camera overview movie
+
+Signals from the \e mediaRecorder can be connected to slots to react to
+changes in the state of the recorder or error events. Recording itself
+starts with the \l {QMediaRecorder::record()}{record()} function of
+mediaRecorder being called, this causes the signal \l
+{QMediaRecorder::stateChanged()}{stateChanged()} to be emitted. The
+recording process can be changed with the \l {QMediaRecorder::record()}{record()},
+\l {QMediaRecorder::stop()}{stop()} and \l {QMediaRecorder::setMuted()}{setMuted()}
+slots in \l QMediaRecorder.
+
+\section2 Controlling the Imaging Pipeline
+
+Now that the basics of capturing images or movies are covered, there are a number
+of ways to control the imaging pipeline to implement some interesting techniques.
+As explained earlier, several physical and electronic elements combine to determine
+the final images, and you can control them with different classes.
+
+\section3 Focus and Zoom
+
+Focusing (and zoom) is managed primarily by the \l QCameraFocus class.
+QCameraFocus allows the developer to set the general policy by means of the
+enums for the \l {QCameraFocus::FocusMode}{FocusMode} and the
+\l {QCameraFocus::FocusPointMode}{FocusPointMode}. \l {QCameraFocus::FocusMode}{FocusMode}
+deals with settings such as \l {QCameraFocus::FocusMode}{AutoFocus},
+\l {QCameraFocus::FocusMode}{ContinuousFocus} and \l {QCameraFocus::FocusMode}{InfinityFocus},
+whereas \l {QCameraFocus::FocusMode}{FocusPointMode} deals with the
+various focus zones within the view that are used for autofocus modes. \l {QCameraFocus::FocusMode}{FocusPointMode}
+has support for face recognition (where the camera supports it), center focus and a custom
+focus where the focus point can be specified.
+
+For camera hardware that supports it, \l {QCameraFocus::FocusMode}{Macro focus} allows
+imaging of things that are close to the sensor.  This is useful in applications like
+barcode recognition, or business card scanning.
+
+In addition to focus, QCameraFocus allows you to control any available optical or
+digital zoom.  In general, optical zoom is higher quality, but more expensive to
+manufacture, so the available zoom range might be limited (or fixed to unity).
+
+\section3 Exposure, Aperture, Shutter Speed and Flash
+
+There are a number of settings that affect the amount of light that hits the
+camera sensor, and hence the quality of the resulting image.  The \l QCameraExposure
+class allows you to adjust these settings.  You can use this class to implement
+some techniques like High Dynamic Range (HDR) photos by locking the exposure
+parameters (with \l {QCamera::searchAndLock()}), or motion blur by setting slow shutter speeds
+with small apertures.
+
+The main settings for automatic image taking are the \l {QCameraExposure::ExposureMode}{exposure mode}
+and \l {QCameraExposure::FlashMode}{flash mode}.  Several other settings (aperture, ISO setting,
+ shutter speed) are usually managed automatically but can also be overridden if desired.
+
+You can also adjust the \l {QCameraExposure::meteringMode()} to control which parts
+of the camera frame to measure exposure at.  Some camera implementations also allow
+you to specify a specific point that should be used for exposure metering - this is
+useful if you can let the user touch or click on an interesting part of the viewfinder,
+and then use this point so that the image exposure is best at that point.
+
+Finally, you can control the flash hardware (if present) using this class.  In some cases
+the hardware may also double as a torch (typically when the flash is LED based, rather than
+a xenon or other bulb).  See also \l {Torch} for an easy to use API for
+torch functionality.
+
+\target camera_image_processing
+\section3 Image Processing
+
+The QCameraImageProcessing class lets you adjust the image processing
+part of the pipeline.  This includes the \l {QCameraImageProcessing::WhiteBalanceMode}{white balance}
+(or color temperature), \l {QCameraImageProcessing::contrast()}{contrast},
+\l {QCameraImageProcessing::saturation()}{saturation}, \l {QCameraImageProcessing::setSharpeningLevel()}{sharpening}
+and \l {QCameraImageProcessing::setDenoisingLevel()}{denoising}.  Most cameras support automatic settings
+for all of these, so you shouldn't need to adjust them unless the user wants a specific setting.
+
+If you're taking a series of images (for example, to stitch them together for
+a panoramic image), you should lock the image processing settings so that all the
+images taken appear similar with \e {QCamera::lock(QCamera::LockWhiteBalance)}/
+
+\section3 Canceling Asynchronous Operations
+
+Various operations such as image capture and auto focusing occur
+asynchrously. These operations can often be canceled by the start of a new
+operation as long as this is supported by the camera. For image capture,
+the operation can be canceled by calling
+\l {QCameraImageCapture::cancelCapture()}{cancelCapture()}. For AutoFocus,
+autoexposure or white balance cancellation can be done by calling
+\e {QCamera::unlock(QCamera::LockFocus)}.
+
+\section1 Examples
+
+There are both C++ and QML examples available.
+
+\section2 C++ Examples
+
+\annotatedlist camera_examples
+
+\section2 QML Examples
+
+\annotatedlist camera_examples_qml
+
+\section1 Reference Documentation
+
+\section2 C++ Classes
+
+\annotatedlist multimedia_camera
+
+\section2 QML Types
+
+\annotatedlist camera_qml
+
+*/
diff --git a/src/multimedia/doc/src/changes.qdoc b/src/multimedia/doc/src/changes.qdoc
new file mode 100644
index 0000000..f60b4e7
--- /dev/null
+++ b/src/multimedia/doc/src/changes.qdoc
@@ -0,0 +1,157 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/
+**
+** This file is part of the documentation of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:FDL$
+** GNU Free Documentation License
+** Alternatively, this file may be used under the terms of the GNU Free
+** Documentation License version 1.3 as published by the Free Software
+** Foundation and appearing in the file included in the packaging of
+** this file.
+**
+** Other Usage
+** Alternatively, this file may be used in accordance with the terms
+** and conditions contained in a signed written agreement between you
+** and Nokia.
+**
+**
+**
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+/*!
+
+\page changes.html
+\title Changes in Qt Multimedia
+\brief A description of changes in this version of Qt Multimedia
+
+
+The Qt Multimedia module in Qt 5 is a combination of the Qt Multimedia module
+in Qt 4.x and the Qt Multimedia Kit module of Qt Mobility.  It replaces both
+of these modules by combining the code.  If you've previously used Qt Multimedia
+there are not too many changes required for existing code, but there are some
+larger changes required for porting code that used Qt Multimedia Kit (most notably
+the namespace and header file prefix has changed, and the qmake pro file changes
+needed to enable Qt Multimedia).
+
+One other change of note is that widget related classes (like \l QVideoWidget)
+are now in a new library (Qt Multimedia Widgets).
+
+\section1 New features in 5.0
+
+There are a number of new features in Qt Multimedia 5.0:
+\list
+\li Expanded QML API
+\li New \l QAudioRecorder class
+\li Volume support for QAudioOutput and QAudioInput
+\li More examples and documentation
+\li QML \l Torch class
+\li QSound moved from QtGui to QtMultimedia
+\li QSoundEffect available to C++ now, as well as QML
+\li FM Radio Data System classes and types now available (\l QRadioData, \l RadioData)
+\li Various other API improvements and bugfixes
+\endlist
+
+\section1 Removed features
+
+A number of classes or features previously offered in Qt Multimedia or Qt Multimedia Kit have
+been removed.
+
+\table 70%
+    \header
+        \li Removed feature
+        \li Notes
+    \row
+        \li QMediaImageViewer
+        \li This class (and related controls and services) were removed since
+           their functionality was not suitable for many applications
+\endtable
+
+\section1 Changed features
+
+A number of classes previously offered in Qt Multimedia or Qt Multimedia Kit have
+changed in ways that may affect previously written code.  There may be other
+changes (like new features) that will not affect previously written code, and
+they are documented elsewhere.
+
+\table 70%
+    \header
+        \li Changed feature
+        \li Notes
+    \row
+        \li qmake .pro file changes
+        \li If you've used QtMultimediaKit in the past, you needed to put
+           \code
+           CONFIG += mobility
+           MOBILITY += multimedia
+           \endcode
+           in your .pro file.  Now you need to use:
+           \code
+           QT += multimedia
+           \endcode
+           or
+           \code
+           QT += multimedia multimediawidgets
+           \endcode
+           if you need to use the widget classes.
+    \row
+        \li Namespace changes
+        \li For Qt Multimedia Kit the majority of the classes were in the
+           normal Qt namespace (usually nothing, unless built specially).  There
+           was a Qt Multimedia Kit namespace for several enumerations.  This namespace
+           has now changed to Qt Multimedia, so if you've used one of the
+           \c SupportEstimate, \c EncodingQuality, \c EncodingMode or \c AvailabilityStatus
+           enumerations you'll need to change your code.  In fact, running a global
+           search and replace on \c QtMultimediaKit (to replace it with \c QtMultimedia) will
+           go a long way with porting your code.
+    \row
+        \li Meta-data enumeration changes
+        \li In Qt Multimedia Kit the available meta-data keys were in an enumeration
+           in the \c QtMultimediaKit namespace.  These meta-data keys have been changed
+           to string literals in the \c {QtMultimedia::MetaData} namespace - generally your
+           source code will mostly be compatible unless you have created variables or
+           parameters with the \c {QtMultimedia::MetaData} type - you should replace these
+           with \c QString.
+    \row
+        \li Meta-data method changes
+        \li In Qt Multimedia Kit the available meta-data was split between methods to
+           access standard, pre-defined keys, and methods to access extensible free
+           form key meta-data.  These have been combined into a single method to
+           access meta-data given a string key, and a list of pre-defined keys.  If
+           you've used the \c extendedMetaData method of any class, you will need
+           to change your code to combine the standard and extended metadata methods.
+    \row
+        \li Qt Metatype registration
+        \li In Qt Multimedia 5.0 we've tried to make sure that we register any classes
+           or types that would be useful to use in cross process signals or in
+           QVariants.  If you've previously added Q_DECLARE_METATYPE macros for any
+           Qt Multimedia class you will probably need to remove them.
+    \row
+        \li Video QML type
+        \li If you've previously used \l Video you may be excited
+           to learn that it should still work as expected, but you also have
+           the choice of using \l MediaPlayer and \l VideoOutput
+           together for more flexible and advanced use cases.
+    \row
+        \li QSoundEffect
+        \li The SoundEffect QML type was public and accessible in Qt Multimeda Kit,
+           and now the C++ version is also available.  If you managed to use the
+           private class previously, you'll need to update your code.
+    \row
+        \li Camera controls
+        \li A large number of the camera controls (QCameraImageProcessingControl,
+           QCameraFocusControl etc) have been updated to address a number of
+           design flaws.  If you have previously been using these classes, you
+           should check the new design.  In particular, a number of discrete
+           accessor methods have been collapsed into parametrized methods, and
+           the range or data type of some parameters has been adjusted.
+
+\endtable
+
+*/
diff --git a/src/multimedia/doc/src/classic.css b/src/multimedia/doc/src/classic.css
new file mode 100644
index 0000000..b8cae8e
--- /dev/null
+++ b/src/multimedia/doc/src/classic.css
@@ -0,0 +1,284 @@
+BODY,H1,H2,H3,H4,H5,H6,P,CENTER,TD,TH,UL,DL,DIV {
+  font-family: Arial, Geneva, Helvetica, sans-serif;
+}
+H1 {
+  text-align: center;
+  font-size: 160%;
+}
+H2 {
+  font-size: 120%;
+}
+H3 {
+  font-size: 100%;
+}
+
+h3.fn,span.fn
+{
+  background-color: #eee;
+  border-width: 1px;
+  border-style: solid;
+  border-color: #ddd;
+  font-weight: bold;
+  padding: 6px 0px 6px 10px;
+  margin: 42px 0px 0px 0px;
+}
+
+hr {
+  border: 0;
+  color: #a0a0a0;
+  background-color: #ccc;
+  height: 1px;
+  width: 100%;
+  text-align: left;
+  margin: 34px 0px 34px 0px;
+}
+
+table.valuelist {
+	border-width: 1px 1px 1px 1px;
+	border-style: solid;
+	border-color: #dddddd;
+	border-collapse: collapse;
+	background-color: #f0f0f0;
+}
+
+table.indextable {
+	border-width: 1px 1px 1px 1px;
+	border-style: solid;
+	border-collapse: collapse;
+	background-color: #f0f0f0;
+    border-color:#555;
+    font-size: 100%;
+}
+
+table td.largeindex {
+	border-width: 1px 1px 1px 1px;
+	border-collapse: collapse;
+	background-color: #f0f0f0;
+    border-color:#555;
+    font-size: 120%;
+}
+
+table.valuelist th {
+	border-width: 1px 1px 1px 2px;
+	padding: 4px;
+	border-style: solid;
+	border-color: #666;
+    color:white;
+    background-color:#666;
+}
+
+th.titleheader  {
+	border-width: 1px 0px 1px 0px;
+	padding: 2px;
+	border-style: solid;
+	border-color: #666;
+    color:white;
+    background-color:#555;
+    background-image:url('images/gradient.png')};
+    background-repeat: repeat-x;
+    font-size: 100%;
+}
+
+
+th.largeheader {
+	border-width: 1px 0px 1px 0px;
+	padding: 4px;
+	border-style: solid;
+	border-color: #444;
+    color:white;
+    background-color:#555555;
+    font-size: 120%;
+}
+
+p {
+
+  margin-left: 4px;
+  margin-top: 8px;
+  margin-bottom: 8px;
+}
+
+a:link
+{
+  color: #0046ad;
+  text-decoration: none
+}
+
+a:visited
+{
+  color: #672967;
+  text-decoration: none
+}
+
+a.obsolete
+{
+  color: #661100;
+  text-decoration: none
+}
+
+a.compat
+{
+  color: #661100;
+  text-decoration: none
+}
+
+a.obsolete:visited
+{
+  color: #995500;
+  text-decoration: none
+}
+
+a.compat:visited
+{
+  color: #995500;
+  text-decoration: none
+}
+
+body
+{
+  background: #ffffff;
+  color: black
+}
+
+table.generic, table.annotated
+{
+  border-width: 1px;
+  border-color:#bbb;
+  border-style:solid;  
+  border-collapse:collapse;
+}
+
+table td.memItemLeft {
+  width: 180px;
+  padding: 2px 0px 0px 8px;
+  margin: 4px;
+  border-width: 1px;
+  border-color: #E0E0E0;
+  border-style: none;
+  font-size: 100%;
+  white-space: nowrap
+}
+
+table td.memItemRight {
+  padding: 2px 8px 0px 8px;
+  margin: 4px;
+  border-width: 1px;
+  border-color: #E0E0E0;
+  border-style: none;
+  font-size: 100%;
+}
+
+table tr.odd {
+  background: #f0f0f0;
+  color: black;
+}
+
+table tr.even {
+  background: #e4e4e4;
+  color: black;
+}
+
+table.annotated th {
+  padding: 3px;
+  text-align: left
+}
+
+table.annotated td {
+  padding: 3px;
+}
+
+table tr pre
+{
+  padding-top: 0px;
+  padding-bottom: 0px;
+  padding-left: 0px;
+  padding-right: 0px;
+  border: none;
+  background: none
+}
+
+tr.qt-style
+{
+  background: #96E066;
+  color: black
+}
+
+body pre
+{
+  padding: 0.2em;
+  border: #e7e7e7 1px solid;
+  background: #f1f1f1;
+  color: black
+}
+
+table tr.qt-code pre
+{
+  padding: 0.2em;
+  border: #e7e7e7 1px solid;
+  background: #f1f1f1;
+  color: black
+}
+
+span.preprocessor, span.preprocessor a
+{
+  color: darkblue;
+}
+
+span.comment
+{
+  color: darkred;
+  font-style: italic
+}
+
+span.string,span.char
+{
+  color: darkgreen;
+}
+
+.title
+{
+    text-align: center
+}
+
+.subtitle
+{
+    font-size: 0.8em
+}
+
+.small-subtitle
+{
+    font-size: 0.65em
+}
+
+.qmlitem {
+    padding: 0;
+}
+
+.qmlname {
+    white-space: nowrap;
+}
+
+.qmltype {
+    text-align: center;
+    font-size: 160%;
+}
+
+.qmlproto {
+    background-color: #eee;
+    border-width: 1px;
+    border-style: solid;
+    border-color: #ddd;
+    font-weight: bold;
+    padding: 6px 10px 6px 10px;
+    margin: 42px 0px 0px 0px;
+}
+
+.qmlreadonly {
+    float: right;
+    color: red
+}
+
+.qmldoc {
+}
+
+*.qmlitem p {
+}
diff --git a/src/multimedia/doc/src/examples/audiodevices.qdoc b/src/multimedia/doc/src/examples/audiodevices.qdoc
new file mode 100644
index 0000000..1b28854
--- /dev/null
+++ b/src/multimedia/doc/src/examples/audiodevices.qdoc
@@ -0,0 +1,43 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/
+**
+** This file is part of the documentation of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:FDL$
+** GNU Free Documentation License
+** Alternatively, this file may be used under the terms of the GNU Free
+** Documentation License version 1.3 as published by the Free Software
+** Foundation and appearing in the file included in the packaging of
+** this file.
+**
+** Other Usage
+** Alternatively, this file may be used in accordance with the terms
+** and conditions contained in a signed written agreement between you
+** and Nokia.
+**
+**
+**
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+/*!
+    \example audiodevices
+    \title Audio Devices Example
+    \ingroup audio_examples
+    \brief The Audio Devices example shows the application of the audio devices APIs
+
+
+    This example shows how to create a simple application to list and test
+    the configuration for the various audio devices available on the device
+    or machine. This is done using the QtMobility Multimedia API.
+
+    \image audiodevices.png
+
+*/
+
+
diff --git a/src/multimedia/doc/src/examples/audioengine.qdoc b/src/multimedia/doc/src/examples/audioengine.qdoc
new file mode 100644
index 0000000..24067cf
--- /dev/null
+++ b/src/multimedia/doc/src/examples/audioengine.qdoc
@@ -0,0 +1,39 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/
+**
+** This file is part of the documentation of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:FDL$
+** GNU Free Documentation License
+** Alternatively, this file may be used under the terms of the GNU Free
+** Documentation License version 1.3 as published by the Free Software
+** Foundation and appearing in the file included in the packaging of
+** this file.
+**
+** Other Usage
+** Alternatively, this file may be used in accordance with the terms
+** and conditions contained in a signed written agreement between you
+** and Nokia.
+**
+**
+**
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+/*!
+    \example audioengine
+    \title AudioEngine Example
+    \ingroup audioengine_examples
+    \brief The Audio Engine example demonstrates 3D sound control using
+    the QtAudioEngine API.
+
+    \image audioengine.png
+
+*/
+
+
diff --git a/src/multimedia/doc/src/examples/audioinput.qdoc b/src/multimedia/doc/src/examples/audioinput.qdoc
new file mode 100644
index 0000000..9a0ec5e
--- /dev/null
+++ b/src/multimedia/doc/src/examples/audioinput.qdoc
@@ -0,0 +1,36 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/
+**
+** This file is part of the documentation of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:FDL$
+** GNU Free Documentation License
+** Alternatively, this file may be used under the terms of the GNU Free
+** Documentation License version 1.3 as published by the Free Software
+** Foundation and appearing in the file included in the packaging of
+** this file.
+**
+** Other Usage
+** Alternatively, this file may be used in accordance with the terms
+** and conditions contained in a signed written agreement between you
+** and Nokia.
+**
+**
+**
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+/*!
+    \example audioinput
+    \title Audio Input Example
+    \ingroup audio_examples
+    \brief The Audio Input Example shows the use of the QAudioInput class.
+
+*/
+
+
diff --git a/src/multimedia/doc/src/examples/audiooutput.qdoc b/src/multimedia/doc/src/examples/audiooutput.qdoc
new file mode 100644
index 0000000..988d489
--- /dev/null
+++ b/src/multimedia/doc/src/examples/audiooutput.qdoc
@@ -0,0 +1,38 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/
+**
+** This file is part of the documentation of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:FDL$
+** GNU Free Documentation License
+** Alternatively, this file may be used under the terms of the GNU Free
+** Documentation License version 1.3 as published by the Free Software
+** Foundation and appearing in the file included in the packaging of
+** this file.
+**
+** Other Usage
+** Alternatively, this file may be used in accordance with the terms
+** and conditions contained in a signed written agreement between you
+** and Nokia.
+**
+**
+**
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+/*!
+    \example audiooutput
+    \title Audio Output Example
+    \ingroup audio_examples
+    \brief The Audio Output Example show the use of the QAudioOutput API.
+
+
+
+*/
+
+
diff --git a/src/multimedia/doc/src/examples/audiorecorder.qdoc b/src/multimedia/doc/src/examples/audiorecorder.qdoc
new file mode 100644
index 0000000..25fe079
--- /dev/null
+++ b/src/multimedia/doc/src/examples/audiorecorder.qdoc
@@ -0,0 +1,104 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/
+**
+** This file is part of the documentation of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:FDL$
+** GNU Free Documentation License
+** Alternatively, this file may be used under the terms of the GNU Free
+** Documentation License version 1.3 as published by the Free Software
+** Foundation and appearing in the file included in the packaging of
+** this file.
+**
+** Other Usage
+** Alternatively, this file may be used in accordance with the terms
+** and conditions contained in a signed written agreement between you
+** and Nokia.
+**
+**
+**
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+/*!
+    \example audiorecorder
+    \title Audio Recorder Example
+    \ingroup audio_examples
+    \brief The Audio Recorder Example shows how to create a simple audio recorder.
+
+    It demonstrates the discovery of the supported devices and codecs and the use
+    of recording functions in the QAudioRecorder class.
+
+    We display a window for the user to select the appropriate audio input,
+    codec, container, and sample rate. Allow a setting of either quality or
+    bitrate. Finally, the output file can be selected and recording can be
+    started.
+
+    The lists are setup using the \l{QAudioRecorder::audioInputs()}{audioInputs()},
+    \l{QAudioRecorder::supportedAudioCodecs()}{supportedAudioCodecs()},
+    \l{QAudioRecorder::supportedContainers()}{supportedContainers()},
+    \l{QAudioRecorder::supportedContainers()}{supportedContainers()}, and
+    \l{QAudioRecorder::supportedAudioSampleRates()}{supportedAudioSampleRates()}
+    methods. The quality slider is setup from 0 (zero) to
+    \l{QtMultimedia::VeryHighQuality} with a default value of
+    \l{QtMultimedia::NormalQuality}, while the bitrates are hardcoded
+    into the list.
+
+    \image audiorecorder.png
+
+    To record audio we simply create a QAudioRecorder object.
+
+    \code
+    audioRecorder = new QAudioRecorder(this);
+    \endcode
+
+    And setup the lists as described above. The text on the record and pause
+    buttons are toggled depending on the \l{QMediaRecorder::State}{state} of
+    the \c audioRecorder object. This means that if the state is
+    \l{QMediaRecorder::StoppedState} then the button text will be "Record" and
+    "Pause". In \l{QMediaRecorder::RecordingState} the record button will have
+    the text "Stop", and in \l{QMediaRecorder::PausedState} the pause button
+    will have the text "Resume".
+
+    Pressing the buttons will also result in a toggle based on the state. If
+    recording is stopped, then pressing the record button will setup the
+    \l{QAudioEncoderSettings} based on the values of the selection lists,
+    will set the encoding settings and container on the \c audioRecorder
+    object, and start recording using the
+    \l{QMediaRecorder::record()}{record()} method.
+
+    \code
+        QAudioEncoderSettings settings;
+        settings.setCodec(boxValue(ui->audioCodecBox).toString());
+        settings.setSampleRate(boxValue(ui->sampleRateBox).toInt());
+        settings.setBitRate(boxValue(ui->bitrateBox).toInt());
+        settings.setQuality(QtMultimedia::EncodingQuality(ui->qualitySlider->value()));
+        settings.setEncodingMode(ui->constantQualityRadioButton->isChecked() ?
+                                 QtMultimedia::ConstantQualityEncoding :
+                                 QtMultimedia::ConstantBitRateEncoding);
+
+        QString container = boxValue(ui->containerBox).toString();
+
+        audioRecorder->setEncodingSettings(settings, QVideoEncoderSettings(), container);
+        audioRecorder->record();
+    \endcode
+
+    While recording, the status bar of the application is updated with duration information
+    from the \l{QMediaRecorder::durationChanged()}{durationChanged} signal from the
+    \c audioRecorder object.
+
+    \code
+    ui->statusbar->showMessage(tr("Recorded %1 sec").arg(duration / 1000));
+    \endcode
+
+
+
+
+*/
+
+
diff --git a/src/multimedia/doc/src/examples/camera.qdoc b/src/multimedia/doc/src/examples/camera.qdoc
new file mode 100644
index 0000000..bce7747
--- /dev/null
+++ b/src/multimedia/doc/src/examples/camera.qdoc
@@ -0,0 +1,80 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/
+**
+** This file is part of the documentation of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:FDL$
+** GNU Free Documentation License
+** Alternatively, this file may be used under the terms of the GNU Free
+** Documentation License version 1.3 as published by the Free Software
+** Foundation and appearing in the file included in the packaging of
+** this file.
+**
+** Other Usage
+** Alternatively, this file may be used in accordance with the terms
+** and conditions contained in a signed written agreement between you
+** and Nokia.
+**
+**
+**
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+
+
+/*!
+
+\example camera
+\title  Camera Example
+\ingroup camera_examples
+\brief  The Camera Example shows how to use the API to capture a still image
+or video.
+
+
+
+The Camera Example demonstrates how you can use QtMultimedia to implement
+some basic Camera functionality to take still images and record video clips
+with audio.
+
+A Camera class is created that will act as our Camera. It has a user interface,
+control functions, setting values and a means of defining the location where
+the image or video clip is to be saved. It will also store the image and video
+settings.
+
+The Camera class contains an instance of \l {QCamera}, the API class interface to
+the hardware. It also has an instance of \l {QCameraImageCapture} to take still images
+and an instance of \l {QMediaRecorder} to record video. It also contains the user
+interface object.
+
+The Camera constructor does some basic initialization. The camera object is
+set to '0', the user interface is initialized and UI signal are connected to
+slots that react to the triggering event. However, most of the work is done when
+the \e{setCamera()} function is called, passing in a \l {QByteArray}.
+
+\e{setCamera()} sets up various connections between the user interface and the functionality
+of the Camera class using signals and slots. It also instantiates and initializes the \l {QCamera},
+\l {QCameraImageCapture} and \l {QMediaRecorder} objects mentioned above. The still
+and video recording visual tabs are enabled and finally the
+\l {QCamera::start()}{start()} function of the \l{QCamera} object is called.
+
+Now that the camera is ready for user commands it waits for a suitable event.
+Such an event will be the key press of either the \l {Qt::Key_CameraFocus} or
+\l {Qt::Key_Camera} buttons on the application window. Camera focus will
+simply display the viewfinder and lock the camera settings. Key_Camera will
+either call \e{takeImage()} if the \l {QCamera::captureMode()}{captureMode()}
+is QCamera::CaptureStillImage, or if the capture mode is for video then one
+of two actions will occur. If the recording state shows that we are currently
+recording then the \e{stop()} function is called resulting in a call to
+\l {QCamera::stop()}, whereas if we are not recording then a video recording
+is started with a call to \l {QMediaRecorder::record()}.
+
+\image camera-example.png
+
+*/
+
+
diff --git a/src/multimedia/doc/src/examples/declarative-camera.qdoc b/src/multimedia/doc/src/examples/declarative-camera.qdoc
new file mode 100644
index 0000000..7219e85
--- /dev/null
+++ b/src/multimedia/doc/src/examples/declarative-camera.qdoc
@@ -0,0 +1,69 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/
+**
+** This file is part of the documentation of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:FDL$
+** GNU Free Documentation License
+** Alternatively, this file may be used under the terms of the GNU Free
+** Documentation License version 1.3 as published by the Free Software
+** Foundation and appearing in the file included in the packaging of
+** this file.
+**
+** Other Usage
+** Alternatively, this file may be used in accordance with the terms
+** and conditions contained in a signed written agreement between you
+** and Nokia.
+**
+**
+**
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+/*!
+\example declarative-camera
+\title QML Camera Example
+\ingroup camera_examples_qml
+
+\brief  The Camera Example shows how to use the API to capture a still image
+or video.
+
+\image qml-camera.png
+
+This example demonstrates how to use the Qt Multimedia QML API to access
+camera functions. It shows how to change settings and to capture images.
+
+Most of the QML code supports the user interface for this application with the
+camera types being mostly found in \e {declarative-camera.qml} and
+\e {CaptureControls.qml}.
+
+In \e {declarative-camera.qml} the \l Camera is initialized with an id
+of \e {camera}, a photo preview is setup, states are implemented for image
+preview or capture and \l CaptureControls is initialized. The initial
+\e state is \e PhotoCapture. \l CameraCapture includes a handler, \e onImageCaptured,
+for the \l {imageCaptured} signal. The handler sets up the application to process
+the preview including a change in the user interface state. The \l PhotoPreview
+becomes visible with any key press being picked up by the handler
+in PhotoPreview and returning the state to \e PhotoCapture.
+
+\e CaptureControls, which is implemented in \e {CaptureControls.qml},
+generates a column on the right hand side of the screen which includes control
+buttons for \e focus (not initially visible), \e {capture}, \e {flash modes},
+\e {white balance}, \e {exposure compensation}, and if a preview is
+available a \e {preview} button. The last button exits from the application.
+
+When the Capture button is pressed the \e onClicked handler calls
+\l {Camera::captureImage()}{captureImage()}
+
+
+
+
+
+
+
+*/
diff --git a/src/multimedia/doc/src/examples/declarative-radio.qdoc b/src/multimedia/doc/src/examples/declarative-radio.qdoc
new file mode 100644
index 0000000..d56379f
--- /dev/null
+++ b/src/multimedia/doc/src/examples/declarative-radio.qdoc
@@ -0,0 +1,35 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/
+**
+** This file is part of the documentation of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:FDL$
+** GNU Free Documentation License
+** Alternatively, this file may be used under the terms of the GNU Free
+** Documentation License version 1.3 as published by the Free Software
+** Foundation and appearing in the file included in the packaging of
+** this file.
+**
+** Other Usage
+** Alternatively, this file may be used in accordance with the terms
+** and conditions contained in a signed written agreement between you
+** and Nokia.
+**
+**
+**
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+/*!
+    \example declarative-radio
+    \title Declarative Radio Example
+
+
+*/
+
+
diff --git a/src/multimedia/doc/src/examples/player.qdoc b/src/multimedia/doc/src/examples/player.qdoc
new file mode 100644
index 0000000..b35a74c
--- /dev/null
+++ b/src/multimedia/doc/src/examples/player.qdoc
@@ -0,0 +1,96 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/
+**
+** This file is part of the documentation of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:FDL$
+** GNU Free Documentation License
+** Alternatively, this file may be used under the terms of the GNU Free
+** Documentation License version 1.3 as published by the Free Software
+** Foundation and appearing in the file included in the packaging of
+** this file.
+**
+** Other Usage
+** Alternatively, this file may be used in accordance with the terms
+** and conditions contained in a signed written agreement between you
+** and Nokia.
+**
+**
+**
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+/*!
+    \example player
+    \title Media Player Example
+    \ingroup video_examples
+
+
+    This example creates a simple multimedia player. We can play audio and
+    or video files using various codecs.
+
+    The example uses a QMediaPlayer object passed into a QVideoWidget to
+    control the video output. To give the application playlist capability
+    we also use a QPlayList object.
+
+    To activate the various functions such as play and stop on the dialog
+    we connect clicked() signals to slots that emit the play() and stop()
+    signals and in turn which we connect to the play() and stop() slots in
+    QMediaPlayer.
+
+    \code
+        connect(controls, SIGNAL(play()), player, SLOT(play()));
+        connect(controls, SIGNAL(pause()), player, SLOT(pause()));
+        connect(controls, SIGNAL(stop()), player, SLOT(stop()));
+    \endcode
+
+    We can get the volume (and set our user interface representation)
+
+    \code
+        controls->setVolume(player->volume());
+    \endcode
+
+    and we can make widget 'volume' changes change the volume
+
+    \code
+        connect(controls, SIGNAL(changeVolume(int)), player, SLOT(setVolume(int)));
+    \endcode
+
+    The example also allows us to change various video properties by means
+    of the QVideoWidget object. We can go to Full Screen mode with a single
+    button click, and back again. Or if we press the "Color Options" dialog
+    button we can have access to more subtle influences. The dialog has a
+    set of sliders so that we can change the brightness, contrast, hue and
+    saturation of the video being watched. The connect() statements are in
+    pairs so that changes to either the user interface widget (the relevant
+    slider) or the QVideoWidget object will update the other object.
+
+    \code
+            connect(brightnessSlider, SIGNAL(sliderMoved(int)), videoWidget, 
+                SLOT(setBrightness(int)));
+            connect(videoWidget, SIGNAL(brightnessChanged(int)), 
+                brightnessSlider, SLOT(setValue(int)));
+
+            connect(contrastSlider, SIGNAL(sliderMoved(int)), videoWidget, 
+                SLOT(setContrast(int)));
+            connect(videoWidget, SIGNAL(contrastChanged(int)), contrastSlider, 
+                SLOT(setValue(int)));
+
+            connect(hueSlider, SIGNAL(sliderMoved(int)), videoWidget, 
+                SLOT(setHue(int)));
+            connect(videoWidget, SIGNAL(hueChanged(int)), hueSlider, 
+                SLOT(setValue(int)));
+
+            connect(saturationSlider, SIGNAL(sliderMoved(int)), videoWidget, 
+                SLOT(setSaturation(int)));
+            connect(videoWidget, SIGNAL(saturationChanged(int)), 
+                saturationSlider, SLOT(setValue(int)));
+    \endcode
+
+*/
+
diff --git a/src/multimedia/doc/src/examples/qmlvideo.qdoc b/src/multimedia/doc/src/examples/qmlvideo.qdoc
new file mode 100644
index 0000000..47afeb9
--- /dev/null
+++ b/src/multimedia/doc/src/examples/qmlvideo.qdoc
@@ -0,0 +1,148 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/
+**
+** This file is part of the documentation of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:FDL$
+** GNU Free Documentation License
+** Alternatively, this file may be used under the terms of the GNU Free
+** Documentation License version 1.3 as published by the Free Software
+** Foundation and appearing in the file included in the packaging of
+** this file.
+**
+** Other Usage
+** Alternatively, this file may be used in accordance with the terms
+** and conditions contained in a signed written agreement between you
+** and Nokia.
+**
+**
+**
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+/*!
+\example video/qmlvideo
+\title QML Video Example
+\ingroup video_examples_qml
+
+\brief The QML Video Example demonstrates the various manipulations (move;
+resize; rotate; change aspect ratio) which can be applied to QML \l{VideoOutput}
+items.
+
+\section1 Overview
+
+This example demonstrates the various manipulations (move; resize; rotate;
+change aspect ratio) which can be applied to QML \l{VideoOutput} items.
+
+It also shows how native code can be combined with QML to implement more
+advanced functionality - in this case, C++ code is used to calculate the QML
+frame rate.  This value is rendered in QML in a semi-transparent item
+overlaid on the video content.
+
+The following image shows the application executing the video-overlay scene,
+which creates a dummy overlay item (just a semi-transparent \l{Rectangle}),
+which moves across the \l{VideoOutput} item.
+
+\image qmlvideo-overlay.png
+
+\section1 Application structure
+
+The \l{video/qmlvideo/qml/qmlvideo/main.qml} file creates a UI which includes
+the following items:
+
+\list
+    \li Two \l{video/qmlvideo/qml/qmlvideo/Button.qml}{Button} instances, each
+       of which displays a filename, and can be used to launch a
+       \l{video/qmlvideo/qml/qmlvideo/FileBrowser.qml}{FileBrowser}
+    \li An exit \l{video/qmlvideo/qml/qmlvideo/Button.qml}{Button}
+    \li A \l{video/qmlvideo/qml/qmlvideo/SceneSelectionPanel.qml}{SceneSelectionPanel},
+       which is a flickable list displaying the available scenes
+    \li At the lower left, an item which displays the QML repainting rate - the
+       upper number is the instantaneous frame rate and the lower number is the
+       average over the past second.
+\endlist
+
+\image qmlvideo-menu.png
+
+Each scene in the flickable list is implemented in its own QML file - for
+example the video-basic scene (which just displays a static \l{VideoOutput}
+in the center of the screen) is implemented in the
+\l{video/qmlvideo/qml/qmlvideo/VideoBasic.qml}{VideoBasic.qml} file.  As you
+can see from the code, this makes use of a type of inheritance: a
+\l{video/qmlvideo/qml/qmlvideo/VideoBasic.qml}{VideoBasic} item ...
+
+\quotefromfile video/qmlvideo/qml/qmlvideo/VideoBasic.qml
+\skipto import
+\printuntil /^\}/
+
+... is-a
+\l{video/qmlvideo/qml/qmlvideo/SceneBasic.qml}{SceneBasic} ...
+
+\quotefromfile examples/video/qmlvideo/qml/qmlvideo/SceneBasic.qml
+\skipto import
+\printuntil contentType
+\dots
+\skipto Content
+\printuntil content
+\dots
+\skipto }
+\printuntil /^\}/
+
+... which is-a
+\l{video/qmlvideo/qml/qmlvideo/Scene.qml}{Scene}:
+
+\quotefromfile video/qmlvideo/qml/qmlvideo/Scene.qml
+\skipto import
+\printuntil root
+\dots
+\skipto property QtObject content
+\printuntil content
+\dots
+\skipto Button
+\printuntil /^\}/
+
+\l{video/qmlvideo/qml/qmlvideo/SceneBasic.qml}{SceneBasic} describes the
+structure and behaviour of the scene, but is agnostic of the type of content
+which will be displayed - this is abstracted by
+\l{video/qmlvideo/qml/qmlvideo/Content.qml}{Content}.
+
+This pattern allows us to define a particular use case (in this case, simply
+display a static piece of content), and then instantiate that use case for
+both video content
+(\l{video/qmlvideo/qml/qmlvideo/VideoBasic.qml}{VideoBasic}) and cameracontent
+(\l{video/qmlvideo/qml/qmlvideo/CameraBasic.qml}{CameraBasic}).  This approach
+is used to implement many of the other scenes - for example, "repeatedly slide
+the content from left to right and back again" is implemented by
+\l{video/qmlvideo/qml/qmlvideo/SceneMove.qml}{SceneMove}, on which
+\l{video/qmlvideo/qml/qmlvideo/VideoMove.qml}{VideoMove} and
+\l{video/qmlvideo/qml/qmlvideo/CameraMove.qml}{CameraMove} are based.
+
+Depending on the value of the contentType property in the top-level scene
+instance, the embedded
+\l{video/qmlvideo/qml/qmlvideo/Content.qml}{Content} item creates either a
+\l{MediaPlayer} or a \l{Camera} item.
+
+\section1 Calculating and displaying QML painting rate
+
+\input examples/video-qml-paint-rate.qdocinc
+
+All that remains is to connect the afterRendering() signal of the QQuickView
+object to a JavaScript function, which will eventually call frequencyItem.notify():
+
+\quotefromfile video/qmlvideo/main.cpp
+\skipto QmlApplicationViewer
+\printuntil ;
+\dots
+\skipto QQuickItem
+\printuntil ;
+\dots
+\skipto QObject::connect
+\printuntil SLOT(qmlFramePainted()));
+
+*/
+
diff --git a/src/multimedia/doc/src/examples/qmlvideofx.qdoc b/src/multimedia/doc/src/examples/qmlvideofx.qdoc
new file mode 100644
index 0000000..da713f3
--- /dev/null
+++ b/src/multimedia/doc/src/examples/qmlvideofx.qdoc
@@ -0,0 +1,223 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/
+**
+** This file is part of the documentation of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:FDL$
+** GNU Free Documentation License
+** Alternatively, this file may be used under the terms of the GNU Free
+** Documentation License version 1.3 as published by the Free Software
+** Foundation and appearing in the file included in the packaging of
+** this file.
+**
+** Other Usage
+** Alternatively, this file may be used in accordance with the terms
+** and conditions contained in a signed written agreement between you
+** and Nokia.
+**
+**
+**
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+/*!
+\example video/qmlvideofx
+\title QML Video Shader Effects Example
+\ingroup video_examples_qml
+\ingroup camera_examples_qml
+
+\brief The QML Video Shader Effects Example shows how \l {ShaderEffect}
+can be used to apply postprocessing effects, expressed in \c GLSL, to video
+and camera viewfinder content.
+
+\section1 Overview
+
+This example shows how a \l {ShaderEffectItem} can be used to apply
+postprocessing effects, expressed in GLSL, to QML \l {VideoOutput} items.
+
+It also shows how native code can be combined with QML to implement more
+advanced functionality - in this case, C++ code is used to calculate the QML
+frame rate.  This value is rendered in QML in a semi-transparent item
+overlaid on the video content.
+
+Finally, this application demonstrates the use of different top-level QML
+files to handle different physical screen sizes.  On small-screen devices,
+menus are by default hidden, and only appear when summoned by a gesture.
+Large-screen devices show a more traditional layout in which menus are
+displayed around the video content pane.
+
+The following screenshots show shader effects being applied.  In each case,
+the effect is implemented using a fragment shader.
+
+Here we see an edge detection algorithm being applied to a video clip
+(\l{http://orange.blender.org/}{Elephant's Dream from blender.org}).
+\image qmlvideofx-video-edgedetection.png
+
+This image shows a page curl effect, applied to the same video clip.
+\image qmlvideofx-video-pagecurl.png
+
+Here we see a 'glow' effect (edge detection plus colour quantization) being
+applied to the camera viewfinder.
+\image qmlvideofx-camera-glow.png
+
+This image shows a 'lens magnification' effect applied to the viewfinder.
+\image qmlvideofx-camera-magnify.png
+
+The application includes many more effects than the ones shown here - look
+for Effect*.qml files in the list above to see the full range.
+
+\section1 Application structure
+
+Shader effects can be applied to video or viewfinder content using
+\l{ShaderEffectItem}, as shown in the following example, which applies
+a wiggly effect to the content:
+
+\code
+import QtQuick 2.0
+import QtMultimedia 5.0
+
+Rectangle {
+    width: 300
+    height: 300
+    color: "black"
+
+    MediaPlayer {
+        id: mediaPlayer
+        source: "test.mp4"
+        playing: true
+    }
+
+    VideoOutput {
+        id: video
+        anchors.fill: parent
+        source: mediaPlayer
+    }
+
+    ShaderEffect {
+        property variant source: ShaderEffectSource { sourceItem: video; hideSource: true }
+        property real wiggleAmount: 0.005
+        anchors.fill: video
+
+        fragmentShader: "
+            varying highp vec2 qt_TexCoord0;
+            uniform sampler2D source;
+            uniform highp float wiggleAmount;
+            void main(void)
+            {
+                highp vec2 wiggledTexCoord = qt_TexCoord0;
+                wiggledTexCoord.s += sin(4.0 * 3.141592653589 * wiggledTexCoord.t) * wiggleAmount;
+                gl_FragColor = texture2D(source, wiggledTexCoord.st);
+            }
+        "
+    }
+}
+\endcode
+
+In this application, the usage of the \l{ShaderEffect} and \l{VideoOutput}
+types is a bit more complicated, for the following reasons:
+
+\list
+    \li Each effect can be applied to either a \l{VideoOutput} or an
+       \l{Image} item, so the type of the source item must be abstracted away
+       from the effect implementation
+    \li For some effects (such as the edge detection and glow examples shown in
+       the screenshots above), the transformation is applied only to pixels to
+       the left of a dividing line - this allows the effect to be easily
+       compared with the untransformed image on the right
+    \li Most effects have one or more parameters which can be modified by the
+       user - these are controlled by sliders in the UI which are connected
+       to uniform values passed into the GLSL code
+\endlist
+
+The abstraction of source item type is achieved by the
+\l{video/qmlvideofx/qml/qmlvideofx/Content.qml}{Content}, which uses a
+\l{Loader} to create either a \l{MediaPlayer}, \l{Camera} or \l{Image}:
+
+\quotefromfile video/qmlvideofx/qml/qmlvideofx/Content.qml
+\skipto import
+\printuntil {
+\dots
+\skipto Loader {
+\printuntil }
+\dots
+\skipto function openImage
+\printuntil "ContentImage.qml"
+\skipto contentLoader.item.source
+\printuntil path
+\skipto }
+\printuntil }
+\skipto function openVideo
+\printuntil "ContentVideo.qml"
+\skipto contentLoader.item.mediaSource
+\printuntil path
+\skipto }
+\printuntil }
+\skipto function openCamera
+\printuntil "ContentCamera.qml"
+\skipto }
+\printuntil }
+\skipto /^\}/
+\printuntil }
+
+Each effect is implemented as a QML item which is based on the
+\l{video/qmlvideofx/qml/qmlvideofx/Effect.qml}{Effect}, which in turn
+is based on the \l{ShaderEffect}:
+
+\quotefromfile video/qmlvideofx/qml/qmlvideofx/Effect.qml
+\skipto import
+\printuntil /^\}/
+
+The interface of the \l Effect allows for derived effects to specify the
+number of parameters which they support (and therefore the number of sliders
+which should be displayed), and whether a vertical dividing line should be drawn
+between transformed and untransformed image regions.  As an example, here is the
+implementation of the pixelation effect.  As you can see, the pixelation effect
+supports one parameter (which controls the pixelation granularity), and states
+that the divider should be displayed.
+
+\quotefromfile video/qmlvideofx/qml/qmlvideofx/EffectPixelate.qml
+\skipto import
+\printuntil /^\}/
+
+The main.qml file shows a
+\l{video/qmlvideofx/qml/qmlvideofx/FileOpen.qml}{FileOpen}, which allows
+the user to select the input source and an
+\l{video/qmlvideofx/qml/qmlvideofx/EffectSelectionPanel.qml}{EffectSelectionPanel}
+item, which lists each of the available shader effects.  As described above, a
+\l{video/qmlvideofx/qml/qmlvideofx/Content.qml}{Content} item is used to load the
+appropriate input and effect type.  A
+\l{video/qmlvideofx/qml/qmlvideofx/Divider.qml}{Divider} item draws the
+vertical dividing line, which can be dragged left / right by the user.  Finally,
+a \l{video/qmlvideofx/qml/qmlvideofx/ParameterPanel.qml}{ParameterPanel} item
+renders the sliders corresponding to each effect parameter.
+
+Here is the source selection menu:
+\image qmlvideofx-source-menu.png
+
+And here is the effect selection menu:
+\image qmlvideofx-effects-menu.png
+
+\section1 Calculating and displaying QML painting rate
+
+\input examples/video-qml-paint-rate.qdocinc
+
+All that remains is to connect the afterRendering() signal of the QQuickView
+object to a JavaScript function, which will eventually call frequencyItem.notify():
+
+\quotefromfile video/qmlvideofx/main.cpp
+\skipto QmlApplicationViewer
+\printuntil ;
+\dots
+\skipto QQuickItem
+\printuntil ;
+\dots
+\skipto QObject::connect
+\printuntil SLOT(qmlFramePainted()));
+
+*/
+
diff --git a/src/multimedia/doc/src/examples/spectrum.qdoc b/src/multimedia/doc/src/examples/spectrum.qdoc
new file mode 100644
index 0000000..504ccce
--- /dev/null
+++ b/src/multimedia/doc/src/examples/spectrum.qdoc
@@ -0,0 +1,36 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/
+**
+** This file is part of the documentation of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:FDL$
+** GNU Free Documentation License
+** Alternatively, this file may be used under the terms of the GNU Free
+** Documentation License version 1.3 as published by the Free Software
+** Foundation and appearing in the file included in the packaging of
+** this file.
+**
+** Other Usage
+** Alternatively, this file may be used in accordance with the terms
+** and conditions contained in a signed written agreement between you
+** and Nokia.
+**
+**
+**
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+/*!
+    \example spectrum
+    \title Spectrum Example
+    \ingroup audio_examples
+    \brief The Spectrum Example uses a combination multimedia APIs to process microphone input.
+
+*/
+
+
diff --git a/src/multimedia/doc/src/examples/video-qml-paint-rate.qdocinc b/src/multimedia/doc/src/examples/video-qml-paint-rate.qdocinc
new file mode 100644
index 0000000..84098e2
--- /dev/null
+++ b/src/multimedia/doc/src/examples/video-qml-paint-rate.qdocinc
@@ -0,0 +1,43 @@
+The QML painting rate is calculated by the FrequencyMonitor class, which
+turns a stream of events (received via the notify() slot), into an
+instantaneous and an averaged frequency:
+
+\quotefromfile video/snippets/frequencymonitor/frequencymonitor.h
+\skipto class FrequencyMonitor : public QObject
+\printuntil Q_OBJECT
+\skipto Q_PROPERTY(qreal instantaneousFrequency
+\printuntil averageFrequencyChanged)
+\skipto public
+\printuntil :
+\dots
+\skipto static void qmlRegisterType
+\printuntil ;
+\skipto public slots
+\printuntil notify();
+\skipto };
+\printline };
+
+The FrequencyMonitor class is exposed to QML like this
+
+\quotefromfile video/snippets/frequencymonitor/frequencymonitordeclarative.cpp
+\skipto FrequencyMonitor::qmlRegisterType
+\printuntil }
+
+and its data is displayed by defining a QML item called FrequencyItem, like this:
+
+\quotefromfile video/snippets/frequencymonitor/qml/frequencymonitor/FrequencyItem.qml
+\skipto import FrequencyMonitor
+\printuntil id: root
+\dots
+\skipto function notify
+\printuntil id: monitor
+\skipto onAverageFrequencyChanged
+\printuntil {
+\skipto averageFrequencyText
+\printuntil /^\}/
+
+The result looks like this:
+
+\image video-qml-paint-rate.png
+
+
diff --git a/src/multimedia/doc/src/examples/videographicsitem.qdoc b/src/multimedia/doc/src/examples/videographicsitem.qdoc
new file mode 100644
index 0000000..7bbc01f
--- /dev/null
+++ b/src/multimedia/doc/src/examples/videographicsitem.qdoc
@@ -0,0 +1,36 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/
+**
+** This file is part of the documentation of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:FDL$
+** GNU Free Documentation License
+** Alternatively, this file may be used under the terms of the GNU Free
+** Documentation License version 1.3 as published by the Free Software
+** Foundation and appearing in the file included in the packaging of
+** this file.
+**
+** Other Usage
+** Alternatively, this file may be used in accordance with the terms
+** and conditions contained in a signed written agreement between you
+** and Nokia.
+**
+**
+**
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+/*!
+\example videographicsitem
+\title Video Graphics Item Example
+\ingroup video_examples
+
+\brief This example demonstrates how to make a simple video player using the QMediaPlayer
+and QVideoGraphicsItem classes in the Graphics View framework.
+
+*/
diff --git a/src/multimedia/doc/src/examples/videowidget.qdoc b/src/multimedia/doc/src/examples/videowidget.qdoc
new file mode 100644
index 0000000..345fdea
--- /dev/null
+++ b/src/multimedia/doc/src/examples/videowidget.qdoc
@@ -0,0 +1,36 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/
+**
+** This file is part of the documentation of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:FDL$
+** GNU Free Documentation License
+** Alternatively, this file may be used under the terms of the GNU Free
+** Documentation License version 1.3 as published by the Free Software
+** Foundation and appearing in the file included in the packaging of
+** this file.
+**
+** Other Usage
+** Alternatively, this file may be used in accordance with the terms
+** and conditions contained in a signed written agreement between you
+** and Nokia.
+**
+**
+**
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+/*!
+\example videowidget
+\title Video Widget Example
+\ingroup video_examples
+
+\brief This example demonstrates how to make a simple video player using the QMediaPlayer
+and QVideoWidget classes
+
+*/
diff --git a/src/multimedia/doc/src/images/annotatedurl.png b/src/multimedia/doc/src/images/annotatedurl.png
new file mode 100644
index 0000000..38d86fb
Binary files /dev/null and b/src/multimedia/doc/src/images/annotatedurl.png differ
diff --git a/src/multimedia/doc/src/images/audiodevices.png b/src/multimedia/doc/src/images/audiodevices.png
new file mode 100644
index 0000000..419b40f
Binary files /dev/null and b/src/multimedia/doc/src/images/audiodevices.png differ
diff --git a/src/multimedia/doc/src/images/audiorecorder.png b/src/multimedia/doc/src/images/audiorecorder.png
new file mode 100644
index 0000000..6643bf3
Binary files /dev/null and b/src/multimedia/doc/src/images/audiorecorder.png differ
diff --git a/src/multimedia/doc/src/images/camera-example.png b/src/multimedia/doc/src/images/camera-example.png
new file mode 100644
index 0000000..12e1b57
Binary files /dev/null and b/src/multimedia/doc/src/images/camera-example.png differ
diff --git a/src/multimedia/doc/src/images/codeless.png b/src/multimedia/doc/src/images/codeless.png
new file mode 100644
index 0000000..3901022
Binary files /dev/null and b/src/multimedia/doc/src/images/codeless.png differ
diff --git a/src/multimedia/doc/src/images/declarative-radio-example.png b/src/multimedia/doc/src/images/declarative-radio-example.png
new file mode 100644
index 0000000..6c03934
Binary files /dev/null and b/src/multimedia/doc/src/images/declarative-radio-example.png differ
diff --git a/src/multimedia/doc/src/images/qml-camera.png b/src/multimedia/doc/src/images/qml-camera.png
new file mode 100644
index 0000000..0cd61f0
Binary files /dev/null and b/src/multimedia/doc/src/images/qml-camera.png differ
diff --git a/src/multimedia/doc/src/images/qmlcamera-menu.png b/src/multimedia/doc/src/images/qmlcamera-menu.png
new file mode 100644
index 0000000..b2d7733
Binary files /dev/null and b/src/multimedia/doc/src/images/qmlcamera-menu.png differ
diff --git a/src/multimedia/doc/src/images/qmlvideo-menu.png b/src/multimedia/doc/src/images/qmlvideo-menu.png
new file mode 100644
index 0000000..b2d7733
Binary files /dev/null and b/src/multimedia/doc/src/images/qmlvideo-menu.png differ
diff --git a/src/multimedia/doc/src/images/qmlvideo-overlay.png b/src/multimedia/doc/src/images/qmlvideo-overlay.png
new file mode 100644
index 0000000..f5dc839
Binary files /dev/null and b/src/multimedia/doc/src/images/qmlvideo-overlay.png differ
diff --git a/src/multimedia/doc/src/images/qmlvideofx-camera-glow.png b/src/multimedia/doc/src/images/qmlvideofx-camera-glow.png
new file mode 100644
index 0000000..aca874b
Binary files /dev/null and b/src/multimedia/doc/src/images/qmlvideofx-camera-glow.png differ
diff --git a/src/multimedia/doc/src/images/qmlvideofx-camera-magnify.png b/src/multimedia/doc/src/images/qmlvideofx-camera-magnify.png
new file mode 100644
index 0000000..c3156ce
Binary files /dev/null and b/src/multimedia/doc/src/images/qmlvideofx-camera-magnify.png differ
diff --git a/src/multimedia/doc/src/images/qmlvideofx-effects-menu.png b/src/multimedia/doc/src/images/qmlvideofx-effects-menu.png
new file mode 100644
index 0000000..507fd73
Binary files /dev/null and b/src/multimedia/doc/src/images/qmlvideofx-effects-menu.png differ
diff --git a/src/multimedia/doc/src/images/qmlvideofx-source-menu.png b/src/multimedia/doc/src/images/qmlvideofx-source-menu.png
new file mode 100644
index 0000000..661aaa7
Binary files /dev/null and b/src/multimedia/doc/src/images/qmlvideofx-source-menu.png differ
diff --git a/src/multimedia/doc/src/images/qmlvideofx-video-edgedetection.png b/src/multimedia/doc/src/images/qmlvideofx-video-edgedetection.png
new file mode 100644
index 0000000..cedb314
Binary files /dev/null and b/src/multimedia/doc/src/images/qmlvideofx-video-edgedetection.png differ
diff --git a/src/multimedia/doc/src/images/qmlvideofx-video-pagecurl.png b/src/multimedia/doc/src/images/qmlvideofx-video-pagecurl.png
new file mode 100644
index 0000000..5f5bdfb
Binary files /dev/null and b/src/multimedia/doc/src/images/qmlvideofx-video-pagecurl.png differ
diff --git a/src/multimedia/doc/src/images/radio-example.png b/src/multimedia/doc/src/images/radio-example.png
new file mode 100644
index 0000000..2fdb1b2
Binary files /dev/null and b/src/multimedia/doc/src/images/radio-example.png differ
diff --git a/src/multimedia/doc/src/images/slideshow-img1.png b/src/multimedia/doc/src/images/slideshow-img1.png
new file mode 100644
index 0000000..72255d6
Binary files /dev/null and b/src/multimedia/doc/src/images/slideshow-img1.png differ
diff --git a/src/multimedia/doc/src/images/video-graphics-memory.png b/src/multimedia/doc/src/images/video-graphics-memory.png
new file mode 100644
index 0000000..9479cce
Binary files /dev/null and b/src/multimedia/doc/src/images/video-graphics-memory.png differ
diff --git a/src/multimedia/doc/src/images/video-qml-paint-rate.png b/src/multimedia/doc/src/images/video-qml-paint-rate.png
new file mode 100644
index 0000000..1519ff6
Binary files /dev/null and b/src/multimedia/doc/src/images/video-qml-paint-rate.png differ
diff --git a/src/multimedia/doc/src/multimedia.qdoc b/src/multimedia/doc/src/multimedia.qdoc
new file mode 100644
index 0000000..2b73fdf
--- /dev/null
+++ b/src/multimedia/doc/src/multimedia.qdoc
@@ -0,0 +1,183 @@
+/****************************************************************************
+**
+** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/
+**
+** This file is part of the documentation of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:FDL$
+** GNU Free Documentation License
+** Alternatively, this file may be used under the terms of the GNU Free
+** Documentation License version 1.3 as published by the Free Software
+** Foundation and appearing in the file included in the packaging of
+** this file.
+**
+** Other Usage
+** Alternatively, this file may be used in accordance with the terms
+** and conditions contained in a signed written agreement between you
+** and Nokia.
+**
+**
+**
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+/*!
+\page multimediaoverview.html
+\title Multimedia Overview
+\brief A set of APIs for working with audio, video, radio and camera devices.
+
+\ingroup technology-apis
+
+
+\section1 Overview
+
+\section2 Features
+
+Qt Multimedia offers APIs for doing many multimedia related tasks:
+
+\list
+\li Accessing raw audio devices for input and output
+\li Play low latency sound effects
+\li Play media files in playlists (like compressed audio, or video files)
+\li Record audio and compress it
+\li Tune and listen to radio stations, and receive radio program information
+\li Use a camera, including viewfinder, image capture, and movie recording
+\li Play 3D positional audio with \l {Positional Audio} {QtAudioEngine}
+\li Decode audio media files into memory for processing
+\li Accessing video frames or audio buffers as they are played or recorded
+\endlist
+
+\section2 Multimedia Components
+
+All of these tasks can be broadly broken down into four main areas.  More information
+(including background information and class references) are available here:
+
+\list
+\li \l {Audio Overview}
+\li \l {Video Overview}
+\li \l {Camera Overview}
+\li \l {Radio Overview}
+\endlist
+
+\section2 Multimedia Recipes
+For some quick recipes for specific tasks, look at the overviews above and consult this table:
+
+\table 70%
+    \header
+        \li Use case
+        \li Examples
+        \li QML Types
+        \li C++ Classes
+    \row
+        \li Playing a sound effect
+        \li TBD
+        \li \l SoundEffect
+        \li QSoundEffect
+    \row
+        \li Playing low latency audio
+        \li \l{audiooutput}, \l{spectrum}
+        \li
+        \li QAudioOutput
+    \row
+        \li Playing encoded audio (MP3, AAC etc)
+        \li \l{player}
+        \li \l Audio, \l {MediaPlayer}
+        \li QMediaPlayer
+    \row
+        \li Accessing raw audio input data
+        \li \l{spectrum}, \l audioinput
+        \li
+        \li QAudioInput
+    \row
+        \li Recording encoded audio data
+        \li \l audiorecorder
+        \li
+        \li QAudioRecorder
+    \row
+        \li Discovering raw audio devices
+        \li \l audiodevices
+        \li
+        \li QAudioDeviceInfo
+    \row
+        \li Video Playback
+        \li \l {player}, \l {video/qmlvideo}{qmlvideo}, \l{video/qmlvideofx}{qmlvideofx}
+        \li \l MediaPlayer, \l VideoOutput, \l Video
+        \li QMediaPlayer, QVideoWidget, QGraphicsVideoItem
+    \row
+        \li Video Processing
+        \li \l {video/qmlvideofx}{qmlvideofx}
+        \li \l {MediaPlayer}, \l VideoOutput
+        \li QMediaPlayer, QAbstractVideoSurface, QVideoFrame
+    \row
+        \li Listening to the radio
+        \li \l declarative-radio
+        \li \l Radio, \l RadioData
+        \li QRadioTuner, QRadioData
+    \row
+        \li Accessing camera viewfinder
+        \li \l {Camera Example}{camera}, \l declarative-camera
+        \li \l Camera, \l VideoOutput
+        \li QCamera, QVideoWidget, QGraphicsVideoItem
+    \row
+        \li Viewfinder processing
+        \li
+        \li \l Camera, \l VideoOutput
+        \li QCamera, QAbstractVideoSurface, QVideoFrame
+    \row
+        \li Capturing photos
+        \li \l {Camera Example}{camera}, \l declarative-camera
+        \li \l Camera
+        \li QCamera, QCameraImageCapture
+    \row
+        \li Capturing movies
+        \li \l {Camera Example}{camera}, \l declarative-camera
+        \li \l Camera
+        \li QCamera, QMediaRecorder
+    \row
+        \li 3D sound sources
+        \li \l {AudioEngine Example}{Audio Engine}
+        \li \l {AudioEngine}, \l Sound
+        \li
+\endtable
+
+\section1 Limitations
+
+In many cases the Qt Multimedia APIs build upon the multimedia framework of the underlying system.
+This can mean that support for various codec or containers can vary between machines,
+depending on what the end user has installed.
+
+\section1 Advanced Usage
+
+For developers wishing to access some platform specific settings,
+or to port the Qt Multimedia APIs to a new platform or technology,
+see \l{Multimedia Backend Development}.
+
+\section1 Changes from Previous Versions
+
+If you've previously used Qt Multimedia in Qt 4.x, or used Qt Multimedia Kit in Qt Mobility, please see
+\l {Changes in Qt Multimedia} for more information on what has changed, and what you might need to
+change when porting code.
+
+\section1 Reference Documentation
+
+\section2 QML Types
+The following types are accessed by using:
+\qml
+import QtMultimedia 5.0
+\endqml
+\annotatedlist multimedia_qml
+The following types are accessed by using \l {Positional Audio} {QtAudioEngine}:
+\qml
+import QtAudioEngine 1.0
+\endqml
+\annotatedlist multimedia_audioengine
+
+\section2 Multimedia Classes
+
+\annotatedlist multimedia
+
+*/
diff --git a/src/multimedia/doc/src/multimediabackend.qdoc b/src/multimedia/doc/src/multimediabackend.qdoc
new file mode 100644
index 0000000..2c359d0
--- /dev/null
+++ b/src/multimedia/doc/src/multimediabackend.qdoc
@@ -0,0 +1,140 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/
+**
+** This file is part of the documentation of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:FDL$
+** GNU Free Documentation License
+** Alternatively, this file may be used under the terms of the GNU Free
+** Documentation License version 1.3 as published by the Free Software
+** Foundation and appearing in the file included in the packaging of
+** this file.
+**
+** Other Usage
+** Alternatively, this file may be used in accordance with the terms
+** and conditions contained in a signed written agreement between you
+** and Nokia.
+**
+**
+**
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+
+/*!
+
+\title Multimedia Backend Development
+\page multimediabackend.html
+\brief Information for implementing a new multimedia backend.
+\ingroup mobility
+
+\tableofcontents
+
+\section1 Overview
+
+A multimedia backend provides the glue between platform specific libraries, and
+Qt Multimedia. In some cases the available cross-platform Multimedia APIs or
+implementations are not sufficient, or not immediately available on a certain
+platform. Alternatively, the multimedia implementation on a platform might expose
+certain extra properties or functionality that other platforms do not, or a finer
+degree of control might be possible.  For these cases, it is possible to use
+extended controls directly.
+
+In addition, if you plan to port the Qt Multimedia APIs to a new platform, you do
+this by implementing certain control and service classes, as detailed below.
+
+\section1 Extending the API
+
+For the developer who wishes to extend the functionality of the Qt Multimedia
+classes there are several classes of particular importance. The classes
+providing default functionality are QMediaService, QMediaServiceProvider and
+QMediaControl.  Some of these classes are not in the public API since they
+are very seldom useful to application developers.
+
+To extend the Multimedia API you would use the following three classes or
+classes derived from them.
+
+    \list
+    \li QMediaServiceProvider is used by the top level client class to
+    request a service. The top level class knowing what kind of service it needs.
+
+    \li \l QMediaService provides a service and when asked by the top level
+    object, say a component, will return a QMediaControl object.
+
+    \li \l QMediaControl allows the control of the service using a known interface.
+    \endlist
+
+Consider a developer creating, for example, a media player class called MyPlayer.
+It may have special requirements beyond ordinary media players and so may
+need a custom service and a custom control. We can subclass \l QMediaServiceProvider
+to create our MyServiceProvider class. Also we will create a
+MyMediaService, and the MyMediaControl to manipulate the media service.
+
+The MyPlayer object calls MyServiceProvider::requestService() to get an
+instance of MyMediaService. Then the MyPlayer object calls this service
+object it has just received and calling \l {QMediaService::requestControl()}{requestControl()}
+it will receive the control object derived from QMediaControl.
+
+Now we have all the parts necessary for our media application. We have the service
+provider, the service it provides and the control used to manipulate the
+service. Since our MyPlayer object has instances of the service and its
+control then it would be possible for these to be used by associated classes
+that could do additional actions, perhaps with their own control since the
+parameter to requestControl() is a zero-terminated string, \e {const char *},
+for the interface.
+
+\section2 Adding a Media Service Provider
+
+In general, adding a new media service provider is outside the scope of this documentation.
+For best results, consult the existing provider source code, and seek assistance on the relevant
+mailing lists and IRC channels.
+
+\omit
+The base class for creating new service providers is \l{QMediaServiceProvider}.
+The user must implement the \l{QMediaServiceProvider::requestService()}{requestService()}
+function
+
+\code
+    QMediaService* requestService(const QByteArray &type, const QMediaServiceProviderHint &hint);
+\endcode
+
+The details of implementation will depend on the provider. Looking at the
+class \l QMediaServiceProvider for the default implementation. Notice that
+\l {QMediaServiceProvider::requestService()}{requestService()} uses the
+\l QMediaServiceProviderHint to look for the appropriate plugin and then to
+insert it into the plugin map. However, for a specific service provider there
+is probably no need for this approach, it will simply depend on what the
+developer wants to implement.
+
+Other methods that may be overloaded
+\code
+    void releaseService(QMediaService *service);
+
+    QtMediaServices::SupportEstimate hasSupport(const QByteArray &serviceType,
+                                        const QString &mimeType,
+                                        const QStringList& codecs,
+                                        int flags) const;
+
+    QStringList supportedMimeTypes(const QByteArray &serviceType, int flags) const;
+
+    QList<QByteArray> devices(const QByteArray &serviceType) const;
+
+    QString deviceDescription(const QByteArray &serviceType, const QByteArray &device);
+\endcode
+
+The choice of what needs to be done depends on what the developer wishes to do with the service.
+
+\endomit
+
+\section2 Classes for service implementers.
+
+\annotatedlist multimedia_control
+
+*/
+
+
diff --git a/src/multimedia/doc/src/plugins/qml-multimedia.qdoc b/src/multimedia/doc/src/plugins/qml-multimedia.qdoc
new file mode 100644
index 0000000..460f08a
--- /dev/null
+++ b/src/multimedia/doc/src/plugins/qml-multimedia.qdoc
@@ -0,0 +1,229 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/
+**
+** This file is part of the documentation of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:FDL$
+** GNU Free Documentation License
+** Alternatively, this file may be used under the terms of the GNU Free
+** Documentation License version 1.3 as published by the Free Software
+** Foundation and appearing in the file included in the packaging of
+** this file.
+**
+** Other Usage
+** Alternatively, this file may be used in accordance with the terms
+** and conditions contained in a signed written agreement between you
+** and Nokia.
+**
+**
+**
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+/*!
+    \group qml-multimedia
+    \title QML Multimedia Plugin
+    QML Support for the Qt Multimedia API.
+*/
+
+/*!
+    \page qml-multimedia.html
+
+    \title Qt Multimedia QML API
+
+    \brief A QML API for the Qt Multimedia module.
+
+
+    \section1 Overview
+
+    The Qt Multimedia module gives developers a simplified way to use audio and video playback, and access camera functionality. The Multimedia QML API provides a QML friendly interface to these features.
+
+    \section1 Types
+
+    \section2 Audio
+
+    \l Audio is an easy way to add audio playback to a Qt Quick
+    scene. QtMultimedia provides properties for control, methods (functions) and signals.
+
+    The code extract below shows the creation and use of an Audio instance.
+
+    \qml
+
+    import QtQuick 2.0
+    import QtMultimedia 5.0
+    // ...
+
+    Item {
+        width: 640
+        height: 360
+
+        Audio {
+            id: playMusic
+            source: "music.wav"
+        }
+
+        MouseArea {
+            id: playArea
+            anchors.fill: parent
+            onPressed:  { playMusic.play() }
+        }
+    }
+
+    \endqml
+
+    The snippet above shows how the inclusion of \e playMusic enables audio features on the type that contains it. So that when the parent's MouseArea is clicked the \l {Audio::play()}{play()} method of Audio is run. Other typical audio control methods are available such as \l {Audio::pause}{pause()} and \l {Audio::stop()}{stop()}.
+
+    Much of the getting / setting of \l Audio parameters is done through properties. These include
+    \table 70%
+        \header
+            \li Property
+            \li Description
+        \row
+            \li \l {Audio::source}{source}
+            \li The source URL of the media.
+        \row
+            \li \l {Audio::autoLoad}{autoLoad}
+            \li Indicates if loading of media should begin immediately.
+        \row
+            \li \l{Audio::playing}{playing}
+            \li Indicates that the media is playing.
+        \row
+            \li \l {Audio::paused}{paused}
+            \li The media is paused.
+        \row
+            \li \l{Audio::status}{status}
+            \li The status of media loading.
+        \row
+            \li \l{Audio::duration}{duration}
+            \li Amount of time in milliseconds the media will play.
+        \row
+            \li \l{Audio::position}{position}
+            \li Current position in the media in milliseconds of play.
+        \row
+            \li \l{Audio::volume}{volume}
+            \li Audio output volume: from 0.0 (silent) to 1.0 (maximum)
+        \row
+            \li \l{Audio::muted}{muted}
+            \li Indicates audio is muted.
+        \row
+            \li \l{Audio::bufferProgress}{bufferProgress}
+            \li Indicates how full the data buffer is: 0.0 (empty) to 1.0 (full).
+        \row
+            \li \l{Audio::seekable}{seekable}
+            \li Indicates whether the audio position can be changed.
+        \row
+            \li \l{Audio::playbackRate}{playbackRate}
+            \li The rate at which audio is played at as a multiple of the normal rate.
+        \row
+            \li \l{Audio::error}{error}
+            \li An error code for the error state including NoError
+        \row
+            \li \l{Audio::errorString}{errorString}
+            \li A description of the current error condition.
+    \endtable
+
+    The set of signals available allow the developer to create custom behavior when the following events occur,
+
+    \table 70%
+        \header
+            \li Signal
+            \li Description
+        \row
+            \li \l{Audio::playing}{playing}
+            \li Called when playback is started, or when resumed from paused state.
+        \row
+            \li \l{Audio::paused}{paused}
+            \li Called when playback is paused.
+        \row
+            \li \l{Audio::stopped}{stopped}
+            \li Called when playback is stopped.
+        \row
+            \li \l{Audio::error}{error}
+            \li Called when the specified error occurs.
+    \endtable
+
+    \section2 Camera
+
+    \l Camera enables still image and video capture using
+    QML. It has a number of properties that help setting it up.
+
+    The details of using a \l Camera are described in further depth
+    in the \l {Camera Overview} and in the corresponding reference documentation.
+
+    \section2 Video
+
+    Adding video playback, with sound, to a Qt Quick scene is also easy. The process is very similar to that of Audio above, in fact \l {Video} shares many of the property names, methods and signals. Here is the equivalent sample code to implement video playback in a scene
+
+    \qml
+
+    Video {
+        id: video
+        width : 800
+        height : 600
+        source: "video.avi"
+
+        MouseArea {
+            anchors.fill: parent
+            onClicked: {
+                video.play()
+            }
+        }
+
+        focus: true
+        Keys.onSpacePressed: video.paused = !video.paused
+        Keys.onLeftPressed: video.position -= 5000
+        Keys.onRightPressed: video.position += 5000
+    }
+
+    \endqml
+
+    There are similar features like \l {Video::play()}{play()} with new
+    features specific to video.
+
+    In the above sample when the parent of MouseArea is clicked, an area of 800x600 pixels with an id of 'video', the source "video.avi" will play in that area. Notice also that signals for the \l Keys have been defined so that a spacebar will toggle the pause button; the left arrow will move the current position in the video to 5 seconds previously; and the right arrow will advance the current position in the video by 5 seconds.
+
+    Most of the differences will obviously be about video control and information. There are many properties associated with \l {Video}, most of them deal with meta-data, control of the video media and aspects of presentation.
+
+    \section2 SoundEffect
+
+    \l SoundEffect provides a way to play short sound effects, like in video games. Multiple sound effect instances can be played simultaneously.
+    You should use \l Audio for music playback.
+
+    \qml
+
+    import QtQuick 2.0
+    import QtMultimedia 5.0
+
+    Item {
+        width: 640
+        height: 360
+
+        SoundEffect {
+            id: effect
+            source: "test.wav"
+        }
+        MouseArea {
+            id: playArea
+            anchors.fill: parent
+            onPressed:  { effect.play() }
+        }
+    }
+
+    \endqml
+
+
+    In the above sample the sound effect will be played when the MouseArea is clicked.
+
+    For a complete description of this type, see \l SoundEffect
+
+    \section1 Multimedia QML Types
+
+    \annotatedlist multimedia_qml
+*/
+
+
diff --git a/src/multimedia/doc/src/qtmultimedia-cpp.qdoc b/src/multimedia/doc/src/qtmultimedia-cpp.qdoc
new file mode 100644
index 0000000..c996339
--- /dev/null
+++ b/src/multimedia/doc/src/qtmultimedia-cpp.qdoc
@@ -0,0 +1,45 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/
+**
+** This file is part of the documentation of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:FDL$
+** GNU Free Documentation License
+** Alternatively, this file may be used under the terms of the GNU Free
+** Documentation License version 1.3 as published by the Free Software
+** Foundation and appearing in the file included in the packaging of
+** this file.
+**
+** Other Usage
+** Alternatively, this file may be used in accordance with the terms
+** and conditions contained in a signed written agreement between you
+** and Nokia.
+**
+**
+**
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+/*!
+    \module QtMultimedia
+    \title QtMultimedia Module
+    \ingroup modules
+
+    \brief The QtMultimedia module provides audio, video, radio and camera functionality.
+
+    To include the definitions of the module's classes, use the
+    following directive:
+
+    \snippet doc/src/snippets/code/doc_src_qtmultimedia.cpp 1
+
+    To link against the module, add this line to your \l qmake \c
+    .pro file:
+
+    \snippet doc/src/snippets/code/doc_src_qtmultimedia.pro 0
+
+*/
diff --git a/src/multimedia/doc/src/qtmultimedia5.qdoc b/src/multimedia/doc/src/qtmultimedia5.qdoc
new file mode 100644
index 0000000..f8397ea
--- /dev/null
+++ b/src/multimedia/doc/src/qtmultimedia5.qdoc
@@ -0,0 +1,42 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/
+**
+** This file is part of the documentation of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:FDL$
+** GNU Free Documentation License
+** Alternatively, this file may be used under the terms of the GNU Free
+** Documentation License version 1.3 as published by the Free Software
+** Foundation and appearing in the file included in the packaging of
+** this file.
+**
+** Other Usage
+** Alternatively, this file may be used in accordance with the terms
+** and conditions contained in a signed written agreement between you
+** and Nokia.
+**
+**
+**
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+/*!
+\qmlmodule QtMultimedia 5
+\title QML import for multimedia
+\brief The import for the QML types in the Qt Multimedia module
+
+\section1 Overview
+
+The identifying string for this component is \e QtMultimedia. Use this in the QML \e import statement.
+
+\section1 QML types
+
+\annotatedlist multimedia_qml
+
+*/
+
diff --git a/src/multimedia/doc/src/radiooverview.qdoc b/src/multimedia/doc/src/radiooverview.qdoc
new file mode 100644
index 0000000..4697aa0
--- /dev/null
+++ b/src/multimedia/doc/src/radiooverview.qdoc
@@ -0,0 +1,89 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/
+**
+** This file is part of the documentation of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:FDL$
+** GNU Free Documentation License
+** Alternatively, this file may be used under the terms of the GNU Free
+** Documentation License version 1.3 as published by the Free Software
+** Foundation and appearing in the file included in the packaging of
+** this file.
+**
+** Other Usage
+** Alternatively, this file may be used in accordance with the terms
+** and conditions contained in a signed written agreement between you
+** and Nokia.
+**
+**
+**
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+/*!
+
+\page radiooverview.html
+\title Radio Overview
+\brief An API to control system radio tuner
+
+The Qt Multimedia API provides a number of radio related classes for control
+over the radio tuner of the system, and gives access to Radio Data System
+(RDS) information for radio stations that broadcasts it.
+
+\section1 Radio Features
+
+The Radio API consists of two separate components. The radio tuner,
+\l QRadioTuner or the \l Radio QML type, which handles control of
+the radio hardware as well as tuning. The other is the radio data
+component, either \l QRadioData or the \l RadioData QML type, which
+gives access to RDS information.
+
+\section1 Radio Implementation Details
+
+The actual level of support depends on the underlying system support. It should
+be noted that only analog radio is supported, and the properties of the radio
+data component will only be populated if the system radio tuner supports RDS.
+
+\section1 Examples
+
+There are two examples showing the usage of the Radio API. One shows how to use
+the QRadioTuner class from C++. The other shows how to implement a similar
+application using QML and \l Radio.
+
+\section2 Radio Example
+
+This image shows the example using the QRadioTuner API.
+
+\image radio-example.png
+
+The example reads the frequency from the radio tuner, and sets the "Got Signal"
+text based on the signal strength. The buttons allow the user to tune and scan
+up and down the frequency band, while the slider to the side allows volume
+adjustments.
+
+Only the FM frequency band is used in this example.
+
+\section2 Declarative Radio Example
+
+\image declarative-radio-example.png
+
+This example has the same functionality of the regular radio example mentioned
+above, but it includes a nice horizontal dial showing the position of the
+current frequency inside the band.
+
+\section1 Reference documentation
+
+\section2 C++ Classes
+
+\annotatedlist multimedia_radio
+
+\section2 QML Types
+
+\annotatedlist multimedia_radio_qml
+
+*/
diff --git a/src/multimedia/doc/src/snippets/multimedia-snippets/audio.cpp b/src/multimedia/doc/src/snippets/multimedia-snippets/audio.cpp
new file mode 100644
index 0000000..3ad9e52
--- /dev/null
+++ b/src/multimedia/doc/src/snippets/multimedia-snippets/audio.cpp
@@ -0,0 +1,251 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/
+**
+** This file is part of the Qt Mobility Components.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** GNU Lesser General Public License Usage
+** This file may be used under the terms of the GNU Lesser General Public
+** License version 2.1 as published by the Free Software Foundation and
+** appearing in the file LICENSE.LGPL included in the packaging of this
+** file. Please review the following information to ensure the GNU Lesser
+** General Public License version 2.1 requirements will be met:
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** In addition, as a special exception, Nokia gives you certain additional
+** rights. These rights are described in the Nokia Qt LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU General
+** Public License version 3.0 as published by the Free Software Foundation
+** and appearing in the file LICENSE.GPL included in the packaging of this
+** file. Please review the following information to ensure the GNU General
+** Public License version 3.0 requirements will be met:
+** http://www.gnu.org/copyleft/gpl.html.
+**
+** Other Usage
+** Alternatively, this file may be used in accordance with the terms and
+** conditions contained in a signed written agreement between you and Nokia.
+**
+**
+**
+**
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+/* Audio related snippets */
+#include <QFile>
+#include <QTimer>
+#include <QDebug>
+
+#include "qaudiodeviceinfo.h"
+#include "qaudioinput.h"
+#include "qaudiooutput.h"
+#include "qaudioprobe.h"
+#include "qaudiodecoder.h"
+
+class AudioInputExample : public QObject {
+    Q_OBJECT
+public:
+    void setup();
+
+
+public Q_SLOTS:
+    void stopRecording();
+    void stateChanged(QAudio::State newState);
+
+private:
+    //! [Audio input class members]
+    QFile destinationFile;   // class member.
+    QAudioInput* audio; // class member.
+    //! [Audio input class members]
+};
+
+
+void AudioInputExample::setup()
+//! [Audio input setup]
+{
+    destinationFile.setFileName("/tmp/test.raw");
+    destinationFile.open( QIODevice::WriteOnly | QIODevice::Truncate );
+
+    QAudioFormat format;
+    // set up the format you want, eg.
+    format.setSampleRate(8000);
+    format.setChannelCount(1);
+    format.setSampleSize(8);
+    format.setCodec("audio/pcm");
+    format.setByteOrder(QAudioFormat::LittleEndian);
+    format.setSampleType(QAudioFormat::UnSignedInt);
+
+    QAudioDeviceInfo info = QAudioDeviceInfo::defaultInputDevice();
+    if (!info.isFormatSupported(format)) {
+        qWarning()<<"default format not supported try to use nearest";
+        format = info.nearestFormat(format);
+    }
+
+    audio = new QAudioInput(format, this);
+    connect(audio, SIGNAL(stateChanged(QAudio::State)), this, SLOT(stateChanged(QAudio::State)));
+
+    QTimer::singleShot(3000, this, SLOT(stopRecording()));
+    audio->start(&destinationFile);
+    // Records audio for 3000ms
+}
+//! [Audio input setup]
+
+//! [Audio input stop recording]
+void AudioInputExample::stopRecording()
+{
+    audio->stop();
+    destinationFile.close();
+    delete audio;
+}
+//! [Audio input stop recording]
+
+//! [Audio input state changed]
+void AudioInputExample::stateChanged(QAudio::State newState)
+{
+    switch (newState) {
+        case QAudio::StoppedState:
+            if (audio->error() != QAudio::NoError) {
+                // Error handling
+            } else {
+                // Finished recording
+            }
+            break;
+
+        case QAudio::ActiveState:
+            // Started recording - read from IO device
+            break;
+
+        default:
+            // ... other cases as appropriate
+            break;
+    }
+}
+//! [Audio input state changed]
+
+
+class AudioOutputExample : public QObject {
+    Q_OBJECT
+public:
+    void setup();
+
+public Q_SLOTS:
+    void stateChanged(QAudio::State newState);
+
+private:
+    //! [Audio output class members]
+    QFile sourceFile;   // class member.
+    QAudioOutput* audio; // class member.
+    //! [Audio output class members]
+};
+
+
+void AudioOutputExample::setup()
+//! [Audio output setup]
+{
+    sourceFile.setFileName("/tmp/test.raw");
+    sourceFile.open(QIODevice::ReadOnly);
+
+    QAudioFormat format;
+    // Set up the format, eg.
+    format.setSampleRate(8000);
+    format.setChannelCount(1);
+    format.setSampleSize(8);
+    format.setCodec("audio/pcm");
+    format.setByteOrder(QAudioFormat::LittleEndian);
+    format.setSampleType(QAudioFormat::UnSignedInt);
+
+    QAudioDeviceInfo info(QAudioDeviceInfo::defaultOutputDevice());
+    if (!info.isFormatSupported(format)) {
+        qWarning() << "raw audio format not supported by backend, cannot play audio.";
+        return;
+    }
+
+    audio = new QAudioOutput(format, this);
+    connect(audio, SIGNAL(stateChanged(QAudio::State)), this, SLOT(stateChanged(QAudio::State)));
+    audio->start(&sourceFile);
+}
+//! [Audio output setup]
+
+//! [Audio output state changed]
+void AudioOutputExample::stateChanged(QAudio::State newState)
+{
+    switch (newState) {
+        case QAudio::IdleState:
+            // Finished playing (no more data)
+            audio->stop();
+            sourceFile.close();
+            delete audio;
+            break;
+
+        case QAudio::StoppedState:
+            // Stopped for other reasons
+            if (audio->error() != QAudio::NoError) {
+                // Error handling
+            }
+            break;
+
+        default:
+            // ... other cases as appropriate
+            break;
+    }
+}
+//! [Audio output state changed]
+
+void AudioDeviceInfo()
+{
+    //! [Setting audio format]
+    QAudioFormat format;
+    format.setSampleRate(44100);
+    // ... other format parameters
+    format.setSampleType(QAudioFormat::SignedInt);
+
+    QAudioDeviceInfo info(QAudioDeviceInfo::defaultOutputDevice());
+
+    if (!info.isFormatSupported(format))
+        format = info.nearestFormat(format);
+    //! [Setting audio format]
+
+    //! [Dumping audio formats]
+    foreach (const QAudioDeviceInfo &deviceInfo, QAudioDeviceInfo::availableDevices(QAudio::AudioOutput))
+        qDebug() << "Device name: " << deviceInfo.deviceName();
+    //! [Dumping audio formats]
+}
+
+class AudioDecodingExample : public QObject {
+    Q_OBJECT
+public:
+    void decode();
+
+public Q_SLOTS:
+    void stateChanged(QAudio::State newState);
+    void readBuffer();
+};
+
+void AudioDecodingExample::decode()
+{
+    //! [Local audio decoding]
+    QAudioFormat desiredFormat;
+    desiredFormat.setChannelCount(2);
+    desiredFormat.setCodec("audio/x-raw");
+    desiredFormat.setSampleType(QAudioFormat::UnSignedInt);
+    desiredFormat.setSampleRate(48000);
+    desiredFormat.setSampleSize(16);
+
+    QAudioDecoder *decoder = new QAudioDecoder(this);
+    decoder->setAudioFormat(desiredFormat);
+    decoder->setSourceFilename("level1.mp3");
+
+    connect(decoder, SIGNAL(bufferReady()), this, SLOT(readBuffer()));
+    decoder->start();
+
+    // Now wait for bufferReady() signal and call decoder->read()
+    //! [Local audio decoding]
+}
diff --git a/src/multimedia/doc/src/snippets/multimedia-snippets/audiorecorder.cpp b/src/multimedia/doc/src/snippets/multimedia-snippets/audiorecorder.cpp
new file mode 100644
index 0000000..e2828ac
--- /dev/null
+++ b/src/multimedia/doc/src/snippets/multimedia-snippets/audiorecorder.cpp
@@ -0,0 +1,213 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/
+**
+** This file is part of the Qt Mobility Components.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** GNU Lesser General Public License Usage
+** This file may be used under the terms of the GNU Lesser General Public
+** License version 2.1 as published by the Free Software Foundation and
+** appearing in the file LICENSE.LGPL included in the packaging of this
+** file. Please review the following information to ensure the GNU Lesser
+** General Public License version 2.1 requirements will be met:
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** In addition, as a special exception, Nokia gives you certain additional
+** rights. These rights are described in the Nokia Qt LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU General
+** Public License version 3.0 as published by the Free Software Foundation
+** and appearing in the file LICENSE.GPL included in the packaging of this
+** file. Please review the following information to ensure the GNU General
+** Public License version 3.0 requirements will be met:
+** http://www.gnu.org/copyleft/gpl.html.
+**
+** Other Usage
+** Alternatively, this file may be used in accordance with the terms and
+** conditions contained in a signed written agreement between you and Nokia.
+**
+**
+**
+**
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#include <QtWidgets>
+
+#include <qaudiorecorder.h>
+#include <qmediaservice.h>
+
+#include <QtMultimedia/qaudioformat.h>
+
+#include "audiorecorder.h"
+
+AudioRecorder::AudioRecorder()
+{
+//! [create-objs-1]
+    capture = new QAudioRecorder();
+//! [create-objs-1]
+
+    // set a default file
+    capture->setOutputLocation(QUrl("test.raw"));
+
+    QWidget *window = new QWidget;
+    QGridLayout* layout = new QGridLayout;
+
+    QLabel* deviceLabel = new QLabel;
+    deviceLabel->setText("Devices");
+    deviceBox = new QComboBox(this);
+    deviceBox->setSizePolicy(QSizePolicy::Expanding,QSizePolicy::Fixed);
+
+    QLabel* codecLabel = new QLabel;
+    codecLabel->setText("Codecs");
+    codecsBox = new QComboBox(this);
+    codecsBox->setSizePolicy(QSizePolicy::Expanding,QSizePolicy::Fixed);
+
+    QLabel* qualityLabel = new QLabel;
+    qualityLabel->setText("Quality");
+    qualityBox = new QComboBox(this);
+    qualityBox->setSizePolicy(QSizePolicy::Expanding,QSizePolicy::Fixed);
+
+//! [device-list]
+    for(int i = 0; i < audiosource->deviceCount(); i++)
+        deviceBox->addItem(audiosource->name(i));
+//! [device-list]
+
+//! [codec-list]
+    QStringList codecs = capture->supportedAudioCodecs();
+    for(int i = 0; i < codecs.count(); i++)
+        codecsBox->addItem(codecs.at(i));
+//! [codec-list]
+
+    qualityBox->addItem("Low");
+    qualityBox->addItem("Medium");
+    qualityBox->addItem("High");
+
+    connect(capture, SIGNAL(durationChanged(qint64)), this, SLOT(updateProgress(qint64)));
+    connect(capture, SIGNAL(stateChanged(QMediaRecorder::State)), this, SLOT(stateChanged(QMediaRecorder::State)));
+
+    layout->addWidget(deviceLabel,0,0,Qt::AlignHCenter);
+    connect(deviceBox,SIGNAL(activated(int)),SLOT(deviceChanged(int)));
+    layout->addWidget(deviceBox,0,1,1,3,Qt::AlignLeft);
+
+    layout->addWidget(codecLabel,1,0,Qt::AlignHCenter);
+    connect(codecsBox,SIGNAL(activated(int)),SLOT(codecChanged(int)));
+    layout->addWidget(codecsBox,1,1,Qt::AlignLeft);
+
+    layout->addWidget(qualityLabel,1,2,Qt::AlignHCenter);
+    connect(qualityBox,SIGNAL(activated(int)),SLOT(qualityChanged(int)));
+    layout->addWidget(qualityBox,1,3,Qt::AlignLeft);
+
+    fileButton = new QPushButton(this);
+    fileButton->setText(tr("Output File"));
+    connect(fileButton,SIGNAL(clicked()),SLOT(selectOutputFile()));
+    layout->addWidget(fileButton,3,0,Qt::AlignHCenter);
+
+    button = new QPushButton(this);
+    button->setText(tr("Record"));
+    connect(button,SIGNAL(clicked()),SLOT(toggleRecord()));
+    layout->addWidget(button,3,3,Qt::AlignHCenter);
+
+    recTime = new QLabel;
+    recTime->setText("0 sec");
+    layout->addWidget(recTime,4,0,Qt::AlignHCenter);
+
+    window->setLayout(layout);
+    setCentralWidget(window);
+    window->show();
+
+    active = false;
+}
+
+AudioRecorder::~AudioRecorder()
+{
+    delete capture;
+    delete audiosource;
+}
+
+void AudioRecorder::updateProgress(qint64 pos)
+{
+    currentTime = pos;
+    if(currentTime == 0) currentTime = 1;
+    QString text = QString("%1 secs").arg(currentTime/1000);
+    recTime->setText(text);
+}
+
+void AudioRecorder::stateChanged(QMediaRecorder::State state)
+{
+    qWarning()<<"stateChanged() "<<state;
+}
+
+void AudioRecorder::deviceChanged(int idx)
+{
+//! [get-device]
+    for(int i = 0; i < audiosource->deviceCount(); i++) {
+        if(deviceBox->itemText(idx).compare(audiosource->name(i)) == 0)
+            audiosource->setSelectedDevice(i);
+    }
+//! [get-device]
+}
+
+void AudioRecorder::codecChanged(int idx)
+{
+    Q_UNUSED(idx);
+    //capture->setAudioCodec(codecsBox->itemText(idx));
+}
+
+void AudioRecorder::qualityChanged(int idx)
+{
+    Q_UNUSED(idx);
+    /*
+    if(capture->audioCodec().compare("audio/pcm") == 0) {
+        if(qualityBox->itemText(idx).compare("Low") == 0) {
+            // 8000Hz mono is 8kbps
+            capture->setAudioBitrate(8);
+        } else if(qualityBox->itemText(idx).compare("Medium") == 0) {
+            // 22050Hz mono is 44.1kbps
+            capture->setAudioBitrate(44);
+        } else if(qualityBox->itemText(idx).compare("High") == 0) {
+            // 44100Hz mono is 88.2kbps
+            capture->setAudioBitrate(88);
+        }
+    }
+    */
+}
+
+//! [toggle-record]
+void AudioRecorder::toggleRecord()
+{
+    if(!active) {
+        recTime->setText("0 sec");
+        currentTime = 0;
+        capture->record();
+
+        button->setText(tr("Stop"));
+        active = true;
+    } else {
+        capture->stop();
+        button->setText(tr("Record"));
+        active = false;
+    }
+}
+//! [toggle-record]
+
+void AudioRecorder::selectOutputFile()
+{
+    QStringList fileNames;
+
+    QFileDialog dialog(this);
+
+    dialog.setFileMode(QFileDialog::AnyFile);
+    if (dialog.exec())
+        fileNames = dialog.selectedFiles();
+
+    if(fileNames.size() > 0)
+        capture->setOutputLocation(QUrl(fileNames.first()));
+}
diff --git a/src/multimedia/doc/src/snippets/multimedia-snippets/camera.cpp b/src/multimedia/doc/src/snippets/multimedia-snippets/camera.cpp
new file mode 100644
index 0000000..a44421e
--- /dev/null
+++ b/src/multimedia/doc/src/snippets/multimedia-snippets/camera.cpp
@@ -0,0 +1,201 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/
+**
+** This file is part of the Qt Mobility Components.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** GNU Lesser General Public License Usage
+** This file may be used under the terms of the GNU Lesser General Public
+** License version 2.1 as published by the Free Software Foundation and
+** appearing in the file LICENSE.LGPL included in the packaging of this
+** file. Please review the following information to ensure the GNU Lesser
+** General Public License version 2.1 requirements will be met:
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** In addition, as a special exception, Nokia gives you certain additional
+** rights. These rights are described in the Nokia Qt LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU General
+** Public License version 3.0 as published by the Free Software Foundation
+** and appearing in the file LICENSE.GPL included in the packaging of this
+** file. Please review the following information to ensure the GNU General
+** Public License version 3.0 requirements will be met:
+** http://www.gnu.org/copyleft/gpl.html.
+**
+** Other Usage
+** Alternatively, this file may be used in accordance with the terms and
+** conditions contained in a signed written agreement between you and Nokia.
+**
+**
+**
+**
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+/* Camera snippets */
+
+#include "qcamera.h"
+#include "qcameraviewfinder.h"
+#include "qmediarecorder.h"
+#include "qcameraimagecapture.h"
+#include "qcameraimageprocessing.h"
+#include "qabstractvideosurface.h"
+
+/* Globals so that everything is consistent. */
+QCamera *camera = 0;
+QCameraViewfinder *viewfinder = 0;
+QMediaRecorder *recorder = 0;
+QCameraImageCapture *imageCapture = 0;
+
+void overview_viewfinder()
+{
+    //! [Camera overview viewfinder]
+    camera = new QCamera;
+    viewfinder = new QCameraViewfinder;
+    camera->setViewfinder(viewfinder);
+    viewfinder->show();
+
+    camera->start(); // to start the viewfinder
+    //! [Camera overview viewfinder]
+}
+
+// -.-
+class MyVideoSurface : public QAbstractVideoSurface
+{
+    QList<QVideoFrame::PixelFormat> supportedPixelFormats(QAbstractVideoBuffer::HandleType handleType) const
+    {
+        Q_UNUSED(handleType);
+        return QList<QVideoFrame::PixelFormat>();
+    }
+    bool present(const QVideoFrame &frame)
+    {
+        Q_UNUSED(frame);
+        return true;
+    }
+};
+
+void overview_surface()
+{
+    MyVideoSurface *mySurface;
+    //! [Camera overview surface]
+    camera = new QCamera;
+    mySurface = new MyVideoSurface;
+    camera->setViewfinder(mySurface);
+
+    camera->start();
+    // MyVideoSurface::present(..) will be called with viewfinder frames
+    //! [Camera overview surface]
+}
+
+void overview_still()
+{
+    //! [Camera overview capture]
+    imageCapture = new QCameraImageCapture(camera);
+
+    camera->setCaptureMode(QCamera::CaptureStillImage);
+    camera->start(); // Viewfinder frames start flowing
+
+    //on half pressed shutter button
+    camera->searchAndLock();
+
+    //on shutter button pressed
+    imageCapture->capture();
+
+    //on shutter button released
+    camera->unlock();
+    //! [Camera overview capture]
+}
+
+void overview_movie()
+{
+    //! [Camera overview movie]
+    camera = new QCamera;
+    recorder = new QMediaRecorder(camera);
+
+    camera->setCaptureMode(QCamera::CaptureVideo);
+    camera->start();
+
+    //on shutter button pressed
+    recorder->record();
+
+    // sometime later, or on another press
+    recorder->stop();
+    //! [Camera overview movie]
+}
+
+void camera_blah()
+{
+    //! [Camera]
+    camera = new QCamera;
+
+    viewfinder = new QCameraViewfinder();
+    viewfinder->show();
+
+    camera->setViewfinder(viewfinder);
+
+    imageCapture = new QCameraImageCapture(camera);
+
+    camera->setCaptureMode(QCamera::CaptureStillImage);
+    camera->start();
+    //! [Camera]
+
+    //! [Camera keys]
+    //on half pressed shutter button
+    camera->searchAndLock();
+
+    //on shutter button pressed
+    imageCapture->capture();
+
+    //on shutter button released
+    camera->unlock();
+    //! [Camera keys]
+}
+
+void cameraimageprocessing()
+{
+    //! [Camera image whitebalance]
+    camera = new QCamera;
+    QCameraImageProcessing *imageProcessing = camera->imageProcessing();
+
+    if (imageProcessing->isAvailable()) {
+        imageProcessing->setWhiteBalanceMode(QCameraImageProcessing::WhiteBalanceFluorescent);
+    }
+    //! [Camera image whitebalance]
+
+    //! [Camera image denoising]
+    imageProcessing->setDenoisingLevel(-0.3); //reduce the amount of denoising applied
+    //! [Camera image denoising]
+}
+
+void camerafocus()
+{
+    //! [Camera custom zoom]
+    QCameraFocus *focus = camera->focus();
+    focus->setFocusPointMode(QCameraFocus::FocusPointCustom);
+    focus->setCustomFocusPoint(QPointF(0.25f, 0.75f)); // A point near the bottom left, 25% away from the corner, near that shiny vase
+    //! [Camera custom zoom]
+
+    //! [Camera combined zoom]
+    focus->zoomTo(3.0, 4.0); // Super zoom!
+    //! [Camera combined zoom]
+
+    //! [Camera focus zones]
+    focus->setFocusPointMode(QCameraFocus::FocusPointAuto);
+    QList<QCameraFocusZone> zones = focus->focusZones();
+    foreach (QCameraFocusZone zone, zones) {
+        if (zone.status() == QCameraFocusZone::Focused) {
+            // Draw a green box at zone.area()
+        } else if (zone.status() == QCameraFocusZone::Selected) {
+            // This area is selected for autofocusing, but is not in focus
+            // Draw a yellow box at zone.area()
+        }
+    }
+    //! [Camera focus zones]
+}
diff --git a/src/multimedia/doc/src/snippets/multimedia-snippets/media.cpp b/src/multimedia/doc/src/snippets/multimedia-snippets/media.cpp
new file mode 100644
index 0000000..2515465
--- /dev/null
+++ b/src/multimedia/doc/src/snippets/multimedia-snippets/media.cpp
@@ -0,0 +1,315 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/
+**
+** This file is part of the Qt Mobility Components.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** GNU Lesser General Public License Usage
+** This file may be used under the terms of the GNU Lesser General Public
+** License version 2.1 as published by the Free Software Foundation and
+** appearing in the file LICENSE.LGPL included in the packaging of this
+** file. Please review the following information to ensure the GNU Lesser
+** General Public License version 2.1 requirements will be met:
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** In addition, as a special exception, Nokia gives you certain additional
+** rights. These rights are described in the Nokia Qt LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU General
+** Public License version 3.0 as published by the Free Software Foundation
+** and appearing in the file LICENSE.GPL included in the packaging of this
+** file. Please review the following information to ensure the GNU General
+** Public License version 3.0 requirements will be met:
+** http://www.gnu.org/copyleft/gpl.html.
+**
+** Other Usage
+** Alternatively, this file may be used in accordance with the terms and
+** conditions contained in a signed written agreement between you and Nokia.
+**
+**
+**
+**
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+/* Media related snippets */
+#include <QFile>
+#include <QTimer>
+
+#include "qmediaplaylist.h"
+#include "qmediarecorder.h"
+#include "qmediaservice.h"
+#include "qmediaplayercontrol.h"
+#include "qmediaplayer.h"
+#include "qradiotuner.h"
+#include "qradiodata.h"
+#include "qvideowidget.h"
+#include "qcameraimagecapture.h"
+#include "qcamera.h"
+#include "qcameraviewfinder.h"
+#include "qaudioprobe.h"
+#include "qaudiorecorder.h"
+#include "qvideoprobe.h"
+
+class MediaExample : public QObject {
+    Q_OBJECT
+
+    void MediaControl();
+    void MediaPlayer();
+    void RadioTuna();
+    void MediaRecorder();
+    void AudioRecorder();
+    void EncoderSettings();
+    void ImageEncoderSettings();
+    void AudioProbe();
+    void VideoProbe();
+
+private:
+    // Common naming
+    QMediaService *mediaService;
+    QVideoWidget *videoWidget;
+    QWidget *widget;
+    QMediaPlayer *player;
+    QMediaPlaylist *playlist;
+    QMediaContent video;
+    QMediaRecorder *recorder;
+    QCamera *camera;
+    QCameraViewfinder *viewfinder;
+    QCameraImageCapture *imageCapture;
+    QString fileName;
+    QRadioTuner *radio;
+    QRadioData *radioData;
+    QAudioRecorder *audioRecorder;
+    QAudioProbe *audioProbe;
+    QVideoProbe *videoProbe;
+
+    QMediaContent image1;
+    QMediaContent image2;
+    QMediaContent image3;
+
+    static const int yourRadioStationFrequency = 11;
+};
+
+void MediaExample::MediaControl()
+{
+    {
+    //! [Request control]
+    QMediaPlayerControl *control = qobject_cast<QMediaPlayerControl *>(
+            mediaService->requestControl("org.qt-project.qt.mediaplayercontrol/5.0"));
+    //! [Request control]
+    Q_UNUSED(control);
+    }
+
+    {
+    //! [Request control templated]
+    QMediaPlayerControl *control = mediaService->requestControl<QMediaPlayerControl *>();
+    //! [Request control templated]
+    Q_UNUSED(control);
+    }
+}
+
+
+void MediaExample::EncoderSettings()
+{
+    //! [Audio encoder settings]
+    QAudioEncoderSettings audioSettings;
+    audioSettings.setCodec("audio/mpeg");
+    audioSettings.setChannelCount(2);
+
+    recorder->setAudioSettings(audioSettings);
+    //! [Audio encoder settings]
+
+    //! [Video encoder settings]
+    QVideoEncoderSettings videoSettings;
+    videoSettings.setCodec("video/mpeg2");
+    videoSettings.setResolution(640, 480);
+
+    recorder->setVideoSettings(videoSettings);
+    //! [Video encoder settings]
+}
+
+void MediaExample::ImageEncoderSettings()
+{
+    //! [Image encoder settings]
+    QImageEncoderSettings imageSettings;
+    imageSettings.setCodec("image/jpeg");
+    imageSettings.setResolution(1600, 1200);
+
+    imageCapture->setEncodingSettings(imageSettings);
+    //! [Image encoder settings]
+}
+
+void MediaExample::MediaPlayer()
+{
+    //! [Player]
+    player = new QMediaPlayer;
+    connect(player, SIGNAL(positionChanged(qint64)), this, SLOT(positionChanged(qint64)));
+    player->setMedia(QUrl::fromLocalFile("/Users/me/Music/coolsong.mp3"));
+    player->setVolume(50);
+    player->play();
+    //! [Player]
+
+    //! [Local playback]
+    player = new QMediaPlayer;
+    // ...
+    player->setMedia(QUrl::fromLocalFile("/Users/me/Music/coolsong.mp3"));
+    player->setVolume(50);
+    player->play();
+    //! [Local playback]
+
+    //! [Audio playlist]
+    player = new QMediaPlayer;
+
+    playlist = new QMediaPlaylist(player);
+    playlist->addMedia(QUrl("http://example.com/myfile1.mp3"));
+    playlist->addMedia(QUrl("http://example.com/myfile2.mp3"));
+    // ...
+    playlist->setCurrentIndex(1);
+    player->play();
+    //! [Audio playlist]
+
+    //! [Movie playlist]
+    playlist = new QMediaPlaylist;
+    playlist->addMedia(QUrl("http://example.com/movie1.mp4"));
+    playlist->addMedia(QUrl("http://example.com/movie2.mp4"));
+    playlist->addMedia(QUrl("http://example.com/movie3.mp4"));
+    playlist->setCurrentIndex(1);
+
+    player = new QMediaPlayer;
+    player->setPlaylist(playlist);
+
+    videoWidget = new QVideoWidget;
+    player->setVideoOutput(videoWidget);
+    videoWidget->show();
+
+    player->play();
+    //! [Movie playlist]
+}
+
+void MediaExample::MediaRecorder()
+{
+    //! [Media recorder]
+    recorder = new QMediaRecorder(camera);
+
+    QAudioEncoderSettings audioSettings;
+    audioSettings.setCodec("audio/amr");
+    audioSettings.setQuality(QtMultimedia::HighQuality);
+
+    recorder->setAudioSettings(audioSettings);
+
+    recorder->setOutputLocation(QUrl::fromLocalFile(fileName));
+    recorder->record();
+    //! [Media recorder]
+}
+
+void MediaExample::AudioRecorder()
+{
+    //! [Audio recorder]
+    audioRecorder = new QAudioRecorder;
+
+    QAudioEncoderSettings audioSettings;
+    audioSettings.setCodec("audio/amr");
+    audioSettings.setQuality(QtMultimedia::HighQuality);
+
+    audioRecorder->setEncodingSettings(audioSettings);
+
+    audioRecorder->setOutputLocation(QUrl::fromLocalFile("test.amr"));
+    audioRecorder->record();
+    //! [Audio recorder]
+
+    //! [Audio recorder inputs]
+    QStringList inputs = audioRecorder->audioInputs();
+    QString selectedInput = audioRecorder->defaultAudioInput();
+
+    foreach (QString input, inputs) {
+        QString description = audioRecorder->audioInputDescription(input);
+        // show descriptions to user and allow selection
+        selectedInput = input;
+    }
+
+    audioRecorder->setAudioInput(selectedInput);
+    //! [Audio recorder inputs]
+}
+
+void MediaExample::RadioTuna()
+{
+    //! [Radio tuner]
+    radio = new QRadioTuner;
+    connect(radio, SIGNAL(frequencyChanged(int)), this, SLOT(freqChanged(int)));
+    if (radio->isBandSupported(QRadioTuner::FM)) {
+        radio->setBand(QRadioTuner::FM);
+        radio->setFrequency(yourRadioStationFrequency);
+        radio->setVolume(100);
+        radio->start();
+    }
+    //! [Radio tuner]
+
+    //! [Radio data setup]
+    radio = new QRadioTuner;
+    radioData = radio->radioData();
+    //! [Radio data setup]
+}
+
+void MediaExample::AudioProbe()
+{
+    //! [Audio probe]
+    audioRecorder = new QAudioRecorder;
+
+    QAudioEncoderSettings audioSettings;
+    audioSettings.setCodec("audio/amr");
+    audioSettings.setQuality(QtMultimedia::HighQuality);
+
+    audioRecorder->setEncodingSettings(audioSettings);
+
+    audioRecorder->setOutputLocation(QUrl::fromLocalFile("test.amr"));
+
+    audioProbe = new QAudioProbe(this);
+    if (audioProbe->setSource(audioRecorder)) {
+        // Probing succeeded, audioProbe->isValid() should be true.
+        connect(audioProbe, SIGNAL(audioBufferProbed(QAudioBuffer)),
+                this, SLOT(calculateLevel(QAudioBuffer)));
+    }
+
+    audioRecorder->record();
+    // Now audio buffers being recorded should be signaled
+    // by the probe, so we can do things like calculating the
+    // audio power level, or performing a frequency transform
+    //! [Audio probe]
+}
+
+void MediaExample::VideoProbe()
+{
+    //! [Video probe]
+    camera = new QCamera;
+    viewfinder = new QCameraViewfinder();
+    camera->setViewfinder(viewfinder);
+
+    camera->setCaptureMode(QCamera::CaptureVideo);
+
+    videoProbe = new QVideoProbe(this);
+
+    if (videoProbe->setSource(camera)) {
+        // Probing succeeded, videoProbe->isValid() should be true.
+        connect(videoProbe, SIGNAL(videoFrameProbed(QVideoFrame)),
+                this, SLOT(detectBarcodes(QVideoFrame)));
+    }
+
+    camera->start();
+    // Viewfinder frames should now also be emitted by
+    // the video probe, even in still image capture mode.
+    // Another alternative is to install the probe on a
+    // QMediaRecorder connected to the camera to get the
+    // recorded frames, if they are different from the
+    // viewfinder frames.
+
+    //! [Video probe]
+}
+
+
diff --git a/src/multimedia/doc/src/snippets/multimedia-snippets/multimedia-snippets.pro b/src/multimedia/doc/src/snippets/multimedia-snippets/multimedia-snippets.pro
new file mode 100644
index 0000000..9571b02
--- /dev/null
+++ b/src/multimedia/doc/src/snippets/multimedia-snippets/multimedia-snippets.pro
@@ -0,0 +1,24 @@
+# Doc snippets - compiled for truthiness
+
+TEMPLATE = lib
+TARGET = qtmmksnippets
+
+INCLUDEPATH += ../../../../src/global \
+               ../../../../src/multimedia \
+               ../../../../src/multimedia/audio \
+               ../../../../src/multimedia/video \
+               ../../../../src/multimedia/camera
+
+CONFIG += console
+
+QT += multimedia multimediawidgets widgets multimedia-private
+
+SOURCES += \
+    audio.cpp \
+    video.cpp \
+    camera.cpp \
+    media.cpp \
+    qsound.cpp
+
+OTHER_FILES += \
+    soundeffect.qml
diff --git a/src/multimedia/doc/src/snippets/multimedia-snippets/qsound.cpp b/src/multimedia/doc/src/snippets/multimedia-snippets/qsound.cpp
new file mode 100644
index 0000000..3fdb63e
--- /dev/null
+++ b/src/multimedia/doc/src/snippets/multimedia-snippets/qsound.cpp
@@ -0,0 +1,85 @@
+ /****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/
+**
+** This file is part of the documentation of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:BSD$
+** You may use this file under the terms of the BSD license as follows:
+**
+** "Redistribution and use in source and binary forms, with or without
+** modification, are permitted provided that the following conditions are
+** met:
+**   * Redistributions of source code must retain the above copyright
+**     notice, this list of conditions and the following disclaimer.
+**   * Redistributions in binary form must reproduce the above copyright
+**     notice, this list of conditions and the following disclaimer in
+**     the documentation and/or other materials provided with the
+**     distribution.
+**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
+**     the names of its contributors may be used to endorse or promote
+**     products derived from this software without specific prior written
+**     permission.
+**
+** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#include "qobject.h"
+#include "qsound.h"
+#include "qsoundeffect.h"
+
+void qsoundsnippet() {
+    //! [0]
+    QSound::play("mysounds/bells.wav");
+    //! [0]
+
+
+    //! [1]
+    QSound bells("mysounds/bells.wav");
+    bells.play();
+    //! [1]
+}
+
+void qsoundeffectsnippet() {
+    //! [2]
+    QSoundEffect effect;
+    effect.setSource(QUrl::fromLocalFile("engine.wav"));
+    effect.setLoopCount(QSoundEffect::Infinite);
+    effect.setVolume(0.25f);
+    effect.play();
+    //! [2]
+}
+
+QObject *clickSource;
+
+class MyGame : public QObject {
+    Q_OBJECT
+public:
+    //! [3]
+    MyGame()
+        : m_explosion(this)
+    {
+        m_explosion.setSource(QUrl::fromLocalFile("explosion.wav"));
+        m_explosion.setVolume(0.25f);
+
+        // Set up click handling etc.
+        connect(clickSource, SIGNAL(clicked()), &m_explosion, SLOT(play()));
+    }
+private:
+    QSoundEffect m_explosion;
+    //! [3]
+};
diff --git a/src/multimedia/doc/src/snippets/multimedia-snippets/soundeffect.qml b/src/multimedia/doc/src/snippets/multimedia-snippets/soundeffect.qml
new file mode 100644
index 0000000..527f276
--- /dev/null
+++ b/src/multimedia/doc/src/snippets/multimedia-snippets/soundeffect.qml
@@ -0,0 +1,63 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/
+**
+** This file is part of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** GNU Lesser General Public License Usage
+** This file may be used under the terms of the GNU Lesser General Public
+** License version 2.1 as published by the Free Software Foundation and
+** appearing in the file LICENSE.LGPL included in the packaging of this
+** file. Please review the following information to ensure the GNU Lesser
+** General Public License version 2.1 requirements will be met:
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** In addition, as a special exception, Nokia gives you certain additional
+** rights. These rights are described in the Nokia Qt LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU General
+** Public License version 3.0 as published by the Free Software Foundation
+** and appearing in the file LICENSE.GPL included in the packaging of this
+** file. Please review the following information to ensure the GNU General
+** Public License version 3.0 requirements will be met:
+** http://www.gnu.org/copyleft/gpl.html.
+**
+** Other Usage
+** Alternatively, this file may be used in accordance with the terms and
+** conditions contained in a signed written agreement between you and Nokia.
+**
+**
+**
+**
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+//! [complete snippet]
+import QtQuick 2.0
+import QtMultimedia 5.0
+
+Text {
+    text: "Click Me!";
+    font.pointSize: 24;
+    width: 150; height: 50;
+
+    //! [play sound on click]
+    SoundEffect {
+        id: playSound
+        source: "soundeffect.wav"
+    }
+    MouseArea {
+        id: playArea
+        anchors.fill: parent
+        onPressed: { playSound.play() }
+    }
+    //! [play sound on click]
+}
+//! [complete snippet]
diff --git a/src/multimedia/doc/src/snippets/multimedia-snippets/video.cpp b/src/multimedia/doc/src/snippets/multimedia-snippets/video.cpp
new file mode 100644
index 0000000..5ab5ed0
--- /dev/null
+++ b/src/multimedia/doc/src/snippets/multimedia-snippets/video.cpp
@@ -0,0 +1,193 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/
+**
+** This file is part of the Qt Mobility Components.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** GNU Lesser General Public License Usage
+** This file may be used under the terms of the GNU Lesser General Public
+** License version 2.1 as published by the Free Software Foundation and
+** appearing in the file LICENSE.LGPL included in the packaging of this
+** file. Please review the following information to ensure the GNU Lesser
+** General Public License version 2.1 requirements will be met:
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** In addition, as a special exception, Nokia gives you certain additional
+** rights. These rights are described in the Nokia Qt LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU General
+** Public License version 3.0 as published by the Free Software Foundation
+** and appearing in the file LICENSE.GPL included in the packaging of this
+** file. Please review the following information to ensure the GNU General
+** Public License version 3.0 requirements will be met:
+** http://www.gnu.org/copyleft/gpl.html.
+**
+** Other Usage
+** Alternatively, this file may be used in accordance with the terms and
+** conditions contained in a signed written agreement between you and Nokia.
+**
+**
+**
+**
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+/* Video related snippets */
+#include "qvideorenderercontrol.h"
+#include "qmediaservice.h"
+#include "qmediaplayer.h"
+#include "qabstractvideosurface.h"
+#include "qvideowidgetcontrol.h"
+#include "qvideowindowcontrol.h"
+#include "qgraphicsvideoitem.h"
+#include "qmediaplaylist.h"
+#include "qvideosurfaceformat.h"
+
+#include <QFormLayout>
+#include <QGraphicsView>
+
+//! [Derived Surface]
+class MyVideoSurface : public QAbstractVideoSurface
+{
+    QList<QVideoFrame::PixelFormat> supportedPixelFormats(
+            QAbstractVideoBuffer::HandleType handleType = QAbstractVideoBuffer::NoHandle) const
+    {
+        Q_UNUSED(handleType);
+
+        // Return the formats you will support
+        return QList<QVideoFrame::PixelFormat>() << QVideoFrame::Format_RGB565;
+    }
+
+    bool present(const QVideoFrame &frame)
+    {
+        Q_UNUSED(frame);
+        // Handle the frame and do your processing
+
+        return true;
+    }
+};
+//! [Derived Surface]
+
+//! [Video producer]
+class MyVideoProducer : public QObject
+{
+    Q_OBJECT
+    Q_PROPERTY(QAbstractVideoSurface *videoSurface WRITE setVideoSurface)
+
+public:
+    void setVideoSurface(QAbstractVideoSurface *surface)
+    {
+        m_surface = surface;
+        m_surface->start(m_format);
+    }
+
+    // ...
+
+public slots:
+    void onNewVideoContentReceived(const QVideoFrame &frame)
+    {
+        if (m_surface)
+            m_surface->present(frame);
+    }
+
+private:
+    QAbstractVideoSurface *m_surface;
+    QVideoSurfaceFormat m_format;
+};
+
+//! [Video producer]
+
+
+class VideoExample : public QObject {
+    Q_OBJECT
+public:
+    void VideoGraphicsItem();
+    void VideoRendererControl();
+    void VideoWidget();
+    void VideoWindowControl();
+    void VideoWidgetControl();
+
+private:
+    // Common naming
+    QMediaService *mediaService;
+    QMediaPlaylist *playlist;
+    QVideoWidget *videoWidget;
+    QWidget *widget;
+    QFormLayout *layout;
+    QAbstractVideoSurface *myVideoSurface;
+    QMediaPlayer *player;
+    QMediaContent video;
+    QGraphicsView *graphicsView;
+};
+
+void VideoExample::VideoRendererControl()
+{
+    //! [Video renderer control]
+    QVideoRendererControl *rendererControl = mediaService->requestControl<QVideoRendererControl *>();
+    rendererControl->setSurface(myVideoSurface);
+    //! [Video renderer control]
+}
+
+void VideoExample::VideoWidget()
+{
+    //! [Video widget]
+    player = new QMediaPlayer;
+
+    playlist = new QMediaPlaylist(player);
+    playlist->addMedia(QUrl("http://example.com/myclip1.mp4"));
+    playlist->addMedia(QUrl("http://example.com/myclip2.mp4"));
+
+    videoWidget = new QVideoWidget;
+    player->setVideoOutput(videoWidget);
+
+    videoWidget->show();
+    playlist->setCurrentIndex(1);
+    player->play();
+    //! [Video widget]
+
+    player->stop();
+
+    //! [Setting surface in player]
+    player->setVideoOutput(myVideoSurface);
+    //! [Setting surface in player]
+}
+
+void VideoExample::VideoWidgetControl()
+{
+    //! [Video widget control]
+    QVideoWidgetControl *widgetControl = mediaService->requestControl<QVideoWidgetControl *>();
+    layout->addWidget(widgetControl->videoWidget());
+    //! [Video widget control]
+}
+
+void VideoExample::VideoWindowControl()
+{
+    //! [Video window control]
+    QVideoWindowControl *windowControl = mediaService->requestControl<QVideoWindowControl *>();
+    windowControl->setWinId(widget->winId());
+    windowControl->setDisplayRect(widget->rect());
+    windowControl->setAspectRatioMode(Qt::KeepAspectRatio);
+    //! [Video window control]
+}
+
+void VideoExample::VideoGraphicsItem()
+{
+    //! [Video graphics item]
+    player = new QMediaPlayer(this);
+
+    QGraphicsVideoItem *item = new QGraphicsVideoItem;
+    player->setVideoOutput(item);
+    graphicsView->scene()->addItem(item);
+    graphicsView->show();
+
+    player->setMedia(QUrl("http://example.com/myclip4.ogv"));
+    player->play();
+    //! [Video graphics item]
+}
diff --git a/src/multimedia/doc/src/snippets/snippets.pro b/src/multimedia/doc/src/snippets/snippets.pro
new file mode 100644
index 0000000..31a3a09
--- /dev/null
+++ b/src/multimedia/doc/src/snippets/snippets.pro
@@ -0,0 +1,3 @@
+TEMPLATE = subdirs
+
+SUBDIRS += multimedia-snippets
diff --git a/src/multimedia/doc/src/videooverview.qdoc b/src/multimedia/doc/src/videooverview.qdoc
new file mode 100644
index 0000000..c789152
--- /dev/null
+++ b/src/multimedia/doc/src/videooverview.qdoc
@@ -0,0 +1,143 @@
+/****************************************************************************
+**
+** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/
+**
+** This file is part of the documentation of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:FDL$
+** GNU Free Documentation License
+** Alternatively, this file may be used under the terms of the GNU Free
+** Documentation License version 1.3 as published by the Free Software
+** Foundation and appearing in the file included in the packaging of
+** this file.
+**
+** Other Usage
+** Alternatively, this file may be used in accordance with the terms
+** and conditions contained in a signed written agreement between you
+** and Nokia.
+**
+**
+**
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+/*!
+
+\page videooverview.html
+\title Video Overview
+\brief Video playback
+
+\section1 Video Features
+
+Qt Multimedia offers both high and low level C++ classes for playing and
+manipulating video data, and QML types for playback and control.  Some
+of these classes also overlap with both \l {Camera Overview}{camera} and
+\l {Audio Overview}{audio} classes, which can be useful.
+
+\section1 Video Implementation Details
+
+\target multimedia-playing-video
+\section2 Playing Video in C++
+
+You can use the \l QMediaPlayer class to decode a video file, and display
+it using \l QVideoWidget, \l QGraphicsVideoItem, or a custom class.
+
+Here's an example of using QVideoWidget:
+    \snippet doc/src/snippets/multimedia-snippets/video.cpp Video widget
+
+And an example with QGraphicsVideoItem:
+    \snippet doc/src/snippets/multimedia-snippets/video.cpp Video graphics item
+
+\section2 Playing Video in QML
+
+You can use \l VideoOutput to render content that is
+provided by either a \l MediaPlayer or a \l Camera.
+The VideoOutput is a visual component that can be transformed
+or acted upon by shaders (as the \l {QML Video Shader Effects Example} shows), while
+all media decoding and playback control is handled by the \l MediaPlayer.
+
+Alternatively there is also a higher level \l Video type that
+acts as a single, visual element to play video and control playback.
+
+\section2 Working with Low Level Video Frames
+
+Qt Multimedia offers a number of low level classes to make handling
+video frames a bit easier.  These classes are primarily used when
+writing code that processes video or camera frames (for example,
+detecting barcodes, or applying a fancy vignette effect), or needs
+to display video in a special way that is otherwise unsupported.
+
+The \l QVideoFrame class encapsulates a video frame and allows the
+contents to be mapped into system memory for manipulation or
+processing, while deriving a class from \l QAbstractVideoSurface
+allows you to receive these frames from \l QMediaPlayer and
+\l QCamera.
+
+\snippet doc/src/snippets/multimedia-snippets/video.cpp Derived Surface
+
+and with an instance of this surface, \c myVideoSurface, you can set
+the surface as the \l {QMediaPlayer::setVideoOutput()}{video output} for QMediaPlayer.
+
+\snippet doc/src/snippets/multimedia-snippets/video.cpp Setting Surface in Player
+
+Several of the built-in Qt classes offer this functionality
+as well, so if you decode video in your application, you can present
+it to classes that offer a \l QVideoRendererControl class, and in QML
+you can set a custom object for the source of a \l VideoOutput
+with either a writable \c videoSurface property (that the instance will
+set it's internal video surface to) or a readable \c mediaObject property
+with a QMediaObject derived class that implements the \l QVideoRendererControl
+interface.
+
+The following snippet shows a class that has a writable \c videoSurface property
+and receives frames through a public slot \c onNewVideoContentReceived(). These
+frames are then presented on the surface set in \c setVideoSurface().
+
+\snippet doc/src/snippets/multimedia-snippets/video.cpp Video producer
+
+\section2 Recording Video
+You can use the \l QMediaRecorder class in conjunction with other
+classes to record video to disk.  Primarily this is used with
+the camera, so consult the \l {Camera Overview} for more information.
+
+\section2 Monitoring Video Frames
+You can use the \l QVideoProbe class to access video frames as they
+flow through different parts of a media pipeline when using other
+classes like \l QMediaPlayer, \l QMediaRecorder or \l QCamera.  After
+creating the high level media class, you can set the source of the
+video probe to that instance.  This can be useful for performing
+some video processing tasks (like barcode recognition, or object
+detection) while the video is rendered normally.  You can not affect
+the video frames using this class, and they may arrive at a slightly
+different time than they are being rendered.
+
+Here's an example of installing a video probe while recording the camera:
+    \snippet doc/src/snippets/multimedia-snippets/media.cpp Video probe
+
+\section1 Examples
+
+There are both C++ and QML examples available.
+
+\section2 C++ Examples
+
+\annotatedlist video_examples
+
+\section2 QML Examples
+
+\annotatedlist video_examples_qml
+
+\section1 Reference Documentation
+
+\section2 C++ Classes
+
+\annotatedlist multimedia_video
+
+\section2 QML Types
+
+\annotatedlist multimedia_video_qml
+
+*/