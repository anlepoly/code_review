diff --git a/tools/qdoc3/htmlgenerator.cpp b/tools/qdoc3/htmlgenerator.cpp
index de7adfd..fe9bd4c 100644
--- a/tools/qdoc3/htmlgenerator.cpp
+++ b/tools/qdoc3/htmlgenerator.cpp
@@ -3286,16 +3286,13 @@ QString HtmlGenerator::refForNode(const Node *node)
                 ref += "-" + QString::number(func->overloadNumber());
         }
         break;
-#ifdef QDOC_QML        
     case Node::Fake:
         if (node->subType() != Node::QmlPropertyGroup)
             break;
     case Node::QmlProperty:
-#endif        
     case Node::Property:
         ref = node->name() + "-prop";
         break;
-#ifdef QDOC_QML
     case Node::QmlSignal:
         ref = node->name() + "-signal";
         break;
@@ -3305,7 +3302,6 @@ QString HtmlGenerator::refForNode(const Node *node)
     case Node::QmlMethod:
         ref = node->name() + "-method";
         break;
-#endif        
     case Node::Variable:
         ref = node->name() + "-var";
         break;
diff --git a/tools/qdoc3/node.cpp b/tools/qdoc3/node.cpp
index a299916..b4b8fd0 100644
--- a/tools/qdoc3/node.cpp
+++ b/tools/qdoc3/node.cpp
@@ -67,8 +67,8 @@ Node::~Node()
 {
     if (parent_)
         parent_->removeChild(this);
-    if (rel)
-        rel->removeRelated(this);
+    if (relatesTo_)
+        relatesTo_->removeRelated(this);
 }
 
 /*!
@@ -99,7 +99,7 @@ Node::Node(Type type, InnerNode *parent, const QString& name)
       pageType_(NoPageType),
       status_(Commendable),
       parent_(parent),
-      rel(0),
+      relatesTo_(0),
       name_(name)
 {
     if (parent_)
@@ -219,11 +219,11 @@ void Node::setPageType(const QString& t)
  */
 void Node::setRelates(InnerNode *pseudoParent)
 {
-    if (rel) {
-        rel->removeRelated(this);
+    if (relatesTo_) {
+        relatesTo_->removeRelated(this);
     }
-    rel = pseudoParent;
-    pseudoParent->related.append(this);
+    relatesTo_ = pseudoParent;
+    pseudoParent->related_.append(this);
 }
 
 /*!
@@ -379,8 +379,6 @@ QString Node::guid() const
     }
     return uuid;
 }
-//#include "htmlgenerator.h"
-//qDebug() << "FULL DOC LOC:" << HtmlGenerator::fullDocumentLocation(node,false);
 
 /*!
   Composes a string to be used as an href attribute in DITA
@@ -771,8 +769,8 @@ void InnerNode::normalizeOverloads()
  */
 void InnerNode::removeFromRelated()
 {
-    while (!related.isEmpty()) {
-        Node *p = static_cast<Node *>(related.takeFirst());
+    while (!related_.isEmpty()) {
+        Node *p = static_cast<Node *>(related_.takeFirst());
 
         if (p != 0 && p->relates() == this) p->clearRelated();
     }
@@ -1077,7 +1075,7 @@ QString Node::moduleName() const
  */
 void InnerNode::removeRelated(Node *pseudoChild)
 {
-    related.removeAll(pseudoChild);
+    related_.removeAll(pseudoChild);
 }
 
 /*!
@@ -2450,6 +2448,15 @@ QString Node::idForNode() const
         }
         else {
             if (func->name().startsWith("operator")) {
+                str = "";
+                /*
+                  The test below should probably apply to all
+                  functions, but for now, overloaded operators
+                  are the only ones that produce duplicate id
+                  attributes in the DITA XML files.
+                 */
+                if (relatesTo_)
+                    str = "nonmember-";
                 QString op = func->name().mid(8);
                 if (!op.isEmpty()) {
                     int i = 0;
@@ -2469,7 +2476,7 @@ QString Node::idForNode() const
                                 break;
                             ++i;
                         }
-                        str = "operator-";
+                        str += "operator-";
                         if (i>0) {
                             QString tail = op.mid(i);
                             op = op.left(i);
diff --git a/tools/qdoc3/node.h b/tools/qdoc3/node.h
index 053a6e8..84bdcc9 100644
--- a/tools/qdoc3/node.h
+++ b/tools/qdoc3/node.h
@@ -182,7 +182,7 @@ class Node
     Type type() const { return type_; }
     virtual SubType subType() const { return NoSubType; }
     InnerNode* parent() const { return parent_; }
-    InnerNode* relates() const { return rel; }
+    InnerNode* relates() const { return relatesTo_; }
     const QString& name() const { return name_; }
     QMap<LinkType, QPair<QString,QString> > links() const { return linkMap; }
     QString moduleName() const;
@@ -203,7 +203,7 @@ class Node
     QString pageTypeString() const;
     virtual void addPageKeywords(const QString& ) { }
 
-    void clearRelated() { rel = 0; }
+    void clearRelated() { relatesTo_ = 0; }
 
     virtual QString fileBase() const;
     QString guid() const;
@@ -222,8 +222,8 @@ class Node
     const ClassNode* declarativeCppNode() const;
     const QString& outputSubdirectory() const { return outSubDir_; }
     QString fullDocumentName() const;
-    QString idForNode() const;
     static QString cleanId(QString str);
+    QString idForNode() const;
 
  protected:
     Node(Type type, InnerNode* parent, const QString& name);
@@ -244,7 +244,7 @@ class Node
     Status status_ : 3;
 #endif
     InnerNode* parent_;
-    InnerNode* rel;
+    InnerNode* relatesTo_;
     QString name_;
     Location loc;
     Doc d;
@@ -296,7 +296,7 @@ class InnerNode : public Node
     const FunctionNode* findFunctionNode(const FunctionNode* clone) const;
     const EnumNode* findEnumNodeForValue(const QString &enumValue) const;
     const NodeList & childNodes() const { return children; }
-    const NodeList & relatedNodes() const { return related; }
+    const NodeList & relatedNodes() const { return related_; }
     int count() const { return children.size(); }
     int overloadNumber(const FunctionNode* func) const;
     int numOverloads(const QString& funcName) const;
@@ -326,7 +326,7 @@ class InnerNode : public Node
     QStringList inc;
     NodeList children;
     NodeList enumChildren;
-    NodeList related;
+    NodeList related_;
     QMap<QString, Node*> childMap;
     QMap<QString, Node*> primaryFunctionMap;
     QMap<QString, NodeList> secondaryFunctionMap;