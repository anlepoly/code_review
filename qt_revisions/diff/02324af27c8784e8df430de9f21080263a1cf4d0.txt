diff --git a/src/particles/qquickcustomaffector.cpp b/src/particles/qquickcustomaffector.cpp
index 219da82..0482b27 100644
--- a/src/particles/qquickcustomaffector.cpp
+++ b/src/particles/qquickcustomaffector.cpp
@@ -57,7 +57,7 @@ QT_BEGIN_NAMESPACE
     dt is the time since the last time it was affected. Use dt to normalize
     trajectory manipulations to real time.
 
-    Note that JS is slower to execute, so it is not recommended to use this in
+    Note that JavaScript is slower to execute, so it is not recommended to use this in
     high-volume particle systems.
 */
 
diff --git a/src/particles/qquickparticleaffector.cpp b/src/particles/qquickparticleaffector.cpp
index 0ad00ce..29f88fb 100644
--- a/src/particles/qquickparticleaffector.cpp
+++ b/src/particles/qquickparticleaffector.cpp
@@ -122,11 +122,12 @@ QT_BEGIN_NAMESPACE
 
     In the special case where an Affector has no possible effect (e.g. Affector {}), affected
     will be emitted for all particles being considered if you connect to it. This allows you to
-    execute arbitrary code in response to particles (see \l affectParticles if you want to execute
-    code which affects the particles themselves) . As this executes JS scritps per particle, it is
-    not recommended to use this signal with a high-volume particle system.
+    execute arbitrary code in response to particles (use the \l {QtQuick.Particles2::Affector::affectParticles}
+    {affectParticles} signal handler if you want to execute code which affects the particles
+    themselves). As this executes JavaScript code per particle, it is not recommended to use this
+    signal with a high-volume particle system.
 
-    x,y is the particles current position.
+    x,y is the particle's current position.
 */
 QQuickParticleAffector::QQuickParticleAffector(QQuickItem *parent) :
     QQuickItem(parent), m_needsReset(false), m_ignoresTime(false), m_onceOff(false), m_enabled(true)
diff --git a/src/particles/qquickparticleemitter.cpp b/src/particles/qquickparticleemitter.cpp
index de5f3d9..343eb4b 100644
--- a/src/particles/qquickparticleemitter.cpp
+++ b/src/particles/qquickparticleemitter.cpp
@@ -191,10 +191,10 @@ QT_BEGIN_NAMESPACE
 /*!
     \qmlsignal QtQuick.Particles2::Emitter::onEmitParticles(Array particles)
 
-    This handler is called when particles are emitted. particles is a javascript
+    This handler is called when particles are emitted. particles is a JavaScript
     array of Particle objects. You can modify particle attributes directly within the handler.
 
-    Note that JS is slower to execute, so it is not recommended to use this in
+    Note that JavaScript is slower to execute, so it is not recommended to use this in
     high-volume particle systems.
 */
 
diff --git a/src/particles/qquickparticlepainter.cpp b/src/particles/qquickparticlepainter.cpp
index 5088a87..7328437 100644
--- a/src/particles/qquickparticlepainter.cpp
+++ b/src/particles/qquickparticlepainter.cpp
@@ -47,7 +47,7 @@ QT_BEGIN_NAMESPACE
     \qmltype ParticlePainter
     \instantiates QQuickParticlePainter
     \inqmlmodule QtQuick.Particles 2
-    \inherits ParticlePainter
+    \inherits Item
     \brief For specifying how to paint particles
     \ingroup qtquick-particles
 
diff --git a/src/particles/qquickparticlesystem.cpp b/src/particles/qquickparticlesystem.cpp
index 14694e7..a048da2 100644
--- a/src/particles/qquickparticlesystem.cpp
+++ b/src/particles/qquickparticlesystem.cpp
@@ -157,7 +157,7 @@ DEFINE_BOOL_CONFIG_OPTION(qmlParticlesDebug, QML_PARTICLES_DEBUG)
 */
 
 /*!
-    \qmlmethod void QtQuick.Particles2::ParticleSystem::pause
+    \qmlmethod QtQuick.Particles2::ParticleSystem::pause
 
     Pauses the simulation if it is running.
 
@@ -165,7 +165,7 @@ DEFINE_BOOL_CONFIG_OPTION(qmlParticlesDebug, QML_PARTICLES_DEBUG)
 */
 
 /*!
-    \qmlmethod void QtQuick.Particles2::ParticleSystem::resume
+    \qmlmethod QtQuick.Particles2::ParticleSystem::resume
 
     Resumes the simulation if it is paused.
 
@@ -173,7 +173,7 @@ DEFINE_BOOL_CONFIG_OPTION(qmlParticlesDebug, QML_PARTICLES_DEBUG)
 */
 
 /*!
-    \qmlmethod void QtQuick.Particles2::ParticleSystem::start
+    \qmlmethod QtQuick.Particles2::ParticleSystem::start
 
     Starts the simulation if it has not already running.
 
@@ -181,7 +181,7 @@ DEFINE_BOOL_CONFIG_OPTION(qmlParticlesDebug, QML_PARTICLES_DEBUG)
 */
 
 /*!
-    \qmlmethod void QtQuick.Particles2::ParticleSystem::stop
+    \qmlmethod QtQuick.Particles2::ParticleSystem::stop
 
     Stops the simulation if it is running.
 
@@ -189,14 +189,14 @@ DEFINE_BOOL_CONFIG_OPTION(qmlParticlesDebug, QML_PARTICLES_DEBUG)
 */
 
 /*!
-    \qmlmethod void QtQuick.Particles2::ParticleSystem::restart
+    \qmlmethod QtQuick.Particles2::ParticleSystem::restart
 
     Stops the simulation if it is running, and then starts it.
 
     \sa stop, restart, running
 */
 /*!
-    \qmlmethod void QtQuick.Particles2::ParticleSystem::reset
+    \qmlmethod QtQuick.Particles2::ParticleSystem::reset
 
     Discards all currently existing particles.
 
diff --git a/src/particles/qquickv8particledata.cpp b/src/particles/qquickv8particledata.cpp
index 80dec68..74e0aa1 100644
--- a/src/particles/qquickv8particledata.cpp
+++ b/src/particles/qquickv8particledata.cpp
@@ -256,12 +256,12 @@ QT_BEGIN_NAMESPACE
     Values are from 0.0 to 1.0.
 */
 /*!
-    \qmlmethod real QtQuick.Particles2::Particle::lifeLeft
+    \qmlproperty real QtQuick.Particles2::Particle::lifeLeft
     The time in seconds that the particle has left to live at
     the current point in time.
 */
 /*!
-    \qmlmethod real QtQuick.Particles2::Particle::currentSize
+    \qmlproperty real QtQuick.Particles2::Particle::currentSize
     The currentSize of the particle, interpolating between startSize and endSize based on the currentTime.
 */