diff --git a/src/corelib/global/qcompilerdetection.h b/src/corelib/global/qcompilerdetection.h
index 8621d8b..68c8f73 100644
--- a/src/corelib/global/qcompilerdetection.h
+++ b/src/corelib/global/qcompilerdetection.h
@@ -779,4 +779,10 @@
 #  endif
 #endif
 
+#ifdef Q_COMPILER_RVALUE_REFS
+#define qMove(x) std::move(x)
+#else
+#define qMove(x) (x)
+#endif
+
 #endif // QCOMPILERDETECTION_H
diff --git a/src/corelib/global/qglobal.cpp b/src/corelib/global/qglobal.cpp
index 1bc02e0..9008591 100644
--- a/src/corelib/global/qglobal.cpp
+++ b/src/corelib/global/qglobal.cpp
@@ -3006,4 +3006,12 @@ bool QInternal::activateCallbacks(Callback cb, void **parameters)
         {Debugging Techniques}
 */
 
+/*!
+    \macro qMove(x)
+    \relates <QtGlobal>
+
+    It expands to "std::move" if your compiler supports that C++11 function, or to nothing
+    otherwise.
+*/
+
 QT_END_NAMESPACE
diff --git a/tests/auto/other/collections/tst_collections.cpp b/tests/auto/other/collections/tst_collections.cpp
index 26e3ccf..f9905ce 100644
--- a/tests/auto/other/collections/tst_collections.cpp
+++ b/tests/auto/other/collections/tst_collections.cpp
@@ -2556,6 +2556,9 @@ void testContainer()
         c1 = newInstance<Container>();
         QVERIFY(c1.size() == 4);
         QVERIFY(c1 == newInstance<Container>());
+        Container c2 = qMove(c1);
+        QVERIFY(c2.size() == 4);
+        QVERIFY(c2 == newInstance<Container>());
     }
 }