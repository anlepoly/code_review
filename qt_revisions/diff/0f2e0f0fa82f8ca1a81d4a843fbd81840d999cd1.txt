diff --git a/tools/qdoc3/cppcodemarker.cpp b/tools/qdoc3/cppcodemarker.cpp
index e11f475..f308182 100644
--- a/tools/qdoc3/cppcodemarker.cpp
+++ b/tools/qdoc3/cppcodemarker.cpp
@@ -190,9 +190,9 @@ QString CppCodeMarker::markedUpSynopsis(const Node *node,
             synopsis = typified(func->returnType()) + QLatin1Char(' ');
 	synopsis += name;
         if (func->metaness() != FunctionNode::MacroWithoutParams) {
-            synopsis += " (";
+            synopsis += "(";
 	    if (!func->parameters().isEmpty()) {
-                synopsis += QLatin1Char(' ');
+                //synopsis += QLatin1Char(' ');
 	        QList<Parameter>::ConstIterator p = func->parameters().begin();
 	        while (p != func->parameters().end()) {
 		    if (p != func->parameters().begin())
@@ -200,13 +200,13 @@ QString CppCodeMarker::markedUpSynopsis(const Node *node,
 		    synopsis += typified((*p).leftType());
                     if (style != Subpage && !(*p).name().isEmpty())
                         synopsis +=
-                            " <@param>" + protect((*p).name()) + "</@param>";
+                            "<@param>" + protect((*p).name()) + "</@param>";
                     synopsis += protect((*p).rightType());
                     if (style != Subpage && !(*p).defaultValue().isEmpty())
 		        synopsis += " = " + protect((*p).defaultValue());
 		    ++p;
 	        }
-                synopsis += QLatin1Char(' ');
+                //synopsis += QLatin1Char(' ');
 	    }
             synopsis += QLatin1Char(')');
         }
diff --git a/tools/qdoc3/ditaxmlgenerator.cpp b/tools/qdoc3/ditaxmlgenerator.cpp
index 7d2918b..4ca8a3f 100644
--- a/tools/qdoc3/ditaxmlgenerator.cpp
+++ b/tools/qdoc3/ditaxmlgenerator.cpp
@@ -550,8 +550,15 @@ QString DitaXmlGenerator::lookupGuid(QString text)
     QMap<QString, QString>::const_iterator i = name2guidMap.find(text);
     if (i != name2guidMap.end())
         return i.value();
+#if 0
     QString t = QUuid::createUuid().toString();
     QString guid = "id-" + t.mid(1,t.length()-2);
+#endif
+    QString guid = text;
+    guid = guid.toLower();
+    guid = guid.replace("::","-");
+    guid = guid.replace(" ","-");
+    guid = guid.replace("~","dtor.");
     name2guidMap.insert(text,guid);
     return guid;
 }
@@ -570,8 +577,15 @@ QString DitaXmlGenerator::lookupGuid(const QString& fileName, const QString& tex
     GuidMap::const_iterator i = gm->find(text);
     if (i != gm->end())
         return i.value();
+#if 0
     QString t = QUuid::createUuid().toString();
     QString guid = "id-" + t.mid(1,t.length()-2);
+#endif
+    QString guid = text;
+    guid = guid.toLower();
+    guid = guid.replace("::","-");
+    guid = guid.replace(" ","-");
+    guid = guid.replace("~","dtor.");
     gm->insert(text,guid);
     return guid;
 }
@@ -3757,65 +3771,6 @@ QString DitaXmlGenerator::fileBase(const Node* node) const
     return result;
 }
 
-QString DitaXmlGenerator::refForNode(const Node* node)
-{
-    const FunctionNode* func;
-    const TypedefNode* tdn;
-    QString ref;
-
-    switch (node->type()) {
-    case Node::Namespace:
-    case Node::Class:
-    default:
-        break;
-    case Node::Enum:
-        ref = node->name() + "-enum";
-        break;
-    case Node::Typedef:
-        tdn = static_cast<const TypedefNode *>(node);
-        if (tdn->associatedEnum()) {
-            return refForNode(tdn->associatedEnum());
-        }
-        else {
-            ref = node->name() + "-typedef";
-        }
-        break;
-    case Node::Function:
-        func = static_cast<const FunctionNode *>(node);
-        if (func->associatedProperty()) {
-            return refForNode(func->associatedProperty());
-        }
-        else {
-            ref = func->name();
-            if (func->overloadNumber() != 1)
-                ref += QLatin1Char('-') + QString::number(func->overloadNumber());
-        }
-        break;
-    case Node::Fake:
-        if (node->subType() != Node::QmlPropertyGroup)
-            break;
-    case Node::QmlProperty:
-    case Node::Property:
-        ref = node->name() + "-prop";
-        break;
-    case Node::QmlSignal:
-        ref = node->name() + "-signal";
-        break;
-    case Node::QmlSignalHandler:
-        ref = node->name() + "-signal-handler";
-        break;
-    case Node::QmlMethod:
-        ref = node->name() + "-method";
-        break;
-    case Node::Variable:
-        ref = node->name() + "-var";
-        break;
-    case Node::Target:
-        return protectEnc(node->name());
-    }
-    return registerRef(ref);
-}
-
 QString DitaXmlGenerator::guidForNode(const Node* node)
 {
     switch (node->type()) {
@@ -4031,7 +3986,7 @@ void DitaXmlGenerator::findAllFunctions(const InnerNode* node)
                     !func->isInternal() &&
                     (func->metaness() != FunctionNode::Ctor) &&
                     (func->metaness() != FunctionNode::Dtor)) {
-                    funcIndex[(*c)->name()].insert(myTree->fullDocumentName((*c)->parent()), *c);
+                    funcIndex[(*c)->name()].insert((*c)->parent()->fullDocumentName(), *c);
                 }
             }
         }
diff --git a/tools/qdoc3/ditaxmlgenerator.h b/tools/qdoc3/ditaxmlgenerator.h
index a0e3c7f..318d78a 100644
--- a/tools/qdoc3/ditaxmlgenerator.h
+++ b/tools/qdoc3/ditaxmlgenerator.h
@@ -278,7 +278,6 @@ class DitaXmlGenerator : public PageGenerator
     virtual void generateClassLikeNode(const InnerNode* inner, CodeMarker* marker);
     virtual void generateFakeNode(const FakeNode* fake, CodeMarker* marker);
     virtual QString fileExtension(const Node* node) const;
-    virtual QString refForNode(const Node* node);
     virtual QString guidForNode(const Node* node);
     virtual QString linkForNode(const Node* node, const Node* relative);
     virtual QString refForAtom(Atom* atom, const Node* node);
diff --git a/tools/qdoc3/helpprojectwriter.cpp b/tools/qdoc3/helpprojectwriter.cpp
index 9ffd667..0562823 100644
--- a/tools/qdoc3/helpprojectwriter.cpp
+++ b/tools/qdoc3/helpprojectwriter.cpp
@@ -243,7 +243,7 @@ bool HelpProjectWriter::generateSection(HelpProject &project,
         objName = fake->fullTitle();
     }
     else
-        objName = tree->fullDocumentName(node);
+        objName = node->fullDocumentName();
     
     // Only add nodes to the set for each subproject if they match a selector.
     // Those that match will be listed in the table of contents.
@@ -451,7 +451,7 @@ void HelpProjectWriter::generateSections(HelpProject &project,
                     foreach (const Node* n, inner->childNodes()) {
                         if (n->access() == Node::Private)
                             continue;
-                        childMap[tree->fullDocumentName(n)] = n;
+                        childMap[n->fullDocumentName()] = n;
                     }
                 }
                 else
@@ -463,7 +463,7 @@ void HelpProjectWriter::generateSections(HelpProject &project,
                     if (funcNode->isOverload())
                         continue;
                 }
-                childMap[tree->fullDocumentName(node)] = node;
+                childMap[node->fullDocumentName()] = node;
             }
         }
 
diff --git a/tools/qdoc3/htmlgenerator.cpp b/tools/qdoc3/htmlgenerator.cpp
index d3ee282..2e91290 100644
--- a/tools/qdoc3/htmlgenerator.cpp
+++ b/tools/qdoc3/htmlgenerator.cpp
@@ -3567,7 +3567,7 @@ void HtmlGenerator::findAllFunctions(const InnerNode *node)
                     !func->isInternal() &&
                     (func->metaness() != FunctionNode::Ctor) &&
                     (func->metaness() != FunctionNode::Dtor)) {
-                    funcIndex[(*c)->name()].insert(myTree->fullDocumentName((*c)->parent()), *c);
+                    funcIndex[(*c)->name()].insert((*c)->parent()->fullDocumentName(), *c);
                 }
             }
         }
diff --git a/tools/qdoc3/node.cpp b/tools/qdoc3/node.cpp
index 5df703b..0de8144 100644
--- a/tools/qdoc3/node.cpp
+++ b/tools/qdoc3/node.cpp
@@ -64,8 +64,8 @@ ExampleNodeMap ExampleNode::exampleNodeMap;
  */
 Node::~Node()
 {
-    if (par)
-        par->removeChild(this);
+    if (parent_)
+        parent_->removeChild(this);
     if (rel)
         rel->removeRelated(this);
 }
@@ -97,12 +97,12 @@ Node::Node(Type type, InnerNode *parent, const QString& name)
       safeness_(UnspecifiedSafeness),
       pageType_(NoPageType),
       status_(Commendable),
-      par(parent),
+      parent_(parent),
       rel(0),
       name_(name)
 {
-    if (par)
-        par->addChild(this);
+    if (parent_)
+        parent_->addChild(this);
     outSubDir_ = CodeParser::currentOutputSubdirectory();
 }
 
@@ -266,12 +266,13 @@ QString RelatedClass::accessString() const
 }
 
 /*!
+  Returns the inheritance status.
  */
 Node::Status Node::inheritedStatus() const
 {
     Status parentStatus = Commendable;
-    if (par)
-        parentStatus = par->inheritedStatus();
+    if (parent_)
+        parentStatus = parent_->inheritedStatus();
     return (Status)qMin((int)status_, (int)parentStatus);
 }
 
@@ -284,7 +285,7 @@ Node::Status Node::inheritedStatus() const
  */
 Node::ThreadSafeness Node::threadSafeness() const
 {
-    if (par && safeness_ == par->inheritedThreadSafeness())
+    if (parent_ && safeness_ == parent_->inheritedThreadSafeness())
         return UnspecifiedSafeness;
     return safeness_;
 }
@@ -296,8 +297,8 @@ Node::ThreadSafeness Node::threadSafeness() const
  */
 Node::ThreadSafeness Node::inheritedThreadSafeness() const
 {
-    if (par && safeness_ == UnspecifiedSafeness)
-        return par->inheritedThreadSafeness();
+    if (parent_ && safeness_ == UnspecifiedSafeness)
+        return parent_->inheritedThreadSafeness();
     return safeness_;
 }
 
@@ -324,12 +325,18 @@ QString Node::fileBase() const
 QString Node::guid() const
 {
     if (uuid.isEmpty()) {
+        uuid = uuidForNode();
+        qDebug() << "UUID:" << uuid;
+#if 0
         QUuid quuid = QUuid::createUuid();
         QString t = quuid.toString();
         uuid = "id-" + t.mid(1,t.length()-2);
+#endif
     }
     return uuid;
 }
+//#include "htmlgenerator.h"
+//qDebug() << "FULL DOC LOC:" << HtmlGenerator::fullDocumentLocation(node,false);
 
 /*!
   Composes a string to be used as an href attribute in DITA
@@ -2242,4 +2249,122 @@ const Node* NameCollisionNode::applyModuleIdentifier(const Node* origin) const
     return this;
 }
 
+/*!
+  Construct the full document name for this node and return it.
+ */
+QString Node::fullDocumentName() const
+{
+    QStringList pieces;
+    const Node* n = this;
+
+    do {
+        if (!n->name().isEmpty() &&
+            ((n->type() != Node::Fake) || (n->subType() != Node::QmlPropertyGroup)))
+            pieces.insert(0, n->name());
+
+        if ((n->type() == Node::Fake) && (n->subType() != Node::QmlPropertyGroup)) {
+            if ((n->subType() == Node::QmlClass) && !n->qmlModuleName().isEmpty())
+                pieces.insert(0, n->qmlModuleIdentifier());
+            break;
+        }
+
+        // Examine the parent node if one exists.
+        if (n->parent())
+            n = n->parent();
+        else
+            break;
+    } while (true);
+
+    // Create a name based on the type of the ancestor node.
+    QString concatenator = "::";
+    if ((n->type() == Node::Fake) && (n->subType() != Node::QmlClass))
+        concatenator = QLatin1Char('#');
+
+    return pieces.join(concatenator);
+}
+
+/*!
+  Creates a string that can be used as a UUID for the node,
+  depending on the type and subtype of the node. Uniquenss
+  is not guaranteed, but it is expected that strings created
+  here will be unique within an XML document. Hence, the
+  returned string can be used as the value of an \e id
+  attribute.
+ */
+QString Node::uuidForNode() const
+{
+    const FunctionNode* func;
+    const TypedefNode* tdn;
+    QString str;
+
+    switch (type()) {
+    case Node::Namespace:
+        str = "namespace-" + fullDocumentName();
+        break;
+    case Node::Class:
+        str = "class-" + fullDocumentName();
+        break;
+    default:
+        break;
+    case Node::Enum:
+        str = "enum-" + name();
+        break;
+    case Node::Typedef:
+        tdn = static_cast<const TypedefNode*>(this);
+        if (tdn->associatedEnum()) {
+            return tdn->associatedEnum()->uuidForNode();
+        }
+        else {
+            str = "typedef-" + name();
+        }
+        break;
+    case Node::Function:
+        func = static_cast<const FunctionNode*>(this);
+        if (func->associatedProperty()) {
+            return func->associatedProperty()->uuidForNode();
+        }
+        else {
+            if (parent_ && parent_->type() == Class)
+                str = "member-";
+            str += func->name();
+            if (func->overloadNumber() != 1)
+                str += QLatin1Char('-') + QString::number(func->overloadNumber());
+        }
+        break;
+    case Node::Fake:
+        if (subType() == Node::QmlClass) {
+            str = "qml-class-" + name();
+            break;
+        }
+        if (subType() == Node::QmlPropertyGroup)
+            str = "qml-property-" + name();
+        break;
+    case Node::QmlProperty:
+        str = "qml-property-" + name();
+        break;
+    case Node::Property:
+        str = "property-" + name();
+        break;
+    case Node::QmlSignal:
+        str = "qml-signal-" + name();
+        break;
+    case Node::QmlSignalHandler:
+        str = "qml-signal-handler-" + name();
+        break;
+    case Node::QmlMethod:
+        str = "qml-method-" + name();
+        break;
+    case Node::Variable:
+        str = "var-" + name();
+        break;
+    case Node::Target:
+        return name();
+    }
+    str = str.toLower();
+    str = str.replace("::","-");
+    str = str.replace(" ","-");
+    str = str.replace("~","dtor.");
+    return str;
+}
+
 QT_END_NAMESPACE
diff --git a/tools/qdoc3/node.h b/tools/qdoc3/node.h
index bf69c74..12987e0 100644
--- a/tools/qdoc3/node.h
+++ b/tools/qdoc3/node.h
@@ -168,7 +168,7 @@ class Node
     void setTemplateStuff(const QString &templateStuff) { templateStuff_ = templateStuff; }
     void setPageType(PageType t) { pageType_ = t; }
     void setPageType(const QString& t);
-    void setParent(InnerNode* n) { par = n; }
+    void setParent(InnerNode* n) { parent_ = n; }
 
     virtual bool isInnerNode() const = 0;
     virtual bool isReimp() const { return false; }
@@ -180,7 +180,7 @@ class Node
     virtual void setAbstract(bool ) { }
     Type type() const { return type_; }
     virtual SubType subType() const { return NoSubType; }
-    InnerNode* parent() const { return par; }
+    InnerNode* parent() const { return parent_; }
     InnerNode* relates() const { return rel; }
     const QString& name() const { return name_; }
     QMap<LinkType, QPair<QString,QString> > links() const { return linkMap; }
@@ -220,6 +220,8 @@ class Node
     const QmlClassNode* qmlClassNode() const;
     const ClassNode* declarativeCppNode() const;
     const QString& outputSubdirectory() const { return outSubDir_; }
+    QString fullDocumentName() const;
+    QString uuidForNode() const;
 
  protected:
     Node(Type type, InnerNode* parent, const QString& name);
@@ -239,7 +241,7 @@ class Node
     PageType pageType_ : 4;
     Status status_ : 3;
 #endif
-    InnerNode* par;
+    InnerNode* parent_;
     InnerNode* rel;
     QString name_;
     Location loc;
diff --git a/tools/qdoc3/tree.cpp b/tools/qdoc3/tree.cpp
index ac3d3c4..ddc4cfa 100644
--- a/tools/qdoc3/tree.cpp
+++ b/tools/qdoc3/tree.cpp
@@ -1569,7 +1569,7 @@ bool Tree::generateIndexSection(QXmlStreamWriter& writer,
     writer.writeAttribute("status", status);
 
     writer.writeAttribute("name", objName);
-    QString fullName = fullDocumentName(node);
+    QString fullName = node->fullDocumentName();
     if (fullName != objName)
         writer.writeAttribute("fullname", fullName);
     QString href = node->outputSubdirectory();
@@ -1841,11 +1841,13 @@ bool Tree::generateIndexSection(QXmlStreamWriter& writer,
                     const TypedefNode* typedefNode =
                         static_cast<const TypedefNode*>(leftNode);
                     if (typedefNode->associatedEnum()) {
-                        leftType = "QFlags<"+fullDocumentName(typedefNode->associatedEnum())+QLatin1Char('>');
+                        leftType = "QFlags<" +
+                            typedefNode->associatedEnum()->fullDocumentName() +
+                            QLatin1Char('>');
                     }
                 }
                 else
-                    leftType = fullDocumentName(leftNode);
+                    leftType = leftNode->fullDocumentName();
             }
             resolvedParameters.append(leftType);
             signatureList.append(leftType + QLatin1Char(' ') + parameter.name());
@@ -1871,8 +1873,7 @@ bool Tree::generateIndexSection(QXmlStreamWriter& writer,
 
         const EnumNode* enumNode = static_cast<const EnumNode*>(node);
         if (enumNode->flagsType()) {
-            writer.writeAttribute("typedef",
-                fullDocumentName(enumNode->flagsType()));
+            writer.writeAttribute("typedef",enumNode->flagsType()->fullDocumentName());
         }
         foreach (const EnumItem& item, enumNode->items()) {
             writer.writeStartElement("value");
@@ -1886,8 +1887,7 @@ bool Tree::generateIndexSection(QXmlStreamWriter& writer,
 
         const TypedefNode* typedefNode = static_cast<const TypedefNode*>(node);
         if (typedefNode->associatedEnum()) {
-            writer.writeAttribute("enum",
-                fullDocumentName(typedefNode->associatedEnum()));
+            writer.writeAttribute("enum",typedefNode->associatedEnum()->fullDocumentName());
         }
     }
 
@@ -2085,7 +2085,7 @@ void Tree::generateTagFileCompounds(QXmlStreamWriter& writer,
         writer.writeAttribute("kind", kind);
 
         if (node->type() == Node::Class) {
-            writer.writeTextElement("name", fullDocumentName(node));
+            writer.writeTextElement("name", node->fullDocumentName());
             writer.writeTextElement("filename", HtmlGenerator::fullDocumentLocation(node,true));
 
             // Classes contain information about their base classes.
@@ -2103,7 +2103,7 @@ void Tree::generateTagFileCompounds(QXmlStreamWriter& writer,
             // Recurse to write all compounds.
             generateTagFileCompounds(writer, static_cast<const InnerNode*>(node));
         } else {
-            writer.writeTextElement("name", fullDocumentName(node));
+            writer.writeTextElement("name", node->fullDocumentName());
             writer.writeTextElement("filename", HtmlGenerator::fullDocumentLocation(node,true));
 
             // Recurse to write all members.
@@ -2184,11 +2184,11 @@ void Tree::generateTagFileMembers(QXmlStreamWriter& writer,
         switch (node->type()) {
 
         case Node::Class:
-            writer.writeCharacters(fullDocumentName(node));
+            writer.writeCharacters(node->fullDocumentName());
             writer.writeEndElement();
             break;
         case Node::Namespace:
-            writer.writeCharacters(fullDocumentName(node));
+            writer.writeCharacters(node->fullDocumentName());
             writer.writeEndElement();
             break;
         case Node::Function:
@@ -2244,7 +2244,9 @@ void Tree::generateTagFileMembers(QXmlStreamWriter& writer,
                     if (leftNode) {
                         const TypedefNode* typedefNode = static_cast<const TypedefNode*>(leftNode);
                         if (typedefNode->associatedEnum()) {
-                            leftType = "QFlags<"+fullDocumentName(typedefNode->associatedEnum())+QLatin1Char('>');
+                            leftType = "QFlags<" +
+                                typedefNode->associatedEnum()->fullDocumentName() +
+                                QLatin1Char('>');
                         }
                     }
                     signatureList.append(leftType + QLatin1Char(' ') + parameter.name());
@@ -2297,7 +2299,7 @@ void Tree::generateTagFileMembers(QXmlStreamWriter& writer,
             {
                 const TypedefNode* typedefNode = static_cast<const TypedefNode*>(node);
                 if (typedefNode->associatedEnum())
-                    writer.writeAttribute("type", fullDocumentName(typedefNode->associatedEnum()));
+                    writer.writeAttribute("type", typedefNode->associatedEnum()->fullDocumentName());
                 else
                     writer.writeAttribute("type", "");
                 writer.writeTextElement("name", objName);
@@ -2352,42 +2354,4 @@ void Tree::addExternalLink(const QString& url, const Node* relative)
     fakeNode->setDoc(doc);
 }
 
-/*!
-  Construct the full document name for \a node and return the
-  name.
- */
-QString Tree::fullDocumentName(const Node* node) const
-{
-    if (!node)
-        return "";
-
-    QStringList pieces;
-    const Node* n = node;
-
-    do {
-        if (!n->name().isEmpty() &&
-            ((n->type() != Node::Fake) || (n->subType() != Node::QmlPropertyGroup)))
-            pieces.insert(0, n->name());
-
-        if ((n->type() == Node::Fake) && (n->subType() != Node::QmlPropertyGroup)) {
-            if ((n->subType() == Node::QmlClass) && !n->qmlModuleName().isEmpty())
-                pieces.insert(0, n->qmlModuleIdentifier());
-            break;
-        }
-
-        // Examine the parent node if one exists.
-        if (n->parent())
-            n = n->parent();
-        else
-            break;
-    } while (true);
-
-    // Create a name based on the type of the ancestor node.
-    QString concatenator = "::";
-    if ((n->type() == Node::Fake) && (n->subType() != Node::QmlClass))
-        concatenator = QLatin1Char('#');
-
-    return pieces.join(concatenator);
-}
-
 QT_END_NAMESPACE
diff --git a/tools/qdoc3/tree.h b/tools/qdoc3/tree.h
index 5040534..cc85f7c 100644
--- a/tools/qdoc3/tree.h
+++ b/tools/qdoc3/tree.h
@@ -148,7 +148,6 @@ class Tree
                                 const InnerNode *inner) const;
     void generateTagFile(const QString &fileName) const;
     void addExternalLink(const QString &url, const Node *relative);
-    QString fullDocumentName(const Node *node) const;
     QString fullDocumentLocation(const Node *node) const;
     void resolveQmlInheritance();