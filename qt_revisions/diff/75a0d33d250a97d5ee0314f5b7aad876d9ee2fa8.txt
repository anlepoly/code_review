diff --git a/examples/demos/plasmapatrol/content/PlasmaPatrolParticles.qml b/examples/demos/plasmapatrol/content/PlasmaPatrolParticles.qml
index 95d4bcd..1d856b5 100644
--- a/examples/demos/plasmapatrol/content/PlasmaPatrolParticles.qml
+++ b/examples/demos/plasmapatrol/content/PlasmaPatrolParticles.qml
@@ -127,19 +127,19 @@ Item {
                 id: spinState
                 name: "spinning"
                 source: "pics/meteor.png"
-                frames: 35
+                frameCount: 35
                 frameDuration: 40
                 to: {"death":0, "spinning":1}
             },Sprite {
                 name: "death"
                 source: "pics/meteor_explo.png"
-                frames: 22
+                frameCount: 22
                 frameDuration: 40
                 to: {"null":1}
             }, Sprite {
                 name: "null"
                 source: "pics/nullRock.png"
-                frames: 1
+                frameCount: 1
                 frameDuration: 1000
             }
         ]
diff --git a/examples/particles/affectors/age.qml b/examples/particles/affectors/age.qml
index 1e7774b..ea1b302 100644
--- a/examples/particles/affectors/age.qml
+++ b/examples/particles/affectors/age.qml
@@ -54,7 +54,7 @@ Rectangle {
         sprites: Sprite {
             name: "snow"
             source: "../images/snowflake.png"
-            frames: 51
+            frameCount: 51
             frameDuration: 40
             frameDurationVariation: 8
         }
diff --git a/examples/particles/affectors/attractor.qml b/examples/particles/affectors/attractor.qml
index 460a497..0d50937 100644
--- a/examples/particles/affectors/attractor.qml
+++ b/examples/particles/affectors/attractor.qml
@@ -108,7 +108,7 @@ Rectangle {
             id: spinState
             name: "spinning"
             source: "../images/meteor.png"
-            frames: 35
+            frameCount: 35
             frameDuration: 60
         }
     }
diff --git a/examples/particles/affectors/customaffector.qml b/examples/particles/affectors/customaffector.qml
index 3f98cd5..9ccf45d 100644
--- a/examples/particles/affectors/customaffector.qml
+++ b/examples/particles/affectors/customaffector.qml
@@ -135,31 +135,31 @@ Item {
         system: sys
         sprites: [Sprite {
                 source: "../images/realLeaf1.png"
-                frames: 1
+                frameCount: 1
                 frameDuration: 1
                 to: {"a":1, "b":1, "c":1, "d":1}
             }, Sprite {
                 name: "a"
                 source: "../images/realLeaf1.png"
-                frames: 1
+                frameCount: 1
                 frameDuration: 10000
             },
             Sprite {
                 name: "b"
                 source: "../images/realLeaf2.png"
-                frames: 1
+                frameCount: 1
                 frameDuration: 10000
             },
             Sprite {
                 name: "c"
                 source: "../images/realLeaf3.png"
-                frames: 1
+                frameCount: 1
                 frameDuration: 10000
             },
             Sprite {
                 name: "d"
                 source: "../images/realLeaf4.png"
-                frames: 1
+                frameCount: 1
                 frameDuration: 10000
             }
         ]
diff --git a/examples/particles/affectors/friction.qml b/examples/particles/affectors/friction.qml
index 4161fd9..b93ead1 100644
--- a/examples/particles/affectors/friction.qml
+++ b/examples/particles/affectors/friction.qml
@@ -65,31 +65,31 @@ Item {
         system: sys
         sprites: [Sprite {
                 source: "../images/realLeaf1.png"
-                frames: 1
+                frameCount: 1
                 frameDuration: 1
                 to: {"a":1, "b":1, "c":1, "d":1}
             }, Sprite {
                 name: "a"
                 source: "../images/realLeaf1.png"
-                frames: 1
+                frameCount: 1
                 frameDuration: 10000
             },
             Sprite {
                 name: "b"
                 source: "../images/realLeaf2.png"
-                frames: 1
+                frameCount: 1
                 frameDuration: 10000
             },
             Sprite {
                 name: "c"
                 source: "../images/realLeaf3.png"
-                frames: 1
+                frameCount: 1
                 frameDuration: 10000
             },
             Sprite {
                 name: "d"
                 source: "../images/realLeaf4.png"
-                frames: 1
+                frameCount: 1
                 frameDuration: 10000
             }
         ]
diff --git a/examples/particles/affectors/spritegoal.qml b/examples/particles/affectors/spritegoal.qml
index 1ea6144..7102d09 100644
--- a/examples/particles/affectors/spritegoal.qml
+++ b/examples/particles/affectors/spritegoal.qml
@@ -105,20 +105,20 @@ Item {
                 id: spinState
                 name: "spinning"
                 source: "../images/meteor.png"
-                frames: 35
+                frameCount: 35
                 frameDuration: 40
                 randomStart: true
                 to: {"explode":0, "spinning":1}
             },Sprite {
                 name: "explode"
                 source: "../images/_explo.png"
-                frames: 22
+                frameCount: 22
                 frameDuration: 40
                 to: {"nullFrame":1}
             },Sprite {//Not sure if this is needed, but seemed easiest
                 name: "nullFrame"
                 source: "../images/nullRock.png"
-                frames: 1
+                frameCount: 1
                 frameDuration: 1000
             }
         ]
diff --git a/examples/particles/affectors/wander.qml b/examples/particles/affectors/wander.qml
index 31a0b4a..ea00879 100644
--- a/examples/particles/affectors/wander.qml
+++ b/examples/particles/affectors/wander.qml
@@ -51,7 +51,7 @@ Rectangle {
         sprites: Sprite {
             name: "snow"
             source: "../images/snowflake.png"
-            frames: 51
+            frameCount: 51
             frameDuration: 40
             frameDurationVariation: 8
         }
diff --git a/examples/particles/imageparticle/allatonce.qml b/examples/particles/imageparticle/allatonce.qml
index fbc634e..b62735d 100644
--- a/examples/particles/imageparticle/allatonce.qml
+++ b/examples/particles/imageparticle/allatonce.qml
@@ -54,7 +54,7 @@ Rectangle {
             Sprite {
                 name: "bear"
                 source: "../images/bear_tiles.png"
-                frames: 13
+                frameCount: 13
                 frameDuration: 120
             }
         ]
diff --git a/examples/particles/imageparticle/sprites.qml b/examples/particles/imageparticle/sprites.qml
index 0fe4f31..45ff2eb 100644
--- a/examples/particles/imageparticle/sprites.qml
+++ b/examples/particles/imageparticle/sprites.qml
@@ -47,11 +47,11 @@ Rectangle {
     height: 800
     id: root
 
-    SpriteImage {
+    SpriteSequence {
         sprites: Sprite {
                 name: "bear"
                 source: "../images/bear_tiles.png"
-                frames: 13
+                frameCount: 13
                 frameDuration: 120
             }
         width: 250
@@ -71,25 +71,25 @@ Rectangle {
         sprites: [Sprite {
             name: "happy"
             source: "../images/starfish_1.png"
-            frames: 1
+            frameCount: 1
             frameDuration: 260
             to: {"happy": 1, "silly": 1, "angry": 1}
         }, Sprite {
             name: "angry"
             source: "../images/starfish_0.png"
-            frames: 1
+            frameCount: 1
             frameDuration: 260
             to: {"happy": 1, "silly": 1, "angry": 1}
         }, Sprite {
             name: "silly"
             source: "../images/starfish_2.png"
-            frames: 1
+            frameCount: 1
             frameDuration: 260
             to: {"happy": 1, "silly": 1, "noticedbear": 0}
         }, Sprite {
             name: "noticedbear"
             source: "../images/starfish_3.png"
-            frames: 1
+            frameCount: 1
             frameDuration: 2600
         }]
     }
diff --git a/examples/qtquick/imageelements/spriteimage.qml b/examples/qtquick/imageelements/spriteimage.qml
index 559bb10..372970d 100644
--- a/examples/qtquick/imageelements/spriteimage.qml
+++ b/examples/qtquick/imageelements/spriteimage.qml
@@ -53,7 +53,7 @@ Item {
         ScriptAction { script: {image.goalSprite = ""; image.jumpTo("still");} }
         PropertyAction { target: image; property: "y"; value: 0 }
     }
-    SpriteImage {
+    SpriteSequence {
         id: image
         width: 256
         height: 256
@@ -63,7 +63,7 @@ Item {
         Sprite{
             name: "still"
             source: "content/BearSheet.png"
-            frames: 1
+            frameCount: 1
             frameWidth: 256
             frameHeight: 256
             frameDuration: 100
@@ -72,7 +72,7 @@ Item {
         Sprite{
             name: "blink"
             source: "content/BearSheet.png"
-            frames: 3
+            frameCount: 3
             frameX: 256
             frameY: 1536
             frameWidth: 256
@@ -83,7 +83,7 @@ Item {
         Sprite{
             name: "floating"
             source: "content/BearSheet.png"
-            frames: 9
+            frameCount: 9
             frameX: 0
             frameY: 0
             frameWidth: 256
@@ -94,7 +94,7 @@ Item {
         Sprite{
             name: "flailing"
             source: "content/BearSheet.png"
-            frames: 8
+            frameCount: 8
             frameX: 0
             frameY: 768
             frameWidth: 256
@@ -105,7 +105,7 @@ Item {
         Sprite{
             name: "falling"
             source: "content/BearSheet.png"
-            frames: 5
+            frameCount: 5
             frameY: 1280
             frameWidth: 256
             frameHeight: 256
diff --git a/examples/qtquick/touchinteraction/multipointtouch/content/BearWhackParticleSystem.qml b/examples/qtquick/touchinteraction/multipointtouch/content/BearWhackParticleSystem.qml
index 05d74ab..bed03e9 100644
--- a/examples/qtquick/touchinteraction/multipointtouch/content/BearWhackParticleSystem.qml
+++ b/examples/qtquick/touchinteraction/multipointtouch/content/BearWhackParticleSystem.qml
@@ -151,7 +151,7 @@ ParticleSystem {
         Sprite{
             name: "floating"
             source: "Bear1.png"
-            frames: 9
+            frameCount: 9
             frameWidth: 256
             frameHeight: 256
             frameDuration: 80
@@ -160,7 +160,7 @@ ParticleSystem {
         Sprite{
             name: "flailing"
             source: "Bear2.png"
-            frames: 8
+            frameCount: 8
             frameWidth: 256
             frameHeight: 256
             frameDuration: 80
@@ -169,7 +169,7 @@ ParticleSystem {
         Sprite{
             name: "falling"
             source: "Bear3.png"
-            frames: 5
+            frameCount: 5
             frameWidth: 256
             frameHeight: 256
             frameDuration: 80
diff --git a/src/quick/items/items.pri b/src/quick/items/items.pri
index bdd1692..21bf7cc 100644
--- a/src/quick/items/items.pri
+++ b/src/quick/items/items.pri
@@ -65,7 +65,7 @@ HEADERS += \
     $$PWD/qquickimplicitsizeitem_p_p.h \
     $$PWD/qquickspriteengine_p.h \
     $$PWD/qquicksprite_p.h \
-    $$PWD/qquickspriteimage_p.h \
+    $$PWD/qquickspritesequence_p.h \
     $$PWD/qquickanimatedsprite_p.h \
     $$PWD/qquickdrag_p.h \
     $$PWD/qquickdroparea_p.h \
@@ -117,7 +117,7 @@ SOURCES += \
     $$PWD/qquickimplicitsizeitem.cpp \
     $$PWD/qquickspriteengine.cpp \
     $$PWD/qquicksprite.cpp \
-    $$PWD/qquickspriteimage.cpp \
+    $$PWD/qquickspritesequence.cpp \
     $$PWD/qquickanimatedsprite.cpp \
     $$PWD/qquickaccessibleattached.cpp \
     $$PWD/qquickdrag.cpp \
diff --git a/src/quick/items/qquickitemsmodule.cpp b/src/quick/items/qquickitemsmodule.cpp
index 2c74e3c..b9e401a 100644
--- a/src/quick/items/qquickitemsmodule.cpp
+++ b/src/quick/items/qquickitemsmodule.cpp
@@ -77,7 +77,7 @@
 #include <QtQuick/private/qquickcanvasitem_p.h>
 #include <QtQuick/private/qquickcontext2d_p.h>
 #include "qquicksprite_p.h"
-#include "qquickspriteimage_p.h"
+#include "qquickspritesequence_p.h"
 #include "qquickanimatedsprite_p.h"
 #include "qquickdrag_p.h"
 #include "qquickdroparea_p.h"
@@ -202,7 +202,8 @@ static void qt_quickitems_defineModule(const char *uri, int major, int minor)
 
     qmlRegisterType<QQuickSprite>("QtQuick", 2, 0, "Sprite");
     qmlRegisterType<QQuickAnimatedSprite>("QtQuick", 2, 0, "AnimatedSprite");
-    qmlRegisterType<QQuickSpriteImage>("QtQuick", 2, 0, "SpriteImage");
+    qmlRegisterType<QQuickSpriteSequence>("QtQuick", 2, 0, "SpriteSequence");
+    qmlRegisterType<QQuickSpriteSequence>("QtQuick", 2, 0, "SpriteImage");//Deprecation in progress
 
     qmlRegisterType<QQuickParentChange>(uri, major, minor,"ParentChange");
     qmlRegisterType<QQuickAnchorChanges>(uri, major, minor,"AnchorChanges");
diff --git a/src/quick/items/qquicksprite.cpp b/src/quick/items/qquicksprite.cpp
index 4de7880..2a1bd08 100644
--- a/src/quick/items/qquicksprite.cpp
+++ b/src/quick/items/qquicksprite.cpp
@@ -145,7 +145,7 @@ QT_BEGIN_NAMESPACE
     will repeat itself after completing.
 */
 /*!
-    \qmlproperty int QtQuick2::Sprite::frames
+    \qmlproperty int QtQuick2::Sprite::frameCount
 
     Number of frames in this sprite.
 */
diff --git a/src/quick/items/qquicksprite_p.h b/src/quick/items/qquicksprite_p.h
index 98cc90a..dd6560f 100644
--- a/src/quick/items/qquicksprite_p.h
+++ b/src/quick/items/qquicksprite_p.h
@@ -48,6 +48,7 @@
 #include <QDeclarativeListProperty>
 #include <QtQuick/private/qdeclarativepixmapcache_p.h>
 #include "qquickspriteengine_p.h"
+#include <QDebug>
 
 QT_BEGIN_HEADER
 
@@ -60,7 +61,8 @@ class QQuickSprite : public QQuickStochasticState
     //Renderers have to query this hint when advancing frames
     Q_PROPERTY(bool reverse READ reverse WRITE setReverse NOTIFY reverseChanged)
     Q_PROPERTY(bool frameSync READ frameSync WRITE setFrameSync NOTIFY frameSyncChanged)
-    Q_PROPERTY(int frames READ frames WRITE setFrames NOTIFY framesChanged)
+    Q_PROPERTY(int frames READ frames WRITE setFrames NOTIFY frameCountChanged)
+    Q_PROPERTY(int frameCount READ frameCount WRITE setFrameCount NOTIFY frameCountChanged)
     //If frame height or width is not specified, it is assumed to be a single long row of square frames.
     //Otherwise, it can be multiple contiguous rows, when one row runs out the next will be used.
     Q_PROPERTY(int frameHeight READ frameHeight WRITE setFrameHeight NOTIFY frameHeightChanged)
@@ -101,6 +103,11 @@ public:
         return m_frames;
     }
 
+    int frameCount() const
+    {
+        return m_frames;
+    }
+
     int frameX() const
     {
         return m_frameX;
@@ -158,7 +165,7 @@ signals:
 
     void reverseChanged(bool arg);
 
-    void framesChanged(int arg);
+    void frameCountChanged(int arg);
 
     void frameXChanged(int arg);
 
@@ -211,9 +218,15 @@ public slots:
 
     void setFrames(int arg)
     {
+        qWarning() << "Sprite::frames has been renamed Sprite::frameCount";
+        setFrameCount(arg);
+    }
+
+    void setFrameCount(int arg)
+    {
         if (m_frames != arg) {
             m_frames = arg;
-            emit framesChanged(arg);
+            emit frameCountChanged(arg);
         }
     }
 
@@ -278,7 +291,7 @@ private slots:
 
 private:
     friend class QQuickImageParticle;
-    friend class QQuickSpriteImage;
+    friend class QQuickSpriteSequence;
     friend class QQuickAnimatedSprite;
     friend class QQuickSpriteEngine;
     friend class QQuickStochasticEngine;
diff --git a/src/quick/items/qquickspriteimage.cpp b/src/quick/items/qquickspriteimage.cpp
deleted file mode 100644
index 1b3b577..0000000
--- a/src/quick/items/qquickspriteimage.cpp
+++ /dev/null
@@ -1,482 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/
-**
-** This file is part of the Declarative module of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:LGPL$
-** GNU Lesser General Public License Usage
-** This file may be used under the terms of the GNU Lesser General Public
-** License version 2.1 as published by the Free Software Foundation and
-** appearing in the file LICENSE.LGPL included in the packaging of this
-** file. Please review the following information to ensure the GNU Lesser
-** General Public License version 2.1 requirements will be met:
-** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
-**
-** In addition, as a special exception, Nokia gives you certain additional
-** rights. These rights are described in the Nokia Qt LGPL Exception
-** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
-**
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU General
-** Public License version 3.0 as published by the Free Software Foundation
-** and appearing in the file LICENSE.GPL included in the packaging of this
-** file. Please review the following information to ensure the GNU General
-** Public License version 3.0 requirements will be met:
-** http://www.gnu.org/copyleft/gpl.html.
-**
-** Other Usage
-** Alternatively, this file may be used in accordance with the terms and
-** conditions contained in a signed written agreement between you and Nokia.
-**
-**
-**
-**
-**
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-#include "qquickspriteimage_p.h"
-#include "qquicksprite_p.h"
-#include "qquickspriteengine_p.h"
-#include <QtQuick/private/qsgcontext_p.h>
-#include <private/qsgadaptationlayer_p.h>
-#include <QtQuick/qsgnode.h>
-#include <QtQuick/qsgengine.h>
-#include <QtQuick/qsgtexturematerial.h>
-#include <QtQuick/qsgtexture.h>
-#include <QtQuick/qquickcanvas.h>
-#include <QtDeclarative/qdeclarativeinfo.h>
-#include <QFile>
-#include <cmath>
-#include <qmath.h>
-#include <QDebug>
-
-QT_BEGIN_NAMESPACE
-
-static const char vertexShaderCode[] =
-    "attribute highp vec2 vTex;\n"
-    "uniform highp vec3 animData;// w,h(premultiplied of anim), interpolation progress\n"
-    "uniform highp vec4 animPos;//x,y, x,y (two frames for interpolation)\n"
-    "uniform highp vec2 size;//w,h of element\n"
-    "\n"
-    "uniform highp mat4 qt_Matrix;\n"
-    "\n"
-    "varying highp vec4 fTexS;\n"
-    "varying lowp float progress;\n"
-    "\n"
-    "\n"
-    "void main() {\n"
-    "    progress = animData.z;\n"
-    "    //Calculate frame location in texture\n"
-    "    fTexS.xy = animPos.xy + vTex.xy * animData.xy;\n"
-    "    //Next frame is also passed, for interpolation\n"
-    "    fTexS.zw = animPos.zw + vTex.xy * animData.xy;\n"
-    "\n"
-    "    gl_Position = qt_Matrix * vec4(size.x * vTex.x, size.y * vTex.y, 0, 1);\n"
-    "}\n";
-
-static const char fragmentShaderCode[] =
-    "uniform sampler2D texture;\n"
-    "uniform lowp float qt_Opacity;\n"
-    "\n"
-    "varying highp vec4 fTexS;\n"
-    "varying lowp float progress;\n"
-    "\n"
-    "void main() {\n"
-    "    gl_FragColor = mix(texture2D(texture, fTexS.xy), texture2D(texture, fTexS.zw), progress) * qt_Opacity;\n"
-    "}\n";
-
-class QQuickSpriteImageMaterial : public QSGMaterial
-{
-public:
-    QQuickSpriteImageMaterial();
-    ~QQuickSpriteImageMaterial();
-    virtual QSGMaterialType *type() const { static QSGMaterialType type; return &type; }
-    virtual QSGMaterialShader *createShader() const;
-    virtual int compare(const QSGMaterial *other) const
-    {
-        return this - static_cast<const QQuickSpriteImageMaterial *>(other);
-    }
-
-    QSGTexture *texture;
-
-    float animT;
-    float animX1;
-    float animY1;
-    float animX2;
-    float animY2;
-    float animW;
-    float animH;
-    float elementWidth;
-    float elementHeight;
-};
-
-QQuickSpriteImageMaterial::QQuickSpriteImageMaterial()
-    : animT(0.0f)
-    , animX1(0.0f)
-    , animY1(0.0f)
-    , animX2(0.0f)
-    , animY2(0.0f)
-    , animW(1.0f)
-    , animH(1.0f)
-    , elementWidth(1.0f)
-    , elementHeight(1.0f)
-{
-    setFlag(Blending, true);
-}
-
-QQuickSpriteImageMaterial::~QQuickSpriteImageMaterial()
-{
-    delete texture;
-}
-
-class SpriteImageMaterialData : public QSGMaterialShader
-{
-public:
-    SpriteImageMaterialData(const char * /* vertexFile */ = 0, const char * /* fragmentFile */ = 0)
-    {
-    }
-
-    void deactivate() {
-        QSGMaterialShader::deactivate();
-
-        for (int i=0; i<8; ++i) {
-            program()->setAttributeArray(i, GL_FLOAT, chunkOfBytes, 1, 0);
-        }
-    }
-
-    virtual void updateState(const RenderState &state, QSGMaterial *newEffect, QSGMaterial *)
-    {
-        QQuickSpriteImageMaterial *m = static_cast<QQuickSpriteImageMaterial *>(newEffect);
-        m->texture->bind();
-
-        program()->setUniformValue(m_opacity_id, state.opacity());
-        program()->setUniformValue(m_animData_id, m->animW, m->animH, m->animT);
-        program()->setUniformValue(m_animPos_id, m->animX1, m->animY1, m->animX2, m->animY2);
-        program()->setUniformValue(m_size_id, m->elementWidth, m->elementHeight);
-
-        if (state.isMatrixDirty())
-            program()->setUniformValue(m_matrix_id, state.combinedMatrix());
-    }
-
-    virtual void initialize() {
-        m_matrix_id = program()->uniformLocation("qt_Matrix");
-        m_opacity_id = program()->uniformLocation("qt_Opacity");
-        m_animData_id = program()->uniformLocation("animData");
-        m_animPos_id = program()->uniformLocation("animPos");
-        m_size_id = program()->uniformLocation("size");
-    }
-
-    virtual const char *vertexShader() const { return vertexShaderCode; }
-    virtual const char *fragmentShader() const { return fragmentShaderCode; }
-
-    virtual char const *const *attributeNames() const {
-        static const char *attr[] = {
-           "vTex",
-            0
-        };
-        return attr;
-    }
-
-    int m_matrix_id;
-    int m_opacity_id;
-    int m_animData_id;
-    int m_animPos_id;
-    int m_size_id;
-
-    static float chunkOfBytes[1024];
-};
-
-float SpriteImageMaterialData::chunkOfBytes[1024];
-
-QSGMaterialShader *QQuickSpriteImageMaterial::createShader() const
-{
-    return new SpriteImageMaterialData;
-}
-
-struct SpriteVertex {
-    float tx;
-    float ty;
-};
-
-struct SpriteVertices {
-    SpriteVertex v1;
-    SpriteVertex v2;
-    SpriteVertex v3;
-    SpriteVertex v4;
-};
-
-/*!
-    \qmlclass SpriteImage QQuickSpriteImage
-    \inqmlmodule QtQuick 2
-    \inherits Item
-    \brief The SpriteImage element draws a sprite animation
-
-*/
-/*!
-    \qmlproperty bool QtQuick2::SpriteImage::running
-
-    Whether the sprite is animating or not.
-
-    Default is true
-*/
-/*!
-    \qmlproperty bool QtQuick2::SpriteImage::interpolate
-
-    If true, interpolation will occur between sprite frames to make the
-    animation appear smoother.
-
-    Default is true.
-*/
-/*!
-    \qmlproperty string QtQuick2::SpriteImage::goalSprite
-
-    The name of the Sprite which is currently animating.
-*/
-/*!
-    \qmlproperty string QtQuick2::SpriteImage::goalSprite
-
-    The name of the Sprite which the animation should move to.
-
-    Sprite states have defined durations and transitions between them, setting goalState
-    will cause it to disregard any path weightings (including 0) and head down the path
-    which will reach the goalState quickest (fewest animations). It will pass through
-    intermediate states on that path, and animate them for their duration.
-
-    If it is possible to return to the goalState from the starting point of the goalState
-    it will continue to do so until goalState is set to "" or an unreachable state.
-*/
-/*! \qmlmethod void QtQuick2::SpriteImage::jumpTo(string sprite)
-
-    This function causes the sprite to jump to the specified state immediately, intermediate
-    states are not played.
-*/
-/*!
-    \qmlproperty list<Sprite> QtQuick2::SpriteImage::sprites
-
-    The sprite or sprites to draw. Sprites will be scaled to the size of this element.
-*/
-
-//TODO: Implicitly size element to size of first sprite?
-QQuickSpriteImage::QQuickSpriteImage(QQuickItem *parent) :
-    QQuickItem(parent)
-    , m_node(0)
-    , m_material(0)
-    , m_spriteEngine(0)
-    , m_curFrame(0)
-    , m_pleaseReset(false)
-    , m_running(true)
-    , m_interpolate(true)
-    , m_curStateIdx(0)
-{
-    setFlag(ItemHasContents);
-    connect(this, SIGNAL(runningChanged(bool)),
-            this, SLOT(update()));
-}
-
-void QQuickSpriteImage::jumpTo(const QString &sprite)
-{
-    if (!m_spriteEngine)
-        return;
-    m_spriteEngine->setGoal(m_spriteEngine->stateIndex(sprite), 0, true);
-}
-
-void QQuickSpriteImage::setGoalSprite(const QString &sprite)
-{
-    if (m_goalState != sprite){
-        m_goalState = sprite;
-        emit goalSpriteChanged(sprite);
-        m_spriteEngine->setGoal(m_spriteEngine->stateIndex(sprite));
-    }
-}
-
-QDeclarativeListProperty<QQuickSprite> QQuickSpriteImage::sprites()
-{
-    return QDeclarativeListProperty<QQuickSprite>(this, &m_sprites, spriteAppend, spriteCount, spriteAt, spriteClear);
-}
-
-void QQuickSpriteImage::createEngine()
-{
-    //TODO: delay until component complete
-    if (m_spriteEngine)
-        delete m_spriteEngine;
-    if (m_sprites.count())
-        m_spriteEngine = new QQuickSpriteEngine(m_sprites, this);
-    else
-        m_spriteEngine = 0;
-    reset();
-}
-
-static QSGGeometry::Attribute SpriteImage_Attributes[] = {
-    QSGGeometry::Attribute::create(0, 2, GL_FLOAT),         // tex
-};
-
-static QSGGeometry::AttributeSet SpriteImage_AttributeSet =
-{
-    1, // Attribute Count
-    2 * sizeof(float),
-    SpriteImage_Attributes
-};
-
-QSGGeometryNode* QQuickSpriteImage::buildNode()
-{
-    if (!m_spriteEngine) {
-        qmlInfo(this) << "No sprite engine...";
-        return 0;
-    } else if (m_spriteEngine->status() == QDeclarativePixmap::Null) {
-        m_spriteEngine->startAssemblingImage();
-        update();//Schedule another update, where we will check again
-        return 0;
-    } else if (m_spriteEngine->status() == QDeclarativePixmap::Loading) {
-        update();//Schedule another update, where we will check again
-        return 0;
-    }
-
-    m_material = new QQuickSpriteImageMaterial();
-
-    QImage image = m_spriteEngine->assembledImage();
-    if (image.isNull())
-        return 0;
-    m_sheetSize = QSizeF(image.size());
-    m_material->texture = canvas()->createTextureFromImage(image);
-    m_material->texture->setFiltering(QSGTexture::Linear);
-    m_spriteEngine->start(0);
-    m_material->animT = 0;
-    m_material->animX1 = m_spriteEngine->spriteX() / m_sheetSize.width();
-    m_material->animY1 = m_spriteEngine->spriteY() / m_sheetSize.height();
-    m_material->animX2 = m_material->animX1;
-    m_material->animY2 = m_material->animY1;
-    m_material->animW = m_spriteEngine->spriteWidth() / m_sheetSize.width();
-    m_material->animH = m_spriteEngine->spriteHeight() / m_sheetSize.height();
-    m_material->elementWidth = width();
-    m_material->elementHeight = height();
-    m_curState = m_spriteEngine->state(m_spriteEngine->curState())->name();
-    emit currentSpriteChanged(m_curState);
-
-    int vCount = 4;
-    int iCount = 6;
-    QSGGeometry *g = new QSGGeometry(SpriteImage_AttributeSet, vCount, iCount);
-    g->setDrawingMode(GL_TRIANGLES);
-
-    SpriteVertices *p = (SpriteVertices *) g->vertexData();
-
-    p->v1.tx = 0;
-    p->v1.ty = 0;
-
-    p->v2.tx = 1.0;
-    p->v2.ty = 0;
-
-    p->v3.tx = 0;
-    p->v3.ty = 1.0;
-
-    p->v4.tx = 1.0;
-    p->v4.ty = 1.0;
-
-    quint16 *indices = g->indexDataAsUShort();
-    indices[0] = 0;
-    indices[1] = 1;
-    indices[2] = 2;
-    indices[3] = 1;
-    indices[4] = 3;
-    indices[5] = 2;
-
-
-    m_timestamp.start();
-    m_node = new QSGGeometryNode();
-    m_node->setGeometry(g);
-    m_node->setMaterial(m_material);
-    m_node->setFlag(QSGGeometryNode::OwnsMaterial);
-    return m_node;
-}
-
-void QQuickSpriteImage::reset()
-{
-    m_pleaseReset = true;
-}
-
-QSGNode *QQuickSpriteImage::updatePaintNode(QSGNode *, UpdatePaintNodeData *)
-{
-    if (m_pleaseReset) {
-        delete m_node;
-
-        m_node = 0;
-        m_material = 0;
-        m_pleaseReset = false;
-    }
-
-    prepareNextFrame();
-
-    if (m_running) {
-        update();
-        if (m_node)
-            m_node->markDirty(QSGNode::DirtyMaterial);
-    }
-
-    return m_node;
-}
-
-void QQuickSpriteImage::prepareNextFrame()
-{
-    if (m_node == 0)
-        m_node = buildNode();
-    if (m_node == 0) //error creating node
-        return;
-
-    uint timeInt = m_timestamp.elapsed();
-    qreal time =  timeInt / 1000.;
-    m_material->elementHeight = height();
-    m_material->elementWidth = width();
-
-    //Advance State
-    m_spriteEngine->updateSprites(timeInt);
-    if (m_curStateIdx != m_spriteEngine->curState()) {
-        m_curStateIdx = m_spriteEngine->curState();
-        m_curState = m_spriteEngine->state(m_spriteEngine->curState())->name();
-        emit currentSpriteChanged(m_curState);
-        m_curFrame= -1;
-    }
-
-    //Advance Sprite
-    qreal animT = m_spriteEngine->spriteStart()/1000.0;
-    qreal frameCount = m_spriteEngine->spriteFrames();
-    qreal frameDuration = m_spriteEngine->spriteDuration()/frameCount;
-    double frameAt;
-    qreal progress;
-    if (frameDuration > 0) {
-        qreal frame = (time - animT)/(frameDuration / 1000.0);
-        frame = qBound(qreal(0.0), frame, frameCount - qreal(1.0));//Stop at count-1 frames until we have between anim interpolation
-        progress = modf(frame,&frameAt);
-    } else {
-        m_curFrame++;
-        if (m_curFrame >= frameCount){
-            m_curFrame = 0;
-            m_spriteEngine->advance();
-        }
-        frameAt = m_curFrame;
-        progress = 0;
-    }
-    if (m_spriteEngine->sprite()->reverse())
-        frameAt = (m_spriteEngine->spriteFrames() - 1) - frameAt;
-    qreal y = m_spriteEngine->spriteY() / m_sheetSize.height();
-    qreal w = m_spriteEngine->spriteWidth() / m_sheetSize.width();
-    qreal h = m_spriteEngine->spriteHeight() / m_sheetSize.height();
-    qreal x1 = m_spriteEngine->spriteX() / m_sheetSize.width();
-    x1 += frameAt * w;
-    qreal x2 = x1;
-    if (frameAt < (frameCount-1))
-        x2 += w;
-
-    m_material->animX1 = x1;
-    m_material->animY1 = y;
-    m_material->animX2 = x2;
-    m_material->animY2 = y;
-    m_material->animW = w;
-    m_material->animH = h;
-    m_material->animT = m_interpolate ? progress : 0.0;
-}
-
-QT_END_NAMESPACE
diff --git a/src/quick/items/qquickspriteimage_p.h b/src/quick/items/qquickspriteimage_p.h
deleted file mode 100644
index 8017263..0000000
--- a/src/quick/items/qquickspriteimage_p.h
+++ /dev/null
@@ -1,148 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/
-**
-** This file is part of the Declarative module of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:LGPL$
-** GNU Lesser General Public License Usage
-** This file may be used under the terms of the GNU Lesser General Public
-** License version 2.1 as published by the Free Software Foundation and
-** appearing in the file LICENSE.LGPL included in the packaging of this
-** file. Please review the following information to ensure the GNU Lesser
-** General Public License version 2.1 requirements will be met:
-** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
-**
-** In addition, as a special exception, Nokia gives you certain additional
-** rights. These rights are described in the Nokia Qt LGPL Exception
-** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
-**
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU General
-** Public License version 3.0 as published by the Free Software Foundation
-** and appearing in the file LICENSE.GPL included in the packaging of this
-** file. Please review the following information to ensure the GNU General
-** Public License version 3.0 requirements will be met:
-** http://www.gnu.org/copyleft/gpl.html.
-**
-** Other Usage
-** Alternatively, this file may be used in accordance with the terms and
-** conditions contained in a signed written agreement between you and Nokia.
-**
-**
-**
-**
-**
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-#ifndef QQUICKSPRITEIMAGE_P_H
-#define QQUICKSPRITEIMAGE_P_H
-
-#include <QtQuick/QQuickItem>
-#include <QTime>
-
-QT_BEGIN_HEADER
-
-QT_BEGIN_NAMESPACE
-
-class QSGContext;
-class QQuickSprite;
-class QQuickSpriteEngine;
-class QSGGeometryNode;
-class QQuickSpriteImageMaterial;
-class Q_AUTOTEST_EXPORT QQuickSpriteImage : public QQuickItem
-{
-    Q_OBJECT
-    Q_PROPERTY(bool running READ running WRITE setRunning NOTIFY runningChanged)
-    Q_PROPERTY(bool interpolate READ interpolate WRITE setInterpolate NOTIFY interpolateChanged)
-    Q_PROPERTY(QString goalSprite READ goalSprite WRITE setGoalSprite NOTIFY goalSpriteChanged)
-    Q_PROPERTY(QString currentSprite READ currentSprite NOTIFY currentSpriteChanged)
-    //###try to share similar spriteEngines for less overhead?
-    Q_PROPERTY(QDeclarativeListProperty<QQuickSprite> sprites READ sprites)
-    Q_CLASSINFO("DefaultProperty", "sprites")
-
-public:
-    explicit QQuickSpriteImage(QQuickItem *parent = 0);
-
-    QDeclarativeListProperty<QQuickSprite> sprites();
-
-    bool running() const
-    {
-        return m_running;
-    }
-
-    bool interpolate() const
-    {
-        return m_interpolate;
-    }
-
-    QString goalSprite() const
-    {
-        return m_goalState;
-    }
-
-    QString currentSprite() const
-    {
-        return m_curState;
-    }
-
-signals:
-
-    void runningChanged(bool arg);
-    void interpolateChanged(bool arg);
-    void goalSpriteChanged(QString arg);
-    void currentSpriteChanged(QString arg);
-
-public slots:
-
-    void jumpTo(const QString &sprite);
-    void setGoalSprite(const QString &sprite);
-
-    void setRunning(bool arg)
-    {
-        if (m_running != arg) {
-            m_running = arg;
-            emit runningChanged(arg);
-        }
-    }
-
-    void setInterpolate(bool arg)
-    {
-        if (m_interpolate != arg) {
-            m_interpolate = arg;
-            emit interpolateChanged(arg);
-        }
-    }
-
-private slots:
-    void createEngine();
-protected:
-    void reset();
-    QSGNode *updatePaintNode(QSGNode *, UpdatePaintNodeData *);
-private:
-    void prepareNextFrame();
-    QSGGeometryNode* buildNode();
-    QSGGeometryNode *m_node;
-    QQuickSpriteImageMaterial *m_material;
-    QList<QQuickSprite*> m_sprites;
-    QQuickSpriteEngine* m_spriteEngine;
-    QTime m_timestamp;
-    int m_curFrame;
-    bool m_pleaseReset;
-    bool m_running;
-    bool m_interpolate;
-    QString m_goalState;
-    QString m_curState;
-    int m_curStateIdx;
-    QSizeF m_sheetSize;
-};
-
-QT_END_NAMESPACE
-
-QT_END_HEADER
-
-#endif // QQUICKSPRITEIMAGE_P_H
diff --git a/src/quick/items/qquickspritesequence.cpp b/src/quick/items/qquickspritesequence.cpp
new file mode 100644
index 0000000..a3a8a6e
--- /dev/null
+++ b/src/quick/items/qquickspritesequence.cpp
@@ -0,0 +1,482 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/
+**
+** This file is part of the Declarative module of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** GNU Lesser General Public License Usage
+** This file may be used under the terms of the GNU Lesser General Public
+** License version 2.1 as published by the Free Software Foundation and
+** appearing in the file LICENSE.LGPL included in the packaging of this
+** file. Please review the following information to ensure the GNU Lesser
+** General Public License version 2.1 requirements will be met:
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** In addition, as a special exception, Nokia gives you certain additional
+** rights. These rights are described in the Nokia Qt LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU General
+** Public License version 3.0 as published by the Free Software Foundation
+** and appearing in the file LICENSE.GPL included in the packaging of this
+** file. Please review the following information to ensure the GNU General
+** Public License version 3.0 requirements will be met:
+** http://www.gnu.org/copyleft/gpl.html.
+**
+** Other Usage
+** Alternatively, this file may be used in accordance with the terms and
+** conditions contained in a signed written agreement between you and Nokia.
+**
+**
+**
+**
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#include "qquickspritesequence_p.h"
+#include "qquicksprite_p.h"
+#include "qquickspriteengine_p.h"
+#include <QtQuick/private/qsgcontext_p.h>
+#include <private/qsgadaptationlayer_p.h>
+#include <QtQuick/qsgnode.h>
+#include <QtQuick/qsgengine.h>
+#include <QtQuick/qsgtexturematerial.h>
+#include <QtQuick/qsgtexture.h>
+#include <QtQuick/qquickcanvas.h>
+#include <QtDeclarative/qdeclarativeinfo.h>
+#include <QFile>
+#include <cmath>
+#include <qmath.h>
+#include <QDebug>
+
+QT_BEGIN_NAMESPACE
+
+static const char vertexShaderCode[] =
+    "attribute highp vec2 vTex;\n"
+    "uniform highp vec3 animData;// w,h(premultiplied of anim), interpolation progress\n"
+    "uniform highp vec4 animPos;//x,y, x,y (two frames for interpolation)\n"
+    "uniform highp vec2 size;//w,h of element\n"
+    "\n"
+    "uniform highp mat4 qt_Matrix;\n"
+    "\n"
+    "varying highp vec4 fTexS;\n"
+    "varying lowp float progress;\n"
+    "\n"
+    "\n"
+    "void main() {\n"
+    "    progress = animData.z;\n"
+    "    //Calculate frame location in texture\n"
+    "    fTexS.xy = animPos.xy + vTex.xy * animData.xy;\n"
+    "    //Next frame is also passed, for interpolation\n"
+    "    fTexS.zw = animPos.zw + vTex.xy * animData.xy;\n"
+    "\n"
+    "    gl_Position = qt_Matrix * vec4(size.x * vTex.x, size.y * vTex.y, 0, 1);\n"
+    "}\n";
+
+static const char fragmentShaderCode[] =
+    "uniform sampler2D texture;\n"
+    "uniform lowp float qt_Opacity;\n"
+    "\n"
+    "varying highp vec4 fTexS;\n"
+    "varying lowp float progress;\n"
+    "\n"
+    "void main() {\n"
+    "    gl_FragColor = mix(texture2D(texture, fTexS.xy), texture2D(texture, fTexS.zw), progress) * qt_Opacity;\n"
+    "}\n";
+
+class QQuickSpriteSequenceMaterial : public QSGMaterial
+{
+public:
+    QQuickSpriteSequenceMaterial();
+    ~QQuickSpriteSequenceMaterial();
+    virtual QSGMaterialType *type() const { static QSGMaterialType type; return &type; }
+    virtual QSGMaterialShader *createShader() const;
+    virtual int compare(const QSGMaterial *other) const
+    {
+        return this - static_cast<const QQuickSpriteSequenceMaterial *>(other);
+    }
+
+    QSGTexture *texture;
+
+    float animT;
+    float animX1;
+    float animY1;
+    float animX2;
+    float animY2;
+    float animW;
+    float animH;
+    float elementWidth;
+    float elementHeight;
+};
+
+QQuickSpriteSequenceMaterial::QQuickSpriteSequenceMaterial()
+    : animT(0.0f)
+    , animX1(0.0f)
+    , animY1(0.0f)
+    , animX2(0.0f)
+    , animY2(0.0f)
+    , animW(1.0f)
+    , animH(1.0f)
+    , elementWidth(1.0f)
+    , elementHeight(1.0f)
+{
+    setFlag(Blending, true);
+}
+
+QQuickSpriteSequenceMaterial::~QQuickSpriteSequenceMaterial()
+{
+    delete texture;
+}
+
+class SpriteSequenceMaterialData : public QSGMaterialShader
+{
+public:
+    SpriteSequenceMaterialData(const char * /* vertexFile */ = 0, const char * /* fragmentFile */ = 0)
+    {
+    }
+
+    void deactivate() {
+        QSGMaterialShader::deactivate();
+
+        for (int i=0; i<8; ++i) {
+            program()->setAttributeArray(i, GL_FLOAT, chunkOfBytes, 1, 0);
+        }
+    }
+
+    virtual void updateState(const RenderState &state, QSGMaterial *newEffect, QSGMaterial *)
+    {
+        QQuickSpriteSequenceMaterial *m = static_cast<QQuickSpriteSequenceMaterial *>(newEffect);
+        m->texture->bind();
+
+        program()->setUniformValue(m_opacity_id, state.opacity());
+        program()->setUniformValue(m_animData_id, m->animW, m->animH, m->animT);
+        program()->setUniformValue(m_animPos_id, m->animX1, m->animY1, m->animX2, m->animY2);
+        program()->setUniformValue(m_size_id, m->elementWidth, m->elementHeight);
+
+        if (state.isMatrixDirty())
+            program()->setUniformValue(m_matrix_id, state.combinedMatrix());
+    }
+
+    virtual void initialize() {
+        m_matrix_id = program()->uniformLocation("qt_Matrix");
+        m_opacity_id = program()->uniformLocation("qt_Opacity");
+        m_animData_id = program()->uniformLocation("animData");
+        m_animPos_id = program()->uniformLocation("animPos");
+        m_size_id = program()->uniformLocation("size");
+    }
+
+    virtual const char *vertexShader() const { return vertexShaderCode; }
+    virtual const char *fragmentShader() const { return fragmentShaderCode; }
+
+    virtual char const *const *attributeNames() const {
+        static const char *attr[] = {
+           "vTex",
+            0
+        };
+        return attr;
+    }
+
+    int m_matrix_id;
+    int m_opacity_id;
+    int m_animData_id;
+    int m_animPos_id;
+    int m_size_id;
+
+    static float chunkOfBytes[1024];
+};
+
+float SpriteSequenceMaterialData::chunkOfBytes[1024];
+
+QSGMaterialShader *QQuickSpriteSequenceMaterial::createShader() const
+{
+    return new SpriteSequenceMaterialData;
+}
+
+struct SpriteVertex {
+    float tx;
+    float ty;
+};
+
+struct SpriteVertices {
+    SpriteVertex v1;
+    SpriteVertex v2;
+    SpriteVertex v3;
+    SpriteVertex v4;
+};
+
+/*!
+    \qmlclass SpriteSequence QQuickSpriteSequence
+    \inqmlmodule QtQuick 2
+    \inherits Item
+    \brief The SpriteSequence element draws a sprite animation
+
+*/
+/*!
+    \qmlproperty bool QtQuick2::SpriteSequence::running
+
+    Whether the sprite is animating or not.
+
+    Default is true
+*/
+/*!
+    \qmlproperty bool QtQuick2::SpriteSequence::interpolate
+
+    If true, interpolation will occur between sprite frames to make the
+    animation appear smoother.
+
+    Default is true.
+*/
+/*!
+    \qmlproperty string QtQuick2::SpriteSequence::goalSprite
+
+    The name of the Sprite which is currently animating.
+*/
+/*!
+    \qmlproperty string QtQuick2::SpriteSequence::goalSprite
+
+    The name of the Sprite which the animation should move to.
+
+    Sprite states have defined durations and transitions between them, setting goalState
+    will cause it to disregard any path weightings (including 0) and head down the path
+    which will reach the goalState quickest (fewest animations). It will pass through
+    intermediate states on that path, and animate them for their duration.
+
+    If it is possible to return to the goalState from the starting point of the goalState
+    it will continue to do so until goalState is set to "" or an unreachable state.
+*/
+/*! \qmlmethod void QtQuick2::SpriteSequence::jumpTo(string sprite)
+
+    This function causes the sprite to jump to the specified state immediately, intermediate
+    states are not played.
+*/
+/*!
+    \qmlproperty list<Sprite> QtQuick2::SpriteSequence::sprites
+
+    The sprite or sprites to draw. Sprites will be scaled to the size of this element.
+*/
+
+//TODO: Implicitly size element to size of first sprite?
+QQuickSpriteSequence::QQuickSpriteSequence(QQuickItem *parent) :
+    QQuickItem(parent)
+    , m_node(0)
+    , m_material(0)
+    , m_spriteEngine(0)
+    , m_curFrame(0)
+    , m_pleaseReset(false)
+    , m_running(true)
+    , m_interpolate(true)
+    , m_curStateIdx(0)
+{
+    setFlag(ItemHasContents);
+    connect(this, SIGNAL(runningChanged(bool)),
+            this, SLOT(update()));
+}
+
+void QQuickSpriteSequence::jumpTo(const QString &sprite)
+{
+    if (!m_spriteEngine)
+        return;
+    m_spriteEngine->setGoal(m_spriteEngine->stateIndex(sprite), 0, true);
+}
+
+void QQuickSpriteSequence::setGoalSprite(const QString &sprite)
+{
+    if (m_goalState != sprite){
+        m_goalState = sprite;
+        emit goalSpriteChanged(sprite);
+        m_spriteEngine->setGoal(m_spriteEngine->stateIndex(sprite));
+    }
+}
+
+QDeclarativeListProperty<QQuickSprite> QQuickSpriteSequence::sprites()
+{
+    return QDeclarativeListProperty<QQuickSprite>(this, &m_sprites, spriteAppend, spriteCount, spriteAt, spriteClear);
+}
+
+void QQuickSpriteSequence::createEngine()
+{
+    //TODO: delay until component complete
+    if (m_spriteEngine)
+        delete m_spriteEngine;
+    if (m_sprites.count())
+        m_spriteEngine = new QQuickSpriteEngine(m_sprites, this);
+    else
+        m_spriteEngine = 0;
+    reset();
+}
+
+static QSGGeometry::Attribute SpriteSequence_Attributes[] = {
+    QSGGeometry::Attribute::create(0, 2, GL_FLOAT),         // tex
+};
+
+static QSGGeometry::AttributeSet SpriteSequence_AttributeSet =
+{
+    1, // Attribute Count
+    2 * sizeof(float),
+    SpriteSequence_Attributes
+};
+
+QSGGeometryNode* QQuickSpriteSequence::buildNode()
+{
+    if (!m_spriteEngine) {
+        qmlInfo(this) << "No sprite engine...";
+        return 0;
+    } else if (m_spriteEngine->status() == QDeclarativePixmap::Null) {
+        m_spriteEngine->startAssemblingImage();
+        update();//Schedule another update, where we will check again
+        return 0;
+    } else if (m_spriteEngine->status() == QDeclarativePixmap::Loading) {
+        update();//Schedule another update, where we will check again
+        return 0;
+    }
+
+    m_material = new QQuickSpriteSequenceMaterial();
+
+    QImage image = m_spriteEngine->assembledImage();
+    if (image.isNull())
+        return 0;
+    m_sheetSize = QSizeF(image.size());
+    m_material->texture = canvas()->createTextureFromImage(image);
+    m_material->texture->setFiltering(QSGTexture::Linear);
+    m_spriteEngine->start(0);
+    m_material->animT = 0;
+    m_material->animX1 = m_spriteEngine->spriteX() / m_sheetSize.width();
+    m_material->animY1 = m_spriteEngine->spriteY() / m_sheetSize.height();
+    m_material->animX2 = m_material->animX1;
+    m_material->animY2 = m_material->animY1;
+    m_material->animW = m_spriteEngine->spriteWidth() / m_sheetSize.width();
+    m_material->animH = m_spriteEngine->spriteHeight() / m_sheetSize.height();
+    m_material->elementWidth = width();
+    m_material->elementHeight = height();
+    m_curState = m_spriteEngine->state(m_spriteEngine->curState())->name();
+    emit currentSpriteChanged(m_curState);
+
+    int vCount = 4;
+    int iCount = 6;
+    QSGGeometry *g = new QSGGeometry(SpriteSequence_AttributeSet, vCount, iCount);
+    g->setDrawingMode(GL_TRIANGLES);
+
+    SpriteVertices *p = (SpriteVertices *) g->vertexData();
+
+    p->v1.tx = 0;
+    p->v1.ty = 0;
+
+    p->v2.tx = 1.0;
+    p->v2.ty = 0;
+
+    p->v3.tx = 0;
+    p->v3.ty = 1.0;
+
+    p->v4.tx = 1.0;
+    p->v4.ty = 1.0;
+
+    quint16 *indices = g->indexDataAsUShort();
+    indices[0] = 0;
+    indices[1] = 1;
+    indices[2] = 2;
+    indices[3] = 1;
+    indices[4] = 3;
+    indices[5] = 2;
+
+
+    m_timestamp.start();
+    m_node = new QSGGeometryNode();
+    m_node->setGeometry(g);
+    m_node->setMaterial(m_material);
+    m_node->setFlag(QSGGeometryNode::OwnsMaterial);
+    return m_node;
+}
+
+void QQuickSpriteSequence::reset()
+{
+    m_pleaseReset = true;
+}
+
+QSGNode *QQuickSpriteSequence::updatePaintNode(QSGNode *, UpdatePaintNodeData *)
+{
+    if (m_pleaseReset) {
+        delete m_node;
+
+        m_node = 0;
+        m_material = 0;
+        m_pleaseReset = false;
+    }
+
+    prepareNextFrame();
+
+    if (m_running) {
+        update();
+        if (m_node)
+            m_node->markDirty(QSGNode::DirtyMaterial);
+    }
+
+    return m_node;
+}
+
+void QQuickSpriteSequence::prepareNextFrame()
+{
+    if (m_node == 0)
+        m_node = buildNode();
+    if (m_node == 0) //error creating node
+        return;
+
+    uint timeInt = m_timestamp.elapsed();
+    qreal time =  timeInt / 1000.;
+    m_material->elementHeight = height();
+    m_material->elementWidth = width();
+
+    //Advance State
+    m_spriteEngine->updateSprites(timeInt);
+    if (m_curStateIdx != m_spriteEngine->curState()) {
+        m_curStateIdx = m_spriteEngine->curState();
+        m_curState = m_spriteEngine->state(m_spriteEngine->curState())->name();
+        emit currentSpriteChanged(m_curState);
+        m_curFrame= -1;
+    }
+
+    //Advance Sprite
+    qreal animT = m_spriteEngine->spriteStart()/1000.0;
+    qreal frameCount = m_spriteEngine->spriteFrames();
+    qreal frameDuration = m_spriteEngine->spriteDuration()/frameCount;
+    double frameAt;
+    qreal progress;
+    if (frameDuration > 0) {
+        qreal frame = (time - animT)/(frameDuration / 1000.0);
+        frame = qBound(qreal(0.0), frame, frameCount - qreal(1.0));//Stop at count-1 frames until we have between anim interpolation
+        progress = modf(frame,&frameAt);
+    } else {
+        m_curFrame++;
+        if (m_curFrame >= frameCount){
+            m_curFrame = 0;
+            m_spriteEngine->advance();
+        }
+        frameAt = m_curFrame;
+        progress = 0;
+    }
+    if (m_spriteEngine->sprite()->reverse())
+        frameAt = (m_spriteEngine->spriteFrames() - 1) - frameAt;
+    qreal y = m_spriteEngine->spriteY() / m_sheetSize.height();
+    qreal w = m_spriteEngine->spriteWidth() / m_sheetSize.width();
+    qreal h = m_spriteEngine->spriteHeight() / m_sheetSize.height();
+    qreal x1 = m_spriteEngine->spriteX() / m_sheetSize.width();
+    x1 += frameAt * w;
+    qreal x2 = x1;
+    if (frameAt < (frameCount-1))
+        x2 += w;
+
+    m_material->animX1 = x1;
+    m_material->animY1 = y;
+    m_material->animX2 = x2;
+    m_material->animY2 = y;
+    m_material->animW = w;
+    m_material->animH = h;
+    m_material->animT = m_interpolate ? progress : 0.0;
+}
+
+QT_END_NAMESPACE
diff --git a/src/quick/items/qquickspritesequence_p.h b/src/quick/items/qquickspritesequence_p.h
new file mode 100644
index 0000000..8a95594
--- /dev/null
+++ b/src/quick/items/qquickspritesequence_p.h
@@ -0,0 +1,148 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/
+**
+** This file is part of the Declarative module of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** GNU Lesser General Public License Usage
+** This file may be used under the terms of the GNU Lesser General Public
+** License version 2.1 as published by the Free Software Foundation and
+** appearing in the file LICENSE.LGPL included in the packaging of this
+** file. Please review the following information to ensure the GNU Lesser
+** General Public License version 2.1 requirements will be met:
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** In addition, as a special exception, Nokia gives you certain additional
+** rights. These rights are described in the Nokia Qt LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU General
+** Public License version 3.0 as published by the Free Software Foundation
+** and appearing in the file LICENSE.GPL included in the packaging of this
+** file. Please review the following information to ensure the GNU General
+** Public License version 3.0 requirements will be met:
+** http://www.gnu.org/copyleft/gpl.html.
+**
+** Other Usage
+** Alternatively, this file may be used in accordance with the terms and
+** conditions contained in a signed written agreement between you and Nokia.
+**
+**
+**
+**
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#ifndef QQUICKSPRITESEQUENCE_P_H
+#define QQUICKSPRITESEQUENCE_P_H
+
+#include <QtQuick/QQuickItem>
+#include <QTime>
+
+QT_BEGIN_HEADER
+
+QT_BEGIN_NAMESPACE
+
+class QSGContext;
+class QQuickSprite;
+class QQuickSpriteEngine;
+class QSGGeometryNode;
+class QQuickSpriteSequenceMaterial;
+class Q_AUTOTEST_EXPORT QQuickSpriteSequence : public QQuickItem
+{
+    Q_OBJECT
+    Q_PROPERTY(bool running READ running WRITE setRunning NOTIFY runningChanged)
+    Q_PROPERTY(bool interpolate READ interpolate WRITE setInterpolate NOTIFY interpolateChanged)
+    Q_PROPERTY(QString goalSprite READ goalSprite WRITE setGoalSprite NOTIFY goalSpriteChanged)
+    Q_PROPERTY(QString currentSprite READ currentSprite NOTIFY currentSpriteChanged)
+    //###try to share similar spriteEngines for less overhead?
+    Q_PROPERTY(QDeclarativeListProperty<QQuickSprite> sprites READ sprites)
+    Q_CLASSINFO("DefaultProperty", "sprites")
+
+public:
+    explicit QQuickSpriteSequence(QQuickItem *parent = 0);
+
+    QDeclarativeListProperty<QQuickSprite> sprites();
+
+    bool running() const
+    {
+        return m_running;
+    }
+
+    bool interpolate() const
+    {
+        return m_interpolate;
+    }
+
+    QString goalSprite() const
+    {
+        return m_goalState;
+    }
+
+    QString currentSprite() const
+    {
+        return m_curState;
+    }
+
+signals:
+
+    void runningChanged(bool arg);
+    void interpolateChanged(bool arg);
+    void goalSpriteChanged(QString arg);
+    void currentSpriteChanged(QString arg);
+
+public slots:
+
+    void jumpTo(const QString &sprite);
+    void setGoalSprite(const QString &sprite);
+
+    void setRunning(bool arg)
+    {
+        if (m_running != arg) {
+            m_running = arg;
+            emit runningChanged(arg);
+        }
+    }
+
+    void setInterpolate(bool arg)
+    {
+        if (m_interpolate != arg) {
+            m_interpolate = arg;
+            emit interpolateChanged(arg);
+        }
+    }
+
+private slots:
+    void createEngine();
+protected:
+    void reset();
+    QSGNode *updatePaintNode(QSGNode *, UpdatePaintNodeData *);
+private:
+    void prepareNextFrame();
+    QSGGeometryNode* buildNode();
+    QSGGeometryNode *m_node;
+    QQuickSpriteSequenceMaterial *m_material;
+    QList<QQuickSprite*> m_sprites;
+    QQuickSpriteEngine* m_spriteEngine;
+    QTime m_timestamp;
+    int m_curFrame;
+    bool m_pleaseReset;
+    bool m_running;
+    bool m_interpolate;
+    QString m_goalState;
+    QString m_curState;
+    int m_curStateIdx;
+    QSizeF m_sheetSize;
+};
+
+QT_END_NAMESPACE
+
+QT_END_HEADER
+
+#endif // QQUICKSPRITESEQUENCE_P_H
diff --git a/tests/auto/qtquick2/qquickanimatedsprite/data/basic.qml b/tests/auto/qtquick2/qquickanimatedsprite/data/basic.qml
index f219e5f..2dd2063 100644
--- a/tests/auto/qtquick2/qquickanimatedsprite/data/basic.qml
+++ b/tests/auto/qtquick2/qquickanimatedsprite/data/basic.qml
@@ -50,7 +50,7 @@ Rectangle {
         objectName: "sprite"
         loops: 3
         source: "squarefacesprite.png"
-        frames: 6
+        frameCount: 6
         frameDuration: 120
         width: 160
         height: 160
diff --git a/tests/auto/qtquick2/qquickspriteimage/data/advance.qml b/tests/auto/qtquick2/qquickspriteimage/data/advance.qml
deleted file mode 100644
index 46a49ca..0000000
--- a/tests/auto/qtquick2/qquickspriteimage/data/advance.qml
+++ /dev/null
@@ -1,66 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/
-**
-** This file is part of the test suite of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:LGPL$
-** GNU Lesser General Public License Usage
-** This file may be used under the terms of the GNU Lesser General Public
-** License version 2.1 as published by the Free Software Foundation and
-** appearing in the file LICENSE.LGPL included in the packaging of this
-** file. Please review the following information to ensure the GNU Lesser
-** General Public License version 2.1 requirements will be met:
-** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
-**
-** In addition, as a special exception, Nokia gives you certain additional
-** rights. These rights are described in the Nokia Qt LGPL Exception
-** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
-**
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU General
-** Public License version 3.0 as published by the Free Software Foundation
-** and appearing in the file LICENSE.GPL included in the packaging of this
-** file. Please review the following information to ensure the GNU General
-** Public License version 3.0 requirements will be met:
-** http://www.gnu.org/copyleft/gpl.html.
-**
-** Other Usage
-** Alternatively, this file may be used in accordance with the terms and
-** conditions contained in a signed written agreement between you and Nokia.
-**
-**
-**
-**
-**
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-import QtQuick 2.0
-
-Rectangle {
-    color: "black"
-    width: 320
-    height: 320
-
-    SpriteImage {
-        objectName: "sprite"
-        sprites: [Sprite {
-            name: "firstState"
-            source: "squarefacesprite.png"
-            frames: 3
-            frameSync: true
-            to: {"secondState":1}
-        }, Sprite {
-            name: "secondState"
-            source: "squarefacesprite.png"
-            frames: 6
-            frameSync: true
-        } ]
-        width: 160
-        height: 160
-    }
-}
diff --git a/tests/auto/qtquick2/qquickspriteimage/data/basic.qml b/tests/auto/qtquick2/qquickspriteimage/data/basic.qml
deleted file mode 100644
index 2f2b1c9..0000000
--- a/tests/auto/qtquick2/qquickspriteimage/data/basic.qml
+++ /dev/null
@@ -1,60 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/
-**
-** This file is part of the test suite of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:LGPL$
-** GNU Lesser General Public License Usage
-** This file may be used under the terms of the GNU Lesser General Public
-** License version 2.1 as published by the Free Software Foundation and
-** appearing in the file LICENSE.LGPL included in the packaging of this
-** file. Please review the following information to ensure the GNU Lesser
-** General Public License version 2.1 requirements will be met:
-** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
-**
-** In addition, as a special exception, Nokia gives you certain additional
-** rights. These rights are described in the Nokia Qt LGPL Exception
-** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
-**
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU General
-** Public License version 3.0 as published by the Free Software Foundation
-** and appearing in the file LICENSE.GPL included in the packaging of this
-** file. Please review the following information to ensure the GNU General
-** Public License version 3.0 requirements will be met:
-** http://www.gnu.org/copyleft/gpl.html.
-**
-** Other Usage
-** Alternatively, this file may be used in accordance with the terms and
-** conditions contained in a signed written agreement between you and Nokia.
-**
-**
-**
-**
-**
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-import QtQuick 2.0
-
-Rectangle {
-    color: "black"
-    width: 320
-    height: 320
-
-    SpriteImage {
-        objectName: "sprite"
-        sprites: Sprite {
-            name: "happy"
-            source: "squarefacesprite.png"
-            frames: 6
-            frameDuration: 120
-        }
-        width: 160
-        height: 160
-    }
-}
diff --git a/tests/auto/qtquick2/qquickspriteimage/data/squarefacesprite.png b/tests/auto/qtquick2/qquickspriteimage/data/squarefacesprite.png
deleted file mode 100644
index f9a5d5f..0000000
Binary files a/tests/auto/qtquick2/qquickspriteimage/data/squarefacesprite.png and /dev/null differ
diff --git a/tests/auto/qtquick2/qquickspriteimage/qquickspriteimage.pro b/tests/auto/qtquick2/qquickspriteimage/qquickspriteimage.pro
deleted file mode 100644
index 0d63007..0000000
--- a/tests/auto/qtquick2/qquickspriteimage/qquickspriteimage.pro
+++ /dev/null
@@ -1,15 +0,0 @@
-CONFIG += testcase
-TARGET = tst_qquickspriteimage
-SOURCES += tst_qquickspriteimage.cpp
-
-include (../../shared/util.pri)
-
-macx:CONFIG -= app_bundle
-
-testDataFiles.files = data
-testDataFiles.path = .
-DEPLOYMENT += testDataFiles
-
-CONFIG += parallel_test
-
-QT += core-private gui-private declarative-private quick-private network testlib
diff --git a/tests/auto/qtquick2/qquickspriteimage/tst_qquickspriteimage.cpp b/tests/auto/qtquick2/qquickspriteimage/tst_qquickspriteimage.cpp
deleted file mode 100644
index 3745352..0000000
--- a/tests/auto/qtquick2/qquickspriteimage/tst_qquickspriteimage.cpp
+++ /dev/null
@@ -1,98 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/
-**
-** This file is part of the test suite of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:LGPL$
-** GNU Lesser General Public License Usage
-** This file may be used under the terms of the GNU Lesser General Public
-** License version 2.1 as published by the Free Software Foundation and
-** appearing in the file LICENSE.LGPL included in the packaging of this
-** file. Please review the following information to ensure the GNU Lesser
-** General Public License version 2.1 requirements will be met:
-** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
-**
-** In addition, as a special exception, Nokia gives you certain additional
-** rights. These rights are described in the Nokia Qt LGPL Exception
-** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
-**
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU General
-** Public License version 3.0 as published by the Free Software Foundation
-** and appearing in the file LICENSE.GPL included in the packaging of this
-** file. Please review the following information to ensure the GNU General
-** Public License version 3.0 requirements will be met:
-** http://www.gnu.org/copyleft/gpl.html.
-**
-** Other Usage
-** Alternatively, this file may be used in accordance with the terms and
-** conditions contained in a signed written agreement between you and Nokia.
-**
-**
-**
-**
-**
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-#include <QtTest/QtTest>
-#include "../../shared/util.h"
-#include <QtQuick/qquickview.h>
-#include <private/qquickspriteimage_p.h>
-
-class tst_qquickspriteimage : public QDeclarativeDataTest
-{
-    Q_OBJECT
-public:
-    tst_qquickspriteimage(){}
-
-private slots:
-    void test_properties();
-    void test_framerateAdvance();//Separate codepath for QQuickSpriteEngine
-};
-
-void tst_qquickspriteimage::test_properties()
-{
-    QQuickView *canvas = new QQuickView(0);
-
-    canvas->setSource(testFileUrl("basic.qml"));
-    canvas->show();
-    QTest::qWaitForWindowShown(canvas);
-
-    QVERIFY(canvas->rootObject());
-    QQuickSpriteImage* sprite = canvas->rootObject()->findChild<QQuickSpriteImage*>("sprite");
-    QVERIFY(sprite);
-
-    QVERIFY(sprite->running());
-    QVERIFY(sprite->interpolate());
-
-    sprite->setRunning(false);
-    QVERIFY(!sprite->running());
-    sprite->setInterpolate(false);
-    QVERIFY(!sprite->interpolate());
-
-    delete canvas;
-}
-
-void tst_qquickspriteimage::test_framerateAdvance()
-{
-    QQuickView *canvas = new QQuickView(0);
-
-    canvas->setSource(testFileUrl("advance.qml"));
-    canvas->show();
-    QTest::qWaitForWindowShown(canvas);
-
-    QVERIFY(canvas->rootObject());
-    QQuickSpriteImage* sprite = canvas->rootObject()->findChild<QQuickSpriteImage*>("sprite");
-    QVERIFY(sprite);
-
-    QTRY_COMPARE(sprite->currentSprite(), QLatin1String("secondState"));
-    delete canvas;
-}
-
-QTEST_MAIN(tst_qquickspriteimage)
-
-#include "tst_qquickspriteimage.moc"
diff --git a/tests/auto/qtquick2/qquickspritesequence/data/advance.qml b/tests/auto/qtquick2/qquickspritesequence/data/advance.qml
new file mode 100644
index 0000000..5866dcb
--- /dev/null
+++ b/tests/auto/qtquick2/qquickspritesequence/data/advance.qml
@@ -0,0 +1,66 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/
+**
+** This file is part of the test suite of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** GNU Lesser General Public License Usage
+** This file may be used under the terms of the GNU Lesser General Public
+** License version 2.1 as published by the Free Software Foundation and
+** appearing in the file LICENSE.LGPL included in the packaging of this
+** file. Please review the following information to ensure the GNU Lesser
+** General Public License version 2.1 requirements will be met:
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** In addition, as a special exception, Nokia gives you certain additional
+** rights. These rights are described in the Nokia Qt LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU General
+** Public License version 3.0 as published by the Free Software Foundation
+** and appearing in the file LICENSE.GPL included in the packaging of this
+** file. Please review the following information to ensure the GNU General
+** Public License version 3.0 requirements will be met:
+** http://www.gnu.org/copyleft/gpl.html.
+**
+** Other Usage
+** Alternatively, this file may be used in accordance with the terms and
+** conditions contained in a signed written agreement between you and Nokia.
+**
+**
+**
+**
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+import QtQuick 2.0
+
+Rectangle {
+    color: "black"
+    width: 320
+    height: 320
+
+    SpriteSequence {
+        objectName: "sprite"
+        sprites: [Sprite {
+            name: "firstState"
+            source: "squarefacesprite.png"
+            frameCount: 3
+            frameSync: true
+            to: {"secondState":1}
+        }, Sprite {
+            name: "secondState"
+            source: "squarefacesprite.png"
+            frameCount: 6
+            frameSync: true
+        } ]
+        width: 160
+        height: 160
+    }
+}
diff --git a/tests/auto/qtquick2/qquickspritesequence/data/basic.qml b/tests/auto/qtquick2/qquickspritesequence/data/basic.qml
new file mode 100644
index 0000000..5eb7475
--- /dev/null
+++ b/tests/auto/qtquick2/qquickspritesequence/data/basic.qml
@@ -0,0 +1,60 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/
+**
+** This file is part of the test suite of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** GNU Lesser General Public License Usage
+** This file may be used under the terms of the GNU Lesser General Public
+** License version 2.1 as published by the Free Software Foundation and
+** appearing in the file LICENSE.LGPL included in the packaging of this
+** file. Please review the following information to ensure the GNU Lesser
+** General Public License version 2.1 requirements will be met:
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** In addition, as a special exception, Nokia gives you certain additional
+** rights. These rights are described in the Nokia Qt LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU General
+** Public License version 3.0 as published by the Free Software Foundation
+** and appearing in the file LICENSE.GPL included in the packaging of this
+** file. Please review the following information to ensure the GNU General
+** Public License version 3.0 requirements will be met:
+** http://www.gnu.org/copyleft/gpl.html.
+**
+** Other Usage
+** Alternatively, this file may be used in accordance with the terms and
+** conditions contained in a signed written agreement between you and Nokia.
+**
+**
+**
+**
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+import QtQuick 2.0
+
+Rectangle {
+    color: "black"
+    width: 320
+    height: 320
+
+    SpriteSequence {
+        objectName: "sprite"
+        sprites: Sprite {
+            name: "happy"
+            source: "squarefacesprite.png"
+            frameCount: 6
+            frameDuration: 120
+        }
+        width: 160
+        height: 160
+    }
+}
diff --git a/tests/auto/qtquick2/qquickspritesequence/data/squarefacesprite.png b/tests/auto/qtquick2/qquickspritesequence/data/squarefacesprite.png
new file mode 100644
index 0000000..f9a5d5f
Binary files /dev/null and b/tests/auto/qtquick2/qquickspritesequence/data/squarefacesprite.png differ
diff --git a/tests/auto/qtquick2/qquickspritesequence/qquickspritesequence.pro b/tests/auto/qtquick2/qquickspritesequence/qquickspritesequence.pro
new file mode 100644
index 0000000..16c20ef
--- /dev/null
+++ b/tests/auto/qtquick2/qquickspritesequence/qquickspritesequence.pro
@@ -0,0 +1,15 @@
+CONFIG += testcase
+TARGET = tst_qquickspritesequence
+SOURCES += tst_qquickspritesequence.cpp
+
+include (../../shared/util.pri)
+
+macx:CONFIG -= app_bundle
+
+testDataFiles.files = data
+testDataFiles.path = .
+DEPLOYMENT += testDataFiles
+
+CONFIG += parallel_test
+
+QT += core-private gui-private declarative-private quick-private network testlib
diff --git a/tests/auto/qtquick2/qquickspritesequence/tst_qquickspritesequence.cpp b/tests/auto/qtquick2/qquickspritesequence/tst_qquickspritesequence.cpp
new file mode 100644
index 0000000..848d6a3
--- /dev/null
+++ b/tests/auto/qtquick2/qquickspritesequence/tst_qquickspritesequence.cpp
@@ -0,0 +1,98 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/
+**
+** This file is part of the test suite of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** GNU Lesser General Public License Usage
+** This file may be used under the terms of the GNU Lesser General Public
+** License version 2.1 as published by the Free Software Foundation and
+** appearing in the file LICENSE.LGPL included in the packaging of this
+** file. Please review the following information to ensure the GNU Lesser
+** General Public License version 2.1 requirements will be met:
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** In addition, as a special exception, Nokia gives you certain additional
+** rights. These rights are described in the Nokia Qt LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU General
+** Public License version 3.0 as published by the Free Software Foundation
+** and appearing in the file LICENSE.GPL included in the packaging of this
+** file. Please review the following information to ensure the GNU General
+** Public License version 3.0 requirements will be met:
+** http://www.gnu.org/copyleft/gpl.html.
+**
+** Other Usage
+** Alternatively, this file may be used in accordance with the terms and
+** conditions contained in a signed written agreement between you and Nokia.
+**
+**
+**
+**
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+#include <QtTest/QtTest>
+#include "../../shared/util.h"
+#include <QtQuick/qquickview.h>
+#include <private/qquickspritesequence_p.h>
+
+class tst_qquickspritesequence : public QDeclarativeDataTest
+{
+    Q_OBJECT
+public:
+    tst_qquickspritesequence(){}
+
+private slots:
+    void test_properties();
+    void test_framerateAdvance();//Separate codepath for QQuickSpriteEngine
+};
+
+void tst_qquickspritesequence::test_properties()
+{
+    QQuickView *canvas = new QQuickView(0);
+
+    canvas->setSource(testFileUrl("basic.qml"));
+    canvas->show();
+    QTest::qWaitForWindowShown(canvas);
+
+    QVERIFY(canvas->rootObject());
+    QQuickSpriteSequence* sprite = canvas->rootObject()->findChild<QQuickSpriteSequence*>("sprite");
+    QVERIFY(sprite);
+
+    QVERIFY(sprite->running());
+    QVERIFY(sprite->interpolate());
+
+    sprite->setRunning(false);
+    QVERIFY(!sprite->running());
+    sprite->setInterpolate(false);
+    QVERIFY(!sprite->interpolate());
+
+    delete canvas;
+}
+
+void tst_qquickspritesequence::test_framerateAdvance()
+{
+    QQuickView *canvas = new QQuickView(0);
+
+    canvas->setSource(testFileUrl("advance.qml"));
+    canvas->show();
+    QTest::qWaitForWindowShown(canvas);
+
+    QVERIFY(canvas->rootObject());
+    QQuickSpriteSequence* sprite = canvas->rootObject()->findChild<QQuickSpriteSequence*>("sprite");
+    QVERIFY(sprite);
+
+    QTRY_COMPARE(sprite->currentSprite(), QLatin1String("secondState"));
+    delete canvas;
+}
+
+QTEST_MAIN(tst_qquickspritesequence)
+
+#include "tst_qquickspritesequence.moc"
diff --git a/tests/auto/qtquick2/qtquick2.pro b/tests/auto/qtquick2/qtquick2.pro
index 60e3027..9034cb4 100644
--- a/tests/auto/qtquick2/qtquick2.pro
+++ b/tests/auto/qtquick2/qtquick2.pro
@@ -53,7 +53,7 @@ QUICKTESTS =  \
     qquickpositioners \
     qquickrepeater \
     qquickshadereffect \
-    qquickspriteimage \
+    qquickspritesequence \
     qquicktext \
     qquicktextedit \
     qquicktextinput \