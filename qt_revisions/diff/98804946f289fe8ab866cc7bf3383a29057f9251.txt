diff --git a/src/corelib/animation/qvariantanimation.cpp b/src/corelib/animation/qvariantanimation.cpp
index 59b2d6a..f16d685 100644
--- a/src/corelib/animation/qvariantanimation.cpp
+++ b/src/corelib/animation/qvariantanimation.cpp
@@ -422,7 +422,8 @@ static QBasicMutex registeredInterpolatorsMutex;
 
 */
 
-/*! \internal
+/*!
+ * \internal
  * Registers a custom interpolator \a func for the specific \a interpolationType.
  * The interpolator has to be registered before the animation is constructed.
  * To unregister (and use the default interpolator) set \a func to 0.
diff --git a/src/corelib/codecs/qjiscodec.cpp b/src/corelib/codecs/qjiscodec.cpp
index 8340b5c..1bdf871 100644
--- a/src/corelib/codecs/qjiscodec.cpp
+++ b/src/corelib/codecs/qjiscodec.cpp
@@ -91,13 +91,17 @@ static const char * const Esc_SEQ[] = { Esc_Ascii,
                                         Esc_JISX0208_1983,
                                         Esc_JISX0212 };
 
-/*! \internal */
+/*!
+    \internal
+*/
 QJisCodec::QJisCodec() : conv(QJpUnicodeConv::newConverter(QJpUnicodeConv::Default))
 {
 }
 
 
-/*! \internal */
+/*!
+    \internal
+*/
 QJisCodec::~QJisCodec()
 {
     delete (QJpUnicodeConv*)conv;
@@ -340,13 +344,17 @@ QString QJisCodec::convertToUnicode(const char* chars, int len, ConverterState *
 
 
 
-/*! \internal */
+/*!
+    \internal
+*/
 int QJisCodec::_mibEnum()
 {
     return 39;
 }
 
-/*! \internal */
+/*!
+    \internal
+*/
 QByteArray QJisCodec::_name()
 {
     return "ISO-2022-JP";
diff --git a/src/corelib/codecs/qjpunicode.cpp b/src/corelib/codecs/qjpunicode.cpp
index 284db89..19014d8 100644
--- a/src/corelib/codecs/qjpunicode.cpp
+++ b/src/corelib/codecs/qjpunicode.cpp
@@ -101,7 +101,9 @@ static uint unicode11ToJisx0212(uint h, uint l);
 */
 
 
-/*! \internal */
+/*!
+    \internal
+*/
 uint QJpUnicodeConv::asciiToUnicode(uint h, uint l) const
 {
     if ((h == 0) && (l < 0x80)) {
@@ -110,7 +112,9 @@ uint QJpUnicodeConv::asciiToUnicode(uint h, uint l) const
     return 0x0000;
 }
 
-/*! \internal */
+/*!
+    \internal
+*/
 uint QJpUnicodeConv::jisx0201ToUnicode(uint h, uint l) const
 {
     if (h == 0) {
@@ -123,7 +127,9 @@ uint QJpUnicodeConv::jisx0201ToUnicode(uint h, uint l) const
     return 0x0000;
 }
 
-/*! \internal */
+/*!
+    \internal
+*/
 uint QJpUnicodeConv::jisx0201LatinToUnicode(uint h, uint l) const
 {
     if ((h == 0) && IsLatin(l)) {
@@ -132,7 +138,9 @@ uint QJpUnicodeConv::jisx0201LatinToUnicode(uint h, uint l) const
     return 0x0000;
 }
 
-/*! \internal */
+/*!
+    \internal
+*/
 uint QJpUnicodeConv::jisx0201KanaToUnicode(uint h, uint l) const
 {
     if ((h == 0) && IsKana(l)) {
@@ -141,7 +149,9 @@ uint QJpUnicodeConv::jisx0201KanaToUnicode(uint h, uint l) const
     return 0x0000;
 }
 
-/*! \internal */
+/*!
+    \internal
+*/
 uint QJpUnicodeConv::jisx0208ToUnicode(uint h, uint l) const
 {
     if (rule & UDC){
@@ -159,7 +169,9 @@ uint QJpUnicodeConv::jisx0208ToUnicode(uint h, uint l) const
     return jisx0208ToUnicode11(h, l);
 }
 
-/*! \internal */
+/*!
+    \internal
+*/
 uint QJpUnicodeConv::jisx0212ToUnicode(uint h, uint l) const
 {
     if (rule & UDC){
@@ -178,7 +190,9 @@ uint QJpUnicodeConv::jisx0212ToUnicode(uint h, uint l) const
     return jisx0212ToUnicode11(h, l);
 }
 
-/*! \internal */
+/*!
+    \internal
+*/
 uint QJpUnicodeConv::unicodeToAscii(uint h, uint l) const
 {
     if ((h == 0) && (l < 0x80)) {
@@ -187,7 +201,9 @@ uint QJpUnicodeConv::unicodeToAscii(uint h, uint l) const
     return 0x0000;
 }
 
-/*! \internal */
+/*!
+    \internal
+*/
 uint QJpUnicodeConv::unicodeToJisx0201(uint h, uint l) const
 {
     uint jis;
@@ -199,7 +215,9 @@ uint QJpUnicodeConv::unicodeToJisx0201(uint h, uint l) const
     return 0x0000;
 }
 
-/*! \internal */
+/*!
+    \internal
+*/
 uint QJpUnicodeConv::unicodeToJisx0201Latin(uint h, uint l) const
 {
     uint jis = unicode11ToJisx0201(h, l);
@@ -209,7 +227,9 @@ uint QJpUnicodeConv::unicodeToJisx0201Latin(uint h, uint l) const
     return 0x0000;
 }
 
-/*! \internal */
+/*!
+    \internal
+*/
 uint QJpUnicodeConv::unicodeToJisx0201Kana(uint h, uint l) const
 {
     uint jis = unicode11ToJisx0201(h, l);
@@ -219,7 +239,9 @@ uint QJpUnicodeConv::unicodeToJisx0201Kana(uint h, uint l) const
     return 0x0000;
 }
 
-/*! \internal */
+/*!
+    \internal
+*/
 uint QJpUnicodeConv::unicodeToJisx0208(uint h, uint l) const
 {
     if (rule & UDC){
@@ -240,7 +262,9 @@ uint QJpUnicodeConv::unicodeToJisx0208(uint h, uint l) const
     return jis;
 }
 
-/*! \internal */
+/*!
+    \internal
+*/
 uint QJpUnicodeConv::unicodeToJisx0212(uint h, uint l) const
 {
     if (rule & UDC){
@@ -262,7 +286,9 @@ uint QJpUnicodeConv::unicodeToJisx0212(uint h, uint l) const
     return jis;
 }
 
-/*! \internal */
+/*!
+    \internal
+*/
 uint QJpUnicodeConv::sjisToUnicode(uint h, uint l) const
 {
     if (h == 0) {
@@ -273,7 +299,9 @@ uint QJpUnicodeConv::sjisToUnicode(uint h, uint l) const
     return 0x0000;
 }
 
-/*! \internal */
+/*!
+    \internal
+*/
 uint QJpUnicodeConv::unicodeToSjis(uint h, uint l) const
 {
     uint jis;
@@ -357,7 +385,9 @@ uint QJpUnicodeConv_Unicode_ASCII::unicodeToJisx0208(uint h, uint l) const
     return QJpUnicodeConv::unicodeToJisx0208(h, l);
 }
 
-/*! \internal */
+/*!
+    \internal
+*/
 uint QJpUnicodeConv_Unicode_ASCII::unicodeToJisx0212(uint h, uint l) const
 {
     if ((h == 0x00) && (l == 0x7e)) {
@@ -505,7 +535,9 @@ uint QJpUnicodeConv_JISX0221_ASCII::unicodeToJisx0208(uint h, uint l) const
     return QJpUnicodeConv::unicodeToJisx0208(h, l);
 }
 
-/*! \internal */
+/*!
+    \internal
+*/
 uint QJpUnicodeConv_JISX0221_ASCII::unicodeToJisx0212(uint h, uint l) const
 {
     if ((h == 0x00) && (l == 0x7e)) {
@@ -589,7 +621,9 @@ uint QJpUnicodeConv_Sun::unicodeToJisx0208(uint h, uint l) const
     return QJpUnicodeConv::unicodeToJisx0208(h, l);
 }
 
-/*! \internal */
+/*!
+    \internal
+*/
 uint QJpUnicodeConv_Sun::unicodeToJisx0212(uint h, uint l) const
 {
 #if 1
@@ -725,7 +759,9 @@ uint QJpUnicodeConv_Microsoft::unicodeToJisx0212(uint h, uint l) const
 }
 
 
-/*! \internal */
+/*!
+    \internal
+*/
 QJpUnicodeConv *QJpUnicodeConv::newConverter(int rule)
 {
     QByteArray env = qgetenv("UNICODEMAP_JP");
diff --git a/src/corelib/codecs/qtextcodec.cpp b/src/corelib/codecs/qtextcodec.cpp
index fb3151b..90b339b 100644
--- a/src/corelib/codecs/qtextcodec.cpp
+++ b/src/corelib/codecs/qtextcodec.cpp
@@ -902,7 +902,8 @@ QTextEncoder::~QTextEncoder()
 {
 }
 
-/*! \internal
+/*!
+    \internal
     \since 4.5
     Determines whether the eecoder encountered a failure while decoding the input. If
     an error was encountered, the produced result is undefined, and gets converted as according
@@ -1138,7 +1139,8 @@ QTextCodec *QTextCodec::codecForUtfText(const QByteArray &ba)
 }
 
 
-/*! \internal
+/*!
+    \internal
     \since 4.3
     Determines whether the decoder encountered a failure while decoding the input. If
     an error was encountered, the produced result is undefined, and gets converted as according
diff --git a/src/corelib/global/qglobal.cpp b/src/corelib/global/qglobal.cpp
index b60e749..5fbded4 100644
--- a/src/corelib/global/qglobal.cpp
+++ b/src/corelib/global/qglobal.cpp
@@ -1904,7 +1904,8 @@ void qt_check_pointer(const char *n, int l)
     qFatal("In file %s, line %d: Out of memory", n, l);
 }
 
-/* \internal
+/*
+   \internal
    Allows you to throw an exception without including <new>
    Called internally from Q_CHECK_PTR on certain OS combinations
 */
@@ -1913,7 +1914,8 @@ void qBadAlloc()
     QT_THROW(std::bad_alloc());
 }
 
-/* \internal
+/*
+   \internal
    Allows you to call std::terminate() without including <exception>.
    Called internally from QT_TERMINATE_ON_EXCEPTION
 */
diff --git a/src/corelib/global/qlibraryinfo.cpp b/src/corelib/global/qlibraryinfo.cpp
index 7ea8fcc..e957b22 100644
--- a/src/corelib/global/qlibraryinfo.cpp
+++ b/src/corelib/global/qlibraryinfo.cpp
@@ -183,7 +183,8 @@ QSettings *QLibraryInfoPrivate::findConfiguration()
 
 #ifndef QT_BUILD_QMAKE
 
-/*! \internal
+/*!
+    \internal
 
    You cannot create a QLibraryInfo, instead only the static functions are available to query
    information.
diff --git a/src/corelib/io/qdir.cpp b/src/corelib/io/qdir.cpp
index c58db6d..8e231ff 100644
--- a/src/corelib/io/qdir.cpp
+++ b/src/corelib/io/qdir.cpp
@@ -2147,7 +2147,8 @@ void QDir::refresh() const
     d->clearFileLists();
 }
 
-/*! \internal
+/*!
+    \internal
 */
 QDirPrivate* QDir::d_func()
 {
diff --git a/src/corelib/io/qfileinfo.cpp b/src/corelib/io/qfileinfo.cpp
index ac87e23..7d9eb71 100644
--- a/src/corelib/io/qfileinfo.cpp
+++ b/src/corelib/io/qfileinfo.cpp
@@ -1303,7 +1303,8 @@ QDateTime QFileInfo::lastRead() const
     return d->getFileTime(QAbstractFileEngine::AccessTime);
 }
 
-/*! \internal
+/*!
+    \internal
 */
 QFileInfoPrivate* QFileInfo::d_func()
 {
diff --git a/src/corelib/io/qiodevice.cpp b/src/corelib/io/qiodevice.cpp
index 07634c3..8cd124f 100644
--- a/src/corelib/io/qiodevice.cpp
+++ b/src/corelib/io/qiodevice.cpp
@@ -114,7 +114,8 @@ void debugBinaryString(const char *data, qint64 maxlen)
        } \
    } while (0)
 
-/*! \internal
+/*!
+    \internal
  */
 QIODevicePrivate::QIODevicePrivate()
     : openMode(QIODevice::NotOpen), buffer(QIODEVICE_BUFFERSIZE),
@@ -129,7 +130,8 @@ QIODevicePrivate::QIODevicePrivate()
 {
 }
 
-/*! \internal
+/*!
+    \internal
  */
 QIODevicePrivate::~QIODevicePrivate()
 {
@@ -335,7 +337,8 @@ QIODevice::QIODevice()
     d_ptr->q_ptr = this;
 }
 
-/*! \internal
+/*!
+    \internal
 */
 QIODevice::QIODevice(QIODevicePrivate &dd)
     : d_ptr(&dd)
@@ -370,7 +373,8 @@ QIODevice::QIODevice(QObject *parent)
 #endif
 }
 
-/*! \internal
+/*!
+    \internal
 */
 QIODevice::QIODevice(QIODevicePrivate &dd, QObject *parent)
     : QObject(dd, parent)
diff --git a/src/corelib/io/qprocess.cpp b/src/corelib/io/qprocess.cpp
index 04597f1..e201aef 100644
--- a/src/corelib/io/qprocess.cpp
+++ b/src/corelib/io/qprocess.cpp
@@ -742,7 +742,8 @@ void QProcessPrivate::Channel::clear()
     \sa readAllStandardError(), readChannel()
 */
 
-/*! \internal
+/*!
+    \internal
 */
 QProcessPrivate::QProcessPrivate()
 {
@@ -777,7 +778,8 @@ QProcessPrivate::QProcessPrivate()
 #endif
 }
 
-/*! \internal
+/*!
+    \internal
 */
 QProcessPrivate::~QProcessPrivate()
 {
@@ -787,7 +789,8 @@ QProcessPrivate::~QProcessPrivate()
         stdoutChannel.process->stdinChannel.clear();
 }
 
-/*! \internal
+/*!
+    \internal
 */
 void QProcessPrivate::cleanup()
 {
@@ -851,7 +854,8 @@ void QProcessPrivate::cleanup()
 #endif
 }
 
-/*! \internal
+/*!
+    \internal
 */
 bool QProcessPrivate::_q_canReadStandardOutput()
 {
@@ -906,7 +910,8 @@ bool QProcessPrivate::_q_canReadStandardOutput()
     return didRead;
 }
 
-/*! \internal
+/*!
+    \internal
 */
 bool QProcessPrivate::_q_canReadStandardError()
 {
@@ -950,7 +955,8 @@ bool QProcessPrivate::_q_canReadStandardError()
     return didRead;
 }
 
-/*! \internal
+/*!
+    \internal
 */
 bool QProcessPrivate::_q_canWrite()
 {
@@ -994,7 +1000,8 @@ bool QProcessPrivate::_q_canWrite()
     return true;
 }
 
-/*! \internal
+/*!
+    \internal
 */
 bool QProcessPrivate::_q_processDied()
 {
@@ -1063,7 +1070,8 @@ bool QProcessPrivate::_q_processDied()
     return true;
 }
 
-/*! \internal
+/*!
+    \internal
 */
 bool QProcessPrivate::_q_startupNotification()
 {
@@ -1092,7 +1100,8 @@ bool QProcessPrivate::_q_startupNotification()
     return false;
 }
 
-/*! \internal
+/*!
+    \internal
 */
 void QProcessPrivate::closeWriteChannel()
 {
diff --git a/src/corelib/io/qtextstream.cpp b/src/corelib/io/qtextstream.cpp
index 89b2226..8919ce3 100644
--- a/src/corelib/io/qtextstream.cpp
+++ b/src/corelib/io/qtextstream.cpp
@@ -428,7 +428,8 @@ public:
     QTextStream *q_ptr;
 };
 
-/*! \internal
+/*!
+    \internal
 */
 QTextStreamPrivate::QTextStreamPrivate(QTextStream *q_ptr)
     :
@@ -442,7 +443,8 @@ QTextStreamPrivate::QTextStreamPrivate(QTextStream *q_ptr)
     reset();
 }
 
-/*! \internal
+/*!
+    \internal
 */
 QTextStreamPrivate::~QTextStreamPrivate()
 {
@@ -478,7 +480,8 @@ static void copyConverterStateHelper(QTextCodec::ConverterState *dest,
 }
 #endif
 
-/*! \internal
+/*!
+    \internal
 */
 void QTextStreamPrivate::reset()
 {
@@ -511,7 +514,8 @@ void QTextStreamPrivate::reset()
 #endif
 }
 
-/*! \internal
+/*!
+    \internal
 */
 bool QTextStreamPrivate::fillReadBuffer(qint64 maxBytes)
 {
@@ -627,7 +631,8 @@ bool QTextStreamPrivate::fillReadBuffer(qint64 maxBytes)
     return true;
 }
 
-/*! \internal
+/*!
+    \internal
 */
 void QTextStreamPrivate::resetReadBuffer()
 {
@@ -636,7 +641,8 @@ void QTextStreamPrivate::resetReadBuffer()
     readBufferStartDevicePos = (device ? device->pos() : 0);
 }
 
-/*! \internal
+/*!
+    \internal
 */
 void QTextStreamPrivate::flushWriteBuffer()
 {
@@ -729,7 +735,8 @@ QString QTextStreamPrivate::read(int maxlen)
     return ret;
 }
 
-/*! \internal
+/*!
+    \internal
 
     Scans no more than \a maxlen QChars in the current buffer for the
     first \a delimiter. Stores a pointer to the start offset of the
@@ -830,7 +837,8 @@ bool QTextStreamPrivate::scan(const QChar **ptr, int *length, int maxlen, TokenD
     return true;
 }
 
-/*! \internal
+/*!
+    \internal
 */
 inline const QChar *QTextStreamPrivate::readPtr() const
 {
@@ -840,7 +848,8 @@ inline const QChar *QTextStreamPrivate::readPtr() const
     return readBuffer.constData() + readBufferOffset;
 }
 
-/*! \internal
+/*!
+    \internal
 */
 inline void QTextStreamPrivate::consumeLastToken()
 {
@@ -849,7 +858,8 @@ inline void QTextStreamPrivate::consumeLastToken()
     lastTokenSize = 0;
 }
 
-/*! \internal
+/*!
+    \internal
 */
 inline void QTextStreamPrivate::consume(int size)
 {
@@ -874,7 +884,8 @@ inline void QTextStreamPrivate::consume(int size)
     }
 }
 
-/*! \internal
+/*!
+    \internal
 */
 inline void QTextStreamPrivate::saveConverterState(qint64 newPos)
 {
@@ -894,7 +905,8 @@ inline void QTextStreamPrivate::saveConverterState(qint64 newPos)
     readConverterSavedStateOffset = 0;
 }
 
-/*! \internal
+/*!
+    \internal
 */
 inline void QTextStreamPrivate::restoreToSavedConverterState()
 {
@@ -911,7 +923,8 @@ inline void QTextStreamPrivate::restoreToSavedConverterState()
 #endif
 }
 
-/*! \internal
+/*!
+    \internal
 */
 inline void QTextStreamPrivate::write(const QString &data)
 {
@@ -925,7 +938,8 @@ inline void QTextStreamPrivate::write(const QString &data)
     }
 }
 
-/*! \internal
+/*!
+    \internal
 */
 inline bool QTextStreamPrivate::getChar(QChar *ch)
 {
@@ -941,7 +955,8 @@ inline bool QTextStreamPrivate::getChar(QChar *ch)
     return true;
 }
 
-/*! \internal
+/*!
+    \internal
 */
 inline void QTextStreamPrivate::ungetChar(QChar ch)
 {
@@ -961,7 +976,8 @@ inline void QTextStreamPrivate::ungetChar(QChar ch)
     readBuffer[--readBufferOffset] = ch;
 }
 
-/*! \internal
+/*!
+    \internal
 */
 inline void QTextStreamPrivate::putString(const QString &s, bool number)
 {
@@ -1696,7 +1712,8 @@ QString QTextStream::read(qint64 maxlen)
     return d->read(int(maxlen));
 }
 
-/*! \internal
+/*!
+    \internal
 */
 QTextStreamPrivate::NumberParsingStatus QTextStreamPrivate::getNumber(qulonglong *ret)
 {
@@ -1871,7 +1888,8 @@ QTextStreamPrivate::NumberParsingStatus QTextStreamPrivate::getNumber(qulonglong
     return npsOk;
 }
 
-/*! \internal
+/*!
+    \internal
     (hihi)
 */
 bool QTextStreamPrivate::getReal(double *f)
@@ -2273,7 +2291,8 @@ QTextStream &QTextStream::operator>>(char *c)
     return *this;
 }
 
-/*! \internal
+/*!
+    \internal
  */
 void QTextStreamPrivate::putNumber(qulonglong number, bool negative)
 {
diff --git a/src/corelib/io/qurl.cpp b/src/corelib/io/qurl.cpp
index 8cabc06..45d3924 100644
--- a/src/corelib/io/qurl.cpp
+++ b/src/corelib/io/qurl.cpp
@@ -2719,7 +2719,8 @@ QUrl &QUrl::operator =(const QString &url)
     fast and never fails.
 */
 
-/*! \internal
+/*!
+    \internal
 
     Forces a detach.
 */
diff --git a/src/corelib/itemmodels/qidentityproxymodel.cpp b/src/corelib/itemmodels/qidentityproxymodel.cpp
index a56f881..0e2b14d 100644
--- a/src/corelib/itemmodels/qidentityproxymodel.cpp
+++ b/src/corelib/itemmodels/qidentityproxymodel.cpp
@@ -117,7 +117,8 @@ QIdentityProxyModel::QIdentityProxyModel(QObject* parent)
 
 }
 
-/*! \internal
+/*!
+    \internal
  */
 QIdentityProxyModel::QIdentityProxyModel(QIdentityProxyModelPrivate &dd, QObject* parent)
   : QAbstractProxyModel(dd, parent)
diff --git a/src/corelib/json/qjsondocument.cpp b/src/corelib/json/qjsondocument.cpp
index 1d8142c..303fb8e 100644
--- a/src/corelib/json/qjsondocument.cpp
+++ b/src/corelib/json/qjsondocument.cpp
@@ -103,7 +103,8 @@ QJsonDocument::QJsonDocument(const QJsonArray &array)
     setArray(array);
 }
 
-/*! \internal
+/*!
+    \internal
  */
 QJsonDocument::QJsonDocument(QJsonPrivate::Data *data)
     : d(data)
diff --git a/src/corelib/kernel/qabstracteventdispatcher.cpp b/src/corelib/kernel/qabstracteventdispatcher.cpp
index d17d1c6..b018f54 100644
--- a/src/corelib/kernel/qabstracteventdispatcher.cpp
+++ b/src/corelib/kernel/qabstracteventdispatcher.cpp
@@ -329,11 +329,15 @@ int QAbstractEventDispatcher::registerTimer(int interval, Qt::TimerType timerTyp
 
 // ### DOC: Are these called when the _application_ starts/stops or just
 // when the current _event loop_ starts/stops?
-/*! \internal */
+/*!
+    \internal
+*/
 void QAbstractEventDispatcher::startingUp()
 { }
 
-/*! \internal */
+/*!
+    \internal
+*/
 void QAbstractEventDispatcher::closingDown()
 { }
 
diff --git a/src/corelib/kernel/qcoreapplication.cpp b/src/corelib/kernel/qcoreapplication.cpp
index d3fb7f4..8d071e0 100644
--- a/src/corelib/kernel/qcoreapplication.cpp
+++ b/src/corelib/kernel/qcoreapplication.cpp
@@ -515,7 +515,8 @@ void QCoreApplicationPrivate::initLocale()
     If no instance has been allocated, \c null is returned.
 */
 
-/*!\internal
+/*!
+    \internal
  */
 QCoreApplication::QCoreApplication(QCoreApplicationPrivate &p)
     : QObject(p, 0)
@@ -821,7 +822,8 @@ bool QCoreApplicationPrivate::sendThroughObjectEventFilters(QObject *receiver, Q
     return false;
 }
 
-/*!\internal
+/*!
+  \internal
 
   Helper function called by notify()
  */
diff --git a/src/corelib/kernel/qcoreevent.cpp b/src/corelib/kernel/qcoreevent.cpp
index 4217962..c542f82 100644
--- a/src/corelib/kernel/qcoreevent.cpp
+++ b/src/corelib/kernel/qcoreevent.cpp
@@ -450,7 +450,8 @@ QTimerEvent::QTimerEvent(int timerId)
     : QEvent(Timer), id(timerId)
 {}
 
-/*! \internal
+/*!
+    \internal
 */
 QTimerEvent::~QTimerEvent()
 {
@@ -495,7 +496,8 @@ QChildEvent::QChildEvent(Type type, QObject *child)
     : QEvent(type), c(child)
 {}
 
-/*! \internal
+/*!
+    \internal
 */
 QChildEvent::~QChildEvent()
 {
@@ -574,7 +576,9 @@ QDeferredDeleteEvent::QDeferredDeleteEvent()
     , level(0)
 { }
 
-/*! \internal */
+/*!
+    \internal
+*/
 QDeferredDeleteEvent::~QDeferredDeleteEvent()
 { }
 
diff --git a/src/corelib/kernel/qmetaobject.cpp b/src/corelib/kernel/qmetaobject.cpp
index 90cebe2..14ca6e1 100644
--- a/src/corelib/kernel/qmetaobject.cpp
+++ b/src/corelib/kernel/qmetaobject.cpp
@@ -574,7 +574,8 @@ static bool methodMatch(const QMetaObject *m, int handle,
     return true;
 }
 
-/** \internal
+/**
+* \internal
 * helper function for indexOf{Method,Slot,Signal}, returns the relative index of the method within
 * the baseObject
 * \a MethodType might be MethodSignal or MethodSlot, or 0 to match everything.
@@ -705,7 +706,8 @@ int QMetaObject::indexOfSignal(const char *signal) const
     return i;
 }
 
-/*! \internal
+/*!
+    \internal
     Same as QMetaObject::indexOfSignal, but the result is the local offset to the base object.
 
     \a baseObject will be adjusted to the enclosing QMetaObject, or 0 if the signal is not found
@@ -851,7 +853,8 @@ int QMetaObjectPrivate::signalIndex(const QMetaMethod &m)
     return ((m.handle - priv(m.mobj->d.data)->methodData) / 5) + signalOffset(m.mobj);
 }
 
-/*! \internal
+/*!
+    \internal
     \since 5.0
 
     Returns the signal for the given meta-object \a m at \a signal_index.
@@ -1861,7 +1864,9 @@ const char *QMetaMethod::tag() const
 }
 
 
-/*! \internal */
+/*!
+    \internal
+ */
 int QMetaMethod::attributes() const
 {
     if (!mobj)
@@ -1940,7 +1945,8 @@ QMetaMethod::MethodType QMetaMethod::methodType() const
     \snippet code/src_corelib_kernel_qmetaobject.cpp 9
 */
 
-/*! \internal
+/*!
+    \internal
 
     Implementation of the fromSignal() function.
 
@@ -3275,7 +3281,8 @@ const char* QMetaClassInfo::value() const
     and \a data.
 */
 
-/*! \internal
+/*!
+    \internal
     If the local_method_index is a cloned method, return the index of the original.
 
     Example: if the index of "destroyed()" is passed, the index of "destroyed(QObject*)" is returned
diff --git a/src/corelib/kernel/qmetatype.cpp b/src/corelib/kernel/qmetatype.cpp
index 29179db..18b17d9 100644
--- a/src/corelib/kernel/qmetatype.cpp
+++ b/src/corelib/kernel/qmetatype.cpp
@@ -314,7 +314,8 @@ Q_GLOBAL_STATIC(QVector<QCustomTypeInfo>, customTypes)
 Q_GLOBAL_STATIC(QReadWriteLock, customTypesLock)
 
 #ifndef QT_NO_DATASTREAM
-/*! \internal
+/*!
+    \internal
 */
 void QMetaType::registerStreamOperators(const char *typeName, SaveOperator saveOp,
                                         LoadOperator loadOp)
@@ -322,7 +323,8 @@ void QMetaType::registerStreamOperators(const char *typeName, SaveOperator saveO
     registerStreamOperators(type(typeName), saveOp, loadOp);
 }
 
-/*! \internal
+/*!
+    \internal
 */
 void QMetaType::registerStreamOperators(int idx, SaveOperator saveOp,
                                         LoadOperator loadOp)
@@ -382,7 +384,8 @@ const char *QMetaType::typeName(int typeId)
     return result;
 }
 
-/*! \internal
+/*!
+    \internal
     Similar to QMetaType::type(), but only looks in the static set of types.
 */
 static inline int qMetaTypeStaticType(const char *typeName, int length)
@@ -395,7 +398,8 @@ static inline int qMetaTypeStaticType(const char *typeName, int length)
     return types[i].type;
 }
 
-/*! \internal
+/*!
+    \internal
     Similar to QMetaType::type(), but only looks in the custom set of
     types, and doesn't lock the mutex.
 */
@@ -417,7 +421,8 @@ static int qMetaTypeCustomType_unlocked(const char *typeName, int length)
     return QMetaType::UnknownType;
 }
 
-/*! \internal
+/*!
+    \internal
 
     This function is needed until existing code outside of qtbase
     has been changed to call the new version of registerType().
@@ -428,7 +433,8 @@ int QMetaType::registerType(const char *typeName, Deleter deleter,
     return registerType(typeName, deleter, creator, qMetaTypeDestructHelper<void>, qMetaTypeConstructHelper<void>, 0, TypeFlags(), 0);
 }
 
-/*! \internal
+/*!
+    \internal
     \since 5.0
 
     Registers a user type for marshalling, with \a typeName, a \a
@@ -452,7 +458,8 @@ int QMetaType::registerType(const char *typeName, Deleter deleter,
 }
 
 
-/*! \internal
+/*!
+    \internal
     \since 5.0
 
     Registers a user type for marshalling, with \a normalizedTypeName, a \a
@@ -528,7 +535,8 @@ int QMetaType::registerNormalizedType(const NS(QByteArray) &normalizedTypeName,
     return idx;
 }
 
-/*! \internal
+/*!
+    \internal
     \since 4.7
 
     Registers a user type for marshalling, as an alias of another type (typedef)
@@ -544,7 +552,8 @@ int QMetaType::registerTypedef(const char* typeName, int aliasId)
     return registerNormalizedTypedef(normalizedTypeName, aliasId);
 }
 
-/*! \internal
+/*!
+    \internal
     \since 5.0
 
     Registers a user type for marshalling, as an alias of another type (typedef).
diff --git a/src/corelib/kernel/qobject.cpp b/src/corelib/kernel/qobject.cpp
index cf573ac..a00d528 100644
--- a/src/corelib/kernel/qobject.cpp
+++ b/src/corelib/kernel/qobject.cpp
@@ -122,7 +122,8 @@ static int *queuedConnectionTypes(const QArgumentType *argumentTypes, int argc)
 
 static QBasicMutex _q_ObjectMutexPool[131];
 
-/** \internal
+/**
+ * \internal
  * mutex to be locked when accessing the connectionlists or the senders list
  */
 static inline QMutex *signalSlotLock(const QObject *o)
@@ -232,7 +233,8 @@ QObjectPrivate::~QObjectPrivate()
     delete extraData;
 }
 
-/*!\internal
+/*!
+  \internal
   For a given metaobject, compute the signal offset, and the method offset (including signals)
 */
 static void computeOffsets(const QMetaObject *metaobject, int *signalOffset, int *methodOffset)
@@ -339,7 +341,8 @@ QObjectList QObjectPrivate::senderList() const
     return returnValue;
 }
 
-/*! \internal
+/*!
+  \internal
   Add the connection \a c to to the list of connections of the sender's object
   for the specified \a signal
 
@@ -415,7 +418,8 @@ void QObjectPrivate::cleanConnectionLists()
     }
 }
 
-/*! \internal
+/*!
+    \internal
  */
 QMetaCallEvent::QMetaCallEvent(ushort method_offset, ushort method_relative, QObjectPrivate::StaticMetaCallFunction callFunction,
                                const QObject *sender, int signalId,
@@ -425,7 +429,8 @@ QMetaCallEvent::QMetaCallEvent(ushort method_offset, ushort method_relative, QOb
       callFunction_(callFunction), method_offset_(method_offset), method_relative_(method_relative)
 { }
 
-/*! \internal
+/*!
+    \internal
  */
 QMetaCallEvent::QMetaCallEvent(QObject::QSlotObjectBase *slotO, const QObject *sender, int signalId,
                                int nargs, int *types, void **args, QSemaphore *semaphore)
@@ -437,7 +442,8 @@ QMetaCallEvent::QMetaCallEvent(QObject::QSlotObjectBase *slotO, const QObject *s
         slotObj_->ref.ref();
 }
 
-/*! \internal
+/*!
+    \internal
  */
 QMetaCallEvent::~QMetaCallEvent()
 {
@@ -457,7 +463,8 @@ QMetaCallEvent::~QMetaCallEvent()
         delete slotObj_;
 }
 
-/*! \internal
+/*!
+    \internal
  */
 void QMetaCallEvent::placeMetaCall(QObject *object)
 {
@@ -679,7 +686,8 @@ QObject::QObject(QObject *parent)
     qt_addObject(this);
 }
 
-/*! \internal
+/*!
+    \internal
  */
 QObject::QObject(QObjectPrivate &dd, QObject *parent)
     : d_ptr(&dd)
@@ -1692,7 +1700,8 @@ void qt_qFindChildren_helper(const QObject *parent, const QRegularExpression &re
 }
 #endif // QT_NO_REGEXP
 
-/*! \internal
+/*!
+    \internal
  */
 QObject *qt_qFindChild_helper(const QObject *parent, const QString &name, const QMetaObject &mo, Qt::FindChildOptions options)
 {
@@ -2940,7 +2949,8 @@ void QObject::disconnectNotify(const QMetaMethod &signal)
     Q_UNUSED(signal);
 }
 
-/* \internal
+/*
+    \internal
     convert a signal index from the method range to the signal range
  */
 static int methodIndexToSignalIndex(const QMetaObject **base, int signal_index)
@@ -2963,7 +2973,8 @@ static int methodIndexToSignalIndex(const QMetaObject **base, int signal_index)
     return signal_index;
 }
 
-/*!\internal
+/*!
+   \internal
    \a types is a 0-terminated vector of meta types for queued
    connections.
 
@@ -2981,7 +2992,8 @@ QMetaObject::Connection QMetaObject::connect(const QObject *sender, int signal_i
                                        type, types));
 }
 
-/*! \internal
+/*!
+    \internal
    Same as the QMetaObject::connect, but \a signal_index must be the result of QObjectPrivate::signalIndex
 
     method_index is relative to the rmeta metaobject, if rmeta is null, then it is absolute index
@@ -3043,7 +3055,8 @@ QObjectPrivate::Connection *QMetaObjectPrivate::connect(const QObject *sender,
     return c.take();
 }
 
-/*!\internal
+/*!
+    \internal
  */
 bool QMetaObject::disconnect(const QObject *sender, int signal_index,
                              const QObject *receiver, int method_index)
@@ -3054,7 +3067,8 @@ bool QMetaObject::disconnect(const QObject *sender, int signal_index,
                                           receiver, method_index, 0);
 }
 
-/*!\internal
+/*!
+    \internal
 
 Disconnect a single signal connection.  If QMetaObject::connect() has been called 
 multiple times for the same sender, signal_index, receiver and method_index only 
@@ -3070,7 +3084,8 @@ bool QMetaObject::disconnectOne(const QObject *sender, int signal_index,
                                           QMetaObjectPrivate::DisconnectOne);
 }
 
-/*! \internal
+/*!
+    \internal
     Helper function to remove the connection from the senders list and setting the receivers to 0
  */
 bool QMetaObjectPrivate::disconnectHelper(QObjectPrivate::Connection *c,
@@ -3111,7 +3126,8 @@ bool QMetaObjectPrivate::disconnectHelper(QObjectPrivate::Connection *c,
     return success;
 }
 
-/*! \internal
+/*!
+    \internal
     Same as the QMetaObject::disconnect, but \a signal_index must be the result of QObjectPrivate::signalIndex
  */
 bool QMetaObjectPrivate::disconnect(const QObject *sender,
@@ -3238,7 +3254,8 @@ void QMetaObject::connectSlotsByName(QObject *o)
     }
 }
 
-/*! \internal
+/*!
+    \internal
 
     \a signal must be in the signal index range (see QObjectPrivate::signalIndex()).
 */
@@ -3275,7 +3292,8 @@ static void queued_activate(QObject *sender, int signal, QObjectPrivate::Connect
     QCoreApplication::postEvent(c->receiver, ev);
 }
 
-/*!\internal
+/*!
+    \internal
  */
 void QMetaObject::activate(QObject *sender, const QMetaObject *m, int local_signal_index,
                            void **argv)
@@ -3283,7 +3301,8 @@ void QMetaObject::activate(QObject *sender, const QMetaObject *m, int local_sign
     activate(sender, QMetaObjectPrivate::signalOffset(m), local_signal_index, argv);
 }
 
-/*!\internal
+/*!
+    \internal
  */
 void QMetaObject::activate(QObject *sender, int signalOffset, int local_signal_index, void **argv)
 {
@@ -3443,7 +3462,8 @@ void QMetaObject::activate(QObject *sender, int signalOffset, int local_signal_i
 
 }
 
-/*!\internal
+/*!
+    \internal
    signal_index comes from indexOfMethod()
 */
 void QMetaObject::activate(QObject *sender, int signal_index, void **argv)
@@ -3454,7 +3474,8 @@ void QMetaObject::activate(QObject *sender, int signal_index, void **argv)
     activate(sender, mo, signal_index - mo->methodOffset(), argv);
 }
 
-/*! \internal
+/*!
+    \internal
     Implementation of QObject::senderSignalIndex()
 */
 int QObjectPrivate::senderSignalIndex() const
@@ -3472,7 +3493,8 @@ int QObjectPrivate::senderSignalIndex() const
     return -1;
 }
 
-/*! \internal
+/*!
+    \internal
     Returns the signal index used in the internal connectionLists vector.
 
     It is different from QMetaObject::indexOfSignal():  indexOfSignal is the same as indexOfMethod
@@ -3741,7 +3763,8 @@ void QObject::dumpObjectInfo()
 }
 
 #ifndef QT_NO_USERDATA
-/*!\internal
+/*!
+    \internal
  */
 uint QObject::registerUserData()
 {
@@ -3749,13 +3772,15 @@ uint QObject::registerUserData()
     return user_data_registration++;
 }
 
-/*!\internal
+/*!
+    \internal
  */
 QObjectUserData::~QObjectUserData()
 {
 }
 
-/*!\internal
+/*!
+    \internal
  */
 void QObject::setUserData(uint id, QObjectUserData* data)
 {
@@ -3768,7 +3793,8 @@ void QObject::setUserData(uint id, QObjectUserData* data)
     d->extraData->userData[id] = data;
 }
 
-/*!\internal
+/*!
+    \internal
  */
 QObjectUserData* QObject::userData(uint id) const
 {
@@ -4137,7 +4163,8 @@ void qDeleteInEventHandler(QObject *o)
     The connection will automatically disconnect if the sender is destroyed.
  */
 
-/** \internal
+/**
+    \internal
 
     Implementation of the template version of connect
 
diff --git a/src/corelib/kernel/qvariant.cpp b/src/corelib/kernel/qvariant.cpp
index 2f73897..4b582af 100644
--- a/src/corelib/kernel/qvariant.cpp
+++ b/src/corelib/kernel/qvariant.cpp
@@ -1416,7 +1416,8 @@ QVariant::QVariant(Type type)
 QVariant::QVariant(int typeId, const void *copy)
 { create(typeId, copy); d.is_null = false; }
 
-/*! \internal
+/*!
+    \internal
     flags is true if it is a pointer type
  */
 QVariant::QVariant(int typeId, const void *copy, uint flags)
@@ -2843,7 +2844,8 @@ static bool qIsFloatingPoint(uint tp)
     return tp == QVariant::Double || tp == QMetaType::Float;
 }
 
-/*! \internal
+/*!
+    \internal
  */
 bool QVariant::cmp(const QVariant &v) const
 {
@@ -2861,7 +2863,8 @@ bool QVariant::cmp(const QVariant &v) const
     return handlerManager[d.type]->compare(&d, &v2.d);
 }
 
-/*! \internal
+/*!
+    \internal
  */
 
 const void *QVariant::constData() const
@@ -2875,7 +2878,9 @@ const void *QVariant::constData() const
     \internal
 */
 
-/*! \internal */
+/*!
+    \internal
+*/
 void* QVariant::data()
 {
     detach();
diff --git a/src/corelib/thread/qmutexpool.cpp b/src/corelib/thread/qmutexpool.cpp
index 4d24f8c..df1d349 100644
--- a/src/corelib/thread/qmutexpool.cpp
+++ b/src/corelib/thread/qmutexpool.cpp
@@ -124,7 +124,8 @@ QMutexPool *QMutexPool::instance()
     to determine which mutex is returned from the pool.
 */
 
-/*! \internal
+/*!
+    \internal
   create the mutex for the given index
  */
 QMutex *QMutexPool::createMutex(int index)
diff --git a/src/corelib/thread/qthread.cpp b/src/corelib/thread/qthread.cpp
index f93f383..424fef0 100644
--- a/src/corelib/thread/qthread.cpp
+++ b/src/corelib/thread/qthread.cpp
@@ -351,7 +351,8 @@ QThread::QThread(QObject *parent)
     d->data->thread = this;
 }
 
-/*! \internal
+/*!
+    \internal
  */
 QThread::QThread(QThreadPrivate &dd, QObject *parent)
     : QObject(dd, parent)
@@ -692,7 +693,8 @@ QThreadData* QThreadData::current()
     return data;
 }
 
-/*! \internal
+/*!
+    \internal
  */
 QThread::QThread(QThreadPrivate &dd, QObject *parent)
     : QObject(dd, parent)
diff --git a/src/corelib/thread/qthread_unix.cpp b/src/corelib/thread/qthread_unix.cpp
index e9db276..0250ea1 100644
--- a/src/corelib/thread/qthread_unix.cpp
+++ b/src/corelib/thread/qthread_unix.cpp
@@ -444,7 +444,8 @@ void QThread::yieldCurrentThread()
     sched_yield();
 }
 
-/*  \internal
+/*
+    \internal
     helper function to do thread sleeps, since usleep()/nanosleep()
     aren't reliable enough (in terms of behavior and availability)
 */
diff --git a/src/corelib/thread/qthread_win.cpp b/src/corelib/thread/qthread_win.cpp
index 433c561..e443166 100644
--- a/src/corelib/thread/qthread_win.cpp
+++ b/src/corelib/thread/qthread_win.cpp
@@ -150,7 +150,8 @@ static QMutex qt_adopted_thread_watcher_mutex;
 static DWORD qt_adopted_thread_watcher_id = 0;
 static HANDLE qt_adopted_thread_wakeup = 0;
 
-/*! \internal
+/*!
+    \internal
     Adds an adopted thread to the list of threads that Qt watches to make sure
     the thread data is properly cleaned up. This function starts the watcher
     thread if necessary.
diff --git a/src/corelib/thread/qthreadpool.cpp b/src/corelib/thread/qthreadpool.cpp
index c913146..8545c06 100644
--- a/src/corelib/thread/qthreadpool.cpp
+++ b/src/corelib/thread/qthreadpool.cpp
@@ -68,15 +68,15 @@ public:
 */
 
 
-/*!\internal
-
+/*!
+    \internal
 */
 QThreadPoolThread::QThreadPoolThread(QThreadPoolPrivate *manager)
     :manager(manager), runnable(0)
 { }
 
-/* \internal
-
+/*
+    \internal
 */
 void QThreadPoolThread::run()
 {
@@ -150,8 +150,8 @@ void QThreadPoolThread::registerTheadInactive()
 }
 
 
-/* \internal
-
+/*
+    \internal
 */
 QThreadPoolPrivate:: QThreadPoolPrivate()
     : isExiting(false),
@@ -242,8 +242,8 @@ bool QThreadPoolPrivate::tooManyThreadsActive() const
     return activeThreadCount > maxThreadCount && (activeThreadCount - reservedThreads) > 1;
 }
 
-/*! \internal
-
+/*!
+    \internal
 */
 void QThreadPoolPrivate::startThread(QRunnable *runnable)
 {
@@ -258,7 +258,8 @@ void QThreadPoolPrivate::startThread(QRunnable *runnable)
     thread.take()->start();
 }
 
-/*! \internal
+/*!
+    \internal
     Makes all threads exit, waits for each tread to exit and deletes it.
 */
 void QThreadPoolPrivate::reset()
@@ -305,7 +306,8 @@ bool QThreadPoolPrivate::waitForDone(int msecs)
     return queue.isEmpty() && activeThreads == 0;
 }
 
-/*! \internal
+/*!
+    \internal
     Seaches for \a runnable in the queue, removes it from the queue and
     runs it if found. This functon does not return until the runnable
     has completed.
diff --git a/src/corelib/tools/qbytearraymatcher.cpp b/src/corelib/tools/qbytearraymatcher.cpp
index c696021..17ae2cb 100644
--- a/src/corelib/tools/qbytearraymatcher.cpp
+++ b/src/corelib/tools/qbytearraymatcher.cpp
@@ -245,7 +245,8 @@ static int findChar(const char *str, int len, char ch, int from)
     return -1;
 }
 
-/*! \internal
+/*!
+    \internal
  */
 static int qFindByteArrayBoyerMoore(
     const char *haystack, int haystackLen, int haystackOffset,
@@ -264,7 +265,8 @@ static int qFindByteArrayBoyerMoore(
         hashHaystack -= (a) << sl_minus_1; \
     hashHaystack <<= 1
 
-/*! \internal
+/*!
+    \internal
  */
 int qFindByteArray(
     const char *haystack0, int haystackLen, int from,
diff --git a/src/corelib/tools/qdatetime.cpp b/src/corelib/tools/qdatetime.cpp
index ae56783..8c9944b 100644
--- a/src/corelib/tools/qdatetime.cpp
+++ b/src/corelib/tools/qdatetime.cpp
@@ -3576,7 +3576,8 @@ QDateTime QDateTime::fromString(const QString &string, const QString &format)
     \sa toTimeSpec()
 */
 
-/*! \internal
+/*!
+    \internal
  */
 void QDateTime::detach()
 {
@@ -4355,7 +4356,9 @@ int QDateTimeParser::sectionPos(const SectionNode &sn) const
 
 
 /*!
-  \internal helper function for parseFormat. removes quotes that are
+  \internal
+
+  helper function for parseFormat. removes quotes that are
   not escaped and removes the escaping on those that are escaped
 
 */
@@ -5257,7 +5260,8 @@ end:
 
 #ifndef QT_NO_TEXTDATE
 /*!
-  \internal finds the first possible monthname that \a str1 can
+  \internal
+  finds the first possible monthname that \a str1 can
   match. Starting from \a index; str should already by lowered
 */
 
@@ -5551,7 +5555,9 @@ QDateTimeParser::FieldInfo QDateTimeParser::fieldInfo(int index) const
 }
 
 /*!
-  \internal Get a number that str can become which is between min
+  \internal
+
+  Get a number that str can become which is between min
   and max or -1 if this is not possible.
 */
 
@@ -5593,7 +5599,10 @@ QString QDateTimeParser::sectionFormat(Section s, int count) const
 }
 
 
-/*! \internal Returns true if str can be modified to represent a
+/*!
+  \internal
+
+  Returns true if str can be modified to represent a
   number that is within min and max.
 */
 
diff --git a/src/corelib/tools/qlocale.cpp b/src/corelib/tools/qlocale.cpp
index 128ac5f..8016efd 100644
--- a/src/corelib/tools/qlocale.cpp
+++ b/src/corelib/tools/qlocale.cpp
@@ -441,7 +441,9 @@ QSystemLocale::QSystemLocale()
         system_data->m_language_id = 0;
 }
 
-/*! \internal */
+/*!
+    \internal
+*/
 QSystemLocale::QSystemLocale(bool)
 { }
 
diff --git a/src/corelib/tools/qregexp.cpp b/src/corelib/tools/qregexp.cpp
index 54b8103..0f3b67d 100644
--- a/src/corelib/tools/qregexp.cpp
+++ b/src/corelib/tools/qregexp.cpp
@@ -1311,7 +1311,8 @@ struct QRegExpLookahead
 };
 #endif
 
-/*! \internal
+/*!
+    \internal
     convert the pattern string to the RegExp syntax.
 
     This is also used by QScriptEngine::newRegExp to convert to a pattern that JavaScriptCore can understan
diff --git a/src/corelib/tools/qstringbuilder.cpp b/src/corelib/tools/qstringbuilder.cpp
index 2aeb891..1696c56 100644
--- a/src/corelib/tools/qstringbuilder.cpp
+++ b/src/corelib/tools/qstringbuilder.cpp
@@ -105,7 +105,8 @@ QT_BEGIN_NAMESPACE
  */
 
 
-/*! \internal
+/*!
+    \internal
  */
 void QAbstractConcatenable::convertFromAscii(const char *a, int len, QChar *&out)
 {
diff --git a/src/corelib/xml/qxmlstream.cpp b/src/corelib/xml/qxmlstream.cpp
index fc9b2c4..6af3f62 100644
--- a/src/corelib/xml/qxmlstream.cpp
+++ b/src/corelib/xml/qxmlstream.cpp
@@ -184,7 +184,8 @@ QXmlStreamEntityResolver::~QXmlStreamEntityResolver()
 {
 }
 
-/*! \internal
+/*!
+  \internal
 
 This function is a stub for later functionality.
 */