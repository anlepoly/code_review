diff --git a/src/quick/items/qquickitem.cpp b/src/quick/items/qquickitem.cpp
index 9f82c7e..a5b70bb 100644
--- a/src/quick/items/qquickitem.cpp
+++ b/src/quick/items/qquickitem.cpp
@@ -2387,7 +2387,7 @@ bool QQuickItem::isComponentComplete() const
 QQuickItemPrivate::QQuickItemPrivate()
 : _anchors(0), _stateGroup(0),
   flags(0), widthValid(false), heightValid(false), baselineOffsetValid(false), componentComplete(true),
-  keepMouse(false), keepTouch(false), hoverEnabled(false), smooth(false), focus(false), activeFocus(false), notifiedFocus(false),
+  keepMouse(false), keepTouch(false), hoverEnabled(false), smooth(true), focus(false), activeFocus(false), notifiedFocus(false),
   notifiedActiveFocus(false), filtersChildMouseEvents(false), explicitVisible(true),
   effectiveVisible(true), explicitEnable(true), effectiveEnable(true), polishScheduled(false),
   inheritedLayoutMirror(false), effectiveLayoutMirror(false), isMirrorImplicit(true),
@@ -4314,13 +4314,15 @@ void QQuickItemPrivate::itemChange(QQuickItem::ItemChange change, const QQuickIt
 
 /*!
     \property QQuickItem::smooth
-    \brief whether the item is smoothly transformed.
+    \brief whether the item is smoothed or not.
 
-    This property is provided purely for the purpose of optimization. Turning
-    smooth transforms off is faster, but looks worse; turning smooth
-    transformations on is slower, but looks better.
+    Primarily used in image based elements to decide if the item should use smooth
+    sampling or not. Smooth sampling is performed using linear interpolation, while
+    non-smooth is performed using nearest neighbor.
 
-    By default smooth transformations are off.
+    In Qt Quick 2.0, this property has minimal impact on performance.
+
+    By default is true.
 */
 
 /*!
diff --git a/tests/auto/quick/qquickcanvasitem/data/tst_arc.qml b/tests/auto/quick/qquickcanvasitem/data/tst_arc.qml
index ffe6583..c33901d 100644
--- a/tests/auto/quick/qquickcanvasitem/data/tst_arc.qml
+++ b/tests/auto/quick/qquickcanvasitem/data/tst_arc.qml
@@ -4,6 +4,7 @@ import "testhelper.js" as Helper
 
 Canvas {
    id:canvas; width:100;height:50; renderTarget: Canvas.Image; renderStrategy:Canvas.Threaded
+   smooth: false
    TestCase {
        name: "arc"; when: windowShown
        function test_angle_1() {
diff --git a/tests/auto/quick/qquickcanvasitem/data/tst_arcto.qml b/tests/auto/quick/qquickcanvasitem/data/tst_arcto.qml
index 8609ad0..84bfc1a 100644
--- a/tests/auto/quick/qquickcanvasitem/data/tst_arcto.qml
+++ b/tests/auto/quick/qquickcanvasitem/data/tst_arcto.qml
@@ -4,6 +4,7 @@ import "testhelper.js" as Helper
 
 Canvas {
    id:canvas; width:100;height:50; renderTarget: Canvas.Image; renderStrategy:Canvas.Threaded
+   smooth: false
    TestCase {
        name: "arcTo"; when: windowShown
        function test_coincide() {
diff --git a/tests/auto/quick/qquickcanvasitem/data/tst_path.qml b/tests/auto/quick/qquickcanvasitem/data/tst_path.qml
index 6aaecbd..f72e5b9 100644
--- a/tests/auto/quick/qquickcanvasitem/data/tst_path.qml
+++ b/tests/auto/quick/qquickcanvasitem/data/tst_path.qml
@@ -4,6 +4,7 @@ import "testhelper.js" as Helper
 
 Canvas {
    id:canvas; width:100;height:50; renderTarget: Canvas.Image; renderStrategy:Canvas.Threaded
+   smooth: false
    TestCase {
        name: "path"; when: windowShown
 
diff --git a/tests/auto/quick/qquickcanvasitem/data/tst_strokeStyle.qml b/tests/auto/quick/qquickcanvasitem/data/tst_strokeStyle.qml
index 2521643..c81ef73 100644
--- a/tests/auto/quick/qquickcanvasitem/data/tst_strokeStyle.qml
+++ b/tests/auto/quick/qquickcanvasitem/data/tst_strokeStyle.qml
@@ -4,6 +4,7 @@ import "testhelper.js" as Helper
 
 Canvas {
    id:canvas; width:100;height:50; renderTarget:Canvas.Image; renderStrategy:Canvas.Threaded
+   smooth: false
    TestCase {
        name: "strokeStyle"; when: windowShown
        function test_default() {
diff --git a/tests/auto/quick/qquicktext/tst_qquicktext.cpp b/tests/auto/quick/qquicktext/tst_qquicktext.cpp
index 45d09bc..81020ad 100644
--- a/tests/auto/quick/qquicktext/tst_qquicktext.cpp
+++ b/tests/auto/quick/qquicktext/tst_qquicktext.cpp
@@ -1071,11 +1071,11 @@ void tst_qquicktext::smooth()
     for (int i = 0; i < standard.size(); i++)
     {
         {
-            QString componentStr = "import QtQuick 2.0\nText { smooth: true; text: \"" + standard.at(i) + "\" }";
+            QString componentStr = "import QtQuick 2.0\nText { smooth: false; text: \"" + standard.at(i) + "\" }";
             QQmlComponent textComponent(&engine);
             textComponent.setData(componentStr.toLatin1(), QUrl::fromLocalFile(""));
             QQuickText *textObject = qobject_cast<QQuickText*>(textComponent.create());
-            QCOMPARE(textObject->smooth(), true);
+            QCOMPARE(textObject->smooth(), false);
 
             delete textObject;
         }
@@ -1084,7 +1084,7 @@ void tst_qquicktext::smooth()
             QQmlComponent textComponent(&engine);
             textComponent.setData(componentStr.toLatin1(), QUrl::fromLocalFile(""));
             QQuickText *textObject = qobject_cast<QQuickText*>(textComponent.create());
-            QCOMPARE(textObject->smooth(), false);
+            QCOMPARE(textObject->smooth(), true);
 
             delete textObject;
         }
@@ -1092,11 +1092,11 @@ void tst_qquicktext::smooth()
     for (int i = 0; i < richText.size(); i++)
     {
         {
-            QString componentStr = "import QtQuick 2.0\nText { smooth: true; text: \"" + richText.at(i) + "\" }";
+            QString componentStr = "import QtQuick 2.0\nText { smooth: false; text: \"" + richText.at(i) + "\" }";
             QQmlComponent textComponent(&engine);
             textComponent.setData(componentStr.toLatin1(), QUrl::fromLocalFile(""));
             QQuickText *textObject = qobject_cast<QQuickText*>(textComponent.create());
-            QCOMPARE(textObject->smooth(), true);
+            QCOMPARE(textObject->smooth(), false);
 
             delete textObject;
         }
@@ -1105,7 +1105,7 @@ void tst_qquicktext::smooth()
             QQmlComponent textComponent(&engine);
             textComponent.setData(componentStr.toLatin1(), QUrl::fromLocalFile(""));
             QQuickText *textObject = qobject_cast<QQuickText*>(textComponent.create());
-            QCOMPARE(textObject->smooth(), false);
+            QCOMPARE(textObject->smooth(), true);
 
             delete textObject;
         }