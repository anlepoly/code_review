diff --git a/src/widgets/kernel/qwidgetwindow.cpp b/src/widgets/kernel/qwidgetwindow.cpp
index b700d33..78d6a29 100644
--- a/src/widgets/kernel/qwidgetwindow.cpp
+++ b/src/widgets/kernel/qwidgetwindow.cpp
@@ -414,6 +414,8 @@ void QWidgetWindow::handleKeyEvent(QKeyEvent *event)
         receiver = popupFocusWidget ? popupFocusWidget : popup;
     }
     if (!receiver)
+        receiver = QWidget::keyboardGrabber();
+    if (!receiver)
         receiver = focusObject();
     QGuiApplication::sendSpontaneousEvent(receiver, event);
 }
diff --git a/tests/auto/widgets/kernel/qwidget/tst_qwidget.cpp b/tests/auto/widgets/kernel/qwidget/tst_qwidget.cpp
index 2a5e59f..432950b 100644
--- a/tests/auto/widgets/kernel/qwidget/tst_qwidget.cpp
+++ b/tests/auto/widgets/kernel/qwidget/tst_qwidget.cpp
@@ -392,6 +392,7 @@ private slots:
     void nativeChildFocus();
     void grab();
     void grabMouse();
+    void grabKeyboard();
 
     void touchEventSynthesizedMouseEvent();
 
@@ -9412,6 +9413,27 @@ void tst_QWidget::grabMouse()
     QCOMPARE(log, expectedLog);
 }
 
+void tst_QWidget::grabKeyboard()
+{
+    QWidget w;
+    w.setObjectName(QLatin1String("tst_qwidget_grabKeyboard"));
+    w.setWindowTitle(w.objectName());
+    QLayout *layout = new QVBoxLayout(&w);
+    QLineEdit *grabber = new QLineEdit(&w);
+    layout->addWidget(grabber);
+    QLineEdit *nonGrabber = new QLineEdit(&w);
+    layout->addWidget(nonGrabber);
+    w.show();
+    qApp->setActiveWindow(&w);
+    QVERIFY(QTest::qWaitForWindowActive(&w));
+    nonGrabber->setFocus();
+    grabber->grabKeyboard();
+    QTest::keyClick(w.windowHandle(), Qt::Key_A);
+    grabber->releaseKeyboard();
+    QCOMPARE(grabber->text().toLower(), QStringLiteral("a"));
+    QVERIFY(nonGrabber->text().isEmpty());
+}
+
 class TouchMouseWidget : public QWidget {
 public:
     explicit TouchMouseWidget(QWidget *parent = 0)