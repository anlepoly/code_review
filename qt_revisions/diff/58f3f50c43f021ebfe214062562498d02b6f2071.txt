diff --git a/tests/auto/qml/debugger/shared/qqmldebugtestservice.cpp b/tests/auto/qml/debugger/shared/qqmldebugtestservice.cpp
index 33f5fc6..884bb7a 100644
--- a/tests/auto/qml/debugger/shared/qqmldebugtestservice.cpp
+++ b/tests/auto/qml/debugger/shared/qqmldebugtestservice.cpp
@@ -54,7 +54,7 @@ void QQmlDebugTestService::messageReceived(const QByteArray &ba)
     QMetaObject::invokeMethod(this, "_sendMessage", Qt::QueuedConnection, Q_ARG(QByteArray, ba));
 }
 
-void QQmlDebugTestService::stateAboutToBeChanged(QQmlDebugService::State state)
+void QQmlDebugTestService::stateAboutToBeChanged(QQmlDebugService::State)
 {
     Q_ASSERT(QThread::currentThread() != thread());
 }
diff --git a/tests/auto/qml/qml.pro b/tests/auto/qml/qml.pro
index dc6c0de..e41c261 100644
--- a/tests/auto/qml/qml.pro
+++ b/tests/auto/qml/qml.pro
@@ -52,9 +52,6 @@ PRIVATETESTS += \
     PUBLICTESTS += \
         qjsengine \
         qjsvalue
-
-    PRIVATETESTS += \
-        qqmlecmascript
 }
 
 SUBDIRS += $$PUBLICTESTS
diff --git a/tests/auto/qml/qqmlecmascript/testtypes.cpp b/tests/auto/qml/qqmlecmascript/testtypes.cpp
index f192cbc..f488c6a 100644
--- a/tests/auto/qml/qqmlecmascript/testtypes.cpp
+++ b/tests/auto/qml/qqmlecmascript/testtypes.cpp
@@ -104,7 +104,7 @@ public:
     void setWidth(int) { }
 };
 
-void MyQmlObject::v8function(QQmlV8Function *args)
+void MyQmlObject::v8function(QQmlV8Function *)
 {
     const char *error = "Exception thrown from within QObject slot";
     v8::ThrowException(v8::Exception::Error(v8::String::New(error)));
diff --git a/tests/auto/qml/qqmlecmascript/testtypes.h b/tests/auto/qml/qqmlecmascript/testtypes.h
index 3c12264..2631002 100644
--- a/tests/auto/qml/qqmlecmascript/testtypes.h
+++ b/tests/auto/qml/qqmlecmascript/testtypes.h
@@ -1158,9 +1158,8 @@ public:
         m_referenced.MakeWeak(static_cast<void*>(this), wrcallback);
     }
 
-    static void wrcallback(v8::Persistent<v8::Value> handle, void *params)
+    static void wrcallback(v8::Persistent<v8::Value> handle, void *)
     {
-        CircularReferenceHandle *crh = static_cast<CircularReferenceHandle*>(params);
         qPersistentDispose(handle);
     }
 
diff --git a/tests/auto/quick/qquickgridview/tst_qquickgridview.cpp b/tests/auto/quick/qquickgridview/tst_qquickgridview.cpp
index 9876a36..472b9a0 100644
--- a/tests/auto/quick/qquickgridview/tst_qquickgridview.cpp
+++ b/tests/auto/quick/qquickgridview/tst_qquickgridview.cpp
@@ -1313,8 +1313,8 @@ void tst_QQuickGridView::moved_defaultLayout(QQuickGridView::Flow flow,
     for (int i = firstVisibleIndex; i < model.count() && i < items.count(); ++i) {
         QQuickItem *item = findItem<QQuickItem>(contentItem, "wrapper", i);
         if (!item &&
-                ( (flow == QQuickGridView::FlowLeftToRight && i >= firstVisibleIndex + (3*6))
-                || flow == QQuickGridView::FlowTopToBottom && i >= firstVisibleIndex + (5*3) ) ) {
+                (  (flow == QQuickGridView::FlowLeftToRight && i >= firstVisibleIndex + (3*6))
+                || (flow == QQuickGridView::FlowTopToBottom && i >= firstVisibleIndex + (5*3)) ) ) {
             continue;   // index has moved out of view
         }
         QVERIFY2(item, QTest::toString(QString("Item %1 not found").arg(i)));
@@ -1559,6 +1559,8 @@ void tst_QQuickGridView::multipleChanges(bool condensed)
             case ListChange::SetContentY:
                 gridview->setContentY(changes[i].pos);
                 break;
+            case ListChange::Polish:
+                break;
         }
         if (condensed) {
             QTRY_COMPARE(QQuickItemPrivate::get(gridview)->polishScheduled, false);
@@ -5428,6 +5430,7 @@ void tst_QQuickGridView::displacedTransitions()
             break;
         case ListChange::SetCurrent:
         case ListChange::SetContentY:
+        case ListChange::Polish:
             break;
     }
 
@@ -5674,6 +5677,8 @@ void tst_QQuickGridView::multipleTransitions()
                 gridview->setContentY(changes[i].pos);
                 QTRY_COMPARE(QQuickItemPrivate::get(gridview)->polishScheduled, false);
                 break;
+            case ListChange::Polish:
+                break;
         }
     }
     QCOMPARE(gridview->count(), model.count());
diff --git a/tests/auto/quick/qquicklistview/tst_qquicklistview.cpp b/tests/auto/quick/qquicklistview/tst_qquicklistview.cpp
index 4997e50..dd6f82a 100644
--- a/tests/auto/quick/qquicklistview/tst_qquicklistview.cpp
+++ b/tests/auto/quick/qquicklistview/tst_qquicklistview.cpp
@@ -4169,7 +4169,6 @@ void tst_QQuickListView::repositionResizedDelegate()
     QFETCH(Qt::LayoutDirection, layoutDirection);
     QFETCH(QQuickItemView::VerticalLayoutDirection, verticalLayoutDirection);
     QFETCH(QPointF, contentPos_itemFirstHalfVisible);
-    QFETCH(QPointF, contentPos_itemStart);
     QFETCH(QPointF, contentPos_itemSecondHalfVisible);
     QFETCH(QRectF, origPositionerRect);
     QFETCH(QRectF, resizedPositionerRect);
@@ -4238,32 +4237,31 @@ void tst_QQuickListView::repositionResizedDelegate_data()
     QTest::addColumn<Qt::LayoutDirection>("layoutDirection");
     QTest::addColumn<QQuickListView::VerticalLayoutDirection>("verticalLayoutDirection");
     QTest::addColumn<QPointF>("contentPos_itemFirstHalfVisible");
-    QTest::addColumn<QPointF>("contentPos_itemStart");
     QTest::addColumn<QPointF>("contentPos_itemSecondHalfVisible");
     QTest::addColumn<QRectF>("origPositionerRect");
     QTest::addColumn<QRectF>("resizedPositionerRect");
 
     QTest::newRow("vertical")
             << QQuickListView::Vertical << Qt::LeftToRight << QQuickItemView::TopToBottom
-            << QPointF(0, 60) << QPointF(0, 200) << QPointF(0, 200 + 60)
+            << QPointF(0, 60) << QPointF(0, 200 + 60)
             << QRectF(0, 200, 120, 120)
             << QRectF(0, 200, 120, 120 * 2);
 
     QTest::newRow("vertical, BottomToTop")
             << QQuickListView::Vertical << Qt::LeftToRight << QQuickItemView::BottomToTop
-            << QPointF(0, -200 - 60) << QPointF(0, -200 - 200) << QPointF(0, -200 - 260)
+            << QPointF(0, -200 - 60) << QPointF(0, -200 - 260)
             << QRectF(0, -200 - 120, 120, 120)
             << QRectF(0, -200 - 120*2, 120, 120 * 2);
 
     QTest::newRow("horizontal")
             << QQuickListView::Horizontal<< Qt::LeftToRight << QQuickItemView::TopToBottom
-            << QPointF(60, 0) << QPointF(200, 0) << QPointF(260, 0)
+            << QPointF(60, 0) << QPointF(260, 0)
             << QRectF(200, 0, 120, 120)
             << QRectF(200, 0, 120 * 2, 120);
 
     QTest::newRow("horizontal, rtl")
             << QQuickListView::Horizontal << Qt::RightToLeft << QQuickItemView::TopToBottom
-            << QPointF(-200 - 60, 0) << QPointF(-200 - 200, 0) << QPointF(-200 - 260, 0)
+            << QPointF(-200 - 60, 0) << QPointF(-200 - 260, 0)
             << QRectF(-200 - 120, 0, 120, 120)
             << QRectF(-200 - 120 * 2, 0, 120 * 2, 120);
 }
@@ -6238,6 +6236,7 @@ void tst_QQuickListView::displacedTransitions()
             break;
         case ListChange::SetCurrent:
         case ListChange::SetContentY:
+        case ListChange::Polish:
             break;
     }
 
@@ -6484,6 +6483,8 @@ void tst_QQuickListView::multipleTransitions()
                 listview->setContentY(changes[i].pos);
                 QTRY_COMPARE(QQuickItemPrivate::get(listview)->polishScheduled, false);
                 break;
+            case ListChange::Polish:
+                break;
         }
     }
     QCOMPARE(listview->count(), model.count());
diff --git a/tests/auto/quick/qquickpositioners/tst_qquickpositioners.cpp b/tests/auto/quick/qquickpositioners/tst_qquickpositioners.cpp
index 920db00..1b7adbe 100644
--- a/tests/auto/quick/qquickpositioners/tst_qquickpositioners.cpp
+++ b/tests/auto/quick/qquickpositioners/tst_qquickpositioners.cpp
@@ -660,8 +660,8 @@ void tst_qquickpositioners::addTransitions(const QString &positionerObjectName)
 
     QQuickView *canvas = QQuickViewTestUtil::createView();
     QQmlContext *ctxt = canvas->rootContext();
-    ctxt->setContextProperty("usePopulateTransition", false);
-    ctxt->setContextProperty("enableAddTransition", true);
+    ctxt->setContextProperty("usePopulateTransition", QVariant(false));
+    ctxt->setContextProperty("enableAddTransition", QVariant(true));
     ctxt->setContextProperty("model_targetItems_transitionFrom", &model_targetItems_transitionFrom);
     ctxt->setContextProperty("model_displacedItems_transitionVia", &model_displacedItems_transitionVia);
     ctxt->setContextProperty("targetItems_transitionFrom", targetItems_transitionFrom);
@@ -773,7 +773,7 @@ void tst_qquickpositioners::moveTransitions(const QString &positionerObjectName)
 
     QQuickView *canvas = QQuickViewTestUtil::createView();
     QQmlContext *ctxt = canvas->rootContext();
-    ctxt->setContextProperty("usePopulateTransition", false);
+    ctxt->setContextProperty("usePopulateTransition", QVariant(false));
     ctxt->setContextProperty("enableAddTransition", QVariant(false));
     ctxt->setContextProperty("model_targetItems_transitionFrom", &model_targetItems_transitionFrom);
     ctxt->setContextProperty("model_displacedItems_transitionVia", &model_displacedItems_transitionVia);
@@ -804,6 +804,8 @@ void tst_qquickpositioners::moveTransitions(const QString &positionerObjectName)
         case ListChange::SetContentY:
             QVERIFY(false);
             break;
+         case ListChange::Polish:
+            break;
     }
 
     QTRY_COMPARE(canvas->rootObject()->property("displaceTransitionsDone").toInt(), expectedDisplacedIndexes.count());