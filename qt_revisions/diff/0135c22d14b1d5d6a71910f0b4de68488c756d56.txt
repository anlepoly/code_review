diff --git a/src/serialport.cpp b/src/serialport.cpp
index 82dd6e7..4d8c344 100755
--- a/src/serialport.cpp
+++ b/src/serialport.cpp
@@ -564,7 +564,7 @@ bool SerialPortPrivate::readFromPort()
         return true;
     }
 
-    readBuffer.chop(int(bytesToRead - (readBytes < 0 ? 0 : readBytes)));
+    readBuffer.chop(int(bytesToRead - qMax(readBytes, qint64(0))));
 
     if (readBytes < 0) {
         setError(SerialPort::IoError);
@@ -1577,7 +1577,7 @@ static int qt_timeout_value(int msecs, int elapsed)
     if (msecs == -1)
         return msecs;
     msecs -= elapsed;
-    return msecs < 0 ? 0 : msecs;
+    return qMax(msecs, 0);
 }
 
 /*! \reimp
@@ -1763,7 +1763,7 @@ qint64 SerialPort::readData(char *data, qint64 maxSize)
             if (readBytes == -2)
                 d->readBuffer.chop(bytesToRead); // No bytes currently available for reading.
             else
-                d->readBuffer.chop(int(bytesToRead - (readBytes < 0 ? 0 : readBytes)));
+                d->readBuffer.chop(int(bytesToRead - qMax(readBytes, qint64(0))));
         }
     }
 
diff --git a/src/serialportengine_win.cpp b/src/serialportengine_win.cpp
index e9fecc3..ae1ca50 100755
--- a/src/serialportengine_win.cpp
+++ b/src/serialportengine_win.cpp
@@ -630,7 +630,7 @@ bool WinSerialPortEngine::select(int timeout,
         sucessResult = true;
     } else if (::GetLastError() == ERROR_IO_PENDING) {
         DWORD bytesTransferred = 0;
-        if (::WaitForSingleObject(m_selectOverlapped.hEvent, timeout < 0 ? 0 : timeout) == WAIT_OBJECT_0
+        if (::WaitForSingleObject(m_selectOverlapped.hEvent, qMax(timeout, 0)) == WAIT_OBJECT_0
                 && ::GetOverlappedResult(m_descriptor, &m_selectOverlapped, &bytesTransferred, false)) {
             sucessResult = true;
         } else {
@@ -641,7 +641,7 @@ bool WinSerialPortEngine::select(int timeout,
     // FIXME: Here the situation is not properly handled with zero timeout:
     // breaker can work out before you call a method WaitCommEvent()
     // and so it will loop forever!
-    WinCeWaitCommEventBreaker breaker(m_descriptor, timeout < 0 ? 0 : timeout);
+    WinCeWaitCommEventBreaker breaker(m_descriptor, qMax(timeout, 0));
     ::WaitCommEvent(m_descriptor, &currEventMask, 0);
     breaker.stop();
     sucessResult = !breaker.isWorked();