diff --git a/src/gui/kernel/kernel.pri b/src/gui/kernel/kernel.pri
index b46a9f0..bc0cb4e 100644
--- a/src/gui/kernel/kernel.pri
+++ b/src/gui/kernel/kernel.pri
@@ -52,7 +52,8 @@ HEADERS += \
         kernel/qstylehints.h \
         kernel/qtouchdevice.h \
         kernel/qtouchdevice_p.h \
-        kernel/qplatformsharedgraphicscache_qpa.h
+        kernel/qplatformsharedgraphicscache_qpa.h \
+        kernel/qplatformdialoghelper_qpa.h
 
 SOURCES += \
         kernel/qclipboard_qpa.cpp \
@@ -93,7 +94,8 @@ SOURCES += \
         kernel/qshortcutmap.cpp \
         kernel/qstylehints.cpp \
         kernel/qtouchdevice.cpp \
-        kernel/qplatformsharedgraphicscache_qpa.cpp
+        kernel/qplatformsharedgraphicscache_qpa.cpp \
+        kernel/qplatformdialoghelper_qpa.cpp
 
 contains(QT_CONFIG, opengl)|contains(QT_CONFIG, opengles2)|contains(QT_CONFIG, egl) {
     HEADERS += \
diff --git a/src/gui/kernel/qplatformdialoghelper_qpa.cpp b/src/gui/kernel/qplatformdialoghelper_qpa.cpp
new file mode 100644
index 0000000..3854848
--- /dev/null
+++ b/src/gui/kernel/qplatformdialoghelper_qpa.cpp
@@ -0,0 +1,556 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/
+**
+** This file is part of the QtGui module of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** GNU Lesser General Public License Usage
+** This file may be used under the terms of the GNU Lesser General Public
+** License version 2.1 as published by the Free Software Foundation and
+** appearing in the file LICENSE.LGPL included in the packaging of this
+** file. Please review the following information to ensure the GNU Lesser
+** General Public License version 2.1 requirements will be met:
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** In addition, as a special exception, Nokia gives you certain additional
+** rights. These rights are described in the Nokia Qt LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU General
+** Public License version 3.0 as published by the Free Software Foundation
+** and appearing in the file LICENSE.GPL included in the packaging of this
+** file. Please review the following information to ensure the GNU General
+** Public License version 3.0 requirements will be met:
+** http://www.gnu.org/copyleft/gpl.html.
+**
+** Other Usage
+** Alternatively, this file may be used in accordance with the terms and
+** conditions contained in a signed written agreement between you and Nokia.
+**
+**
+**
+**
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#include "qplatformdialoghelper_qpa.h"
+
+#include <QtCore/QVariant>
+#include <QtCore/QSharedData>
+#include <QtCore/QSettings>
+#include <QtCore/QHash>
+#include <QtCore/QUrl>
+#include <QtGui/QColor>
+
+QT_BEGIN_NAMESPACE
+
+/*!
+    \class QPlatformDialogHelper
+    \since 5.0
+    \internal
+    \brief The QPlatformDialogHelper class allows for platform-specific customization of dialogs.
+
+*/
+
+/*!
+    \enum QPlatformDialogHelper::StyleHint
+
+    This enum type specifies platform-specific style hints.
+
+    \value SnapToDefaultButton Snap the mouse to the center of the default
+                               button. There is corresponding system
+                               setting on Windows.
+
+    \sa styleHint()
+*/
+
+QPlatformDialogHelper::QPlatformDialogHelper()
+{
+}
+
+QPlatformDialogHelper::~QPlatformDialogHelper()
+{
+}
+
+QVariant QPlatformDialogHelper::styleHint(StyleHint hint) const
+{
+    return QPlatformDialogHelper::defaultStyleHint(hint);
+}
+
+QVariant  QPlatformDialogHelper::defaultStyleHint(QPlatformDialogHelper::StyleHint hint)
+{
+    switch (hint) {
+    case QPlatformDialogHelper::SnapToDefaultButton:
+        return QVariant(false);
+    }
+    return QVariant();
+}
+
+void QPlatformDialogHelper::emitLaunchNativeAppModalPanel()
+{
+    emit launchNativeAppModalPanel();
+}
+
+// Font dialog
+
+class QFontDialogOptionsPrivate : public QSharedData
+{
+public:
+    QFontDialogOptionsPrivate() : options(0) {}
+
+    QFontDialogOptions::FontDialogOptions options;
+    QString windowTitle;
+};
+
+QFontDialogOptions::QFontDialogOptions() : d(new QFontDialogOptionsPrivate)
+{
+}
+
+QFontDialogOptions::QFontDialogOptions(const QFontDialogOptions &rhs) : d(rhs.d)
+{
+}
+
+QFontDialogOptions &QFontDialogOptions::operator=(const QFontDialogOptions &rhs)
+{
+    if (this != &rhs)
+        d = rhs.d;
+    return *this;
+}
+
+QFontDialogOptions::~QFontDialogOptions()
+{
+}
+
+QString QFontDialogOptions::windowTitle() const
+{
+    return d->windowTitle;
+}
+
+void QFontDialogOptions::setWindowTitle(const QString &title)
+{
+    d->windowTitle = title;
+}
+
+void QFontDialogOptions::setOption(QFontDialogOptions::FontDialogOption option, bool on)
+{
+    if (!(d->options & option) != !on)
+        setOptions(d->options ^ option);
+}
+
+bool QFontDialogOptions::testOption(QFontDialogOptions::FontDialogOption option) const
+{
+    return d->options & option;
+}
+
+void QFontDialogOptions::setOptions(FontDialogOptions options)
+{
+    if (options != d->options)
+        d->options = options;
+}
+
+QFontDialogOptions::FontDialogOptions QFontDialogOptions::options() const
+{
+    return d->options;
+}
+
+const QSharedPointer<QFontDialogOptions> &QPlatformFontDialogHelper::options() const
+{
+    return m_options;
+}
+
+void QPlatformFontDialogHelper::setOptions(const QSharedPointer<QFontDialogOptions> &options)
+{
+    m_options = options;
+}
+
+// Color dialog
+
+class QColorDialogStaticData
+{
+public:
+    enum { CustomColorCount = 16, StandardColorCount = 6 * 8 };
+
+    QColorDialogStaticData();
+    inline void readSettings();
+    inline void writeSettings() const;
+
+    QRgb customRgb[CustomColorCount];
+    QRgb standardRgb[StandardColorCount];
+    bool customSet;
+};
+
+QColorDialogStaticData::QColorDialogStaticData() : customSet(false)
+{
+    int i = 0;
+    for (int g = 0; g < 4; ++g)
+        for (int r = 0;  r < 4; ++r)
+            for (int b = 0; b < 3; ++b)
+                standardRgb[i++] = qRgb(r * 255 / 3, g * 255 / 3, b * 255 / 2);
+    qFill(customRgb, customRgb + CustomColorCount, 0xffffffff);
+    readSettings();
+}
+
+void QColorDialogStaticData::readSettings()
+{
+#ifndef QT_NO_SETTINGS
+    const QSettings settings(QSettings::UserScope, QStringLiteral("Trolltech"));
+    for (int i = 0; i < int(CustomColorCount); ++i) {
+        const QVariant v = settings.value(QStringLiteral("Qt/customColors/") + QString::number(i));
+        if (v.isValid())
+            customRgb[i] = v.toUInt();
+    }
+#endif
+}
+
+void QColorDialogStaticData::writeSettings() const
+{
+#ifndef QT_NO_SETTINGS
+    if (!customSet) {
+        QSettings settings(QSettings::UserScope, QStringLiteral("Trolltech"));
+        for (int i = 0; i < int(CustomColorCount); ++i)
+            settings.setValue(QStringLiteral("Qt/customColors/") + QString::number(i), customRgb[i]);
+    }
+#endif
+}
+
+Q_GLOBAL_STATIC(QColorDialogStaticData, qColorDialogStaticData)
+
+class QColorDialogOptionsPrivate : public QSharedData
+{
+public:
+    QColorDialogOptionsPrivate() : options(0) {}
+    // Write out settings around destruction of dialogs
+    ~QColorDialogOptionsPrivate() { qColorDialogStaticData()->writeSettings(); }
+
+    QColorDialogOptions::ColorDialogOptions options;
+    QString windowTitle;
+};
+
+QColorDialogOptions::QColorDialogOptions() : d(new QColorDialogOptionsPrivate)
+{
+}
+
+QColorDialogOptions::QColorDialogOptions(const QColorDialogOptions &rhs) : d(rhs.d)
+{
+}
+
+QColorDialogOptions &QColorDialogOptions::operator=(const QColorDialogOptions &rhs)
+{
+    if (this != &rhs)
+        d = rhs.d;
+    return *this;
+}
+
+QColorDialogOptions::~QColorDialogOptions()
+{
+}
+
+QString QColorDialogOptions::windowTitle() const
+{
+    return d->windowTitle;
+}
+
+void QColorDialogOptions::setWindowTitle(const QString &title)
+{
+    d->windowTitle = title;
+}
+
+void QColorDialogOptions::setOption(QColorDialogOptions::ColorDialogOption option, bool on)
+{
+    if (!(d->options & option) != !on)
+        setOptions(d->options ^ option);
+}
+
+bool QColorDialogOptions::testOption(QColorDialogOptions::ColorDialogOption option) const
+{
+    return d->options & option;
+}
+
+void QColorDialogOptions::setOptions(ColorDialogOptions options)
+{
+    if (options != d->options)
+        d->options = options;
+}
+
+QColorDialogOptions::ColorDialogOptions QColorDialogOptions::options() const
+{
+    return d->options;
+}
+
+int QColorDialogOptions::customColorCount()
+{
+    return QColorDialogStaticData::CustomColorCount;
+}
+
+QRgb QColorDialogOptions::customColor(int index)
+{
+    if (uint(index) >= uint(QColorDialogStaticData::CustomColorCount))
+        return qRgb(255, 255, 255);
+    return qColorDialogStaticData()->customRgb[index];
+}
+
+QRgb *QColorDialogOptions::customColors()
+{
+    return qColorDialogStaticData()->customRgb;
+}
+
+void QColorDialogOptions::setCustomColor(int index, QRgb color)
+{
+    if (uint(index) >= uint(QColorDialogStaticData::CustomColorCount))
+        return;
+    qColorDialogStaticData()->customSet;
+    qColorDialogStaticData()->customRgb[index] = color;
+}
+
+QRgb *QColorDialogOptions::standardColors()
+{
+    return qColorDialogStaticData()->standardRgb;
+}
+
+QRgb QColorDialogOptions::standardColor(int index)
+{
+    if (uint(index) >= uint(QColorDialogStaticData::StandardColorCount))
+        return qRgb(255, 255, 255);
+    return qColorDialogStaticData()->standardRgb[index];
+}
+
+void QColorDialogOptions::setStandardColor(int index, QRgb color)
+{
+    if (uint(index) >= uint(QColorDialogStaticData::StandardColorCount))
+        return;
+    qColorDialogStaticData()->standardRgb[index] = color;
+}
+
+const QSharedPointer<QColorDialogOptions> &QPlatformColorDialogHelper::options() const
+{
+    return m_options;
+}
+
+void QPlatformColorDialogHelper::setOptions(const QSharedPointer<QColorDialogOptions> &options)
+{
+    m_options = options;
+}
+
+// File dialog
+
+class QFileDialogOptionsPrivate : public QSharedData
+{
+public:
+    QFileDialogOptionsPrivate() : options(0),
+        viewMode(QFileDialogOptions::Detail),
+        fileMode(QFileDialogOptions::AnyFile),
+        acceptMode(QFileDialogOptions::AcceptOpen),
+        filters(QDir::AllEntries | QDir::NoDotAndDotDot | QDir::AllDirs)
+    {}
+
+    QFileDialogOptions::FileDialogOptions options;
+    QString windowTitle;
+
+    QFileDialogOptions::ViewMode viewMode;
+    QFileDialogOptions::FileMode fileMode;
+    QFileDialogOptions::AcceptMode acceptMode;
+    QString labels[QFileDialogOptions::DialogLabelCount];
+    QDir::Filters filters;
+    QList<QUrl> sidebarUrls;
+    QStringList nameFilters;
+    QString defaultSuffix;
+    QStringList history;
+    QString initialDirectory;
+    QString initiallySelectedNameFilter;
+    QStringList initiallySelectedFiles;
+};
+
+QFileDialogOptions::QFileDialogOptions() : d(new QFileDialogOptionsPrivate)
+{
+}
+
+QFileDialogOptions::QFileDialogOptions(const QFileDialogOptions &rhs) : d(rhs.d)
+{
+}
+
+QFileDialogOptions &QFileDialogOptions::operator=(const QFileDialogOptions &rhs)
+{
+    if (this != &rhs)
+        d = rhs.d;
+    return *this;
+}
+
+QFileDialogOptions::~QFileDialogOptions()
+{
+}
+
+QString QFileDialogOptions::windowTitle() const
+{
+    return d->windowTitle;
+}
+
+void QFileDialogOptions::setWindowTitle(const QString &title)
+{
+    d->windowTitle = title;
+}
+
+void QFileDialogOptions::setOption(QFileDialogOptions::FileDialogOption option, bool on)
+{
+    if (!(d->options & option) != !on)
+        setOptions(d->options ^ option);
+}
+
+bool QFileDialogOptions::testOption(QFileDialogOptions::FileDialogOption option) const
+{
+    return d->options & option;
+}
+
+void QFileDialogOptions::setOptions(FileDialogOptions options)
+{
+    if (options != d->options)
+        d->options = options;
+}
+
+QFileDialogOptions::FileDialogOptions QFileDialogOptions::options() const
+{
+    return d->options;
+}
+
+QDir::Filters QFileDialogOptions::filter() const
+{
+    return d->filters;
+}
+
+void QFileDialogOptions::setFilter(QDir::Filters filters)
+{
+    d->filters  = filters;
+}
+
+void QFileDialogOptions::setViewMode(QFileDialogOptions::ViewMode mode)
+{
+    d->viewMode = mode;
+}
+
+QFileDialogOptions::ViewMode QFileDialogOptions::viewMode() const
+{
+    return d->viewMode;
+}
+
+void QFileDialogOptions::setFileMode(QFileDialogOptions::FileMode mode)
+{
+    d->fileMode = mode;
+}
+
+QFileDialogOptions::FileMode QFileDialogOptions::fileMode() const
+{
+    return d->fileMode;
+}
+
+void QFileDialogOptions::setAcceptMode(QFileDialogOptions::AcceptMode mode)
+{
+    d->acceptMode = mode;
+}
+
+QFileDialogOptions::AcceptMode QFileDialogOptions::acceptMode() const
+{
+    return d->acceptMode;
+}
+
+void QFileDialogOptions::setSidebarUrls(const QList<QUrl> &urls)
+{
+    d->sidebarUrls = urls;
+}
+
+QList<QUrl> QFileDialogOptions::sidebarUrls() const
+{
+    return d->sidebarUrls;
+}
+
+void QFileDialogOptions::setNameFilters(const QStringList &filters)
+{
+    d->nameFilters = filters;
+}
+
+QStringList QFileDialogOptions::nameFilters() const
+{
+    return d->nameFilters;
+}
+
+void QFileDialogOptions::setDefaultSuffix(const QString &suffix)
+{
+    d->defaultSuffix = suffix;
+}
+
+QString QFileDialogOptions::defaultSuffix() const
+{
+    return d->defaultSuffix;
+}
+
+void QFileDialogOptions::setHistory(const QStringList &paths)
+{
+    d->history = paths;
+}
+
+QStringList QFileDialogOptions::history() const
+{
+    return d->history;
+}
+
+void QFileDialogOptions::setLabelText(QFileDialogOptions::DialogLabel label, const QString &text)
+{
+    if (label >= 0 && label < DialogLabelCount)
+        d->labels[label] = text;
+}
+
+QString QFileDialogOptions::labelText(QFileDialogOptions::DialogLabel label) const
+{
+    return (label >= 0 && label < DialogLabelCount) ? d->labels[label] : QString();
+}
+
+bool QFileDialogOptions::isLabelExplicitlySet(DialogLabel label)
+{
+    return label >= 0 && label < DialogLabelCount && !d->labels[label].isEmpty();
+}
+
+QString QFileDialogOptions::initialDirectory() const
+{
+    return d->initialDirectory;
+}
+
+void QFileDialogOptions::setInitialDirectory(const QString &directory)
+{
+    d->initialDirectory = directory;
+}
+
+QString QFileDialogOptions::initiallySelectedNameFilter() const
+{
+    return d->initiallySelectedNameFilter;
+}
+
+void QFileDialogOptions::setInitiallySelectedNameFilter(const QString &filter)
+{
+    d->initiallySelectedNameFilter = filter;
+}
+
+QStringList QFileDialogOptions::initiallySelectedFiles() const
+{
+    return d->initiallySelectedFiles;
+}
+
+void QFileDialogOptions::setInitiallySelectedFiles(const QStringList &files)
+{
+    d->initiallySelectedFiles = files;
+}
+
+const QSharedPointer<QFileDialogOptions> &QPlatformFileDialogHelper::options() const
+{
+    return m_options;
+}
+
+void QPlatformFileDialogHelper::setOptions(const QSharedPointer<QFileDialogOptions> &options)
+{
+    m_options = options;
+}
+
+QT_END_NAMESPACE
diff --git a/src/gui/kernel/qplatformdialoghelper_qpa.h b/src/gui/kernel/qplatformdialoghelper_qpa.h
new file mode 100644
index 0000000..5fdffae
--- /dev/null
+++ b/src/gui/kernel/qplatformdialoghelper_qpa.h
@@ -0,0 +1,314 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/
+**
+** This file is part of the QtGui module of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** GNU Lesser General Public License Usage
+** This file may be used under the terms of the GNU Lesser General Public
+** License version 2.1 as published by the Free Software Foundation and
+** appearing in the file LICENSE.LGPL included in the packaging of this
+** file. Please review the following information to ensure the GNU Lesser
+** General Public License version 2.1 requirements will be met:
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** In addition, as a special exception, Nokia gives you certain additional
+** rights. These rights are described in the Nokia Qt LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU General
+** Public License version 3.0 as published by the Free Software Foundation
+** and appearing in the file LICENSE.GPL included in the packaging of this
+** file. Please review the following information to ensure the GNU General
+** Public License version 3.0 requirements will be met:
+** http://www.gnu.org/copyleft/gpl.html.
+**
+** Other Usage
+** Alternatively, this file may be used in accordance with the terms and
+** conditions contained in a signed written agreement between you and Nokia.
+**
+**
+**
+**
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#ifndef QPLATFORMDIALOGHELPER_H
+#define QPLATFORMDIALOGHELPER_H
+
+#include <QtCore/QtGlobal>
+#include <QtCore/QObject>
+#include <QtCore/QList>
+#include <QtCore/QSharedDataPointer>
+#include <QtCore/QSharedPointer>
+#include <QtCore/QDir>
+#include <QtGui/QRgb>
+
+QT_BEGIN_HEADER
+
+QT_BEGIN_NAMESPACE
+
+
+class QString;
+class QColor;
+class QFont;
+class QWindow;
+class QVariant;
+class QUrl;
+class QColorDialogOptionsPrivate;
+class QFontDialogOptionsPrivate;
+class QFileDialogOptionsPrivate;
+
+class Q_GUI_EXPORT QPlatformDialogHelper : public QObject
+{
+    Q_OBJECT
+public:
+    enum StyleHint {
+        SnapToDefaultButton
+    };
+    enum DialogCode { Rejected, Accepted };
+    enum ShowFlag {
+        ShowModal    = 0x00000001
+    };
+
+    Q_DECLARE_FLAGS(ShowFlags, ShowFlag)
+
+    QPlatformDialogHelper();
+    virtual ~QPlatformDialogHelper();
+
+    virtual QVariant styleHint(StyleHint hint) const;
+
+    virtual void platformNativeDialogModalHelp() = 0;
+    virtual void _q_platformRunNativeAppModalPanel() = 0;
+
+    virtual void deleteNativeDialog_sys() = 0;
+    virtual bool show_sys(ShowFlags showFlags,
+                          Qt::WindowFlags windowFlags,
+                          QWindow *parent) = 0;
+    virtual void hide_sys() = 0;
+
+    virtual DialogCode dialogResultCode_sys() = 0;
+
+    static QVariant defaultStyleHint(QPlatformDialogHelper::StyleHint hint);
+
+Q_SIGNALS:
+    void launchNativeAppModalPanel();
+    void accept();
+    void reject();
+
+protected Q_SLOTS:
+    void emitLaunchNativeAppModalPanel();
+};
+
+class Q_GUI_EXPORT QColorDialogOptions
+{
+public:
+    enum ColorDialogOption {
+        ShowAlphaChannel    = 0x00000001,
+        NoButtons           = 0x00000002,
+        DontUseNativeDialog = 0x00000004
+    };
+
+    Q_DECLARE_FLAGS(ColorDialogOptions, ColorDialogOption)
+
+    QColorDialogOptions();
+    QColorDialogOptions(const QColorDialogOptions &rhs);
+    QColorDialogOptions &operator=(const QColorDialogOptions &rhs);
+    ~QColorDialogOptions();
+
+    QString windowTitle() const;
+    void setWindowTitle(const QString &);
+
+    void setOption(ColorDialogOption option, bool on = true);
+    bool testOption(ColorDialogOption option) const;
+    void setOptions(ColorDialogOptions options);
+    ColorDialogOptions options() const;
+
+    static int customColorCount();
+    static QRgb customColor(int index);
+    static QRgb *customColors();
+    static void setCustomColor(int index, QRgb color);
+
+    static QRgb *standardColors();
+    static QRgb standardColor(int index);
+    static void setStandardColor(int index, QRgb color);
+
+private:
+    QSharedDataPointer<QColorDialogOptionsPrivate> d;
+};
+
+class Q_GUI_EXPORT QPlatformColorDialogHelper : public QPlatformDialogHelper
+{
+    Q_OBJECT
+public:
+    const QSharedPointer<QColorDialogOptions> &options() const;
+    void setOptions(const QSharedPointer<QColorDialogOptions> &options);
+
+    virtual void setCurrentColor_sys(const QColor &) = 0;
+    virtual QColor currentColor_sys() const = 0;
+
+Q_SIGNALS:
+    void currentColorChanged(const QColor &color);
+    void colorSelected(const QColor &color);
+
+private:
+    QSharedPointer<QColorDialogOptions> m_options;
+};
+
+class Q_GUI_EXPORT QFontDialogOptions
+{
+public:
+    enum FontDialogOption {
+        NoButtons           = 0x00000001,
+        DontUseNativeDialog = 0x00000002
+    };
+
+    Q_DECLARE_FLAGS(FontDialogOptions, FontDialogOption)
+
+    QFontDialogOptions();
+    QFontDialogOptions(const QFontDialogOptions &rhs);
+    QFontDialogOptions &operator=(const QFontDialogOptions &rhs);
+    ~QFontDialogOptions();
+
+    QString windowTitle() const;
+    void setWindowTitle(const QString &);
+
+    void setOption(FontDialogOption option, bool on = true);
+    bool testOption(FontDialogOption option) const;
+    void setOptions(FontDialogOptions options);
+    FontDialogOptions options() const;
+
+private:
+    QSharedDataPointer<QFontDialogOptionsPrivate> d;
+};
+
+class Q_GUI_EXPORT QPlatformFontDialogHelper : public QPlatformDialogHelper
+{
+    Q_OBJECT
+public:
+    virtual void setCurrentFont_sys(const QFont &) = 0;
+    virtual QFont currentFont_sys() const = 0;
+
+    const QSharedPointer<QFontDialogOptions> &options() const;
+    void setOptions(const QSharedPointer<QFontDialogOptions> &options);
+
+Q_SIGNALS:
+    void currentFontChanged(const QFont &font);
+    void fontSelected(const QFont &font);
+
+private:
+    QSharedPointer<QFontDialogOptions> m_options;
+};
+
+class Q_GUI_EXPORT QFileDialogOptions
+{
+public:
+    enum ViewMode { Detail, List };
+    enum FileMode { AnyFile, ExistingFile, Directory, ExistingFiles, DirectoryOnly };
+    enum AcceptMode { AcceptOpen, AcceptSave };
+    enum DialogLabel { LookIn, FileName, FileType, Accept, Reject, DialogLabelCount };
+
+    enum FileDialogOption
+    {
+        ShowDirsOnly          = 0x00000001,
+        DontResolveSymlinks   = 0x00000002,
+        DontConfirmOverwrite  = 0x00000004,
+        DontUseSheet          = 0x00000008,
+        DontUseNativeDialog   = 0x00000010,
+        ReadOnly              = 0x00000020,
+        HideNameFilterDetails = 0x00000040
+    };
+    Q_DECLARE_FLAGS(FileDialogOptions, FileDialogOption)
+
+    QFileDialogOptions();
+    QFileDialogOptions(const QFileDialogOptions &rhs);
+    QFileDialogOptions &operator=(const QFileDialogOptions &rhs);
+    ~QFileDialogOptions();
+
+    QString windowTitle() const;
+    void setWindowTitle(const QString &);
+
+    void setOption(FileDialogOption option, bool on = true);
+    bool testOption(FileDialogOption option) const;
+    void setOptions(FileDialogOptions options);
+    FileDialogOptions options() const;
+
+    QDir::Filters filter() const;
+    void setFilter(QDir::Filters filters);
+
+    void setViewMode(ViewMode mode);
+    ViewMode viewMode() const;
+
+    void setFileMode(FileMode mode);
+    FileMode fileMode() const;
+
+    void setAcceptMode(AcceptMode mode);
+    AcceptMode acceptMode() const;
+
+    void setSidebarUrls(const QList<QUrl> &urls);
+    QList<QUrl> sidebarUrls() const;
+
+    void setNameFilters(const QStringList &filters);
+    QStringList nameFilters() const;
+
+    void setDefaultSuffix(const QString &suffix);
+    QString defaultSuffix() const;
+
+    void setHistory(const QStringList &paths);
+    QStringList history() const;
+
+    void setLabelText(DialogLabel label, const QString &text);
+    QString labelText(DialogLabel label) const;
+    bool isLabelExplicitlySet(DialogLabel label);
+
+    QString initialDirectory() const;
+    void setInitialDirectory(const QString &);
+
+    QString initiallySelectedNameFilter() const;
+    void setInitiallySelectedNameFilter(const QString &);
+
+    QStringList initiallySelectedFiles() const;
+    void setInitiallySelectedFiles(const QStringList &);
+
+private:
+    QSharedDataPointer<QFileDialogOptionsPrivate> d;
+};
+
+class Q_GUI_EXPORT QPlatformFileDialogHelper : public QPlatformDialogHelper
+{
+    Q_OBJECT
+public:
+    virtual bool defaultNameFilterDisables() const = 0;
+    virtual void setDirectory_sys(const QString &directory) = 0;
+    virtual QString directory_sys() const = 0;
+    virtual void selectFile_sys(const QString &filename) = 0;
+    virtual QStringList selectedFiles_sys() const = 0;
+    virtual void setFilter_sys() = 0;
+    virtual void selectNameFilter_sys(const QString &filter) = 0;
+    virtual QString selectedNameFilter_sys() const = 0;
+
+    const QSharedPointer<QFileDialogOptions> &options() const;
+    void setOptions(const QSharedPointer<QFileDialogOptions> &options);
+
+Q_SIGNALS:
+    void fileSelected(const QString &file);
+    void filesSelected(const QStringList &files);
+    void currentChanged(const QString &path);
+    void directoryEntered(const QString &directory);
+    void filterSelected(const QString &filter);
+
+private:
+    QSharedPointer<QFileDialogOptions> m_options;
+};
+
+QT_END_NAMESPACE
+
+QT_END_HEADER
+
+#endif // QPLATFORMDIALOGHELPER_H
diff --git a/src/plugins/platforms/windows/qwindowsdialoghelpers.cpp b/src/plugins/platforms/windows/qwindowsdialoghelpers.cpp
index 2d5690f..f7863ae 100644
--- a/src/plugins/platforms/windows/qwindowsdialoghelpers.cpp
+++ b/src/plugins/platforms/windows/qwindowsdialoghelpers.cpp
@@ -41,8 +41,6 @@
 
 #include "qwindowsdialoghelpers.h"
 
-#ifdef QT_WIDGETS_LIB
-
 #include "qwindowscontext.h"
 #include "qwindowswindow.h"
 
@@ -1387,5 +1385,3 @@ QPlatformDialogHelper *createHelper(QPlatformTheme::DialogType type)
 QT_END_NAMESPACE
 
 #include "qwindowsdialoghelpers.moc"
-
-#endif // QT_WIDGETS_LIB
diff --git a/src/plugins/platforms/windows/qwindowsdialoghelpers.h b/src/plugins/platforms/windows/qwindowsdialoghelpers.h
index db72e08..3ae22e6 100644
--- a/src/plugins/platforms/windows/qwindowsdialoghelpers.h
+++ b/src/plugins/platforms/windows/qwindowsdialoghelpers.h
@@ -42,10 +42,8 @@
 #ifndef QWINDOWSDIALOGHELPER_H
 #define QWINDOWSDIALOGHELPER_H
 
-#ifdef QT_WIDGETS_LIB
-
 #include "qtwindows_additional.h"
-#include <QtWidgets/qplatformdialoghelper_qpa.h>
+#include <QtGui/QPlatformDialogHelper>
 #include <QtGui/QPlatformTheme>
 #include <QtCore/QStringList>
 
@@ -95,5 +93,4 @@ private:
 
 QT_END_NAMESPACE
 
-#endif // QT_WIDGETS_LIB
 #endif // QWINDOWSDIALOGHELPER_H
diff --git a/src/plugins/platforms/windows/windows.pro b/src/plugins/platforms/windows/windows.pro
index 4b72025..ef8c69d 100644
--- a/src/plugins/platforms/windows/windows.pro
+++ b/src/plugins/platforms/windows/windows.pro
@@ -4,8 +4,6 @@ load(qt_plugin)
 QT *= core-private
 QT *= gui-private
 QT *= platformsupport-private
-# ### fixme: Remove widgets dependencies of dialog helpers
-QT *= widgets
 
 INCLUDEPATH += ../../../3rdparty/harfbuzz/src
 QTDIR_build:DESTDIR = $$QT_BUILD_TREE/plugins/platforms
diff --git a/src/widgets/dialogs/qdialog_p.h b/src/widgets/dialogs/qdialog_p.h
index f458b73..ca99600 100644
--- a/src/widgets/dialogs/qdialog_p.h
+++ b/src/widgets/dialogs/qdialog_p.h
@@ -58,7 +58,7 @@
 #include "QtCore/qpointer.h"
 #include "QtWidgets/qdialog.h"
 #include "QtWidgets/qpushbutton.h"
-#include "QtWidgets/qplatformdialoghelper_qpa.h"
+#include <QtGui/QPlatformDialogHelper>
 
 QT_BEGIN_NAMESPACE
 
diff --git a/src/widgets/dialogs/qfiledialog.cpp b/src/widgets/dialogs/qfiledialog.cpp
index e5a2407..db13cfe 100644
--- a/src/widgets/dialogs/qfiledialog.cpp
+++ b/src/widgets/dialogs/qfiledialog.cpp
@@ -45,7 +45,6 @@
 
 #ifndef QT_NO_FILEDIALOG
 #include "qfiledialog_p.h"
-#include "qplatformdialoghelper_qpa.h"
 #include <private/qguiapplication_p.h>
 #include <qfontmetrics.h>
 #include <qaction.h>
diff --git a/src/widgets/kernel/kernel.pri b/src/widgets/kernel/kernel.pri
index 1f27602..1a28000 100644
--- a/src/widgets/kernel/kernel.pri
+++ b/src/widgets/kernel/kernel.pri
@@ -44,8 +44,7 @@ HEADERS += \
         kernel/qguiplatformplugin_p.h \
         kernel/qdesktopwidget_qpa_p.h \
         kernel/qwidgetwindow_qpa_p.h \
-        kernel/qplatformmenu_qpa.h \
-        kernel/qplatformdialoghelper_qpa.h
+        kernel/qplatformmenu_qpa.h
 
 SOURCES += \
 	kernel/qaction.cpp \
@@ -81,8 +80,7 @@ SOURCES += \
         kernel/qdesktopwidget_qpa.cpp \
         kernel/qwidget_qpa.cpp \
         kernel/qwidgetwindow_qpa.cpp \
-        kernel/qplatformmenu_qpa.cpp \
-        kernel/qplatformdialoghelper_qpa.cpp
+        kernel/qplatformmenu_qpa.cpp
 
 # TODO
 false:!x11:mac {
diff --git a/src/widgets/kernel/qplatformdialoghelper_qpa.cpp b/src/widgets/kernel/qplatformdialoghelper_qpa.cpp
deleted file mode 100644
index 3854848..0000000
--- a/src/widgets/kernel/qplatformdialoghelper_qpa.cpp
+++ /dev/null
@@ -1,556 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/
-**
-** This file is part of the QtGui module of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:LGPL$
-** GNU Lesser General Public License Usage
-** This file may be used under the terms of the GNU Lesser General Public
-** License version 2.1 as published by the Free Software Foundation and
-** appearing in the file LICENSE.LGPL included in the packaging of this
-** file. Please review the following information to ensure the GNU Lesser
-** General Public License version 2.1 requirements will be met:
-** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
-**
-** In addition, as a special exception, Nokia gives you certain additional
-** rights. These rights are described in the Nokia Qt LGPL Exception
-** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
-**
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU General
-** Public License version 3.0 as published by the Free Software Foundation
-** and appearing in the file LICENSE.GPL included in the packaging of this
-** file. Please review the following information to ensure the GNU General
-** Public License version 3.0 requirements will be met:
-** http://www.gnu.org/copyleft/gpl.html.
-**
-** Other Usage
-** Alternatively, this file may be used in accordance with the terms and
-** conditions contained in a signed written agreement between you and Nokia.
-**
-**
-**
-**
-**
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-#include "qplatformdialoghelper_qpa.h"
-
-#include <QtCore/QVariant>
-#include <QtCore/QSharedData>
-#include <QtCore/QSettings>
-#include <QtCore/QHash>
-#include <QtCore/QUrl>
-#include <QtGui/QColor>
-
-QT_BEGIN_NAMESPACE
-
-/*!
-    \class QPlatformDialogHelper
-    \since 5.0
-    \internal
-    \brief The QPlatformDialogHelper class allows for platform-specific customization of dialogs.
-
-*/
-
-/*!
-    \enum QPlatformDialogHelper::StyleHint
-
-    This enum type specifies platform-specific style hints.
-
-    \value SnapToDefaultButton Snap the mouse to the center of the default
-                               button. There is corresponding system
-                               setting on Windows.
-
-    \sa styleHint()
-*/
-
-QPlatformDialogHelper::QPlatformDialogHelper()
-{
-}
-
-QPlatformDialogHelper::~QPlatformDialogHelper()
-{
-}
-
-QVariant QPlatformDialogHelper::styleHint(StyleHint hint) const
-{
-    return QPlatformDialogHelper::defaultStyleHint(hint);
-}
-
-QVariant  QPlatformDialogHelper::defaultStyleHint(QPlatformDialogHelper::StyleHint hint)
-{
-    switch (hint) {
-    case QPlatformDialogHelper::SnapToDefaultButton:
-        return QVariant(false);
-    }
-    return QVariant();
-}
-
-void QPlatformDialogHelper::emitLaunchNativeAppModalPanel()
-{
-    emit launchNativeAppModalPanel();
-}
-
-// Font dialog
-
-class QFontDialogOptionsPrivate : public QSharedData
-{
-public:
-    QFontDialogOptionsPrivate() : options(0) {}
-
-    QFontDialogOptions::FontDialogOptions options;
-    QString windowTitle;
-};
-
-QFontDialogOptions::QFontDialogOptions() : d(new QFontDialogOptionsPrivate)
-{
-}
-
-QFontDialogOptions::QFontDialogOptions(const QFontDialogOptions &rhs) : d(rhs.d)
-{
-}
-
-QFontDialogOptions &QFontDialogOptions::operator=(const QFontDialogOptions &rhs)
-{
-    if (this != &rhs)
-        d = rhs.d;
-    return *this;
-}
-
-QFontDialogOptions::~QFontDialogOptions()
-{
-}
-
-QString QFontDialogOptions::windowTitle() const
-{
-    return d->windowTitle;
-}
-
-void QFontDialogOptions::setWindowTitle(const QString &title)
-{
-    d->windowTitle = title;
-}
-
-void QFontDialogOptions::setOption(QFontDialogOptions::FontDialogOption option, bool on)
-{
-    if (!(d->options & option) != !on)
-        setOptions(d->options ^ option);
-}
-
-bool QFontDialogOptions::testOption(QFontDialogOptions::FontDialogOption option) const
-{
-    return d->options & option;
-}
-
-void QFontDialogOptions::setOptions(FontDialogOptions options)
-{
-    if (options != d->options)
-        d->options = options;
-}
-
-QFontDialogOptions::FontDialogOptions QFontDialogOptions::options() const
-{
-    return d->options;
-}
-
-const QSharedPointer<QFontDialogOptions> &QPlatformFontDialogHelper::options() const
-{
-    return m_options;
-}
-
-void QPlatformFontDialogHelper::setOptions(const QSharedPointer<QFontDialogOptions> &options)
-{
-    m_options = options;
-}
-
-// Color dialog
-
-class QColorDialogStaticData
-{
-public:
-    enum { CustomColorCount = 16, StandardColorCount = 6 * 8 };
-
-    QColorDialogStaticData();
-    inline void readSettings();
-    inline void writeSettings() const;
-
-    QRgb customRgb[CustomColorCount];
-    QRgb standardRgb[StandardColorCount];
-    bool customSet;
-};
-
-QColorDialogStaticData::QColorDialogStaticData() : customSet(false)
-{
-    int i = 0;
-    for (int g = 0; g < 4; ++g)
-        for (int r = 0;  r < 4; ++r)
-            for (int b = 0; b < 3; ++b)
-                standardRgb[i++] = qRgb(r * 255 / 3, g * 255 / 3, b * 255 / 2);
-    qFill(customRgb, customRgb + CustomColorCount, 0xffffffff);
-    readSettings();
-}
-
-void QColorDialogStaticData::readSettings()
-{
-#ifndef QT_NO_SETTINGS
-    const QSettings settings(QSettings::UserScope, QStringLiteral("Trolltech"));
-    for (int i = 0; i < int(CustomColorCount); ++i) {
-        const QVariant v = settings.value(QStringLiteral("Qt/customColors/") + QString::number(i));
-        if (v.isValid())
-            customRgb[i] = v.toUInt();
-    }
-#endif
-}
-
-void QColorDialogStaticData::writeSettings() const
-{
-#ifndef QT_NO_SETTINGS
-    if (!customSet) {
-        QSettings settings(QSettings::UserScope, QStringLiteral("Trolltech"));
-        for (int i = 0; i < int(CustomColorCount); ++i)
-            settings.setValue(QStringLiteral("Qt/customColors/") + QString::number(i), customRgb[i]);
-    }
-#endif
-}
-
-Q_GLOBAL_STATIC(QColorDialogStaticData, qColorDialogStaticData)
-
-class QColorDialogOptionsPrivate : public QSharedData
-{
-public:
-    QColorDialogOptionsPrivate() : options(0) {}
-    // Write out settings around destruction of dialogs
-    ~QColorDialogOptionsPrivate() { qColorDialogStaticData()->writeSettings(); }
-
-    QColorDialogOptions::ColorDialogOptions options;
-    QString windowTitle;
-};
-
-QColorDialogOptions::QColorDialogOptions() : d(new QColorDialogOptionsPrivate)
-{
-}
-
-QColorDialogOptions::QColorDialogOptions(const QColorDialogOptions &rhs) : d(rhs.d)
-{
-}
-
-QColorDialogOptions &QColorDialogOptions::operator=(const QColorDialogOptions &rhs)
-{
-    if (this != &rhs)
-        d = rhs.d;
-    return *this;
-}
-
-QColorDialogOptions::~QColorDialogOptions()
-{
-}
-
-QString QColorDialogOptions::windowTitle() const
-{
-    return d->windowTitle;
-}
-
-void QColorDialogOptions::setWindowTitle(const QString &title)
-{
-    d->windowTitle = title;
-}
-
-void QColorDialogOptions::setOption(QColorDialogOptions::ColorDialogOption option, bool on)
-{
-    if (!(d->options & option) != !on)
-        setOptions(d->options ^ option);
-}
-
-bool QColorDialogOptions::testOption(QColorDialogOptions::ColorDialogOption option) const
-{
-    return d->options & option;
-}
-
-void QColorDialogOptions::setOptions(ColorDialogOptions options)
-{
-    if (options != d->options)
-        d->options = options;
-}
-
-QColorDialogOptions::ColorDialogOptions QColorDialogOptions::options() const
-{
-    return d->options;
-}
-
-int QColorDialogOptions::customColorCount()
-{
-    return QColorDialogStaticData::CustomColorCount;
-}
-
-QRgb QColorDialogOptions::customColor(int index)
-{
-    if (uint(index) >= uint(QColorDialogStaticData::CustomColorCount))
-        return qRgb(255, 255, 255);
-    return qColorDialogStaticData()->customRgb[index];
-}
-
-QRgb *QColorDialogOptions::customColors()
-{
-    return qColorDialogStaticData()->customRgb;
-}
-
-void QColorDialogOptions::setCustomColor(int index, QRgb color)
-{
-    if (uint(index) >= uint(QColorDialogStaticData::CustomColorCount))
-        return;
-    qColorDialogStaticData()->customSet;
-    qColorDialogStaticData()->customRgb[index] = color;
-}
-
-QRgb *QColorDialogOptions::standardColors()
-{
-    return qColorDialogStaticData()->standardRgb;
-}
-
-QRgb QColorDialogOptions::standardColor(int index)
-{
-    if (uint(index) >= uint(QColorDialogStaticData::StandardColorCount))
-        return qRgb(255, 255, 255);
-    return qColorDialogStaticData()->standardRgb[index];
-}
-
-void QColorDialogOptions::setStandardColor(int index, QRgb color)
-{
-    if (uint(index) >= uint(QColorDialogStaticData::StandardColorCount))
-        return;
-    qColorDialogStaticData()->standardRgb[index] = color;
-}
-
-const QSharedPointer<QColorDialogOptions> &QPlatformColorDialogHelper::options() const
-{
-    return m_options;
-}
-
-void QPlatformColorDialogHelper::setOptions(const QSharedPointer<QColorDialogOptions> &options)
-{
-    m_options = options;
-}
-
-// File dialog
-
-class QFileDialogOptionsPrivate : public QSharedData
-{
-public:
-    QFileDialogOptionsPrivate() : options(0),
-        viewMode(QFileDialogOptions::Detail),
-        fileMode(QFileDialogOptions::AnyFile),
-        acceptMode(QFileDialogOptions::AcceptOpen),
-        filters(QDir::AllEntries | QDir::NoDotAndDotDot | QDir::AllDirs)
-    {}
-
-    QFileDialogOptions::FileDialogOptions options;
-    QString windowTitle;
-
-    QFileDialogOptions::ViewMode viewMode;
-    QFileDialogOptions::FileMode fileMode;
-    QFileDialogOptions::AcceptMode acceptMode;
-    QString labels[QFileDialogOptions::DialogLabelCount];
-    QDir::Filters filters;
-    QList<QUrl> sidebarUrls;
-    QStringList nameFilters;
-    QString defaultSuffix;
-    QStringList history;
-    QString initialDirectory;
-    QString initiallySelectedNameFilter;
-    QStringList initiallySelectedFiles;
-};
-
-QFileDialogOptions::QFileDialogOptions() : d(new QFileDialogOptionsPrivate)
-{
-}
-
-QFileDialogOptions::QFileDialogOptions(const QFileDialogOptions &rhs) : d(rhs.d)
-{
-}
-
-QFileDialogOptions &QFileDialogOptions::operator=(const QFileDialogOptions &rhs)
-{
-    if (this != &rhs)
-        d = rhs.d;
-    return *this;
-}
-
-QFileDialogOptions::~QFileDialogOptions()
-{
-}
-
-QString QFileDialogOptions::windowTitle() const
-{
-    return d->windowTitle;
-}
-
-void QFileDialogOptions::setWindowTitle(const QString &title)
-{
-    d->windowTitle = title;
-}
-
-void QFileDialogOptions::setOption(QFileDialogOptions::FileDialogOption option, bool on)
-{
-    if (!(d->options & option) != !on)
-        setOptions(d->options ^ option);
-}
-
-bool QFileDialogOptions::testOption(QFileDialogOptions::FileDialogOption option) const
-{
-    return d->options & option;
-}
-
-void QFileDialogOptions::setOptions(FileDialogOptions options)
-{
-    if (options != d->options)
-        d->options = options;
-}
-
-QFileDialogOptions::FileDialogOptions QFileDialogOptions::options() const
-{
-    return d->options;
-}
-
-QDir::Filters QFileDialogOptions::filter() const
-{
-    return d->filters;
-}
-
-void QFileDialogOptions::setFilter(QDir::Filters filters)
-{
-    d->filters  = filters;
-}
-
-void QFileDialogOptions::setViewMode(QFileDialogOptions::ViewMode mode)
-{
-    d->viewMode = mode;
-}
-
-QFileDialogOptions::ViewMode QFileDialogOptions::viewMode() const
-{
-    return d->viewMode;
-}
-
-void QFileDialogOptions::setFileMode(QFileDialogOptions::FileMode mode)
-{
-    d->fileMode = mode;
-}
-
-QFileDialogOptions::FileMode QFileDialogOptions::fileMode() const
-{
-    return d->fileMode;
-}
-
-void QFileDialogOptions::setAcceptMode(QFileDialogOptions::AcceptMode mode)
-{
-    d->acceptMode = mode;
-}
-
-QFileDialogOptions::AcceptMode QFileDialogOptions::acceptMode() const
-{
-    return d->acceptMode;
-}
-
-void QFileDialogOptions::setSidebarUrls(const QList<QUrl> &urls)
-{
-    d->sidebarUrls = urls;
-}
-
-QList<QUrl> QFileDialogOptions::sidebarUrls() const
-{
-    return d->sidebarUrls;
-}
-
-void QFileDialogOptions::setNameFilters(const QStringList &filters)
-{
-    d->nameFilters = filters;
-}
-
-QStringList QFileDialogOptions::nameFilters() const
-{
-    return d->nameFilters;
-}
-
-void QFileDialogOptions::setDefaultSuffix(const QString &suffix)
-{
-    d->defaultSuffix = suffix;
-}
-
-QString QFileDialogOptions::defaultSuffix() const
-{
-    return d->defaultSuffix;
-}
-
-void QFileDialogOptions::setHistory(const QStringList &paths)
-{
-    d->history = paths;
-}
-
-QStringList QFileDialogOptions::history() const
-{
-    return d->history;
-}
-
-void QFileDialogOptions::setLabelText(QFileDialogOptions::DialogLabel label, const QString &text)
-{
-    if (label >= 0 && label < DialogLabelCount)
-        d->labels[label] = text;
-}
-
-QString QFileDialogOptions::labelText(QFileDialogOptions::DialogLabel label) const
-{
-    return (label >= 0 && label < DialogLabelCount) ? d->labels[label] : QString();
-}
-
-bool QFileDialogOptions::isLabelExplicitlySet(DialogLabel label)
-{
-    return label >= 0 && label < DialogLabelCount && !d->labels[label].isEmpty();
-}
-
-QString QFileDialogOptions::initialDirectory() const
-{
-    return d->initialDirectory;
-}
-
-void QFileDialogOptions::setInitialDirectory(const QString &directory)
-{
-    d->initialDirectory = directory;
-}
-
-QString QFileDialogOptions::initiallySelectedNameFilter() const
-{
-    return d->initiallySelectedNameFilter;
-}
-
-void QFileDialogOptions::setInitiallySelectedNameFilter(const QString &filter)
-{
-    d->initiallySelectedNameFilter = filter;
-}
-
-QStringList QFileDialogOptions::initiallySelectedFiles() const
-{
-    return d->initiallySelectedFiles;
-}
-
-void QFileDialogOptions::setInitiallySelectedFiles(const QStringList &files)
-{
-    d->initiallySelectedFiles = files;
-}
-
-const QSharedPointer<QFileDialogOptions> &QPlatformFileDialogHelper::options() const
-{
-    return m_options;
-}
-
-void QPlatformFileDialogHelper::setOptions(const QSharedPointer<QFileDialogOptions> &options)
-{
-    m_options = options;
-}
-
-QT_END_NAMESPACE
diff --git a/src/widgets/kernel/qplatformdialoghelper_qpa.h b/src/widgets/kernel/qplatformdialoghelper_qpa.h
deleted file mode 100644
index ff043b4..0000000
--- a/src/widgets/kernel/qplatformdialoghelper_qpa.h
+++ /dev/null
@@ -1,314 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/
-**
-** This file is part of the QtGui module of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:LGPL$
-** GNU Lesser General Public License Usage
-** This file may be used under the terms of the GNU Lesser General Public
-** License version 2.1 as published by the Free Software Foundation and
-** appearing in the file LICENSE.LGPL included in the packaging of this
-** file. Please review the following information to ensure the GNU Lesser
-** General Public License version 2.1 requirements will be met:
-** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
-**
-** In addition, as a special exception, Nokia gives you certain additional
-** rights. These rights are described in the Nokia Qt LGPL Exception
-** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
-**
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU General
-** Public License version 3.0 as published by the Free Software Foundation
-** and appearing in the file LICENSE.GPL included in the packaging of this
-** file. Please review the following information to ensure the GNU General
-** Public License version 3.0 requirements will be met:
-** http://www.gnu.org/copyleft/gpl.html.
-**
-** Other Usage
-** Alternatively, this file may be used in accordance with the terms and
-** conditions contained in a signed written agreement between you and Nokia.
-**
-**
-**
-**
-**
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-#ifndef QPLATFORMDIALOGHELPER_H
-#define QPLATFORMDIALOGHELPER_H
-
-#include <QtCore/QtGlobal>
-#include <QtCore/QObject>
-#include <QtCore/QList>
-#include <QtCore/QSharedDataPointer>
-#include <QtCore/QSharedPointer>
-#include <QtCore/QDir>
-#include <QtGui/QRgb>
-
-QT_BEGIN_HEADER
-
-QT_BEGIN_NAMESPACE
-
-
-class QString;
-class QColor;
-class QFont;
-class QWindow;
-class QVariant;
-class QUrl;
-class QColorDialogOptionsPrivate;
-class QFontDialogOptionsPrivate;
-class QFileDialogOptionsPrivate;
-
-class Q_WIDGETS_EXPORT QPlatformDialogHelper : public QObject
-{
-    Q_OBJECT
-public:
-    enum StyleHint {
-        SnapToDefaultButton
-    };
-    enum DialogCode { Rejected, Accepted };
-    enum ShowFlag {
-        ShowModal    = 0x00000001
-    };
-
-    Q_DECLARE_FLAGS(ShowFlags, ShowFlag)
-
-    QPlatformDialogHelper();
-    virtual ~QPlatformDialogHelper();
-
-    virtual QVariant styleHint(StyleHint hint) const;
-
-    virtual void platformNativeDialogModalHelp() = 0;
-    virtual void _q_platformRunNativeAppModalPanel() = 0;
-
-    virtual void deleteNativeDialog_sys() = 0;
-    virtual bool show_sys(ShowFlags showFlags,
-                          Qt::WindowFlags windowFlags,
-                          QWindow *parent) = 0;
-    virtual void hide_sys() = 0;
-
-    virtual DialogCode dialogResultCode_sys() = 0;
-
-    static QVariant defaultStyleHint(QPlatformDialogHelper::StyleHint hint);
-
-Q_SIGNALS:
-    void launchNativeAppModalPanel();
-    void accept();
-    void reject();
-
-protected Q_SLOTS:
-    void emitLaunchNativeAppModalPanel();
-};
-
-class Q_WIDGETS_EXPORT QColorDialogOptions
-{
-public:
-    enum ColorDialogOption {
-        ShowAlphaChannel    = 0x00000001,
-        NoButtons           = 0x00000002,
-        DontUseNativeDialog = 0x00000004
-    };
-
-    Q_DECLARE_FLAGS(ColorDialogOptions, ColorDialogOption)
-
-    QColorDialogOptions();
-    QColorDialogOptions(const QColorDialogOptions &rhs);
-    QColorDialogOptions &operator=(const QColorDialogOptions &rhs);
-    ~QColorDialogOptions();
-
-    QString windowTitle() const;
-    void setWindowTitle(const QString &);
-
-    void setOption(ColorDialogOption option, bool on = true);
-    bool testOption(ColorDialogOption option) const;
-    void setOptions(ColorDialogOptions options);
-    ColorDialogOptions options() const;
-
-    static int customColorCount();
-    static QRgb customColor(int index);
-    static QRgb *customColors();
-    static void setCustomColor(int index, QRgb color);
-
-    static QRgb *standardColors();
-    static QRgb standardColor(int index);
-    static void setStandardColor(int index, QRgb color);
-
-private:
-    QSharedDataPointer<QColorDialogOptionsPrivate> d;
-};
-
-class Q_WIDGETS_EXPORT QPlatformColorDialogHelper : public QPlatformDialogHelper
-{
-    Q_OBJECT
-public:
-    const QSharedPointer<QColorDialogOptions> &options() const;
-    void setOptions(const QSharedPointer<QColorDialogOptions> &options);
-
-    virtual void setCurrentColor_sys(const QColor &) = 0;
-    virtual QColor currentColor_sys() const = 0;
-
-Q_SIGNALS:
-    void currentColorChanged(const QColor &color);
-    void colorSelected(const QColor &color);
-
-private:
-    QSharedPointer<QColorDialogOptions> m_options;
-};
-
-class Q_WIDGETS_EXPORT QFontDialogOptions
-{
-public:
-    enum FontDialogOption {
-        NoButtons           = 0x00000001,
-        DontUseNativeDialog = 0x00000002
-    };
-
-    Q_DECLARE_FLAGS(FontDialogOptions, FontDialogOption)
-
-    QFontDialogOptions();
-    QFontDialogOptions(const QFontDialogOptions &rhs);
-    QFontDialogOptions &operator=(const QFontDialogOptions &rhs);
-    ~QFontDialogOptions();
-
-    QString windowTitle() const;
-    void setWindowTitle(const QString &);
-
-    void setOption(FontDialogOption option, bool on = true);
-    bool testOption(FontDialogOption option) const;
-    void setOptions(FontDialogOptions options);
-    FontDialogOptions options() const;
-
-private:
-    QSharedDataPointer<QFontDialogOptionsPrivate> d;
-};
-
-class Q_WIDGETS_EXPORT QPlatformFontDialogHelper : public QPlatformDialogHelper
-{
-    Q_OBJECT
-public:
-    virtual void setCurrentFont_sys(const QFont &) = 0;
-    virtual QFont currentFont_sys() const = 0;
-
-    const QSharedPointer<QFontDialogOptions> &options() const;
-    void setOptions(const QSharedPointer<QFontDialogOptions> &options);
-
-Q_SIGNALS:
-    void currentFontChanged(const QFont &font);
-    void fontSelected(const QFont &font);
-
-private:
-    QSharedPointer<QFontDialogOptions> m_options;
-};
-
-class Q_WIDGETS_EXPORT QFileDialogOptions
-{
-public:
-    enum ViewMode { Detail, List };
-    enum FileMode { AnyFile, ExistingFile, Directory, ExistingFiles, DirectoryOnly };
-    enum AcceptMode { AcceptOpen, AcceptSave };
-    enum DialogLabel { LookIn, FileName, FileType, Accept, Reject, DialogLabelCount };
-
-    enum FileDialogOption
-    {
-        ShowDirsOnly          = 0x00000001,
-        DontResolveSymlinks   = 0x00000002,
-        DontConfirmOverwrite  = 0x00000004,
-        DontUseSheet          = 0x00000008,
-        DontUseNativeDialog   = 0x00000010,
-        ReadOnly              = 0x00000020,
-        HideNameFilterDetails = 0x00000040
-    };
-    Q_DECLARE_FLAGS(FileDialogOptions, FileDialogOption)
-
-    QFileDialogOptions();
-    QFileDialogOptions(const QFileDialogOptions &rhs);
-    QFileDialogOptions &operator=(const QFileDialogOptions &rhs);
-    ~QFileDialogOptions();
-
-    QString windowTitle() const;
-    void setWindowTitle(const QString &);
-
-    void setOption(FileDialogOption option, bool on = true);
-    bool testOption(FileDialogOption option) const;
-    void setOptions(FileDialogOptions options);
-    FileDialogOptions options() const;
-
-    QDir::Filters filter() const;
-    void setFilter(QDir::Filters filters);
-
-    void setViewMode(ViewMode mode);
-    ViewMode viewMode() const;
-
-    void setFileMode(FileMode mode);
-    FileMode fileMode() const;
-
-    void setAcceptMode(AcceptMode mode);
-    AcceptMode acceptMode() const;
-
-    void setSidebarUrls(const QList<QUrl> &urls);
-    QList<QUrl> sidebarUrls() const;
-
-    void setNameFilters(const QStringList &filters);
-    QStringList nameFilters() const;
-
-    void setDefaultSuffix(const QString &suffix);
-    QString defaultSuffix() const;
-
-    void setHistory(const QStringList &paths);
-    QStringList history() const;
-
-    void setLabelText(DialogLabel label, const QString &text);
-    QString labelText(DialogLabel label) const;
-    bool isLabelExplicitlySet(DialogLabel label);
-
-    QString initialDirectory() const;
-    void setInitialDirectory(const QString &);
-
-    QString initiallySelectedNameFilter() const;
-    void setInitiallySelectedNameFilter(const QString &);
-
-    QStringList initiallySelectedFiles() const;
-    void setInitiallySelectedFiles(const QStringList &);
-
-private:
-    QSharedDataPointer<QFileDialogOptionsPrivate> d;
-};
-
-class Q_WIDGETS_EXPORT QPlatformFileDialogHelper : public QPlatformDialogHelper
-{
-    Q_OBJECT
-public:
-    virtual bool defaultNameFilterDisables() const = 0;
-    virtual void setDirectory_sys(const QString &directory) = 0;
-    virtual QString directory_sys() const = 0;
-    virtual void selectFile_sys(const QString &filename) = 0;
-    virtual QStringList selectedFiles_sys() const = 0;
-    virtual void setFilter_sys() = 0;
-    virtual void selectNameFilter_sys(const QString &filter) = 0;
-    virtual QString selectedNameFilter_sys() const = 0;
-
-    const QSharedPointer<QFileDialogOptions> &options() const;
-    void setOptions(const QSharedPointer<QFileDialogOptions> &options);
-
-Q_SIGNALS:
-    void fileSelected(const QString &file);
-    void filesSelected(const QStringList &files);
-    void currentChanged(const QString &path);
-    void directoryEntered(const QString &directory);
-    void filterSelected(const QString &filter);
-
-private:
-    QSharedPointer<QFileDialogOptions> m_options;
-};
-
-QT_END_NAMESPACE
-
-QT_END_HEADER
-
-#endif // QPLATFORMDIALOGHELPER_H