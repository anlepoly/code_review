diff --git a/tests/auto/quick/examples/tst_examples.cpp b/tests/auto/quick/examples/tst_examples.cpp
index 309a149..22df7b8 100644
--- a/tests/auto/quick/examples/tst_examples.cpp
+++ b/tests/auto/quick/examples/tst_examples.cpp
@@ -266,7 +266,7 @@ void tst_examples::sgexamples()
         window = new QQuickWindow();
         window->resize(240, 320);
         window->show();
-        QTest::qWaitForWindowShown(window);
+        QVERIFY(QTest::qWaitForWindowExposed(window));
     }
     root->setParentItem(window->rootItem());
     component.completeCreate();
@@ -310,7 +310,7 @@ void tst_examples::sgsnippets()
         window = new QQuickWindow();
         window->resize(240, 320);
         window->show();
-        QTest::qWaitForWindowShown(window);
+        QVERIFY(QTest::qWaitForWindowExposed(window));
     }
     root->setParentItem(window->rootItem());
     component.completeCreate();
diff --git a/tests/auto/quick/qquickanimatedsprite/tst_qquickanimatedsprite.cpp b/tests/auto/quick/qquickanimatedsprite/tst_qquickanimatedsprite.cpp
index 2ed837f..5115e5f 100644
--- a/tests/auto/quick/qquickanimatedsprite/tst_qquickanimatedsprite.cpp
+++ b/tests/auto/quick/qquickanimatedsprite/tst_qquickanimatedsprite.cpp
@@ -68,7 +68,7 @@ void tst_qquickanimatedsprite::test_properties()
 
     window->setSource(testFileUrl("basic.qml"));
     window->show();
-    QTest::qWaitForWindowShown(window);
+    QVERIFY(QTest::qWaitForWindowExposed(window));
 
     QVERIFY(window->rootObject());
     QQuickAnimatedSprite* sprite = window->rootObject()->findChild<QQuickAnimatedSprite*>("sprite");
@@ -93,7 +93,8 @@ void tst_qquickanimatedsprite::test_frameChangedSignal()
 
     window->setSource(testFileUrl("frameChange.qml"));
     window->show();
-    QTest::qWaitForWindowShown(window);
+    window->requestActivateWindow();
+    QVERIFY(QTest::qWaitForWindowActive(window));
 
     QVERIFY(window->rootObject());
     QQuickAnimatedSprite* sprite = window->rootObject()->findChild<QQuickAnimatedSprite*>("sprite");
diff --git a/tests/auto/quick/qquickflickable/tst_qquickflickable.cpp b/tests/auto/quick/qquickflickable/tst_qquickflickable.cpp
index cb8dba3..1597ed5 100644
--- a/tests/auto/quick/qquickflickable/tst_qquickflickable.cpp
+++ b/tests/auto/quick/qquickflickable/tst_qquickflickable.cpp
@@ -717,7 +717,7 @@ void tst_qquickflickable::movingAndDragging()
     window->setSource(testFileUrl("flickable03.qml"));
     window->show();
     window->requestActivateWindow();
-    QTest::qWaitForWindowShown(window);
+    QVERIFY(QTest::qWaitForWindowExposed(window));
     QVERIFY(window->rootObject() != 0);
 
     QQuickFlickable *flickable = qobject_cast<QQuickFlickable*>(window->rootObject());
@@ -887,7 +887,7 @@ void tst_qquickflickable::flickOnRelease()
     window->setSource(testFileUrl("flickable03.qml"));
     window->show();
     window->requestActivateWindow();
-    QTest::qWaitForWindowShown(window);
+    QVERIFY(QTest::qWaitForWindowExposed(window));
     QVERIFY(window->rootObject() != 0);
 
     QQuickFlickable *flickable = qobject_cast<QQuickFlickable*>(window->rootObject());
@@ -925,7 +925,7 @@ void tst_qquickflickable::pressWhileFlicking()
     window->setSource(testFileUrl("flickable03.qml"));
     window->show();
     window->requestActivateWindow();
-    QTest::qWaitForWindowShown(window);
+    QVERIFY(QTest::qWaitForWindowExposed(window));
     QVERIFY(window->rootObject() != 0);
 
     QQuickFlickable *flickable = qobject_cast<QQuickFlickable*>(window->rootObject());
@@ -1141,7 +1141,7 @@ void tst_qquickflickable::clickAndDragWhenTransformed()
     view->setSource(testFileUrl("transformedFlickable.qml"));
     view->show();
     view->requestActivateWindow();
-    QTest::qWaitForWindowShown(view);
+    QVERIFY(QTest::qWaitForWindowExposed(view));
     QVERIFY(view->rootObject() != 0);
 
     QQuickFlickable *flickable = view->rootObject()->findChild<QQuickFlickable*>("flickable");
diff --git a/tests/auto/quick/qquickfocusscope/tst_qquickfocusscope.cpp b/tests/auto/quick/qquickfocusscope/tst_qquickfocusscope.cpp
index 34e5ce0..cca8cfb 100644
--- a/tests/auto/quick/qquickfocusscope/tst_qquickfocusscope.cpp
+++ b/tests/auto/quick/qquickfocusscope/tst_qquickfocusscope.cpp
@@ -160,8 +160,8 @@ void tst_qquickfocusscope::noFocus()
 
     view->show();
     view->requestActivateWindow();
-    QTest::qWaitForWindowShown(view);
-    QTRY_VERIFY(view == qGuiApp->focusWindow());
+    QVERIFY(QTest::qWaitForWindowActive(view));
+    QVERIFY(view == qGuiApp->focusWindow());
 
     QVERIFY(item0->hasActiveFocus() == false);
     QVERIFY(item1->hasActiveFocus() == false);
@@ -368,7 +368,7 @@ void tst_qquickfocusscope::qtBug13380()
     view->requestActivateWindow();
     qApp->processEvents();
 
-    QTest::qWaitForWindowShown(view);
+    QVERIFY(QTest::qWaitForWindowExposed(view));
 
     QTRY_VERIFY(view == qGuiApp->focusWindow());
     QVERIFY(view->rootObject()->property("noFocus").toBool());
@@ -386,7 +386,7 @@ void tst_qquickfocusscope::forceActiveFocus()
 
     view->show();
     view->requestActivateWindow();
-    QTest::qWaitForWindowShown(view);
+    QVERIFY(QTest::qWaitForWindowExposed(view));
     QTRY_VERIFY(view == qGuiApp->focusWindow());
 
     QQuickItem *rootObject = view->rootObject();
@@ -540,8 +540,8 @@ void tst_qquickfocusscope::canvasFocus()
     view->show();
     view->requestActivateWindow();
 
-    QTest::qWaitForWindowShown(view);
-    QTRY_VERIFY(view == qGuiApp->focusWindow());
+    QVERIFY(QTest::qWaitForWindowActive(view));
+    QVERIFY(view == qGuiApp->focusWindow());
 
     // Now the window has focus, active focus given to item1
     QCOMPARE(rootItem->hasFocus(), true);
@@ -612,8 +612,8 @@ void tst_qquickfocusscope::canvasFocus()
     // give the window focus, and item2 will get active focus
     view->show();
     view->requestActivateWindow();
-    QTest::qWaitForWindowShown(view);
-    QTRY_VERIFY(QGuiApplication::focusWindow() == view);
+    QVERIFY(QTest::qWaitForWindowActive(view));
+    QVERIFY(QGuiApplication::focusWindow() == view);
 
     QCOMPARE(rootItem->hasFocus(), true);
     QCOMPARE(rootItem->hasActiveFocus(), true);
diff --git a/tests/auto/quick/qquickgridview/tst_qquickgridview.cpp b/tests/auto/quick/qquickgridview/tst_qquickgridview.cpp
index bb10d53..13753ea 100644
--- a/tests/auto/quick/qquickgridview/tst_qquickgridview.cpp
+++ b/tests/auto/quick/qquickgridview/tst_qquickgridview.cpp
@@ -5628,7 +5628,7 @@ void tst_QQuickGridView::multipleTransitions()
     ctxt->setContextProperty("rippleAddDisplaced", rippleAddDisplaced);
     window->setSource(testFileUrl("multipleTransitions.qml"));
     window->show();
-    QTest::qWaitForWindowShown(window);
+    QVERIFY(QTest::qWaitForWindowExposed(window));
 
     QQuickGridView *gridview = findItem<QQuickGridView>(window->rootObject(), "grid");
     QTRY_VERIFY(gridview != 0);
@@ -5793,7 +5793,7 @@ void tst_QQuickGridView::multipleDisplaced()
     ctxt->setContextProperty("testModel", &model);
     window->setSource(testFileUrl("multipleDisplaced.qml"));
     window->show();
-    QTest::qWaitForWindowShown(window);
+    QVERIFY(QTest::qWaitForWindowExposed(window));
 
     QQuickGridView *gridview = findItem<QQuickGridView>(window->rootObject(), "grid");
     QTRY_VERIFY(gridview != 0);
diff --git a/tests/auto/quick/qquickimage/tst_qquickimage.cpp b/tests/auto/quick/qquickimage/tst_qquickimage.cpp
index d81fc40..c069a82 100644
--- a/tests/auto/quick/qquickimage/tst_qquickimage.cpp
+++ b/tests/auto/quick/qquickimage/tst_qquickimage.cpp
@@ -314,7 +314,7 @@ void tst_qquickimage::mirror()
         obj->setProperty("mirror", true);
         window->show();
         window->requestActivateWindow();
-        QTest::qWaitForWindowShown(window);
+        QVERIFY(QTest::qWaitForWindowActive(window));
 
         QImage screenshot = window->grabWindow();
         screenshots[fillMode] = screenshot;
diff --git a/tests/auto/quick/qquickitem2/tst_qquickitem.cpp b/tests/auto/quick/qquickitem2/tst_qquickitem.cpp
index c1cc942..b82580d 100644
--- a/tests/auto/quick/qquickitem2/tst_qquickitem.cpp
+++ b/tests/auto/quick/qquickitem2/tst_qquickitem.cpp
@@ -285,8 +285,8 @@ void tst_QQuickItem::keys()
     window->setSource(testFileUrl("keystest.qml"));
     window->show();
     window->requestActivateWindow();
-    QTest::qWaitForWindowShown(window);
-    QTRY_VERIFY(QGuiApplication::focusWindow() == window);
+    QVERIFY(QTest::qWaitForWindowActive(window));
+    QVERIFY(QGuiApplication::focusWindow() == window);
 
     QVERIFY(window->rootObject());
     QCOMPARE(window->rootObject()->property("isEnabled").toBool(), true);
@@ -413,8 +413,8 @@ void tst_QQuickItem::keysProcessingOrder()
     window->setSource(testFileUrl("keyspriority.qml"));
     window->show();
     window->requestActivateWindow();
-    QTest::qWaitForWindowShown(window);
-    QTRY_VERIFY(QGuiApplication::focusWindow() == window);
+    QVERIFY(QTest::qWaitForWindowActive(window));
+    QVERIFY(QGuiApplication::focusWindow() == window);
 
     KeyTestItem *testItem = qobject_cast<KeyTestItem*>(window->rootObject());
     QVERIFY(testItem);
@@ -471,8 +471,8 @@ void tst_QQuickItem::keysim()
     window->setSource(testFileUrl("keysim.qml"));
     window->show();
     window->requestActivateWindow();
-    QTest::qWaitForWindowShown(window);
-    QTRY_VERIFY(QGuiApplication::focusWindow() == window);
+    QVERIFY(QTest::qWaitForWindowActive(window));
+    QVERIFY(QGuiApplication::focusWindow() == window);
 
     QVERIFY(window->rootObject());
     QVERIFY(window->rootObject()->hasFocus() && window->rootObject()->hasActiveFocus());
@@ -656,8 +656,8 @@ void tst_QQuickItem::keyNavigation()
     window->setSource(testFileUrl("keynavigationtest.qml"));
     window->show();
     window->requestActivateWindow();
-    QTest::qWaitForWindowShown(window);
-    QTRY_VERIFY(QGuiApplication::focusWindow() == window);
+    QVERIFY(QTest::qWaitForWindowActive(window));
+    QVERIFY(QGuiApplication::focusWindow() == window);
 
     QQuickItem *item = findItem<QQuickItem>(window->rootObject(), "item1");
     QVERIFY(item);
@@ -733,8 +733,8 @@ void tst_QQuickItem::keyNavigation_RightToLeft()
     window->setSource(testFileUrl("keynavigationtest.qml"));
     window->show();
     window->requestActivateWindow();
-    QTest::qWaitForWindowShown(window);
-    QTRY_VERIFY(QGuiApplication::focusWindow() == window);
+    QVERIFY(QTest::qWaitForWindowActive(window));
+    QVERIFY(QGuiApplication::focusWindow() == window);
 
     QQuickItem *rootItem = qobject_cast<QQuickItem*>(window->rootObject());
     QVERIFY(rootItem);
@@ -788,8 +788,8 @@ void tst_QQuickItem::keyNavigation_skipNotVisible()
     window->setSource(testFileUrl("keynavigationtest.qml"));
     window->show();
     window->requestActivateWindow();
-    QTest::qWaitForWindowShown(window);
-    QTRY_VERIFY(QGuiApplication::focusWindow() == window);
+    QVERIFY(QTest::qWaitForWindowActive(window));
+    QVERIFY(QGuiApplication::focusWindow() == window);
 
     QQuickItem *item = findItem<QQuickItem>(window->rootObject(), "item1");
     QVERIFY(item);
@@ -863,8 +863,8 @@ void tst_QQuickItem::keyNavigation_implicitSetting()
     window->setSource(testFileUrl("keynavigationtest_implicit.qml"));
     window->show();
     window->requestActivateWindow();
-    QTest::qWaitForWindowShown(window);
-    QTRY_VERIFY(QGuiApplication::focusWindow() == window);
+    QVERIFY(QTest::qWaitForWindowActive(window));
+    QVERIFY(QGuiApplication::focusWindow() == window);
 
     QEvent wa(QEvent::WindowActivate);
     QGuiApplication::sendEvent(window, &wa);
@@ -1229,8 +1229,8 @@ void tst_QQuickItem::propertyChanges()
     window->setSource(testFileUrl("propertychanges.qml"));
     window->show();
     window->requestActivateWindow();
-    QTest::qWaitForWindowShown(window);
-    QTRY_VERIFY(QGuiApplication::focusWindow() == window);
+    QVERIFY(QTest::qWaitForWindowActive(window));
+    QVERIFY(QGuiApplication::focusWindow() == window);
 
     QQuickItem *item = findItem<QQuickItem>(window->rootObject(), "item");
     QQuickItem *parentItem = findItem<QQuickItem>(window->rootObject(), "parentItem");
@@ -1642,8 +1642,8 @@ void tst_QQuickItem::contains()
     window->setSource(testFileUrl("hollowTestItem.qml"));
     window->show();
     window->requestActivateWindow();
-    QTest::qWaitForWindowShown(window);
-    QTRY_VERIFY(QGuiApplication::focusWindow() == window);
+    QVERIFY(QTest::qWaitForWindowActive(window));
+    QVERIFY(QGuiApplication::focusWindow() == window);
 
     QQuickItem *root = qobject_cast<QQuickItem *>(window->rootObject());
     QVERIFY(root);
diff --git a/tests/auto/quick/qquicklistview/tst_qquicklistview.cpp b/tests/auto/quick/qquicklistview/tst_qquicklistview.cpp
index 6c68632..9b0cb2c 100644
--- a/tests/auto/quick/qquicklistview/tst_qquicklistview.cpp
+++ b/tests/auto/quick/qquicklistview/tst_qquicklistview.cpp
@@ -587,8 +587,7 @@ void tst_QQuickListView::inserted_more(QQuickItemView::VerticalLayoutDirection v
 
     window->setSource(testFileUrl("listviewtest.qml"));
     window->show();
-    qApp->processEvents();
-    QTest::qWaitForWindowShown(window);
+    QVERIFY(QTest::qWaitForWindowExposed(window));
 
     QQuickListView *listview = findItem<QQuickListView>(window->rootObject(), "list");
     QTRY_VERIFY(listview != 0);
@@ -753,8 +752,7 @@ void tst_QQuickListView::insertBeforeVisible()
 
     window->setSource(testFileUrl("listviewtest.qml"));
     window->show();
-    qApp->processEvents();
-    QTest::qWaitForWindowShown(window);
+    QVERIFY(QTest::qWaitForWindowExposed(window));
 
     QQuickListView *listview = findItem<QQuickListView>(window->rootObject(), "list");
     QTRY_VERIFY(listview != 0);
@@ -844,8 +842,7 @@ void tst_QQuickListView::removed(const QUrl &source, bool /* animated */)
 
     window->setSource(source);
     window->show();
-    qApp->processEvents();
-    QTest::qWaitForWindowShown(window);
+    QVERIFY(QTest::qWaitForWindowExposed(window));
 
     QQuickListView *listview = findItem<QQuickListView>(window->rootObject(), "list");
     QTRY_VERIFY(listview != 0);
@@ -1030,8 +1027,7 @@ void tst_QQuickListView::removed_more(const QUrl &source, QQuickItemView::Vertic
 
     window->setSource(source);
     window->show();
-    qApp->processEvents();
-    QTest::qWaitForWindowShown(window);
+    QVERIFY(QTest::qWaitForWindowExposed(window));
 
     QQuickListView *listview = findItem<QQuickListView>(window->rootObject(), "list");
     QTRY_VERIFY(listview != 0);
@@ -1271,8 +1267,7 @@ void tst_QQuickListView::moved(const QUrl &source, QQuickItemView::VerticalLayou
 
     window->setSource(source);
     window->show();
-    qApp->processEvents();
-    QTest::qWaitForWindowShown(window);
+    QVERIFY(QTest::qWaitForWindowExposed(window));
 
     QQuickListView *listview = findItem<QQuickListView>(window->rootObject(), "list");
     QTRY_VERIFY(listview != 0);
@@ -1502,8 +1497,7 @@ void tst_QQuickListView::multipleChanges(bool condensed)
 
     window->setSource(testFileUrl("listviewtest.qml"));
     window->show();
-    qApp->processEvents();
-    QTest::qWaitForWindowShown(window);
+    QVERIFY(QTest::qWaitForWindowExposed(window));
 
     QQuickListView *listview = findItem<QQuickListView>(window->rootObject(), "list");
     QTRY_VERIFY(listview != 0);
@@ -5614,7 +5608,7 @@ void tst_QQuickListView::populateTransitions()
     window->rootContext()->setContextProperty("model_transitionVia", &model_transitionVia);
     window->setSource(testFileUrl("populateTransitions.qml"));
     window->show();
-    QTest::qWaitForWindowShown(window);
+    QVERIFY(QTest::qWaitForWindowExposed(window));
 
     QQuickListView *listview = findItem<QQuickListView>(window->rootObject(), "list");
     QVERIFY(listview);
@@ -5747,7 +5741,7 @@ void tst_QQuickListView::addTransitions()
     ctxt->setContextProperty("testObject", testObject);
     window->setSource(testFileUrl("addTransitions.qml"));
     window->show();
-    QTest::qWaitForWindowShown(window);
+    QVERIFY(QTest::qWaitForWindowExposed(window));
 
     QQuickListView *listview = findItem<QQuickListView>(window->rootObject(), "list");
     QTRY_VERIFY(listview != 0);
@@ -5942,7 +5936,7 @@ void tst_QQuickListView::moveTransitions()
     ctxt->setContextProperty("testObject", testObject);
     window->setSource(testFileUrl("moveTransitions.qml"));
     window->show();
-    QTest::qWaitForWindowShown(window);
+    QVERIFY(QTest::qWaitForWindowExposed(window));
 
     QQuickListView *listview = findItem<QQuickListView>(window->rootObject(), "list");
     QTRY_VERIFY(listview != 0);
@@ -6145,7 +6139,7 @@ void tst_QQuickListView::removeTransitions()
     ctxt->setContextProperty("testObject", testObject);
     window->setSource(testFileUrl("removeTransitions.qml"));
     window->show();
-    QTest::qWaitForWindowShown(window);
+    QVERIFY(QTest::qWaitForWindowExposed(window));
 
     QQuickListView *listview = findItem<QQuickListView>(window->rootObject(), "list");
     QTRY_VERIFY(listview != 0);
@@ -6575,7 +6569,7 @@ void tst_QQuickListView::multipleTransitions()
     ctxt->setContextProperty("rippleAddDisplaced", rippleAddDisplaced);
     window->setSource(testFileUrl("multipleTransitions.qml"));
     window->show();
-    QTest::qWaitForWindowShown(window);
+    QVERIFY(QTest::qWaitForWindowExposed(window));
 
     QQuickListView *listview = findItem<QQuickListView>(window->rootObject(), "list");
     QTRY_VERIFY(listview != 0);
@@ -6730,7 +6724,7 @@ void tst_QQuickListView::multipleDisplaced()
     ctxt->setContextProperty("testObject", new TestObject(window));
     window->setSource(testFileUrl("multipleDisplaced.qml"));
     window->show();
-    QTest::qWaitForWindowShown(window);
+    QVERIFY(QTest::qWaitForWindowExposed(window));
 
     QQuickListView *listview = findItem<QQuickListView>(window->rootObject(), "list");
     QTRY_VERIFY(listview != 0);
diff --git a/tests/auto/quick/qquickmultipointtoucharea/tst_qquickmultipointtoucharea.cpp b/tests/auto/quick/qquickmultipointtoucharea/tst_qquickmultipointtoucharea.cpp
index e3795c5..ce9b84e 100644
--- a/tests/auto/quick/qquickmultipointtoucharea/tst_qquickmultipointtoucharea.cpp
+++ b/tests/auto/quick/qquickmultipointtoucharea/tst_qquickmultipointtoucharea.cpp
@@ -851,7 +851,7 @@ QQuickView *tst_QQuickMultiPointTouchArea::createAndShowView(const QString &file
     window->setSource(testFileUrl(file));
     window->show();
     window->requestActivateWindow();
-    QTest::qWaitForWindowShown(window);
+    QTest::qWaitForWindowActive(window);
 
     return window;
 }
diff --git a/tests/auto/quick/qquickpathview/tst_qquickpathview.cpp b/tests/auto/quick/qquickpathview/tst_qquickpathview.cpp
index fad068b..65175a6 100644
--- a/tests/auto/quick/qquickpathview/tst_qquickpathview.cpp
+++ b/tests/auto/quick/qquickpathview/tst_qquickpathview.cpp
@@ -1305,7 +1305,8 @@ void tst_QQuickPathView::package()
     QVERIFY(window);
     window->setSource(testFileUrl("pathview_package.qml"));
     window->show();
-    QTest::qWaitForWindowShown(window);
+    window->requestActivateWindow();
+    QVERIFY(QTest::qWaitForWindowActive(window));
 
     QQuickPathView *pathView = window->rootObject()->findChild<QQuickPathView*>("photoPathView");
     QVERIFY(pathView);
@@ -1422,8 +1423,8 @@ void tst_QQuickPathView::mouseDrag()
     window->setSource(testFileUrl("dragpath.qml"));
     window->show();
     window->requestActivateWindow();
-    QTest::qWaitForWindowShown(window);
-    QTRY_COMPARE(window, qGuiApp->focusWindow());
+    QVERIFY(QTest::qWaitForWindowActive(window));
+    QCOMPARE(window, qGuiApp->focusWindow());
 
     QQuickPathView *pathview = qobject_cast<QQuickPathView*>(window->rootObject());
     QVERIFY(pathview != 0);
@@ -1519,8 +1520,8 @@ void tst_QQuickPathView::changePreferredHighlight()
     window->setSource(testFileUrl("dragpath.qml"));
     window->show();
     window->requestActivateWindow();
-    QTest::qWaitForWindowShown(window);
-    QTRY_COMPARE(window, qGuiApp->focusWindow());
+    QVERIFY(QTest::qWaitForWindowActive(window));
+    QCOMPARE(window, qGuiApp->focusWindow());
 
     QQuickPathView *pathview = qobject_cast<QQuickPathView*>(window->rootObject());
     QVERIFY(pathview != 0);
@@ -1713,8 +1714,8 @@ void tst_QQuickPathView::cancelDrag()
     window->setSource(testFileUrl("dragpath.qml"));
     window->show();
     window->requestActivateWindow();
-    QTest::qWaitForWindowShown(window);
-    QTRY_COMPARE(window, qGuiApp->focusWindow());
+    QVERIFY(QTest::qWaitForWindowActive(window));
+    QCOMPARE(window, qGuiApp->focusWindow());
 
     QQuickPathView *pathview = qobject_cast<QQuickPathView*>(window->rootObject());
     QVERIFY(pathview != 0);
@@ -1759,8 +1760,8 @@ void tst_QQuickPathView::maximumFlickVelocity()
     window->setSource(testFileUrl("dragpath.qml"));
     window->show();
     window->requestActivateWindow();
-    QTest::qWaitForWindowShown(window);
-    QTRY_COMPARE(window, qGuiApp->focusWindow());
+    QVERIFY(QTest::qWaitForWindowActive(window));
+    QCOMPARE(window, qGuiApp->focusWindow());
 
     QQuickPathView *pathview = qobject_cast<QQuickPathView*>(window->rootObject());
     QVERIFY(pathview != 0);
@@ -1843,8 +1844,8 @@ void tst_QQuickPathView::snapOneItem()
     window->setSource(testFileUrl("panels.qml"));
     window->show();
     window->requestActivateWindow();
-    QTest::qWaitForWindowShown(window);
-    QTRY_COMPARE(window, qGuiApp->focusWindow());
+    QVERIFY(QTest::qWaitForWindowActive(window));
+    QCOMPARE(window, qGuiApp->focusWindow());
 
     QQuickPathView *pathview = window->rootObject()->findChild<QQuickPathView*>("view");
     QVERIFY(pathview != 0);
diff --git a/tests/auto/quick/qquickpincharea/tst_qquickpincharea.cpp b/tests/auto/quick/qquickpincharea/tst_qquickpincharea.cpp
index 5c765b2..857bc3a 100644
--- a/tests/auto/quick/qquickpincharea/tst_qquickpincharea.cpp
+++ b/tests/auto/quick/qquickpincharea/tst_qquickpincharea.cpp
@@ -213,7 +213,7 @@ void tst_QQuickPinchArea::scale()
     window->setSource(testFileUrl("pinchproperties.qml"));
     window->show();
     window->requestActivateWindow();
-    QTest::qWaitForWindowShown(window);
+    QVERIFY(QTest::qWaitForWindowActive(window));
     QVERIFY(window->rootObject() != 0);
     qApp->processEvents();
 
@@ -276,7 +276,7 @@ void tst_QQuickPinchArea::pan()
     window->setSource(testFileUrl("pinchproperties.qml"));
     window->show();
     window->requestActivateWindow();
-    QTest::qWaitForWindowShown(window);
+    QVERIFY(QTest::qWaitForWindowActive(window));
     QVERIFY(window->rootObject() != 0);
     qApp->processEvents();
 
@@ -337,7 +337,7 @@ void tst_QQuickPinchArea::retouch()
     window->setSource(testFileUrl("pinchproperties.qml"));
     window->show();
     window->requestActivateWindow();
-    QTest::qWaitForWindowShown(window);
+    QVERIFY(QTest::qWaitForWindowActive(window));
     QVERIFY(window->rootObject() != 0);
     qApp->processEvents();
 
@@ -451,7 +451,7 @@ void tst_QQuickPinchArea::transformedPinchArea()
     view->setSource(testFileUrl("transformedPinchArea.qml"));
     view->show();
     view->requestActivateWindow();
-    QTest::qWaitForWindowShown(view);
+    QVERIFY(QTest::qWaitForWindowActive(view));
     QVERIFY(view->rootObject() != 0);
     qApp->processEvents();
 
diff --git a/tests/auto/quick/qquickpositioners/tst_qquickpositioners.cpp b/tests/auto/quick/qquickpositioners/tst_qquickpositioners.cpp
index 2a87c24..3fb20f7 100644
--- a/tests/auto/quick/qquickpositioners/tst_qquickpositioners.cpp
+++ b/tests/auto/quick/qquickpositioners/tst_qquickpositioners.cpp
@@ -432,7 +432,7 @@ void tst_qquickpositioners::test_horizontal_animated()
     QCOMPARE(two->x(), -100.0);
     QCOMPARE(three->x(), -100.0);
 
-    QTest::qWaitForWindowShown(window); //It may not relayout until the next frame, so it needs to be drawn
+    QVERIFY(QTest::qWaitForWindowExposed(window)); //It may not relayout until the next frame, so it needs to be drawn
 
     QQuickItem *row = window->rootObject()->findChild<QQuickItem*>("row");
     QVERIFY(row);
@@ -486,7 +486,7 @@ void tst_qquickpositioners::test_horizontal_animated_rightToLeft()
     QCOMPARE(two->x(), -100.0);
     QCOMPARE(three->x(), -100.0);
 
-    QTest::qWaitForWindowShown(window); //It may not relayout until the next frame, so it needs to be drawn
+    QVERIFY(QTest::qWaitForWindowExposed(window)); //It may not relayout until the next frame, so it needs to be drawn
 
     QQuickItem *row = window->rootObject()->findChild<QQuickItem*>("row");
     QVERIFY(row);
@@ -1000,7 +1000,7 @@ void tst_qquickpositioners::test_vertical_animated()
     QVERIFY(three != 0);
     QCOMPARE(three->y(), -100.0);
 
-    QTest::qWaitForWindowShown(window); //It may not relayout until the next frame, so it needs to be drawn
+    QVERIFY(QTest::qWaitForWindowExposed(window)); //It may not relayout until the next frame, so it needs to be drawn
 
     QQuickItem *column = window->rootObject()->findChild<QQuickItem*>("column");
     QVERIFY(column);
@@ -1248,7 +1248,7 @@ void tst_qquickpositioners::test_grid_animated()
     QCOMPARE(five->x(), -100.0);
     QCOMPARE(five->y(), -100.0);
 
-    QTest::qWaitForWindowShown(window); //It may not relayout until the next frame, so it needs to be drawn
+    QVERIFY(QTest::qWaitForWindowExposed(window)); //It may not relayout until the next frame, so it needs to be drawn
 
     QQuickItem *grid = window->rootObject()->findChild<QQuickItem*>("grid");
     QVERIFY(grid);
@@ -1333,7 +1333,7 @@ void tst_qquickpositioners::test_grid_animated_rightToLeft()
     QCOMPARE(five->x(), -100.0);
     QCOMPARE(five->y(), -100.0);
 
-    QTest::qWaitForWindowShown(window); //It may not relayout until the next frame, so it needs to be drawn
+    QVERIFY(QTest::qWaitForWindowExposed(window)); //It may not relayout until the next frame, so it needs to be drawn
 
     QQuickItem *grid = window->rootObject()->findChild<QQuickItem*>("grid");
     QVERIFY(grid);
@@ -2022,7 +2022,7 @@ QQuickView *tst_qquickpositioners::createView(const QString &filename, bool wait
     window->show();
     qDebug() << "3";
     if (wait)
-        QTest::qWaitForWindowShown(window); //It may not relayout until the next frame, so it needs to be drawn
+        QTest::qWaitForWindowExposed(window); //It may not relayout until the next frame, so it needs to be drawn
     qDebug() << "4";
 
     return window;
diff --git a/tests/auto/quick/qquickshadereffect/tst_qquickshadereffect.cpp b/tests/auto/quick/qquickshadereffect/tst_qquickshadereffect.cpp
index 6a7040c..e2afd67 100644
--- a/tests/auto/quick/qquickshadereffect/tst_qquickshadereffect.cpp
+++ b/tests/auto/quick/qquickshadereffect/tst_qquickshadereffect.cpp
@@ -284,7 +284,7 @@ void tst_qquickshadereffect::deleteSourceItem()
     QQuickView *view = new QQuickView(0);
     view->setSource(QUrl::fromLocalFile(testFile("deleteSourceItem.qml")));
     view->show();
-    QTest::qWaitForWindowShown(view);
+    QVERIFY(QTest::qWaitForWindowExposed(view));
     QVERIFY(view);
     QObject *obj = view->rootObject();
     QVERIFY(obj);
@@ -299,7 +299,7 @@ void tst_qquickshadereffect::deleteShaderEffectSource()
     QQuickView *view = new QQuickView(0);
     view->setSource(QUrl::fromLocalFile(testFile("deleteShaderEffectSource.qml")));
     view->show();
-    QTest::qWaitForWindowShown(view);
+    QVERIFY(QTest::qWaitForWindowExposed(view));
     QVERIFY(view);
     QObject *obj = view->rootObject();
     QVERIFY(obj);
diff --git a/tests/auto/quick/qquickspritesequence/tst_qquickspritesequence.cpp b/tests/auto/quick/qquickspritesequence/tst_qquickspritesequence.cpp
index 764da78..48c529f 100644
--- a/tests/auto/quick/qquickspritesequence/tst_qquickspritesequence.cpp
+++ b/tests/auto/quick/qquickspritesequence/tst_qquickspritesequence.cpp
@@ -62,7 +62,7 @@ void tst_qquickspritesequence::test_properties()
 
     window->setSource(testFileUrl("basic.qml"));
     window->show();
-    QTest::qWaitForWindowShown(window);
+    QVERIFY(QTest::qWaitForWindowExposed(window));
 
     QVERIFY(window->rootObject());
     QQuickSpriteSequence* sprite = window->rootObject()->findChild<QQuickSpriteSequence*>("sprite");
@@ -90,7 +90,7 @@ void tst_qquickspritesequence::test_huge()
 
     window->setSource(testFileUrl("huge.qml"));
     window->show();
-    QTest::qWaitForWindowShown(window);
+    QVERIFY(QTest::qWaitForWindowExposed(window));
 
     QVERIFY(window->rootObject());
     QQuickSpriteSequence* sprite = window->rootObject()->findChild<QQuickSpriteSequence*>("sprite");
@@ -105,7 +105,7 @@ void tst_qquickspritesequence::test_framerateAdvance()
 
     window->setSource(testFileUrl("advance.qml"));
     window->show();
-    QTest::qWaitForWindowShown(window);
+    QVERIFY(QTest::qWaitForWindowExposed(window));
 
     QVERIFY(window->rootObject());
     QQuickSpriteSequence* sprite = window->rootObject()->findChild<QQuickSpriteSequence*>("sprite");
@@ -121,7 +121,7 @@ void tst_qquickspritesequence::test_jumpToCrash()
 
     window->setSource(testFileUrl("crashonstart.qml"));
     window->show();
-    QTest::qWaitForWindowShown(window);
+    QVERIFY(QTest::qWaitForWindowExposed(window));
     //verify: Don't crash
 
     delete window;
diff --git a/tests/auto/quick/qquickstates/tst_qquickstates.cpp b/tests/auto/quick/qquickstates/tst_qquickstates.cpp
index 1aca63a..0a42ae5 100644
--- a/tests/auto/quick/qquickstates/tst_qquickstates.cpp
+++ b/tests/auto/quick/qquickstates/tst_qquickstates.cpp
@@ -1010,7 +1010,7 @@ void tst_qquickstates::anchorRewindBug()
     view->show();
     view->requestActivateWindow();
 
-    QTest::qWaitForWindowShown(view);
+    QVERIFY(QTest::qWaitForWindowActive(view));
 
     QQuickRectangle *rect = qobject_cast<QQuickRectangle*>(view->rootObject());
     QVERIFY(rect != 0);
diff --git a/tests/auto/quick/qquicktext/tst_qquicktext.cpp b/tests/auto/quick/qquicktext/tst_qquicktext.cpp
index da5a524..57ba6ce 100644
--- a/tests/auto/quick/qquicktext/tst_qquicktext.cpp
+++ b/tests/auto/quick/qquicktext/tst_qquicktext.cpp
@@ -1858,7 +1858,7 @@ void tst_qquicktext::embeddedImages()
     QQuickView *view = new QQuickView(qmlfile);
     view->show();
     view->requestActivateWindow();
-    QTest::qWaitForWindowShown(view);
+    QVERIFY(QTest::qWaitForWindowActive(view));
     QQuickText *textObject = qobject_cast<QQuickText*>(view->rootObject());
 
     QVERIFY(textObject != 0);
@@ -2470,7 +2470,7 @@ void tst_qquicktext::lineLaidOutRelayout()
 
     window->show();
     window->requestActivateWindow();
-    QTest::qWaitForWindowShown(window);
+    QVERIFY(QTest::qWaitForWindowActive(window));
 
     QQuickText *myText = window->rootObject()->findChild<QQuickText*>("myText");
     QVERIFY(myText != 0);
@@ -3575,7 +3575,7 @@ void tst_qquicktext::htmlLists()
 
     view->show();
     view->requestActivateWindow();
-    QTest::qWaitForWindowShown(view);
+    QVERIFY(QTest::qWaitForWindowActive(view));
 
     QCOMPARE(textPrivate->extra->doc->lineCount(), nbLines);
 
diff --git a/tests/auto/quick/qquickwindow/tst_qquickwindow.cpp b/tests/auto/quick/qquickwindow/tst_qquickwindow.cpp
index ebea271..5866d4a 100644
--- a/tests/auto/quick/qquickwindow/tst_qquickwindow.cpp
+++ b/tests/auto/quick/qquickwindow/tst_qquickwindow.cpp
@@ -333,7 +333,7 @@ void tst_qquickwindow::touchEvent_basic()
     window->resize(250, 250);
     window->setPos(100, 100);
     window->show();
-    QTest::qWaitForWindowShown(window);
+    QVERIFY(QTest::qWaitForWindowExposed(window));
 
     TestTouchItem *bottomItem = new TestTouchItem(window->rootItem());
     bottomItem->setObjectName("Bottom Item");
@@ -461,7 +461,7 @@ void tst_qquickwindow::touchEvent_propagation()
     window->resize(250, 250);
     window->setPos(100, 100);
     window->show();
-    QTest::qWaitForWindowShown(window);
+    QVERIFY(QTest::qWaitForWindowExposed(window));
 
     TestTouchItem *bottomItem = new TestTouchItem(window->rootItem());
     bottomItem->setObjectName("Bottom Item");
@@ -593,7 +593,7 @@ void tst_qquickwindow::touchEvent_cancel()
     window->resize(250, 250);
     window->setPos(100, 100);
     window->show();
-    QTest::qWaitForWindowShown(window);
+    QVERIFY(QTest::qWaitForWindowExposed(window));
 
     TestTouchItem *item = new TestTouchItem(window->rootItem());
     item->setPos(QPointF(50, 50));
@@ -625,7 +625,7 @@ void tst_qquickwindow::touchEvent_reentrant()
     window->resize(250, 250);
     window->setPos(100, 100);
     window->show();
-    QTest::qWaitForWindowShown(window);
+    QVERIFY(QTest::qWaitForWindowExposed(window));
 
     TestTouchItem *item = new TestTouchItem(window->rootItem());
 
@@ -662,7 +662,7 @@ void tst_qquickwindow::touchEvent_velocity()
     window->resize(250, 250);
     window->setPos(100, 100);
     window->show();
-    QTest::qWaitForWindowShown(window);
+    QVERIFY(QTest::qWaitForWindowExposed(window));
     QTest::qWait(10);
 
     TestTouchItem *item = new TestTouchItem(window->rootItem());
@@ -718,7 +718,7 @@ void tst_qquickwindow::mouseFromTouch_basic()
     window->resize(250, 250);
     window->setPos(100, 100);
     window->show();
-    QTest::qWaitForWindowShown(window);
+    QVERIFY(QTest::qWaitForWindowExposed(window));
     QTest::qWait(10);
 
     TestTouchItem *item = new TestTouchItem(window->rootItem());
@@ -797,7 +797,7 @@ void tst_qquickwindow::mouseFiltering()
     window->resize(250, 250);
     window->setPos(100, 100);
     window->show();
-    QTest::qWaitForWindowShown(window);
+    QVERIFY(QTest::qWaitForWindowExposed(window));
 
     TestTouchItem *bottomItem = new TestTouchItem(window->rootItem());
     bottomItem->setObjectName("Bottom Item");
@@ -856,7 +856,7 @@ void tst_qquickwindow::clearColor()
     window->setPos(100, 100);
     window->setColor(Qt::blue);
     window->show();
-    QTest::qWaitForWindowShown(window);
+    QVERIFY(QTest::qWaitForWindowExposed(window));
     QCOMPARE(window->color(), QColor(Qt::blue));
     delete window;
 }
@@ -938,7 +938,7 @@ void tst_qquickwindow::headless()
     QQuickWindow* window = qobject_cast<QQuickWindow*>(created);
     QVERIFY(window);
 
-    QTest::qWaitForWindowShown(window);
+    QVERIFY(QTest::qWaitForWindowExposed(window));
     QVERIFY(window->isVisible());
 
     QSignalSpy initialized(window, SIGNAL(sceneGraphInitialized()));
@@ -963,7 +963,7 @@ void tst_qquickwindow::headless()
 
     // Show and verify that we are back and running
     window->show();
-    QTest::qWaitForWindowShown(window);
+    QVERIFY(QTest::qWaitForWindowExposed(window));
 
     QTRY_COMPARE(initialized.size(), 1);
     QVERIFY(window->openglContext() != 0);
@@ -1005,7 +1005,7 @@ void tst_qquickwindow::ignoreUnhandledMouseEvents()
     QQuickWindow* window = new QQuickWindow;
     window->resize(100, 100);
     window->show();
-    QTest::qWaitForWindowShown(window);
+    QVERIFY(QTest::qWaitForWindowExposed(window));
 
     QQuickItem* item = new QQuickItem;
     item->setSize(QSizeF(100, 100));
@@ -1050,7 +1050,8 @@ void tst_qquickwindow::ownershipRootItem()
 
     QQuickWindow* window = qobject_cast<QQuickWindow*>(created);
     QVERIFY(window);
-    QTest::qWaitForWindowShown(window);
+    window->show();
+    QVERIFY(QTest::qWaitForWindowExposed(window));
 
     RootItemAccessor* accessor = window->findChild<RootItemAccessor*>("accessor");
     QVERIFY(accessor);
diff --git a/tests/auto/quick/touchmouse/tst_touchmouse.cpp b/tests/auto/quick/touchmouse/tst_touchmouse.cpp
index cb22160..e6ad773 100644
--- a/tests/auto/quick/touchmouse/tst_touchmouse.cpp
+++ b/tests/auto/quick/touchmouse/tst_touchmouse.cpp
@@ -193,7 +193,7 @@ void tst_TouchMouse::simpleTouchEvent()
     window->setSource(testFileUrl("singleitem.qml"));
     window->show();
     window->requestActivateWindow();
-    QTest::qWaitForWindowShown(window);
+    QVERIFY(QTest::qWaitForWindowExposed(window));
     QVERIFY(window->rootObject() != 0);
 
     EventItem *eventItem1 = window->rootObject()->findChild<EventItem*>("eventItem1");
@@ -348,7 +348,7 @@ void tst_TouchMouse::mouse()
     QVERIFY(eventItem1);
     EventItem *eventItem2 = window->rootObject()->findChild<EventItem*>("eventItem2");
     QVERIFY(eventItem2);
-    QTest::qWaitForWindowShown(window);
+    QVERIFY(QTest::qWaitForWindowExposed(window));
 
     // bottom item likes mouse, top likes touch
     eventItem1->setAcceptedMouseButtons(Qt::LeftButton);
@@ -385,7 +385,7 @@ void tst_TouchMouse::touchOverMouse()
     eventItem1->setAcceptedMouseButtons(Qt::LeftButton);
     eventItem2->acceptTouch = true;
 
-    QTest::qWaitForWindowShown(window);
+    QVERIFY(QTest::qWaitForWindowExposed(window));
 
     QCOMPARE(eventItem1->eventList.size(), 0);
     QPoint p1 = QPoint(20, 20);
@@ -427,7 +427,7 @@ void tst_TouchMouse::mouseOverTouch()
     eventItem2->setAcceptedMouseButtons(Qt::LeftButton);
     eventItem2->acceptMouse = true;
 
-    QTest::qWaitForWindowShown(window);
+    QVERIFY(QTest::qWaitForWindowExposed(window));
 
     QPoint p1 = QPoint(20, 20);
     QTest::qWait(qApp->styleHints()->mouseDoubleClickInterval() + 10);