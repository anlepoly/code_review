diff --git a/doc/src/examples/multipleinheritance.qdoc b/doc/src/examples/multipleinheritance.qdoc
index 0921aa2..5d19e7c 100644
--- a/doc/src/examples/multipleinheritance.qdoc
+++ b/doc/src/examples/multipleinheritance.qdoc
@@ -29,9 +29,9 @@
     \example uitools/multipleinheritance
     \title Multiple Inheritance Example
 
-    The Multiple Inheritance Example shows how to use a form created with \QD
-    in an application by subclassing both QWidget and the user interface
-    class, which is \c{Ui::CalculatorForm}.
+    The Multiple Inheritance Example shows how to use a form created with
+    Qt Designer in an application by subclassing both QWidget and the user
+    interface class, which is \c{Ui::CalculatorForm}.
 
     \image multipleinheritance-example.png
 
diff --git a/src/corelib/doc/src/plugins-howto.qdoc b/src/corelib/doc/src/plugins-howto.qdoc
index 83a4a8b..2048957 100644
--- a/src/corelib/doc/src/plugins-howto.qdoc
+++ b/src/corelib/doc/src/plugins-howto.qdoc
@@ -68,7 +68,7 @@
     Since the higher-level API is built on top of the lower-level API,
     some issues are common to both.
 
-    If you want to provide plugins for use with \l{Qt Designer}, see the QtDesigner
+    If you want to provide plugins for use with Qt Designer, see the QtDesigner
     module documentation.
 
     Topics:
@@ -193,7 +193,7 @@
     The \l{tools/plugandpaint}{Plug & Paint} example documentation
     explains this process in detail. See also \l{Creating Custom
     Widgets for Qt Designer} for information about issues that are
-    specific to \l{Qt Designer}. You can also take a look at the
+    specific to Qt Designer. You can also take a look at the
     \l{Echo Plugin Example} which is a more trivial example on
     how to implement a plugin that extends Qt applications.
     Please note that a QCoreApplication must have been initialized
diff --git a/src/corelib/kernel/qcoreapplication.cpp b/src/corelib/kernel/qcoreapplication.cpp
index 86f445b..a59cdf8 100644
--- a/src/corelib/kernel/qcoreapplication.cpp
+++ b/src/corelib/kernel/qcoreapplication.cpp
@@ -1544,7 +1544,7 @@ void QCoreApplication::quit()
     to all toplevel windows, where a reimplementation of changeEvent can
     re-translate the user interface by passing user-visible strings via the
     tr() function to the respective property setters. User-interface classes
-    generated by \l{Qt Designer} provide a \c retranslateUi() function that can be
+    generated by Qt Designer provide a \c retranslateUi() function that can be
     called.
 
     The function returns true on success and false on failure.
diff --git a/src/widgets/doc/src/widgets-and-layouts/focus.qdoc b/src/widgets/doc/src/widgets-and-layouts/focus.qdoc
index 7417f34..027a756 100644
--- a/src/widgets/doc/src/widgets-and-layouts/focus.qdoc
+++ b/src/widgets/doc/src/widgets-and-layouts/focus.qdoc
@@ -78,7 +78,7 @@
 
     You can customize the tab order using QWidget::setTabOrder(). (If
     you don't, \uicontrol Tab generally moves focus in the order of widget
-    construction.) \l{Qt Designer} provides a means of visually
+    construction.) Qt Designer provides a means of visually
     changing the tab order.
 
     Since pressing \uicontrol Tab is so common, most widgets that can have focus
diff --git a/src/widgets/doc/src/widgets-and-layouts/stylesheet.qdoc b/src/widgets/doc/src/widgets-and-layouts/stylesheet.qdoc
index bc1eb76..63f90c6 100644
--- a/src/widgets/doc/src/widgets-and-layouts/stylesheet.qdoc
+++ b/src/widgets/doc/src/widgets-and-layouts/stylesheet.qdoc
@@ -95,7 +95,7 @@
     consideration. Unlike palette fiddling, style sheets offer
     guarantees: If you set the background color of a QPushButton to be
     red, you can be assured that the button will have a red background
-    in all styles, on all platforms. In addition, \l{Qt Designer}
+    in all styles, on all platforms. In addition, Qt Designer
     provides style sheet integration, making it easy to view the effects
     of a style sheet in different \l{QStyle}{widget styles}.
 
@@ -548,13 +548,13 @@
     \nextpage Customizing Qt Widgets Using Style Sheets
     \title Qt Designer Integration
 
-    \l{Qt Designer}{Qt Designer} is an excellent tool
+    Qt Designer{Qt Designer} is an excellent tool
     to preview style sheets. You can right-click on any widget in Designer
     and select \uicontrol{Change styleSheet...} to set the style sheet.
 
     \image designer-stylesheet-options.png
 
-    In Qt 4.2 and later, \l{Qt Designer} also includes a
+    In Qt 4.2 and later, Qt Designer also includes a
     style sheet syntax highlighter and validator. The validator indicates
     if the syntax is valid or invalid, at the bottom left of the \uicontrol{Edit
     Style Sheet} dialog.
diff --git a/src/widgets/doc/src/widgets-tutorial.qdoc b/src/widgets/doc/src/widgets-tutorial.qdoc
index 10eabd1..a521ec6 100644
--- a/src/widgets/doc/src/widgets-tutorial.qdoc
+++ b/src/widgets/doc/src/widgets-tutorial.qdoc
@@ -233,7 +233,7 @@
 
     As well as QHBoxLayout and QVBoxLayout, Qt also provides QGridLayout
     and QFormLayout classes to help with more complex user interfaces.
-    These can be seen if you run \l{Qt Designer}.
+    These can be seen if you run Qt Designer.
 
     \section1 Setting up the Model
 
diff --git a/src/widgets/kernel/qwidget.cpp b/src/widgets/kernel/qwidget.cpp
index c2b78e8..c068f4e 100644
--- a/src/widgets/kernel/qwidget.cpp
+++ b/src/widgets/kernel/qwidget.cpp
@@ -529,7 +529,7 @@ void QWidget::setAutoFillBackground(bool enabled)
     is known as a composite widget. These can be created by constructing a
     widget with the required visual properties - a QFrame, for example - and
     adding child widgets to it, usually managed by a layout. The above diagram
-    shows such a composite widget that was created using \l{Qt Designer}.
+    shows such a composite widget that was created using Qt Designer.
 
     Composite widgets can also be created by subclassing a standard widget,
     such as QWidget or QFrame, and adding the necessary layout and child