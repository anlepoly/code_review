diff --git a/src/designer/src/designer/qdesigner_actions.cpp b/src/designer/src/designer/qdesigner_actions.cpp
index 8c95f83..8f39996 100644
--- a/src/designer/src/designer/qdesigner_actions.cpp
+++ b/src/designer/src/designer/qdesigner_actions.cpp
@@ -1338,7 +1338,7 @@ void QDesignerActions::savePreviewImage()
         return;
 
     QImage image;
-    const QString extension = QString::fromAscii(format);
+    const QString extension = QString::fromLatin1(format);
     const QString filter = tr("Image files (*.%1)").arg(extension);
 
     QString suggestion = fw->fileName();
diff --git a/src/designer/src/lib/sdk/abstractintegration.cpp b/src/designer/src/lib/sdk/abstractintegration.cpp
index b86de92..0a74fce 100644
--- a/src/designer/src/lib/sdk/abstractintegration.cpp
+++ b/src/designer/src/lib/sdk/abstractintegration.cpp
@@ -381,12 +381,12 @@ void QDesignerIntegrationPrivate::initialize()
 
     QFile f(m_gradientsPath);
     if (f.open(QIODevice::ReadOnly)) {
-        QtGradientUtils::restoreState(m_gradientManager, QString::fromAscii(f.readAll()));
+        QtGradientUtils::restoreState(m_gradientManager, QString::fromLatin1(f.readAll()));
         f.close();
     } else {
         QFile defaultGradients(QStringLiteral(":/qt-project.org/designer/defaultgradients.xml"));
         if (defaultGradients.open(QIODevice::ReadOnly)) {
-            QtGradientUtils::restoreState(m_gradientManager, QString::fromAscii(defaultGradients.readAll()));
+            QtGradientUtils::restoreState(m_gradientManager, QString::fromLatin1(defaultGradients.readAll()));
             defaultGradients.close();
         }
     }
diff --git a/src/designer/src/lib/shared/csshighlighter.cpp b/src/designer/src/lib/shared/csshighlighter.cpp
index 56e8765..e020c63 100644
--- a/src/designer/src/lib/shared/csshighlighter.cpp
+++ b/src/designer/src/lib/shared/csshighlighter.cpp
@@ -94,7 +94,7 @@ void CssHighlighter::highlightBlock(const QString& text)
     for (int i = 0; i < text.length(); i++) {
         int token = ALNUM;
         const QChar c = text.at(i);
-        const char a = c.toAscii();
+        const char a = c.toLatin1();
 
         if (state == Quote) {
             if (a == '\\') {
diff --git a/src/designer/src/lib/shared/formlayoutmenu.cpp b/src/designer/src/lib/shared/formlayoutmenu.cpp
index fd7aa27..196d314 100644
--- a/src/designer/src/lib/shared/formlayoutmenu.cpp
+++ b/src/designer/src/lib/shared/formlayoutmenu.cpp
@@ -275,19 +275,19 @@ static inline PrefixCharacterKind prefixCharacterKind(const QChar &c)
     case QChar::Number_DecimalDigit:
         return PC_Digit;
     case QChar::Letter_Lowercase: {
-            const char a = c.toAscii();
+            const char a = c.toLatin1();
             if (a >= 'a' && a <= 'z')
                 return PC_LowerCaseLetter;
         }
         break;
     case QChar::Letter_Uppercase: {
-            const char a = c.toAscii();
+            const char a = c.toLatin1();
             if (a >= 'A' && a <= 'Z')
                 return PC_UpperCaseLetter;
         }
         break;
     case QChar::Punctuation_Connector:
-        if (c.toAscii() == '_')
+        if (c.toLatin1() == '_')
             return PC_Other;
         break;
     default:
diff --git a/src/designer/src/lib/shared/qdesigner_utils.cpp b/src/designer/src/lib/shared/qdesigner_utils.cpp
index 186dc07..c501166 100644
--- a/src/designer/src/lib/shared/qdesigner_utils.cpp
+++ b/src/designer/src/lib/shared/qdesigner_utils.cpp
@@ -753,7 +753,7 @@ namespace qdesigner_internal
             return false;
         }
         if (uic.exitCode()) {
-            errorMessage =  QString::fromAscii(uic.readAllStandardError());
+            errorMessage =  QString::fromLatin1(uic.readAllStandardError());
             return false;
         }
         ba = uic.readAllStandardOutput();
diff --git a/src/designer/src/lib/uilib/abstractformbuilder.cpp b/src/designer/src/lib/uilib/abstractformbuilder.cpp
index 7d724a0..91c71bb 100644
--- a/src/designer/src/lib/uilib/abstractformbuilder.cpp
+++ b/src/designer/src/lib/uilib/abstractformbuilder.cpp
@@ -1837,7 +1837,7 @@ static void storeItemFlags(const T *item, QList<DomProperty*> *properties)
     if (item->flags() != defaultFlags) {
         DomProperty *p = new DomProperty;
         p->setAttributeName(strings.flagsAttribute);
-        p->setElementSet(QString::fromAscii(itemFlags_enum.valueToKeys(item->flags())));
+        p->setElementSet(QString::fromLatin1(itemFlags_enum.valueToKeys(item->flags())));
         properties->append(p);
     }
 }
@@ -1920,7 +1920,7 @@ static void loadItemPropsNFlags(QAbstractFormBuilder *abstractFormBuilder, T *it
 
     DomProperty *p;
     if ((p = properties.value(strings.flagsAttribute)) && p->kind() == DomProperty::Set)
-        item->setFlags(enumKeysToValue<Qt::ItemFlags>(itemFlags_enum, p->elementSet().toAscii()));
+        item->setFlags(enumKeysToValue<Qt::ItemFlags>(itemFlags_enum, p->elementSet().toLatin1()));
 }
 
 #else
@@ -2057,7 +2057,7 @@ static void loadItemPropsNFlags(QAbstractFormBuilder *abstractFormBuilder, QTabl
 
     DomProperty *p;
     if ((p = properties.value(strings.flagsAttribute)) && p->kind() == DomProperty::Set)
-        item->setFlags(enumKeysToValue<Qt::ItemFlags>(itemFlags_enum, p->elementSet().toAscii()));
+        item->setFlags(enumKeysToValue<Qt::ItemFlags>(itemFlags_enum, p->elementSet().toLatin1()));
 }
 
 static void loadItemPropsNFlags(QAbstractFormBuilder *abstractFormBuilder, QListWidgetItem *item,
@@ -2070,7 +2070,7 @@ static void loadItemPropsNFlags(QAbstractFormBuilder *abstractFormBuilder, QList
 
     DomProperty *p;
     if ((p = properties.value(strings.flagsAttribute)) && p->kind() == DomProperty::Set)
-        item->setFlags(enumKeysToValue<Qt::ItemFlags>(itemFlags_enum, p->elementSet().toAscii()));
+        item->setFlags(enumKeysToValue<Qt::ItemFlags>(itemFlags_enum, p->elementSet().toLatin1()));
 }
 
 #endif
@@ -2499,7 +2499,7 @@ void QAbstractFormBuilder::loadTreeWidgetExtraInfo(DomWidget *ui_widget, QTreeWi
         int col = -1;
         foreach (DomProperty *property, properties) {
             if (property->attributeName() == strings.flagsAttribute && !property->elementSet().isEmpty()) {
-                currentItem->setFlags(enumKeysToValue<Qt::ItemFlags>(itemFlags_enum, property->elementSet().toAscii()));
+                currentItem->setFlags(enumKeysToValue<Qt::ItemFlags>(itemFlags_enum, property->elementSet().toLatin1()));
             } else if (property->attributeName() == strings.textAttribute && property->elementString()) {
                 col++;
                 QVariant textV = textBuilder()->loadText(property);
diff --git a/src/designer/src/lib/uilib/properties.cpp b/src/designer/src/lib/uilib/properties.cpp
index efce009..8b80066 100644
--- a/src/designer/src/lib/uilib/properties.cpp
+++ b/src/designer/src/lib/uilib/properties.cpp
@@ -622,9 +622,9 @@ DomProperty *variantToDomProperty(QAbstractFormBuilder *afb, const QMetaObject *
         if ((v.type() == QVariant::Int || v.type() == QVariant::UInt) && meta_property.isEnumType()) {
             const QMetaEnum e = meta_property.enumerator();
             if (e.isFlag())
-                dom_prop->setElementSet(QString::fromAscii(e.valueToKeys(v.toInt())));
+                dom_prop->setElementSet(QString::fromLatin1(e.valueToKeys(v.toInt())));
             else
-                dom_prop->setElementEnum(QString::fromAscii(e.valueToKey(v.toInt())));
+                dom_prop->setElementEnum(QString::fromLatin1(e.valueToKey(v.toInt())));
             return dom_prop;
         }
         if (!meta_property.hasStdCppSet() || (isOfType(meta, &QAbstractScrollArea::staticMetaObject) && pname == strings.cursorProperty))