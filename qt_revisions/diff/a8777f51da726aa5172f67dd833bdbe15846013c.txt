diff --git a/tools/qdoc3/qmlcodemarker.cpp b/tools/qdoc3/qmlcodemarker.cpp
index 8735f71..0fa3697 100644
--- a/tools/qdoc3/qmlcodemarker.cpp
+++ b/tools/qdoc3/qmlcodemarker.cpp
@@ -219,7 +219,7 @@ QString QmlCodeMarker::addMarkUp(const QString &code,
         QDeclarativeJS::AST::Node::accept(ast, &visitor);
         output = visitor.markedUpCode();
     } else {
-        location.warning(tr("Unable to parse QML: \"%1\" at line %2, column %3").arg(
+        location.warning(tr("Unable to parse QML snippet: \"%1\" at line %2, column %3").arg(
             parser.errorMessage()).arg(parser.errorLineNumber()).arg(
             parser.errorColumnNumber()));
         output = protect(code);
diff --git a/tools/qdoc3/qmlcodeparser.cpp b/tools/qdoc3/qmlcodeparser.cpp
index 585bd1e..79a518e 100644
--- a/tools/qdoc3/qmlcodeparser.cpp
+++ b/tools/qdoc3/qmlcodeparser.cpp
@@ -172,6 +172,11 @@ void QmlCodeParser::parseSourceFile(const Location& location,
                               topicCommandsAllowed);
         QDeclarativeJS::AST::Node::accept(ast, &visitor);
     }
+    foreach (const  QDeclarativeJS::DiagnosticMessage &msg, parser->diagnosticMessages()) {
+        qDebug().nospace() << qPrintable(filePath) << ':' << msg.loc.startLine
+                           << ": QML syntax error at col " << msg.loc.startColumn
+                           << ": " << qPrintable(msg.message);
+    }
 }
 
 /*!