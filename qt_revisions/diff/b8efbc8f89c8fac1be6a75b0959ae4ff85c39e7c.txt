diff --git a/src/serialport.cpp b/src/serialport.cpp
index 8380c97..7f859f0 100755
--- a/src/serialport.cpp
+++ b/src/serialport.cpp
@@ -666,7 +666,7 @@ SerialPort::~SerialPort()
 void SerialPort::setPort(const QString &name)
 {
     Q_D(SerialPort);
-    d->options.systemLocation = d->engine->toSystemLocation(name);
+    d->options.systemLocation = SerialPortPrivate::portNameToSystemLocation(name);
 }
 
 /*!
@@ -677,7 +677,7 @@ void SerialPort::setPort(const QString &name)
 void SerialPort::setPort(const SerialPortInfo &info)
 {
     Q_D(SerialPort);
-    d->options.systemLocation = d->engine->toSystemLocation(info.systemLocation());
+    d->options.systemLocation = SerialPortPrivate::portNameToSystemLocation(info.systemLocation());
 }
 
 /*!
@@ -719,7 +719,7 @@ void SerialPort::setPort(const SerialPortInfo &info)
 QString SerialPort::portName() const
 {
     Q_D(const SerialPort);
-    return d->engine->fromSystemLocation(d->options.systemLocation);
+    return SerialPortPrivate::portNameFromSystemLocation(d->options.systemLocation);
 }
 
 /*! \reimp
diff --git a/src/serialport_p.h b/src/serialport_p.h
index 597c95f..bf004ee 100755
--- a/src/serialport_p.h
+++ b/src/serialport_p.h
@@ -101,6 +101,15 @@ public:
     bool canErrorNotification();
 
 public:
+    static QString portNameToSystemLocation(const QString &port);
+    static QString portNameFromSystemLocation(const QString &location);
+
+    static qint32 rateFromSetting(qint32 setting);
+    static qint32 settingFromRate(qint32 rate);
+
+    static QList<qint32> standardRates();
+
+public:
     qint64 readBufferMaxSize;
     QRingBuffer readBuffer;
     QRingBuffer writeBuffer;
diff --git a/src/serialportengine_p.h b/src/serialportengine_p.h
index 690e897..f198e30 100755
--- a/src/serialportengine_p.h
+++ b/src/serialportengine_p.h
@@ -88,9 +88,6 @@ public:
                         bool checkRead, bool checkWrite,
                         bool *selectForRead, bool *selectForWrite) = 0;
 
-    virtual QString toSystemLocation(const QString &port) const = 0;
-    virtual QString fromSystemLocation(const QString &location) const = 0;
-
     virtual bool setRate(qint32 rate, SerialPort::Directions dir) = 0;
     virtual bool setDataBits(SerialPort::DataBits dataBits) = 0;
     virtual bool setParity(SerialPort::Parity parity) = 0;
diff --git a/src/serialportengine_symbian.cpp b/src/serialportengine_symbian.cpp
index f8a6253..4c714e5 100755
--- a/src/serialportengine_symbian.cpp
+++ b/src/serialportengine_symbian.cpp
@@ -515,32 +515,6 @@ bool SymbianSerialPortEngine::select(int timeout,
     return result;
 }
 
-//static const QString defaultPathPostfix = ":";
-
-/*!
-    Converts a platform specific \a port name to a system location
-    and returns the value.
-
-    Does not convert anything because on Symbian both are equal.
-*/
-QString SymbianSerialPortEngine::toSystemLocation(const QString &port) const
-{
-    // Port name is equval to port location.
-    return port;
-}
-
-/*!
-    Converts a platform specific system \a location to a port name
-    and returns the value.
-
-    Does not convert anything because on Symbian both are equal.
-*/
-QString SymbianSerialPortEngine::fromSystemLocation(const QString &location) const
-{
-    // Port name is equval to port location.
-    return location;
-}
-
 /*!
     Sets the desired baud \a rate for the given direction \a dir.
     As Symbian does not support separate directions, the only valid value for
@@ -757,91 +731,6 @@ bool SymbianSerialPortEngine::processIOErrors()
     return false;
 }
 
-/* Public static methods */
-
-struct RatePair
-{
-   qint32 rate;    // The numerical value of baud rate.
-   qint32 setting; // The OS-specific code of baud rate.
-   bool operator<(const RatePair &other) const { return rate < other.rate; }
-   bool operator==(const RatePair &other) const { return setting == other.setting; }
-};
-
-// This table contains correspondences standard pairs values of
-// baud rates that are defined in files
-// - d32comm.h for Symbian^3
-// - d32public.h for Symbian SR1
-static
-const RatePair standardRatesTable[] =
-{
-    { 50, EBps50 },
-    { 75, EBps75 },
-    { 110, EBps110},
-    { 134, EBps134 },
-    { 150, EBps150 },
-    { 300, EBps300 },
-    { 600, EBps600 },
-    { 1200, EBps1200 },
-    { 1800, EBps1800 },
-    { 2000, EBps2000 },
-    { 2400, EBps2400 },
-    { 3600, EBps3600 },
-    { 4800, EBps4800 },
-    { 7200, EBps7200 },
-    { 9600, EBps9600 },
-    { 19200, EBps19200 },
-    { 38400, EBps38400 },
-    { 57600, EBps57600 },
-    { 115200, EBps115200 },
-    { 230400, EBps230400 },
-    { 460800, EBps460800 },
-    { 576000, EBps576000 },
-    { 921600, EBps921600 },
-    { 1152000, EBps1152000 },
-    //{ 1843200, EBps1843200 }, only for Symbian SR1
-    { 4000000, EBps4000000 }
-};
-
-static const RatePair *standardRatesTable_end =
-        standardRatesTable + sizeof(standardRatesTable)/sizeof(*standardRatesTable);
-
-/*!
-    Converts the symbian-specific baud rate enum to a numeric value.
-    If the desired item is not found, returns 0.
-*/
-qint32 SymbianSerialPortEngine::rateFromSetting(EBps setting)
-{
-    const RatePair rp = { 0, setting };
-    const RatePair *ret = qFind(standardRatesTable, standardRatesTable_end, rp);
-    return ret != standardRatesTable_end ? ret->rate : 0;
-}
-
-/*!
-    Converts a numeric baud rate value to a symbian-specific enum.
-    If the desired item is not found, returns 0.
-*/
-EBps SymbianSerialPortEngine::settingFromRate(qint32 rate)
-{
-    const RatePair rp = { rate, 0 };
-    const RatePair *ret = qBinaryFind(standardRatesTable, standardRatesTable_end, rp);
-    return ret != standardRatesTable_end ? ret->setting : 0;
-}
-
-/*!
-    Returns a list of standard baud rate values.
-
-    Enums are defined in:
-   - d32comm.h for Symbian^3
-   - d32public.h for Symbian SR1.
-*/
-QList<qint32> SymbianSerialPortEngine::standardRates()
-{
-    QList<qint32> ret;
-    for (const RatePair *it = standardRatesTable; it != standardRatesTable_end; ++it)
-       ret.append(it->rate);
-    return ret;
-}
-
 /* Protected methods */
 
 /*!
@@ -967,6 +856,115 @@ SerialPortEngine *SerialPortEngine::create(SerialPortPrivate *d)
     return new SymbianSerialPortEngine(d);
 }
 
+/* Public static the SerialPortPrivate methods */
+
+/*!
+    Converts a platform specific \a port name to a system location
+    and returns the value.
+
+    Does not convert anything because on Symbian both are equal.
+*/
+QString SerialPortPrivate::portNameToSystemLocation(const QString &port) const
+{
+    // Port name is equval to port location.
+    return port;
+}
+
+/*!
+    Converts a platform specific system \a location to a port name
+    and returns the value.
+
+    Does not convert anything because on Symbian both are equal.
+*/
+QString SerialPortPrivate::portNameFromSystemLocation(const QString &location) const
+{
+    // Port name is equval to port location.
+    return location;
+}
+
+struct RatePair
+{
+   qint32 rate;    // The numerical value of baud rate.
+   qint32 setting; // The OS-specific code of baud rate.
+   bool operator<(const RatePair &other) const { return rate < other.rate; }
+   bool operator==(const RatePair &other) const { return setting == other.setting; }
+};
+
+// This table contains correspondences standard pairs values of
+// baud rates that are defined in files
+// - d32comm.h for Symbian^3
+// - d32public.h for Symbian SR1
+static
+const RatePair standardRatesTable[] =
+{
+    { 50, EBps50 },
+    { 75, EBps75 },
+    { 110, EBps110},
+    { 134, EBps134 },
+    { 150, EBps150 },
+    { 300, EBps300 },
+    { 600, EBps600 },
+    { 1200, EBps1200 },
+    { 1800, EBps1800 },
+    { 2000, EBps2000 },
+    { 2400, EBps2400 },
+    { 3600, EBps3600 },
+    { 4800, EBps4800 },
+    { 7200, EBps7200 },
+    { 9600, EBps9600 },
+    { 19200, EBps19200 },
+    { 38400, EBps38400 },
+    { 57600, EBps57600 },
+    { 115200, EBps115200 },
+    { 230400, EBps230400 },
+    { 460800, EBps460800 },
+    { 576000, EBps576000 },
+    { 921600, EBps921600 },
+    { 1152000, EBps1152000 },
+    //{ 1843200, EBps1843200 }, only for Symbian SR1
+    { 4000000, EBps4000000 }
+};
+
+static const RatePair *standardRatesTable_end =
+        standardRatesTable + sizeof(standardRatesTable)/sizeof(*standardRatesTable);
+
+/*!
+    Converts the symbian-specific baud rate enum to a numeric value.
+    If the desired item is not found, returns 0.
+*/
+qint32 SerialPortPrivate::rateFromSetting(qint32 setting)
+{
+    const RatePair rp = { 0, setting };
+    const RatePair *ret = qFind(standardRatesTable, standardRatesTable_end, rp);
+    return ret != standardRatesTable_end ? ret->rate : 0;
+}
+
+/*!
+    Converts a numeric baud rate value to a symbian-specific enum.
+    If the desired item is not found, returns 0.
+*/
+qint32 SerialPortPrivate::settingFromRate(qint32 rate)
+{
+    const RatePair rp = { rate, 0 };
+    const RatePair *ret = qBinaryFind(standardRatesTable, standardRatesTable_end, rp);
+    return ret != standardRatesTable_end ? ret->setting : 0;
+}
+
+/*!
+    Returns a list of standard baud rate values.
+
+    Enums are defined in:
+   - d32comm.h for Symbian^3
+   - d32public.h for Symbian SR1.
+*/
+QList<qint32> SerialPortPrivate::standardRates()
+{
+    QList<qint32> ret;
+    for (const RatePair *it = standardRatesTable; it != standardRatesTable_end; ++it)
+       ret.append(it->rate);
+    return ret;
+}
+
 #include "moc_serialportengine_symbian_p.cpp"
 
 QT_END_NAMESPACE_SERIALPORT
diff --git a/src/serialportengine_symbian_p.h b/src/serialportengine_symbian_p.h
index 649fa12..36b42f8 100755
--- a/src/serialportengine_symbian_p.h
+++ b/src/serialportengine_symbian_p.h
@@ -79,9 +79,6 @@ public:
                         bool checkRead, bool checkWrite,
                         bool *selectForRead, bool *selectForWrite);
 
-    virtual QString toSystemLocation(const QString &port) const;
-    virtual QString fromSystemLocation(const QString &location) const;
-
     virtual bool setRate(qint32 rate, SerialPort::Directions dir);
     virtual bool setDataBits(SerialPort::DataBits dataBits);
     virtual bool setParity(SerialPort::Parity parity);
@@ -99,11 +96,6 @@ public:
 
     virtual bool processIOErrors();
 
-public:
-    static qint32 rateFromSetting(EBps setting);
-    static EBps settingFromRate(qint32 rate);
-    static QList<qint32> standardRates();
-
 protected:
     virtual void detectDefaultSettings();
     virtual SerialPort::PortError decodeSystemError() const;
diff --git a/src/serialportengine_unix.cpp b/src/serialportengine_unix.cpp
index 07bb21d..9ff902a 100755
--- a/src/serialportengine_unix.cpp
+++ b/src/serialportengine_unix.cpp
@@ -155,7 +155,7 @@ bool UnixSerialPortEngine::open(const QString &location, QIODevice::OpenMode mod
 {
     // First, here need check locked device or not.
     bool byCurrPid = false;
-    QByteArray portName = fromSystemLocation(location).toLocal8Bit();
+    QByteArray portName = SerialPortPrivate::portNameFromSystemLocation(location).toLocal8Bit();
     const char *ptr = portName.constData();
     if (TtyLocker::isLocked(ptr, &byCurrPid)) {
         dptr->setError(SerialPort::PermissionDeniedError);
@@ -241,7 +241,7 @@ void UnixSerialPortEngine::close(const QString &location)
 
     // Try unlock device by location.
     bool byCurrPid = false;
-    QByteArray portName = fromSystemLocation(location).toLocal8Bit();
+    QByteArray portName = SerialPortPrivate::portNameFromSystemLocation(location).toLocal8Bit();
     const char *ptr = portName.constData();
     if (TtyLocker::isLocked(ptr, &byCurrPid) && byCurrPid)
         TtyLocker::unlock(ptr);
@@ -580,46 +580,6 @@ bool UnixSerialPortEngine::select(int timeout,
     return true;
 }
 
-#if defined (Q_OS_MAC)
-static const QString defaultPathPrefix = QLatin1String("/dev/cu.");
-static const QString notUsedPathPrefix = QLatin1String("/dev/tty.");
-#else
-static const QString defaultPathPrefix = QLatin1String("/dev/");
-#endif
-
-/*!
-    Converts a platform specific \a port name to a system location
-    and returns the value.
-*/
-QString UnixSerialPortEngine::toSystemLocation(const QString &port) const
-{
-    QString ret = port;
-
-#if defined (Q_OS_MAC)
-    ret.remove(notUsedPathPrefix);
-#endif
-
-    if (!ret.contains(defaultPathPrefix))
-        ret.prepend(defaultPathPrefix);
-    return ret;
-}
-
-/*!
-    Converts a platform specific system \a location to a port name
-    and returns the value.
-*/
-QString UnixSerialPortEngine::fromSystemLocation(const QString &location) const
-{
-    QString ret = location;
-
-#if defined (Q_OS_MAC)
-    ret.remove(notUsedPathPrefix);
-#endif
-
-    ret.remove(defaultPathPrefix);
-    return ret;
-}
-
 /*!
     Sets the desired baud \a rate for the given direction \a dir,
     where \a rate is expressed by any positive integer type qint32.
@@ -636,7 +596,7 @@ bool UnixSerialPortEngine::setRate(qint32 rate, SerialPort::Directions dir)
     // prepare section
 
     if (ret) {
-        const qint32 unixRate = settingFromRate(rate);
+        const qint32 unixRate = SerialPortPrivate::settingFromRate(rate);
         if (unixRate > 0) {
             // try prepate to set standard baud rate
 #if defined (Q_OS_LINUX)
@@ -961,149 +921,6 @@ bool UnixSerialPortEngine::processIOErrors()
     return false;
 }
 
-/* Public static methods */
-
-struct RatePair
-{
-   qint32 rate;    // The numerical value of baud rate.
-   qint32 setting; // The OS-specific code of baud rate.
-   bool operator<(const RatePair &other) const { return rate < other.rate; }
-   bool operator==(const RatePair &other) const { return setting == other.setting; }
-};
-
-// This table contains correspondences standard pairs values of
-// baud rates that are defined in file termios.h
-static
-const RatePair standardRatesTable[] =
-{
-    #if defined (B50)
-    { 50, B50 },
-    #endif
-    #if defined (B75)
-    { 75, B75 },
-    #endif
-    #if defined (B110)
-    { 110, B110 },
-    #endif
-    #if defined (B134)
-    { 134, B134 },
-    #endif
-    #if defined (B150)
-    { 150, B150 },
-    #endif
-    #if defined (B200)
-    { 200, B200 },
-    #endif
-    #if defined (B300)
-    { 300, B300 },
-    #endif
-    #if defined (B600)
-    { 600, B600 },
-    #endif
-    #if defined (B1200)
-    { 1200, B1200 },
-    #endif
-    #if defined (B1800)
-    { 1800, B1800 },
-    #endif
-    #if defined (B2400)
-    { 2400, B2400 },
-    #endif
-    #if defined (B4800)
-    { 4800, B4800 },
-    #endif
-    #if defined (B9600)
-    { 9600, B9600 },
-    #endif
-    #if defined (B19200)
-    { 19200, B19200 },
-    #endif
-    #if defined (B38400)
-    { 38400, B38400 },
-    #endif
-    #if defined (B57600)
-    { 57600, B57600 },
-    #endif
-    #if defined (B115200)
-    { 115200, B115200 },
-    #endif
-    #if defined (B230400)
-    { 230400, B230400 },
-    #endif
-    #if defined (B460800)
-    { 460800, B460800 },
-    #endif
-    #if defined (B500000)
-    { 500000, B500000 },
-    #endif
-    #if defined (B576000)
-    { 576000, B576000 },
-    #endif
-    #if defined (B921600)
-    { 921600, B921600 },
-    #endif
-    #if defined (B1000000)
-    { 1000000, B1000000 },
-    #endif
-    #if defined (B1152000)
-    { 1152000, B1152000 },
-    #endif
-    #if defined (B1500000)
-    { 1500000, B1500000 },
-    #endif
-    #if defined (B2000000)
-    { 2000000, B2000000},
-    #endif
-    #if defined (B2500000)
-    { 2500000, B2500000 },
-    #endif
-    #if defined (B3000000)
-    { 3000000, B3000000 },
-    #endif
-    #if defined (B3500000)
-    { 3500000, B3500000 },
-    #endif
-    #if defined (B4000000)
-    { 4000000, B4000000 }
-    #endif
-};
-
-static const RatePair *standardRatesTable_end =
-        standardRatesTable + sizeof(standardRatesTable)/sizeof(*standardRatesTable);
-
-/*!
-    Converts the *nix-specific baud rate code \a setting to a numeric value.
-    If the desired item is not found, returns 0.
-*/
-qint32 UnixSerialPortEngine::rateFromSetting(qint32 setting)
-{
-    const RatePair rp = { 0, setting };
-    const RatePair *ret = qFind(standardRatesTable, standardRatesTable_end, rp);
-    return ret != standardRatesTable_end ? ret->rate : 0;
-}
-
-/*!
-    Converts a numeric baud \a rate value to the *nix-specific code.
-    If the desired item is not found, returns 0.
-*/
-qint32 UnixSerialPortEngine::settingFromRate(qint32 rate)
-{
-    const RatePair rp = { rate, 0 };
-    const RatePair *ret = qBinaryFind(standardRatesTable, standardRatesTable_end, rp);
-    return ret != standardRatesTable_end ? ret->setting : 0;
-}
-
-/*!
-    Returns a list of standard baud rate values, codes are defined in termios.h.
-*/
-QList<qint32> UnixSerialPortEngine::standardRates()
-{
-    QList<qint32> ret;
-    for (const RatePair *it = standardRatesTable; it != standardRatesTable_end; ++it)
-       ret.append(it->rate);
-    return ret;
-}
-
 /* Protected methods */
 
 /*!
@@ -1146,8 +963,8 @@ void UnixSerialPortEngine::detectDefaultSettings()
     // other *nix
 #endif
     if (!m_isCustomRateSupported || !isCustomRateCurrentSet) {
-        dptr->options.inputRate = rateFromSetting(inputUnixRate);
-        dptr->options.outputRate = rateFromSetting(outputUnixRate);
+        dptr->options.inputRate = SerialPortPrivate::rateFromSetting(inputUnixRate);
+        dptr->options.outputRate = SerialPortPrivate::rateFromSetting(outputUnixRate);
     }
 
     // Detect databits.
@@ -1409,6 +1226,189 @@ SerialPortEngine *SerialPortEngine::create(SerialPortPrivate *d)
     return new UnixSerialPortEngine(d);
 }
 
+/* Public static the SerialPortPrivate methods */
+
+#if defined (Q_OS_MAC)
+static const QLatin1String defaultPathPrefix("/dev/cu.");
+static const QLatin1String notUsedPathPrefix("/dev/tty.");
+#else
+static const QLatin1String defaultPathPrefix("/dev/");
+#endif
+
+/*!
+    Converts a platform specific \a port name to a system location
+    and returns the value.
+*/
+QString SerialPortPrivate::portNameToSystemLocation(const QString &port)
+{
+    QString ret = port;
+
+#if defined (Q_OS_MAC)
+    ret.remove(notUsedPathPrefix);
+#endif
+
+    if (!ret.contains(defaultPathPrefix))
+        ret.prepend(defaultPathPrefix);
+    return ret;
+}
+
+/*!
+    Converts a platform specific system \a location to a port name
+    and returns the value.
+*/
+QString SerialPortPrivate::portNameFromSystemLocation(const QString &location)
+{
+    QString ret = location;
+
+#if defined (Q_OS_MAC)
+    ret.remove(notUsedPathPrefix);
+#endif
+
+    ret.remove(defaultPathPrefix);
+    return ret;
+}
+
+struct RatePair
+{
+   qint32 rate;    // The numerical value of baud rate.
+   qint32 setting; // The OS-specific code of baud rate.
+   bool operator<(const RatePair &other) const { return rate < other.rate; }
+   bool operator==(const RatePair &other) const { return setting == other.setting; }
+};
+
+// This table contains correspondences standard pairs values of
+// baud rates that are defined in file termios.h
+static
+const RatePair standardRatesTable[] =
+{
+    #if defined (B50)
+    { 50, B50 },
+    #endif
+    #if defined (B75)
+    { 75, B75 },
+    #endif
+    #if defined (B110)
+    { 110, B110 },
+    #endif
+    #if defined (B134)
+    { 134, B134 },
+    #endif
+    #if defined (B150)
+    { 150, B150 },
+    #endif
+    #if defined (B200)
+    { 200, B200 },
+    #endif
+    #if defined (B300)
+    { 300, B300 },
+    #endif
+    #if defined (B600)
+    { 600, B600 },
+    #endif
+    #if defined (B1200)
+    { 1200, B1200 },
+    #endif
+    #if defined (B1800)
+    { 1800, B1800 },
+    #endif
+    #if defined (B2400)
+    { 2400, B2400 },
+    #endif
+    #if defined (B4800)
+    { 4800, B4800 },
+    #endif
+    #if defined (B9600)
+    { 9600, B9600 },
+    #endif
+    #if defined (B19200)
+    { 19200, B19200 },
+    #endif
+    #if defined (B38400)
+    { 38400, B38400 },
+    #endif
+    #if defined (B57600)
+    { 57600, B57600 },
+    #endif
+    #if defined (B115200)
+    { 115200, B115200 },
+    #endif
+    #if defined (B230400)
+    { 230400, B230400 },
+    #endif
+    #if defined (B460800)
+    { 460800, B460800 },
+    #endif
+    #if defined (B500000)
+    { 500000, B500000 },
+    #endif
+    #if defined (B576000)
+    { 576000, B576000 },
+    #endif
+    #if defined (B921600)
+    { 921600, B921600 },
+    #endif
+    #if defined (B1000000)
+    { 1000000, B1000000 },
+    #endif
+    #if defined (B1152000)
+    { 1152000, B1152000 },
+    #endif
+    #if defined (B1500000)
+    { 1500000, B1500000 },
+    #endif
+    #if defined (B2000000)
+    { 2000000, B2000000},
+    #endif
+    #if defined (B2500000)
+    { 2500000, B2500000 },
+    #endif
+    #if defined (B3000000)
+    { 3000000, B3000000 },
+    #endif
+    #if defined (B3500000)
+    { 3500000, B3500000 },
+    #endif
+    #if defined (B4000000)
+    { 4000000, B4000000 }
+    #endif
+};
+
+static const RatePair *standardRatesTable_end =
+        standardRatesTable + sizeof(standardRatesTable)/sizeof(*standardRatesTable);
+
+/*!
+    Converts the *nix-specific baud rate code \a setting to a numeric value.
+    If the desired item is not found, returns 0.
+*/
+qint32 SerialPortPrivate::rateFromSetting(qint32 setting)
+{
+    const RatePair rp = { 0, setting };
+    const RatePair *ret = qFind(standardRatesTable, standardRatesTable_end, rp);
+    return ret != standardRatesTable_end ? ret->rate : 0;
+}
+
+/*!
+    Converts a numeric baud \a rate value to the *nix-specific code.
+    If the desired item is not found, returns 0.
+*/
+qint32 SerialPortPrivate::settingFromRate(qint32 rate)
+{
+    const RatePair rp = { rate, 0 };
+    const RatePair *ret = qBinaryFind(standardRatesTable, standardRatesTable_end, rp);
+    return ret != standardRatesTable_end ? ret->setting : 0;
+}
+
+/*!
+    Returns a list of standard baud rate values, codes are defined in termios.h.
+*/
+QList<qint32> SerialPortPrivate::standardRates()
+{
+    QList<qint32> ret;
+    for (const RatePair *it = standardRatesTable; it != standardRatesTable_end; ++it)
+       ret.append(it->rate);
+    return ret;
+}
+
 #include "moc_serialportengine_unix_p.cpp"
 
 QT_END_NAMESPACE_SERIALPORT
diff --git a/src/serialportengine_unix_p.h b/src/serialportengine_unix_p.h
index 029c058..76e04e8 100755
--- a/src/serialportengine_unix_p.h
+++ b/src/serialportengine_unix_p.h
@@ -84,9 +84,6 @@ public:
                         bool checkRead, bool checkWrite,
                         bool *selectForRead, bool *selectForWrite);
 
-    virtual QString toSystemLocation(const QString &port) const;
-    virtual QString fromSystemLocation(const QString &location) const;
-
     virtual bool setRate(qint32 rate, SerialPort::Directions dir);
     virtual bool setDataBits(SerialPort::DataBits dataBits);
     virtual bool setParity(SerialPort::Parity parity);
@@ -104,11 +101,6 @@ public:
 
     virtual bool processIOErrors();
 
-public:
-    static qint32 rateFromSetting(qint32 setting);
-    static qint32 settingFromRate(qint32 rate);
-    static QList<qint32> standardRates();
-
 protected:
     virtual void detectDefaultSettings();
     virtual SerialPort::PortError decodeSystemError() const;
diff --git a/src/serialportengine_win.cpp b/src/serialportengine_win.cpp
index 20fe2f3..095aa08 100755
--- a/src/serialportengine_win.cpp
+++ b/src/serialportengine_win.cpp
@@ -653,46 +653,6 @@ bool WinSerialPortEngine::select(int timeout,
     return sucessResult;
 }
 
-#if !defined (Q_OS_WINCE)
-static const QString defaultPathPrefix = QLatin1String("\\\\.\\");
-#else
-static const QString defaultPathPostfix = QLatin1String(":");
-#endif
-
-/*!
-    Converts a platform specific \a port name to a system location
-    and returns the value.
-*/
-QString WinSerialPortEngine::toSystemLocation(const QString &port) const
-{
-    QString ret = port;
-#if !defined (Q_OS_WINCE)
-    if (!ret.contains(defaultPathPrefix))
-        ret.prepend(defaultPathPrefix);
-#else
-    if (!ret.contains(defaultPathPostfix))
-        ret.append(defaultPathPostfix);
-#endif
-    return ret;
-}
-
-/*!
-    Converts a platform specific system \a location to a port name
-    and returns the value.
-*/
-QString WinSerialPortEngine::fromSystemLocation(const QString &location) const
-{
-    QString ret = location;
-#if !defined (Q_OS_WINCE)
-    if (ret.contains(defaultPathPrefix))
-        ret.remove(defaultPathPrefix);
-#else
-    if (ret.contains(defaultPathPostfix))
-        ret.remove(defaultPathPostfix);
-#endif
-    return ret;
-}
-
 /*!
     Sets the desired baud \a rate for the given direction \a dir.
     As Windows does not support separate directions, the only valid value for
@@ -961,75 +921,6 @@ void WinSerialPortEngine::unlockNotification(NotificationLockerType type)
 
 #endif
 
-/* Public static methods */
-
-// This table contains standard values of baud rates that
-// are defined in MSDN and/or in Win SDK file winbase.h
-static
-const qint32 standardRatesTable[] =
-{
-    #if defined (CBR_110)
-    CBR_110,
-    #endif
-    #if defined (CBR_300)
-    CBR_300,
-    #endif
-    #if defined (CBR_600)
-    CBR_600,
-    #endif
-    #if defined (CBR_1200)
-    CBR_1200,
-    #endif
-    #if defined (CBR_2400)
-    CBR_2400,
-    #endif
-    #if defined (CBR_4800)
-    CBR_4800,
-    #endif
-    #if defined (CBR_9600)
-    CBR_9600,
-    #endif
-    #if defined (CBR_14400)
-    CBR_14400,
-    #endif
-    #if defined (CBR_19200)
-    CBR_19200,
-    #endif
-    #if defined (CBR_38400)
-    CBR_38400,
-    #endif
-    #if defined (CBR_56000)
-    CBR_56000,
-    #endif
-    #if defined (CBR_57600)
-    CBR_57600,
-    #endif
-    #if defined (CBR_115200)
-    CBR_115200,
-    #endif
-    #if defined (CBR_128000)
-    CBR_128000,
-    #endif
-    #if defined (CBR_256000)
-    CBR_256000
-    #endif
-};
-
-static const qint32 *standardRatesTable_end =
-        standardRatesTable + sizeof(standardRatesTable)/sizeof(*standardRatesTable);
-
-/*!
-   Returns a list of standard baud rates that
-   are defined in MSDN and/or in Win SDK file winbase.h.
-*/
-QList<qint32> WinSerialPortEngine::standardRates()
-{
-   QList<qint32> l;
-   for (const qint32 *it = standardRatesTable; it != standardRatesTable_end; ++it)
-      l.append(*it);
-   return l;
-}
-
 /* Protected methods */
 
 /*!
@@ -1358,6 +1249,135 @@ SerialPortEngine *SerialPortEngine::create(SerialPortPrivate *d)
     return new WinSerialPortEngine(d);
 }
 
+/* Public static the SerialPortPrivate methods */
+
+#if !defined (Q_OS_WINCE)
+static const QLatin1String defaultPathPrefix("\\\\.\\");
+#else
+static const QLatin1String defaultPathPostfix(":");
+#endif
+
+/*!
+    Converts a platform specific \a port name to a system location
+    and returns the value.
+*/
+QString SerialPortPrivate::portNameToSystemLocation(const QString &port)
+{
+    QString ret = port;
+#if !defined (Q_OS_WINCE)
+    if (!ret.contains(defaultPathPrefix))
+        ret.prepend(defaultPathPrefix);
+#else
+    if (!ret.contains(defaultPathPostfix))
+        ret.append(defaultPathPostfix);
+#endif
+    return ret;
+}
+
+/*!
+    Converts a platform specific system \a location to a port name
+    and returns the value.
+*/
+QString SerialPortPrivate::portNameFromSystemLocation(const QString &location)
+{
+    QString ret = location;
+#if !defined (Q_OS_WINCE)
+    if (ret.contains(defaultPathPrefix))
+        ret.remove(defaultPathPrefix);
+#else
+    if (ret.contains(defaultPathPostfix))
+        ret.remove(defaultPathPostfix);
+#endif
+    return ret;
+}
+
+// This table contains standard values of baud rates that
+// are defined in MSDN and/or in Win SDK file winbase.h
+static
+const qint32 standardRatesTable[] =
+{
+    #if defined (CBR_110)
+    CBR_110,
+    #endif
+    #if defined (CBR_300)
+    CBR_300,
+    #endif
+    #if defined (CBR_600)
+    CBR_600,
+    #endif
+    #if defined (CBR_1200)
+    CBR_1200,
+    #endif
+    #if defined (CBR_2400)
+    CBR_2400,
+    #endif
+    #if defined (CBR_4800)
+    CBR_4800,
+    #endif
+    #if defined (CBR_9600)
+    CBR_9600,
+    #endif
+    #if defined (CBR_14400)
+    CBR_14400,
+    #endif
+    #if defined (CBR_19200)
+    CBR_19200,
+    #endif
+    #if defined (CBR_38400)
+    CBR_38400,
+    #endif
+    #if defined (CBR_56000)
+    CBR_56000,
+    #endif
+    #if defined (CBR_57600)
+    CBR_57600,
+    #endif
+    #if defined (CBR_115200)
+    CBR_115200,
+    #endif
+    #if defined (CBR_128000)
+    CBR_128000,
+    #endif
+    #if defined (CBR_256000)
+    CBR_256000
+    #endif
+};
+
+static const qint32 *standardRatesTable_end =
+        standardRatesTable + sizeof(standardRatesTable)/sizeof(*standardRatesTable);
+
+/*!
+    Converts the windows-specific baud rate code \a setting to a numeric value.
+    If the desired item is not found, returns 0.
+*/
+qint32 SerialPortPrivate::rateFromSetting(qint32 setting)
+{
+    const qint32 *ret = qFind(standardRatesTable, standardRatesTable_end, setting);
+    return ret != standardRatesTable_end ? *ret : 0;
+}
+
+/*!
+    Converts a numeric baud \a rate value to the windows-specific code.
+    If the desired item is not found, returns 0.
+*/
+qint32 SerialPortPrivate::settingFromRate(qint32 rate)
+{
+    const qint32 *ret = qBinaryFind(standardRatesTable, standardRatesTable_end, rate);
+    return ret != standardRatesTable_end ? *ret : 0;
+}
+
+/*!
+   Returns a list of standard baud rates that
+   are defined in MSDN and/or in Win SDK file winbase.h.
+*/
+QList<qint32> SerialPortPrivate::standardRates()
+{
+   QList<qint32> l;
+   for (const qint32 *it = standardRatesTable; it != standardRatesTable_end; ++it)
+      l.append(*it);
+   return l;
+}
+
 #include "moc_serialportengine_win_p.cpp"
 
 QT_END_NAMESPACE_SERIALPORT
diff --git a/src/serialportengine_win_p.h b/src/serialportengine_win_p.h
index 7ae3918..9602603 100755
--- a/src/serialportengine_win_p.h
+++ b/src/serialportengine_win_p.h
@@ -137,9 +137,6 @@ public:
                         bool checkRead, bool checkWrite,
                         bool *selectForRead, bool *selectForWrite);
 
-    virtual QString toSystemLocation(const QString &port) const;
-    virtual QString fromSystemLocation(const QString &location) const;
-
     virtual bool setRate(qint32 rate, SerialPort::Directions dir);
     virtual bool setDataBits(SerialPort::DataBits dataBits);
     virtual bool setParity(SerialPort::Parity parity);
@@ -163,9 +160,6 @@ public:
     virtual void unlockNotification(NotificationLockerType type);
 #endif
 
-public:
-    static QList<qint32> standardRates();
-
 protected:
     virtual void detectDefaultSettings();
     virtual SerialPort::PortError decodeSystemError() const;
diff --git a/src/serialportinfo_mac.cpp b/src/serialportinfo_mac.cpp
old mode 100644
new mode 100755
index d9e2320..080a84b
--- a/src/serialportinfo_mac.cpp
+++ b/src/serialportinfo_mac.cpp
@@ -278,7 +278,7 @@ static QList<qint32> emptyList()
 
 QList<qint32> SerialPortInfo::standardRates()
 {
-    return UnixSerialPortEngine::standardRates();
+    return SerialPortPrivate::standardRates();
 }
 
 bool SerialPortInfo::isBusy() const
diff --git a/src/serialportinfo_symbian.cpp b/src/serialportinfo_symbian.cpp
old mode 100644
new mode 100755
index e49845c..783eca3
--- a/src/serialportinfo_symbian.cpp
+++ b/src/serialportinfo_symbian.cpp
@@ -200,7 +200,7 @@ QList<SerialPortInfo> SerialPortInfo::availablePorts()
                 info.d_ptr->device = s
                         .arg(QString::fromUtf16(nativeInfo.iName.Ptr(), nativeInfo.iName.Length()))
                         .arg(i);
-                info.d_ptr->portName = info.d_ptr->device;
+                info.d_ptr->portName = SerialPortPrivate::portNameFromSystemLocation(info.d_ptr->device);
                 info.d_ptr->description =
                         QString::fromUtf16(nativeInfo.iDescription.Ptr(), nativeInfo.iDescription.Length());
                 info.d_ptr->manufacturer = QString(QObject::tr("Unknown."));
@@ -214,7 +214,7 @@ QList<SerialPortInfo> SerialPortInfo::availablePorts()
 
 QList<qint32> SerialPortInfo::standardRates()
 {
-    return SymbianSerialPortEngine::standardRates();
+    return SerialPortPrivate::standardRates();
 }
 
 bool SerialPortInfo::isBusy() const
diff --git a/src/serialportinfo_unix.cpp b/src/serialportinfo_unix.cpp
old mode 100644
new mode 100755
index b899701..995ba81
--- a/src/serialportinfo_unix.cpp
+++ b/src/serialportinfo_unix.cpp
@@ -254,7 +254,7 @@ QList<SerialPortInfo> SerialPortInfo::availablePorts()
                     SerialPortInfo info;
 
                     info.d_ptr->device = s;
-                    info.d_ptr->portName = s.remove(QRegExp(QLatin1String("/[\\w|\\d|\\s]+/")));
+                    info.d_ptr->portName = SerialPortPrivate::portNameFromSystemLocation(s);
 
                     // Get description, manufacturer, vendor identifier, product
                     // identifier are not supported.
@@ -273,7 +273,7 @@ QList<SerialPortInfo> SerialPortInfo::availablePorts()
 
 QList<qint32> SerialPortInfo::standardRates()
 {
-    return UnixSerialPortEngine::standardRates();
+    return SerialPortPrivate::standardRates();
 }
 
 bool SerialPortInfo::isBusy() const
diff --git a/src/serialportinfo_win.cpp b/src/serialportinfo_win.cpp
old mode 100644
new mode 100755
index 9c7e71e..eeaddd1
--- a/src/serialportinfo_win.cpp
+++ b/src/serialportinfo_win.cpp
@@ -301,7 +301,7 @@ QList<SerialPortInfo> SerialPortInfo::availablePorts()
             if (!(s.isEmpty() || s.contains(QLatin1String("LPT")))) {
 
                 info.d_ptr->portName = s;
-                info.d_ptr->device = QLatin1String("\\\\.\\") + s;
+                info.d_ptr->device = SerialPortPrivate::portNameToSystemLocation(s);
 
                 v = getDeviceRegistryProperty(deviceInfoSet, &deviceInfoData, SPDRP_DEVICEDESC);
                 info.d_ptr->description = v.toString();
@@ -330,8 +330,7 @@ QList<SerialPortInfo> SerialPortInfo::availablePorts()
         do {
             SerialPortInfo info;
             info.d_ptr->device = QString::fromWCharArray(di.szLegacyName);
-            info.d_ptr->portName = info.d_ptr->device;
-            info.d_ptr->portName.remove(':');
+            info.d_ptr->portName = SerialPortPrivate::portNameFromSystemLocation(info.d_ptr->device);
             info.d_ptr->description = findDescription(HKEY_LOCAL_MACHINE,
                                                       QString::fromWCharArray(di.szDeviceKey));
 
@@ -351,7 +350,7 @@ QList<SerialPortInfo> SerialPortInfo::availablePorts()
 
 QList<qint32> SerialPortInfo::standardRates()
 {
-    return WinSerialPortEngine::standardRates();
+    return SerialPortPrivate::standardRates();
 }
 
 bool SerialPortInfo::isBusy() const