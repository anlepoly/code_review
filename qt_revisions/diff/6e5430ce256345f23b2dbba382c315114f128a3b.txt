diff --git a/tests/auto/declarative/qdeclarativeinfo/tst_qdeclarativeinfo.cpp b/tests/auto/declarative/qdeclarativeinfo/tst_qdeclarativeinfo.cpp
index 2af7299..b41cd06 100644
--- a/tests/auto/declarative/qdeclarativeinfo/tst_qdeclarativeinfo.cpp
+++ b/tests/auto/declarative/qdeclarativeinfo/tst_qdeclarativeinfo.cpp
@@ -175,7 +175,7 @@ void tst_qdeclarativeinfo::types()
     qmlInfo(0) << QByteArray("Qt");
 
     QTest::ignoreMessage(QtWarningMsg, "<Unknown File>: true");
-    qmlInfo(0) << QBool(true);
+    qmlInfo(0) << bool(true);
 
     //### do we actually want QUrl to show up in the output?
     //### why the extra space at the end?
@@ -212,7 +212,7 @@ void tst_qdeclarativeinfo::chaining()
                << QUrl("http://qt.nokia.com")
                << ref
                << QByteArray("Qt")
-               << QBool(true)
+               << bool(true)
                << QString ("Quick");
 }
 
diff --git a/tests/auto/qtquick2/qquickvisualdatamodel/tst_qquickvisualdatamodel.cpp b/tests/auto/qtquick2/qquickvisualdatamodel/tst_qquickvisualdatamodel.cpp
index 96fd85b..8e64e54 100644
--- a/tests/auto/qtquick2/qquickvisualdatamodel/tst_qquickvisualdatamodel.cpp
+++ b/tests/auto/qtquick2/qquickvisualdatamodel/tst_qquickvisualdatamodel.cpp
@@ -1147,9 +1147,9 @@ template <int N> void tst_qquickvisualdatamodel::groups_verify(
         QCOMPARE(evaluate<bool>(delegate, "test6"), vMember[i]);
         QCOMPARE(evaluate<int>(delegate, "test7") , sIndex[i]);
         QCOMPARE(evaluate<bool>(delegate, "test8"), sMember[i]);
-        QCOMPARE(evaluate<QStringList>(delegate, "test9").contains("items")   , QBool(true));
-        QCOMPARE(evaluate<QStringList>(delegate, "test9").contains("visible") , QBool(vMember[i]));
-        QCOMPARE(evaluate<QStringList>(delegate, "test9").contains("selected"), QBool(sMember[i]));
+        QCOMPARE(evaluate<QStringList>(delegate, "test9").contains("items")   , bool(true));
+        QCOMPARE(evaluate<QStringList>(delegate, "test9").contains("visible") , bool(vMember[i]));
+        QCOMPARE(evaluate<QStringList>(delegate, "test9").contains("selected"), bool(sMember[i]));
     }
     failed = false;
 }