diff --git a/src/gui/image/image.pri b/src/gui/image/image.pri
index 737b7fc..6b306dd 100644
--- a/src/gui/image/image.pri
+++ b/src/gui/image/image.pri
@@ -23,6 +23,11 @@ HEADERS += \
         image/qpixmapcache_p.h \
         image/qplatformpixmap.h \
         image/qimagepixmapcleanuphooks_p.h \
+        image/qicon.h \
+        image/qicon_p.h \
+        image/qiconloader_p.h \
+        image/qiconengine.h \
+        image/qiconengineplugin.h \
 
 SOURCES += \
         image/qbitmap.cpp \
@@ -40,7 +45,12 @@ SOURCES += \
         image/qpixmap_raster.cpp \
         image/qpixmap_blitter.cpp \
         image/qnativeimage.cpp \
-        image/qimagepixmapcleanuphooks.cpp
+        image/qimagepixmapcleanuphooks.cpp \
+        image/qicon.cpp \
+        image/qiconloader.cpp \
+        image/qiconengine.cpp \
+        image/qiconengineplugin.cpp \
+
 
 win32: SOURCES += image/qpixmap_win.cpp
 
diff --git a/src/gui/image/qicon.cpp b/src/gui/image/qicon.cpp
new file mode 100644
index 0000000..c2139c3
--- /dev/null
+++ b/src/gui/image/qicon.cpp
@@ -0,0 +1,1152 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/
+**
+** This file is part of the QtGui module of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** GNU Lesser General Public License Usage
+** This file may be used under the terms of the GNU Lesser General Public
+** License version 2.1 as published by the Free Software Foundation and
+** appearing in the file LICENSE.LGPL included in the packaging of this
+** file. Please review the following information to ensure the GNU Lesser
+** General Public License version 2.1 requirements will be met:
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** In addition, as a special exception, Nokia gives you certain additional
+** rights. These rights are described in the Nokia Qt LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU General
+** Public License version 3.0 as published by the Free Software Foundation
+** and appearing in the file LICENSE.GPL included in the packaging of this
+** file. Please review the following information to ensure the GNU General
+** Public License version 3.0 requirements will be met:
+** http://www.gnu.org/copyleft/gpl.html.
+**
+** Other Usage
+** Alternatively, this file may be used in accordance with the terms and
+** conditions contained in a signed written agreement between you and Nokia.
+**
+**
+**
+**
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#include "qicon.h"
+#include "qicon_p.h"
+#include "qiconengine.h"
+#include "qiconengineplugin.h"
+#include "private/qfactoryloader_p.h"
+#include "private/qiconloader_p.h"
+#include "qpainter.h"
+#include "qfileinfo.h"
+#include "qpixmapcache.h"
+#include "qvariant.h"
+#include "qcache.h"
+#include "qdebug.h"
+#include "qpalette.h"
+
+#ifdef Q_WS_MAC
+#include <private/qt_mac_p.h>
+#include <private/qt_cocoa_helpers_mac_p.h>
+#endif
+
+#include "private/qhexstring_p.h"
+#include "private/qguiapplication_p.h"
+
+#ifndef QT_NO_ICON
+QT_BEGIN_NAMESPACE
+
+/*!
+    \enum QIcon::Mode
+
+    This enum type describes the mode for which a pixmap is intended
+    to be used. The currently defined modes are:
+
+    \value Normal
+         Display the pixmap when the user is
+        not interacting with the icon, but the
+        functionality represented by the icon is available.
+    \value Disabled
+         Display the pixmap when the
+        functionality represented by the icon is not available.
+    \value Active
+         Display the pixmap when the
+        functionality represented by the icon is available and
+        the user is interacting with the icon, for example, moving the
+        mouse over it or clicking it.
+   \value Selected
+        Display the pixmap when the item represented by the icon is
+        selected.
+*/
+
+/*!
+  \enum QIcon::State
+
+  This enum describes the state for which a pixmap is intended to be
+  used. The \e state can be:
+
+  \value Off  Display the pixmap when the widget is in an "off" state
+  \value On  Display the pixmap when the widget is in an "on" state
+*/
+
+static QBasicAtomicInt serialNumCounter = Q_BASIC_ATOMIC_INITIALIZER(1);
+
+static void qt_cleanup_icon_cache();
+namespace {
+    struct IconCache : public QCache<QString, QIcon>
+    {
+        IconCache()
+        {
+            // ### note: won't readd if QApplication is re-created!
+            qAddPostRoutine(qt_cleanup_icon_cache);
+        }
+    };
+}
+
+Q_GLOBAL_STATIC(IconCache, qtIconCache)
+
+static void qt_cleanup_icon_cache()
+{
+    qtIconCache()->clear();
+}
+
+QIconPrivate::QIconPrivate()
+    : engine(0), ref(1),
+    serialNum(serialNumCounter.fetchAndAddRelaxed(1)),
+    detach_no(0)
+{
+}
+
+QPixmapIconEngine::QPixmapIconEngine()
+{
+}
+
+QPixmapIconEngine::QPixmapIconEngine(const QPixmapIconEngine &other)
+    : QIconEngine(other), pixmaps(other.pixmaps)
+{
+}
+
+QPixmapIconEngine::~QPixmapIconEngine()
+{
+}
+
+void QPixmapIconEngine::paint(QPainter *painter, const QRect &rect, QIcon::Mode mode, QIcon::State state)
+{
+    QSize pixmapSize = rect.size();
+#if defined(Q_WS_MAC)
+    pixmapSize *= qt_mac_get_scalefactor();
+#endif
+    painter->drawPixmap(rect, pixmap(pixmapSize, mode, state));
+}
+
+static inline int area(const QSize &s) { return s.width() * s.height(); }
+
+// returns the smallest of the two that is still larger than or equal to size.
+static QPixmapIconEngineEntry *bestSizeMatch( const QSize &size, QPixmapIconEngineEntry *pa, QPixmapIconEngineEntry *pb)
+{
+    int s = area(size);
+    if (pa->size == QSize() && pa->pixmap.isNull()) {
+        pa->pixmap = QPixmap(pa->fileName);
+        pa->size = pa->pixmap.size();
+    }
+    int a = area(pa->size);
+    if (pb->size == QSize() && pb->pixmap.isNull()) {
+        pb->pixmap = QPixmap(pb->fileName);
+        pb->size = pb->pixmap.size();
+    }
+    int b = area(pb->size);
+    int res = a;
+    if (qMin(a,b) >= s)
+        res = qMin(a,b);
+    else
+        res = qMax(a,b);
+    if (res == a)
+        return pa;
+    return pb;
+}
+
+QPixmapIconEngineEntry *QPixmapIconEngine::tryMatch(const QSize &size, QIcon::Mode mode, QIcon::State state)
+{
+    QPixmapIconEngineEntry *pe = 0;
+    for (int i = 0; i < pixmaps.count(); ++i)
+        if (pixmaps.at(i).mode == mode && pixmaps.at(i).state == state) {
+            if (pe)
+                pe = bestSizeMatch(size, &pixmaps[i], pe);
+            else
+                pe = &pixmaps[i];
+        }
+    return pe;
+}
+
+
+QPixmapIconEngineEntry *QPixmapIconEngine::bestMatch(const QSize &size, QIcon::Mode mode, QIcon::State state, bool sizeOnly)
+{
+    QPixmapIconEngineEntry *pe = tryMatch(size, mode, state);
+    while (!pe){
+        QIcon::State oppositeState = (state == QIcon::On) ? QIcon::Off : QIcon::On;
+        if (mode == QIcon::Disabled || mode == QIcon::Selected) {
+            QIcon::Mode oppositeMode = (mode == QIcon::Disabled) ? QIcon::Selected : QIcon::Disabled;
+            if ((pe = tryMatch(size, QIcon::Normal, state)))
+                break;
+            if ((pe = tryMatch(size, QIcon::Active, state)))
+                break;
+            if ((pe = tryMatch(size, mode, oppositeState)))
+                break;
+            if ((pe = tryMatch(size, QIcon::Normal, oppositeState)))
+                break;
+            if ((pe = tryMatch(size, QIcon::Active, oppositeState)))
+                break;
+            if ((pe = tryMatch(size, oppositeMode, state)))
+                break;
+            if ((pe = tryMatch(size, oppositeMode, oppositeState)))
+                break;
+        } else {
+            QIcon::Mode oppositeMode = (mode == QIcon::Normal) ? QIcon::Active : QIcon::Normal;
+            if ((pe = tryMatch(size, oppositeMode, state)))
+                break;
+            if ((pe = tryMatch(size, mode, oppositeState)))
+                break;
+            if ((pe = tryMatch(size, oppositeMode, oppositeState)))
+                break;
+            if ((pe = tryMatch(size, QIcon::Disabled, state)))
+                break;
+            if ((pe = tryMatch(size, QIcon::Selected, state)))
+                break;
+            if ((pe = tryMatch(size, QIcon::Disabled, oppositeState)))
+                break;
+            if ((pe = tryMatch(size, QIcon::Selected, oppositeState)))
+                break;
+        }
+
+        if (!pe)
+            return pe;
+    }
+
+    if (sizeOnly ? (pe->size.isNull() || !pe->size.isValid()) : pe->pixmap.isNull()) {
+        pe->pixmap = QPixmap(pe->fileName);
+        if (!pe->pixmap.isNull())
+            pe->size = pe->pixmap.size();
+    }
+
+    return pe;
+}
+
+QPixmap QPixmapIconEngine::pixmap(const QSize &size, QIcon::Mode mode, QIcon::State state)
+{
+    QPixmap pm;
+    QPixmapIconEngineEntry *pe = bestMatch(size, mode, state, false);
+    if (pe)
+        pm = pe->pixmap;
+
+    if (pm.isNull()) {
+        int idx = pixmaps.count();
+        while (--idx >= 0) {
+            if (pe == &pixmaps[idx]) {
+                pixmaps.remove(idx);
+                break;
+            }
+        }
+        if (pixmaps.isEmpty())
+            return pm;
+        else
+            return pixmap(size, mode, state);
+    }
+
+    QSize actualSize = pm.size();
+    if (!actualSize.isNull() && (actualSize.width() > size.width() || actualSize.height() > size.height()))
+        actualSize.scale(size, Qt::KeepAspectRatio);
+
+    QString key = QLatin1String("qt_")
+                  % HexString<quint64>(pm.cacheKey())
+                  % HexString<uint>(pe->mode)
+                  % HexString<quint64>(QGuiApplication::palette().cacheKey())
+                  % HexString<uint>(actualSize.width())
+                  % HexString<uint>(actualSize.height());
+
+    if (mode == QIcon::Active) {
+        if (QPixmapCache::find(key % HexString<uint>(mode), pm))
+            return pm; // horray
+        if (QPixmapCache::find(key % HexString<uint>(QIcon::Normal), pm)) {
+            QPixmap active = pm;
+            if (QGuiApplication *guiApp = qobject_cast<QGuiApplication *>(qApp))
+                active = static_cast<QGuiApplicationPrivate*>(QObjectPrivate::get(guiApp))->applyQIconStyleHelper(QIcon::Active, pm);
+            if (pm.cacheKey() == active.cacheKey())
+                return pm;
+        }
+    }
+
+    if (!QPixmapCache::find(key % HexString<uint>(mode), pm)) {
+        if (pm.size() != actualSize)
+            pm = pm.scaled(actualSize, Qt::IgnoreAspectRatio, Qt::SmoothTransformation);
+        if (pe->mode != mode && mode != QIcon::Normal) {
+            QPixmap generated = pm;
+            if (QGuiApplication *guiApp = qobject_cast<QGuiApplication *>(qApp))
+                generated = static_cast<QGuiApplicationPrivate*>(QObjectPrivate::get(guiApp))->applyQIconStyleHelper(mode, pm);
+            if (!generated.isNull())
+                pm = generated;
+        }
+        QPixmapCache::insert(key % HexString<uint>(mode), pm);
+    }
+    return pm;
+}
+
+QSize QPixmapIconEngine::actualSize(const QSize &size, QIcon::Mode mode, QIcon::State state)
+{
+    QSize actualSize;
+    if (QPixmapIconEngineEntry *pe = bestMatch(size, mode, state, true))
+        actualSize = pe->size;
+
+    if (actualSize.isNull())
+        return actualSize;
+
+    if (!actualSize.isNull() && (actualSize.width() > size.width() || actualSize.height() > size.height()))
+        actualSize.scale(size, Qt::KeepAspectRatio);
+    return actualSize;
+}
+
+void QPixmapIconEngine::addPixmap(const QPixmap &pixmap, QIcon::Mode mode, QIcon::State state)
+{
+    if (!pixmap.isNull()) {
+        QPixmapIconEngineEntry *pe = tryMatch(pixmap.size(), mode, state);
+        if(pe && pe->size == pixmap.size()) {
+            pe->pixmap = pixmap;
+            pe->fileName.clear();
+        } else {
+            pixmaps += QPixmapIconEngineEntry(pixmap, mode, state);
+        }
+    }
+}
+
+void QPixmapIconEngine::addFile(const QString &fileName, const QSize &_size, QIcon::Mode mode, QIcon::State state)
+{
+    if (!fileName.isEmpty()) {
+        QSize size = _size;
+        QPixmap pixmap;
+
+        QString abs = fileName;
+        if (fileName.at(0) != QLatin1Char(':'))
+            abs = QFileInfo(fileName).absoluteFilePath();
+
+        for (int i = 0; i < pixmaps.count(); ++i) {
+            if (pixmaps.at(i).mode == mode && pixmaps.at(i).state == state) {
+                QPixmapIconEngineEntry *pe = &pixmaps[i];
+                if(size == QSize()) {
+                    pixmap = QPixmap(abs);
+                    size = pixmap.size();
+                }
+                if (pe->size == QSize() && pe->pixmap.isNull()) {
+                    pe->pixmap = QPixmap(pe->fileName);
+                    pe->size = pe->pixmap.size();
+                }
+                if(pe->size == size) {
+                    pe->pixmap = pixmap;
+                    pe->fileName = abs;
+                    return;
+                }
+            }
+        }
+        QPixmapIconEngineEntry e(abs, size, mode, state);
+        e.pixmap = pixmap;
+        pixmaps += e;
+    }
+}
+
+QString QPixmapIconEngine::key() const
+{
+    return QLatin1String("QPixmapIconEngine");
+}
+
+QIconEngine *QPixmapIconEngine::clone() const
+{
+    return new QPixmapIconEngine(*this);
+}
+
+bool QPixmapIconEngine::read(QDataStream &in)
+{
+    int num_entries;
+    QPixmap pm;
+    QString fileName;
+    QSize sz;
+    uint mode;
+    uint state;
+
+    in >> num_entries;
+    for (int i=0; i < num_entries; ++i) {
+        if (in.atEnd()) {
+            pixmaps.clear();
+            return false;
+        }
+        in >> pm;
+        in >> fileName;
+        in >> sz;
+        in >> mode;
+        in >> state;
+        if (pm.isNull()) {
+            addFile(fileName, sz, QIcon::Mode(mode), QIcon::State(state));
+        } else {
+            QPixmapIconEngineEntry pe(fileName, sz, QIcon::Mode(mode), QIcon::State(state));
+            pe.pixmap = pm;
+            pixmaps += pe;
+        }
+    }
+    return true;
+}
+
+bool QPixmapIconEngine::write(QDataStream &out) const
+{
+    int num_entries = pixmaps.size();
+    out << num_entries;
+    for (int i=0; i < num_entries; ++i) {
+        if (pixmaps.at(i).pixmap.isNull())
+            out << QPixmap(pixmaps.at(i).fileName);
+        else
+            out << pixmaps.at(i).pixmap;
+        out << pixmaps.at(i).fileName;
+        out << pixmaps.at(i).size;
+        out << (uint) pixmaps.at(i).mode;
+        out << (uint) pixmaps.at(i).state;
+    }
+    return true;
+}
+
+void QPixmapIconEngine::virtual_hook(int id, void *data)
+{
+    switch (id) {
+    case QIconEngine::AvailableSizesHook: {
+        QIconEngine::AvailableSizesArgument &arg =
+            *reinterpret_cast<QIconEngine::AvailableSizesArgument*>(data);
+        arg.sizes.clear();
+        for (int i = 0; i < pixmaps.size(); ++i) {
+            QPixmapIconEngineEntry &pe = pixmaps[i];
+            if (pe.size == QSize() && pe.pixmap.isNull()) {
+                pe.pixmap = QPixmap(pe.fileName);
+                pe.size = pe.pixmap.size();
+            }
+            if (pe.mode == arg.mode && pe.state == arg.state && !pe.size.isEmpty())
+                arg.sizes.push_back(pe.size);
+        }
+        break;
+    }
+    default:
+        QIconEngine::virtual_hook(id, data);
+    }
+}
+
+#ifndef QT_NO_LIBRARY
+Q_GLOBAL_STATIC_WITH_ARGS(QFactoryLoader, loader,
+    (QIconEngineFactoryInterface_iid, QLatin1String("/iconengines"), Qt::CaseInsensitive))
+#endif
+
+
+
+/*!
+  \class QIcon
+
+  \brief The QIcon class provides scalable icons in different modes
+  and states.
+
+  \ingroup painting
+  \ingroup shared
+  \inmodule QtGui
+
+  A QIcon can generate smaller, larger, active, and disabled pixmaps
+  from the set of pixmaps it is given. Such pixmaps are used by Qt
+  widgets to show an icon representing a particular action.
+
+  The simplest use of QIcon is to create one from a QPixmap file or
+  resource, and then use it, allowing Qt to work out all the required
+  icon styles and sizes. For example:
+
+  \snippet code/src_gui_image_qicon.cpp 0
+
+  To undo a QIcon, simply set a null icon in its place:
+
+  \snippet code/src_gui_image_qicon.cpp 1
+
+  Use the QImageReader::supportedImageFormats() and
+  QImageWriter::supportedImageFormats() functions to retrieve a
+  complete list of the supported file formats.
+
+  When you retrieve a pixmap using pixmap(QSize, Mode, State), and no
+  pixmap for this given size, mode and state has been added with
+  addFile() or addPixmap(), then QIcon will generate one on the
+  fly. This pixmap generation happens in a QIconEngineV2. The default
+  engine scales pixmaps down if required, but never up, and it uses
+  the current style to calculate a disabled appearance. By using
+  custom icon engines, you can customize every aspect of generated
+  icons. With QIconEnginePluginV2 it is possible to register different
+  icon engines for different file suffixes, making it possible for
+  third parties to provide additional icon engines to those included
+  with Qt.
+
+  \note Since Qt 4.2, an icon engine that supports SVG is included.
+
+  \section1 Making Classes that Use QIcon
+
+  If you write your own widgets that have an option to set a small
+  pixmap, consider allowing a QIcon to be set for that pixmap.  The
+  Qt class QToolButton is an example of such a widget.
+
+  Provide a method to set a QIcon, and when you draw the icon, choose
+  whichever pixmap is appropriate for the current state of your widget.
+  For example:
+  \snippet code/src_gui_image_qicon.cpp 2
+
+  You might also make use of the \c Active mode, perhaps making your
+  widget \c Active when the mouse is over the widget (see \l
+  QWidget::enterEvent()), while the mouse is pressed pending the
+  release that will activate the function, or when it is the currently
+  selected item. If the widget can be toggled, the "On" mode might be
+  used to draw a different icon.
+
+  \img icon.png QIcon
+
+  \sa {fowler}{GUI Design Handbook: Iconic Label}, {Icons Example}
+*/
+
+
+/*!
+  Constructs a null icon.
+*/
+QIcon::QIcon()
+    : d(0)
+{
+}
+
+/*!
+  Constructs an icon from a \a pixmap.
+ */
+QIcon::QIcon(const QPixmap &pixmap)
+    :d(0)
+{
+    addPixmap(pixmap);
+}
+
+/*!
+  Constructs a copy of \a other. This is very fast.
+*/
+QIcon::QIcon(const QIcon &other)
+    :d(other.d)
+{
+    if (d)
+        d->ref.ref();
+}
+
+/*!
+    Constructs an icon from the file with the given \a fileName. The
+    file will be loaded on demand.
+
+    If \a fileName contains a relative path (e.g. the filename only)
+    the relevant file must be found relative to the runtime working
+    directory.
+
+    The file name can be either refer to an actual file on disk or to
+    one of the application's embedded resources.  See the
+    \l{resources.html}{Resource System} overview for details on how to
+    embed images and other resource files in the application's
+    executable.
+
+    Use the QImageReader::supportedImageFormats() and
+    QImageWriter::supportedImageFormats() functions to retrieve a
+    complete list of the supported file formats.
+*/
+QIcon::QIcon(const QString &fileName)
+    : d(0)
+{
+    addFile(fileName);
+}
+
+
+/*!
+    Creates an icon with a specific icon \a engine. The icon takes
+    ownership of the engine.
+*/
+QIcon::QIcon(QIconEngine *engine)
+    :d(new QIconPrivate)
+{
+    d->engine = engine;
+}
+
+/*!
+    Destroys the icon.
+*/
+QIcon::~QIcon()
+{
+    if (d && !d->ref.deref())
+        delete d;
+}
+
+/*!
+    Assigns the \a other icon to this icon and returns a reference to
+    this icon.
+*/
+QIcon &QIcon::operator=(const QIcon &other)
+{
+    if (other.d)
+        other.d->ref.ref();
+    if (d && !d->ref.deref())
+        delete d;
+    d = other.d;
+    return *this;
+}
+
+/*!
+    \fn void QIcon::swap(QIcon &other)
+    \since 4.8
+
+    Swaps icon \a other with this icon. This operation is very
+    fast and never fails.
+*/
+
+/*!
+   Returns the icon as a QVariant.
+*/
+QIcon::operator QVariant() const
+{
+    return QVariant(QVariant::Icon, this);
+}
+
+/*! \fn int QIcon::serialNumber() const
+    \obsolete
+
+    Returns a number that identifies the contents of this
+    QIcon object. Distinct QIcon objects can have
+    the same serial number if they refer to the same contents
+    (but they don't have to). Also, the serial number of
+    a QIcon object may change during its lifetime.
+
+    Use cacheKey() instead.
+
+    A null icon always has a serial number of 0.
+
+    Serial numbers are mostly useful in conjunction with caching.
+
+    \sa QPixmap::serialNumber()
+*/
+
+/*!
+    Returns a number that identifies the contents of this QIcon
+    object. Distinct QIcon objects can have the same key if
+    they refer to the same contents.
+    \since 4.3
+
+    The cacheKey() will change when the icon is altered via
+    addPixmap() or addFile().
+
+    Cache keys are mostly useful in conjunction with caching.
+
+    \sa QPixmap::cacheKey()
+*/
+qint64 QIcon::cacheKey() const
+{
+    if (!d)
+        return 0;
+    return (((qint64) d->serialNum) << 32) | ((qint64) (d->detach_no));
+}
+
+/*!
+  Returns a pixmap with the requested \a size, \a mode, and \a
+  state, generating one if necessary. The pixmap might be smaller than
+  requested, but never larger.
+
+  \sa actualSize(), paint()
+*/
+QPixmap QIcon::pixmap(const QSize &size, Mode mode, State state) const
+{
+    if (!d)
+        return QPixmap();
+    return d->engine->pixmap(size, mode, state);
+}
+
+/*!
+    \fn QPixmap QIcon::pixmap(int w, int h, Mode mode = Normal, State state = Off) const
+
+    \overload
+
+    Returns a pixmap of size QSize(\a w, \a h). The pixmap might be smaller than
+    requested, but never larger.
+*/
+
+/*!
+    \fn QPixmap QIcon::pixmap(int extent, Mode mode = Normal, State state = Off) const
+
+    \overload
+
+    Returns a pixmap of size QSize(\a extent, \a extent). The pixmap might be smaller
+    than requested, but never larger.
+*/
+
+/*!  Returns the actual size of the icon for the requested \a size, \a
+  mode, and \a state. The result might be smaller than requested, but
+  never larger.
+
+  \sa pixmap(), paint()
+*/
+QSize QIcon::actualSize(const QSize &size, Mode mode, State state) const
+{
+    if (!d)
+        return QSize();
+    return d->engine->actualSize(size, mode, state);
+}
+
+
+/*!
+    Uses the \a painter to paint the icon with specified \a alignment,
+    required \a mode, and \a state into the rectangle \a rect.
+
+    \sa actualSize(), pixmap()
+*/
+void QIcon::paint(QPainter *painter, const QRect &rect, Qt::Alignment alignment, Mode mode, State state) const
+{
+    if (!d || !painter)
+        return;
+
+    // Copy of QStyle::alignedRect
+    const QSize size = d->engine->actualSize(rect.size(), mode, state);
+    alignment = QGuiApplicationPrivate::visualAlignment(painter->layoutDirection(), alignment);
+    int x = rect.x();
+    int y = rect.y();
+    int w = size.width();
+    int h = size.height();
+    if ((alignment & Qt::AlignVCenter) == Qt::AlignVCenter)
+        y += rect.size().height()/2 - h/2;
+    else if ((alignment & Qt::AlignBottom) == Qt::AlignBottom)
+        y += rect.size().height() - h;
+    if ((alignment & Qt::AlignRight) == Qt::AlignRight)
+        x += rect.size().width() - w;
+    else if ((alignment & Qt::AlignHCenter) == Qt::AlignHCenter)
+        x += rect.size().width()/2 - w/2;
+    QRect alignedRect(x, y, w, h);
+
+    d->engine->paint(painter, alignedRect, mode, state);
+}
+
+/*!
+    \fn void QIcon::paint(QPainter *painter, int x, int y, int w, int h, Qt::Alignment alignment,
+                          Mode mode, State state) const
+
+    \overload
+
+    Paints the icon into the rectangle QRect(\a x, \a y, \a w, \a h).
+*/
+
+/*!
+    Returns true if the icon is empty; otherwise returns false.
+
+    An icon is empty if it has neither a pixmap nor a filename.
+
+    Note: Even a non-null icon might not be able to create valid
+    pixmaps, eg. if the file does not exist or cannot be read.
+*/
+bool QIcon::isNull() const
+{
+    return !d;
+}
+
+/*!\internal
+ */
+bool QIcon::isDetached() const
+{
+    return !d || d->ref.load() == 1;
+}
+
+/*! \internal
+ */
+void QIcon::detach()
+{
+    if (d) {
+        if (d->ref.load() != 1) {
+            QIconPrivate *x = new QIconPrivate;
+            x->engine = d->engine->clone();
+            if (!d->ref.deref())
+                delete d;
+            d = x;
+        }
+        ++d->detach_no;
+    }
+}
+
+/*!
+    Adds \a pixmap to the icon, as a specialization for \a mode and
+    \a state.
+
+    Custom icon engines are free to ignore additionally added
+    pixmaps.
+
+    \sa addFile()
+*/
+void QIcon::addPixmap(const QPixmap &pixmap, Mode mode, State state)
+{
+    if (pixmap.isNull())
+        return;
+    if (!d) {
+        d = new QIconPrivate;
+        d->engine = new QPixmapIconEngine;
+    } else {
+        detach();
+    }
+    d->engine->addPixmap(pixmap, mode, state);
+}
+
+
+/*!  Adds an image from the file with the given \a fileName to the
+     icon, as a specialization for \a size, \a mode and \a state. The
+     file will be loaded on demand. Note: custom icon engines are free
+     to ignore additionally added pixmaps.
+
+     If \a fileName contains a relative path (e.g. the filename only)
+     the relevant file must be found relative to the runtime working
+     directory.
+
+    The file name can be either refer to an actual file on disk or to
+    one of the application's embedded resources. See the
+    \l{resources.html}{Resource System} overview for details on how to
+    embed images and other resource files in the application's
+    executable.
+
+    Use the QImageReader::supportedImageFormats() and
+    QImageWriter::supportedImageFormats() functions to retrieve a
+    complete list of the supported file formats.
+
+    Note: When you add a non-empty filename to a QIcon, the icon becomes
+    non-null, even if the file doesn't exist or points to a corrupt file.
+
+    \sa addPixmap()
+ */
+void QIcon::addFile(const QString &fileName, const QSize &size, Mode mode, State state)
+{
+    if (fileName.isEmpty())
+        return;
+    if (!d) {
+#if !defined (QT_NO_LIBRARY) && !defined(QT_NO_SETTINGS)
+        QFileInfo info(fileName);
+        QString suffix = info.suffix();
+        if (!suffix.isEmpty()) {
+            // first try version 2 engines..
+            const int index = loader()->indexOf(suffix);
+            if (index != -1) {
+                if (QIconEngineFactoryInterface *factory = qobject_cast<QIconEngineFactoryInterface*>(loader()->instance(index))) {
+                    if (QIconEngine *engine = factory->create(fileName)) {
+                        d = new QIconPrivate;
+                        d->engine = engine;
+                    }
+                }
+            }
+        }
+#endif
+        // ...then fall back to the default engine
+        if (!d) {
+            d = new QIconPrivate;
+            d->engine = new QPixmapIconEngine;
+        }
+    } else {
+        detach();
+    }
+    d->engine->addFile(fileName, size, mode, state);
+}
+
+/*!
+    \since 4.5
+
+    Returns a list of available icon sizes for the specified \a mode and
+    \a state.
+*/
+QList<QSize> QIcon::availableSizes(Mode mode, State state) const
+{
+    if (!d || !d->engine)
+        return QList<QSize>();
+    return d->engine->availableSizes(mode, state);
+}
+
+/*!
+    \since 4.7
+
+    Returns the name used to create the icon, if available.
+
+    Depending on the way the icon was created, it may have an associated
+    name. This is the case for icons created with fromTheme() or icons
+    using a QIconEngine which supports the QIconEngineV2::IconNameHook.
+
+    \sa fromTheme(), QIconEngine
+*/
+QString QIcon::name() const
+{
+    if (!d || !d->engine)
+        return QString();
+    return d->engine->iconName();
+}
+
+/*!
+    \since 4.6
+
+    Sets the search paths for icon themes to \a paths.
+    \sa themeSearchPaths(), fromTheme(), setThemeName()
+*/
+void QIcon::setThemeSearchPaths(const QStringList &paths)
+{
+    QIconLoader::instance()->setThemeSearchPath(paths);
+}
+
+/*!
+  \since 4.6
+
+  Returns the search paths for icon themes.
+
+  The default value will depend on the platform:
+
+  On X11, the search path will use the XDG_DATA_DIRS environment
+  variable if available.
+
+  By default all platforms will have the resource directory
+  \c{:\icons} as a fallback. You can use "rcc -project" to generate a
+  resource file from your icon theme.
+
+  \sa setThemeSearchPaths(), fromTheme(), setThemeName()
+*/
+QStringList QIcon::themeSearchPaths()
+{
+    return QIconLoader::instance()->themeSearchPaths();
+}
+
+/*!
+    \since 4.6
+
+    Sets the current icon theme to \a name.
+
+    The \a name should correspond to a directory name in the
+    themeSearchPath() containing an index.theme
+    file describing it's contents.
+
+    \sa themeSearchPaths(), themeName()
+*/
+void QIcon::setThemeName(const QString &name)
+{
+    QIconLoader::instance()->setThemeName(name);
+}
+
+/*!
+    \since 4.6
+
+    Returns the name of the current icon theme.
+
+    On X11, the current icon theme depends on your desktop
+    settings. On other platforms it is not set by default.
+
+    \sa setThemeName(), themeSearchPaths(), fromTheme(),
+    hasThemeIcon()
+*/
+QString QIcon::themeName()
+{
+    return QIconLoader::instance()->themeName();
+}
+
+/*!
+    \since 4.6
+
+    Returns the QIcon corresponding to \a name in the current
+    icon theme. If no such icon is found in the current theme
+    \a fallback is returned instead.
+
+    The latest version of the freedesktop icon specification and naming
+    specification can be obtained here:
+
+    \list
+    \li \l{http://standards.freedesktop.org/icon-theme-spec/icon-theme-spec-latest.html}
+    \li \l{http://standards.freedesktop.org/icon-naming-spec/icon-naming-spec-latest.html}
+    \endlist
+
+    To fetch an icon from the current icon theme:
+
+    \snippet code/src_gui_image_qicon.cpp 3
+
+    Or if you want to provide a guaranteed fallback for platforms that
+    do not support theme icons, you can use the second argument:
+
+    \snippet code/src_gui_image_qicon.cpp 4
+
+    \note By default, only X11 will support themed icons. In order to
+    use themed icons on Mac and Windows, you will have to bundle a
+    compliant theme in one of your themeSearchPaths() and set the
+    appropriate themeName().
+
+    \sa themeName(), setThemeName(), themeSearchPaths()
+*/
+QIcon QIcon::fromTheme(const QString &name, const QIcon &fallback)
+{
+    QIcon icon;
+
+    if (qtIconCache()->contains(name)) {
+        icon = *qtIconCache()->object(name);
+    } else {
+        QIcon *cachedIcon  = new QIcon(new QIconLoaderEngine(name));
+        qtIconCache()->insert(name, cachedIcon);
+        icon = *cachedIcon;
+    }
+
+    // Note the qapp check is to allow lazy loading of static icons
+    // Supporting fallbacks will not work for this case.
+    if (qApp && icon.availableSizes().isEmpty())
+        return fallback;
+
+    return icon;
+}
+
+/*!
+    \since 4.6
+
+    Returns true if there is an icon available for \a name in the
+    current icon theme, otherwise returns false.
+
+    \sa themeSearchPaths(), fromTheme(), setThemeName()
+*/
+bool QIcon::hasThemeIcon(const QString &name)
+{
+    QIcon icon = fromTheme(name);
+
+    return !icon.isNull();
+}
+
+
+/*****************************************************************************
+  QIcon stream functions
+ *****************************************************************************/
+#if !defined(QT_NO_DATASTREAM)
+/*!
+    \fn QDataStream &operator<<(QDataStream &stream, const QIcon &icon)
+    \relates QIcon
+    \since 4.2
+
+    Writes the given \a icon to the given \a stream as a PNG
+    image. If the icon contains more than one image, all images will
+    be written to the stream. Note that writing the stream to a file
+    will not produce a valid image file.
+*/
+
+QDataStream &operator<<(QDataStream &s, const QIcon &icon)
+{
+    if (s.version() >= QDataStream::Qt_4_3) {
+        if (icon.isNull()) {
+            s << QString();
+        } else {
+            s << icon.d->engine->key();
+            icon.d->engine->write(s);
+        }
+    } else if (s.version() == QDataStream::Qt_4_2) {
+        if (icon.isNull()) {
+            s << 0;
+        } else {
+            QPixmapIconEngine *engine = static_cast<QPixmapIconEngine *>(icon.d->engine);
+            int num_entries = engine->pixmaps.size();
+            s << num_entries;
+            for (int i=0; i < num_entries; ++i) {
+                s << engine->pixmaps.at(i).pixmap;
+                s << engine->pixmaps.at(i).fileName;
+                s << engine->pixmaps.at(i).size;
+                s << (uint) engine->pixmaps.at(i).mode;
+                s << (uint) engine->pixmaps.at(i).state;
+            }
+        }
+    } else {
+        s << QPixmap(icon.pixmap(22,22));
+    }
+    return s;
+}
+
+/*!
+    \fn QDataStream &operator>>(QDataStream &stream, QIcon &icon)
+    \relates QIcon
+    \since 4.2
+
+    Reads an image, or a set of images, from the given \a stream into
+    the given \a icon.
+*/
+
+QDataStream &operator>>(QDataStream &s, QIcon &icon)
+{
+    if (s.version() >= QDataStream::Qt_4_3) {
+        icon = QIcon();
+        QString key;
+        s >> key;
+        if (key == QLatin1String("QPixmapIconEngine")) {
+            icon.d = new QIconPrivate;
+            QIconEngine *engine = new QPixmapIconEngine;
+            icon.d->engine = engine;
+            engine->read(s);
+        } else if (key == QLatin1String("QIconLoaderEngine")) {
+            icon.d = new QIconPrivate;
+            QIconEngine *engine = new QIconLoaderEngine();
+            icon.d->engine = engine;
+            engine->read(s);
+#if !defined (QT_NO_LIBRARY) && !defined(QT_NO_SETTINGS)
+        } else {
+            const int index = loader()->indexOf(key);
+            if (index != -1) {
+                if (QIconEngineFactoryInterface *factory = qobject_cast<QIconEngineFactoryInterface*>(loader()->instance(index))) {
+                    if (QIconEngine *engine= factory->create()) {
+                        icon.d = new QIconPrivate;
+                        icon.d->engine = engine;
+                        engine->read(s);
+                    } // factory
+                } // instance
+            } // index
+#endif
+        }
+    } else if (s.version() == QDataStream::Qt_4_2) {
+        icon = QIcon();
+        int num_entries;
+        QPixmap pm;
+        QString fileName;
+        QSize sz;
+        uint mode;
+        uint state;
+
+        s >> num_entries;
+        for (int i=0; i < num_entries; ++i) {
+            s >> pm;
+            s >> fileName;
+            s >> sz;
+            s >> mode;
+            s >> state;
+            if (pm.isNull())
+                icon.addFile(fileName, sz, QIcon::Mode(mode), QIcon::State(state));
+            else
+                icon.addPixmap(pm, QIcon::Mode(mode), QIcon::State(state));
+        }
+    } else {
+        QPixmap pm;
+        s >> pm;
+        icon.addPixmap(pm);
+    }
+    return s;
+}
+
+#endif //QT_NO_DATASTREAM
+
+#ifndef QT_NO_DEBUG_STREAM
+QDebug operator<<(QDebug dbg, const QIcon &i)
+{
+    dbg.nospace() << "QIcon(" << i.name() << ')';
+    return dbg.space();
+}
+#endif
+
+/*!
+    \fn DataPtr &QIcon::data_ptr()
+    \internal
+*/
+
+/*!
+    \typedef QIcon::DataPtr
+    \internal
+*/
+
+QT_END_NAMESPACE
+#endif //QT_NO_ICON
diff --git a/src/gui/image/qicon.h b/src/gui/image/qicon.h
new file mode 100644
index 0000000..264b672
--- /dev/null
+++ b/src/gui/image/qicon.h
@@ -0,0 +1,146 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/
+**
+** This file is part of the QtGui module of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** GNU Lesser General Public License Usage
+** This file may be used under the terms of the GNU Lesser General Public
+** License version 2.1 as published by the Free Software Foundation and
+** appearing in the file LICENSE.LGPL included in the packaging of this
+** file. Please review the following information to ensure the GNU Lesser
+** General Public License version 2.1 requirements will be met:
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** In addition, as a special exception, Nokia gives you certain additional
+** rights. These rights are described in the Nokia Qt LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU General
+** Public License version 3.0 as published by the Free Software Foundation
+** and appearing in the file LICENSE.GPL included in the packaging of this
+** file. Please review the following information to ensure the GNU General
+** Public License version 3.0 requirements will be met:
+** http://www.gnu.org/copyleft/gpl.html.
+**
+** Other Usage
+** Alternatively, this file may be used in accordance with the terms and
+** conditions contained in a signed written agreement between you and Nokia.
+**
+**
+**
+**
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#ifndef QICON_H
+#define QICON_H
+
+#include <QtCore/qglobal.h>
+#include <QtCore/qsize.h>
+#include <QtCore/qlist.h>
+#include <QtGui/qpixmap.h>
+
+QT_BEGIN_HEADER
+
+QT_BEGIN_NAMESPACE
+
+
+class QIconPrivate;
+class QIconEngine;
+
+class Q_GUI_EXPORT QIcon
+{
+public:
+    enum Mode { Normal, Disabled, Active, Selected };
+    enum State { On, Off };
+
+    QIcon();
+    QIcon(const QPixmap &pixmap);
+    QIcon(const QIcon &other);
+    explicit QIcon(const QString &fileName); // file or resource name
+    explicit QIcon(QIconEngine *engine);
+    ~QIcon();
+    QIcon &operator=(const QIcon &other);
+#ifdef Q_COMPILER_RVALUE_REFS
+    inline QIcon &operator=(QIcon &&other)
+    { qSwap(d, other.d); return *this; }
+#endif
+    inline void swap(QIcon &other) { qSwap(d, other.d); }
+
+    operator QVariant() const;
+
+    QPixmap pixmap(const QSize &size, Mode mode = Normal, State state = Off) const;
+    inline QPixmap pixmap(int w, int h, Mode mode = Normal, State state = Off) const
+        { return pixmap(QSize(w, h), mode, state); }
+    inline QPixmap pixmap(int extent, Mode mode = Normal, State state = Off) const
+        { return pixmap(QSize(extent, extent), mode, state); }
+
+    QSize actualSize(const QSize &size, Mode mode = Normal, State state = Off) const;
+
+    QString name() const;
+
+    void paint(QPainter *painter, const QRect &rect, Qt::Alignment alignment = Qt::AlignCenter, Mode mode = Normal, State state = Off) const;
+    inline void paint(QPainter *painter, int x, int y, int w, int h, Qt::Alignment alignment = Qt::AlignCenter, Mode mode = Normal, State state = Off) const
+        { paint(painter, QRect(x, y, w, h), alignment, mode, state); }
+
+    bool isNull() const;
+    bool isDetached() const;
+    void detach();
+
+#if QT_DEPRECATED_SINCE(5, 0)
+    QT_DEPRECATED inline int serialNumber() const { return cacheKey() >> 32; }
+#endif
+    qint64 cacheKey() const;
+
+    void addPixmap(const QPixmap &pixmap, Mode mode = Normal, State state = Off);
+    void addFile(const QString &fileName, const QSize &size = QSize(), Mode mode = Normal, State state = Off);
+
+    QList<QSize> availableSizes(Mode mode = Normal, State state = Off) const;
+
+    static QIcon fromTheme(const QString &name, const QIcon &fallback = QIcon());
+    static bool hasThemeIcon(const QString &name);
+
+    static QStringList themeSearchPaths();
+    static void setThemeSearchPaths(const QStringList &searchpath);
+
+    static QString themeName();
+    static void setThemeName(const QString &path);
+
+    Q_DUMMY_COMPARISON_OPERATOR(QIcon)
+
+private:
+    QIconPrivate *d;
+#if !defined(QT_NO_DATASTREAM)
+    friend Q_GUI_EXPORT QDataStream &operator<<(QDataStream &, const QIcon &);
+    friend Q_GUI_EXPORT QDataStream &operator>>(QDataStream &, QIcon &);
+#endif
+
+public:
+    typedef QIconPrivate * DataPtr;
+    inline DataPtr &data_ptr() { return d; }
+};
+
+Q_DECLARE_SHARED(QIcon)
+Q_DECLARE_TYPEINFO(QIcon, Q_MOVABLE_TYPE);
+
+#if !defined(QT_NO_DATASTREAM)
+Q_GUI_EXPORT QDataStream &operator<<(QDataStream &, const QIcon &);
+Q_GUI_EXPORT QDataStream &operator>>(QDataStream &, QIcon &);
+#endif
+
+#ifndef QT_NO_DEBUG_STREAM
+Q_GUI_EXPORT QDebug operator<<(QDebug dbg, const QIcon &);
+#endif
+
+QT_END_NAMESPACE
+
+QT_END_HEADER
+
+#endif // QICON_H
diff --git a/src/gui/image/qicon_p.h b/src/gui/image/qicon_p.h
new file mode 100644
index 0000000..b8b1f00
--- /dev/null
+++ b/src/gui/image/qicon_p.h
@@ -0,0 +1,128 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/
+**
+** This file is part of the QtGui module of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** GNU Lesser General Public License Usage
+** This file may be used under the terms of the GNU Lesser General Public
+** License version 2.1 as published by the Free Software Foundation and
+** appearing in the file LICENSE.LGPL included in the packaging of this
+** file. Please review the following information to ensure the GNU Lesser
+** General Public License version 2.1 requirements will be met:
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** In addition, as a special exception, Nokia gives you certain additional
+** rights. These rights are described in the Nokia Qt LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU General
+** Public License version 3.0 as published by the Free Software Foundation
+** and appearing in the file LICENSE.GPL included in the packaging of this
+** file. Please review the following information to ensure the GNU General
+** Public License version 3.0 requirements will be met:
+** http://www.gnu.org/copyleft/gpl.html.
+**
+** Other Usage
+** Alternatively, this file may be used in accordance with the terms and
+** conditions contained in a signed written agreement between you and Nokia.
+**
+**
+**
+**
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#ifndef QICON_P_H
+#define QICON_P_H
+
+//
+//  W A R N I N G
+//  -------------
+//
+// This file is not part of the Qt API.  It exists purely as an
+// implementation detail.  This header file may change from version to
+// version without notice, or even be removed.
+//
+// We mean it.
+//
+
+#include <QtCore/qglobal.h>
+#include <QtCore/qsize.h>
+#include <QtCore/qlist.h>
+#include <QtGui/qpixmap.h>
+#include <QtGui/qicon.h>
+#include <QtGui/qiconengine.h>
+
+#ifndef QT_NO_ICON
+QT_BEGIN_NAMESPACE
+
+class QIconPrivate
+{
+public:
+    QIconPrivate();
+
+    ~QIconPrivate() {
+        delete engine;
+    }
+
+    QIconEngine *engine;
+
+    QAtomicInt ref;
+    int serialNum;
+    int detach_no;
+};
+
+
+struct QPixmapIconEngineEntry
+{
+    QPixmapIconEngineEntry():mode(QIcon::Normal), state(QIcon::Off){}
+    QPixmapIconEngineEntry(const QPixmap &pm, QIcon::Mode m = QIcon::Normal, QIcon::State s = QIcon::Off)
+        :pixmap(pm), size(pm.size()), mode(m), state(s){}
+    QPixmapIconEngineEntry(const QString &file, const QSize &sz = QSize(), QIcon::Mode m = QIcon::Normal, QIcon::State s = QIcon::Off)
+        :fileName(file), size(sz), mode(m), state(s){}
+    QPixmap pixmap;
+    QString fileName;
+    QSize size;
+    QIcon::Mode mode;
+    QIcon::State state;
+    bool isNull() const {return (fileName.isEmpty() && pixmap.isNull()); }
+};
+
+
+
+class QPixmapIconEngine : public QIconEngine {
+public:
+    QPixmapIconEngine();
+    QPixmapIconEngine(const QPixmapIconEngine &);
+    ~QPixmapIconEngine();
+    void paint(QPainter *painter, const QRect &rect, QIcon::Mode mode, QIcon::State state);
+    QPixmap pixmap(const QSize &size, QIcon::Mode mode, QIcon::State state);
+    QPixmapIconEngineEntry *bestMatch(const QSize &size, QIcon::Mode mode, QIcon::State state, bool sizeOnly);
+    QSize actualSize(const QSize &size, QIcon::Mode mode, QIcon::State state);
+    void addPixmap(const QPixmap &pixmap, QIcon::Mode mode, QIcon::State state);
+    void addFile(const QString &fileName, const QSize &size, QIcon::Mode mode, QIcon::State state);
+
+    QString key() const;
+    QIconEngine *clone() const;
+    bool read(QDataStream &in);
+    bool write(QDataStream &out) const;
+    void virtual_hook(int id, void *data);
+
+private:
+    QPixmapIconEngineEntry *tryMatch(const QSize &size, QIcon::Mode mode, QIcon::State state);
+    QVector<QPixmapIconEngineEntry> pixmaps;
+
+    friend QDataStream &operator<<(QDataStream &s, const QIcon &icon);
+    friend class QIconThemeEngine;
+};
+
+QT_END_NAMESPACE
+#endif //QT_NO_ICON
+#endif // QICON_P_H
diff --git a/src/gui/image/qiconengine.cpp b/src/gui/image/qiconengine.cpp
new file mode 100644
index 0000000..2b7fdb9
--- /dev/null
+++ b/src/gui/image/qiconengine.cpp
@@ -0,0 +1,287 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/
+**
+** This file is part of the QtGui module of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** GNU Lesser General Public License Usage
+** This file may be used under the terms of the GNU Lesser General Public
+** License version 2.1 as published by the Free Software Foundation and
+** appearing in the file LICENSE.LGPL included in the packaging of this
+** file. Please review the following information to ensure the GNU Lesser
+** General Public License version 2.1 requirements will be met:
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** In addition, as a special exception, Nokia gives you certain additional
+** rights. These rights are described in the Nokia Qt LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU General
+** Public License version 3.0 as published by the Free Software Foundation
+** and appearing in the file LICENSE.GPL included in the packaging of this
+** file. Please review the following information to ensure the GNU General
+** Public License version 3.0 requirements will be met:
+** http://www.gnu.org/copyleft/gpl.html.
+**
+** Other Usage
+** Alternatively, this file may be used in accordance with the terms and
+** conditions contained in a signed written agreement between you and Nokia.
+**
+**
+**
+**
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#include "qiconengine.h"
+#include "qpainter.h"
+
+QT_BEGIN_NAMESPACE
+
+/*!
+  \class QIconEngine
+
+  \brief The QIconEngine class provides an abstract base class for QIcon renderers.
+
+  \ingroup painting
+  \inmodule QtGui
+
+  An icon engine provides the rendering functions for a QIcon. Each icon has a
+  corresponding icon engine that is responsible for drawing the icon with a
+  requested size, mode and state.
+
+  The icon is rendered by the paint() function, and the icon can additionally be
+  obtained as a pixmap with the pixmap() function (the default implementation
+  simply uses paint() to achieve this). The addPixmap() function can be used to
+  add new pixmaps to the icon engine, and is used by QIcon to add specialized
+  custom pixmaps.
+
+  The paint(), pixmap(), and addPixmap() functions are all virtual, and can
+  therefore be reimplemented in subclasses of QIconEngine.
+
+  \sa QIconEnginePlugin
+
+*/
+
+/*!
+  \fn virtual void QIconEngine::paint(QPainter *painter, const QRect &rect, QIcon::Mode mode, QIcon::State state) = 0;
+
+  Uses the given \a painter to paint the icon with the required \a mode and
+  \a state into the rectangle \a rect.
+*/
+
+/*!  Returns the actual size of the icon the engine provides for the
+  requested \a size, \a mode and \a state. The default implementation
+  returns the given \a size.
+ */
+QSize QIconEngine::actualSize(const QSize &size, QIcon::Mode /*mode*/, QIcon::State /*state*/)
+{
+    return size;
+}
+
+
+/*!
+  Destroys the icon engine.
+ */
+QIconEngine::~QIconEngine()
+{
+}
+
+
+/*!
+  Returns the icon as a pixmap with the required \a size, \a mode,
+  and \a state. The default implementation creates a new pixmap and
+  calls paint() to fill it.
+*/
+QPixmap QIconEngine::pixmap(const QSize &size, QIcon::Mode mode, QIcon::State state)
+{
+    QPixmap pm(size);
+    {
+        QPainter p(&pm);
+        paint(&p, QRect(QPoint(0,0),size), mode, state);
+    }
+    return pm;
+}
+
+/*!
+  Called by QIcon::addPixmap(). Adds a specialized \a pixmap for the given
+  \a mode and \a state. The default pixmap-based engine stores any supplied
+  pixmaps, and it uses them instead of scaled pixmaps if the size of a pixmap
+  matches the size of icon requested. Custom icon engines that implement
+  scalable vector formats are free to ignores any extra pixmaps.
+ */
+void QIconEngine::addPixmap(const QPixmap &/*pixmap*/, QIcon::Mode /*mode*/, QIcon::State /*state*/)
+{
+}
+
+
+/*!  Called by QIcon::addFile(). Adds a specialized pixmap from the
+  file with the given \a fileName, \a size, \a mode and \a state. The
+  default pixmap-based engine stores any supplied file names, and it
+  loads the pixmaps on demand instead of using scaled pixmaps if the
+  size of a pixmap matches the size of icon requested. Custom icon
+  engines that implement scalable vector formats are free to ignores
+  any extra files.
+ */
+void QIconEngine::addFile(const QString &/*fileName*/, const QSize &/*size*/, QIcon::Mode /*mode*/, QIcon::State /*state*/)
+{
+}
+
+
+/*!
+    \enum QIconEngine::IconEngineHook
+    \since 4.5
+
+    These enum values are used for virtual_hook() to allow additional
+    queries to icon engine without breaking binary compatibility.
+
+    \value AvailableSizesHook Allows to query the sizes of the
+    contained pixmaps for pixmap-based engines. The \a data argument
+    of the virtual_hook() function is a AvailableSizesArgument pointer
+    that should be filled with icon sizes. Engines that work in terms
+    of a scalable, vectorial format normally return an empty list.
+
+    \value IconNameHook Allows to query the name used to create the
+    icon, for example when instantiating an icon using
+    QIcon::fromTheme().
+
+    \sa virtual_hook()
+ */
+
+/*!
+    \class QIconEngine::AvailableSizesArgument
+    \since 4.5
+
+    \inmodule QtGui
+
+    This struct represents arguments to virtual_hook() function when
+    \a id parameter is QIconEngine::AvailableSizesHook.
+
+    \sa virtual_hook(), QIconEngine::IconEngineHook
+ */
+
+/*!
+    \variable QIconEngine::AvailableSizesArgument::mode
+    \brief the requested mode of an image.
+
+    \sa QIcon::Mode
+*/
+
+/*!
+    \variable QIconEngine::AvailableSizesArgument::state
+    \brief the requested state of an image.
+
+    \sa QIcon::State
+*/
+
+/*!
+    \variable QIconEngine::AvailableSizesArgument::sizes
+
+    \brief image sizes that are available with specified \a mode and
+    \a state. This is an output parameter and is filled after call to
+    virtual_hook(). Engines that work in terms of a scalable,
+    vectorial format normally return an empty list.
+*/
+
+
+/*!
+    Returns a key that identifies this icon engine.
+ */
+QString QIconEngine::key() const
+{
+    return QString();
+}
+
+/*! \fn QIconEngine *QIconEngine::clone() const
+
+    Reimplement this method to return a clone of this icon engine.
+ */
+
+/*!
+    Reads icon engine contents from the QDataStream \a in. Returns
+    true if the contents were read; otherwise returns false.
+
+    QIconEngine's default implementation always return false.
+ */
+bool QIconEngine::read(QDataStream &)
+{
+    return false;
+}
+
+/*!
+    Writes the contents of this engine to the QDataStream \a out.
+    Returns true if the contents were written; otherwise returns false.
+
+    QIconEngine's default implementation always return false.
+ */
+bool QIconEngine::write(QDataStream &) const
+{
+    return false;
+}
+
+/*!
+    \since 4.5
+
+    Additional method to allow extending QIconEngine without
+    adding new virtual methods (and without breaking binary compatibility).
+    The actual action and format of \a data depends on \a id argument
+    which is in fact a constant from IconEngineHook enum.
+
+    \sa IconEngineHook
+*/
+void QIconEngine::virtual_hook(int id, void *data)
+{
+    switch (id) {
+    case QIconEngine::AvailableSizesHook: {
+        QIconEngine::AvailableSizesArgument &arg =
+            *reinterpret_cast<QIconEngine::AvailableSizesArgument*>(data);
+        arg.sizes.clear();
+        break;
+    }
+    default:
+        break;
+    }
+}
+
+/*!
+    \since 4.5
+
+    Returns sizes of all images that are contained in the engine for the
+    specific \a mode and \a state.
+
+    \note This is a helper method and the actual work is done by
+    virtual_hook() method, hence this method depends on icon engine support
+    and may not work with all icon engines.
+ */
+QList<QSize> QIconEngine::availableSizes(QIcon::Mode mode, QIcon::State state) const
+{
+    AvailableSizesArgument arg;
+    arg.mode = mode;
+    arg.state = state;
+    const_cast<QIconEngine *>(this)->virtual_hook(QIconEngine::AvailableSizesHook, reinterpret_cast<void*>(&arg));
+    return arg.sizes;
+}
+
+/*!
+    \since 4.7
+
+    Returns the name used to create the engine, if available.
+
+    \note This is a helper method and the actual work is done by
+    virtual_hook() method, hence this method depends on icon engine support
+    and may not work with all icon engines.
+ */
+QString QIconEngine::iconName() const
+{
+    QString name;
+    const_cast<QIconEngine *>(this)->virtual_hook(QIconEngine::IconNameHook, reinterpret_cast<void*>(&name));
+    return name;
+}
+
+QT_END_NAMESPACE
diff --git a/src/gui/image/qiconengine.h b/src/gui/image/qiconengine.h
new file mode 100644
index 0000000..e47f867
--- /dev/null
+++ b/src/gui/image/qiconengine.h
@@ -0,0 +1,95 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/
+**
+** This file is part of the QtGui module of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** GNU Lesser General Public License Usage
+** This file may be used under the terms of the GNU Lesser General Public
+** License version 2.1 as published by the Free Software Foundation and
+** appearing in the file LICENSE.LGPL included in the packaging of this
+** file. Please review the following information to ensure the GNU Lesser
+** General Public License version 2.1 requirements will be met:
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** In addition, as a special exception, Nokia gives you certain additional
+** rights. These rights are described in the Nokia Qt LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU General
+** Public License version 3.0 as published by the Free Software Foundation
+** and appearing in the file LICENSE.GPL included in the packaging of this
+** file. Please review the following information to ensure the GNU General
+** Public License version 3.0 requirements will be met:
+** http://www.gnu.org/copyleft/gpl.html.
+**
+** Other Usage
+** Alternatively, this file may be used in accordance with the terms and
+** conditions contained in a signed written agreement between you and Nokia.
+**
+**
+**
+**
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#ifndef QICONENGINE_H
+#define QICONENGINE_H
+
+#include <QtCore/qglobal.h>
+#include <QtCore/qlist.h>
+#include <QtGui/qicon.h>
+
+QT_BEGIN_HEADER
+
+QT_BEGIN_NAMESPACE
+
+
+class Q_GUI_EXPORT QIconEngine
+{
+public:
+    virtual ~QIconEngine();
+    virtual void paint(QPainter *painter, const QRect &rect, QIcon::Mode mode, QIcon::State state) = 0;
+    virtual QSize actualSize(const QSize &size, QIcon::Mode mode, QIcon::State state);
+    virtual QPixmap pixmap(const QSize &size, QIcon::Mode mode, QIcon::State state);
+
+    virtual void addPixmap(const QPixmap &pixmap, QIcon::Mode mode, QIcon::State state);
+    virtual void addFile(const QString &fileName, const QSize &size, QIcon::Mode mode, QIcon::State state);
+
+    virtual QString key() const;
+    virtual QIconEngine *clone() const = 0;
+    virtual bool read(QDataStream &in);
+    virtual bool write(QDataStream &out) const;
+
+    enum IconEngineHook { AvailableSizesHook = 1, IconNameHook };
+
+    struct AvailableSizesArgument
+    {
+        QIcon::Mode mode;
+        QIcon::State state;
+        QList<QSize> sizes;
+    };
+
+    virtual QList<QSize> availableSizes(QIcon::Mode mode = QIcon::Normal,
+                                    QIcon::State state = QIcon::Off) const;
+
+    virtual QString iconName() const;
+
+    virtual void virtual_hook(int id, void *data);
+};
+
+#if QT_DEPRECATED_SINCE(5, 0)
+typedef QIconEngine QIconEngineV2;
+#endif
+
+QT_END_NAMESPACE
+
+QT_END_HEADER
+
+#endif // QICONENGINE_H
diff --git a/src/gui/image/qiconengineplugin.cpp b/src/gui/image/qiconengineplugin.cpp
new file mode 100644
index 0000000..29953a4
--- /dev/null
+++ b/src/gui/image/qiconengineplugin.cpp
@@ -0,0 +1,107 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/
+**
+** This file is part of the QtGui module of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** GNU Lesser General Public License Usage
+** This file may be used under the terms of the GNU Lesser General Public
+** License version 2.1 as published by the Free Software Foundation and
+** appearing in the file LICENSE.LGPL included in the packaging of this
+** file. Please review the following information to ensure the GNU Lesser
+** General Public License version 2.1 requirements will be met:
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** In addition, as a special exception, Nokia gives you certain additional
+** rights. These rights are described in the Nokia Qt LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU General
+** Public License version 3.0 as published by the Free Software Foundation
+** and appearing in the file LICENSE.GPL included in the packaging of this
+** file. Please review the following information to ensure the GNU General
+** Public License version 3.0 requirements will be met:
+** http://www.gnu.org/copyleft/gpl.html.
+**
+** Other Usage
+** Alternatively, this file may be used in accordance with the terms and
+** conditions contained in a signed written agreement between you and Nokia.
+**
+**
+**
+**
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#include "qiconengineplugin.h"
+#include "qiconengine.h"
+
+QT_BEGIN_NAMESPACE
+
+/*!
+    \class QIconEnginePlugin
+    \brief The QIconEnginePlugin class provides an abstract base for custom QIconEngine plugins.
+
+    \ingroup plugins
+    \inmodule QtGui
+
+    \b {Use QIconEnginePluginV2 instead.}
+
+    The icon engine plugin is a simple plugin interface that makes it easy to
+    create custom icon engines that can be loaded dynamically into applications
+    through QIcon. QIcon uses the file or resource name's suffix to determine
+    what icon engine to use.
+
+    Writing a icon engine plugin is achieved by subclassing this base class,
+    reimplementing the pure virtual functions keys() and create(), and
+    exporting the class with the Q_EXPORT_PLUGIN2() macro.
+
+    \sa {How to Create Qt Plugins}
+*/
+
+/*!
+    \fn QStringList QIconEnginePlugin::keys() const
+
+    Returns a list of icon engine keys that this plugin supports. The keys correspond
+    to the suffix of the file or resource name used when the plugin was created.
+    Keys are case insensitive.
+
+    \sa create()
+*/
+
+/*!
+    \fn QIconEngine* QIconEnginePlugin::create(const QString& filename)
+
+    Creates and returns a QIconEngine object for the icon with the given
+    \a filename.
+
+    \sa keys()
+*/
+
+/*!
+    Constructs a icon engine plugin with the given \a parent. This is invoked
+    automatically by the Q_EXPORT_PLUGIN2() macro.
+*/
+QIconEnginePlugin::QIconEnginePlugin(QObject *parent)
+    : QObject(parent)
+{
+}
+
+/*!
+    Destroys the icon engine plugin.
+
+    You never have to call this explicitly. Qt destroys a plugin
+    automatically when it is no longer used.
+*/
+QIconEnginePlugin::~QIconEnginePlugin()
+{
+}
+
+
+QT_END_NAMESPACE
diff --git a/src/gui/image/qiconengineplugin.h b/src/gui/image/qiconengineplugin.h
new file mode 100644
index 0000000..9333400
--- /dev/null
+++ b/src/gui/image/qiconengineplugin.h
@@ -0,0 +1,80 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/
+**
+** This file is part of the QtGui module of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** GNU Lesser General Public License Usage
+** This file may be used under the terms of the GNU Lesser General Public
+** License version 2.1 as published by the Free Software Foundation and
+** appearing in the file LICENSE.LGPL included in the packaging of this
+** file. Please review the following information to ensure the GNU Lesser
+** General Public License version 2.1 requirements will be met:
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** In addition, as a special exception, Nokia gives you certain additional
+** rights. These rights are described in the Nokia Qt LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU General
+** Public License version 3.0 as published by the Free Software Foundation
+** and appearing in the file LICENSE.GPL included in the packaging of this
+** file. Please review the following information to ensure the GNU General
+** Public License version 3.0 requirements will be met:
+** http://www.gnu.org/copyleft/gpl.html.
+**
+** Other Usage
+** Alternatively, this file may be used in accordance with the terms and
+** conditions contained in a signed written agreement between you and Nokia.
+**
+**
+**
+**
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#ifndef QICONENGINEPLUGIN_H
+#define QICONENGINEPLUGIN_H
+
+#include <QtCore/qplugin.h>
+#include <QtCore/qfactoryinterface.h>
+
+QT_BEGIN_HEADER
+
+QT_BEGIN_NAMESPACE
+
+
+class QIconEngine;
+
+struct Q_GUI_EXPORT QIconEngineFactoryInterface : public QFactoryInterface
+{
+    virtual QIconEngine *create(const QString &filename = QString()) = 0;
+};
+
+#define QIconEngineFactoryInterface_iid \
+    "org.qt-project.Qt.QIconEngineFactoryInterface"
+Q_DECLARE_INTERFACE(QIconEngineFactoryInterface, QIconEngineFactoryInterface_iid)
+
+class Q_GUI_EXPORT QIconEnginePlugin : public QObject, public QIconEngineFactoryInterface
+{
+    Q_OBJECT
+    Q_INTERFACES(QIconEngineFactoryInterface:QFactoryInterface)
+public:
+    QIconEnginePlugin(QObject *parent = 0);
+    ~QIconEnginePlugin();
+
+    virtual QStringList keys() const = 0;
+    virtual QIconEngine *create(const QString &filename = QString()) = 0;
+};
+
+QT_END_NAMESPACE
+
+QT_END_HEADER
+
+#endif // QICONENGINEPLUGIN_H
diff --git a/src/gui/image/qiconloader.cpp b/src/gui/image/qiconloader.cpp
new file mode 100644
index 0000000..71b286b
--- /dev/null
+++ b/src/gui/image/qiconloader.cpp
@@ -0,0 +1,584 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/
+**
+** This file is part of the QtGui module of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** GNU Lesser General Public License Usage
+** This file may be used under the terms of the GNU Lesser General Public
+** License version 2.1 as published by the Free Software Foundation and
+** appearing in the file LICENSE.LGPL included in the packaging of this
+** file. Please review the following information to ensure the GNU Lesser
+** General Public License version 2.1 requirements will be met:
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** In addition, as a special exception, Nokia gives you certain additional
+** rights. These rights are described in the Nokia Qt LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU General
+** Public License version 3.0 as published by the Free Software Foundation
+** and appearing in the file LICENSE.GPL included in the packaging of this
+** file. Please review the following information to ensure the GNU General
+** Public License version 3.0 requirements will be met:
+** http://www.gnu.org/copyleft/gpl.html.
+**
+** Other Usage
+** Alternatively, this file may be used in accordance with the terms and
+** conditions contained in a signed written agreement between you and Nokia.
+**
+**
+**
+**
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+#ifndef QT_NO_ICON
+#include <private/qiconloader_p.h>
+
+#include <private/qguiapplication_p.h>
+#include <private/qicon_p.h>
+
+#include <QtGui/QIconEnginePlugin>
+#include <QtGui/QPixmapCache>
+#include <qpa/qplatformtheme.h>
+#include <QtGui/QIconEngine>
+#include <QtGui/QPalette>
+#include <QtCore/QList>
+#include <QtCore/QHash>
+#include <QtCore/QDir>
+#include <QtCore/QSettings>
+#include <QtGui/QPainter>
+
+#ifdef Q_WS_MAC
+#include <private/qt_cocoa_helpers_mac_p.h>
+#endif
+
+#include <private/qhexstring_p.h>
+
+QT_BEGIN_NAMESPACE
+
+Q_GLOBAL_STATIC(QIconLoader, iconLoaderInstance)
+
+/* Theme to use in last resort, if the theme does not have the icon, neither the parents  */
+static QString fallbackTheme()
+{
+    if (const QPlatformTheme *theme = QGuiApplicationPrivate::platformTheme()) {
+        const QVariant themeHint = theme->themeHint(QPlatformTheme::SystemIconThemeName);
+        if (themeHint.isValid())
+            return themeHint.toString();
+    }
+    return QString();
+}
+
+QIconLoader::QIconLoader() :
+        m_themeKey(1), m_supportsSvg(false), m_initialized(false)
+{
+}
+
+// We lazily initialize the loader to make static icons
+// work. Though we do not officially support this.
+
+static inline QString systemThemeName()
+{
+    if (const QPlatformTheme *theme = QGuiApplicationPrivate::platformTheme()) {
+        const QVariant themeHint = theme->themeHint(QPlatformTheme::SystemIconThemeName);
+        if (themeHint.isValid())
+            return themeHint.toString();
+    }
+    return QString();
+}
+
+static inline QStringList systemIconSearchPaths()
+{
+    if (const QPlatformTheme *theme = QGuiApplicationPrivate::platformTheme()) {
+        const QVariant themeHint = theme->themeHint(QPlatformTheme::IconThemeSearchPaths);
+        if (themeHint.isValid())
+            return themeHint.toStringList();
+    }
+    return QStringList();
+}
+
+void QIconLoader::ensureInitialized()
+{
+    if (!m_initialized) {
+        m_initialized = true;
+
+        Q_ASSERT(qApp);
+
+        m_systemTheme = systemThemeName();
+
+        if (m_systemTheme.isEmpty())
+            m_systemTheme = fallbackTheme();
+#ifndef QT_NO_LIBRARY
+        QFactoryLoader iconFactoryLoader(QIconEngineFactoryInterface_iid,
+                                         QLatin1String("/iconengines"),
+                                         Qt::CaseInsensitive);
+        if (iconFactoryLoader.keyMap().key(QLatin1String("svg"), -1) != -1)
+            m_supportsSvg = true;
+#endif //QT_NO_LIBRARY
+    }
+}
+
+QIconLoader *QIconLoader::instance()
+{
+   return iconLoaderInstance();
+}
+
+// Queries the system theme and invalidates existing
+// icons if the theme has changed.
+void QIconLoader::updateSystemTheme()
+{
+    // Only change if this is not explicitly set by the user
+    if (m_userTheme.isEmpty()) {
+        QString theme = systemThemeName();
+        if (theme.isEmpty())
+            theme = fallbackTheme();
+        if (theme != m_systemTheme) {
+            m_systemTheme = theme;
+            invalidateKey();
+        }
+    }
+}
+
+void QIconLoader::setThemeName(const QString &themeName)
+{
+    m_userTheme = themeName;
+    invalidateKey();
+}
+
+void QIconLoader::setThemeSearchPath(const QStringList &searchPaths)
+{
+    m_iconDirs = searchPaths;
+    themeList.clear();
+    invalidateKey();
+}
+
+QStringList QIconLoader::themeSearchPaths() const
+{
+    if (m_iconDirs.isEmpty()) {
+        m_iconDirs = systemIconSearchPaths();
+        // Always add resource directory as search path
+        m_iconDirs.append(QLatin1String(":/icons"));
+    }
+    return m_iconDirs;
+}
+
+QIconTheme::QIconTheme(const QString &themeName)
+        : m_valid(false)
+{
+    QFile themeIndex;
+
+    QList <QIconDirInfo> keyList;
+    QStringList iconDirs = QIcon::themeSearchPaths();
+    for ( int i = 0 ; i < iconDirs.size() ; ++i) {
+        QDir iconDir(iconDirs[i]);
+        QString themeDir = iconDir.path() + QLatin1Char('/') + themeName;
+        themeIndex.setFileName(themeDir + QLatin1String("/index.theme"));
+        if (themeIndex.exists()) {
+            m_contentDir = themeDir;
+            m_valid = true;
+            break;
+        }
+    }
+#ifndef QT_NO_SETTINGS
+    if (themeIndex.exists()) {
+        const QSettings indexReader(themeIndex.fileName(), QSettings::IniFormat);
+        QStringListIterator keyIterator(indexReader.allKeys());
+        while (keyIterator.hasNext()) {
+
+            const QString key = keyIterator.next();
+            if (key.endsWith(QLatin1String("/Size"))) {
+                // Note the QSettings ini-format does not accept
+                // slashes in key names, hence we have to cheat
+                if (int size = indexReader.value(key).toInt()) {
+                    QString directoryKey = key.left(key.size() - 5);
+                    QIconDirInfo dirInfo(directoryKey);
+                    dirInfo.size = size;
+                    QString type = indexReader.value(directoryKey +
+                                                     QLatin1String("/Type")
+                                                     ).toString();
+
+                    if (type == QLatin1String("Fixed"))
+                        dirInfo.type = QIconDirInfo::Fixed;
+                    else if (type == QLatin1String("Scalable"))
+                        dirInfo.type = QIconDirInfo::Scalable;
+                    else
+                        dirInfo.type = QIconDirInfo::Threshold;
+
+                    dirInfo.threshold = indexReader.value(directoryKey +
+                                                        QLatin1String("/Threshold"),
+                                                        2).toInt();
+
+                    dirInfo.minSize = indexReader.value(directoryKey +
+                                                         QLatin1String("/MinSize"),
+                                                         size).toInt();
+
+                    dirInfo.maxSize = indexReader.value(directoryKey +
+                                                        QLatin1String("/MaxSize"),
+                                                        size).toInt();
+                    m_keyList.append(dirInfo);
+                }
+            }
+        }
+
+        // Parent themes provide fallbacks for missing icons
+        m_parents = indexReader.value(
+                QLatin1String("Icon Theme/Inherits")).toStringList();
+
+        // Ensure a default platform fallback for all themes
+        if (m_parents.isEmpty()) {
+            const QString fallback = fallbackTheme();
+            if (!fallback.isEmpty())
+                m_parents.append(fallback);
+        }
+
+        // Ensure that all themes fall back to hicolor
+        if (!m_parents.contains(QLatin1String("hicolor")))
+            m_parents.append(QLatin1String("hicolor"));
+    }
+#endif //QT_NO_SETTINGS
+}
+
+QThemeIconEntries QIconLoader::findIconHelper(const QString &themeName,
+                                 const QString &iconName,
+                                 QStringList &visited) const
+{
+    QThemeIconEntries entries;
+    Q_ASSERT(!themeName.isEmpty());
+
+    QPixmap pixmap;
+
+    // Used to protect against potential recursions
+    visited << themeName;
+
+    QIconTheme theme = themeList.value(themeName);
+    if (!theme.isValid()) {
+        theme = QIconTheme(themeName);
+        if (!theme.isValid())
+            theme = QIconTheme(fallbackTheme());
+
+        themeList.insert(themeName, theme);
+    }
+
+    QString contentDir = theme.contentDir() + QLatin1Char('/');
+    QList<QIconDirInfo> subDirs = theme.keyList();
+
+    const QString svgext(QLatin1String(".svg"));
+    const QString pngext(QLatin1String(".png"));
+
+    // Add all relevant files
+    for (int i = 0; i < subDirs.size() ; ++i) {
+        const QIconDirInfo &dirInfo = subDirs.at(i);
+        QString subdir = dirInfo.path;
+        QDir currentDir(contentDir + subdir);
+        if (currentDir.exists(iconName + pngext)) {
+            PixmapEntry *iconEntry = new PixmapEntry;
+            iconEntry->dir = dirInfo;
+            iconEntry->filename = currentDir.filePath(iconName + pngext);
+            // Notice we ensure that pixmap entries always come before
+            // scalable to preserve search order afterwards
+            entries.prepend(iconEntry);
+        } else if (m_supportsSvg &&
+            currentDir.exists(iconName + svgext)) {
+            ScalableEntry *iconEntry = new ScalableEntry;
+            iconEntry->dir = dirInfo;
+            iconEntry->filename = currentDir.filePath(iconName + svgext);
+            entries.append(iconEntry);
+        }
+    }
+
+    if (entries.isEmpty()) {
+        const QStringList parents = theme.parents();
+        // Search recursively through inherited themes
+        for (int i = 0 ; i < parents.size() ; ++i) {
+
+            const QString parentTheme = parents.at(i).trimmed();
+
+            if (!visited.contains(parentTheme)) // guard against recursion
+                entries = findIconHelper(parentTheme, iconName, visited);
+
+            if (!entries.isEmpty()) // success
+                break;
+        }
+    }
+    return entries;
+}
+
+QThemeIconEntries QIconLoader::loadIcon(const QString &name) const
+{
+    if (!themeName().isEmpty()) {
+        QStringList visited;
+        return findIconHelper(themeName(), name, visited);
+    }
+
+    return QThemeIconEntries();
+}
+
+
+// -------- Icon Loader Engine -------- //
+
+
+QIconLoaderEngine::QIconLoaderEngine(const QString& iconName)
+        : m_iconName(iconName), m_key(0)
+{
+}
+
+QIconLoaderEngine::~QIconLoaderEngine()
+{
+    while (!m_entries.isEmpty())
+        delete m_entries.takeLast();
+    Q_ASSERT(m_entries.size() == 0);
+}
+
+QIconLoaderEngine::QIconLoaderEngine(const QIconLoaderEngine &other)
+        : QIconEngine(other),
+        m_iconName(other.m_iconName),
+        m_key(0)
+{
+}
+
+QIconEngine *QIconLoaderEngine::clone() const
+{
+    return new QIconLoaderEngine(*this);
+}
+
+bool QIconLoaderEngine::read(QDataStream &in) {
+    in >> m_iconName;
+    return true;
+}
+
+bool QIconLoaderEngine::write(QDataStream &out) const
+{
+    out << m_iconName;
+    return true;
+}
+
+bool QIconLoaderEngine::hasIcon() const
+{
+    return !(m_entries.isEmpty());
+}
+
+// Lazily load the icon
+void QIconLoaderEngine::ensureLoaded()
+{
+
+    iconLoaderInstance()->ensureInitialized();
+
+    if (!(iconLoaderInstance()->themeKey() == m_key)) {
+
+        while (!m_entries.isEmpty())
+            delete m_entries.takeLast();
+
+        Q_ASSERT(m_entries.size() == 0);
+        m_entries = iconLoaderInstance()->loadIcon(m_iconName);
+        m_key = iconLoaderInstance()->themeKey();
+    }
+}
+
+void QIconLoaderEngine::paint(QPainter *painter, const QRect &rect,
+                             QIcon::Mode mode, QIcon::State state)
+{
+    QSize pixmapSize = rect.size();
+#if defined(Q_WS_MAC)
+    pixmapSize *= qt_mac_get_scalefactor();
+#endif
+    painter->drawPixmap(rect, pixmap(pixmapSize, mode, state));
+}
+
+/*
+ * This algorithm is defined by the freedesktop spec:
+ * http://standards.freedesktop.org/icon-theme-spec/icon-theme-spec-latest.html
+ */
+static bool directoryMatchesSize(const QIconDirInfo &dir, int iconsize)
+{
+    if (dir.type == QIconDirInfo::Fixed) {
+        return dir.size == iconsize;
+
+    } else if (dir.type == QIconDirInfo::Scalable) {
+        return dir.size <= dir.maxSize &&
+                iconsize >= dir.minSize;
+
+    } else if (dir.type == QIconDirInfo::Threshold) {
+        return iconsize >= dir.size - dir.threshold &&
+                iconsize <= dir.size + dir.threshold;
+    }
+
+    Q_ASSERT(1); // Not a valid value
+    return false;
+}
+
+/*
+ * This algorithm is defined by the freedesktop spec:
+ * http://standards.freedesktop.org/icon-theme-spec/icon-theme-spec-latest.html
+ */
+static int directorySizeDistance(const QIconDirInfo &dir, int iconsize)
+{
+    if (dir.type == QIconDirInfo::Fixed) {
+        return qAbs(dir.size - iconsize);
+
+    } else if (dir.type == QIconDirInfo::Scalable) {
+        if (iconsize < dir.minSize)
+            return dir.minSize - iconsize;
+        else if (iconsize > dir.maxSize)
+            return iconsize - dir.maxSize;
+        else
+            return 0;
+
+    } else if (dir.type == QIconDirInfo::Threshold) {
+        if (iconsize < dir.size - dir.threshold)
+            return dir.minSize - iconsize;
+        else if (iconsize > dir.size + dir.threshold)
+            return iconsize - dir.maxSize;
+        else return 0;
+    }
+
+    Q_ASSERT(1); // Not a valid value
+    return INT_MAX;
+}
+
+QIconLoaderEngineEntry *QIconLoaderEngine::entryForSize(const QSize &size)
+{
+    int iconsize = qMin(size.width(), size.height());
+
+    // Note that m_entries are sorted so that png-files
+    // come first
+
+    // Search for exact matches first
+    for (int i = 0; i < m_entries.count(); ++i) {
+        QIconLoaderEngineEntry *entry = m_entries.at(i);
+        if (directoryMatchesSize(entry->dir, iconsize)) {
+            return entry;
+        }
+    }
+
+    // Find the minimum distance icon
+    int minimalSize = INT_MAX;
+    QIconLoaderEngineEntry *closestMatch = 0;
+    for (int i = 0; i < m_entries.count(); ++i) {
+        QIconLoaderEngineEntry *entry = m_entries.at(i);
+        int distance = directorySizeDistance(entry->dir, iconsize);
+        if (distance < minimalSize) {
+            minimalSize  = distance;
+            closestMatch = entry;
+        }
+    }
+    return closestMatch;
+}
+
+/*
+ * Returns the actual icon size. For scalable svg's this is equivalent
+ * to the requested size. Otherwise the closest match is returned but
+ * we can never return a bigger size than the requested size.
+ *
+ */
+QSize QIconLoaderEngine::actualSize(const QSize &size, QIcon::Mode mode,
+                                   QIcon::State state)
+{
+    ensureLoaded();
+
+    QIconLoaderEngineEntry *entry = entryForSize(size);
+    if (entry) {
+        const QIconDirInfo &dir = entry->dir;
+        if (dir.type == QIconDirInfo::Scalable)
+            return size;
+        else {
+            int result = qMin<int>(dir.size, qMin(size.width(), size.height()));
+            return QSize(result, result);
+        }
+    }
+    return QIconEngine::actualSize(size, mode, state);
+}
+
+QPixmap PixmapEntry::pixmap(const QSize &size, QIcon::Mode mode, QIcon::State state)
+{
+    Q_UNUSED(state);
+
+    // Ensure that basePixmap is lazily initialized before generating the
+    // key, otherwise the cache key is not unique
+    if (basePixmap.isNull())
+        basePixmap.load(filename);
+
+    int actualSize = qMin(size.width(), size.height());
+    QString key = QLatin1String("$qt_theme_")
+                  % HexString<qint64>(basePixmap.cacheKey())
+                  % HexString<int>(mode)
+                  % HexString<qint64>(QGuiApplication::palette().cacheKey())
+                  % HexString<int>(actualSize);
+
+    QPixmap cachedPixmap;
+    if (QPixmapCache::find(key, &cachedPixmap)) {
+        return cachedPixmap;
+    } else {
+        cachedPixmap = basePixmap;
+        if (QGuiApplication *guiApp = qobject_cast<QGuiApplication *>(qApp))
+            cachedPixmap = static_cast<QGuiApplicationPrivate*>(QObjectPrivate::get(guiApp))->applyQIconStyleHelper(mode, basePixmap);
+        QPixmapCache::insert(key, cachedPixmap);
+    }
+    return cachedPixmap;
+}
+
+QPixmap ScalableEntry::pixmap(const QSize &size, QIcon::Mode mode, QIcon::State state)
+{
+    if (svgIcon.isNull())
+        svgIcon = QIcon(filename);
+
+    // Simply reuse svg icon engine
+    return svgIcon.pixmap(size, mode, state);
+}
+
+QPixmap QIconLoaderEngine::pixmap(const QSize &size, QIcon::Mode mode,
+                                 QIcon::State state)
+{
+    ensureLoaded();
+
+    QIconLoaderEngineEntry *entry = entryForSize(size);
+    if (entry)
+        return entry->pixmap(size, mode, state);
+
+    return QPixmap();
+}
+
+QString QIconLoaderEngine::key() const
+{
+    return QLatin1String("QIconLoaderEngine");
+}
+
+void QIconLoaderEngine::virtual_hook(int id, void *data)
+{
+    ensureLoaded();
+
+    switch (id) {
+    case QIconEngine::AvailableSizesHook:
+        {
+            QIconEngine::AvailableSizesArgument &arg
+                    = *reinterpret_cast<QIconEngine::AvailableSizesArgument*>(data);
+            const QList<QIconDirInfo> directoryKey = iconLoaderInstance()->theme().keyList();
+            arg.sizes.clear();
+
+            // Gets all sizes from the DirectoryInfo entries
+            for (int i = 0 ; i < m_entries.size() ; ++i) {
+                int size = m_entries.at(i)->dir.size;
+                arg.sizes.append(QSize(size, size));
+            }
+        }
+        break;
+    case QIconEngine::IconNameHook:
+        {
+            QString &name = *reinterpret_cast<QString*>(data);
+            name = m_iconName;
+        }
+        break;
+    default:
+        QIconEngine::virtual_hook(id, data);
+    }
+}
+
+QT_END_NAMESPACE
+
+#endif //QT_NO_ICON
diff --git a/src/gui/image/qiconloader_p.h b/src/gui/image/qiconloader_p.h
new file mode 100644
index 0000000..bd990d0
--- /dev/null
+++ b/src/gui/image/qiconloader_p.h
@@ -0,0 +1,192 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/
+**
+** This file is part of the QtGui module of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** GNU Lesser General Public License Usage
+** This file may be used under the terms of the GNU Lesser General Public
+** License version 2.1 as published by the Free Software Foundation and
+** appearing in the file LICENSE.LGPL included in the packaging of this
+** file. Please review the following information to ensure the GNU Lesser
+** General Public License version 2.1 requirements will be met:
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** In addition, as a special exception, Nokia gives you certain additional
+** rights. These rights are described in the Nokia Qt LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU General
+** Public License version 3.0 as published by the Free Software Foundation
+** and appearing in the file LICENSE.GPL included in the packaging of this
+** file. Please review the following information to ensure the GNU General
+** Public License version 3.0 requirements will be met:
+** http://www.gnu.org/copyleft/gpl.html.
+**
+** Other Usage
+** Alternatively, this file may be used in accordance with the terms and
+** conditions contained in a signed written agreement between you and Nokia.
+**
+**
+**
+**
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#ifndef QDESKTOPICON_P_H
+#define QDESKTOPICON_P_H
+
+#ifndef QT_NO_ICON
+//
+//  W A R N I N G
+//  -------------
+//
+// This file is not part of the Qt API.  It exists purely as an
+// implementation detail.  This header file may change from version to
+// version without notice, or even be removed.
+//
+// We mean it.
+//
+
+#include <QtGui/QIcon>
+#include <QtGui/QIconEngine>
+#include <QtGui/QPixmapCache>
+#include <private/qicon_p.h>
+#include <private/qfactoryloader_p.h>
+#include <QtCore/QHash>
+
+QT_BEGIN_NAMESPACE
+
+class QIconLoader;
+
+struct QIconDirInfo
+{
+    enum Type { Fixed, Scalable, Threshold };
+    QIconDirInfo(const QString &_path = QString()) :
+            path(_path),
+            size(0),
+            maxSize(0),
+            minSize(0),
+            threshold(0),
+            type(Threshold) {}
+    QString path;
+    short size;
+    short maxSize;
+    short minSize;
+    short threshold;
+    Type type : 4;
+};
+
+class QIconLoaderEngineEntry
+ {
+public:
+    virtual ~QIconLoaderEngineEntry() {}
+    virtual QPixmap pixmap(const QSize &size,
+                           QIcon::Mode mode,
+                           QIcon::State state) = 0;
+    QString filename;
+    QIconDirInfo dir;
+    static int count;
+};
+
+struct ScalableEntry : public QIconLoaderEngineEntry
+{
+    QPixmap pixmap(const QSize &size, QIcon::Mode mode, QIcon::State state);
+    QIcon svgIcon;
+};
+
+struct PixmapEntry : public QIconLoaderEngineEntry
+{
+    QPixmap pixmap(const QSize &size, QIcon::Mode mode, QIcon::State state);
+    QPixmap basePixmap;
+};
+
+typedef QList<QIconLoaderEngineEntry*> QThemeIconEntries;
+
+class QIconLoaderEngine : public QIconEngine
+{
+public:
+    QIconLoaderEngine(const QString& iconName = QString());
+    ~QIconLoaderEngine();
+
+    void paint(QPainter *painter, const QRect &rect, QIcon::Mode mode, QIcon::State state);
+    QPixmap pixmap(const QSize &size, QIcon::Mode mode, QIcon::State state);
+    QSize actualSize(const QSize &size, QIcon::Mode mode, QIcon::State state);
+    QIconEngine *clone() const;
+    bool read(QDataStream &in);
+    bool write(QDataStream &out) const;
+
+private:
+    QString key() const;
+    bool hasIcon() const;
+    void ensureLoaded();
+    void virtual_hook(int id, void *data);
+    QIconLoaderEngineEntry *entryForSize(const QSize &size);
+    QIconLoaderEngine(const QIconLoaderEngine &other);
+    QThemeIconEntries m_entries;
+    QString m_iconName;
+    uint m_key;
+
+    friend class QIconLoader;
+};
+
+class QIconTheme
+{
+public:
+    QIconTheme(const QString &name);
+    QIconTheme() : m_valid(false) {}
+    QStringList parents() { return m_parents; }
+    QList <QIconDirInfo> keyList() { return m_keyList; }
+    QString contentDir() { return m_contentDir; }
+    bool isValid() { return m_valid; }
+
+private:
+    QString m_contentDir;
+    QList <QIconDirInfo> m_keyList;
+    QStringList m_parents;
+    bool m_valid;
+};
+
+class Q_GUI_EXPORT QIconLoader : public QObject
+{
+public:
+    QIconLoader();
+    QThemeIconEntries loadIcon(const QString &iconName) const;
+    uint themeKey() const { return m_themeKey; }
+
+    QString themeName() const { return m_userTheme.isEmpty() ? m_systemTheme : m_userTheme; }
+    void setThemeName(const QString &themeName);
+    QIconTheme theme() { return themeList.value(themeName()); }
+    void setThemeSearchPath(const QStringList &searchPaths);
+    QStringList themeSearchPaths() const;
+    QIconDirInfo dirInfo(int dirindex);
+    static QIconLoader *instance();
+    void updateSystemTheme();
+    void invalidateKey() { m_themeKey++; }
+    void ensureInitialized();
+
+private:
+    QThemeIconEntries findIconHelper(const QString &themeName,
+                                     const QString &iconName,
+                                     QStringList &visited) const;
+    uint m_themeKey;
+    bool m_supportsSvg;
+    bool m_initialized;
+
+    mutable QString m_userTheme;
+    mutable QString m_systemTheme;
+    mutable QStringList m_iconDirs;
+    mutable QHash <QString, QIconTheme> themeList;
+};
+
+QT_END_NAMESPACE
+
+#endif // QDESKTOPICON_P_H
+
+#endif //QT_NO_ICON
diff --git a/src/gui/kernel/qguiapplication_p.h b/src/gui/kernel/qguiapplication_p.h
index ff1a880..bab3ecc 100644
--- a/src/gui/kernel/qguiapplication_p.h
+++ b/src/gui/kernel/qguiapplication_p.h
@@ -52,6 +52,7 @@
 #include <QWindowSystemInterface>
 #include "private/qwindowsysteminterface_qpa_p.h"
 #include "private/qshortcutmap_p.h"
+#include <qicon.h>
 
 QT_BEGIN_HEADER
 
@@ -213,6 +214,9 @@ public:
 
     const QDrawHelperGammaTables *gammaTables();
 
+    // hook reimplemented in QApplication to apply the QStyle function on the QIcon
+    virtual QPixmap applyQIconStyleHelper(QIcon::Mode, const QPixmap &basePixmap) const { return basePixmap; }
+
 protected:
     virtual void notifyThemeChanged();
 
diff --git a/src/testlib/qtest_gui.h b/src/testlib/qtest_gui.h
index 24abd00..684b876 100644
--- a/src/testlib/qtest_gui.h
+++ b/src/testlib/qtest_gui.h
@@ -61,7 +61,7 @@
 #include <QtGui/qimage.h>
 
 #ifdef QT_WIDGETS_LIB
-#include <QtWidgets/qicon.h>
+#include <QtGui/qicon.h>
 #endif
 
 #if 0
diff --git a/src/widgets/dialogs/qfilesystemmodel.h b/src/widgets/dialogs/qfilesystemmodel.h
index 875044e..8e1d8b9 100644
--- a/src/widgets/dialogs/qfilesystemmodel.h
+++ b/src/widgets/dialogs/qfilesystemmodel.h
@@ -45,7 +45,7 @@
 #include <QtCore/qabstractitemmodel.h>
 #include <QtCore/qpair.h>
 #include <QtCore/qdir.h>
-#include <QtWidgets/qicon.h>
+#include <QtGui/qicon.h>
 #include <QtCore/qdiriterator.h>
 
 QT_BEGIN_HEADER
diff --git a/src/widgets/dialogs/qmessagebox.cpp b/src/widgets/dialogs/qmessagebox.cpp
index cb32de4..2b1d516 100644
--- a/src/widgets/dialogs/qmessagebox.cpp
+++ b/src/widgets/dialogs/qmessagebox.cpp
@@ -54,7 +54,7 @@
 #include <QtWidgets/qdesktopwidget.h>
 #include <QtWidgets/qpushbutton.h>
 #include <QtGui/qaccessible.h>
-#include <QtWidgets/qicon.h>
+#include <QtGui/qicon.h>
 #include <QtGui/qtextdocument.h>
 #include <QtWidgets/qapplication.h>
 #include <QtWidgets/qtextedit.h>
diff --git a/src/widgets/itemviews/qfileiconprovider.h b/src/widgets/itemviews/qfileiconprovider.h
index 85cbf32..a78ccbe 100644
--- a/src/widgets/itemviews/qfileiconprovider.h
+++ b/src/widgets/itemviews/qfileiconprovider.h
@@ -44,7 +44,7 @@
 
 #include <QtCore/qfileinfo.h>
 #include <QtCore/qscopedpointer.h>
-#include <QtWidgets/qicon.h>
+#include <QtGui/qicon.h>
 
 QT_BEGIN_HEADER
 
diff --git a/src/widgets/itemviews/qstandarditemmodel.h b/src/widgets/itemviews/qstandarditemmodel.h
index 767665f..2f449ab 100644
--- a/src/widgets/itemviews/qstandarditemmodel.h
+++ b/src/widgets/itemviews/qstandarditemmodel.h
@@ -45,7 +45,7 @@
 #include <QtCore/qabstractitemmodel.h>
 #include <QtGui/qbrush.h>
 #include <QtGui/qfont.h>
-#include <QtWidgets/qicon.h>
+#include <QtGui/qicon.h>
 #ifndef QT_NO_DATASTREAM
 #include <QtCore/qdatastream.h>
 #endif
diff --git a/src/widgets/kernel/kernel.pri b/src/widgets/kernel/kernel.pri
index 9e3d82e..c4853bd 100644
--- a/src/widgets/kernel/kernel.pri
+++ b/src/widgets/kernel/kernel.pri
@@ -15,11 +15,6 @@ HEADERS += \
 	kernel/qdesktopwidget.h \
 	kernel/qformlayout.h \
 	kernel/qgridlayout.h \
-        kernel/qicon.h \
-        kernel/qicon_p.h \
-        kernel/qiconloader_p.h \
-        kernel/qiconengine.h \
-        kernel/qiconengineplugin.h \
         kernel/qlayout.h \
 	kernel/qlayout_p.h \
 	kernel/qlayoutengine_p.h \
@@ -52,10 +47,6 @@ SOURCES += \
         kernel/qboxlayout.cpp \
 	kernel/qformlayout.cpp \
 	kernel/qgridlayout.cpp \
-        kernel/qicon.cpp \
-        kernel/qiconloader.cpp \
-        kernel/qiconengine.cpp \
-        kernel/qiconengineplugin.cpp \
         kernel/qlayout.cpp \
 	kernel/qlayoutengine.cpp \
 	kernel/qlayoutitem.cpp \
diff --git a/src/widgets/kernel/qaction.h b/src/widgets/kernel/qaction.h
index 485b592..bb7de85 100644
--- a/src/widgets/kernel/qaction.h
+++ b/src/widgets/kernel/qaction.h
@@ -46,7 +46,7 @@
 #include <QtCore/qstring.h>
 #include <QtWidgets/qwidget.h>
 #include <QtCore/qvariant.h>
-#include <QtWidgets/qicon.h>
+#include <QtGui/qicon.h>
 
 QT_BEGIN_HEADER
 
diff --git a/src/widgets/kernel/qapplication.cpp b/src/widgets/kernel/qapplication.cpp
index fc6768e..cfad6fb 100644
--- a/src/widgets/kernel/qapplication.cpp
+++ b/src/widgets/kernel/qapplication.cpp
@@ -4510,6 +4510,14 @@ QGestureManager* QGestureManager::instance()
 }
 #endif // QT_NO_GESTURES
 
+QPixmap QApplicationPrivate::applyQIconStyleHelper(QIcon::Mode mode, const QPixmap& base) const
+{
+    Q_Q(const QApplication);
+    QStyleOption opt(0);
+    opt.palette = q->palette();
+    return q->style()->generatedIconPixmap(mode, base, &opt);
+}
+
 QT_END_NAMESPACE
 
 #include "moc_qapplication.cpp"
diff --git a/src/widgets/kernel/qapplication_p.h b/src/widgets/kernel/qapplication_p.h
index 6386226..891d71a 100644
--- a/src/widgets/kernel/qapplication_p.h
+++ b/src/widgets/kernel/qapplication_p.h
@@ -374,6 +374,7 @@ public:
                                        ulong timestamp);
     static void translateTouchCancel(QTouchDevice *device, ulong timestamp);
 
+    QPixmap applyQIconStyleHelper(QIcon::Mode mode, const QPixmap& base) const;
 private:
 #ifdef Q_WS_QWS
     QHash<const QScreen*, QRect> maxWindowRects;
diff --git a/src/widgets/kernel/qicon.cpp b/src/widgets/kernel/qicon.cpp
deleted file mode 100644
index 448b6a8..0000000
--- a/src/widgets/kernel/qicon.cpp
+++ /dev/null
@@ -1,1137 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/
-**
-** This file is part of the QtGui module of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:LGPL$
-** GNU Lesser General Public License Usage
-** This file may be used under the terms of the GNU Lesser General Public
-** License version 2.1 as published by the Free Software Foundation and
-** appearing in the file LICENSE.LGPL included in the packaging of this
-** file. Please review the following information to ensure the GNU Lesser
-** General Public License version 2.1 requirements will be met:
-** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
-**
-** In addition, as a special exception, Nokia gives you certain additional
-** rights. These rights are described in the Nokia Qt LGPL Exception
-** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
-**
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU General
-** Public License version 3.0 as published by the Free Software Foundation
-** and appearing in the file LICENSE.GPL included in the packaging of this
-** file. Please review the following information to ensure the GNU General
-** Public License version 3.0 requirements will be met:
-** http://www.gnu.org/copyleft/gpl.html.
-**
-** Other Usage
-** Alternatively, this file may be used in accordance with the terms and
-** conditions contained in a signed written agreement between you and Nokia.
-**
-**
-**
-**
-**
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-#include "qicon.h"
-#include "qicon_p.h"
-#include "qiconengine.h"
-#include "qiconengineplugin.h"
-#include "private/qfactoryloader_p.h"
-#include "private/qiconloader_p.h"
-#include "qstyleoption.h"
-#include "qpainter.h"
-#include "qfileinfo.h"
-#include "qstyle.h"
-#include "qpixmapcache.h"
-#include "qvariant.h"
-#include "qcache.h"
-#include "qdebug.h"
-#include "qapplication.h"
-
-#ifdef Q_WS_MAC
-#include <private/qt_mac_p.h>
-#include <private/qt_cocoa_helpers_mac_p.h>
-#endif
-
-#include "private/qhexstring_p.h"
-
-#ifndef QT_NO_ICON
-QT_BEGIN_NAMESPACE
-
-/*!
-    \enum QIcon::Mode
-
-    This enum type describes the mode for which a pixmap is intended
-    to be used. The currently defined modes are:
-
-    \value Normal
-         Display the pixmap when the user is
-        not interacting with the icon, but the
-        functionality represented by the icon is available.
-    \value Disabled
-         Display the pixmap when the
-        functionality represented by the icon is not available.
-    \value Active
-         Display the pixmap when the
-        functionality represented by the icon is available and
-        the user is interacting with the icon, for example, moving the
-        mouse over it or clicking it.
-   \value Selected
-        Display the pixmap when the item represented by the icon is
-        selected.
-*/
-
-/*!
-  \enum QIcon::State
-
-  This enum describes the state for which a pixmap is intended to be
-  used. The \e state can be:
-
-  \value Off  Display the pixmap when the widget is in an "off" state
-  \value On  Display the pixmap when the widget is in an "on" state
-*/
-
-static QBasicAtomicInt serialNumCounter = Q_BASIC_ATOMIC_INITIALIZER(1);
-
-static void qt_cleanup_icon_cache();
-namespace {
-    struct IconCache : public QCache<QString, QIcon>
-    {
-        IconCache()
-        {
-            // ### note: won't readd if QApplication is re-created!
-            qAddPostRoutine(qt_cleanup_icon_cache);
-        }
-    };
-}
-
-Q_GLOBAL_STATIC(IconCache, qtIconCache)
-
-static void qt_cleanup_icon_cache()
-{
-    qtIconCache()->clear();
-}
-
-QIconPrivate::QIconPrivate()
-    : engine(0), ref(1),
-    serialNum(serialNumCounter.fetchAndAddRelaxed(1)),
-    detach_no(0)
-{
-}
-
-QPixmapIconEngine::QPixmapIconEngine()
-{
-}
-
-QPixmapIconEngine::QPixmapIconEngine(const QPixmapIconEngine &other)
-    : QIconEngine(other), pixmaps(other.pixmaps)
-{
-}
-
-QPixmapIconEngine::~QPixmapIconEngine()
-{
-}
-
-void QPixmapIconEngine::paint(QPainter *painter, const QRect &rect, QIcon::Mode mode, QIcon::State state)
-{
-    QSize pixmapSize = rect.size();
-#if defined(Q_WS_MAC)
-    pixmapSize *= qt_mac_get_scalefactor();
-#endif
-    painter->drawPixmap(rect, pixmap(pixmapSize, mode, state));
-}
-
-static inline int area(const QSize &s) { return s.width() * s.height(); }
-
-// returns the smallest of the two that is still larger than or equal to size.
-static QPixmapIconEngineEntry *bestSizeMatch( const QSize &size, QPixmapIconEngineEntry *pa, QPixmapIconEngineEntry *pb)
-{
-    int s = area(size);
-    if (pa->size == QSize() && pa->pixmap.isNull()) {
-        pa->pixmap = QPixmap(pa->fileName);
-        pa->size = pa->pixmap.size();
-    }
-    int a = area(pa->size);
-    if (pb->size == QSize() && pb->pixmap.isNull()) {
-        pb->pixmap = QPixmap(pb->fileName);
-        pb->size = pb->pixmap.size();
-    }
-    int b = area(pb->size);
-    int res = a;
-    if (qMin(a,b) >= s)
-        res = qMin(a,b);
-    else
-        res = qMax(a,b);
-    if (res == a)
-        return pa;
-    return pb;
-}
-
-QPixmapIconEngineEntry *QPixmapIconEngine::tryMatch(const QSize &size, QIcon::Mode mode, QIcon::State state)
-{
-    QPixmapIconEngineEntry *pe = 0;
-    for (int i = 0; i < pixmaps.count(); ++i)
-        if (pixmaps.at(i).mode == mode && pixmaps.at(i).state == state) {
-            if (pe)
-                pe = bestSizeMatch(size, &pixmaps[i], pe);
-            else
-                pe = &pixmaps[i];
-        }
-    return pe;
-}
-
-
-QPixmapIconEngineEntry *QPixmapIconEngine::bestMatch(const QSize &size, QIcon::Mode mode, QIcon::State state, bool sizeOnly)
-{
-    QPixmapIconEngineEntry *pe = tryMatch(size, mode, state);
-    while (!pe){
-        QIcon::State oppositeState = (state == QIcon::On) ? QIcon::Off : QIcon::On;
-        if (mode == QIcon::Disabled || mode == QIcon::Selected) {
-            QIcon::Mode oppositeMode = (mode == QIcon::Disabled) ? QIcon::Selected : QIcon::Disabled;
-            if ((pe = tryMatch(size, QIcon::Normal, state)))
-                break;
-            if ((pe = tryMatch(size, QIcon::Active, state)))
-                break;
-            if ((pe = tryMatch(size, mode, oppositeState)))
-                break;
-            if ((pe = tryMatch(size, QIcon::Normal, oppositeState)))
-                break;
-            if ((pe = tryMatch(size, QIcon::Active, oppositeState)))
-                break;
-            if ((pe = tryMatch(size, oppositeMode, state)))
-                break;
-            if ((pe = tryMatch(size, oppositeMode, oppositeState)))
-                break;
-        } else {
-            QIcon::Mode oppositeMode = (mode == QIcon::Normal) ? QIcon::Active : QIcon::Normal;
-            if ((pe = tryMatch(size, oppositeMode, state)))
-                break;
-            if ((pe = tryMatch(size, mode, oppositeState)))
-                break;
-            if ((pe = tryMatch(size, oppositeMode, oppositeState)))
-                break;
-            if ((pe = tryMatch(size, QIcon::Disabled, state)))
-                break;
-            if ((pe = tryMatch(size, QIcon::Selected, state)))
-                break;
-            if ((pe = tryMatch(size, QIcon::Disabled, oppositeState)))
-                break;
-            if ((pe = tryMatch(size, QIcon::Selected, oppositeState)))
-                break;
-        }
-
-        if (!pe)
-            return pe;
-    }
-
-    if (sizeOnly ? (pe->size.isNull() || !pe->size.isValid()) : pe->pixmap.isNull()) {
-        pe->pixmap = QPixmap(pe->fileName);
-        if (!pe->pixmap.isNull())
-            pe->size = pe->pixmap.size();
-    }
-
-    return pe;
-}
-
-QPixmap QPixmapIconEngine::pixmap(const QSize &size, QIcon::Mode mode, QIcon::State state)
-{
-    QPixmap pm;
-    QPixmapIconEngineEntry *pe = bestMatch(size, mode, state, false);
-    if (pe)
-        pm = pe->pixmap;
-
-    if (pm.isNull()) {
-        int idx = pixmaps.count();
-        while (--idx >= 0) {
-            if (pe == &pixmaps[idx]) {
-                pixmaps.remove(idx);
-                break;
-            }
-        }
-        if (pixmaps.isEmpty())
-            return pm;
-        else
-            return pixmap(size, mode, state);
-    }
-
-    QSize actualSize = pm.size();
-    if (!actualSize.isNull() && (actualSize.width() > size.width() || actualSize.height() > size.height()))
-        actualSize.scale(size, Qt::KeepAspectRatio);
-
-    // #### Qt5 no idea what this really does, but we need to remove the QApp and style references
-    QString key = QLatin1String("qt_")
-                  % HexString<quint64>(pm.cacheKey())
-                  % HexString<uint>(pe->mode)
-                  % HexString<quint64>(QApplication::palette().cacheKey())
-                  % HexString<uint>(actualSize.width())
-                  % HexString<uint>(actualSize.height());
-
-    if (mode == QIcon::Active) {
-        if (QPixmapCache::find(key % HexString<uint>(mode), pm))
-            return pm; // horray
-        if (QPixmapCache::find(key % HexString<uint>(QIcon::Normal), pm)) {
-            QStyleOption opt(0);
-            opt.palette = QApplication::palette();
-            QPixmap active = QApplication::style()->generatedIconPixmap(QIcon::Active, pm, &opt);
-            if (pm.cacheKey() == active.cacheKey())
-                return pm;
-        }
-    }
-
-    if (!QPixmapCache::find(key % HexString<uint>(mode), pm)) {
-        if (pm.size() != actualSize)
-            pm = pm.scaled(actualSize, Qt::IgnoreAspectRatio, Qt::SmoothTransformation);
-        if (pe->mode != mode && mode != QIcon::Normal) {
-            QStyleOption opt(0);
-            opt.palette = QApplication::palette();
-            QPixmap generated = QApplication::style()->generatedIconPixmap(mode, pm, &opt);
-            if (!generated.isNull())
-                pm = generated;
-        }
-        QPixmapCache::insert(key % HexString<uint>(mode), pm);
-    }
-    return pm;
-}
-
-QSize QPixmapIconEngine::actualSize(const QSize &size, QIcon::Mode mode, QIcon::State state)
-{
-    QSize actualSize;
-    if (QPixmapIconEngineEntry *pe = bestMatch(size, mode, state, true))
-        actualSize = pe->size;
-
-    if (actualSize.isNull())
-        return actualSize;
-
-    if (!actualSize.isNull() && (actualSize.width() > size.width() || actualSize.height() > size.height()))
-        actualSize.scale(size, Qt::KeepAspectRatio);
-    return actualSize;
-}
-
-void QPixmapIconEngine::addPixmap(const QPixmap &pixmap, QIcon::Mode mode, QIcon::State state)
-{
-    if (!pixmap.isNull()) {
-        QPixmapIconEngineEntry *pe = tryMatch(pixmap.size(), mode, state);
-        if(pe && pe->size == pixmap.size()) {
-            pe->pixmap = pixmap;
-            pe->fileName.clear();
-        } else {
-            pixmaps += QPixmapIconEngineEntry(pixmap, mode, state);
-        }
-    }
-}
-
-void QPixmapIconEngine::addFile(const QString &fileName, const QSize &_size, QIcon::Mode mode, QIcon::State state)
-{
-    if (!fileName.isEmpty()) {
-        QSize size = _size;
-        QPixmap pixmap;
-
-        QString abs = fileName;
-        if (fileName.at(0) != QLatin1Char(':'))
-            abs = QFileInfo(fileName).absoluteFilePath();
-
-        for (int i = 0; i < pixmaps.count(); ++i) {
-            if (pixmaps.at(i).mode == mode && pixmaps.at(i).state == state) {
-                QPixmapIconEngineEntry *pe = &pixmaps[i];
-                if(size == QSize()) {
-                    pixmap = QPixmap(abs);
-                    size = pixmap.size();
-                }
-                if (pe->size == QSize() && pe->pixmap.isNull()) {
-                    pe->pixmap = QPixmap(pe->fileName);
-                    pe->size = pe->pixmap.size();
-                }
-                if(pe->size == size) {
-                    pe->pixmap = pixmap;
-                    pe->fileName = abs;
-                    return;
-                }
-            }
-        }
-        QPixmapIconEngineEntry e(abs, size, mode, state);
-        e.pixmap = pixmap;
-        pixmaps += e;
-    }
-}
-
-QString QPixmapIconEngine::key() const
-{
-    return QLatin1String("QPixmapIconEngine");
-}
-
-QIconEngine *QPixmapIconEngine::clone() const
-{
-    return new QPixmapIconEngine(*this);
-}
-
-bool QPixmapIconEngine::read(QDataStream &in)
-{
-    int num_entries;
-    QPixmap pm;
-    QString fileName;
-    QSize sz;
-    uint mode;
-    uint state;
-
-    in >> num_entries;
-    for (int i=0; i < num_entries; ++i) {
-        if (in.atEnd()) {
-            pixmaps.clear();
-            return false;
-        }
-        in >> pm;
-        in >> fileName;
-        in >> sz;
-        in >> mode;
-        in >> state;
-        if (pm.isNull()) {
-            addFile(fileName, sz, QIcon::Mode(mode), QIcon::State(state));
-        } else {
-            QPixmapIconEngineEntry pe(fileName, sz, QIcon::Mode(mode), QIcon::State(state));
-            pe.pixmap = pm;
-            pixmaps += pe;
-        }
-    }
-    return true;
-}
-
-bool QPixmapIconEngine::write(QDataStream &out) const
-{
-    int num_entries = pixmaps.size();
-    out << num_entries;
-    for (int i=0; i < num_entries; ++i) {
-        if (pixmaps.at(i).pixmap.isNull())
-            out << QPixmap(pixmaps.at(i).fileName);
-        else
-            out << pixmaps.at(i).pixmap;
-        out << pixmaps.at(i).fileName;
-        out << pixmaps.at(i).size;
-        out << (uint) pixmaps.at(i).mode;
-        out << (uint) pixmaps.at(i).state;
-    }
-    return true;
-}
-
-void QPixmapIconEngine::virtual_hook(int id, void *data)
-{
-    switch (id) {
-    case QIconEngine::AvailableSizesHook: {
-        QIconEngine::AvailableSizesArgument &arg =
-            *reinterpret_cast<QIconEngine::AvailableSizesArgument*>(data);
-        arg.sizes.clear();
-        for (int i = 0; i < pixmaps.size(); ++i) {
-            QPixmapIconEngineEntry &pe = pixmaps[i];
-            if (pe.size == QSize() && pe.pixmap.isNull()) {
-                pe.pixmap = QPixmap(pe.fileName);
-                pe.size = pe.pixmap.size();
-            }
-            if (pe.mode == arg.mode && pe.state == arg.state && !pe.size.isEmpty())
-                arg.sizes.push_back(pe.size);
-        }
-        break;
-    }
-    default:
-        QIconEngine::virtual_hook(id, data);
-    }
-}
-
-#ifndef QT_NO_LIBRARY
-Q_GLOBAL_STATIC_WITH_ARGS(QFactoryLoader, loader,
-    (QIconEngineFactoryInterface_iid, QLatin1String("/iconengines"), Qt::CaseInsensitive))
-#endif
-
-
-
-/*!
-  \class QIcon
-
-  \brief The QIcon class provides scalable icons in different modes
-  and states.
-
-  \ingroup painting
-  \ingroup shared
-  \inmodule QtWidgets
-
-  A QIcon can generate smaller, larger, active, and disabled pixmaps
-  from the set of pixmaps it is given. Such pixmaps are used by Qt
-  widgets to show an icon representing a particular action.
-
-  The simplest use of QIcon is to create one from a QPixmap file or
-  resource, and then use it, allowing Qt to work out all the required
-  icon styles and sizes. For example:
-
-  \snippet code/src_gui_image_qicon.cpp 0
-
-  To undo a QIcon, simply set a null icon in its place:
-
-  \snippet code/src_gui_image_qicon.cpp 1
-
-  Use the QImageReader::supportedImageFormats() and
-  QImageWriter::supportedImageFormats() functions to retrieve a
-  complete list of the supported file formats.
-
-  When you retrieve a pixmap using pixmap(QSize, Mode, State), and no
-  pixmap for this given size, mode and state has been added with
-  addFile() or addPixmap(), then QIcon will generate one on the
-  fly. This pixmap generation happens in a QIconEngineV2. The default
-  engine scales pixmaps down if required, but never up, and it uses
-  the current style to calculate a disabled appearance. By using
-  custom icon engines, you can customize every aspect of generated
-  icons. With QIconEnginePluginV2 it is possible to register different
-  icon engines for different file suffixes, making it possible for
-  third parties to provide additional icon engines to those included
-  with Qt.
-
-  \note Since Qt 4.2, an icon engine that supports SVG is included.
-
-  \section1 Making Classes that Use QIcon
-
-  If you write your own widgets that have an option to set a small
-  pixmap, consider allowing a QIcon to be set for that pixmap.  The
-  Qt class QToolButton is an example of such a widget.
-
-  Provide a method to set a QIcon, and when you draw the icon, choose
-  whichever pixmap is appropriate for the current state of your widget.
-  For example:
-  \snippet code/src_gui_image_qicon.cpp 2
-
-  You might also make use of the \c Active mode, perhaps making your
-  widget \c Active when the mouse is over the widget (see \l
-  QWidget::enterEvent()), while the mouse is pressed pending the
-  release that will activate the function, or when it is the currently
-  selected item. If the widget can be toggled, the "On" mode might be
-  used to draw a different icon.
-
-  \img icon.png QIcon
-
-  \sa {fowler}{GUI Design Handbook: Iconic Label}, {Icons Example}
-*/
-
-
-/*!
-  Constructs a null icon.
-*/
-QIcon::QIcon()
-    : d(0)
-{
-}
-
-/*!
-  Constructs an icon from a \a pixmap.
- */
-QIcon::QIcon(const QPixmap &pixmap)
-    :d(0)
-{
-    addPixmap(pixmap);
-}
-
-/*!
-  Constructs a copy of \a other. This is very fast.
-*/
-QIcon::QIcon(const QIcon &other)
-    :d(other.d)
-{
-    if (d)
-        d->ref.ref();
-}
-
-/*!
-    Constructs an icon from the file with the given \a fileName. The
-    file will be loaded on demand.
-
-    If \a fileName contains a relative path (e.g. the filename only)
-    the relevant file must be found relative to the runtime working
-    directory.
-
-    The file name can be either refer to an actual file on disk or to
-    one of the application's embedded resources.  See the
-    \l{resources.html}{Resource System} overview for details on how to
-    embed images and other resource files in the application's
-    executable.
-
-    Use the QImageReader::supportedImageFormats() and
-    QImageWriter::supportedImageFormats() functions to retrieve a
-    complete list of the supported file formats.
-*/
-QIcon::QIcon(const QString &fileName)
-    : d(0)
-{
-    addFile(fileName);
-}
-
-
-/*!
-    Creates an icon with a specific icon \a engine. The icon takes
-    ownership of the engine.
-*/
-QIcon::QIcon(QIconEngine *engine)
-    :d(new QIconPrivate)
-{
-    d->engine = engine;
-}
-
-/*!
-    Destroys the icon.
-*/
-QIcon::~QIcon()
-{
-    if (d && !d->ref.deref())
-        delete d;
-}
-
-/*!
-    Assigns the \a other icon to this icon and returns a reference to
-    this icon.
-*/
-QIcon &QIcon::operator=(const QIcon &other)
-{
-    if (other.d)
-        other.d->ref.ref();
-    if (d && !d->ref.deref())
-        delete d;
-    d = other.d;
-    return *this;
-}
-
-/*!
-    \fn void QIcon::swap(QIcon &other)
-    \since 4.8
-
-    Swaps icon \a other with this icon. This operation is very
-    fast and never fails.
-*/
-
-/*!
-   Returns the icon as a QVariant.
-*/
-QIcon::operator QVariant() const
-{
-    return QVariant(QVariant::Icon, this);
-}
-
-/*! \fn int QIcon::serialNumber() const
-    \obsolete
-
-    Returns a number that identifies the contents of this
-    QIcon object. Distinct QIcon objects can have
-    the same serial number if they refer to the same contents
-    (but they don't have to). Also, the serial number of
-    a QIcon object may change during its lifetime.
-
-    Use cacheKey() instead.
-
-    A null icon always has a serial number of 0.
-
-    Serial numbers are mostly useful in conjunction with caching.
-
-    \sa QPixmap::serialNumber()
-*/
-
-/*!
-    Returns a number that identifies the contents of this QIcon
-    object. Distinct QIcon objects can have the same key if
-    they refer to the same contents.
-    \since 4.3
-
-    The cacheKey() will change when the icon is altered via
-    addPixmap() or addFile().
-
-    Cache keys are mostly useful in conjunction with caching.
-
-    \sa QPixmap::cacheKey()
-*/
-qint64 QIcon::cacheKey() const
-{
-    if (!d)
-        return 0;
-    return (((qint64) d->serialNum) << 32) | ((qint64) (d->detach_no));
-}
-
-/*!
-  Returns a pixmap with the requested \a size, \a mode, and \a
-  state, generating one if necessary. The pixmap might be smaller than
-  requested, but never larger.
-
-  \sa actualSize(), paint()
-*/
-QPixmap QIcon::pixmap(const QSize &size, Mode mode, State state) const
-{
-    if (!d)
-        return QPixmap();
-    return d->engine->pixmap(size, mode, state);
-}
-
-/*!
-    \fn QPixmap QIcon::pixmap(int w, int h, Mode mode = Normal, State state = Off) const
-
-    \overload
-
-    Returns a pixmap of size QSize(\a w, \a h). The pixmap might be smaller than
-    requested, but never larger.
-*/
-
-/*!
-    \fn QPixmap QIcon::pixmap(int extent, Mode mode = Normal, State state = Off) const
-
-    \overload
-
-    Returns a pixmap of size QSize(\a extent, \a extent). The pixmap might be smaller
-    than requested, but never larger.
-*/
-
-/*!  Returns the actual size of the icon for the requested \a size, \a
-  mode, and \a state. The result might be smaller than requested, but
-  never larger.
-
-  \sa pixmap(), paint()
-*/
-QSize QIcon::actualSize(const QSize &size, Mode mode, State state) const
-{
-    if (!d)
-        return QSize();
-    return d->engine->actualSize(size, mode, state);
-}
-
-
-/*!
-    Uses the \a painter to paint the icon with specified \a alignment,
-    required \a mode, and \a state into the rectangle \a rect.
-
-    \sa actualSize(), pixmap()
-*/
-void QIcon::paint(QPainter *painter, const QRect &rect, Qt::Alignment alignment, Mode mode, State state) const
-{
-    if (!d || !painter)
-        return;
-    QRect alignedRect = QStyle::alignedRect(painter->layoutDirection(), alignment, d->engine->actualSize(rect.size(), mode, state), rect);
-    d->engine->paint(painter, alignedRect, mode, state);
-}
-
-/*!
-    \fn void QIcon::paint(QPainter *painter, int x, int y, int w, int h, Qt::Alignment alignment,
-                          Mode mode, State state) const
-
-    \overload
-
-    Paints the icon into the rectangle QRect(\a x, \a y, \a w, \a h).
-*/
-
-/*!
-    Returns true if the icon is empty; otherwise returns false.
-
-    An icon is empty if it has neither a pixmap nor a filename.
-
-    Note: Even a non-null icon might not be able to create valid
-    pixmaps, eg. if the file does not exist or cannot be read.
-*/
-bool QIcon::isNull() const
-{
-    return !d;
-}
-
-/*!\internal
- */
-bool QIcon::isDetached() const
-{
-    return !d || d->ref.load() == 1;
-}
-
-/*! \internal
- */
-void QIcon::detach()
-{
-    if (d) {
-        if (d->ref.load() != 1) {
-            QIconPrivate *x = new QIconPrivate;
-            x->engine = d->engine->clone();
-            if (!d->ref.deref())
-                delete d;
-            d = x;
-        }
-        ++d->detach_no;
-    }
-}
-
-/*!
-    Adds \a pixmap to the icon, as a specialization for \a mode and
-    \a state.
-
-    Custom icon engines are free to ignore additionally added
-    pixmaps.
-
-    \sa addFile()
-*/
-void QIcon::addPixmap(const QPixmap &pixmap, Mode mode, State state)
-{
-    if (pixmap.isNull())
-        return;
-    if (!d) {
-        d = new QIconPrivate;
-        d->engine = new QPixmapIconEngine;
-    } else {
-        detach();
-    }
-    d->engine->addPixmap(pixmap, mode, state);
-}
-
-
-/*!  Adds an image from the file with the given \a fileName to the
-     icon, as a specialization for \a size, \a mode and \a state. The
-     file will be loaded on demand. Note: custom icon engines are free
-     to ignore additionally added pixmaps.
-
-     If \a fileName contains a relative path (e.g. the filename only)
-     the relevant file must be found relative to the runtime working
-     directory.
-
-    The file name can be either refer to an actual file on disk or to
-    one of the application's embedded resources. See the
-    \l{resources.html}{Resource System} overview for details on how to
-    embed images and other resource files in the application's
-    executable.
-
-    Use the QImageReader::supportedImageFormats() and
-    QImageWriter::supportedImageFormats() functions to retrieve a
-    complete list of the supported file formats.
-
-    Note: When you add a non-empty filename to a QIcon, the icon becomes
-    non-null, even if the file doesn't exist or points to a corrupt file.
-
-    \sa addPixmap()
- */
-void QIcon::addFile(const QString &fileName, const QSize &size, Mode mode, State state)
-{
-    if (fileName.isEmpty())
-        return;
-    if (!d) {
-#if !defined (QT_NO_LIBRARY) && !defined(QT_NO_SETTINGS)
-        QFileInfo info(fileName);
-        QString suffix = info.suffix();
-        if (!suffix.isEmpty()) {
-            // first try version 2 engines..
-            const int index = loader()->indexOf(suffix);
-            if (index != -1) {
-                if (QIconEngineFactoryInterface *factory = qobject_cast<QIconEngineFactoryInterface*>(loader()->instance(index))) {
-                    if (QIconEngine *engine = factory->create(fileName)) {
-                        d = new QIconPrivate;
-                        d->engine = engine;
-                    }
-                }
-            }
-        }
-#endif
-        // ...then fall back to the default engine
-        if (!d) {
-            d = new QIconPrivate;
-            d->engine = new QPixmapIconEngine;
-        }
-    } else {
-        detach();
-    }
-    d->engine->addFile(fileName, size, mode, state);
-}
-
-/*!
-    \since 4.5
-
-    Returns a list of available icon sizes for the specified \a mode and
-    \a state.
-*/
-QList<QSize> QIcon::availableSizes(Mode mode, State state) const
-{
-    if (!d || !d->engine)
-        return QList<QSize>();
-    return d->engine->availableSizes(mode, state);
-}
-
-/*!
-    \since 4.7
-
-    Returns the name used to create the icon, if available.
-
-    Depending on the way the icon was created, it may have an associated
-    name. This is the case for icons created with fromTheme() or icons
-    using a QIconEngine which supports the QIconEngineV2::IconNameHook.
-
-    \sa fromTheme(), QIconEngine
-*/
-QString QIcon::name() const
-{
-    if (!d || !d->engine)
-        return QString();
-    return d->engine->iconName();
-}
-
-/*!
-    \since 4.6
-
-    Sets the search paths for icon themes to \a paths.
-    \sa themeSearchPaths(), fromTheme(), setThemeName()
-*/
-void QIcon::setThemeSearchPaths(const QStringList &paths)
-{
-    QIconLoader::instance()->setThemeSearchPath(paths);
-}
-
-/*!
-  \since 4.6
-
-  Returns the search paths for icon themes.
-
-  The default value will depend on the platform:
-
-  On X11, the search path will use the XDG_DATA_DIRS environment
-  variable if available.
-
-  By default all platforms will have the resource directory
-  \c{:\icons} as a fallback. You can use "rcc -project" to generate a
-  resource file from your icon theme.
-
-  \sa setThemeSearchPaths(), fromTheme(), setThemeName()
-*/
-QStringList QIcon::themeSearchPaths()
-{
-    return QIconLoader::instance()->themeSearchPaths();
-}
-
-/*!
-    \since 4.6
-
-    Sets the current icon theme to \a name.
-
-    The \a name should correspond to a directory name in the
-    themeSearchPath() containing an index.theme
-    file describing it's contents.
-
-    \sa themeSearchPaths(), themeName()
-*/
-void QIcon::setThemeName(const QString &name)
-{
-    QIconLoader::instance()->setThemeName(name);
-}
-
-/*!
-    \since 4.6
-
-    Returns the name of the current icon theme.
-
-    On X11, the current icon theme depends on your desktop
-    settings. On other platforms it is not set by default.
-
-    \sa setThemeName(), themeSearchPaths(), fromTheme(),
-    hasThemeIcon()
-*/
-QString QIcon::themeName()
-{
-    return QIconLoader::instance()->themeName();
-}
-
-/*!
-    \since 4.6
-
-    Returns the QIcon corresponding to \a name in the current
-    icon theme. If no such icon is found in the current theme
-    \a fallback is returned instead.
-
-    The latest version of the freedesktop icon specification and naming
-    specification can be obtained here:
-
-    \list
-    \li \l{http://standards.freedesktop.org/icon-theme-spec/icon-theme-spec-latest.html}
-    \li \l{http://standards.freedesktop.org/icon-naming-spec/icon-naming-spec-latest.html}
-    \endlist
-
-    To fetch an icon from the current icon theme:
-
-    \snippet code/src_gui_image_qicon.cpp 3
-
-    Or if you want to provide a guaranteed fallback for platforms that
-    do not support theme icons, you can use the second argument:
-
-    \snippet code/src_gui_image_qicon.cpp 4
-
-    \note By default, only X11 will support themed icons. In order to
-    use themed icons on Mac and Windows, you will have to bundle a
-    compliant theme in one of your themeSearchPaths() and set the
-    appropriate themeName().
-
-    \sa themeName(), setThemeName(), themeSearchPaths()
-*/
-QIcon QIcon::fromTheme(const QString &name, const QIcon &fallback)
-{
-    QIcon icon;
-
-    if (qtIconCache()->contains(name)) {
-        icon = *qtIconCache()->object(name);
-    } else {
-        QIcon *cachedIcon  = new QIcon(new QIconLoaderEngine(name));
-        qtIconCache()->insert(name, cachedIcon);
-        icon = *cachedIcon;
-    }
-
-    // Note the qapp check is to allow lazy loading of static icons
-    // Supporting fallbacks will not work for this case.
-    if (qApp && icon.availableSizes().isEmpty())
-        return fallback;
-
-    return icon;
-}
-
-/*!
-    \since 4.6
-
-    Returns true if there is an icon available for \a name in the
-    current icon theme, otherwise returns false.
-
-    \sa themeSearchPaths(), fromTheme(), setThemeName()
-*/
-bool QIcon::hasThemeIcon(const QString &name)
-{
-    QIcon icon = fromTheme(name);
-
-    return !icon.isNull();
-}
-
-
-/*****************************************************************************
-  QIcon stream functions
- *****************************************************************************/
-#if !defined(QT_NO_DATASTREAM)
-/*!
-    \fn QDataStream &operator<<(QDataStream &stream, const QIcon &icon)
-    \relates QIcon
-    \since 4.2
-
-    Writes the given \a icon to the given \a stream as a PNG
-    image. If the icon contains more than one image, all images will
-    be written to the stream. Note that writing the stream to a file
-    will not produce a valid image file.
-*/
-
-QDataStream &operator<<(QDataStream &s, const QIcon &icon)
-{
-    if (s.version() >= QDataStream::Qt_4_3) {
-        if (icon.isNull()) {
-            s << QString();
-        } else {
-            s << icon.d->engine->key();
-            icon.d->engine->write(s);
-        }
-    } else if (s.version() == QDataStream::Qt_4_2) {
-        if (icon.isNull()) {
-            s << 0;
-        } else {
-            QPixmapIconEngine *engine = static_cast<QPixmapIconEngine *>(icon.d->engine);
-            int num_entries = engine->pixmaps.size();
-            s << num_entries;
-            for (int i=0; i < num_entries; ++i) {
-                s << engine->pixmaps.at(i).pixmap;
-                s << engine->pixmaps.at(i).fileName;
-                s << engine->pixmaps.at(i).size;
-                s << (uint) engine->pixmaps.at(i).mode;
-                s << (uint) engine->pixmaps.at(i).state;
-            }
-        }
-    } else {
-        s << QPixmap(icon.pixmap(22,22));
-    }
-    return s;
-}
-
-/*!
-    \fn QDataStream &operator>>(QDataStream &stream, QIcon &icon)
-    \relates QIcon
-    \since 4.2
-
-    Reads an image, or a set of images, from the given \a stream into
-    the given \a icon.
-*/
-
-QDataStream &operator>>(QDataStream &s, QIcon &icon)
-{
-    if (s.version() >= QDataStream::Qt_4_3) {
-        icon = QIcon();
-        QString key;
-        s >> key;
-        if (key == QLatin1String("QPixmapIconEngine")) {
-            icon.d = new QIconPrivate;
-            QIconEngine *engine = new QPixmapIconEngine;
-            icon.d->engine = engine;
-            engine->read(s);
-        } else if (key == QLatin1String("QIconLoaderEngine")) {
-            icon.d = new QIconPrivate;
-            QIconEngine *engine = new QIconLoaderEngine();
-            icon.d->engine = engine;
-            engine->read(s);
-#if !defined (QT_NO_LIBRARY) && !defined(QT_NO_SETTINGS)
-        } else {
-            const int index = loader()->indexOf(key);
-            if (index != -1) {
-                if (QIconEngineFactoryInterface *factory = qobject_cast<QIconEngineFactoryInterface*>(loader()->instance(index))) {
-                    if (QIconEngine *engine= factory->create()) {
-                        icon.d = new QIconPrivate;
-                        icon.d->engine = engine;
-                        engine->read(s);
-                    } // factory
-                } // instance
-            } // index
-#endif
-        }
-    } else if (s.version() == QDataStream::Qt_4_2) {
-        icon = QIcon();
-        int num_entries;
-        QPixmap pm;
-        QString fileName;
-        QSize sz;
-        uint mode;
-        uint state;
-
-        s >> num_entries;
-        for (int i=0; i < num_entries; ++i) {
-            s >> pm;
-            s >> fileName;
-            s >> sz;
-            s >> mode;
-            s >> state;
-            if (pm.isNull())
-                icon.addFile(fileName, sz, QIcon::Mode(mode), QIcon::State(state));
-            else
-                icon.addPixmap(pm, QIcon::Mode(mode), QIcon::State(state));
-        }
-    } else {
-        QPixmap pm;
-        s >> pm;
-        icon.addPixmap(pm);
-    }
-    return s;
-}
-
-#endif //QT_NO_DATASTREAM
-
-#ifndef QT_NO_DEBUG_STREAM
-QDebug operator<<(QDebug dbg, const QIcon &i)
-{
-    dbg.nospace() << "QIcon(" << i.name() << ')';
-    return dbg.space();
-}
-#endif
-
-/*!
-    \fn DataPtr &QIcon::data_ptr()
-    \internal
-*/
-
-/*!
-    \typedef QIcon::DataPtr
-    \internal
-*/
-
-QT_END_NAMESPACE
-#endif //QT_NO_ICON
diff --git a/src/widgets/kernel/qicon.h b/src/widgets/kernel/qicon.h
deleted file mode 100644
index c6e07ba..0000000
--- a/src/widgets/kernel/qicon.h
+++ /dev/null
@@ -1,146 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/
-**
-** This file is part of the QtGui module of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:LGPL$
-** GNU Lesser General Public License Usage
-** This file may be used under the terms of the GNU Lesser General Public
-** License version 2.1 as published by the Free Software Foundation and
-** appearing in the file LICENSE.LGPL included in the packaging of this
-** file. Please review the following information to ensure the GNU Lesser
-** General Public License version 2.1 requirements will be met:
-** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
-**
-** In addition, as a special exception, Nokia gives you certain additional
-** rights. These rights are described in the Nokia Qt LGPL Exception
-** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
-**
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU General
-** Public License version 3.0 as published by the Free Software Foundation
-** and appearing in the file LICENSE.GPL included in the packaging of this
-** file. Please review the following information to ensure the GNU General
-** Public License version 3.0 requirements will be met:
-** http://www.gnu.org/copyleft/gpl.html.
-**
-** Other Usage
-** Alternatively, this file may be used in accordance with the terms and
-** conditions contained in a signed written agreement between you and Nokia.
-**
-**
-**
-**
-**
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-#ifndef QICON_H
-#define QICON_H
-
-#include <QtCore/qglobal.h>
-#include <QtCore/qsize.h>
-#include <QtCore/qlist.h>
-#include <QtGui/qpixmap.h>
-
-QT_BEGIN_HEADER
-
-QT_BEGIN_NAMESPACE
-
-
-class QIconPrivate;
-class QIconEngine;
-
-class Q_WIDGETS_EXPORT QIcon
-{
-public:
-    enum Mode { Normal, Disabled, Active, Selected };
-    enum State { On, Off };
-
-    QIcon();
-    QIcon(const QPixmap &pixmap);
-    QIcon(const QIcon &other);
-    explicit QIcon(const QString &fileName); // file or resource name
-    explicit QIcon(QIconEngine *engine);
-    ~QIcon();
-    QIcon &operator=(const QIcon &other);
-#ifdef Q_COMPILER_RVALUE_REFS
-    inline QIcon &operator=(QIcon &&other)
-    { qSwap(d, other.d); return *this; }
-#endif
-    inline void swap(QIcon &other) { qSwap(d, other.d); }
-
-    operator QVariant() const;
-
-    QPixmap pixmap(const QSize &size, Mode mode = Normal, State state = Off) const;
-    inline QPixmap pixmap(int w, int h, Mode mode = Normal, State state = Off) const
-        { return pixmap(QSize(w, h), mode, state); }
-    inline QPixmap pixmap(int extent, Mode mode = Normal, State state = Off) const
-        { return pixmap(QSize(extent, extent), mode, state); }
-
-    QSize actualSize(const QSize &size, Mode mode = Normal, State state = Off) const;
-
-    QString name() const;
-
-    void paint(QPainter *painter, const QRect &rect, Qt::Alignment alignment = Qt::AlignCenter, Mode mode = Normal, State state = Off) const;
-    inline void paint(QPainter *painter, int x, int y, int w, int h, Qt::Alignment alignment = Qt::AlignCenter, Mode mode = Normal, State state = Off) const
-        { paint(painter, QRect(x, y, w, h), alignment, mode, state); }
-
-    bool isNull() const;
-    bool isDetached() const;
-    void detach();
-
-#if QT_DEPRECATED_SINCE(5, 0)
-    QT_DEPRECATED inline int serialNumber() const { return cacheKey() >> 32; }
-#endif
-    qint64 cacheKey() const;
-
-    void addPixmap(const QPixmap &pixmap, Mode mode = Normal, State state = Off);
-    void addFile(const QString &fileName, const QSize &size = QSize(), Mode mode = Normal, State state = Off);
-
-    QList<QSize> availableSizes(Mode mode = Normal, State state = Off) const;
-
-    static QIcon fromTheme(const QString &name, const QIcon &fallback = QIcon());
-    static bool hasThemeIcon(const QString &name);
-
-    static QStringList themeSearchPaths();
-    static void setThemeSearchPaths(const QStringList &searchpath);
-
-    static QString themeName();
-    static void setThemeName(const QString &path);
-
-    Q_DUMMY_COMPARISON_OPERATOR(QIcon)
-
-private:
-    QIconPrivate *d;
-#if !defined(QT_NO_DATASTREAM)
-    friend Q_WIDGETS_EXPORT QDataStream &operator<<(QDataStream &, const QIcon &);
-    friend Q_WIDGETS_EXPORT QDataStream &operator>>(QDataStream &, QIcon &);
-#endif
-
-public:
-    typedef QIconPrivate * DataPtr;
-    inline DataPtr &data_ptr() { return d; }
-};
-
-Q_DECLARE_SHARED(QIcon)
-Q_DECLARE_TYPEINFO(QIcon, Q_MOVABLE_TYPE);
-
-#if !defined(QT_NO_DATASTREAM)
-Q_WIDGETS_EXPORT QDataStream &operator<<(QDataStream &, const QIcon &);
-Q_WIDGETS_EXPORT QDataStream &operator>>(QDataStream &, QIcon &);
-#endif
-
-#ifndef QT_NO_DEBUG_STREAM
-Q_WIDGETS_EXPORT QDebug operator<<(QDebug dbg, const QIcon &);
-#endif
-
-QT_END_NAMESPACE
-
-QT_END_HEADER
-
-#endif // QICON_H
diff --git a/src/widgets/kernel/qicon_p.h b/src/widgets/kernel/qicon_p.h
deleted file mode 100644
index 37c4b7c..0000000
--- a/src/widgets/kernel/qicon_p.h
+++ /dev/null
@@ -1,128 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/
-**
-** This file is part of the QtGui module of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:LGPL$
-** GNU Lesser General Public License Usage
-** This file may be used under the terms of the GNU Lesser General Public
-** License version 2.1 as published by the Free Software Foundation and
-** appearing in the file LICENSE.LGPL included in the packaging of this
-** file. Please review the following information to ensure the GNU Lesser
-** General Public License version 2.1 requirements will be met:
-** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
-**
-** In addition, as a special exception, Nokia gives you certain additional
-** rights. These rights are described in the Nokia Qt LGPL Exception
-** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
-**
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU General
-** Public License version 3.0 as published by the Free Software Foundation
-** and appearing in the file LICENSE.GPL included in the packaging of this
-** file. Please review the following information to ensure the GNU General
-** Public License version 3.0 requirements will be met:
-** http://www.gnu.org/copyleft/gpl.html.
-**
-** Other Usage
-** Alternatively, this file may be used in accordance with the terms and
-** conditions contained in a signed written agreement between you and Nokia.
-**
-**
-**
-**
-**
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-#ifndef QICON_P_H
-#define QICON_P_H
-
-//
-//  W A R N I N G
-//  -------------
-//
-// This file is not part of the Qt API.  It exists purely as an
-// implementation detail.  This header file may change from version to
-// version without notice, or even be removed.
-//
-// We mean it.
-//
-
-#include <QtCore/qglobal.h>
-#include <QtCore/qsize.h>
-#include <QtCore/qlist.h>
-#include <QtGui/qpixmap.h>
-#include <QtWidgets/qicon.h>
-#include <QtWidgets/qiconengine.h>
-
-#ifndef QT_NO_ICON
-QT_BEGIN_NAMESPACE
-
-class QIconPrivate
-{
-public:
-    QIconPrivate();
-
-    ~QIconPrivate() {
-        delete engine;
-    }
-
-    QIconEngine *engine;
-
-    QAtomicInt ref;
-    int serialNum;
-    int detach_no;
-};
-
-
-struct QPixmapIconEngineEntry
-{
-    QPixmapIconEngineEntry():mode(QIcon::Normal), state(QIcon::Off){}
-    QPixmapIconEngineEntry(const QPixmap &pm, QIcon::Mode m = QIcon::Normal, QIcon::State s = QIcon::Off)
-        :pixmap(pm), size(pm.size()), mode(m), state(s){}
-    QPixmapIconEngineEntry(const QString &file, const QSize &sz = QSize(), QIcon::Mode m = QIcon::Normal, QIcon::State s = QIcon::Off)
-        :fileName(file), size(sz), mode(m), state(s){}
-    QPixmap pixmap;
-    QString fileName;
-    QSize size;
-    QIcon::Mode mode;
-    QIcon::State state;
-    bool isNull() const {return (fileName.isEmpty() && pixmap.isNull()); }
-};
-
-
-
-class QPixmapIconEngine : public QIconEngine {
-public:
-    QPixmapIconEngine();
-    QPixmapIconEngine(const QPixmapIconEngine &);
-    ~QPixmapIconEngine();
-    void paint(QPainter *painter, const QRect &rect, QIcon::Mode mode, QIcon::State state);
-    QPixmap pixmap(const QSize &size, QIcon::Mode mode, QIcon::State state);
-    QPixmapIconEngineEntry *bestMatch(const QSize &size, QIcon::Mode mode, QIcon::State state, bool sizeOnly);
-    QSize actualSize(const QSize &size, QIcon::Mode mode, QIcon::State state);
-    void addPixmap(const QPixmap &pixmap, QIcon::Mode mode, QIcon::State state);
-    void addFile(const QString &fileName, const QSize &size, QIcon::Mode mode, QIcon::State state);
-
-    QString key() const;
-    QIconEngine *clone() const;
-    bool read(QDataStream &in);
-    bool write(QDataStream &out) const;
-    void virtual_hook(int id, void *data);
-
-private:
-    QPixmapIconEngineEntry *tryMatch(const QSize &size, QIcon::Mode mode, QIcon::State state);
-    QVector<QPixmapIconEngineEntry> pixmaps;
-
-    friend QDataStream &operator<<(QDataStream &s, const QIcon &icon);
-    friend class QIconThemeEngine;
-};
-
-QT_END_NAMESPACE
-#endif //QT_NO_ICON
-#endif // QICON_P_H
diff --git a/src/widgets/kernel/qiconengine.cpp b/src/widgets/kernel/qiconengine.cpp
deleted file mode 100644
index 0a2d92e..0000000
--- a/src/widgets/kernel/qiconengine.cpp
+++ /dev/null
@@ -1,287 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/
-**
-** This file is part of the QtGui module of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:LGPL$
-** GNU Lesser General Public License Usage
-** This file may be used under the terms of the GNU Lesser General Public
-** License version 2.1 as published by the Free Software Foundation and
-** appearing in the file LICENSE.LGPL included in the packaging of this
-** file. Please review the following information to ensure the GNU Lesser
-** General Public License version 2.1 requirements will be met:
-** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
-**
-** In addition, as a special exception, Nokia gives you certain additional
-** rights. These rights are described in the Nokia Qt LGPL Exception
-** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
-**
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU General
-** Public License version 3.0 as published by the Free Software Foundation
-** and appearing in the file LICENSE.GPL included in the packaging of this
-** file. Please review the following information to ensure the GNU General
-** Public License version 3.0 requirements will be met:
-** http://www.gnu.org/copyleft/gpl.html.
-**
-** Other Usage
-** Alternatively, this file may be used in accordance with the terms and
-** conditions contained in a signed written agreement between you and Nokia.
-**
-**
-**
-**
-**
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-#include "qiconengine.h"
-#include "qpainter.h"
-
-QT_BEGIN_NAMESPACE
-
-/*!
-  \class QIconEngine
-
-  \brief The QIconEngine class provides an abstract base class for QIcon renderers.
-
-  \ingroup painting
-  \inmodule QtWidgets
-
-  An icon engine provides the rendering functions for a QIcon. Each icon has a
-  corresponding icon engine that is responsible for drawing the icon with a
-  requested size, mode and state.
-
-  The icon is rendered by the paint() function, and the icon can additionally be
-  obtained as a pixmap with the pixmap() function (the default implementation
-  simply uses paint() to achieve this). The addPixmap() function can be used to
-  add new pixmaps to the icon engine, and is used by QIcon to add specialized
-  custom pixmaps.
-
-  The paint(), pixmap(), and addPixmap() functions are all virtual, and can
-  therefore be reimplemented in subclasses of QIconEngine.
-
-  \sa QIconEnginePlugin
-
-*/
-
-/*!
-  \fn virtual void QIconEngine::paint(QPainter *painter, const QRect &rect, QIcon::Mode mode, QIcon::State state) = 0;
-
-  Uses the given \a painter to paint the icon with the required \a mode and
-  \a state into the rectangle \a rect.
-*/
-
-/*!  Returns the actual size of the icon the engine provides for the
-  requested \a size, \a mode and \a state. The default implementation
-  returns the given \a size.
- */
-QSize QIconEngine::actualSize(const QSize &size, QIcon::Mode /*mode*/, QIcon::State /*state*/)
-{
-    return size;
-}
-
-
-/*!
-  Destroys the icon engine.
- */
-QIconEngine::~QIconEngine()
-{
-}
-
-
-/*!
-  Returns the icon as a pixmap with the required \a size, \a mode,
-  and \a state. The default implementation creates a new pixmap and
-  calls paint() to fill it.
-*/
-QPixmap QIconEngine::pixmap(const QSize &size, QIcon::Mode mode, QIcon::State state)
-{
-    QPixmap pm(size);
-    {
-        QPainter p(&pm);
-        paint(&p, QRect(QPoint(0,0),size), mode, state);
-    }
-    return pm;
-}
-
-/*!
-  Called by QIcon::addPixmap(). Adds a specialized \a pixmap for the given
-  \a mode and \a state. The default pixmap-based engine stores any supplied
-  pixmaps, and it uses them instead of scaled pixmaps if the size of a pixmap
-  matches the size of icon requested. Custom icon engines that implement
-  scalable vector formats are free to ignores any extra pixmaps.
- */
-void QIconEngine::addPixmap(const QPixmap &/*pixmap*/, QIcon::Mode /*mode*/, QIcon::State /*state*/)
-{
-}
-
-
-/*!  Called by QIcon::addFile(). Adds a specialized pixmap from the
-  file with the given \a fileName, \a size, \a mode and \a state. The
-  default pixmap-based engine stores any supplied file names, and it
-  loads the pixmaps on demand instead of using scaled pixmaps if the
-  size of a pixmap matches the size of icon requested. Custom icon
-  engines that implement scalable vector formats are free to ignores
-  any extra files.
- */
-void QIconEngine::addFile(const QString &/*fileName*/, const QSize &/*size*/, QIcon::Mode /*mode*/, QIcon::State /*state*/)
-{
-}
-
-
-/*!
-    \enum QIconEngine::IconEngineHook
-    \since 4.5
-
-    These enum values are used for virtual_hook() to allow additional
-    queries to icon engine without breaking binary compatibility.
-
-    \value AvailableSizesHook Allows to query the sizes of the
-    contained pixmaps for pixmap-based engines. The \a data argument
-    of the virtual_hook() function is a AvailableSizesArgument pointer
-    that should be filled with icon sizes. Engines that work in terms
-    of a scalable, vectorial format normally return an empty list.
-
-    \value IconNameHook Allows to query the name used to create the
-    icon, for example when instantiating an icon using
-    QIcon::fromTheme().
-
-    \sa virtual_hook()
- */
-
-/*!
-    \class QIconEngine::AvailableSizesArgument
-    \since 4.5
-
-    \inmodule QtWidgets
-
-    This struct represents arguments to virtual_hook() function when
-    \a id parameter is QIconEngine::AvailableSizesHook.
-
-    \sa virtual_hook(), QIconEngine::IconEngineHook
- */
-
-/*!
-    \variable QIconEngine::AvailableSizesArgument::mode
-    \brief the requested mode of an image.
-
-    \sa QIcon::Mode
-*/
-
-/*!
-    \variable QIconEngine::AvailableSizesArgument::state
-    \brief the requested state of an image.
-
-    \sa QIcon::State
-*/
-
-/*!
-    \variable QIconEngine::AvailableSizesArgument::sizes
-
-    \brief image sizes that are available with specified \a mode and
-    \a state. This is an output parameter and is filled after call to
-    virtual_hook(). Engines that work in terms of a scalable,
-    vectorial format normally return an empty list.
-*/
-
-
-/*!
-    Returns a key that identifies this icon engine.
- */
-QString QIconEngine::key() const
-{
-    return QString();
-}
-
-/*! \fn QIconEngine *QIconEngine::clone() const
-
-    Reimplement this method to return a clone of this icon engine.
- */
-
-/*!
-    Reads icon engine contents from the QDataStream \a in. Returns
-    true if the contents were read; otherwise returns false.
-
-    QIconEngine's default implementation always return false.
- */
-bool QIconEngine::read(QDataStream &)
-{
-    return false;
-}
-
-/*!
-    Writes the contents of this engine to the QDataStream \a out.
-    Returns true if the contents were written; otherwise returns false.
-
-    QIconEngine's default implementation always return false.
- */
-bool QIconEngine::write(QDataStream &) const
-{
-    return false;
-}
-
-/*!
-    \since 4.5
-
-    Additional method to allow extending QIconEngine without
-    adding new virtual methods (and without breaking binary compatibility).
-    The actual action and format of \a data depends on \a id argument
-    which is in fact a constant from IconEngineHook enum.
-
-    \sa IconEngineHook
-*/
-void QIconEngine::virtual_hook(int id, void *data)
-{
-    switch (id) {
-    case QIconEngine::AvailableSizesHook: {
-        QIconEngine::AvailableSizesArgument &arg =
-            *reinterpret_cast<QIconEngine::AvailableSizesArgument*>(data);
-        arg.sizes.clear();
-        break;
-    }
-    default:
-        break;
-    }
-}
-
-/*!
-    \since 4.5
-
-    Returns sizes of all images that are contained in the engine for the
-    specific \a mode and \a state.
-
-    \note This is a helper method and the actual work is done by
-    virtual_hook() method, hence this method depends on icon engine support
-    and may not work with all icon engines.
- */
-QList<QSize> QIconEngine::availableSizes(QIcon::Mode mode, QIcon::State state) const
-{
-    AvailableSizesArgument arg;
-    arg.mode = mode;
-    arg.state = state;
-    const_cast<QIconEngine *>(this)->virtual_hook(QIconEngine::AvailableSizesHook, reinterpret_cast<void*>(&arg));
-    return arg.sizes;
-}
-
-/*!
-    \since 4.7
-
-    Returns the name used to create the engine, if available.
-
-    \note This is a helper method and the actual work is done by
-    virtual_hook() method, hence this method depends on icon engine support
-    and may not work with all icon engines.
- */
-QString QIconEngine::iconName() const
-{
-    QString name;
-    const_cast<QIconEngine *>(this)->virtual_hook(QIconEngine::IconNameHook, reinterpret_cast<void*>(&name));
-    return name;
-}
-
-QT_END_NAMESPACE
diff --git a/src/widgets/kernel/qiconengine.h b/src/widgets/kernel/qiconengine.h
deleted file mode 100644
index acadef9..0000000
--- a/src/widgets/kernel/qiconengine.h
+++ /dev/null
@@ -1,95 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/
-**
-** This file is part of the QtGui module of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:LGPL$
-** GNU Lesser General Public License Usage
-** This file may be used under the terms of the GNU Lesser General Public
-** License version 2.1 as published by the Free Software Foundation and
-** appearing in the file LICENSE.LGPL included in the packaging of this
-** file. Please review the following information to ensure the GNU Lesser
-** General Public License version 2.1 requirements will be met:
-** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
-**
-** In addition, as a special exception, Nokia gives you certain additional
-** rights. These rights are described in the Nokia Qt LGPL Exception
-** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
-**
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU General
-** Public License version 3.0 as published by the Free Software Foundation
-** and appearing in the file LICENSE.GPL included in the packaging of this
-** file. Please review the following information to ensure the GNU General
-** Public License version 3.0 requirements will be met:
-** http://www.gnu.org/copyleft/gpl.html.
-**
-** Other Usage
-** Alternatively, this file may be used in accordance with the terms and
-** conditions contained in a signed written agreement between you and Nokia.
-**
-**
-**
-**
-**
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-#ifndef QICONENGINE_H
-#define QICONENGINE_H
-
-#include <QtCore/qglobal.h>
-#include <QtCore/qlist.h>
-#include <QtWidgets/qicon.h>
-
-QT_BEGIN_HEADER
-
-QT_BEGIN_NAMESPACE
-
-
-class Q_WIDGETS_EXPORT QIconEngine
-{
-public:
-    virtual ~QIconEngine();
-    virtual void paint(QPainter *painter, const QRect &rect, QIcon::Mode mode, QIcon::State state) = 0;
-    virtual QSize actualSize(const QSize &size, QIcon::Mode mode, QIcon::State state);
-    virtual QPixmap pixmap(const QSize &size, QIcon::Mode mode, QIcon::State state);
-
-    virtual void addPixmap(const QPixmap &pixmap, QIcon::Mode mode, QIcon::State state);
-    virtual void addFile(const QString &fileName, const QSize &size, QIcon::Mode mode, QIcon::State state);
-
-    virtual QString key() const;
-    virtual QIconEngine *clone() const = 0;
-    virtual bool read(QDataStream &in);
-    virtual bool write(QDataStream &out) const;
-
-    enum IconEngineHook { AvailableSizesHook = 1, IconNameHook };
-
-    struct AvailableSizesArgument
-    {
-        QIcon::Mode mode;
-        QIcon::State state;
-        QList<QSize> sizes;
-    };
-
-    virtual QList<QSize> availableSizes(QIcon::Mode mode = QIcon::Normal,
-                                    QIcon::State state = QIcon::Off) const;
-
-    virtual QString iconName() const;
-
-    virtual void virtual_hook(int id, void *data);
-};
-
-#if QT_DEPRECATED_SINCE(5, 0)
-typedef QIconEngine QIconEngineV2;
-#endif
-
-QT_END_NAMESPACE
-
-QT_END_HEADER
-
-#endif // QICONENGINE_H
diff --git a/src/widgets/kernel/qiconengineplugin.cpp b/src/widgets/kernel/qiconengineplugin.cpp
deleted file mode 100644
index 26c9e78..0000000
--- a/src/widgets/kernel/qiconengineplugin.cpp
+++ /dev/null
@@ -1,107 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/
-**
-** This file is part of the QtGui module of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:LGPL$
-** GNU Lesser General Public License Usage
-** This file may be used under the terms of the GNU Lesser General Public
-** License version 2.1 as published by the Free Software Foundation and
-** appearing in the file LICENSE.LGPL included in the packaging of this
-** file. Please review the following information to ensure the GNU Lesser
-** General Public License version 2.1 requirements will be met:
-** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
-**
-** In addition, as a special exception, Nokia gives you certain additional
-** rights. These rights are described in the Nokia Qt LGPL Exception
-** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
-**
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU General
-** Public License version 3.0 as published by the Free Software Foundation
-** and appearing in the file LICENSE.GPL included in the packaging of this
-** file. Please review the following information to ensure the GNU General
-** Public License version 3.0 requirements will be met:
-** http://www.gnu.org/copyleft/gpl.html.
-**
-** Other Usage
-** Alternatively, this file may be used in accordance with the terms and
-** conditions contained in a signed written agreement between you and Nokia.
-**
-**
-**
-**
-**
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-#include "qiconengineplugin.h"
-#include "qiconengine.h"
-
-QT_BEGIN_NAMESPACE
-
-/*!
-    \class QIconEnginePlugin
-    \brief The QIconEnginePlugin class provides an abstract base for custom QIconEngine plugins.
-
-    \ingroup plugins
-    \inmodule QtWidgets
-
-    \b {Use QIconEnginePluginV2 instead.}
-
-    The icon engine plugin is a simple plugin interface that makes it easy to
-    create custom icon engines that can be loaded dynamically into applications
-    through QIcon. QIcon uses the file or resource name's suffix to determine
-    what icon engine to use.
-
-    Writing a icon engine plugin is achieved by subclassing this base class,
-    reimplementing the pure virtual functions keys() and create(), and
-    exporting the class with the Q_EXPORT_PLUGIN2() macro.
-
-    \sa {How to Create Qt Plugins}
-*/
-
-/*!
-    \fn QStringList QIconEnginePlugin::keys() const
-
-    Returns a list of icon engine keys that this plugin supports. The keys correspond
-    to the suffix of the file or resource name used when the plugin was created.
-    Keys are case insensitive.
-
-    \sa create()
-*/
-
-/*!
-    \fn QIconEngine* QIconEnginePlugin::create(const QString& filename)
-
-    Creates and returns a QIconEngine object for the icon with the given
-    \a filename.
-
-    \sa keys()
-*/
-
-/*!
-    Constructs a icon engine plugin with the given \a parent. This is invoked
-    automatically by the Q_EXPORT_PLUGIN2() macro.
-*/
-QIconEnginePlugin::QIconEnginePlugin(QObject *parent)
-    : QObject(parent)
-{
-}
-
-/*!
-    Destroys the icon engine plugin.
-
-    You never have to call this explicitly. Qt destroys a plugin
-    automatically when it is no longer used.
-*/
-QIconEnginePlugin::~QIconEnginePlugin()
-{
-}
-
-
-QT_END_NAMESPACE
diff --git a/src/widgets/kernel/qiconengineplugin.h b/src/widgets/kernel/qiconengineplugin.h
deleted file mode 100644
index a30c547..0000000
--- a/src/widgets/kernel/qiconengineplugin.h
+++ /dev/null
@@ -1,80 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/
-**
-** This file is part of the QtGui module of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:LGPL$
-** GNU Lesser General Public License Usage
-** This file may be used under the terms of the GNU Lesser General Public
-** License version 2.1 as published by the Free Software Foundation and
-** appearing in the file LICENSE.LGPL included in the packaging of this
-** file. Please review the following information to ensure the GNU Lesser
-** General Public License version 2.1 requirements will be met:
-** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
-**
-** In addition, as a special exception, Nokia gives you certain additional
-** rights. These rights are described in the Nokia Qt LGPL Exception
-** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
-**
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU General
-** Public License version 3.0 as published by the Free Software Foundation
-** and appearing in the file LICENSE.GPL included in the packaging of this
-** file. Please review the following information to ensure the GNU General
-** Public License version 3.0 requirements will be met:
-** http://www.gnu.org/copyleft/gpl.html.
-**
-** Other Usage
-** Alternatively, this file may be used in accordance with the terms and
-** conditions contained in a signed written agreement between you and Nokia.
-**
-**
-**
-**
-**
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-#ifndef QICONENGINEPLUGIN_H
-#define QICONENGINEPLUGIN_H
-
-#include <QtCore/qplugin.h>
-#include <QtCore/qfactoryinterface.h>
-
-QT_BEGIN_HEADER
-
-QT_BEGIN_NAMESPACE
-
-
-class QIconEngine;
-
-struct Q_WIDGETS_EXPORT QIconEngineFactoryInterface : public QFactoryInterface
-{
-    virtual QIconEngine *create(const QString &filename = QString()) = 0;
-};
-
-#define QIconEngineFactoryInterface_iid \
-    "org.qt-project.Qt.QIconEngineFactoryInterface"
-Q_DECLARE_INTERFACE(QIconEngineFactoryInterface, QIconEngineFactoryInterface_iid)
-
-class Q_WIDGETS_EXPORT QIconEnginePlugin : public QObject, public QIconEngineFactoryInterface
-{
-    Q_OBJECT
-    Q_INTERFACES(QIconEngineFactoryInterface:QFactoryInterface)
-public:
-    QIconEnginePlugin(QObject *parent = 0);
-    ~QIconEnginePlugin();
-
-    virtual QStringList keys() const = 0;
-    virtual QIconEngine *create(const QString &filename = QString()) = 0;
-};
-
-QT_END_NAMESPACE
-
-QT_END_HEADER
-
-#endif // QICONENGINEPLUGIN_H
diff --git a/src/widgets/kernel/qiconloader.cpp b/src/widgets/kernel/qiconloader.cpp
deleted file mode 100644
index acbf7c1..0000000
--- a/src/widgets/kernel/qiconloader.cpp
+++ /dev/null
@@ -1,586 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/
-**
-** This file is part of the QtGui module of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:LGPL$
-** GNU Lesser General Public License Usage
-** This file may be used under the terms of the GNU Lesser General Public
-** License version 2.1 as published by the Free Software Foundation and
-** appearing in the file LICENSE.LGPL included in the packaging of this
-** file. Please review the following information to ensure the GNU Lesser
-** General Public License version 2.1 requirements will be met:
-** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
-**
-** In addition, as a special exception, Nokia gives you certain additional
-** rights. These rights are described in the Nokia Qt LGPL Exception
-** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
-**
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU General
-** Public License version 3.0 as published by the Free Software Foundation
-** and appearing in the file LICENSE.GPL included in the packaging of this
-** file. Please review the following information to ensure the GNU General
-** Public License version 3.0 requirements will be met:
-** http://www.gnu.org/copyleft/gpl.html.
-**
-** Other Usage
-** Alternatively, this file may be used in accordance with the terms and
-** conditions contained in a signed written agreement between you and Nokia.
-**
-**
-**
-**
-**
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-#ifndef QT_NO_ICON
-#include <private/qiconloader_p.h>
-
-#include <private/qguiapplication_p.h>
-#include <private/qicon_p.h>
-#include <private/qguiapplication_p.h>
-
-#include <QtWidgets/QApplication>
-#include <QtWidgets/QIconEnginePlugin>
-#include <QtGui/QPixmapCache>
-#include <qpa/qplatformtheme.h>
-#include <QtWidgets/QIconEngine>
-#include <QtWidgets/QStyleOption>
-#include <QtCore/QList>
-#include <QtCore/QHash>
-#include <QtCore/QDir>
-#include <QtCore/QSettings>
-#include <QtGui/QPainter>
-
-#ifdef Q_WS_MAC
-#include <private/qt_cocoa_helpers_mac_p.h>
-#endif
-
-#include <private/qhexstring_p.h>
-
-QT_BEGIN_NAMESPACE
-
-Q_GLOBAL_STATIC(QIconLoader, iconLoaderInstance)
-
-/* Theme to use in last resort, if the theme does not have the icon, neither the parents  */
-static QString fallbackTheme()
-{
-    if (const QPlatformTheme *theme = QGuiApplicationPrivate::platformTheme()) {
-        const QVariant themeHint = theme->themeHint(QPlatformTheme::SystemIconThemeName);
-        if (themeHint.isValid())
-            return themeHint.toString();
-    }
-    return QString();
-}
-
-QIconLoader::QIconLoader() :
-        m_themeKey(1), m_supportsSvg(false), m_initialized(false)
-{
-}
-
-// We lazily initialize the loader to make static icons
-// work. Though we do not officially support this.
-
-static inline QString systemThemeName()
-{
-    if (const QPlatformTheme *theme = QGuiApplicationPrivate::platformTheme()) {
-        const QVariant themeHint = theme->themeHint(QPlatformTheme::SystemIconThemeName);
-        if (themeHint.isValid())
-            return themeHint.toString();
-    }
-    return QString();
-}
-
-static inline QStringList systemIconSearchPaths()
-{
-    if (const QPlatformTheme *theme = QGuiApplicationPrivate::platformTheme()) {
-        const QVariant themeHint = theme->themeHint(QPlatformTheme::IconThemeSearchPaths);
-        if (themeHint.isValid())
-            return themeHint.toStringList();
-    }
-    return QStringList();
-}
-
-void QIconLoader::ensureInitialized()
-{
-    if (!m_initialized) {
-        m_initialized = true;
-
-        Q_ASSERT(qApp);
-
-        m_systemTheme = systemThemeName();
-
-        if (m_systemTheme.isEmpty())
-            m_systemTheme = fallbackTheme();
-#ifndef QT_NO_LIBRARY
-        QFactoryLoader iconFactoryLoader(QIconEngineFactoryInterface_iid,
-                                         QLatin1String("/iconengines"),
-                                         Qt::CaseInsensitive);
-        if (iconFactoryLoader.keyMap().key(QLatin1String("svg"), -1) != -1)
-            m_supportsSvg = true;
-#endif //QT_NO_LIBRARY
-    }
-}
-
-QIconLoader *QIconLoader::instance()
-{
-   return iconLoaderInstance();
-}
-
-// Queries the system theme and invalidates existing
-// icons if the theme has changed.
-void QIconLoader::updateSystemTheme()
-{
-    // Only change if this is not explicitly set by the user
-    if (m_userTheme.isEmpty()) {
-        QString theme = systemThemeName();
-        if (theme.isEmpty())
-            theme = fallbackTheme();
-        if (theme != m_systemTheme) {
-            m_systemTheme = theme;
-            invalidateKey();
-        }
-    }
-}
-
-void QIconLoader::setThemeName(const QString &themeName)
-{
-    m_userTheme = themeName;
-    invalidateKey();
-}
-
-void QIconLoader::setThemeSearchPath(const QStringList &searchPaths)
-{
-    m_iconDirs = searchPaths;
-    themeList.clear();
-    invalidateKey();
-}
-
-QStringList QIconLoader::themeSearchPaths() const
-{
-    if (m_iconDirs.isEmpty()) {
-        m_iconDirs = systemIconSearchPaths();
-        // Always add resource directory as search path
-        m_iconDirs.append(QLatin1String(":/icons"));
-    }
-    return m_iconDirs;
-}
-
-QIconTheme::QIconTheme(const QString &themeName)
-        : m_valid(false)
-{
-    QFile themeIndex;
-
-    QList <QIconDirInfo> keyList;
-    QStringList iconDirs = QIcon::themeSearchPaths();
-    for ( int i = 0 ; i < iconDirs.size() ; ++i) {
-        QDir iconDir(iconDirs[i]);
-        QString themeDir = iconDir.path() + QLatin1Char('/') + themeName;
-        themeIndex.setFileName(themeDir + QLatin1String("/index.theme"));
-        if (themeIndex.exists()) {
-            m_contentDir = themeDir;
-            m_valid = true;
-            break;
-        }
-    }
-#ifndef QT_NO_SETTINGS
-    if (themeIndex.exists()) {
-        const QSettings indexReader(themeIndex.fileName(), QSettings::IniFormat);
-        QStringListIterator keyIterator(indexReader.allKeys());
-        while (keyIterator.hasNext()) {
-
-            const QString key = keyIterator.next();
-            if (key.endsWith(QLatin1String("/Size"))) {
-                // Note the QSettings ini-format does not accept
-                // slashes in key names, hence we have to cheat
-                if (int size = indexReader.value(key).toInt()) {
-                    QString directoryKey = key.left(key.size() - 5);
-                    QIconDirInfo dirInfo(directoryKey);
-                    dirInfo.size = size;
-                    QString type = indexReader.value(directoryKey +
-                                                     QLatin1String("/Type")
-                                                     ).toString();
-
-                    if (type == QLatin1String("Fixed"))
-                        dirInfo.type = QIconDirInfo::Fixed;
-                    else if (type == QLatin1String("Scalable"))
-                        dirInfo.type = QIconDirInfo::Scalable;
-                    else
-                        dirInfo.type = QIconDirInfo::Threshold;
-
-                    dirInfo.threshold = indexReader.value(directoryKey +
-                                                        QLatin1String("/Threshold"),
-                                                        2).toInt();
-
-                    dirInfo.minSize = indexReader.value(directoryKey +
-                                                         QLatin1String("/MinSize"),
-                                                         size).toInt();
-
-                    dirInfo.maxSize = indexReader.value(directoryKey +
-                                                        QLatin1String("/MaxSize"),
-                                                        size).toInt();
-                    m_keyList.append(dirInfo);
-                }
-            }
-        }
-
-        // Parent themes provide fallbacks for missing icons
-        m_parents = indexReader.value(
-                QLatin1String("Icon Theme/Inherits")).toStringList();
-
-        // Ensure a default platform fallback for all themes
-        if (m_parents.isEmpty()) {
-            const QString fallback = fallbackTheme();
-            if (!fallback.isEmpty())
-                m_parents.append(fallback);
-        }
-
-        // Ensure that all themes fall back to hicolor
-        if (!m_parents.contains(QLatin1String("hicolor")))
-            m_parents.append(QLatin1String("hicolor"));
-    }
-#endif //QT_NO_SETTINGS
-}
-
-QThemeIconEntries QIconLoader::findIconHelper(const QString &themeName,
-                                 const QString &iconName,
-                                 QStringList &visited) const
-{
-    QThemeIconEntries entries;
-    Q_ASSERT(!themeName.isEmpty());
-
-    QPixmap pixmap;
-
-    // Used to protect against potential recursions
-    visited << themeName;
-
-    QIconTheme theme = themeList.value(themeName);
-    if (!theme.isValid()) {
-        theme = QIconTheme(themeName);
-        if (!theme.isValid())
-            theme = QIconTheme(fallbackTheme());
-
-        themeList.insert(themeName, theme);
-    }
-
-    QString contentDir = theme.contentDir() + QLatin1Char('/');
-    QList<QIconDirInfo> subDirs = theme.keyList();
-
-    const QString svgext(QLatin1String(".svg"));
-    const QString pngext(QLatin1String(".png"));
-
-    // Add all relevant files
-    for (int i = 0; i < subDirs.size() ; ++i) {
-        const QIconDirInfo &dirInfo = subDirs.at(i);
-        QString subdir = dirInfo.path;
-        QDir currentDir(contentDir + subdir);
-        if (currentDir.exists(iconName + pngext)) {
-            PixmapEntry *iconEntry = new PixmapEntry;
-            iconEntry->dir = dirInfo;
-            iconEntry->filename = currentDir.filePath(iconName + pngext);
-            // Notice we ensure that pixmap entries always come before
-            // scalable to preserve search order afterwards
-            entries.prepend(iconEntry);
-        } else if (m_supportsSvg &&
-            currentDir.exists(iconName + svgext)) {
-            ScalableEntry *iconEntry = new ScalableEntry;
-            iconEntry->dir = dirInfo;
-            iconEntry->filename = currentDir.filePath(iconName + svgext);
-            entries.append(iconEntry);
-        }
-    }
-
-    if (entries.isEmpty()) {
-        const QStringList parents = theme.parents();
-        // Search recursively through inherited themes
-        for (int i = 0 ; i < parents.size() ; ++i) {
-
-            const QString parentTheme = parents.at(i).trimmed();
-
-            if (!visited.contains(parentTheme)) // guard against recursion
-                entries = findIconHelper(parentTheme, iconName, visited);
-
-            if (!entries.isEmpty()) // success
-                break;
-        }
-    }
-    return entries;
-}
-
-QThemeIconEntries QIconLoader::loadIcon(const QString &name) const
-{
-    if (!themeName().isEmpty()) {
-        QStringList visited;
-        return findIconHelper(themeName(), name, visited);
-    }
-
-    return QThemeIconEntries();
-}
-
-
-// -------- Icon Loader Engine -------- //
-
-
-QIconLoaderEngine::QIconLoaderEngine(const QString& iconName)
-        : m_iconName(iconName), m_key(0)
-{
-}
-
-QIconLoaderEngine::~QIconLoaderEngine()
-{
-    while (!m_entries.isEmpty())
-        delete m_entries.takeLast();
-    Q_ASSERT(m_entries.size() == 0);
-}
-
-QIconLoaderEngine::QIconLoaderEngine(const QIconLoaderEngine &other)
-        : QIconEngine(other),
-        m_iconName(other.m_iconName),
-        m_key(0)
-{
-}
-
-QIconEngine *QIconLoaderEngine::clone() const
-{
-    return new QIconLoaderEngine(*this);
-}
-
-bool QIconLoaderEngine::read(QDataStream &in) {
-    in >> m_iconName;
-    return true;
-}
-
-bool QIconLoaderEngine::write(QDataStream &out) const
-{
-    out << m_iconName;
-    return true;
-}
-
-bool QIconLoaderEngine::hasIcon() const
-{
-    return !(m_entries.isEmpty());
-}
-
-// Lazily load the icon
-void QIconLoaderEngine::ensureLoaded()
-{
-
-    iconLoaderInstance()->ensureInitialized();
-
-    if (!(iconLoaderInstance()->themeKey() == m_key)) {
-
-        while (!m_entries.isEmpty())
-            delete m_entries.takeLast();
-
-        Q_ASSERT(m_entries.size() == 0);
-        m_entries = iconLoaderInstance()->loadIcon(m_iconName);
-        m_key = iconLoaderInstance()->themeKey();
-    }
-}
-
-void QIconLoaderEngine::paint(QPainter *painter, const QRect &rect,
-                             QIcon::Mode mode, QIcon::State state)
-{
-    QSize pixmapSize = rect.size();
-#if defined(Q_WS_MAC)
-    pixmapSize *= qt_mac_get_scalefactor();
-#endif
-    painter->drawPixmap(rect, pixmap(pixmapSize, mode, state));
-}
-
-/*
- * This algorithm is defined by the freedesktop spec:
- * http://standards.freedesktop.org/icon-theme-spec/icon-theme-spec-latest.html
- */
-static bool directoryMatchesSize(const QIconDirInfo &dir, int iconsize)
-{
-    if (dir.type == QIconDirInfo::Fixed) {
-        return dir.size == iconsize;
-
-    } else if (dir.type == QIconDirInfo::Scalable) {
-        return dir.size <= dir.maxSize &&
-                iconsize >= dir.minSize;
-
-    } else if (dir.type == QIconDirInfo::Threshold) {
-        return iconsize >= dir.size - dir.threshold &&
-                iconsize <= dir.size + dir.threshold;
-    }
-
-    Q_ASSERT(1); // Not a valid value
-    return false;
-}
-
-/*
- * This algorithm is defined by the freedesktop spec:
- * http://standards.freedesktop.org/icon-theme-spec/icon-theme-spec-latest.html
- */
-static int directorySizeDistance(const QIconDirInfo &dir, int iconsize)
-{
-    if (dir.type == QIconDirInfo::Fixed) {
-        return qAbs(dir.size - iconsize);
-
-    } else if (dir.type == QIconDirInfo::Scalable) {
-        if (iconsize < dir.minSize)
-            return dir.minSize - iconsize;
-        else if (iconsize > dir.maxSize)
-            return iconsize - dir.maxSize;
-        else
-            return 0;
-
-    } else if (dir.type == QIconDirInfo::Threshold) {
-        if (iconsize < dir.size - dir.threshold)
-            return dir.minSize - iconsize;
-        else if (iconsize > dir.size + dir.threshold)
-            return iconsize - dir.maxSize;
-        else return 0;
-    }
-
-    Q_ASSERT(1); // Not a valid value
-    return INT_MAX;
-}
-
-QIconLoaderEngineEntry *QIconLoaderEngine::entryForSize(const QSize &size)
-{
-    int iconsize = qMin(size.width(), size.height());
-
-    // Note that m_entries are sorted so that png-files
-    // come first
-
-    // Search for exact matches first
-    for (int i = 0; i < m_entries.count(); ++i) {
-        QIconLoaderEngineEntry *entry = m_entries.at(i);
-        if (directoryMatchesSize(entry->dir, iconsize)) {
-            return entry;
-        }
-    }
-
-    // Find the minimum distance icon
-    int minimalSize = INT_MAX;
-    QIconLoaderEngineEntry *closestMatch = 0;
-    for (int i = 0; i < m_entries.count(); ++i) {
-        QIconLoaderEngineEntry *entry = m_entries.at(i);
-        int distance = directorySizeDistance(entry->dir, iconsize);
-        if (distance < minimalSize) {
-            minimalSize  = distance;
-            closestMatch = entry;
-        }
-    }
-    return closestMatch;
-}
-
-/*
- * Returns the actual icon size. For scalable svg's this is equivalent
- * to the requested size. Otherwise the closest match is returned but
- * we can never return a bigger size than the requested size.
- *
- */
-QSize QIconLoaderEngine::actualSize(const QSize &size, QIcon::Mode mode,
-                                   QIcon::State state)
-{
-    ensureLoaded();
-
-    QIconLoaderEngineEntry *entry = entryForSize(size);
-    if (entry) {
-        const QIconDirInfo &dir = entry->dir;
-        if (dir.type == QIconDirInfo::Scalable)
-            return size;
-        else {
-            int result = qMin<int>(dir.size, qMin(size.width(), size.height()));
-            return QSize(result, result);
-        }
-    }
-    return QIconEngine::actualSize(size, mode, state);
-}
-
-QPixmap PixmapEntry::pixmap(const QSize &size, QIcon::Mode mode, QIcon::State state)
-{
-    Q_UNUSED(state);
-
-    // Ensure that basePixmap is lazily initialized before generating the
-    // key, otherwise the cache key is not unique
-    if (basePixmap.isNull())
-        basePixmap.load(filename);
-
-    int actualSize = qMin(size.width(), size.height());
-    QString key = QLatin1String("$qt_theme_")
-                  % HexString<qint64>(basePixmap.cacheKey())
-                  % HexString<int>(mode)
-                  % HexString<qint64>(qApp->palette().cacheKey())
-                  % HexString<int>(actualSize);
-
-    QPixmap cachedPixmap;
-    if (QPixmapCache::find(key, &cachedPixmap)) {
-        return cachedPixmap;
-    } else {
-        QStyleOption opt(0);
-        opt.palette = qApp->palette();
-        cachedPixmap = qApp->style()->generatedIconPixmap(mode, basePixmap, &opt);
-        QPixmapCache::insert(key, cachedPixmap);
-    }
-    return cachedPixmap;
-}
-
-QPixmap ScalableEntry::pixmap(const QSize &size, QIcon::Mode mode, QIcon::State state)
-{
-    if (svgIcon.isNull())
-        svgIcon = QIcon(filename);
-
-    // Simply reuse svg icon engine
-    return svgIcon.pixmap(size, mode, state);
-}
-
-QPixmap QIconLoaderEngine::pixmap(const QSize &size, QIcon::Mode mode,
-                                 QIcon::State state)
-{
-    ensureLoaded();
-
-    QIconLoaderEngineEntry *entry = entryForSize(size);
-    if (entry)
-        return entry->pixmap(size, mode, state);
-
-    return QPixmap();
-}
-
-QString QIconLoaderEngine::key() const
-{
-    return QLatin1String("QIconLoaderEngine");
-}
-
-void QIconLoaderEngine::virtual_hook(int id, void *data)
-{
-    ensureLoaded();
-
-    switch (id) {
-    case QIconEngine::AvailableSizesHook:
-        {
-            QIconEngine::AvailableSizesArgument &arg
-                    = *reinterpret_cast<QIconEngine::AvailableSizesArgument*>(data);
-            const QList<QIconDirInfo> directoryKey = iconLoaderInstance()->theme().keyList();
-            arg.sizes.clear();
-
-            // Gets all sizes from the DirectoryInfo entries
-            for (int i = 0 ; i < m_entries.size() ; ++i) {
-                int size = m_entries.at(i)->dir.size;
-                arg.sizes.append(QSize(size, size));
-            }
-        }
-        break;
-    case QIconEngine::IconNameHook:
-        {
-            QString &name = *reinterpret_cast<QString*>(data);
-            name = m_iconName;
-        }
-        break;
-    default:
-        QIconEngine::virtual_hook(id, data);
-    }
-}
-
-QT_END_NAMESPACE
-
-#endif //QT_NO_ICON
diff --git a/src/widgets/kernel/qiconloader_p.h b/src/widgets/kernel/qiconloader_p.h
deleted file mode 100644
index 1b90436..0000000
--- a/src/widgets/kernel/qiconloader_p.h
+++ /dev/null
@@ -1,192 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/
-**
-** This file is part of the QtGui module of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:LGPL$
-** GNU Lesser General Public License Usage
-** This file may be used under the terms of the GNU Lesser General Public
-** License version 2.1 as published by the Free Software Foundation and
-** appearing in the file LICENSE.LGPL included in the packaging of this
-** file. Please review the following information to ensure the GNU Lesser
-** General Public License version 2.1 requirements will be met:
-** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
-**
-** In addition, as a special exception, Nokia gives you certain additional
-** rights. These rights are described in the Nokia Qt LGPL Exception
-** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
-**
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU General
-** Public License version 3.0 as published by the Free Software Foundation
-** and appearing in the file LICENSE.GPL included in the packaging of this
-** file. Please review the following information to ensure the GNU General
-** Public License version 3.0 requirements will be met:
-** http://www.gnu.org/copyleft/gpl.html.
-**
-** Other Usage
-** Alternatively, this file may be used in accordance with the terms and
-** conditions contained in a signed written agreement between you and Nokia.
-**
-**
-**
-**
-**
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-#ifndef QDESKTOPICON_P_H
-#define QDESKTOPICON_P_H
-
-#ifndef QT_NO_ICON
-//
-//  W A R N I N G
-//  -------------
-//
-// This file is not part of the Qt API.  It exists purely as an
-// implementation detail.  This header file may change from version to
-// version without notice, or even be removed.
-//
-// We mean it.
-//
-
-#include <QtWidgets/QIcon>
-#include <QtWidgets/QIconEngine>
-#include <QtGui/QPixmapCache>
-#include <private/qicon_p.h>
-#include <private/qfactoryloader_p.h>
-#include <QtCore/QHash>
-
-QT_BEGIN_NAMESPACE
-
-class QIconLoader;
-
-struct QIconDirInfo
-{
-    enum Type { Fixed, Scalable, Threshold };
-    QIconDirInfo(const QString &_path = QString()) :
-            path(_path),
-            size(0),
-            maxSize(0),
-            minSize(0),
-            threshold(0),
-            type(Threshold) {}
-    QString path;
-    short size;
-    short maxSize;
-    short minSize;
-    short threshold;
-    Type type : 4;
-};
-
-class QIconLoaderEngineEntry
- {
-public:
-    virtual ~QIconLoaderEngineEntry() {}
-    virtual QPixmap pixmap(const QSize &size,
-                           QIcon::Mode mode,
-                           QIcon::State state) = 0;
-    QString filename;
-    QIconDirInfo dir;
-    static int count;
-};
-
-struct ScalableEntry : public QIconLoaderEngineEntry
-{
-    QPixmap pixmap(const QSize &size, QIcon::Mode mode, QIcon::State state);
-    QIcon svgIcon;
-};
-
-struct PixmapEntry : public QIconLoaderEngineEntry
-{
-    QPixmap pixmap(const QSize &size, QIcon::Mode mode, QIcon::State state);
-    QPixmap basePixmap;
-};
-
-typedef QList<QIconLoaderEngineEntry*> QThemeIconEntries;
-
-class QIconLoaderEngine : public QIconEngine
-{
-public:
-    QIconLoaderEngine(const QString& iconName = QString());
-    ~QIconLoaderEngine();
-
-    void paint(QPainter *painter, const QRect &rect, QIcon::Mode mode, QIcon::State state);
-    QPixmap pixmap(const QSize &size, QIcon::Mode mode, QIcon::State state);
-    QSize actualSize(const QSize &size, QIcon::Mode mode, QIcon::State state);
-    QIconEngine *clone() const;
-    bool read(QDataStream &in);
-    bool write(QDataStream &out) const;
-
-private:
-    QString key() const;
-    bool hasIcon() const;
-    void ensureLoaded();
-    void virtual_hook(int id, void *data);
-    QIconLoaderEngineEntry *entryForSize(const QSize &size);
-    QIconLoaderEngine(const QIconLoaderEngine &other);
-    QThemeIconEntries m_entries;
-    QString m_iconName;
-    uint m_key;
-
-    friend class QIconLoader;
-};
-
-class QIconTheme
-{
-public:
-    QIconTheme(const QString &name);
-    QIconTheme() : m_valid(false) {}
-    QStringList parents() { return m_parents; }
-    QList <QIconDirInfo> keyList() { return m_keyList; }
-    QString contentDir() { return m_contentDir; }
-    bool isValid() { return m_valid; }
-
-private:
-    QString m_contentDir;
-    QList <QIconDirInfo> m_keyList;
-    QStringList m_parents;
-    bool m_valid;
-};
-
-class QIconLoader : public QObject
-{
-public:
-    QIconLoader();
-    QThemeIconEntries loadIcon(const QString &iconName) const;
-    uint themeKey() const { return m_themeKey; }
-
-    QString themeName() const { return m_userTheme.isEmpty() ? m_systemTheme : m_userTheme; }
-    void setThemeName(const QString &themeName);
-    QIconTheme theme() { return themeList.value(themeName()); }
-    void setThemeSearchPath(const QStringList &searchPaths);
-    QStringList themeSearchPaths() const;
-    QIconDirInfo dirInfo(int dirindex);
-    static QIconLoader *instance();
-    void updateSystemTheme();
-    void invalidateKey() { m_themeKey++; }
-    void ensureInitialized();
-
-private:
-    QThemeIconEntries findIconHelper(const QString &themeName,
-                                     const QString &iconName,
-                                     QStringList &visited) const;
-    uint m_themeKey;
-    bool m_supportsSvg;
-    bool m_initialized;
-
-    mutable QString m_userTheme;
-    mutable QString m_systemTheme;
-    mutable QStringList m_iconDirs;
-    mutable QHash <QString, QIconTheme> themeList;
-};
-
-QT_END_NAMESPACE
-
-#endif // QDESKTOPICON_P_H
-
-#endif //QT_NO_ICON
diff --git a/src/widgets/styles/qstyle.h b/src/widgets/styles/qstyle.h
index aebfea3..f56919a 100644
--- a/src/widgets/styles/qstyle.h
+++ b/src/widgets/styles/qstyle.h
@@ -45,7 +45,7 @@
 #include <QtCore/qobject.h>
 #include <QtCore/qrect.h>
 #include <QtCore/qsize.h>
-#include <QtWidgets/qicon.h>
+#include <QtGui/qicon.h>
 #include <QtGui/qpixmap.h>
 #include <QtGui/qpalette.h>
 #include <QtWidgets/qsizepolicy.h>
diff --git a/src/widgets/styles/qstyleoption.h b/src/widgets/styles/qstyleoption.h
index 5888986..ea039ff 100644
--- a/src/widgets/styles/qstyleoption.h
+++ b/src/widgets/styles/qstyleoption.h
@@ -44,7 +44,7 @@
 
 #include <QtCore/qvariant.h>
 #include <QtWidgets/qabstractspinbox.h>
-#include <QtWidgets/qicon.h>
+#include <QtGui/qicon.h>
 #include <QtGui/qmatrix.h>
 #include <QtWidgets/qslider.h>
 #include <QtWidgets/qstyle.h>
diff --git a/src/widgets/util/qsystemtrayicon.h b/src/widgets/util/qsystemtrayicon.h
index 96f9a1d..b2ca5f0 100644
--- a/src/widgets/util/qsystemtrayicon.h
+++ b/src/widgets/util/qsystemtrayicon.h
@@ -46,7 +46,7 @@
 
 #ifndef QT_NO_SYSTEMTRAYICON
 
-#include <QtWidgets/qicon.h>
+#include <QtGui/qicon.h>
 
 QT_BEGIN_HEADER
 
diff --git a/src/widgets/util/qundoview.cpp b/src/widgets/util/qundoview.cpp
index 2a88b50..e169437 100644
--- a/src/widgets/util/qundoview.cpp
+++ b/src/widgets/util/qundoview.cpp
@@ -47,7 +47,7 @@
 #include "qundogroup.h"
 #include <QtCore/qabstractitemmodel.h>
 #include <QtCore/qpointer.h>
-#include <QtWidgets/qicon.h>
+#include <QtGui/qicon.h>
 #include <private/qlistview_p.h>
 
 QT_BEGIN_NAMESPACE
diff --git a/src/widgets/widgets/qabstractbutton.h b/src/widgets/widgets/qabstractbutton.h
index 37a37f6..5be27a2 100644
--- a/src/widgets/widgets/qabstractbutton.h
+++ b/src/widgets/widgets/qabstractbutton.h
@@ -42,7 +42,7 @@
 #ifndef QABSTRACTBUTTON_H
 #define QABSTRACTBUTTON_H
 
-#include <QtWidgets/qicon.h>
+#include <QtGui/qicon.h>
 #include <QtGui/qkeysequence.h>
 #include <QtWidgets/qwidget.h>
 
diff --git a/src/widgets/widgets/qmenu.h b/src/widgets/widgets/qmenu.h
index e98df59..5f4b213 100644
--- a/src/widgets/widgets/qmenu.h
+++ b/src/widgets/widgets/qmenu.h
@@ -44,7 +44,7 @@
 
 #include <QtWidgets/qwidget.h>
 #include <QtCore/qstring.h>
-#include <QtWidgets/qicon.h>
+#include <QtGui/qicon.h>
 #include <QtWidgets/qaction.h>
 
 #ifdef Q_OS_WINCE
diff --git a/src/widgets/widgets/qtabwidget.h b/src/widgets/widgets/qtabwidget.h
index 4e8d4d4..8fc3bfa 100644
--- a/src/widgets/widgets/qtabwidget.h
+++ b/src/widgets/widgets/qtabwidget.h
@@ -43,7 +43,7 @@
 #define QTABWIDGET_H
 
 #include <QtWidgets/qwidget.h>
-#include <QtWidgets/qicon.h>
+#include <QtGui/qicon.h>
 
 QT_BEGIN_HEADER
 
diff --git a/src/widgets/widgets/qtoolbox.h b/src/widgets/widgets/qtoolbox.h
index 5732668..42f8b01 100644
--- a/src/widgets/widgets/qtoolbox.h
+++ b/src/widgets/widgets/qtoolbox.h
@@ -43,7 +43,7 @@
 #define QTOOLBOX_H
 
 #include <QtWidgets/qframe.h>
-#include <QtWidgets/qicon.h>
+#include <QtGui/qicon.h>
 
 QT_BEGIN_HEADER
 
diff --git a/tests/auto/gui/image/image.pro b/tests/auto/gui/image/image.pro
index 5a03063..1ef52df 100644
--- a/tests/auto/gui/image/image.pro
+++ b/tests/auto/gui/image/image.pro
@@ -9,6 +9,7 @@ SUBDIRS=\
    qimagewriter \
    qmovie \
    qpicture \
+   qicon \
 
 !contains(QT_CONFIG, private_tests): SUBDIRS -= \
            qpixmapcache \
diff --git a/tests/auto/gui/image/qicon/.gitignore b/tests/auto/gui/image/qicon/.gitignore
new file mode 100644
index 0000000..c101ef9
--- /dev/null
+++ b/tests/auto/gui/image/qicon/.gitignore
@@ -0,0 +1 @@
+tst_qicon
diff --git a/tests/auto/gui/image/qicon/icons/testtheme/16x16/actions/appointment-new.png b/tests/auto/gui/image/qicon/icons/testtheme/16x16/actions/appointment-new.png
new file mode 100644
index 0000000..18b7c67
Binary files /dev/null and b/tests/auto/gui/image/qicon/icons/testtheme/16x16/actions/appointment-new.png differ
diff --git a/tests/auto/gui/image/qicon/icons/testtheme/22x22/actions/appointment-new.png b/tests/auto/gui/image/qicon/icons/testtheme/22x22/actions/appointment-new.png
new file mode 100644
index 0000000..d676ffd
Binary files /dev/null and b/tests/auto/gui/image/qicon/icons/testtheme/22x22/actions/appointment-new.png differ
diff --git a/tests/auto/gui/image/qicon/icons/testtheme/32x32/actions/appointment-new.png b/tests/auto/gui/image/qicon/icons/testtheme/32x32/actions/appointment-new.png
new file mode 100644
index 0000000..85daef3
Binary files /dev/null and b/tests/auto/gui/image/qicon/icons/testtheme/32x32/actions/appointment-new.png differ
diff --git a/tests/auto/gui/image/qicon/icons/testtheme/index.theme b/tests/auto/gui/image/qicon/icons/testtheme/index.theme
new file mode 100644
index 0000000..e18736a
--- /dev/null
+++ b/tests/auto/gui/image/qicon/icons/testtheme/index.theme
@@ -0,0 +1,492 @@
+[Icon Theme]
+_Name=Test
+_Comment=Test Theme
+Inherits=crystalsvg, themeparent
+Example=x-directory-normal
+
+# KDE Specific Stuff
+DisplayDepth=32
+LinkOverlay=link_overlay
+LockOverlay=lock_overlay
+ZipOverlay=zip_overlay
+DesktopDefault=48
+DesktopSizes=16,22,32,48,64,72,96,128
+ToolbarDefault=22
+ToolbarSizes=16,22,32,48
+MainToolbarDefault=22
+MainToolbarSizes=16,22,32,48
+SmallDefault=16
+SmallSizes=16
+PanelDefault=32
+PanelSizes=16,22,32,48,64,72,96,128
+
+# Directory list
+Directories=16x16/actions,16x16/apps,16x16/categories,16x16/devices,16x16/emblems,16x16/emotes,16x16/mimetypes,16x16/places,16x16/status,22x22/actions,22x22/apps,22x22/categories,22x22/devices,22x22/emblems,22x22/emotes,22x22/mimetypes,22x22/places,22x22/status,24x24/actions,24x24/apps,24x24/categories,24x24/devices,24x24/emblems,24x24/emotes,24x24/mimetypes,24x24/places,24x24/status,32x32/actions,32x32/apps,32x32/categories,32x32/devices,32x32/emblems,32x32/emotes,32x32/mimetypes,32x32/places,32x32/status,48x48/actions,48x48/apps,48x48/categories,48x48/devices,48x48/emblems,48x48/emotes,48x48/mimetypes,48x48/places,48x48/status,64x64/actions,64x64/apps,64x64/categories,64x64/devices,64x64/emblems,64x64/emotes,64x64/mimetypes,64x64/places,64x64/status,72x72/actions,72x72/apps,72x72/categories,72x72/devices,72x72/emblems,72x72/emotes,72x72/mimetypes,72x72/places,72x72/status,96x96/actions,96x96/apps,96x96/categories,96x96/devices,96x96/emblems,96x96/emotes,96x96/mimetypes,96x96/places,96x96/status,128x128/actions,128x128/apps,128x128/categories,128x128/devices,128x128/emblems,128x128/emotes,128x128/mimetypes,128x128/places,128x128/status,scalable/actions,scalable/apps,scalable/categories,scalable/devices,scalable/emblems,scalable/emotes,scalable/mimetypes,scalable/places,scalable/status
+
+[16x16/actions]
+Size=16
+Context=Actions
+Type=Fixed
+
+[16x16/apps]
+Size=16
+Context=Applications
+Type=Fixed
+
+[16x16/categories]
+Size=16
+Context=Categories
+Type=Fixed
+
+[16x16/devices]
+Size=16
+Context=Devices
+Type=Fixed
+
+[16x16/emblems]
+Size=16
+Context=Emblems
+Type=Fixed
+
+[16x16/emotes]
+Size=16
+Context=Emotes
+Type=Fixed
+
+[16x16/mimetypes]
+Size=16
+Context=MimeTypes
+Type=Fixed
+
+[16x16/places]
+Size=16
+Context=Places
+Type=Fixed
+
+[16x16/status]
+Size=16
+Context=Status
+Type=Fixed
+
+[22x22/actions]
+Size=22
+Context=Actions
+Type=Fixed
+
+[22x22/apps]
+Size=22
+Context=Applications
+Type=Fixed
+
+[22x22/categories]
+Size=22
+Context=Categories
+Type=Fixed
+
+[22x22/devices]
+Size=22
+Context=Devices
+Type=Fixed
+
+[22x22/emblems]
+Size=22
+Context=Emblems
+Type=Fixed
+
+[22x22/emotes]
+Size=22
+Context=Emotes
+Type=Fixed
+
+[22x22/mimetypes]
+Size=22
+Context=MimeTypes
+Type=Fixed
+
+[22x22/places]
+Size=22
+Context=Places
+Type=Fixed
+
+[22x22/status]
+Size=22
+Context=Status
+Type=Fixed
+
+[24x24/actions]
+Size=24
+Context=Actions
+Type=Fixed
+
+[24x24/apps]
+Size=24
+Context=Applications
+Type=Fixed
+
+[24x24/categories]
+Size=24
+Context=Categories
+Type=Fixed
+
+[24x24/devices]
+Size=24
+Context=Devices
+Type=Fixed
+
+[24x24/emblems]
+Size=24
+Context=Emblems
+Type=Fixed
+
+[24x24/emotes]
+Size=24
+Context=Emotes
+Type=Fixed
+
+[24x24/mimetypes]
+Size=24
+Context=MimeTypes
+Type=Fixed
+
+[24x24/places]
+Size=24
+Context=Places
+Type=Fixed
+
+[24x24/status]
+Size=24
+Context=Status
+Type=Fixed
+
+[32x32/actions]
+Size=32
+Context=Actions
+Type=Fixed
+
+[32x32/apps]
+Size=32
+Context=Applications
+Type=Fixed
+
+[32x32/categories]
+Size=32
+Context=Categories
+Type=Fixed
+
+[32x32/devices]
+Size=32
+Context=Devices
+Type=Fixed
+
+[32x32/emblems]
+Size=32
+Context=Emblems
+Type=Fixed
+
+[32x32/emotes]
+Size=32
+Context=Emotes
+Type=Fixed
+
+[32x32/mimetypes]
+Size=32
+Context=MimeTypes
+Type=Fixed
+
+[32x32/places]
+Size=32
+Context=Places
+Type=Fixed
+
+[32x32/status]
+Size=32
+Context=Status
+Type=Fixed
+
+[48x48/actions]
+Size=48
+Context=Actions
+Type=Fixed
+
+[48x48/apps]
+Size=48
+Context=Applications
+Type=Fixed
+
+[48x48/categories]
+Size=48
+Context=Categories
+Type=Fixed
+
+[48x48/devices]
+Size=48
+Context=Devices
+Type=Fixed
+
+[48x48/emblems]
+Size=48
+Context=Emblems
+Type=Fixed
+
+[48x48/emotes]
+Size=48
+Context=Emotes
+Type=Fixed
+
+[48x48/mimetypes]
+Size=48
+Context=MimeTypes
+Type=Fixed
+
+[48x48/places]
+Size=48
+Context=Places
+Type=Fixed
+
+[48x48/status]
+Size=48
+Context=Status
+Type=Fixed
+
+[64x64/actions]
+Size=64
+Context=Actions
+Type=Fixed
+
+[64x64/apps]
+Size=64
+Context=Applications
+Type=Fixed
+
+[64x64/categories]
+Size=64
+Context=Categories
+Type=Fixed
+
+[64x64/devices]
+Size=64
+Context=Devices
+Type=Fixed
+
+[64x64/emblems]
+Size=64
+Context=Emblems
+Type=Fixed
+
+[64x64/emotes]
+Size=64
+Context=Emotes
+Type=Fixed
+
+[64x64/mimetypes]
+Size=64
+Context=MimeTypes
+Type=Fixed
+
+[64x64/places]
+Size=64
+Context=Places
+Type=Fixed
+
+[64x64/status]
+Size=64
+Context=Status
+Type=Fixed
+
+[72x72/actions]
+Size=72
+Context=Actions
+Type=Fixed
+
+[72x72/apps]
+Size=72
+Context=Applications
+Type=Fixed
+
+[72x72/categories]
+Size=72
+Context=Categories
+Type=Fixed
+
+[72x72/devices]
+Size=72
+Context=Devices
+Type=Fixed
+
+[72x72/emblems]
+Size=72
+Context=Emblems
+Type=Fixed
+
+[72x72/emotes]
+Size=72
+Context=Emotes
+Type=Fixed
+
+[72x72/mimetypes]
+Size=72
+Context=MimeTypes
+Type=Fixed
+
+[72x72/places]
+Size=72
+Context=Places
+Type=Fixed
+
+[72x72/status]
+Size=72
+Context=Status
+Type=Fixed
+
+[96x96/actions]
+Size=96
+Context=Actions
+Type=Fixed
+
+[96x96/apps]
+Size=96
+Context=Applications
+Type=Fixed
+
+[96x96/categories]
+Size=96
+Context=Categories
+Type=Fixed
+
+[96x96/devices]
+Size=96
+Context=Devices
+Type=Fixed
+
+[96x96/emblems]
+Size=96
+Context=Emblems
+Type=Fixed
+
+[96x96/emotes]
+Size=96
+Context=Emotes
+Type=Fixed
+
+[96x96/mimetypes]
+Size=96
+Context=MimeTypes
+Type=Fixed
+
+[96x96/places]
+Size=96
+Context=Places
+Type=Fixed
+
+[96x96/status]
+Size=96
+Context=Status
+Type=Fixed
+
+[128x128/actions]
+Size=128
+Context=Actions
+Type=Fixed
+
+[128x128/apps]
+Size=128
+Context=Applications
+Type=Fixed
+
+[128x128/categories]
+Size=128
+Context=Categories
+Type=Fixed
+
+[128x128/devices]
+Size=128
+Context=Devices
+Type=Fixed
+
+[128x128/emblems]
+Size=128
+Context=Emblems
+Type=Fixed
+
+[128x128/emotes]
+Size=128
+Context=Emotes
+Type=Fixed
+
+[128x128/mimetypes]
+Size=128
+Context=MimeTypes
+Type=Fixed
+
+[128x128/places]
+Size=128
+Context=Places
+Type=Fixed
+
+[128x128/status]
+Size=128
+Context=Status
+Type=Fixed
+
+[scalable/actions]
+Size=48
+Context=Actions
+Type=Scalable
+MinSize=32
+MaxSize=256
+
+[scalable/apps]
+Size=48
+Context=Applications
+Type=Scalable
+MinSize=32
+MaxSize=256
+
+[scalable/categories]
+Size=48
+Context=Categories
+Type=Scalable
+MinSize=32
+MaxSize=256
+
+[scalable/devices]
+Size=48
+Context=Devices
+Type=Scalable
+MinSize=32
+MaxSize=256
+
+[scalable/emblems]
+Size=48
+Context=Emblems
+Type=Scalable
+MinSize=32
+MaxSize=256
+
+[scalable/emotes]
+Size=48
+Context=Emotes
+Type=Scalable
+Minsize=32
+MaxSize=256
+
+[scalable/mimetypes]
+Size=48
+Context=MimeTypes
+Type=Scalable
+MinSize=32
+MaxSize=256
+
+[scalable/places]
+Size=48
+Context=Places
+Type=Scalable
+MinSize=32
+MaxSize=256
+
+[scalable/status]
+Size=48
+Context=Status
+Type=Scalable
+MinSize=32
+MaxSize=256
diff --git a/tests/auto/gui/image/qicon/icons/testtheme/scalable/actions/svg-only.svg b/tests/auto/gui/image/qicon/icons/testtheme/scalable/actions/svg-only.svg
new file mode 100644
index 0000000..4cb14f8
--- /dev/null
+++ b/tests/auto/gui/image/qicon/icons/testtheme/scalable/actions/svg-only.svg
@@ -0,0 +1,425 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<!-- Created with Inkscape (http://www.inkscape.org/) -->
+<svg
+   xmlns:dc="http://purl.org/dc/elements/1.1/"
+   xmlns:cc="http://creativecommons.org/ns#"
+   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
+   xmlns:svg="http://www.w3.org/2000/svg"
+   xmlns="http://www.w3.org/2000/svg"
+   xmlns:xlink="http://www.w3.org/1999/xlink"
+   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
+   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
+   inkscape:export-ydpi="90.000000"
+   inkscape:export-xdpi="90.000000"
+   inkscape:export-filename="/home/jimmac/Desktop/wi-fi.png"
+   width="48px"
+   height="48px"
+   id="svg11300"
+   sodipodi:version="0.32"
+   inkscape:version="0.46"
+   sodipodi:docbase="/home/tigert/cvs/freedesktop.org/tango-icon-theme/scalable/actions"
+   sodipodi:docname="appointment-new.svg"
+   inkscape:output_extension="org.inkscape.output.svg.inkscape">
+  <defs
+     id="defs3">
+    <inkscape:perspective
+       sodipodi:type="inkscape:persp3d"
+       inkscape:vp_x="0 : 24 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_z="48 : 24 : 1"
+       inkscape:persp3d-origin="24 : 16 : 1"
+       id="perspective59" />
+    <linearGradient
+       inkscape:collect="always"
+       id="linearGradient5204">
+      <stop
+         style="stop-color:#c4a000;stop-opacity:1;"
+         offset="0"
+         id="stop5206" />
+      <stop
+         style="stop-color:#c4a000;stop-opacity:0;"
+         offset="1"
+         id="stop5208" />
+    </linearGradient>
+    <linearGradient
+       inkscape:collect="always"
+       id="linearGradient5196">
+      <stop
+         style="stop-color:#c4a000;stop-opacity:1;"
+         offset="0"
+         id="stop5198" />
+      <stop
+         style="stop-color:#c4a000;stop-opacity:0;"
+         offset="1"
+         id="stop5200" />
+    </linearGradient>
+    <linearGradient
+       id="linearGradient12512">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1.0000000;"
+         offset="0.0000000"
+         id="stop12513" />
+      <stop
+         style="stop-color:#fff520;stop-opacity:0.89108908;"
+         offset="0.50000000"
+         id="stop12517" />
+      <stop
+         style="stop-color:#fff300;stop-opacity:0.0000000;"
+         offset="1.0000000"
+         id="stop12514" />
+    </linearGradient>
+    <radialGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient12512"
+       id="radialGradient278"
+       gradientUnits="userSpaceOnUse"
+       cx="55.000000"
+       cy="125.00000"
+       fx="55.000000"
+       fy="125.00000"
+       r="14.375000" />
+    <linearGradient
+       id="linearGradient10653">
+      <stop
+         style="stop-color:#f3f4ff;stop-opacity:1.0000000;"
+         offset="0.0000000"
+         id="stop10655" />
+      <stop
+         style="stop-color:#9193af;stop-opacity:1.0000000;"
+         offset="1.0000000"
+         id="stop10657" />
+    </linearGradient>
+    <linearGradient
+       id="linearGradient42174">
+      <stop
+         style="stop-color:#a0a0a0;stop-opacity:1.0000000;"
+         offset="0.0000000"
+         id="stop42176" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1.0000000;"
+         offset="1.0000000"
+         id="stop42178" />
+    </linearGradient>
+    <linearGradient
+       id="linearGradient2145">
+      <stop
+         style="stop-color:#fffffd;stop-opacity:1.0000000;"
+         offset="0.0000000"
+         id="stop2147" />
+      <stop
+         style="stop-color:#cbcbc9;stop-opacity:1.0000000;"
+         offset="1.0000000"
+         id="stop2149" />
+    </linearGradient>
+    <linearGradient
+       id="linearGradient37935">
+      <stop
+         id="stop37937"
+         offset="0.0000000"
+         style="stop-color:#9497b3;stop-opacity:1.0000000;" />
+      <stop
+         id="stop37939"
+         offset="1.0000000"
+         style="stop-color:#4c4059;stop-opacity:1.0000000;" />
+    </linearGradient>
+    <linearGradient
+       id="linearGradient2152">
+      <stop
+         id="stop2154"
+         offset="0.0000000"
+         style="stop-color:#9aa29a;stop-opacity:1.0000000;" />
+      <stop
+         id="stop2156"
+         offset="1.0000000"
+         style="stop-color:#b5beb5;stop-opacity:1.0000000;" />
+    </linearGradient>
+    <linearGradient
+       inkscape:collect="always"
+       id="linearGradient3816">
+      <stop
+         style="stop-color:#000000;stop-opacity:1;"
+         offset="0"
+         id="stop3818" />
+      <stop
+         style="stop-color:#000000;stop-opacity:0;"
+         offset="1"
+         id="stop3820" />
+    </linearGradient>
+    <radialGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient3816"
+       id="radialGradient3822"
+       cx="31.112698"
+       cy="19.008621"
+       fx="31.112698"
+       fy="19.008621"
+       r="8.6620579"
+       gradientUnits="userSpaceOnUse" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient2152"
+       id="linearGradient4307"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(3.123841,0.000000,0.000000,0.969691,-31.88758,-19.59492)"
+       x1="8.9156475"
+       y1="37.197018"
+       x2="9.8855033"
+       y2="52.090678" />
+    <radialGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient10653"
+       id="radialGradient4309"
+       gradientUnits="userSpaceOnUse"
+       cx="11.329200"
+       cy="10.583970"
+       fx="11.329200"
+       fy="10.583970"
+       r="15.532059" />
+    <radialGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient2145"
+       id="radialGradient4311"
+       gradientUnits="userSpaceOnUse"
+       cx="11.901996"
+       cy="10.045444"
+       fx="11.901996"
+       fy="10.045444"
+       r="29.292715" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient42174"
+       id="linearGradient4313"
+       gradientUnits="userSpaceOnUse"
+       x1="6.3422160"
+       y1="7.7893324"
+       x2="22.218424"
+       y2="25.884274" />
+    <radialGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient5196"
+       id="radialGradient5202"
+       cx="23.375"
+       cy="10.972863"
+       fx="23.375"
+       fy="10.972863"
+       r="3.3478092"
+       gradientTransform="matrix(3.630420,1.654030e-15,-1.608743e-15,3.742066,-61.48607,-29.18618)"
+       gradientUnits="userSpaceOnUse" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient5204"
+       id="linearGradient5210"
+       x1="19.667364"
+       y1="4.2570662"
+       x2="20.329933"
+       y2="5.2845874"
+       gradientUnits="userSpaceOnUse" />
+    <radialGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient37935"
+       id="radialGradient5212"
+       gradientUnits="userSpaceOnUse"
+       cx="8.7468252"
+       cy="6.8283234"
+       fx="8.7468252"
+       fy="6.8283234"
+       r="29.889715" />
+  </defs>
+  <sodipodi:namedview
+     stroke="#c4a000"
+     fill="#babdb6"
+     id="base"
+     pagecolor="#ffffff"
+     bordercolor="#666666"
+     borderopacity="0.25490196"
+     inkscape:pageopacity="0.0"
+     inkscape:pageshadow="2"
+     inkscape:zoom="11.313708"
+     inkscape:cx="13.2248"
+     inkscape:cy="25.106052"
+     inkscape:current-layer="layer1"
+     showgrid="false"
+     inkscape:grid-bbox="true"
+     inkscape:document-units="px"
+     inkscape:showpageshadow="false"
+     inkscape:window-width="833"
+     inkscape:window-height="772"
+     inkscape:window-x="305"
+     inkscape:window-y="76" />
+  <metadata
+     id="metadata4">
+    <rdf:RDF>
+      <cc:Work
+         rdf:about="">
+        <dc:format>image/svg+xml</dc:format>
+        <dc:type
+           rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
+        <dc:creator>
+          <cc:Agent>
+            <dc:title>Jakub Steiner</dc:title>
+          </cc:Agent>
+        </dc:creator>
+        <dc:source>http://jimmac.musichall.cz</dc:source>
+        <cc:license
+           rdf:resource="http://creativecommons.org/licenses/publicdomain/" />
+        <dc:title>New Appointment</dc:title>
+        <dc:subject>
+          <rdf:Bag>
+            <rdf:li>appointment</rdf:li>
+            <rdf:li>new</rdf:li>
+            <rdf:li>meeting</rdf:li>
+            <rdf:li>rvsp</rdf:li>
+          </rdf:Bag>
+        </dc:subject>
+      </cc:Work>
+      <cc:License
+         rdf:about="http://creativecommons.org/licenses/publicdomain/">
+        <cc:permits
+           rdf:resource="http://creativecommons.org/ns#Reproduction" />
+        <cc:permits
+           rdf:resource="http://creativecommons.org/ns#Distribution" />
+        <cc:permits
+           rdf:resource="http://creativecommons.org/ns#DerivativeWorks" />
+      </cc:License>
+    </rdf:RDF>
+  </metadata>
+  <g
+     id="layer1"
+     inkscape:label="Layer 1"
+     inkscape:groupmode="layer">
+    <path
+       d="M 39.774755 19.008621 A 8.6620579 8.6620579 0 1 1  22.45064,19.008621 A 8.6620579 8.6620579 0 1 1  39.774755 19.008621 z"
+       sodipodi:ry="8.6620579"
+       sodipodi:rx="8.6620579"
+       sodipodi:cy="19.008621"
+       sodipodi:cx="31.112698"
+       id="path4318"
+       style="opacity:1;color:#000000;fill:url(#radialGradient3822);fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:round;stroke-linejoin:round;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"
+       sodipodi:type="arc"
+       transform="matrix(2.563158,0.000000,0.000000,1.219602,-55.98414,14.04144)" />
+    <path
+       sodipodi:nodetypes="cccc"
+       id="path14341"
+       d="M 18.587591,1.403729 L 4.226755,18.096665 L 5.4854717,19.339844 L 18.587591,1.403729 z "
+       style="color:#000000;fill:url(#linearGradient4307);fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible" />
+    <path
+       sodipodi:nodetypes="cccc"
+       id="path18921"
+       d="M 18.467176,1.3138035 L 5.6605716,19.072612 L 7.4900985,20.687913 L 18.467176,1.3138035 z "
+       style="fill:#fefefe;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1" />
+    <path
+       transform="matrix(1.431529,0.000000,0.000000,1.431529,0.569459,-1.654618)"
+       d="M 31.160714 16.910715 A 14.910714 14.910714 0 1 1  1.3392859,16.910715 A 14.910714 14.910714 0 1 1  31.160714 16.910715 z"
+       sodipodi:ry="14.910714"
+       sodipodi:rx="14.910714"
+       sodipodi:cy="16.910715"
+       sodipodi:cx="16.25"
+       id="path27786"
+       style="fill:url(#radialGradient5212);fill-opacity:1;fill-rule:evenodd;stroke:#605773;stroke-width:0.69855404;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dashoffset:0;stroke-opacity:1"
+       sodipodi:type="arc" />
+    <path
+       transform="matrix(1.163838,0.000000,0.000000,1.163838,4.824801,2.777556)"
+       d="M 31.160714 16.910715 A 14.910714 14.910714 0 1 1  1.3392859,16.910715 A 14.910714 14.910714 0 1 1  31.160714 16.910715 z"
+       sodipodi:ry="14.910714"
+       sodipodi:rx="14.910714"
+       sodipodi:cy="16.910715"
+       sodipodi:cx="16.25"
+       id="path35549"
+       style="fill:url(#radialGradient4311);fill-opacity:1;fill-rule:evenodd;stroke:url(#linearGradient4313);stroke-width:0.71139598;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dashoffset:0;stroke-opacity:1"
+       sodipodi:type="arc" />
+    <path
+       sodipodi:type="arc"
+       style="opacity:1;color:#000000;fill:url(#radialGradient5202);fill-opacity:1;fill-rule:evenodd;stroke:url(#linearGradient5210);stroke-width:0.56498736;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"
+       id="path4120"
+       sodipodi:cx="23.375"
+       sodipodi:cy="11.875"
+       sodipodi:rx="8.5"
+       sodipodi:ry="8.5"
+       d="M 16.679382,6.6387137 A 8.5,8.5 0 0 1 23.332691,3.3751053 L 23.375,11.875 z"
+       transform="matrix(1.769951,0.000000,0.000000,1.769951,-17.02424,1.610741)"
+       sodipodi:start="3.8052902"
+       sodipodi:end="4.7074114" />
+    <path
+       transform="matrix(2.073295,0.000000,0.000000,2.073295,-7.310224,-13.13682)"
+       d="M 16.40625 17.28125 A 1.21875 1.21875 0 1 1  13.96875,17.28125 A 1.21875 1.21875 0 1 1  16.40625 17.28125 z"
+       sodipodi:ry="1.21875"
+       sodipodi:rx="1.21875"
+       sodipodi:cy="17.28125"
+       sodipodi:cx="15.1875"
+       id="path34778"
+       style="fill:#f3f3f3;fill-opacity:1;fill-rule:evenodd;stroke:#000000;stroke-width:0.48232403;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dashoffset:0;stroke-opacity:1;stroke-dasharray:none"
+       sodipodi:type="arc" />
+    <path
+       id="path35559"
+       d="M 22.176614,20.718014 L 13.155702,13.140282"
+       style="fill:none;fill-opacity:0.75;fill-rule:evenodd;stroke:#000000;stroke-width:1;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none" />
+    <path
+       id="path35561"
+       d="M 19.408614,29.776506 L 22.368655,25.283228"
+       style="fill:none;fill-opacity:0.75;fill-rule:evenodd;stroke:#000000;stroke-width:2;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
+       sodipodi:nodetypes="cc" />
+    <path
+       transform="matrix(2.749493,0.000000,0.000000,2.749493,-22.30073,-12.40939)"
+       d="M 17.324117 7.6932044 A 0.61871845 0.61871845 0 1 1  16.08668,7.6932044 A 0.61871845 0.61871845 0 1 1  17.324117 7.6932044 z"
+       sodipodi:ry="0.61871845"
+       sodipodi:rx="0.61871845"
+       sodipodi:cy="7.6932044"
+       sodipodi:cx="16.705399"
+       id="path35563"
+       style="fill:#b6b9b1;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1.36871839;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dashoffset:0;stroke-opacity:1;opacity:1"
+       sodipodi:type="arc" />
+    <path
+       transform="matrix(2.749493,0.000000,0.000000,2.749493,-22.30073,14.80922)"
+       d="M 17.324117 7.6932044 A 0.61871845 0.61871845 0 1 1  16.08668,7.6932044 A 0.61871845 0.61871845 0 1 1  17.324117 7.6932044 z"
+       sodipodi:ry="0.61871845"
+       sodipodi:rx="0.61871845"
+       sodipodi:cy="7.6932044"
+       sodipodi:cx="16.705399"
+       id="path35565"
+       style="fill:#b6b9b1;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1.36871839;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dashoffset:0;stroke-opacity:1;opacity:1"
+       sodipodi:type="arc" />
+    <path
+       transform="matrix(2.749493,0.000000,0.000000,2.749493,-35.91004,1.199890)"
+       d="M 17.324117 7.6932044 A 0.61871845 0.61871845 0 1 1  16.08668,7.6932044 A 0.61871845 0.61871845 0 1 1  17.324117 7.6932044 z"
+       sodipodi:ry="0.61871845"
+       sodipodi:rx="0.61871845"
+       sodipodi:cy="7.6932044"
+       sodipodi:cx="16.705399"
+       id="path35567"
+       style="fill:#b6b9b1;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1.36871839;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dashoffset:0;stroke-opacity:1;opacity:1"
+       sodipodi:type="arc" />
+    <path
+       transform="matrix(2.749493,0.000000,0.000000,2.749493,-8.691448,1.199890)"
+       d="M 17.324117 7.6932044 A 0.61871845 0.61871845 0 1 1  16.08668,7.6932044 A 0.61871845 0.61871845 0 1 1  17.324117 7.6932044 z"
+       sodipodi:ry="0.61871845"
+       sodipodi:rx="0.61871845"
+       sodipodi:cy="7.6932044"
+       sodipodi:cx="16.705399"
+       id="path35569"
+       style="fill:#b6b9b1;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1.36871839;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dashoffset:0;stroke-opacity:1;opacity:1"
+       sodipodi:type="arc" />
+    <path
+       sodipodi:type="arc"
+       style="fill:none;fill-opacity:1;fill-rule:evenodd;stroke:url(#radialGradient4309);stroke-width:0.73656511;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dashoffset:0;stroke-opacity:1"
+       id="path10651"
+       sodipodi:cx="16.25"
+       sodipodi:cy="16.910715"
+       sodipodi:rx="14.910714"
+       sodipodi:ry="14.910714"
+       d="M 31.160714 16.910715 A 14.910714 14.910714 0 1 1  1.3392859,16.910715 A 14.910714 14.910714 0 1 1  31.160714 16.910715 z"
+       transform="matrix(1.357654,0.000000,0.000000,1.357654,1.769896,-0.493735)" />
+    <path
+       sodipodi:type="arc"
+       style="color:#000000;fill:url(#radialGradient278);fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1.25000024;stroke-linecap:butt;stroke-linejoin:round;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:block"
+       id="path12511"
+       sodipodi:cx="55"
+       sodipodi:cy="125"
+       sodipodi:rx="14.375"
+       sodipodi:ry="14.375"
+       d="M 69.375 125 A 14.375 14.375 0 1 1  40.625,125 A 14.375 14.375 0 1 1  69.375 125 z"
+       transform="matrix(0.611127,0.000000,0.000000,0.611127,5.544052,-66.92818)"
+       inkscape:export-filename="/home/jimmac/ximian_art/icons/nautilus/suse93/stock_new-16.png"
+       inkscape:export-xdpi="33.852203"
+       inkscape:export-ydpi="33.852203" />
+  </g>
+</svg>
diff --git a/tests/auto/gui/image/qicon/icons/themeparent/16x16/actions/address-book-new.png b/tests/auto/gui/image/qicon/icons/themeparent/16x16/actions/address-book-new.png
new file mode 100644
index 0000000..2098cfd
Binary files /dev/null and b/tests/auto/gui/image/qicon/icons/themeparent/16x16/actions/address-book-new.png differ
diff --git a/tests/auto/gui/image/qicon/icons/themeparent/16x16/actions/appointment-new.png b/tests/auto/gui/image/qicon/icons/themeparent/16x16/actions/appointment-new.png
new file mode 100644
index 0000000..18b7c67
Binary files /dev/null and b/tests/auto/gui/image/qicon/icons/themeparent/16x16/actions/appointment-new.png differ
diff --git a/tests/auto/gui/image/qicon/icons/themeparent/22x22/actions/address-book-new.png b/tests/auto/gui/image/qicon/icons/themeparent/22x22/actions/address-book-new.png
new file mode 100644
index 0000000..fad446c
Binary files /dev/null and b/tests/auto/gui/image/qicon/icons/themeparent/22x22/actions/address-book-new.png differ
diff --git a/tests/auto/gui/image/qicon/icons/themeparent/22x22/actions/appointment-new.png b/tests/auto/gui/image/qicon/icons/themeparent/22x22/actions/appointment-new.png
new file mode 100644
index 0000000..d676ffd
Binary files /dev/null and b/tests/auto/gui/image/qicon/icons/themeparent/22x22/actions/appointment-new.png differ
diff --git a/tests/auto/gui/image/qicon/icons/themeparent/32x32/actions/address-book-new.png b/tests/auto/gui/image/qicon/icons/themeparent/32x32/actions/address-book-new.png
new file mode 100644
index 0000000..420139d
Binary files /dev/null and b/tests/auto/gui/image/qicon/icons/themeparent/32x32/actions/address-book-new.png differ
diff --git a/tests/auto/gui/image/qicon/icons/themeparent/32x32/actions/appointment-new.png b/tests/auto/gui/image/qicon/icons/themeparent/32x32/actions/appointment-new.png
new file mode 100644
index 0000000..85daef3
Binary files /dev/null and b/tests/auto/gui/image/qicon/icons/themeparent/32x32/actions/appointment-new.png differ
diff --git a/tests/auto/gui/image/qicon/icons/themeparent/index.theme b/tests/auto/gui/image/qicon/icons/themeparent/index.theme
new file mode 100644
index 0000000..e536a0b
--- /dev/null
+++ b/tests/auto/gui/image/qicon/icons/themeparent/index.theme
@@ -0,0 +1,492 @@
+[Icon Theme]
+_Name=Test
+_Comment=Test Theme
+Inherits=gnome,crystalsvg
+Example=x-directory-normal
+
+# KDE Specific Stuff
+DisplayDepth=32
+LinkOverlay=link_overlay
+LockOverlay=lock_overlay
+ZipOverlay=zip_overlay
+DesktopDefault=48
+DesktopSizes=16,22,32,48,64,72,96,128
+ToolbarDefault=22
+ToolbarSizes=16,22,32,48
+MainToolbarDefault=22
+MainToolbarSizes=16,22,32,48
+SmallDefault=16
+SmallSizes=16
+PanelDefault=32
+PanelSizes=16,22,32,48,64,72,96,128
+
+# Directory list
+Directories=16x16/actions,16x16/apps,16x16/categories,16x16/devices,16x16/emblems,16x16/emotes,16x16/mimetypes,16x16/places,16x16/status,22x22/actions,22x22/apps,22x22/categories,22x22/devices,22x22/emblems,22x22/emotes,22x22/mimetypes,22x22/places,22x22/status,24x24/actions,24x24/apps,24x24/categories,24x24/devices,24x24/emblems,24x24/emotes,24x24/mimetypes,24x24/places,24x24/status,32x32/actions,32x32/apps,32x32/categories,32x32/devices,32x32/emblems,32x32/emotes,32x32/mimetypes,32x32/places,32x32/status,48x48/actions,48x48/apps,48x48/categories,48x48/devices,48x48/emblems,48x48/emotes,48x48/mimetypes,48x48/places,48x48/status,64x64/actions,64x64/apps,64x64/categories,64x64/devices,64x64/emblems,64x64/emotes,64x64/mimetypes,64x64/places,64x64/status,72x72/actions,72x72/apps,72x72/categories,72x72/devices,72x72/emblems,72x72/emotes,72x72/mimetypes,72x72/places,72x72/status,96x96/actions,96x96/apps,96x96/categories,96x96/devices,96x96/emblems,96x96/emotes,96x96/mimetypes,96x96/places,96x96/status,128x128/actions,128x128/apps,128x128/categories,128x128/devices,128x128/emblems,128x128/emotes,128x128/mimetypes,128x128/places,128x128/status,scalable/actions,scalable/apps,scalable/categories,scalable/devices,scalable/emblems,scalable/emotes,scalable/mimetypes,scalable/places,scalable/status
+
+[16x16/actions]
+Size=16
+Context=Actions
+Type=Fixed
+
+[16x16/apps]
+Size=16
+Context=Applications
+Type=Fixed
+
+[16x16/categories]
+Size=16
+Context=Categories
+Type=Fixed
+
+[16x16/devices]
+Size=16
+Context=Devices
+Type=Fixed
+
+[16x16/emblems]
+Size=16
+Context=Emblems
+Type=Fixed
+
+[16x16/emotes]
+Size=16
+Context=Emotes
+Type=Fixed
+
+[16x16/mimetypes]
+Size=16
+Context=MimeTypes
+Type=Fixed
+
+[16x16/places]
+Size=16
+Context=Places
+Type=Fixed
+
+[16x16/status]
+Size=16
+Context=Status
+Type=Fixed
+
+[22x22/actions]
+Size=22
+Context=Actions
+Type=Fixed
+
+[22x22/apps]
+Size=22
+Context=Applications
+Type=Fixed
+
+[22x22/categories]
+Size=22
+Context=Categories
+Type=Fixed
+
+[22x22/devices]
+Size=22
+Context=Devices
+Type=Fixed
+
+[22x22/emblems]
+Size=22
+Context=Emblems
+Type=Fixed
+
+[22x22/emotes]
+Size=22
+Context=Emotes
+Type=Fixed
+
+[22x22/mimetypes]
+Size=22
+Context=MimeTypes
+Type=Fixed
+
+[22x22/places]
+Size=22
+Context=Places
+Type=Fixed
+
+[22x22/status]
+Size=22
+Context=Status
+Type=Fixed
+
+[24x24/actions]
+Size=24
+Context=Actions
+Type=Fixed
+
+[24x24/apps]
+Size=24
+Context=Applications
+Type=Fixed
+
+[24x24/categories]
+Size=24
+Context=Categories
+Type=Fixed
+
+[24x24/devices]
+Size=24
+Context=Devices
+Type=Fixed
+
+[24x24/emblems]
+Size=24
+Context=Emblems
+Type=Fixed
+
+[24x24/emotes]
+Size=24
+Context=Emotes
+Type=Fixed
+
+[24x24/mimetypes]
+Size=24
+Context=MimeTypes
+Type=Fixed
+
+[24x24/places]
+Size=24
+Context=Places
+Type=Fixed
+
+[24x24/status]
+Size=24
+Context=Status
+Type=Fixed
+
+[32x32/actions]
+Size=32
+Context=Actions
+Type=Fixed
+
+[32x32/apps]
+Size=32
+Context=Applications
+Type=Fixed
+
+[32x32/categories]
+Size=32
+Context=Categories
+Type=Fixed
+
+[32x32/devices]
+Size=32
+Context=Devices
+Type=Fixed
+
+[32x32/emblems]
+Size=32
+Context=Emblems
+Type=Fixed
+
+[32x32/emotes]
+Size=32
+Context=Emotes
+Type=Fixed
+
+[32x32/mimetypes]
+Size=32
+Context=MimeTypes
+Type=Fixed
+
+[32x32/places]
+Size=32
+Context=Places
+Type=Fixed
+
+[32x32/status]
+Size=32
+Context=Status
+Type=Fixed
+
+[48x48/actions]
+Size=48
+Context=Actions
+Type=Fixed
+
+[48x48/apps]
+Size=48
+Context=Applications
+Type=Fixed
+
+[48x48/categories]
+Size=48
+Context=Categories
+Type=Fixed
+
+[48x48/devices]
+Size=48
+Context=Devices
+Type=Fixed
+
+[48x48/emblems]
+Size=48
+Context=Emblems
+Type=Fixed
+
+[48x48/emotes]
+Size=48
+Context=Emotes
+Type=Fixed
+
+[48x48/mimetypes]
+Size=48
+Context=MimeTypes
+Type=Fixed
+
+[48x48/places]
+Size=48
+Context=Places
+Type=Fixed
+
+[48x48/status]
+Size=48
+Context=Status
+Type=Fixed
+
+[64x64/actions]
+Size=64
+Context=Actions
+Type=Fixed
+
+[64x64/apps]
+Size=64
+Context=Applications
+Type=Fixed
+
+[64x64/categories]
+Size=64
+Context=Categories
+Type=Fixed
+
+[64x64/devices]
+Size=64
+Context=Devices
+Type=Fixed
+
+[64x64/emblems]
+Size=64
+Context=Emblems
+Type=Fixed
+
+[64x64/emotes]
+Size=64
+Context=Emotes
+Type=Fixed
+
+[64x64/mimetypes]
+Size=64
+Context=MimeTypes
+Type=Fixed
+
+[64x64/places]
+Size=64
+Context=Places
+Type=Fixed
+
+[64x64/status]
+Size=64
+Context=Status
+Type=Fixed
+
+[72x72/actions]
+Size=72
+Context=Actions
+Type=Fixed
+
+[72x72/apps]
+Size=72
+Context=Applications
+Type=Fixed
+
+[72x72/categories]
+Size=72
+Context=Categories
+Type=Fixed
+
+[72x72/devices]
+Size=72
+Context=Devices
+Type=Fixed
+
+[72x72/emblems]
+Size=72
+Context=Emblems
+Type=Fixed
+
+[72x72/emotes]
+Size=72
+Context=Emotes
+Type=Fixed
+
+[72x72/mimetypes]
+Size=72
+Context=MimeTypes
+Type=Fixed
+
+[72x72/places]
+Size=72
+Context=Places
+Type=Fixed
+
+[72x72/status]
+Size=72
+Context=Status
+Type=Fixed
+
+[96x96/actions]
+Size=96
+Context=Actions
+Type=Fixed
+
+[96x96/apps]
+Size=96
+Context=Applications
+Type=Fixed
+
+[96x96/categories]
+Size=96
+Context=Categories
+Type=Fixed
+
+[96x96/devices]
+Size=96
+Context=Devices
+Type=Fixed
+
+[96x96/emblems]
+Size=96
+Context=Emblems
+Type=Fixed
+
+[96x96/emotes]
+Size=96
+Context=Emotes
+Type=Fixed
+
+[96x96/mimetypes]
+Size=96
+Context=MimeTypes
+Type=Fixed
+
+[96x96/places]
+Size=96
+Context=Places
+Type=Fixed
+
+[96x96/status]
+Size=96
+Context=Status
+Type=Fixed
+
+[128x128/actions]
+Size=128
+Context=Actions
+Type=Fixed
+
+[128x128/apps]
+Size=128
+Context=Applications
+Type=Fixed
+
+[128x128/categories]
+Size=128
+Context=Categories
+Type=Fixed
+
+[128x128/devices]
+Size=128
+Context=Devices
+Type=Fixed
+
+[128x128/emblems]
+Size=128
+Context=Emblems
+Type=Fixed
+
+[128x128/emotes]
+Size=128
+Context=Emotes
+Type=Fixed
+
+[128x128/mimetypes]
+Size=128
+Context=MimeTypes
+Type=Fixed
+
+[128x128/places]
+Size=128
+Context=Places
+Type=Fixed
+
+[128x128/status]
+Size=128
+Context=Status
+Type=Fixed
+
+[scalable/actions]
+Size=48
+Context=Actions
+Type=Scalable
+MinSize=32
+MaxSize=256
+
+[scalable/apps]
+Size=48
+Context=Applications
+Type=Scalable
+MinSize=32
+MaxSize=256
+
+[scalable/categories]
+Size=48
+Context=Categories
+Type=Scalable
+MinSize=32
+MaxSize=256
+
+[scalable/devices]
+Size=48
+Context=Devices
+Type=Scalable
+MinSize=32
+MaxSize=256
+
+[scalable/emblems]
+Size=48
+Context=Emblems
+Type=Scalable
+MinSize=32
+MaxSize=256
+
+[scalable/emotes]
+Size=48
+Context=Emotes
+Type=Scalable
+Minsize=32
+MaxSize=256
+
+[scalable/mimetypes]
+Size=48
+Context=MimeTypes
+Type=Scalable
+MinSize=32
+MaxSize=256
+
+[scalable/places]
+Size=48
+Context=Places
+Type=Scalable
+MinSize=32
+MaxSize=256
+
+[scalable/status]
+Size=48
+Context=Status
+Type=Scalable
+MinSize=32
+MaxSize=256
diff --git a/tests/auto/gui/image/qicon/icons/themeparent/scalable/actions/address-book-new.svg b/tests/auto/gui/image/qicon/icons/themeparent/scalable/actions/address-book-new.svg
new file mode 100644
index 0000000..600a82c
--- /dev/null
+++ b/tests/auto/gui/image/qicon/icons/themeparent/scalable/actions/address-book-new.svg
@@ -0,0 +1,389 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<!-- Created with Inkscape (http://www.inkscape.org/) -->
+<svg
+   xmlns:dc="http://purl.org/dc/elements/1.1/"
+   xmlns:cc="http://creativecommons.org/ns#"
+   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
+   xmlns:svg="http://www.w3.org/2000/svg"
+   xmlns="http://www.w3.org/2000/svg"
+   xmlns:xlink="http://www.w3.org/1999/xlink"
+   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
+   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
+   width="48px"
+   height="48px"
+   id="svg1256"
+   sodipodi:version="0.32"
+   inkscape:version="0.46"
+   sodipodi:docbase="/home/jimmac/src/cvs/tango-icon-theme/scalable/actions"
+   sodipodi:docname="address-book-new.svg"
+   inkscape:output_extension="org.inkscape.output.svg.inkscape">
+  <defs
+     id="defs3">
+    <inkscape:perspective
+       sodipodi:type="inkscape:persp3d"
+       inkscape:vp_x="0 : 24 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_z="48 : 24 : 1"
+       inkscape:persp3d-origin="24 : 16 : 1"
+       id="perspective58" />
+    <linearGradient
+       inkscape:collect="always"
+       id="linearGradient5060">
+      <stop
+         style="stop-color:black;stop-opacity:1;"
+         offset="0"
+         id="stop5062" />
+      <stop
+         style="stop-color:black;stop-opacity:0;"
+         offset="1"
+         id="stop5064" />
+    </linearGradient>
+    <linearGradient
+       id="linearGradient5048">
+      <stop
+         style="stop-color:black;stop-opacity:0;"
+         offset="0"
+         id="stop5050" />
+      <stop
+         id="stop5056"
+         offset="0.5"
+         style="stop-color:black;stop-opacity:1;" />
+      <stop
+         style="stop-color:black;stop-opacity:0;"
+         offset="1"
+         id="stop5052" />
+    </linearGradient>
+    <linearGradient
+       id="linearGradient12512">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1.0000000;"
+         offset="0.0000000"
+         id="stop12513" />
+      <stop
+         style="stop-color:#fff520;stop-opacity:0.89108908;"
+         offset="0.50000000"
+         id="stop12517" />
+      <stop
+         style="stop-color:#fff300;stop-opacity:0.0000000;"
+         offset="1.0000000"
+         id="stop12514" />
+    </linearGradient>
+    <radialGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient12512"
+       id="radialGradient278"
+       gradientUnits="userSpaceOnUse"
+       cx="55.000000"
+       cy="125.00000"
+       fx="55.000000"
+       fy="125.00000"
+       r="14.375000" />
+    <linearGradient
+       inkscape:collect="always"
+       id="linearGradient2116">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="0"
+         id="stop2118" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0;"
+         offset="1"
+         id="stop2120" />
+    </linearGradient>
+    <linearGradient
+       id="linearGradient2094">
+      <stop
+         style="stop-color:#d6e3f0;stop-opacity:1.0000000;"
+         offset="0.0000000"
+         id="stop2096" />
+      <stop
+         style="stop-color:#95b1cf;stop-opacity:1.0000000;"
+         offset="1.0000000"
+         id="stop2098" />
+    </linearGradient>
+    <linearGradient
+       id="linearGradient2803">
+      <stop
+         id="stop2805"
+         offset="0"
+         style="stop-color:#ffffff;stop-opacity:1;" />
+      <stop
+         id="stop2807"
+         offset="1.0000000"
+         style="stop-color:#cbcbcb;stop-opacity:1.0000000;" />
+    </linearGradient>
+    <linearGradient
+       id="linearGradient2795">
+      <stop
+         id="stop2797"
+         offset="0.0000000"
+         style="stop-color:#000000;stop-opacity:0.068627454;" />
+      <stop
+         id="stop2799"
+         offset="1.0000000"
+         style="stop-color:#ffffff;stop-opacity:1.0000000;" />
+    </linearGradient>
+    <linearGradient
+       gradientUnits="userSpaceOnUse"
+       y2="4.9530048"
+       x2="41.219128"
+       y1="4.9530050"
+       x1="35.433035"
+       gradientTransform="matrix(0.254000,0.000000,1.822151e-16,3.759813,0.788629,0.148567)"
+       id="linearGradient2801"
+       xlink:href="#linearGradient2795"
+       inkscape:collect="always" />
+    <linearGradient
+       gradientUnits="userSpaceOnUse"
+       y2="84.287079"
+       x2="10.219901"
+       y1="93.338043"
+       x1="10.496115"
+       gradientTransform="matrix(2.262742,0.000000,0.000000,0.441942,1.000000,-0.875000)"
+       id="linearGradient2813"
+       xlink:href="#linearGradient2803"
+       inkscape:collect="always" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient2094"
+       id="linearGradient2100"
+       gradientTransform="matrix(0.957750,0.000000,0.000000,1.027989,1.000000,-0.571911)"
+       x1="6.5871811"
+       y1="22.132999"
+       x2="14.511404"
+       y2="22.132999"
+       gradientUnits="userSpaceOnUse" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient2116"
+       id="linearGradient2112"
+       gradientTransform="matrix(1.025428,0.000000,0.000000,0.957303,0.000000,-0.806758)"
+       x1="73.361984"
+       y1="26.652197"
+       x2="-2.7582901"
+       y2="21.270376"
+       gradientUnits="userSpaceOnUse" />
+    <radialGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient5060"
+       id="radialGradient5013"
+       gradientUnits="userSpaceOnUse"
+       cx="605.71429"
+       cy="486.64789"
+       fx="605.71429"
+       fy="486.64789"
+       r="117.14286"
+       gradientTransform="matrix(2.774389,0,0,1.969706,-1891.633,-872.8854)" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient5048"
+       id="linearGradient5016"
+       gradientUnits="userSpaceOnUse"
+       x1="302.85715"
+       y1="366.64789"
+       x2="302.85715"
+       y2="609.50507"
+       gradientTransform="matrix(2.774389,0,0,1.969706,-1892.179,-872.8854)" />
+    <radialGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient5060"
+       id="radialGradient5020"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(-2.774389,0,0,1.969706,112.7623,-872.8854)"
+       cx="605.71429"
+       cy="486.64789"
+       fx="605.71429"
+       fy="486.64789"
+       r="117.14286" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient5048"
+       id="linearGradient5027"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(2.774389,0,0,1.969706,-1892.179,-872.8854)"
+       x1="302.85715"
+       y1="366.64789"
+       x2="302.85715"
+       y2="609.50507" />
+    <radialGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient5060"
+       id="radialGradient5029"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(2.774389,0,0,1.969706,-1891.633,-872.8854)"
+       cx="605.71429"
+       cy="486.64789"
+       fx="605.71429"
+       fy="486.64789"
+       r="117.14286" />
+    <radialGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient5060"
+       id="radialGradient5031"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(-2.774389,0,0,1.969706,112.7623,-872.8854)"
+       cx="605.71429"
+       cy="486.64789"
+       fx="605.71429"
+       fy="486.64789"
+       r="117.14286" />
+  </defs>
+  <sodipodi:namedview
+     id="base"
+     pagecolor="#ffffff"
+     bordercolor="#666666"
+     borderopacity="0.27843137"
+     inkscape:pageopacity="0.0"
+     inkscape:pageshadow="2"
+     inkscape:zoom="1"
+     inkscape:cx="-111.52422"
+     inkscape:cy="10.167608"
+     inkscape:current-layer="layer1"
+     showgrid="false"
+     inkscape:grid-bbox="true"
+     inkscape:document-units="px"
+     inkscape:window-width="872"
+     inkscape:window-height="688"
+     inkscape:window-x="562"
+     inkscape:window-y="160"
+     fill="#ef2929"
+     stroke="#cc0000"
+     inkscape:showpageshadow="false" />
+  <metadata
+     id="metadata4">
+    <rdf:RDF>
+      <cc:Work
+         rdf:about="">
+        <dc:format>image/svg+xml</dc:format>
+        <dc:type
+           rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
+        <dc:title>Addess Book - New</dc:title>
+        <dc:date />
+        <dc:creator>
+          <cc:Agent>
+            <dc:title>Jakub Steiner</dc:title>
+          </cc:Agent>
+        </dc:creator>
+        <dc:source>http://jimmac.musichall.cz</dc:source>
+        <dc:subject>
+          <rdf:Bag>
+            <rdf:li>address</rdf:li>
+            <rdf:li>contact</rdf:li>
+            <rdf:li>book</rdf:li>
+          </rdf:Bag>
+        </dc:subject>
+        <cc:license
+           rdf:resource="http://creativecommons.org/licenses/publicdomain/" />
+      </cc:Work>
+      <cc:License
+         rdf:about="http://creativecommons.org/licenses/publicdomain/">
+        <cc:permits
+           rdf:resource="http://creativecommons.org/ns#Reproduction" />
+        <cc:permits
+           rdf:resource="http://creativecommons.org/ns#Distribution" />
+        <cc:permits
+           rdf:resource="http://creativecommons.org/ns#DerivativeWorks" />
+      </cc:License>
+    </rdf:RDF>
+  </metadata>
+  <g
+     id="layer1"
+     inkscape:label="Layer 1"
+     inkscape:groupmode="layer">
+    <path
+       style="opacity:1;color:#000000;fill:#edd400;fill-opacity:1;fill-rule:evenodd;stroke:#c4a000;stroke-width:1;stroke-linecap:round;stroke-linejoin:round;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"
+       d="M 33.096456,4.6520202 L 40.521077,4.6520202 C 41.228184,4.6520202 41.758513,4.8287969 41.93529,5.71268 L 42.819174,12.606972 C 42.907562,13.667632 42.443523,14.021185 41.493349,14.021185 L 32.919679,14.021185 L 33.096456,4.6520202 z "
+       id="path21630"
+       sodipodi:nodetypes="ccccccc" />
+    <path
+       sodipodi:nodetypes="ccccccc"
+       id="path21632"
+       d="M 34.10295,5.638875 L 40.463507,5.638875 C 40.771656,5.638875 40.940266,5.669037 40.986054,5.960473 L 41.777489,12.344449 C 41.847258,12.775421 41.959897,13.019804 41.637211,13.034341 L 33.963412,13.034341 L 34.10295,5.638875 z "
+       style="opacity:0.48538011;color:#000000;fill:none;fill-opacity:1;fill-rule:evenodd;stroke:#ffffff;stroke-width:1.0000006;stroke-linecap:round;stroke-linejoin:round;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible" />
+    <path
+       sodipodi:nodetypes="ccccccc"
+       id="path21634"
+       d="M 35.596456,12.40202 L 43.021077,12.40202 C 43.728184,12.40202 44.258513,12.578797 44.43529,13.46268 L 45.319174,20.356972 C 45.407562,21.417632 44.943523,21.771185 43.993349,21.771185 L 35.419679,21.771185 L 35.596456,12.40202 z "
+       style="opacity:1;color:#000000;fill:#9db029;fill-opacity:1;fill-rule:evenodd;stroke:#727e0a;stroke-width:1;stroke-linecap:round;stroke-linejoin:round;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible" />
+    <path
+       style="opacity:0.48538011;color:#000000;fill:none;fill-opacity:1;fill-rule:evenodd;stroke:#ffffff;stroke-width:1.0000006;stroke-linecap:round;stroke-linejoin:round;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"
+       d="M 36.60295,13.388875 L 42.963507,13.388875 C 43.271656,13.388875 43.440266,13.419037 43.486054,13.710473 L 44.277489,20.094449 C 44.347258,20.525421 44.459897,20.769804 44.137211,20.784341 L 36.463412,20.784341 L 36.60295,13.388875 z "
+       id="path21636"
+       sodipodi:nodetypes="ccccccc" />
+    <path
+       style="opacity:1;color:#000000;fill:#ef2929;fill-opacity:1;fill-rule:evenodd;stroke:#cc0000;stroke-width:0.99999988;stroke-linecap:round;stroke-linejoin:round;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"
+       d="M 36.06451,20.776498 L 44.50992,20.776498 C 45.314245,20.776498 45.917487,20.995896 46.118569,22.092882 L 47.123975,30.649381 C 47.224515,31.965765 46.696677,32.40456 45.615866,32.40456 L 35.863428,32.40456 L 36.06451,20.776498 z "
+       id="path21638"
+       sodipodi:nodetypes="ccccccc" />
+    <path
+       sodipodi:nodetypes="ccccccc"
+       id="path21640"
+       d="M 37.209384,21.763574 L 44.444435,21.763574 C 44.79495,21.763574 44.986742,21.801928 45.038825,22.172513 L 45.939072,30.290267 C 46.018433,30.838284 46.146559,31.149038 45.779508,31.167522 L 37.050661,31.167522 L 37.209384,21.763574 z "
+       style="opacity:0.48538011;color:#000000;fill:none;fill-opacity:1;fill-rule:evenodd;stroke:#ffffff;stroke-width:1.00000072;stroke-linecap:round;stroke-linejoin:round;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible" />
+    <g
+       id="g5022"
+       transform="matrix(2.165152e-2,0,0,4.307902e-2,43.08625,34.04509)">
+      <rect
+         y="-150.69685"
+         x="-1559.2523"
+         height="478.35718"
+         width="1339.6335"
+         id="rect4173"
+         style="opacity:0.40206185;color:black;fill:url(#linearGradient5027);fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1;stroke-linecap:round;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible" />
+      <path
+         sodipodi:nodetypes="cccc"
+         id="path5058"
+         d="M -219.61876,-150.68038 C -219.61876,-150.68038 -219.61876,327.65041 -219.61876,327.65041 C -76.744594,328.55086 125.78146,220.48075 125.78138,88.454235 C 125.78138,-43.572302 -33.655436,-150.68036 -219.61876,-150.68038 z "
+         style="opacity:0.40206185;color:black;fill:url(#radialGradient5029);fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1;stroke-linecap:round;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible" />
+      <path
+         style="opacity:0.40206185;color:black;fill:url(#radialGradient5031);fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1;stroke-linecap:round;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"
+         d="M -1559.2523,-150.68038 C -1559.2523,-150.68038 -1559.2523,327.65041 -1559.2523,327.65041 C -1702.1265,328.55086 -1904.6525,220.48075 -1904.6525,88.454235 C -1904.6525,-43.572302 -1745.2157,-150.68036 -1559.2523,-150.68038 z "
+         id="path5018"
+         sodipodi:nodetypes="cccc" />
+    </g>
+    <path
+       style="color:#000000;fill:#5b6b94;fill-opacity:1;fill-rule:nonzero;stroke:#364878;stroke-width:1.00000012;stroke-linecap:round;stroke-linejoin:round;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"
+       d="M 6.3643222,5.5185897 C 6.4551049,3.6036003 7.3719758,2.5542814 9.0788784,2.549044 L 38.405776,2.4590577 C 38.652361,2.4583011 38.974317,2.6592071 38.999012,2.9089888 L 42.257491,35.867228 L 40.942189,35.923862 L 41.571429,42.369516 C 41.632441,42.994499 41.390059,43.52882 40.5,43.533035 L 9.7893046,43.678474 C 7.25676,43.690468 4.6538454,41.59976 4.7759337,39.024403 L 6.3643222,5.5185897 z "
+       id="rect1408"
+       sodipodi:nodetypes="csssccsssss" />
+    <path
+       id="path2489"
+       d="M 40.125,34.875 L 10.9375,35 C 9.3809819,35.177868 8.125,36.39612 8.125,38 C 8.125,39.60388 9.3809819,40.822132 10.9375,41 L 40.125,41.125 L 40.125,41.0625 C 38.469378,40.984348 37.125,39.674851 37.125,38 C 37.125,36.325149 38.469378,35.015652 40.125,34.9375 L 40.125,34.875 z "
+       style="color:#000000;fill:url(#linearGradient2813);fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1;stroke-linecap:round;stroke-linejoin:round;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible" />
+    <path
+       sodipodi:nodetypes="ccccccssc"
+       id="path2784"
+       d="M 9.6875,2.8125 C 7.9805897,2.8125 7.050103,3.8215062 6.96875,5.6738658 L 5.3125,37.825772 C 5.22054,40.904199 7.1393732,42.654485 9.125,43.15625 C 4.875,41.525579 5.4375,34.164455 10.75,34.195222 L 41.648286,34.195222 L 38.335786,3.2432432 C 38.310025,3.0025304 37.987878,2.8125 37.742036,2.8125 L 9.6875,2.8125 z "
+       style="color:#000000;fill:url(#linearGradient2100);fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1;stroke-linecap:round;stroke-linejoin:round;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible" />
+    <rect
+       y="3.968539"
+       x="9.7886267"
+       height="29.604792"
+       width="2"
+       id="rect2793"
+       style="opacity:0.48044691;color:#000000;fill:url(#linearGradient2801);fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1;stroke-linecap:round;stroke-linejoin:round;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dashoffset:0;stroke-opacity:0.60818715;visibility:visible;display:inline;overflow:visible"
+       transform="matrix(1.000000,0.000000,-3.582731e-2,0.999358,0.000000,0.000000)" />
+    <path
+       style="color:#000000;fill:none;fill-opacity:1;fill-rule:nonzero;stroke:url(#linearGradient2112);stroke-width:1.00000012;stroke-linecap:round;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:20;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"
+       d="M 9.8751008,3.3336831 C 8.1912014,3.3336831 7.5384236,4.0658459 7.4581673,5.887831 L 6.1592633,35.777198 C 7.0925916,34.170451 8.5988591,33.594437 11.011665,33.594437 L 40.963081,33.594437 L 38.137179,3.7573631 C 38.114727,3.5203092 37.793961,3.3336831 37.551434,3.3336831 L 9.8751008,3.3336831 z "
+       id="path2104"
+       sodipodi:nodetypes="cccscssc" />
+    <path
+       style="font-size:12px;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;line-height:120.00000477%;writing-mode:lr-tb;text-anchor:start;fill:#ad7fa8;fill-opacity:1;stroke:none;stroke-width:1pt;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;font-family:Bitstream Vera Sans"
+       d="M 21.12553,18.381288 C 21.050283,19.50227 21.269376,20.384155 21.782812,21.026947 C 22.296751,21.661909 23.039741,21.979388 24.011788,21.979387 C 24.97597,21.979388 25.754005,21.65799 26.345892,21.01519 C 26.945589,20.372398 27.282799,19.49443 27.357529,18.381288 C 27.431173,17.283839 27.207372,16.413709 26.686123,15.770905 C 26.165371,15.120279 25.426826,14.794959 24.470482,14.79495 C 23.521952,14.794959 22.743917,15.11636 22.136378,15.759145 C 21.536656,16.401952 21.199707,17.275998 21.12553,18.381288 M 27.29793,21.897075 C 26.787062,22.500679 26.216183,22.947501 25.58529,23.237544 C 24.962734,23.519747 24.247754,23.66085 23.44035,23.660849 C 22.092032,23.66085 21.027197,23.174832 20.245835,22.202797 C 19.472826,21.222925 19.138938,19.949092 19.244172,18.381288 C 19.349395,16.813498 19.858197,15.539665 20.770584,14.559781 C 21.682954,13.579917 22.809375,13.089981 24.149854,13.089969 C 24.957257,13.089981 25.656689,13.238924 26.24815,13.536791 C 26.840107,13.826846 27.347352,14.269749 27.76988,14.865501 L 27.873267,13.325141 L 29.554732,13.325141 L 28.973868,21.979387 C 30.129917,21.806931 31.058551,21.285637 31.759769,20.415508 C 32.469312,19.537544 32.870659,18.404812 32.963808,17.017304 C 33.020082,16.178542 32.947536,15.390722 32.746168,14.653848 C 32.552597,13.916994 32.226018,13.235002 31.766435,12.607873 C 31.020085,11.580979 30.077151,10.79708 28.937625,10.256176 C 27.806428,9.707462 26.551007,9.433097 25.171361,9.433081 C 24.207151,9.433097 23.27347,9.56244 22.370314,9.821111 C 21.467662,10.071974 20.623234,10.448244 19.837027,10.949925 C 18.552629,11.749517 17.517932,12.79994 16.732929,14.101199 C 15.956279,15.394643 15.517185,16.797819 15.415642,18.310738 C 15.331983,19.557142 15.476998,20.725151 15.85069,21.814765 C 16.232213,22.904387 16.822316,23.864664 17.621,24.695594 C 18.389368,25.51085 19.300238,26.130129 20.353615,26.553435 C 21.406448,26.984578 22.54823,27.20015 23.778962,27.200153 C 24.790178,27.20015 25.793384,27.027692 26.788584,26.682781 C 27.791068,26.345701 28.72125,25.859684 29.579139,25.224728 L 30.549801,26.529919 C 29.518874,27.2903 28.409917,27.870384 27.222932,28.270174 C 26.043227,28.677799 24.857618,28.881612 23.666104,28.881616 C 22.215881,28.881612 20.865341,28.622926 19.614483,28.105557 C 18.36308,27.596019 17.268571,26.851316 16.330955,25.871444 C 15.393328,24.89157 14.705054,23.758838 14.266133,22.47324 C 13.827731,21.179813 13.658252,19.792311 13.757696,18.310738 C 13.853452,16.88405 14.211263,15.523986 14.831129,14.230542 C 15.450993,12.937121 16.287663,11.800469 17.34115,10.820582 C 18.419191,9.825045 19.638236,9.0646655 20.998287,8.5394366 C 22.358842,8.0064001 23.779908,7.7398759 25.261489,7.7398585 C 26.923341,7.7398759 28.440813,8.080872 29.813913,8.7628469 C 31.194815,9.444854 32.325282,10.41297 33.205316,11.667193 C 33.741656,12.435425 34.132443,13.270279 34.377679,14.171752 C 34.630708,15.073243 34.724877,16.006082 34.660187,16.970271 C 34.521787,19.031929 33.789414,20.658519 32.463064,21.850041 C 31.136671,23.04157 29.374449,23.66085 27.17639,23.707883 L 27.29793,21.897075"
+       id="text21625" />
+    <path
+       sodipodi:type="arc"
+       style="color:#000000;fill:url(#radialGradient278);fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1.25000024;stroke-linecap:butt;stroke-linejoin:round;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:block"
+       id="path12511"
+       sodipodi:cx="55"
+       sodipodi:cy="125"
+       sodipodi:rx="14.375"
+       sodipodi:ry="14.375"
+       d="M 69.375 125 A 14.375 14.375 0 1 1  40.625,125 A 14.375 14.375 0 1 1  69.375 125 z"
+       transform="matrix(0.611127,0.000000,0.000000,0.611127,-24.94992,-67.63529)"
+       inkscape:export-filename="/home/jimmac/ximian_art/icons/nautilus/suse93/stock_new-16.png"
+       inkscape:export-xdpi="33.852203"
+       inkscape:export-ydpi="33.852203" />
+  </g>
+</svg>
diff --git a/tests/auto/gui/image/qicon/icons/themeparent/scalable/actions/appointment-new.svg b/tests/auto/gui/image/qicon/icons/themeparent/scalable/actions/appointment-new.svg
new file mode 100644
index 0000000..4cb14f8
--- /dev/null
+++ b/tests/auto/gui/image/qicon/icons/themeparent/scalable/actions/appointment-new.svg
@@ -0,0 +1,425 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<!-- Created with Inkscape (http://www.inkscape.org/) -->
+<svg
+   xmlns:dc="http://purl.org/dc/elements/1.1/"
+   xmlns:cc="http://creativecommons.org/ns#"
+   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
+   xmlns:svg="http://www.w3.org/2000/svg"
+   xmlns="http://www.w3.org/2000/svg"
+   xmlns:xlink="http://www.w3.org/1999/xlink"
+   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
+   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
+   inkscape:export-ydpi="90.000000"
+   inkscape:export-xdpi="90.000000"
+   inkscape:export-filename="/home/jimmac/Desktop/wi-fi.png"
+   width="48px"
+   height="48px"
+   id="svg11300"
+   sodipodi:version="0.32"
+   inkscape:version="0.46"
+   sodipodi:docbase="/home/tigert/cvs/freedesktop.org/tango-icon-theme/scalable/actions"
+   sodipodi:docname="appointment-new.svg"
+   inkscape:output_extension="org.inkscape.output.svg.inkscape">
+  <defs
+     id="defs3">
+    <inkscape:perspective
+       sodipodi:type="inkscape:persp3d"
+       inkscape:vp_x="0 : 24 : 1"
+       inkscape:vp_y="0 : 1000 : 0"
+       inkscape:vp_z="48 : 24 : 1"
+       inkscape:persp3d-origin="24 : 16 : 1"
+       id="perspective59" />
+    <linearGradient
+       inkscape:collect="always"
+       id="linearGradient5204">
+      <stop
+         style="stop-color:#c4a000;stop-opacity:1;"
+         offset="0"
+         id="stop5206" />
+      <stop
+         style="stop-color:#c4a000;stop-opacity:0;"
+         offset="1"
+         id="stop5208" />
+    </linearGradient>
+    <linearGradient
+       inkscape:collect="always"
+       id="linearGradient5196">
+      <stop
+         style="stop-color:#c4a000;stop-opacity:1;"
+         offset="0"
+         id="stop5198" />
+      <stop
+         style="stop-color:#c4a000;stop-opacity:0;"
+         offset="1"
+         id="stop5200" />
+    </linearGradient>
+    <linearGradient
+       id="linearGradient12512">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1.0000000;"
+         offset="0.0000000"
+         id="stop12513" />
+      <stop
+         style="stop-color:#fff520;stop-opacity:0.89108908;"
+         offset="0.50000000"
+         id="stop12517" />
+      <stop
+         style="stop-color:#fff300;stop-opacity:0.0000000;"
+         offset="1.0000000"
+         id="stop12514" />
+    </linearGradient>
+    <radialGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient12512"
+       id="radialGradient278"
+       gradientUnits="userSpaceOnUse"
+       cx="55.000000"
+       cy="125.00000"
+       fx="55.000000"
+       fy="125.00000"
+       r="14.375000" />
+    <linearGradient
+       id="linearGradient10653">
+      <stop
+         style="stop-color:#f3f4ff;stop-opacity:1.0000000;"
+         offset="0.0000000"
+         id="stop10655" />
+      <stop
+         style="stop-color:#9193af;stop-opacity:1.0000000;"
+         offset="1.0000000"
+         id="stop10657" />
+    </linearGradient>
+    <linearGradient
+       id="linearGradient42174">
+      <stop
+         style="stop-color:#a0a0a0;stop-opacity:1.0000000;"
+         offset="0.0000000"
+         id="stop42176" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1.0000000;"
+         offset="1.0000000"
+         id="stop42178" />
+    </linearGradient>
+    <linearGradient
+       id="linearGradient2145">
+      <stop
+         style="stop-color:#fffffd;stop-opacity:1.0000000;"
+         offset="0.0000000"
+         id="stop2147" />
+      <stop
+         style="stop-color:#cbcbc9;stop-opacity:1.0000000;"
+         offset="1.0000000"
+         id="stop2149" />
+    </linearGradient>
+    <linearGradient
+       id="linearGradient37935">
+      <stop
+         id="stop37937"
+         offset="0.0000000"
+         style="stop-color:#9497b3;stop-opacity:1.0000000;" />
+      <stop
+         id="stop37939"
+         offset="1.0000000"
+         style="stop-color:#4c4059;stop-opacity:1.0000000;" />
+    </linearGradient>
+    <linearGradient
+       id="linearGradient2152">
+      <stop
+         id="stop2154"
+         offset="0.0000000"
+         style="stop-color:#9aa29a;stop-opacity:1.0000000;" />
+      <stop
+         id="stop2156"
+         offset="1.0000000"
+         style="stop-color:#b5beb5;stop-opacity:1.0000000;" />
+    </linearGradient>
+    <linearGradient
+       inkscape:collect="always"
+       id="linearGradient3816">
+      <stop
+         style="stop-color:#000000;stop-opacity:1;"
+         offset="0"
+         id="stop3818" />
+      <stop
+         style="stop-color:#000000;stop-opacity:0;"
+         offset="1"
+         id="stop3820" />
+    </linearGradient>
+    <radialGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient3816"
+       id="radialGradient3822"
+       cx="31.112698"
+       cy="19.008621"
+       fx="31.112698"
+       fy="19.008621"
+       r="8.6620579"
+       gradientUnits="userSpaceOnUse" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient2152"
+       id="linearGradient4307"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(3.123841,0.000000,0.000000,0.969691,-31.88758,-19.59492)"
+       x1="8.9156475"
+       y1="37.197018"
+       x2="9.8855033"
+       y2="52.090678" />
+    <radialGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient10653"
+       id="radialGradient4309"
+       gradientUnits="userSpaceOnUse"
+       cx="11.329200"
+       cy="10.583970"
+       fx="11.329200"
+       fy="10.583970"
+       r="15.532059" />
+    <radialGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient2145"
+       id="radialGradient4311"
+       gradientUnits="userSpaceOnUse"
+       cx="11.901996"
+       cy="10.045444"
+       fx="11.901996"
+       fy="10.045444"
+       r="29.292715" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient42174"
+       id="linearGradient4313"
+       gradientUnits="userSpaceOnUse"
+       x1="6.3422160"
+       y1="7.7893324"
+       x2="22.218424"
+       y2="25.884274" />
+    <radialGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient5196"
+       id="radialGradient5202"
+       cx="23.375"
+       cy="10.972863"
+       fx="23.375"
+       fy="10.972863"
+       r="3.3478092"
+       gradientTransform="matrix(3.630420,1.654030e-15,-1.608743e-15,3.742066,-61.48607,-29.18618)"
+       gradientUnits="userSpaceOnUse" />
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient5204"
+       id="linearGradient5210"
+       x1="19.667364"
+       y1="4.2570662"
+       x2="20.329933"
+       y2="5.2845874"
+       gradientUnits="userSpaceOnUse" />
+    <radialGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient37935"
+       id="radialGradient5212"
+       gradientUnits="userSpaceOnUse"
+       cx="8.7468252"
+       cy="6.8283234"
+       fx="8.7468252"
+       fy="6.8283234"
+       r="29.889715" />
+  </defs>
+  <sodipodi:namedview
+     stroke="#c4a000"
+     fill="#babdb6"
+     id="base"
+     pagecolor="#ffffff"
+     bordercolor="#666666"
+     borderopacity="0.25490196"
+     inkscape:pageopacity="0.0"
+     inkscape:pageshadow="2"
+     inkscape:zoom="11.313708"
+     inkscape:cx="13.2248"
+     inkscape:cy="25.106052"
+     inkscape:current-layer="layer1"
+     showgrid="false"
+     inkscape:grid-bbox="true"
+     inkscape:document-units="px"
+     inkscape:showpageshadow="false"
+     inkscape:window-width="833"
+     inkscape:window-height="772"
+     inkscape:window-x="305"
+     inkscape:window-y="76" />
+  <metadata
+     id="metadata4">
+    <rdf:RDF>
+      <cc:Work
+         rdf:about="">
+        <dc:format>image/svg+xml</dc:format>
+        <dc:type
+           rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
+        <dc:creator>
+          <cc:Agent>
+            <dc:title>Jakub Steiner</dc:title>
+          </cc:Agent>
+        </dc:creator>
+        <dc:source>http://jimmac.musichall.cz</dc:source>
+        <cc:license
+           rdf:resource="http://creativecommons.org/licenses/publicdomain/" />
+        <dc:title>New Appointment</dc:title>
+        <dc:subject>
+          <rdf:Bag>
+            <rdf:li>appointment</rdf:li>
+            <rdf:li>new</rdf:li>
+            <rdf:li>meeting</rdf:li>
+            <rdf:li>rvsp</rdf:li>
+          </rdf:Bag>
+        </dc:subject>
+      </cc:Work>
+      <cc:License
+         rdf:about="http://creativecommons.org/licenses/publicdomain/">
+        <cc:permits
+           rdf:resource="http://creativecommons.org/ns#Reproduction" />
+        <cc:permits
+           rdf:resource="http://creativecommons.org/ns#Distribution" />
+        <cc:permits
+           rdf:resource="http://creativecommons.org/ns#DerivativeWorks" />
+      </cc:License>
+    </rdf:RDF>
+  </metadata>
+  <g
+     id="layer1"
+     inkscape:label="Layer 1"
+     inkscape:groupmode="layer">
+    <path
+       d="M 39.774755 19.008621 A 8.6620579 8.6620579 0 1 1  22.45064,19.008621 A 8.6620579 8.6620579 0 1 1  39.774755 19.008621 z"
+       sodipodi:ry="8.6620579"
+       sodipodi:rx="8.6620579"
+       sodipodi:cy="19.008621"
+       sodipodi:cx="31.112698"
+       id="path4318"
+       style="opacity:1;color:#000000;fill:url(#radialGradient3822);fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:round;stroke-linejoin:round;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"
+       sodipodi:type="arc"
+       transform="matrix(2.563158,0.000000,0.000000,1.219602,-55.98414,14.04144)" />
+    <path
+       sodipodi:nodetypes="cccc"
+       id="path14341"
+       d="M 18.587591,1.403729 L 4.226755,18.096665 L 5.4854717,19.339844 L 18.587591,1.403729 z "
+       style="color:#000000;fill:url(#linearGradient4307);fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible" />
+    <path
+       sodipodi:nodetypes="cccc"
+       id="path18921"
+       d="M 18.467176,1.3138035 L 5.6605716,19.072612 L 7.4900985,20.687913 L 18.467176,1.3138035 z "
+       style="fill:#fefefe;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1" />
+    <path
+       transform="matrix(1.431529,0.000000,0.000000,1.431529,0.569459,-1.654618)"
+       d="M 31.160714 16.910715 A 14.910714 14.910714 0 1 1  1.3392859,16.910715 A 14.910714 14.910714 0 1 1  31.160714 16.910715 z"
+       sodipodi:ry="14.910714"
+       sodipodi:rx="14.910714"
+       sodipodi:cy="16.910715"
+       sodipodi:cx="16.25"
+       id="path27786"
+       style="fill:url(#radialGradient5212);fill-opacity:1;fill-rule:evenodd;stroke:#605773;stroke-width:0.69855404;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dashoffset:0;stroke-opacity:1"
+       sodipodi:type="arc" />
+    <path
+       transform="matrix(1.163838,0.000000,0.000000,1.163838,4.824801,2.777556)"
+       d="M 31.160714 16.910715 A 14.910714 14.910714 0 1 1  1.3392859,16.910715 A 14.910714 14.910714 0 1 1  31.160714 16.910715 z"
+       sodipodi:ry="14.910714"
+       sodipodi:rx="14.910714"
+       sodipodi:cy="16.910715"
+       sodipodi:cx="16.25"
+       id="path35549"
+       style="fill:url(#radialGradient4311);fill-opacity:1;fill-rule:evenodd;stroke:url(#linearGradient4313);stroke-width:0.71139598;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dashoffset:0;stroke-opacity:1"
+       sodipodi:type="arc" />
+    <path
+       sodipodi:type="arc"
+       style="opacity:1;color:#000000;fill:url(#radialGradient5202);fill-opacity:1;fill-rule:evenodd;stroke:url(#linearGradient5210);stroke-width:0.56498736;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"
+       id="path4120"
+       sodipodi:cx="23.375"
+       sodipodi:cy="11.875"
+       sodipodi:rx="8.5"
+       sodipodi:ry="8.5"
+       d="M 16.679382,6.6387137 A 8.5,8.5 0 0 1 23.332691,3.3751053 L 23.375,11.875 z"
+       transform="matrix(1.769951,0.000000,0.000000,1.769951,-17.02424,1.610741)"
+       sodipodi:start="3.8052902"
+       sodipodi:end="4.7074114" />
+    <path
+       transform="matrix(2.073295,0.000000,0.000000,2.073295,-7.310224,-13.13682)"
+       d="M 16.40625 17.28125 A 1.21875 1.21875 0 1 1  13.96875,17.28125 A 1.21875 1.21875 0 1 1  16.40625 17.28125 z"
+       sodipodi:ry="1.21875"
+       sodipodi:rx="1.21875"
+       sodipodi:cy="17.28125"
+       sodipodi:cx="15.1875"
+       id="path34778"
+       style="fill:#f3f3f3;fill-opacity:1;fill-rule:evenodd;stroke:#000000;stroke-width:0.48232403;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dashoffset:0;stroke-opacity:1;stroke-dasharray:none"
+       sodipodi:type="arc" />
+    <path
+       id="path35559"
+       d="M 22.176614,20.718014 L 13.155702,13.140282"
+       style="fill:none;fill-opacity:0.75;fill-rule:evenodd;stroke:#000000;stroke-width:1;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none" />
+    <path
+       id="path35561"
+       d="M 19.408614,29.776506 L 22.368655,25.283228"
+       style="fill:none;fill-opacity:0.75;fill-rule:evenodd;stroke:#000000;stroke-width:2;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
+       sodipodi:nodetypes="cc" />
+    <path
+       transform="matrix(2.749493,0.000000,0.000000,2.749493,-22.30073,-12.40939)"
+       d="M 17.324117 7.6932044 A 0.61871845 0.61871845 0 1 1  16.08668,7.6932044 A 0.61871845 0.61871845 0 1 1  17.324117 7.6932044 z"
+       sodipodi:ry="0.61871845"
+       sodipodi:rx="0.61871845"
+       sodipodi:cy="7.6932044"
+       sodipodi:cx="16.705399"
+       id="path35563"
+       style="fill:#b6b9b1;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1.36871839;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dashoffset:0;stroke-opacity:1;opacity:1"
+       sodipodi:type="arc" />
+    <path
+       transform="matrix(2.749493,0.000000,0.000000,2.749493,-22.30073,14.80922)"
+       d="M 17.324117 7.6932044 A 0.61871845 0.61871845 0 1 1  16.08668,7.6932044 A 0.61871845 0.61871845 0 1 1  17.324117 7.6932044 z"
+       sodipodi:ry="0.61871845"
+       sodipodi:rx="0.61871845"
+       sodipodi:cy="7.6932044"
+       sodipodi:cx="16.705399"
+       id="path35565"
+       style="fill:#b6b9b1;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1.36871839;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dashoffset:0;stroke-opacity:1;opacity:1"
+       sodipodi:type="arc" />
+    <path
+       transform="matrix(2.749493,0.000000,0.000000,2.749493,-35.91004,1.199890)"
+       d="M 17.324117 7.6932044 A 0.61871845 0.61871845 0 1 1  16.08668,7.6932044 A 0.61871845 0.61871845 0 1 1  17.324117 7.6932044 z"
+       sodipodi:ry="0.61871845"
+       sodipodi:rx="0.61871845"
+       sodipodi:cy="7.6932044"
+       sodipodi:cx="16.705399"
+       id="path35567"
+       style="fill:#b6b9b1;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1.36871839;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dashoffset:0;stroke-opacity:1;opacity:1"
+       sodipodi:type="arc" />
+    <path
+       transform="matrix(2.749493,0.000000,0.000000,2.749493,-8.691448,1.199890)"
+       d="M 17.324117 7.6932044 A 0.61871845 0.61871845 0 1 1  16.08668,7.6932044 A 0.61871845 0.61871845 0 1 1  17.324117 7.6932044 z"
+       sodipodi:ry="0.61871845"
+       sodipodi:rx="0.61871845"
+       sodipodi:cy="7.6932044"
+       sodipodi:cx="16.705399"
+       id="path35569"
+       style="fill:#b6b9b1;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1.36871839;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dashoffset:0;stroke-opacity:1;opacity:1"
+       sodipodi:type="arc" />
+    <path
+       sodipodi:type="arc"
+       style="fill:none;fill-opacity:1;fill-rule:evenodd;stroke:url(#radialGradient4309);stroke-width:0.73656511;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dashoffset:0;stroke-opacity:1"
+       id="path10651"
+       sodipodi:cx="16.25"
+       sodipodi:cy="16.910715"
+       sodipodi:rx="14.910714"
+       sodipodi:ry="14.910714"
+       d="M 31.160714 16.910715 A 14.910714 14.910714 0 1 1  1.3392859,16.910715 A 14.910714 14.910714 0 1 1  31.160714 16.910715 z"
+       transform="matrix(1.357654,0.000000,0.000000,1.357654,1.769896,-0.493735)" />
+    <path
+       sodipodi:type="arc"
+       style="color:#000000;fill:url(#radialGradient278);fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1.25000024;stroke-linecap:butt;stroke-linejoin:round;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:block"
+       id="path12511"
+       sodipodi:cx="55"
+       sodipodi:cy="125"
+       sodipodi:rx="14.375"
+       sodipodi:ry="14.375"
+       d="M 69.375 125 A 14.375 14.375 0 1 1  40.625,125 A 14.375 14.375 0 1 1  69.375 125 z"
+       transform="matrix(0.611127,0.000000,0.000000,0.611127,5.544052,-66.92818)"
+       inkscape:export-filename="/home/jimmac/ximian_art/icons/nautilus/suse93/stock_new-16.png"
+       inkscape:export-xdpi="33.852203"
+       inkscape:export-ydpi="33.852203" />
+  </g>
+</svg>
diff --git a/tests/auto/gui/image/qicon/image.png b/tests/auto/gui/image/qicon/image.png
new file mode 100644
index 0000000..8d70364
Binary files /dev/null and b/tests/auto/gui/image/qicon/image.png differ
diff --git a/tests/auto/gui/image/qicon/qicon.pro b/tests/auto/gui/image/qicon/qicon.pro
new file mode 100644
index 0000000..c44c080
--- /dev/null
+++ b/tests/auto/gui/image/qicon/qicon.pro
@@ -0,0 +1,12 @@
+CONFIG += testcase
+TARGET = tst_qicon
+
+QT += widgets testlib
+SOURCES += tst_qicon.cpp
+RESOURCES = tst_qicon.qrc
+
+wince* {
+   QT += xml svg
+   DEPLOYMENT_PLUGIN += qsvg
+}
+TESTDATA += icons/* *.png *.svg *.svgz
diff --git a/tests/auto/gui/image/qicon/rect.png b/tests/auto/gui/image/qicon/rect.png
new file mode 100644
index 0000000..b5d3ecb
Binary files /dev/null and b/tests/auto/gui/image/qicon/rect.png differ
diff --git a/tests/auto/gui/image/qicon/tst_qicon.cpp b/tests/auto/gui/image/qicon/tst_qicon.cpp
new file mode 100644
index 0000000..cca0887
--- /dev/null
+++ b/tests/auto/gui/image/qicon/tst_qicon.cpp
@@ -0,0 +1,637 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/
+**
+** This file is part of the test suite of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** GNU Lesser General Public License Usage
+** This file may be used under the terms of the GNU Lesser General Public
+** License version 2.1 as published by the Free Software Foundation and
+** appearing in the file LICENSE.LGPL included in the packaging of this
+** file. Please review the following information to ensure the GNU Lesser
+** General Public License version 2.1 requirements will be met:
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** In addition, as a special exception, Nokia gives you certain additional
+** rights. These rights are described in the Nokia Qt LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU General
+** Public License version 3.0 as published by the Free Software Foundation
+** and appearing in the file LICENSE.GPL included in the packaging of this
+** file. Please review the following information to ensure the GNU General
+** Public License version 3.0 requirements will be met:
+** http://www.gnu.org/copyleft/gpl.html.
+**
+** Other Usage
+** Alternatively, this file may be used in accordance with the terms and
+** conditions contained in a signed written agreement between you and Nokia.
+**
+**
+**
+**
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+
+#include <QtTest/QtTest>
+#include <QImageReader>
+#include <qicon.h>
+#include <qiconengine.h>
+
+Q_DECLARE_METATYPE(QSize)
+
+class tst_QIcon : public QObject
+{
+    Q_OBJECT
+public:
+    tst_QIcon();
+
+private slots:
+    void actualSize_data(); // test with 1 pixmap
+    void actualSize();
+    void actualSize2_data(); // test with 2 pixmaps with different aspect ratio
+    void actualSize2();
+    void isNull();
+    void swap();
+    void bestMatch();
+    void cacheKey();
+    void detach();
+    void addFile();
+    void availableSizes();
+    void name();
+    void streamAvailableSizes_data();
+    void streamAvailableSizes();
+    void fromTheme();
+
+    void task184901_badCache();
+    void task223279_inconsistentAddFile();
+
+private:
+    bool haveImageFormat(QByteArray const&);
+
+    const static QIcon staticIcon;
+};
+
+// Creating an icon statically should not cause a crash. 
+// But we do not officially support this. See QTBUG-8666
+const QIcon tst_QIcon::staticIcon = QIcon::fromTheme("edit-find");
+
+bool tst_QIcon::haveImageFormat(QByteArray const& desiredFormat)
+{
+    return QImageReader::supportedImageFormats().contains(desiredFormat);
+}
+
+tst_QIcon::tst_QIcon()
+{
+}
+
+void tst_QIcon::actualSize_data()
+{
+    QTest::addColumn<QString>("source");
+    QTest::addColumn<QSize>("argument");
+    QTest::addColumn<QSize>("result");
+
+    // square image
+    QTest::newRow("resource0") << ":/image.png" << QSize(128, 128) << QSize(128, 128);
+    QTest::newRow("resource1") << ":/image.png" << QSize( 64,  64) << QSize( 64,  64);
+    QTest::newRow("resource2") << ":/image.png" << QSize( 32,  64) << QSize( 32,  32);
+    QTest::newRow("resource3") << ":/image.png" << QSize( 16,  64) << QSize( 16,  16);
+    QTest::newRow("resource4") << ":/image.png" << QSize( 16,  128) << QSize( 16,  16);
+    QTest::newRow("resource5") << ":/image.png" << QSize( 128,  16) << QSize( 16,  16);
+    QTest::newRow("resource6") << ":/image.png" << QSize( 150,  150) << QSize( 128,  128);
+    // rect image
+    QTest::newRow("resource7") << ":/rect.png" << QSize( 20,  40) << QSize( 20,  40);
+    QTest::newRow("resource8") << ":/rect.png" << QSize( 10,  20) << QSize( 10,  20);
+    QTest::newRow("resource9") << ":/rect.png" << QSize( 15,  50) << QSize( 15,  30);
+    QTest::newRow("resource10") << ":/rect.png" << QSize( 25,  50) << QSize( 20,  40);
+
+    const QString prefix = QFileInfo(QFINDTESTDATA("icons")).absolutePath() + "/";
+    QTest::newRow("external0") << prefix + "image.png" << QSize(128, 128) << QSize(128, 128);
+    QTest::newRow("external1") << prefix + "image.png" << QSize( 64,  64) << QSize( 64,  64);
+    QTest::newRow("external2") << prefix + "image.png" << QSize( 32,  64) << QSize( 32,  32);
+    QTest::newRow("external3") << prefix + "image.png" << QSize( 16,  64) << QSize( 16,  16);
+    QTest::newRow("external4") << prefix + "image.png" << QSize( 16,  128) << QSize( 16,  16);
+    QTest::newRow("external5") << prefix + "image.png" << QSize( 128,  16) << QSize( 16,  16);
+    QTest::newRow("external6") << prefix + "image.png" << QSize( 150,  150) << QSize( 128,  128);
+    // rect image
+    QTest::newRow("external7") << ":/rect.png" << QSize( 20,  40) << QSize( 20,  40);
+    QTest::newRow("external8") << ":/rect.png" << QSize( 10,  20) << QSize( 10,  20);
+    QTest::newRow("external9") << ":/rect.png" << QSize( 15,  50) << QSize( 15,  30);
+    QTest::newRow("external10") << ":/rect.png" << QSize( 25,  50) << QSize( 20,  40);
+}
+
+void tst_QIcon::actualSize()
+{
+    QFETCH(QString, source);
+    QFETCH(QSize, argument);
+    QFETCH(QSize, result);
+
+    {
+        QPixmap pixmap(source);
+        QIcon icon(pixmap);
+        QCOMPARE(icon.actualSize(argument), result);
+        QCOMPARE(icon.pixmap(argument).size(), result);
+    }
+
+    {
+        QIcon icon(source);
+        QCOMPARE(icon.actualSize(argument), result);
+        QCOMPARE(icon.pixmap(argument).size(), result);
+    }
+}
+
+void tst_QIcon::actualSize2_data()
+{
+    QTest::addColumn<QSize>("argument");
+    QTest::addColumn<QSize>("result");
+
+    // two images - 128x128 and 20x40. Let the games begin
+    QTest::newRow("trivial1") << QSize( 128,  128) << QSize( 128,  128);
+    QTest::newRow("trivial2") << QSize( 20,  40) << QSize( 20,  40);
+
+    // QIcon chooses the one with the smallest area to choose the pixmap
+    QTest::newRow("best1") << QSize( 100,  100) << QSize( 100,  100);
+    QTest::newRow("best2") << QSize( 20,  20) << QSize( 10,  20);
+    QTest::newRow("best3") << QSize( 15,  30) << QSize( 15,  30);
+    QTest::newRow("best4") << QSize( 5,  5) << QSize( 2,  5);
+    QTest::newRow("best5") << QSize( 10,  15) << QSize( 7,  15);
+}
+
+void tst_QIcon::actualSize2()
+{
+    QIcon icon;
+    const QString prefix = QFileInfo(QFINDTESTDATA("icons")).absolutePath() + "/";
+
+    icon.addPixmap(QPixmap(prefix + "image.png"));
+    icon.addPixmap(QPixmap(prefix + "rect.png"));
+
+    QFETCH(QSize, argument);
+    QFETCH(QSize, result);
+
+    QCOMPARE(icon.actualSize(argument), result);
+    QCOMPARE(icon.pixmap(argument).size(), result);
+}
+
+void tst_QIcon::isNull() {
+    // test default constructor
+    QIcon defaultConstructor;
+    QVERIFY(defaultConstructor.isNull());
+
+    // test copy constructor
+    QVERIFY(QIcon(defaultConstructor).isNull());
+
+    // test pixmap constructor
+    QPixmap nullPixmap;
+    QVERIFY(QIcon(nullPixmap).isNull());
+
+    // test string constructor with empty string
+    QIcon iconEmptyString = QIcon(QString());
+    QVERIFY(iconEmptyString.isNull());
+    QVERIFY(!iconEmptyString.actualSize(QSize(32, 32)).isValid());;
+
+    // test string constructor with non-existing file
+    QIcon iconNoFile = QIcon("imagedoesnotexist");
+    QVERIFY(!iconNoFile.isNull());
+    QVERIFY(!iconNoFile.actualSize(QSize(32, 32)).isValid());
+
+    // test string constructor with non-existing file with suffix
+    QIcon iconNoFileSuffix = QIcon("imagedoesnotexist.png");
+    QVERIFY(!iconNoFileSuffix.isNull());
+    QVERIFY(!iconNoFileSuffix.actualSize(QSize(32, 32)).isValid());
+
+    const QString prefix = QFileInfo(QFINDTESTDATA("icons")).absolutePath() + "/";
+    // test string constructor with existing file but unsupported format
+    QIcon iconUnsupportedFormat = QIcon(prefix + "tst_qicon.cpp");
+    QVERIFY(!iconUnsupportedFormat.isNull());
+    QVERIFY(!iconUnsupportedFormat.actualSize(QSize(32, 32)).isValid());
+
+    // test string constructor with existing file and supported format
+    QIcon iconSupportedFormat = QIcon(prefix + "image.png");
+    QVERIFY(!iconSupportedFormat.isNull());
+    QVERIFY(iconSupportedFormat.actualSize(QSize(32, 32)).isValid());
+}
+
+void tst_QIcon::swap()
+{
+    QPixmap p1(1, 1), p2(2, 2);
+    p1.fill(Qt::black);
+    p2.fill(Qt::black);
+
+    QIcon i1(p1), i2(p2);
+    const qint64 i1k = i1.cacheKey();
+    const qint64 i2k = i2.cacheKey();
+    QVERIFY(i1k != i2k);
+    i1.swap(i2);
+    QCOMPARE(i1.cacheKey(), i2k);
+    QCOMPARE(i2.cacheKey(), i1k);
+}
+
+void tst_QIcon::bestMatch()
+{
+    QPixmap p1(1, 1);
+    QPixmap p2(2, 2);
+    QPixmap p3(3, 3);
+    QPixmap p4(4, 4);
+    QPixmap p5(5, 5);
+    QPixmap p6(6, 6);
+    QPixmap p7(7, 7);
+    QPixmap p8(8, 8);
+
+    p1.fill(Qt::black);
+    p2.fill(Qt::black);
+    p3.fill(Qt::black);
+    p4.fill(Qt::black);
+    p5.fill(Qt::black);
+    p6.fill(Qt::black);
+    p7.fill(Qt::black);
+    p8.fill(Qt::black);
+
+    for (int i = 0; i < 4; ++i) {
+        for (int j = 0; j < 2; ++j) {
+            QIcon::State state = (j == 0) ? QIcon::On : QIcon::Off;
+            QIcon::State oppositeState = (state == QIcon::On) ? QIcon::Off
+                                                              : QIcon::On;
+            QIcon::Mode mode;
+            QIcon::Mode oppositeMode;
+
+            QIcon icon;
+
+            switch (i) {
+            case 0:
+            default:
+                mode = QIcon::Normal;
+                oppositeMode = QIcon::Active;
+                break;
+            case 1:
+                mode = QIcon::Active;
+                oppositeMode = QIcon::Normal;
+                break;
+            case 2:
+                mode = QIcon::Disabled;
+                oppositeMode = QIcon::Selected;
+                break;
+            case 3:
+                mode = QIcon::Selected;
+                oppositeMode = QIcon::Disabled;
+            }
+
+            /*
+                The test mirrors the code in
+                QPixmapIconEngine::bestMatch(), to make sure that
+                nobody breaks QPixmapIconEngine by mistake. Before
+                you change this test or the code that it tests,
+                please talk to the maintainer if possible.
+            */
+            if (mode == QIcon::Disabled || mode == QIcon::Selected) {
+                icon.addPixmap(p1, oppositeMode, oppositeState);
+                QVERIFY(icon.pixmap(100, mode, state).size() == p1.size());
+
+                icon.addPixmap(p2, oppositeMode, state);
+                QVERIFY(icon.pixmap(100, mode, state).size() == p2.size());
+
+                icon.addPixmap(p3, QIcon::Active, oppositeState);
+                QVERIFY(icon.pixmap(100, mode, state).size() == p3.size());
+
+                icon.addPixmap(p4, QIcon::Normal, oppositeState);
+                QVERIFY(icon.pixmap(100, mode, state).size() == p4.size());
+
+                icon.addPixmap(p5, mode, oppositeState);
+                QVERIFY(icon.pixmap(100, mode, state).size() == p5.size());
+
+                icon.addPixmap(p6, QIcon::Active, state);
+                QVERIFY(icon.pixmap(100, mode, state).size() == p6.size());
+
+                icon.addPixmap(p7, QIcon::Normal, state);
+                QVERIFY(icon.pixmap(100, mode, state).size() == p7.size());
+
+                icon.addPixmap(p8, mode, state);
+                QVERIFY(icon.pixmap(100, mode, state).size() == p8.size());
+            } else {
+                icon.addPixmap(p1, QIcon::Selected, oppositeState);
+                QVERIFY(icon.pixmap(100, mode, state).size() == p1.size());
+
+                icon.addPixmap(p2, QIcon::Disabled, oppositeState);
+                QVERIFY(icon.pixmap(100, mode, state).size() == p2.size());
+
+                icon.addPixmap(p3, QIcon::Selected, state);
+                QVERIFY(icon.pixmap(100, mode, state).size() == p3.size());
+
+                icon.addPixmap(p4, QIcon::Disabled, state);
+                QVERIFY(icon.pixmap(100, mode, state).size() == p4.size());
+
+                icon.addPixmap(p5, oppositeMode, oppositeState);
+                QVERIFY(icon.pixmap(100, mode, state).size() == p5.size());
+
+                icon.addPixmap(p6, mode, oppositeState);
+                QVERIFY(icon.pixmap(100, mode, state).size() == p6.size());
+
+                icon.addPixmap(p7, oppositeMode, state);
+                QVERIFY(icon.pixmap(100, mode, state).size() == p7.size());
+
+                icon.addPixmap(p8, mode, state);
+                QVERIFY(icon.pixmap(100, mode, state).size() == p8.size());
+            }
+        }
+    }
+}
+
+void tst_QIcon::cacheKey()
+{
+    QIcon icon1("image.png");
+    qint64 icon1_key = icon1.cacheKey();
+    QIcon icon2 = icon1;
+
+    QVERIFY(icon2.cacheKey() == icon1.cacheKey());
+    icon2.detach();
+    QVERIFY(icon2.cacheKey() != icon1.cacheKey());
+    QVERIFY(icon1.cacheKey() == icon1_key);
+}
+
+void tst_QIcon::detach()
+{
+    QImage img(32, 32, QImage::Format_ARGB32_Premultiplied);
+    img.fill(0xffff0000);
+    QIcon icon1(QPixmap::fromImage(img));
+    QIcon icon2 = icon1;
+    icon2.addFile(QFINDTESTDATA("image.png"), QSize(64, 64));
+
+    QImage img1 = icon1.pixmap(64, 64).toImage();
+    QImage img2 = icon2.pixmap(64, 64).toImage();
+    QVERIFY(img1 != img2);
+
+    img1 = icon1.pixmap(32, 32).toImage();
+    img2 = icon2.pixmap(32, 32).toImage();
+    QVERIFY(img1 == img2);
+}
+
+void tst_QIcon::addFile()
+{
+    QIcon icon;
+    icon.addFile(QLatin1String(":/qt-project.org/styles/commonstyle/images/standardbutton-open-16.png"));
+    icon.addFile(QLatin1String(":/qt-project.org/styles/commonstyle/images/standardbutton-open-32.png"));
+    icon.addFile(QLatin1String(":/qt-project.org/styles/commonstyle/images/standardbutton-open-128.png"));
+    icon.addFile(QLatin1String(":/qt-project.org/styles/commonstyle/images/standardbutton-save-16.png"), QSize(), QIcon::Selected);
+    icon.addFile(QLatin1String(":/qt-project.org/styles/commonstyle/images/standardbutton-save-32.png"), QSize(), QIcon::Selected);
+    icon.addFile(QLatin1String(":/qt-project.org/styles/commonstyle/images/standardbutton-save-128.png"), QSize(), QIcon::Selected);
+
+#ifndef Q_OS_WINCE
+    QVERIFY(icon.pixmap(16, QIcon::Normal).toImage() ==
+            QPixmap(QLatin1String(":/qt-project.org/styles/commonstyle/images/standardbutton-open-16.png")).toImage());
+    QVERIFY(icon.pixmap(32, QIcon::Normal).toImage() ==
+            QPixmap(QLatin1String(":/qt-project.org/styles/commonstyle/images/standardbutton-open-32.png")).toImage());
+    QVERIFY(icon.pixmap(128, QIcon::Normal).toImage() ==
+            QPixmap(QLatin1String(":/qt-project.org/styles/commonstyle/images/standardbutton-open-128.png")).toImage());
+    QVERIFY(icon.pixmap(16, QIcon::Selected).toImage() ==
+            QPixmap(QLatin1String(":/qt-project.org/styles/commonstyle/images/standardbutton-save-16.png")).toImage());
+    QVERIFY(icon.pixmap(32, QIcon::Selected).toImage() ==
+            QPixmap(QLatin1String(":/qt-project.org/styles/commonstyle/images/standardbutton-save-32.png")).toImage());
+    QVERIFY(icon.pixmap(128, QIcon::Selected).toImage() ==
+            QPixmap(QLatin1String(":/qt-project.org/styles/commonstyle/images/standardbutton-save-128.png")).toImage());
+#else
+    // WinCE only includes the 16x16 images for size reasons
+    QVERIFY(icon.pixmap(16, QIcon::Normal).toImage() ==
+            QPixmap(QLatin1String(":/qt-project.org/styles/commonstyle/images/standardbutton-open-16.png")).toImage());
+    QVERIFY(icon.pixmap(16, QIcon::Selected).toImage() ==
+            QPixmap(QLatin1String(":/qt-project.org/styles/commonstyle/images/standardbutton-save-16.png")).toImage());
+#endif
+}
+
+static bool sizeLess(const QSize &a, const QSize &b)
+{
+    return a.width() < b.width();
+}
+
+void tst_QIcon::availableSizes()
+{
+    {
+        QIcon icon;
+        icon.addFile("image.png", QSize(32,32));
+        icon.addFile("image.png", QSize(64,64));
+        icon.addFile("image.png", QSize(128,128));
+        icon.addFile("image.png", QSize(256,256), QIcon::Disabled);
+        icon.addFile("image.png", QSize(16,16), QIcon::Normal, QIcon::On);
+
+        QList<QSize> availableSizes = icon.availableSizes();
+        QCOMPARE(availableSizes.size(), 3);
+        qSort(availableSizes.begin(), availableSizes.end(), sizeLess);
+        QCOMPARE(availableSizes.at(0), QSize(32,32));
+        QCOMPARE(availableSizes.at(1), QSize(64,64));
+        QCOMPARE(availableSizes.at(2), QSize(128,128));
+
+        availableSizes = icon.availableSizes(QIcon::Disabled);
+        QCOMPARE(availableSizes.size(), 1);
+        QCOMPARE(availableSizes.at(0), QSize(256,256));
+
+        availableSizes = icon.availableSizes(QIcon::Normal, QIcon::On);
+        QCOMPARE(availableSizes.size(), 1);
+        QCOMPARE(availableSizes.at(0), QSize(16,16));
+    }
+
+    {
+        // we try to load an icon from resources
+        QIcon icon(QLatin1String(":/qt-project.org/styles/commonstyle/images/standardbutton-open-16.png"));
+        QList<QSize> availableSizes = icon.availableSizes();
+        QCOMPARE(availableSizes.size(), 1);
+        QCOMPARE(availableSizes.at(0), QSize(16, 16));
+    }
+
+    {
+        // load an icon from binary data.
+        QPixmap pix;
+        QFile file(QLatin1String(":/qt-project.org/styles/commonstyle/images/standardbutton-open-16.png"));
+        QVERIFY(file.open(QIODevice::ReadOnly));
+        uchar *data = file.map(0, file.size());
+        QVERIFY(data != 0);
+        pix.loadFromData(data, file.size());
+        QIcon icon(pix);
+
+        QList<QSize> availableSizes = icon.availableSizes();
+        QCOMPARE(availableSizes.size(), 1);
+        QCOMPARE(availableSizes.at(0), QSize(16,16));
+    }
+
+    {
+        // there shouldn't be available sizes for invalid images!
+        QVERIFY(QIcon(QLatin1String("")).availableSizes().isEmpty());
+        QVERIFY(QIcon(QLatin1String("non-existing.png")).availableSizes().isEmpty());
+    }
+}
+
+void tst_QIcon::name()
+{
+    {
+        // No name if icon does not come from a theme
+        QIcon icon(":/image.png");
+        QString name = icon.name();
+        QVERIFY(name.isEmpty());
+    }
+
+    {
+        // Getting the name of an icon coming from a theme should work
+        QString searchPath = QLatin1String(":/icons");
+        QIcon::setThemeSearchPaths(QStringList() << searchPath);
+        QString themeName("testtheme");
+        QIcon::setThemeName(themeName);
+
+        QIcon icon = QIcon::fromTheme("appointment-new");
+        QString name = icon.name();
+        QCOMPARE(name, QLatin1String("appointment-new"));
+    }
+}
+
+void tst_QIcon::streamAvailableSizes_data()
+{
+    QTest::addColumn<QIcon>("icon");
+
+    QIcon icon;
+    icon.addFile(":/image.png", QSize(32,32));
+    QTest::newRow( "32x32" ) << icon;
+    icon.addFile(":/image.png", QSize(64,64));
+    QTest::newRow( "64x64" ) << icon;
+    icon.addFile(":/image.png", QSize(128,128));
+    QTest::newRow( "128x128" ) << icon;
+    icon.addFile(":/image.png", QSize(256,256));
+    QTest::newRow( "256x256" ) << icon;
+}
+
+void tst_QIcon::streamAvailableSizes()
+{
+    QFETCH(QIcon, icon);
+
+    QByteArray ba;
+    // write to QByteArray
+    {
+        QBuffer buffer(&ba);
+        buffer.open(QIODevice::WriteOnly);
+        QDataStream stream(&buffer);
+        stream << icon;
+    }
+
+    // read from QByteArray
+    {
+        QBuffer buffer(&ba);
+        buffer.open(QIODevice::ReadOnly);
+        QDataStream stream(&buffer);
+        QIcon i;
+        stream >> i;
+        QCOMPARE(i.isNull(), icon.isNull());
+        QCOMPARE(i.availableSizes(), icon.availableSizes());
+    }
+}
+
+
+static inline bool operator<(const QSize &lhs, const QSize &rhs)
+{
+    if (lhs.width() < rhs.width())
+        return true;
+    else if (lhs.width() == lhs.width())
+        return lhs.height() < lhs.height();
+    return false;
+}
+
+void tst_QIcon::task184901_badCache()
+{
+    QPixmap pm(QFINDTESTDATA("image.png"));
+    QIcon icon(pm);
+
+    //the disabled icon must have an effect (grayed)
+    QVERIFY(icon.pixmap(32, QIcon::Normal).toImage() != icon.pixmap(32, QIcon::Disabled).toImage());
+
+    icon.addPixmap(pm, QIcon::Disabled);
+    //the disabled icon must now be the same as the normal one.
+    QVERIFY( icon.pixmap(32, QIcon::Normal).toImage() == icon.pixmap(32, QIcon::Disabled).toImage() );
+}
+
+void tst_QIcon::fromTheme()
+{
+    QString searchPath = QLatin1String(":/icons");
+    QIcon::setThemeSearchPaths(QStringList() << searchPath);
+    QVERIFY(QIcon::themeSearchPaths().size() == 1);
+    QCOMPARE(searchPath, QIcon::themeSearchPaths()[0]);
+
+    QString themeName("testtheme");
+    QIcon::setThemeName(themeName);
+    QCOMPARE(QIcon::themeName(), themeName);
+
+    // Test normal icon
+    QIcon appointmentIcon = QIcon::fromTheme("appointment-new");
+    QVERIFY(!appointmentIcon.isNull());
+    QVERIFY(!appointmentIcon.availableSizes(QIcon::Normal, QIcon::Off).isEmpty());
+    QVERIFY(appointmentIcon.availableSizes().contains(QSize(16, 16)));
+    QVERIFY(appointmentIcon.availableSizes().contains(QSize(32, 32)));
+    QVERIFY(appointmentIcon.availableSizes().contains(QSize(22, 22)));
+
+    // Test icon from parent theme
+    QIcon abIcon = QIcon::fromTheme("address-book-new");
+    QVERIFY(!abIcon.isNull());
+    QVERIFY(QIcon::hasThemeIcon("address-book-new"));
+    QVERIFY(!abIcon.availableSizes().isEmpty());
+
+    // Test non existing icon
+    QIcon noIcon = QIcon::fromTheme("broken-icon");
+    QVERIFY(noIcon.isNull());
+    QVERIFY(!QIcon::hasThemeIcon("broken-icon"));
+
+    // Test non existing icon with fallback
+    noIcon = QIcon::fromTheme("broken-icon", abIcon);
+    QVERIFY(noIcon.cacheKey() == abIcon.cacheKey());
+
+    // Test svg-only icon
+    noIcon = QIcon::fromTheme("svg-icon", abIcon);
+    QVERIFY(!noIcon.availableSizes().isEmpty());
+
+    QByteArray ba;
+    // write to QByteArray
+    {
+        QBuffer buffer(&ba);
+        buffer.open(QIODevice::WriteOnly);
+        QDataStream stream(&buffer);
+        stream << abIcon;
+    }
+
+    // read from QByteArray
+    {
+        QBuffer buffer(&ba);
+        buffer.open(QIODevice::ReadOnly);
+        QDataStream stream(&buffer);
+        QIcon i;
+        stream >> i;
+        QCOMPARE(i.isNull(), abIcon.isNull());
+        QCOMPARE(i.availableSizes(), abIcon.availableSizes());
+    }
+
+    // Make sure setting the theme name clears the state
+    QIcon::setThemeName("");
+    abIcon = QIcon::fromTheme("address-book-new");
+    QVERIFY(abIcon.isNull());
+}
+
+
+void tst_QIcon::task223279_inconsistentAddFile()
+{
+    QIcon icon1;
+    icon1.addFile(QLatin1String(":/qt-project.org/styles/commonstyle/images/standardbutton-open-16.png"));
+    icon1.addFile(QLatin1String("IconThatDoesntExist"), QSize(32, 32));
+    QPixmap pm1 = icon1.pixmap(32, 32);
+
+    QIcon icon2;
+    icon2.addFile(QLatin1String(":/qt-project.org/styles/commonstyle/images/standardbutton-open-16.png"));
+    icon2.addFile(QLatin1String("IconThatDoesntExist"));
+    QPixmap pm2 = icon1.pixmap(32, 32);
+
+    QCOMPARE(pm1.isNull(), false);
+    QCOMPARE(pm1.size(), QSize(16,16));
+    QCOMPARE(pm1.isNull(), pm2.isNull());
+    QCOMPARE(pm1.size(), pm2.size());
+}
+
+
+QTEST_MAIN(tst_QIcon)
+#include "tst_qicon.moc"
diff --git a/tests/auto/gui/image/qicon/tst_qicon.qrc b/tests/auto/gui/image/qicon/tst_qicon.qrc
new file mode 100644
index 0000000..7925a33
--- /dev/null
+++ b/tests/auto/gui/image/qicon/tst_qicon.qrc
@@ -0,0 +1,20 @@
+<!DOCTYPE RCC><RCC version="1.0">
+<qresource prefix="/">
+<file>image.png</file>
+<file>rect.png</file>
+<file>./icons/testtheme/16x16/actions/appointment-new.png</file>
+<file>./icons/testtheme/22x22/actions/appointment-new.png</file>
+<file>./icons/testtheme/32x32/actions/appointment-new.png</file>
+<file>./icons/testtheme/index.theme</file>
+<file>./icons/testtheme/scalable/actions/svg-only.svg</file>
+<file>./icons/themeparent/16x16/actions/address-book-new.png</file>
+<file>./icons/themeparent/16x16/actions/appointment-new.png</file>
+<file>./icons/themeparent/22x22/actions/address-book-new.png</file>
+<file>./icons/themeparent/22x22/actions/appointment-new.png</file>
+<file>./icons/themeparent/32x32/actions/address-book-new.png</file>
+<file>./icons/themeparent/32x32/actions/appointment-new.png</file>
+<file>./icons/themeparent/index.theme</file>
+<file>./icons/themeparent/scalable/actions/address-book-new.svg</file>
+<file>./icons/themeparent/scalable/actions/appointment-new.svg</file>
+</qresource>
+</RCC>
diff --git a/tests/auto/widgets/kernel/kernel.pro b/tests/auto/widgets/kernel/kernel.pro
index e1c245d..c2540ec 100644
--- a/tests/auto/widgets/kernel/kernel.pro
+++ b/tests/auto/widgets/kernel/kernel.pro
@@ -13,7 +13,6 @@ SUBDIRS=\
    qwidget \
    qwidget_window \
    qwidgetaction \
-   qicon \
    qshortcut \
 
 SUBDIRS -= qsound
diff --git a/tests/auto/widgets/kernel/qicon/.gitignore b/tests/auto/widgets/kernel/qicon/.gitignore
deleted file mode 100644
index c101ef9..0000000
--- a/tests/auto/widgets/kernel/qicon/.gitignore
+++ /dev/null
@@ -1 +0,0 @@
-tst_qicon
diff --git a/tests/auto/widgets/kernel/qicon/icons/testtheme/16x16/actions/appointment-new.png b/tests/auto/widgets/kernel/qicon/icons/testtheme/16x16/actions/appointment-new.png
deleted file mode 100644
index 18b7c67..0000000
Binary files a/tests/auto/widgets/kernel/qicon/icons/testtheme/16x16/actions/appointment-new.png and /dev/null differ
diff --git a/tests/auto/widgets/kernel/qicon/icons/testtheme/22x22/actions/appointment-new.png b/tests/auto/widgets/kernel/qicon/icons/testtheme/22x22/actions/appointment-new.png
deleted file mode 100644
index d676ffd..0000000
Binary files a/tests/auto/widgets/kernel/qicon/icons/testtheme/22x22/actions/appointment-new.png and /dev/null differ
diff --git a/tests/auto/widgets/kernel/qicon/icons/testtheme/32x32/actions/appointment-new.png b/tests/auto/widgets/kernel/qicon/icons/testtheme/32x32/actions/appointment-new.png
deleted file mode 100644
index 85daef3..0000000
Binary files a/tests/auto/widgets/kernel/qicon/icons/testtheme/32x32/actions/appointment-new.png and /dev/null differ
diff --git a/tests/auto/widgets/kernel/qicon/icons/testtheme/index.theme b/tests/auto/widgets/kernel/qicon/icons/testtheme/index.theme
deleted file mode 100644
index e18736a..0000000
--- a/tests/auto/widgets/kernel/qicon/icons/testtheme/index.theme
+++ /dev/null
@@ -1,492 +0,0 @@
-[Icon Theme]
-_Name=Test
-_Comment=Test Theme
-Inherits=crystalsvg, themeparent
-Example=x-directory-normal
-
-# KDE Specific Stuff
-DisplayDepth=32
-LinkOverlay=link_overlay
-LockOverlay=lock_overlay
-ZipOverlay=zip_overlay
-DesktopDefault=48
-DesktopSizes=16,22,32,48,64,72,96,128
-ToolbarDefault=22
-ToolbarSizes=16,22,32,48
-MainToolbarDefault=22
-MainToolbarSizes=16,22,32,48
-SmallDefault=16
-SmallSizes=16
-PanelDefault=32
-PanelSizes=16,22,32,48,64,72,96,128
-
-# Directory list
-Directories=16x16/actions,16x16/apps,16x16/categories,16x16/devices,16x16/emblems,16x16/emotes,16x16/mimetypes,16x16/places,16x16/status,22x22/actions,22x22/apps,22x22/categories,22x22/devices,22x22/emblems,22x22/emotes,22x22/mimetypes,22x22/places,22x22/status,24x24/actions,24x24/apps,24x24/categories,24x24/devices,24x24/emblems,24x24/emotes,24x24/mimetypes,24x24/places,24x24/status,32x32/actions,32x32/apps,32x32/categories,32x32/devices,32x32/emblems,32x32/emotes,32x32/mimetypes,32x32/places,32x32/status,48x48/actions,48x48/apps,48x48/categories,48x48/devices,48x48/emblems,48x48/emotes,48x48/mimetypes,48x48/places,48x48/status,64x64/actions,64x64/apps,64x64/categories,64x64/devices,64x64/emblems,64x64/emotes,64x64/mimetypes,64x64/places,64x64/status,72x72/actions,72x72/apps,72x72/categories,72x72/devices,72x72/emblems,72x72/emotes,72x72/mimetypes,72x72/places,72x72/status,96x96/actions,96x96/apps,96x96/categories,96x96/devices,96x96/emblems,96x96/emotes,96x96/mimetypes,96x96/places,96x96/status,128x128/actions,128x128/apps,128x128/categories,128x128/devices,128x128/emblems,128x128/emotes,128x128/mimetypes,128x128/places,128x128/status,scalable/actions,scalable/apps,scalable/categories,scalable/devices,scalable/emblems,scalable/emotes,scalable/mimetypes,scalable/places,scalable/status
-
-[16x16/actions]
-Size=16
-Context=Actions
-Type=Fixed
-
-[16x16/apps]
-Size=16
-Context=Applications
-Type=Fixed
-
-[16x16/categories]
-Size=16
-Context=Categories
-Type=Fixed
-
-[16x16/devices]
-Size=16
-Context=Devices
-Type=Fixed
-
-[16x16/emblems]
-Size=16
-Context=Emblems
-Type=Fixed
-
-[16x16/emotes]
-Size=16
-Context=Emotes
-Type=Fixed
-
-[16x16/mimetypes]
-Size=16
-Context=MimeTypes
-Type=Fixed
-
-[16x16/places]
-Size=16
-Context=Places
-Type=Fixed
-
-[16x16/status]
-Size=16
-Context=Status
-Type=Fixed
-
-[22x22/actions]
-Size=22
-Context=Actions
-Type=Fixed
-
-[22x22/apps]
-Size=22
-Context=Applications
-Type=Fixed
-
-[22x22/categories]
-Size=22
-Context=Categories
-Type=Fixed
-
-[22x22/devices]
-Size=22
-Context=Devices
-Type=Fixed
-
-[22x22/emblems]
-Size=22
-Context=Emblems
-Type=Fixed
-
-[22x22/emotes]
-Size=22
-Context=Emotes
-Type=Fixed
-
-[22x22/mimetypes]
-Size=22
-Context=MimeTypes
-Type=Fixed
-
-[22x22/places]
-Size=22
-Context=Places
-Type=Fixed
-
-[22x22/status]
-Size=22
-Context=Status
-Type=Fixed
-
-[24x24/actions]
-Size=24
-Context=Actions
-Type=Fixed
-
-[24x24/apps]
-Size=24
-Context=Applications
-Type=Fixed
-
-[24x24/categories]
-Size=24
-Context=Categories
-Type=Fixed
-
-[24x24/devices]
-Size=24
-Context=Devices
-Type=Fixed
-
-[24x24/emblems]
-Size=24
-Context=Emblems
-Type=Fixed
-
-[24x24/emotes]
-Size=24
-Context=Emotes
-Type=Fixed
-
-[24x24/mimetypes]
-Size=24
-Context=MimeTypes
-Type=Fixed
-
-[24x24/places]
-Size=24
-Context=Places
-Type=Fixed
-
-[24x24/status]
-Size=24
-Context=Status
-Type=Fixed
-
-[32x32/actions]
-Size=32
-Context=Actions
-Type=Fixed
-
-[32x32/apps]
-Size=32
-Context=Applications
-Type=Fixed
-
-[32x32/categories]
-Size=32
-Context=Categories
-Type=Fixed
-
-[32x32/devices]
-Size=32
-Context=Devices
-Type=Fixed
-
-[32x32/emblems]
-Size=32
-Context=Emblems
-Type=Fixed
-
-[32x32/emotes]
-Size=32
-Context=Emotes
-Type=Fixed
-
-[32x32/mimetypes]
-Size=32
-Context=MimeTypes
-Type=Fixed
-
-[32x32/places]
-Size=32
-Context=Places
-Type=Fixed
-
-[32x32/status]
-Size=32
-Context=Status
-Type=Fixed
-
-[48x48/actions]
-Size=48
-Context=Actions
-Type=Fixed
-
-[48x48/apps]
-Size=48
-Context=Applications
-Type=Fixed
-
-[48x48/categories]
-Size=48
-Context=Categories
-Type=Fixed
-
-[48x48/devices]
-Size=48
-Context=Devices
-Type=Fixed
-
-[48x48/emblems]
-Size=48
-Context=Emblems
-Type=Fixed
-
-[48x48/emotes]
-Size=48
-Context=Emotes
-Type=Fixed
-
-[48x48/mimetypes]
-Size=48
-Context=MimeTypes
-Type=Fixed
-
-[48x48/places]
-Size=48
-Context=Places
-Type=Fixed
-
-[48x48/status]
-Size=48
-Context=Status
-Type=Fixed
-
-[64x64/actions]
-Size=64
-Context=Actions
-Type=Fixed
-
-[64x64/apps]
-Size=64
-Context=Applications
-Type=Fixed
-
-[64x64/categories]
-Size=64
-Context=Categories
-Type=Fixed
-
-[64x64/devices]
-Size=64
-Context=Devices
-Type=Fixed
-
-[64x64/emblems]
-Size=64
-Context=Emblems
-Type=Fixed
-
-[64x64/emotes]
-Size=64
-Context=Emotes
-Type=Fixed
-
-[64x64/mimetypes]
-Size=64
-Context=MimeTypes
-Type=Fixed
-
-[64x64/places]
-Size=64
-Context=Places
-Type=Fixed
-
-[64x64/status]
-Size=64
-Context=Status
-Type=Fixed
-
-[72x72/actions]
-Size=72
-Context=Actions
-Type=Fixed
-
-[72x72/apps]
-Size=72
-Context=Applications
-Type=Fixed
-
-[72x72/categories]
-Size=72
-Context=Categories
-Type=Fixed
-
-[72x72/devices]
-Size=72
-Context=Devices
-Type=Fixed
-
-[72x72/emblems]
-Size=72
-Context=Emblems
-Type=Fixed
-
-[72x72/emotes]
-Size=72
-Context=Emotes
-Type=Fixed
-
-[72x72/mimetypes]
-Size=72
-Context=MimeTypes
-Type=Fixed
-
-[72x72/places]
-Size=72
-Context=Places
-Type=Fixed
-
-[72x72/status]
-Size=72
-Context=Status
-Type=Fixed
-
-[96x96/actions]
-Size=96
-Context=Actions
-Type=Fixed
-
-[96x96/apps]
-Size=96
-Context=Applications
-Type=Fixed
-
-[96x96/categories]
-Size=96
-Context=Categories
-Type=Fixed
-
-[96x96/devices]
-Size=96
-Context=Devices
-Type=Fixed
-
-[96x96/emblems]
-Size=96
-Context=Emblems
-Type=Fixed
-
-[96x96/emotes]
-Size=96
-Context=Emotes
-Type=Fixed
-
-[96x96/mimetypes]
-Size=96
-Context=MimeTypes
-Type=Fixed
-
-[96x96/places]
-Size=96
-Context=Places
-Type=Fixed
-
-[96x96/status]
-Size=96
-Context=Status
-Type=Fixed
-
-[128x128/actions]
-Size=128
-Context=Actions
-Type=Fixed
-
-[128x128/apps]
-Size=128
-Context=Applications
-Type=Fixed
-
-[128x128/categories]
-Size=128
-Context=Categories
-Type=Fixed
-
-[128x128/devices]
-Size=128
-Context=Devices
-Type=Fixed
-
-[128x128/emblems]
-Size=128
-Context=Emblems
-Type=Fixed
-
-[128x128/emotes]
-Size=128
-Context=Emotes
-Type=Fixed
-
-[128x128/mimetypes]
-Size=128
-Context=MimeTypes
-Type=Fixed
-
-[128x128/places]
-Size=128
-Context=Places
-Type=Fixed
-
-[128x128/status]
-Size=128
-Context=Status
-Type=Fixed
-
-[scalable/actions]
-Size=48
-Context=Actions
-Type=Scalable
-MinSize=32
-MaxSize=256
-
-[scalable/apps]
-Size=48
-Context=Applications
-Type=Scalable
-MinSize=32
-MaxSize=256
-
-[scalable/categories]
-Size=48
-Context=Categories
-Type=Scalable
-MinSize=32
-MaxSize=256
-
-[scalable/devices]
-Size=48
-Context=Devices
-Type=Scalable
-MinSize=32
-MaxSize=256
-
-[scalable/emblems]
-Size=48
-Context=Emblems
-Type=Scalable
-MinSize=32
-MaxSize=256
-
-[scalable/emotes]
-Size=48
-Context=Emotes
-Type=Scalable
-Minsize=32
-MaxSize=256
-
-[scalable/mimetypes]
-Size=48
-Context=MimeTypes
-Type=Scalable
-MinSize=32
-MaxSize=256
-
-[scalable/places]
-Size=48
-Context=Places
-Type=Scalable
-MinSize=32
-MaxSize=256
-
-[scalable/status]
-Size=48
-Context=Status
-Type=Scalable
-MinSize=32
-MaxSize=256
diff --git a/tests/auto/widgets/kernel/qicon/icons/testtheme/scalable/actions/svg-only.svg b/tests/auto/widgets/kernel/qicon/icons/testtheme/scalable/actions/svg-only.svg
deleted file mode 100644
index 4cb14f8..0000000
--- a/tests/auto/widgets/kernel/qicon/icons/testtheme/scalable/actions/svg-only.svg
+++ /dev/null
@@ -1,425 +0,0 @@
-<?xml version="1.0" encoding="UTF-8" standalone="no"?>
-<!-- Created with Inkscape (http://www.inkscape.org/) -->
-<svg
-   xmlns:dc="http://purl.org/dc/elements/1.1/"
-   xmlns:cc="http://creativecommons.org/ns#"
-   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
-   xmlns:svg="http://www.w3.org/2000/svg"
-   xmlns="http://www.w3.org/2000/svg"
-   xmlns:xlink="http://www.w3.org/1999/xlink"
-   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
-   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
-   inkscape:export-ydpi="90.000000"
-   inkscape:export-xdpi="90.000000"
-   inkscape:export-filename="/home/jimmac/Desktop/wi-fi.png"
-   width="48px"
-   height="48px"
-   id="svg11300"
-   sodipodi:version="0.32"
-   inkscape:version="0.46"
-   sodipodi:docbase="/home/tigert/cvs/freedesktop.org/tango-icon-theme/scalable/actions"
-   sodipodi:docname="appointment-new.svg"
-   inkscape:output_extension="org.inkscape.output.svg.inkscape">
-  <defs
-     id="defs3">
-    <inkscape:perspective
-       sodipodi:type="inkscape:persp3d"
-       inkscape:vp_x="0 : 24 : 1"
-       inkscape:vp_y="0 : 1000 : 0"
-       inkscape:vp_z="48 : 24 : 1"
-       inkscape:persp3d-origin="24 : 16 : 1"
-       id="perspective59" />
-    <linearGradient
-       inkscape:collect="always"
-       id="linearGradient5204">
-      <stop
-         style="stop-color:#c4a000;stop-opacity:1;"
-         offset="0"
-         id="stop5206" />
-      <stop
-         style="stop-color:#c4a000;stop-opacity:0;"
-         offset="1"
-         id="stop5208" />
-    </linearGradient>
-    <linearGradient
-       inkscape:collect="always"
-       id="linearGradient5196">
-      <stop
-         style="stop-color:#c4a000;stop-opacity:1;"
-         offset="0"
-         id="stop5198" />
-      <stop
-         style="stop-color:#c4a000;stop-opacity:0;"
-         offset="1"
-         id="stop5200" />
-    </linearGradient>
-    <linearGradient
-       id="linearGradient12512">
-      <stop
-         style="stop-color:#ffffff;stop-opacity:1.0000000;"
-         offset="0.0000000"
-         id="stop12513" />
-      <stop
-         style="stop-color:#fff520;stop-opacity:0.89108908;"
-         offset="0.50000000"
-         id="stop12517" />
-      <stop
-         style="stop-color:#fff300;stop-opacity:0.0000000;"
-         offset="1.0000000"
-         id="stop12514" />
-    </linearGradient>
-    <radialGradient
-       inkscape:collect="always"
-       xlink:href="#linearGradient12512"
-       id="radialGradient278"
-       gradientUnits="userSpaceOnUse"
-       cx="55.000000"
-       cy="125.00000"
-       fx="55.000000"
-       fy="125.00000"
-       r="14.375000" />
-    <linearGradient
-       id="linearGradient10653">
-      <stop
-         style="stop-color:#f3f4ff;stop-opacity:1.0000000;"
-         offset="0.0000000"
-         id="stop10655" />
-      <stop
-         style="stop-color:#9193af;stop-opacity:1.0000000;"
-         offset="1.0000000"
-         id="stop10657" />
-    </linearGradient>
-    <linearGradient
-       id="linearGradient42174">
-      <stop
-         style="stop-color:#a0a0a0;stop-opacity:1.0000000;"
-         offset="0.0000000"
-         id="stop42176" />
-      <stop
-         style="stop-color:#ffffff;stop-opacity:1.0000000;"
-         offset="1.0000000"
-         id="stop42178" />
-    </linearGradient>
-    <linearGradient
-       id="linearGradient2145">
-      <stop
-         style="stop-color:#fffffd;stop-opacity:1.0000000;"
-         offset="0.0000000"
-         id="stop2147" />
-      <stop
-         style="stop-color:#cbcbc9;stop-opacity:1.0000000;"
-         offset="1.0000000"
-         id="stop2149" />
-    </linearGradient>
-    <linearGradient
-       id="linearGradient37935">
-      <stop
-         id="stop37937"
-         offset="0.0000000"
-         style="stop-color:#9497b3;stop-opacity:1.0000000;" />
-      <stop
-         id="stop37939"
-         offset="1.0000000"
-         style="stop-color:#4c4059;stop-opacity:1.0000000;" />
-    </linearGradient>
-    <linearGradient
-       id="linearGradient2152">
-      <stop
-         id="stop2154"
-         offset="0.0000000"
-         style="stop-color:#9aa29a;stop-opacity:1.0000000;" />
-      <stop
-         id="stop2156"
-         offset="1.0000000"
-         style="stop-color:#b5beb5;stop-opacity:1.0000000;" />
-    </linearGradient>
-    <linearGradient
-       inkscape:collect="always"
-       id="linearGradient3816">
-      <stop
-         style="stop-color:#000000;stop-opacity:1;"
-         offset="0"
-         id="stop3818" />
-      <stop
-         style="stop-color:#000000;stop-opacity:0;"
-         offset="1"
-         id="stop3820" />
-    </linearGradient>
-    <radialGradient
-       inkscape:collect="always"
-       xlink:href="#linearGradient3816"
-       id="radialGradient3822"
-       cx="31.112698"
-       cy="19.008621"
-       fx="31.112698"
-       fy="19.008621"
-       r="8.6620579"
-       gradientUnits="userSpaceOnUse" />
-    <linearGradient
-       inkscape:collect="always"
-       xlink:href="#linearGradient2152"
-       id="linearGradient4307"
-       gradientUnits="userSpaceOnUse"
-       gradientTransform="matrix(3.123841,0.000000,0.000000,0.969691,-31.88758,-19.59492)"
-       x1="8.9156475"
-       y1="37.197018"
-       x2="9.8855033"
-       y2="52.090678" />
-    <radialGradient
-       inkscape:collect="always"
-       xlink:href="#linearGradient10653"
-       id="radialGradient4309"
-       gradientUnits="userSpaceOnUse"
-       cx="11.329200"
-       cy="10.583970"
-       fx="11.329200"
-       fy="10.583970"
-       r="15.532059" />
-    <radialGradient
-       inkscape:collect="always"
-       xlink:href="#linearGradient2145"
-       id="radialGradient4311"
-       gradientUnits="userSpaceOnUse"
-       cx="11.901996"
-       cy="10.045444"
-       fx="11.901996"
-       fy="10.045444"
-       r="29.292715" />
-    <linearGradient
-       inkscape:collect="always"
-       xlink:href="#linearGradient42174"
-       id="linearGradient4313"
-       gradientUnits="userSpaceOnUse"
-       x1="6.3422160"
-       y1="7.7893324"
-       x2="22.218424"
-       y2="25.884274" />
-    <radialGradient
-       inkscape:collect="always"
-       xlink:href="#linearGradient5196"
-       id="radialGradient5202"
-       cx="23.375"
-       cy="10.972863"
-       fx="23.375"
-       fy="10.972863"
-       r="3.3478092"
-       gradientTransform="matrix(3.630420,1.654030e-15,-1.608743e-15,3.742066,-61.48607,-29.18618)"
-       gradientUnits="userSpaceOnUse" />
-    <linearGradient
-       inkscape:collect="always"
-       xlink:href="#linearGradient5204"
-       id="linearGradient5210"
-       x1="19.667364"
-       y1="4.2570662"
-       x2="20.329933"
-       y2="5.2845874"
-       gradientUnits="userSpaceOnUse" />
-    <radialGradient
-       inkscape:collect="always"
-       xlink:href="#linearGradient37935"
-       id="radialGradient5212"
-       gradientUnits="userSpaceOnUse"
-       cx="8.7468252"
-       cy="6.8283234"
-       fx="8.7468252"
-       fy="6.8283234"
-       r="29.889715" />
-  </defs>
-  <sodipodi:namedview
-     stroke="#c4a000"
-     fill="#babdb6"
-     id="base"
-     pagecolor="#ffffff"
-     bordercolor="#666666"
-     borderopacity="0.25490196"
-     inkscape:pageopacity="0.0"
-     inkscape:pageshadow="2"
-     inkscape:zoom="11.313708"
-     inkscape:cx="13.2248"
-     inkscape:cy="25.106052"
-     inkscape:current-layer="layer1"
-     showgrid="false"
-     inkscape:grid-bbox="true"
-     inkscape:document-units="px"
-     inkscape:showpageshadow="false"
-     inkscape:window-width="833"
-     inkscape:window-height="772"
-     inkscape:window-x="305"
-     inkscape:window-y="76" />
-  <metadata
-     id="metadata4">
-    <rdf:RDF>
-      <cc:Work
-         rdf:about="">
-        <dc:format>image/svg+xml</dc:format>
-        <dc:type
-           rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
-        <dc:creator>
-          <cc:Agent>
-            <dc:title>Jakub Steiner</dc:title>
-          </cc:Agent>
-        </dc:creator>
-        <dc:source>http://jimmac.musichall.cz</dc:source>
-        <cc:license
-           rdf:resource="http://creativecommons.org/licenses/publicdomain/" />
-        <dc:title>New Appointment</dc:title>
-        <dc:subject>
-          <rdf:Bag>
-            <rdf:li>appointment</rdf:li>
-            <rdf:li>new</rdf:li>
-            <rdf:li>meeting</rdf:li>
-            <rdf:li>rvsp</rdf:li>
-          </rdf:Bag>
-        </dc:subject>
-      </cc:Work>
-      <cc:License
-         rdf:about="http://creativecommons.org/licenses/publicdomain/">
-        <cc:permits
-           rdf:resource="http://creativecommons.org/ns#Reproduction" />
-        <cc:permits
-           rdf:resource="http://creativecommons.org/ns#Distribution" />
-        <cc:permits
-           rdf:resource="http://creativecommons.org/ns#DerivativeWorks" />
-      </cc:License>
-    </rdf:RDF>
-  </metadata>
-  <g
-     id="layer1"
-     inkscape:label="Layer 1"
-     inkscape:groupmode="layer">
-    <path
-       d="M 39.774755 19.008621 A 8.6620579 8.6620579 0 1 1  22.45064,19.008621 A 8.6620579 8.6620579 0 1 1  39.774755 19.008621 z"
-       sodipodi:ry="8.6620579"
-       sodipodi:rx="8.6620579"
-       sodipodi:cy="19.008621"
-       sodipodi:cx="31.112698"
-       id="path4318"
-       style="opacity:1;color:#000000;fill:url(#radialGradient3822);fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:round;stroke-linejoin:round;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"
-       sodipodi:type="arc"
-       transform="matrix(2.563158,0.000000,0.000000,1.219602,-55.98414,14.04144)" />
-    <path
-       sodipodi:nodetypes="cccc"
-       id="path14341"
-       d="M 18.587591,1.403729 L 4.226755,18.096665 L 5.4854717,19.339844 L 18.587591,1.403729 z "
-       style="color:#000000;fill:url(#linearGradient4307);fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible" />
-    <path
-       sodipodi:nodetypes="cccc"
-       id="path18921"
-       d="M 18.467176,1.3138035 L 5.6605716,19.072612 L 7.4900985,20.687913 L 18.467176,1.3138035 z "
-       style="fill:#fefefe;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1" />
-    <path
-       transform="matrix(1.431529,0.000000,0.000000,1.431529,0.569459,-1.654618)"
-       d="M 31.160714 16.910715 A 14.910714 14.910714 0 1 1  1.3392859,16.910715 A 14.910714 14.910714 0 1 1  31.160714 16.910715 z"
-       sodipodi:ry="14.910714"
-       sodipodi:rx="14.910714"
-       sodipodi:cy="16.910715"
-       sodipodi:cx="16.25"
-       id="path27786"
-       style="fill:url(#radialGradient5212);fill-opacity:1;fill-rule:evenodd;stroke:#605773;stroke-width:0.69855404;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dashoffset:0;stroke-opacity:1"
-       sodipodi:type="arc" />
-    <path
-       transform="matrix(1.163838,0.000000,0.000000,1.163838,4.824801,2.777556)"
-       d="M 31.160714 16.910715 A 14.910714 14.910714 0 1 1  1.3392859,16.910715 A 14.910714 14.910714 0 1 1  31.160714 16.910715 z"
-       sodipodi:ry="14.910714"
-       sodipodi:rx="14.910714"
-       sodipodi:cy="16.910715"
-       sodipodi:cx="16.25"
-       id="path35549"
-       style="fill:url(#radialGradient4311);fill-opacity:1;fill-rule:evenodd;stroke:url(#linearGradient4313);stroke-width:0.71139598;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dashoffset:0;stroke-opacity:1"
-       sodipodi:type="arc" />
-    <path
-       sodipodi:type="arc"
-       style="opacity:1;color:#000000;fill:url(#radialGradient5202);fill-opacity:1;fill-rule:evenodd;stroke:url(#linearGradient5210);stroke-width:0.56498736;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"
-       id="path4120"
-       sodipodi:cx="23.375"
-       sodipodi:cy="11.875"
-       sodipodi:rx="8.5"
-       sodipodi:ry="8.5"
-       d="M 16.679382,6.6387137 A 8.5,8.5 0 0 1 23.332691,3.3751053 L 23.375,11.875 z"
-       transform="matrix(1.769951,0.000000,0.000000,1.769951,-17.02424,1.610741)"
-       sodipodi:start="3.8052902"
-       sodipodi:end="4.7074114" />
-    <path
-       transform="matrix(2.073295,0.000000,0.000000,2.073295,-7.310224,-13.13682)"
-       d="M 16.40625 17.28125 A 1.21875 1.21875 0 1 1  13.96875,17.28125 A 1.21875 1.21875 0 1 1  16.40625 17.28125 z"
-       sodipodi:ry="1.21875"
-       sodipodi:rx="1.21875"
-       sodipodi:cy="17.28125"
-       sodipodi:cx="15.1875"
-       id="path34778"
-       style="fill:#f3f3f3;fill-opacity:1;fill-rule:evenodd;stroke:#000000;stroke-width:0.48232403;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dashoffset:0;stroke-opacity:1;stroke-dasharray:none"
-       sodipodi:type="arc" />
-    <path
-       id="path35559"
-       d="M 22.176614,20.718014 L 13.155702,13.140282"
-       style="fill:none;fill-opacity:0.75;fill-rule:evenodd;stroke:#000000;stroke-width:1;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none" />
-    <path
-       id="path35561"
-       d="M 19.408614,29.776506 L 22.368655,25.283228"
-       style="fill:none;fill-opacity:0.75;fill-rule:evenodd;stroke:#000000;stroke-width:2;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
-       sodipodi:nodetypes="cc" />
-    <path
-       transform="matrix(2.749493,0.000000,0.000000,2.749493,-22.30073,-12.40939)"
-       d="M 17.324117 7.6932044 A 0.61871845 0.61871845 0 1 1  16.08668,7.6932044 A 0.61871845 0.61871845 0 1 1  17.324117 7.6932044 z"
-       sodipodi:ry="0.61871845"
-       sodipodi:rx="0.61871845"
-       sodipodi:cy="7.6932044"
-       sodipodi:cx="16.705399"
-       id="path35563"
-       style="fill:#b6b9b1;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1.36871839;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dashoffset:0;stroke-opacity:1;opacity:1"
-       sodipodi:type="arc" />
-    <path
-       transform="matrix(2.749493,0.000000,0.000000,2.749493,-22.30073,14.80922)"
-       d="M 17.324117 7.6932044 A 0.61871845 0.61871845 0 1 1  16.08668,7.6932044 A 0.61871845 0.61871845 0 1 1  17.324117 7.6932044 z"
-       sodipodi:ry="0.61871845"
-       sodipodi:rx="0.61871845"
-       sodipodi:cy="7.6932044"
-       sodipodi:cx="16.705399"
-       id="path35565"
-       style="fill:#b6b9b1;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1.36871839;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dashoffset:0;stroke-opacity:1;opacity:1"
-       sodipodi:type="arc" />
-    <path
-       transform="matrix(2.749493,0.000000,0.000000,2.749493,-35.91004,1.199890)"
-       d="M 17.324117 7.6932044 A 0.61871845 0.61871845 0 1 1  16.08668,7.6932044 A 0.61871845 0.61871845 0 1 1  17.324117 7.6932044 z"
-       sodipodi:ry="0.61871845"
-       sodipodi:rx="0.61871845"
-       sodipodi:cy="7.6932044"
-       sodipodi:cx="16.705399"
-       id="path35567"
-       style="fill:#b6b9b1;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1.36871839;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dashoffset:0;stroke-opacity:1;opacity:1"
-       sodipodi:type="arc" />
-    <path
-       transform="matrix(2.749493,0.000000,0.000000,2.749493,-8.691448,1.199890)"
-       d="M 17.324117 7.6932044 A 0.61871845 0.61871845 0 1 1  16.08668,7.6932044 A 0.61871845 0.61871845 0 1 1  17.324117 7.6932044 z"
-       sodipodi:ry="0.61871845"
-       sodipodi:rx="0.61871845"
-       sodipodi:cy="7.6932044"
-       sodipodi:cx="16.705399"
-       id="path35569"
-       style="fill:#b6b9b1;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1.36871839;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dashoffset:0;stroke-opacity:1;opacity:1"
-       sodipodi:type="arc" />
-    <path
-       sodipodi:type="arc"
-       style="fill:none;fill-opacity:1;fill-rule:evenodd;stroke:url(#radialGradient4309);stroke-width:0.73656511;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dashoffset:0;stroke-opacity:1"
-       id="path10651"
-       sodipodi:cx="16.25"
-       sodipodi:cy="16.910715"
-       sodipodi:rx="14.910714"
-       sodipodi:ry="14.910714"
-       d="M 31.160714 16.910715 A 14.910714 14.910714 0 1 1  1.3392859,16.910715 A 14.910714 14.910714 0 1 1  31.160714 16.910715 z"
-       transform="matrix(1.357654,0.000000,0.000000,1.357654,1.769896,-0.493735)" />
-    <path
-       sodipodi:type="arc"
-       style="color:#000000;fill:url(#radialGradient278);fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1.25000024;stroke-linecap:butt;stroke-linejoin:round;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:block"
-       id="path12511"
-       sodipodi:cx="55"
-       sodipodi:cy="125"
-       sodipodi:rx="14.375"
-       sodipodi:ry="14.375"
-       d="M 69.375 125 A 14.375 14.375 0 1 1  40.625,125 A 14.375 14.375 0 1 1  69.375 125 z"
-       transform="matrix(0.611127,0.000000,0.000000,0.611127,5.544052,-66.92818)"
-       inkscape:export-filename="/home/jimmac/ximian_art/icons/nautilus/suse93/stock_new-16.png"
-       inkscape:export-xdpi="33.852203"
-       inkscape:export-ydpi="33.852203" />
-  </g>
-</svg>
diff --git a/tests/auto/widgets/kernel/qicon/icons/themeparent/16x16/actions/address-book-new.png b/tests/auto/widgets/kernel/qicon/icons/themeparent/16x16/actions/address-book-new.png
deleted file mode 100644
index 2098cfd..0000000
Binary files a/tests/auto/widgets/kernel/qicon/icons/themeparent/16x16/actions/address-book-new.png and /dev/null differ
diff --git a/tests/auto/widgets/kernel/qicon/icons/themeparent/16x16/actions/appointment-new.png b/tests/auto/widgets/kernel/qicon/icons/themeparent/16x16/actions/appointment-new.png
deleted file mode 100644
index 18b7c67..0000000
Binary files a/tests/auto/widgets/kernel/qicon/icons/themeparent/16x16/actions/appointment-new.png and /dev/null differ
diff --git a/tests/auto/widgets/kernel/qicon/icons/themeparent/22x22/actions/address-book-new.png b/tests/auto/widgets/kernel/qicon/icons/themeparent/22x22/actions/address-book-new.png
deleted file mode 100644
index fad446c..0000000
Binary files a/tests/auto/widgets/kernel/qicon/icons/themeparent/22x22/actions/address-book-new.png and /dev/null differ
diff --git a/tests/auto/widgets/kernel/qicon/icons/themeparent/22x22/actions/appointment-new.png b/tests/auto/widgets/kernel/qicon/icons/themeparent/22x22/actions/appointment-new.png
deleted file mode 100644
index d676ffd..0000000
Binary files a/tests/auto/widgets/kernel/qicon/icons/themeparent/22x22/actions/appointment-new.png and /dev/null differ
diff --git a/tests/auto/widgets/kernel/qicon/icons/themeparent/32x32/actions/address-book-new.png b/tests/auto/widgets/kernel/qicon/icons/themeparent/32x32/actions/address-book-new.png
deleted file mode 100644
index 420139d..0000000
Binary files a/tests/auto/widgets/kernel/qicon/icons/themeparent/32x32/actions/address-book-new.png and /dev/null differ
diff --git a/tests/auto/widgets/kernel/qicon/icons/themeparent/32x32/actions/appointment-new.png b/tests/auto/widgets/kernel/qicon/icons/themeparent/32x32/actions/appointment-new.png
deleted file mode 100644
index 85daef3..0000000
Binary files a/tests/auto/widgets/kernel/qicon/icons/themeparent/32x32/actions/appointment-new.png and /dev/null differ
diff --git a/tests/auto/widgets/kernel/qicon/icons/themeparent/index.theme b/tests/auto/widgets/kernel/qicon/icons/themeparent/index.theme
deleted file mode 100644
index e536a0b..0000000
--- a/tests/auto/widgets/kernel/qicon/icons/themeparent/index.theme
+++ /dev/null
@@ -1,492 +0,0 @@
-[Icon Theme]
-_Name=Test
-_Comment=Test Theme
-Inherits=gnome,crystalsvg
-Example=x-directory-normal
-
-# KDE Specific Stuff
-DisplayDepth=32
-LinkOverlay=link_overlay
-LockOverlay=lock_overlay
-ZipOverlay=zip_overlay
-DesktopDefault=48
-DesktopSizes=16,22,32,48,64,72,96,128
-ToolbarDefault=22
-ToolbarSizes=16,22,32,48
-MainToolbarDefault=22
-MainToolbarSizes=16,22,32,48
-SmallDefault=16
-SmallSizes=16
-PanelDefault=32
-PanelSizes=16,22,32,48,64,72,96,128
-
-# Directory list
-Directories=16x16/actions,16x16/apps,16x16/categories,16x16/devices,16x16/emblems,16x16/emotes,16x16/mimetypes,16x16/places,16x16/status,22x22/actions,22x22/apps,22x22/categories,22x22/devices,22x22/emblems,22x22/emotes,22x22/mimetypes,22x22/places,22x22/status,24x24/actions,24x24/apps,24x24/categories,24x24/devices,24x24/emblems,24x24/emotes,24x24/mimetypes,24x24/places,24x24/status,32x32/actions,32x32/apps,32x32/categories,32x32/devices,32x32/emblems,32x32/emotes,32x32/mimetypes,32x32/places,32x32/status,48x48/actions,48x48/apps,48x48/categories,48x48/devices,48x48/emblems,48x48/emotes,48x48/mimetypes,48x48/places,48x48/status,64x64/actions,64x64/apps,64x64/categories,64x64/devices,64x64/emblems,64x64/emotes,64x64/mimetypes,64x64/places,64x64/status,72x72/actions,72x72/apps,72x72/categories,72x72/devices,72x72/emblems,72x72/emotes,72x72/mimetypes,72x72/places,72x72/status,96x96/actions,96x96/apps,96x96/categories,96x96/devices,96x96/emblems,96x96/emotes,96x96/mimetypes,96x96/places,96x96/status,128x128/actions,128x128/apps,128x128/categories,128x128/devices,128x128/emblems,128x128/emotes,128x128/mimetypes,128x128/places,128x128/status,scalable/actions,scalable/apps,scalable/categories,scalable/devices,scalable/emblems,scalable/emotes,scalable/mimetypes,scalable/places,scalable/status
-
-[16x16/actions]
-Size=16
-Context=Actions
-Type=Fixed
-
-[16x16/apps]
-Size=16
-Context=Applications
-Type=Fixed
-
-[16x16/categories]
-Size=16
-Context=Categories
-Type=Fixed
-
-[16x16/devices]
-Size=16
-Context=Devices
-Type=Fixed
-
-[16x16/emblems]
-Size=16
-Context=Emblems
-Type=Fixed
-
-[16x16/emotes]
-Size=16
-Context=Emotes
-Type=Fixed
-
-[16x16/mimetypes]
-Size=16
-Context=MimeTypes
-Type=Fixed
-
-[16x16/places]
-Size=16
-Context=Places
-Type=Fixed
-
-[16x16/status]
-Size=16
-Context=Status
-Type=Fixed
-
-[22x22/actions]
-Size=22
-Context=Actions
-Type=Fixed
-
-[22x22/apps]
-Size=22
-Context=Applications
-Type=Fixed
-
-[22x22/categories]
-Size=22
-Context=Categories
-Type=Fixed
-
-[22x22/devices]
-Size=22
-Context=Devices
-Type=Fixed
-
-[22x22/emblems]
-Size=22
-Context=Emblems
-Type=Fixed
-
-[22x22/emotes]
-Size=22
-Context=Emotes
-Type=Fixed
-
-[22x22/mimetypes]
-Size=22
-Context=MimeTypes
-Type=Fixed
-
-[22x22/places]
-Size=22
-Context=Places
-Type=Fixed
-
-[22x22/status]
-Size=22
-Context=Status
-Type=Fixed
-
-[24x24/actions]
-Size=24
-Context=Actions
-Type=Fixed
-
-[24x24/apps]
-Size=24
-Context=Applications
-Type=Fixed
-
-[24x24/categories]
-Size=24
-Context=Categories
-Type=Fixed
-
-[24x24/devices]
-Size=24
-Context=Devices
-Type=Fixed
-
-[24x24/emblems]
-Size=24
-Context=Emblems
-Type=Fixed
-
-[24x24/emotes]
-Size=24
-Context=Emotes
-Type=Fixed
-
-[24x24/mimetypes]
-Size=24
-Context=MimeTypes
-Type=Fixed
-
-[24x24/places]
-Size=24
-Context=Places
-Type=Fixed
-
-[24x24/status]
-Size=24
-Context=Status
-Type=Fixed
-
-[32x32/actions]
-Size=32
-Context=Actions
-Type=Fixed
-
-[32x32/apps]
-Size=32
-Context=Applications
-Type=Fixed
-
-[32x32/categories]
-Size=32
-Context=Categories
-Type=Fixed
-
-[32x32/devices]
-Size=32
-Context=Devices
-Type=Fixed
-
-[32x32/emblems]
-Size=32
-Context=Emblems
-Type=Fixed
-
-[32x32/emotes]
-Size=32
-Context=Emotes
-Type=Fixed
-
-[32x32/mimetypes]
-Size=32
-Context=MimeTypes
-Type=Fixed
-
-[32x32/places]
-Size=32
-Context=Places
-Type=Fixed
-
-[32x32/status]
-Size=32
-Context=Status
-Type=Fixed
-
-[48x48/actions]
-Size=48
-Context=Actions
-Type=Fixed
-
-[48x48/apps]
-Size=48
-Context=Applications
-Type=Fixed
-
-[48x48/categories]
-Size=48
-Context=Categories
-Type=Fixed
-
-[48x48/devices]
-Size=48
-Context=Devices
-Type=Fixed
-
-[48x48/emblems]
-Size=48
-Context=Emblems
-Type=Fixed
-
-[48x48/emotes]
-Size=48
-Context=Emotes
-Type=Fixed
-
-[48x48/mimetypes]
-Size=48
-Context=MimeTypes
-Type=Fixed
-
-[48x48/places]
-Size=48
-Context=Places
-Type=Fixed
-
-[48x48/status]
-Size=48
-Context=Status
-Type=Fixed
-
-[64x64/actions]
-Size=64
-Context=Actions
-Type=Fixed
-
-[64x64/apps]
-Size=64
-Context=Applications
-Type=Fixed
-
-[64x64/categories]
-Size=64
-Context=Categories
-Type=Fixed
-
-[64x64/devices]
-Size=64
-Context=Devices
-Type=Fixed
-
-[64x64/emblems]
-Size=64
-Context=Emblems
-Type=Fixed
-
-[64x64/emotes]
-Size=64
-Context=Emotes
-Type=Fixed
-
-[64x64/mimetypes]
-Size=64
-Context=MimeTypes
-Type=Fixed
-
-[64x64/places]
-Size=64
-Context=Places
-Type=Fixed
-
-[64x64/status]
-Size=64
-Context=Status
-Type=Fixed
-
-[72x72/actions]
-Size=72
-Context=Actions
-Type=Fixed
-
-[72x72/apps]
-Size=72
-Context=Applications
-Type=Fixed
-
-[72x72/categories]
-Size=72
-Context=Categories
-Type=Fixed
-
-[72x72/devices]
-Size=72
-Context=Devices
-Type=Fixed
-
-[72x72/emblems]
-Size=72
-Context=Emblems
-Type=Fixed
-
-[72x72/emotes]
-Size=72
-Context=Emotes
-Type=Fixed
-
-[72x72/mimetypes]
-Size=72
-Context=MimeTypes
-Type=Fixed
-
-[72x72/places]
-Size=72
-Context=Places
-Type=Fixed
-
-[72x72/status]
-Size=72
-Context=Status
-Type=Fixed
-
-[96x96/actions]
-Size=96
-Context=Actions
-Type=Fixed
-
-[96x96/apps]
-Size=96
-Context=Applications
-Type=Fixed
-
-[96x96/categories]
-Size=96
-Context=Categories
-Type=Fixed
-
-[96x96/devices]
-Size=96
-Context=Devices
-Type=Fixed
-
-[96x96/emblems]
-Size=96
-Context=Emblems
-Type=Fixed
-
-[96x96/emotes]
-Size=96
-Context=Emotes
-Type=Fixed
-
-[96x96/mimetypes]
-Size=96
-Context=MimeTypes
-Type=Fixed
-
-[96x96/places]
-Size=96
-Context=Places
-Type=Fixed
-
-[96x96/status]
-Size=96
-Context=Status
-Type=Fixed
-
-[128x128/actions]
-Size=128
-Context=Actions
-Type=Fixed
-
-[128x128/apps]
-Size=128
-Context=Applications
-Type=Fixed
-
-[128x128/categories]
-Size=128
-Context=Categories
-Type=Fixed
-
-[128x128/devices]
-Size=128
-Context=Devices
-Type=Fixed
-
-[128x128/emblems]
-Size=128
-Context=Emblems
-Type=Fixed
-
-[128x128/emotes]
-Size=128
-Context=Emotes
-Type=Fixed
-
-[128x128/mimetypes]
-Size=128
-Context=MimeTypes
-Type=Fixed
-
-[128x128/places]
-Size=128
-Context=Places
-Type=Fixed
-
-[128x128/status]
-Size=128
-Context=Status
-Type=Fixed
-
-[scalable/actions]
-Size=48
-Context=Actions
-Type=Scalable
-MinSize=32
-MaxSize=256
-
-[scalable/apps]
-Size=48
-Context=Applications
-Type=Scalable
-MinSize=32
-MaxSize=256
-
-[scalable/categories]
-Size=48
-Context=Categories
-Type=Scalable
-MinSize=32
-MaxSize=256
-
-[scalable/devices]
-Size=48
-Context=Devices
-Type=Scalable
-MinSize=32
-MaxSize=256
-
-[scalable/emblems]
-Size=48
-Context=Emblems
-Type=Scalable
-MinSize=32
-MaxSize=256
-
-[scalable/emotes]
-Size=48
-Context=Emotes
-Type=Scalable
-Minsize=32
-MaxSize=256
-
-[scalable/mimetypes]
-Size=48
-Context=MimeTypes
-Type=Scalable
-MinSize=32
-MaxSize=256
-
-[scalable/places]
-Size=48
-Context=Places
-Type=Scalable
-MinSize=32
-MaxSize=256
-
-[scalable/status]
-Size=48
-Context=Status
-Type=Scalable
-MinSize=32
-MaxSize=256
diff --git a/tests/auto/widgets/kernel/qicon/icons/themeparent/scalable/actions/address-book-new.svg b/tests/auto/widgets/kernel/qicon/icons/themeparent/scalable/actions/address-book-new.svg
deleted file mode 100644
index 600a82c..0000000
--- a/tests/auto/widgets/kernel/qicon/icons/themeparent/scalable/actions/address-book-new.svg
+++ /dev/null
@@ -1,389 +0,0 @@
-<?xml version="1.0" encoding="UTF-8" standalone="no"?>
-<!-- Created with Inkscape (http://www.inkscape.org/) -->
-<svg
-   xmlns:dc="http://purl.org/dc/elements/1.1/"
-   xmlns:cc="http://creativecommons.org/ns#"
-   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
-   xmlns:svg="http://www.w3.org/2000/svg"
-   xmlns="http://www.w3.org/2000/svg"
-   xmlns:xlink="http://www.w3.org/1999/xlink"
-   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
-   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
-   width="48px"
-   height="48px"
-   id="svg1256"
-   sodipodi:version="0.32"
-   inkscape:version="0.46"
-   sodipodi:docbase="/home/jimmac/src/cvs/tango-icon-theme/scalable/actions"
-   sodipodi:docname="address-book-new.svg"
-   inkscape:output_extension="org.inkscape.output.svg.inkscape">
-  <defs
-     id="defs3">
-    <inkscape:perspective
-       sodipodi:type="inkscape:persp3d"
-       inkscape:vp_x="0 : 24 : 1"
-       inkscape:vp_y="0 : 1000 : 0"
-       inkscape:vp_z="48 : 24 : 1"
-       inkscape:persp3d-origin="24 : 16 : 1"
-       id="perspective58" />
-    <linearGradient
-       inkscape:collect="always"
-       id="linearGradient5060">
-      <stop
-         style="stop-color:black;stop-opacity:1;"
-         offset="0"
-         id="stop5062" />
-      <stop
-         style="stop-color:black;stop-opacity:0;"
-         offset="1"
-         id="stop5064" />
-    </linearGradient>
-    <linearGradient
-       id="linearGradient5048">
-      <stop
-         style="stop-color:black;stop-opacity:0;"
-         offset="0"
-         id="stop5050" />
-      <stop
-         id="stop5056"
-         offset="0.5"
-         style="stop-color:black;stop-opacity:1;" />
-      <stop
-         style="stop-color:black;stop-opacity:0;"
-         offset="1"
-         id="stop5052" />
-    </linearGradient>
-    <linearGradient
-       id="linearGradient12512">
-      <stop
-         style="stop-color:#ffffff;stop-opacity:1.0000000;"
-         offset="0.0000000"
-         id="stop12513" />
-      <stop
-         style="stop-color:#fff520;stop-opacity:0.89108908;"
-         offset="0.50000000"
-         id="stop12517" />
-      <stop
-         style="stop-color:#fff300;stop-opacity:0.0000000;"
-         offset="1.0000000"
-         id="stop12514" />
-    </linearGradient>
-    <radialGradient
-       inkscape:collect="always"
-       xlink:href="#linearGradient12512"
-       id="radialGradient278"
-       gradientUnits="userSpaceOnUse"
-       cx="55.000000"
-       cy="125.00000"
-       fx="55.000000"
-       fy="125.00000"
-       r="14.375000" />
-    <linearGradient
-       inkscape:collect="always"
-       id="linearGradient2116">
-      <stop
-         style="stop-color:#ffffff;stop-opacity:1;"
-         offset="0"
-         id="stop2118" />
-      <stop
-         style="stop-color:#ffffff;stop-opacity:0;"
-         offset="1"
-         id="stop2120" />
-    </linearGradient>
-    <linearGradient
-       id="linearGradient2094">
-      <stop
-         style="stop-color:#d6e3f0;stop-opacity:1.0000000;"
-         offset="0.0000000"
-         id="stop2096" />
-      <stop
-         style="stop-color:#95b1cf;stop-opacity:1.0000000;"
-         offset="1.0000000"
-         id="stop2098" />
-    </linearGradient>
-    <linearGradient
-       id="linearGradient2803">
-      <stop
-         id="stop2805"
-         offset="0"
-         style="stop-color:#ffffff;stop-opacity:1;" />
-      <stop
-         id="stop2807"
-         offset="1.0000000"
-         style="stop-color:#cbcbcb;stop-opacity:1.0000000;" />
-    </linearGradient>
-    <linearGradient
-       id="linearGradient2795">
-      <stop
-         id="stop2797"
-         offset="0.0000000"
-         style="stop-color:#000000;stop-opacity:0.068627454;" />
-      <stop
-         id="stop2799"
-         offset="1.0000000"
-         style="stop-color:#ffffff;stop-opacity:1.0000000;" />
-    </linearGradient>
-    <linearGradient
-       gradientUnits="userSpaceOnUse"
-       y2="4.9530048"
-       x2="41.219128"
-       y1="4.9530050"
-       x1="35.433035"
-       gradientTransform="matrix(0.254000,0.000000,1.822151e-16,3.759813,0.788629,0.148567)"
-       id="linearGradient2801"
-       xlink:href="#linearGradient2795"
-       inkscape:collect="always" />
-    <linearGradient
-       gradientUnits="userSpaceOnUse"
-       y2="84.287079"
-       x2="10.219901"
-       y1="93.338043"
-       x1="10.496115"
-       gradientTransform="matrix(2.262742,0.000000,0.000000,0.441942,1.000000,-0.875000)"
-       id="linearGradient2813"
-       xlink:href="#linearGradient2803"
-       inkscape:collect="always" />
-    <linearGradient
-       inkscape:collect="always"
-       xlink:href="#linearGradient2094"
-       id="linearGradient2100"
-       gradientTransform="matrix(0.957750,0.000000,0.000000,1.027989,1.000000,-0.571911)"
-       x1="6.5871811"
-       y1="22.132999"
-       x2="14.511404"
-       y2="22.132999"
-       gradientUnits="userSpaceOnUse" />
-    <linearGradient
-       inkscape:collect="always"
-       xlink:href="#linearGradient2116"
-       id="linearGradient2112"
-       gradientTransform="matrix(1.025428,0.000000,0.000000,0.957303,0.000000,-0.806758)"
-       x1="73.361984"
-       y1="26.652197"
-       x2="-2.7582901"
-       y2="21.270376"
-       gradientUnits="userSpaceOnUse" />
-    <radialGradient
-       inkscape:collect="always"
-       xlink:href="#linearGradient5060"
-       id="radialGradient5013"
-       gradientUnits="userSpaceOnUse"
-       cx="605.71429"
-       cy="486.64789"
-       fx="605.71429"
-       fy="486.64789"
-       r="117.14286"
-       gradientTransform="matrix(2.774389,0,0,1.969706,-1891.633,-872.8854)" />
-    <linearGradient
-       inkscape:collect="always"
-       xlink:href="#linearGradient5048"
-       id="linearGradient5016"
-       gradientUnits="userSpaceOnUse"
-       x1="302.85715"
-       y1="366.64789"
-       x2="302.85715"
-       y2="609.50507"
-       gradientTransform="matrix(2.774389,0,0,1.969706,-1892.179,-872.8854)" />
-    <radialGradient
-       inkscape:collect="always"
-       xlink:href="#linearGradient5060"
-       id="radialGradient5020"
-       gradientUnits="userSpaceOnUse"
-       gradientTransform="matrix(-2.774389,0,0,1.969706,112.7623,-872.8854)"
-       cx="605.71429"
-       cy="486.64789"
-       fx="605.71429"
-       fy="486.64789"
-       r="117.14286" />
-    <linearGradient
-       inkscape:collect="always"
-       xlink:href="#linearGradient5048"
-       id="linearGradient5027"
-       gradientUnits="userSpaceOnUse"
-       gradientTransform="matrix(2.774389,0,0,1.969706,-1892.179,-872.8854)"
-       x1="302.85715"
-       y1="366.64789"
-       x2="302.85715"
-       y2="609.50507" />
-    <radialGradient
-       inkscape:collect="always"
-       xlink:href="#linearGradient5060"
-       id="radialGradient5029"
-       gradientUnits="userSpaceOnUse"
-       gradientTransform="matrix(2.774389,0,0,1.969706,-1891.633,-872.8854)"
-       cx="605.71429"
-       cy="486.64789"
-       fx="605.71429"
-       fy="486.64789"
-       r="117.14286" />
-    <radialGradient
-       inkscape:collect="always"
-       xlink:href="#linearGradient5060"
-       id="radialGradient5031"
-       gradientUnits="userSpaceOnUse"
-       gradientTransform="matrix(-2.774389,0,0,1.969706,112.7623,-872.8854)"
-       cx="605.71429"
-       cy="486.64789"
-       fx="605.71429"
-       fy="486.64789"
-       r="117.14286" />
-  </defs>
-  <sodipodi:namedview
-     id="base"
-     pagecolor="#ffffff"
-     bordercolor="#666666"
-     borderopacity="0.27843137"
-     inkscape:pageopacity="0.0"
-     inkscape:pageshadow="2"
-     inkscape:zoom="1"
-     inkscape:cx="-111.52422"
-     inkscape:cy="10.167608"
-     inkscape:current-layer="layer1"
-     showgrid="false"
-     inkscape:grid-bbox="true"
-     inkscape:document-units="px"
-     inkscape:window-width="872"
-     inkscape:window-height="688"
-     inkscape:window-x="562"
-     inkscape:window-y="160"
-     fill="#ef2929"
-     stroke="#cc0000"
-     inkscape:showpageshadow="false" />
-  <metadata
-     id="metadata4">
-    <rdf:RDF>
-      <cc:Work
-         rdf:about="">
-        <dc:format>image/svg+xml</dc:format>
-        <dc:type
-           rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
-        <dc:title>Addess Book - New</dc:title>
-        <dc:date />
-        <dc:creator>
-          <cc:Agent>
-            <dc:title>Jakub Steiner</dc:title>
-          </cc:Agent>
-        </dc:creator>
-        <dc:source>http://jimmac.musichall.cz</dc:source>
-        <dc:subject>
-          <rdf:Bag>
-            <rdf:li>address</rdf:li>
-            <rdf:li>contact</rdf:li>
-            <rdf:li>book</rdf:li>
-          </rdf:Bag>
-        </dc:subject>
-        <cc:license
-           rdf:resource="http://creativecommons.org/licenses/publicdomain/" />
-      </cc:Work>
-      <cc:License
-         rdf:about="http://creativecommons.org/licenses/publicdomain/">
-        <cc:permits
-           rdf:resource="http://creativecommons.org/ns#Reproduction" />
-        <cc:permits
-           rdf:resource="http://creativecommons.org/ns#Distribution" />
-        <cc:permits
-           rdf:resource="http://creativecommons.org/ns#DerivativeWorks" />
-      </cc:License>
-    </rdf:RDF>
-  </metadata>
-  <g
-     id="layer1"
-     inkscape:label="Layer 1"
-     inkscape:groupmode="layer">
-    <path
-       style="opacity:1;color:#000000;fill:#edd400;fill-opacity:1;fill-rule:evenodd;stroke:#c4a000;stroke-width:1;stroke-linecap:round;stroke-linejoin:round;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"
-       d="M 33.096456,4.6520202 L 40.521077,4.6520202 C 41.228184,4.6520202 41.758513,4.8287969 41.93529,5.71268 L 42.819174,12.606972 C 42.907562,13.667632 42.443523,14.021185 41.493349,14.021185 L 32.919679,14.021185 L 33.096456,4.6520202 z "
-       id="path21630"
-       sodipodi:nodetypes="ccccccc" />
-    <path
-       sodipodi:nodetypes="ccccccc"
-       id="path21632"
-       d="M 34.10295,5.638875 L 40.463507,5.638875 C 40.771656,5.638875 40.940266,5.669037 40.986054,5.960473 L 41.777489,12.344449 C 41.847258,12.775421 41.959897,13.019804 41.637211,13.034341 L 33.963412,13.034341 L 34.10295,5.638875 z "
-       style="opacity:0.48538011;color:#000000;fill:none;fill-opacity:1;fill-rule:evenodd;stroke:#ffffff;stroke-width:1.0000006;stroke-linecap:round;stroke-linejoin:round;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible" />
-    <path
-       sodipodi:nodetypes="ccccccc"
-       id="path21634"
-       d="M 35.596456,12.40202 L 43.021077,12.40202 C 43.728184,12.40202 44.258513,12.578797 44.43529,13.46268 L 45.319174,20.356972 C 45.407562,21.417632 44.943523,21.771185 43.993349,21.771185 L 35.419679,21.771185 L 35.596456,12.40202 z "
-       style="opacity:1;color:#000000;fill:#9db029;fill-opacity:1;fill-rule:evenodd;stroke:#727e0a;stroke-width:1;stroke-linecap:round;stroke-linejoin:round;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible" />
-    <path
-       style="opacity:0.48538011;color:#000000;fill:none;fill-opacity:1;fill-rule:evenodd;stroke:#ffffff;stroke-width:1.0000006;stroke-linecap:round;stroke-linejoin:round;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"
-       d="M 36.60295,13.388875 L 42.963507,13.388875 C 43.271656,13.388875 43.440266,13.419037 43.486054,13.710473 L 44.277489,20.094449 C 44.347258,20.525421 44.459897,20.769804 44.137211,20.784341 L 36.463412,20.784341 L 36.60295,13.388875 z "
-       id="path21636"
-       sodipodi:nodetypes="ccccccc" />
-    <path
-       style="opacity:1;color:#000000;fill:#ef2929;fill-opacity:1;fill-rule:evenodd;stroke:#cc0000;stroke-width:0.99999988;stroke-linecap:round;stroke-linejoin:round;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"
-       d="M 36.06451,20.776498 L 44.50992,20.776498 C 45.314245,20.776498 45.917487,20.995896 46.118569,22.092882 L 47.123975,30.649381 C 47.224515,31.965765 46.696677,32.40456 45.615866,32.40456 L 35.863428,32.40456 L 36.06451,20.776498 z "
-       id="path21638"
-       sodipodi:nodetypes="ccccccc" />
-    <path
-       sodipodi:nodetypes="ccccccc"
-       id="path21640"
-       d="M 37.209384,21.763574 L 44.444435,21.763574 C 44.79495,21.763574 44.986742,21.801928 45.038825,22.172513 L 45.939072,30.290267 C 46.018433,30.838284 46.146559,31.149038 45.779508,31.167522 L 37.050661,31.167522 L 37.209384,21.763574 z "
-       style="opacity:0.48538011;color:#000000;fill:none;fill-opacity:1;fill-rule:evenodd;stroke:#ffffff;stroke-width:1.00000072;stroke-linecap:round;stroke-linejoin:round;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible" />
-    <g
-       id="g5022"
-       transform="matrix(2.165152e-2,0,0,4.307902e-2,43.08625,34.04509)">
-      <rect
-         y="-150.69685"
-         x="-1559.2523"
-         height="478.35718"
-         width="1339.6335"
-         id="rect4173"
-         style="opacity:0.40206185;color:black;fill:url(#linearGradient5027);fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1;stroke-linecap:round;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible" />
-      <path
-         sodipodi:nodetypes="cccc"
-         id="path5058"
-         d="M -219.61876,-150.68038 C -219.61876,-150.68038 -219.61876,327.65041 -219.61876,327.65041 C -76.744594,328.55086 125.78146,220.48075 125.78138,88.454235 C 125.78138,-43.572302 -33.655436,-150.68036 -219.61876,-150.68038 z "
-         style="opacity:0.40206185;color:black;fill:url(#radialGradient5029);fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1;stroke-linecap:round;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible" />
-      <path
-         style="opacity:0.40206185;color:black;fill:url(#radialGradient5031);fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1;stroke-linecap:round;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"
-         d="M -1559.2523,-150.68038 C -1559.2523,-150.68038 -1559.2523,327.65041 -1559.2523,327.65041 C -1702.1265,328.55086 -1904.6525,220.48075 -1904.6525,88.454235 C -1904.6525,-43.572302 -1745.2157,-150.68036 -1559.2523,-150.68038 z "
-         id="path5018"
-         sodipodi:nodetypes="cccc" />
-    </g>
-    <path
-       style="color:#000000;fill:#5b6b94;fill-opacity:1;fill-rule:nonzero;stroke:#364878;stroke-width:1.00000012;stroke-linecap:round;stroke-linejoin:round;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"
-       d="M 6.3643222,5.5185897 C 6.4551049,3.6036003 7.3719758,2.5542814 9.0788784,2.549044 L 38.405776,2.4590577 C 38.652361,2.4583011 38.974317,2.6592071 38.999012,2.9089888 L 42.257491,35.867228 L 40.942189,35.923862 L 41.571429,42.369516 C 41.632441,42.994499 41.390059,43.52882 40.5,43.533035 L 9.7893046,43.678474 C 7.25676,43.690468 4.6538454,41.59976 4.7759337,39.024403 L 6.3643222,5.5185897 z "
-       id="rect1408"
-       sodipodi:nodetypes="csssccsssss" />
-    <path
-       id="path2489"
-       d="M 40.125,34.875 L 10.9375,35 C 9.3809819,35.177868 8.125,36.39612 8.125,38 C 8.125,39.60388 9.3809819,40.822132 10.9375,41 L 40.125,41.125 L 40.125,41.0625 C 38.469378,40.984348 37.125,39.674851 37.125,38 C 37.125,36.325149 38.469378,35.015652 40.125,34.9375 L 40.125,34.875 z "
-       style="color:#000000;fill:url(#linearGradient2813);fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1;stroke-linecap:round;stroke-linejoin:round;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible" />
-    <path
-       sodipodi:nodetypes="ccccccssc"
-       id="path2784"
-       d="M 9.6875,2.8125 C 7.9805897,2.8125 7.050103,3.8215062 6.96875,5.6738658 L 5.3125,37.825772 C 5.22054,40.904199 7.1393732,42.654485 9.125,43.15625 C 4.875,41.525579 5.4375,34.164455 10.75,34.195222 L 41.648286,34.195222 L 38.335786,3.2432432 C 38.310025,3.0025304 37.987878,2.8125 37.742036,2.8125 L 9.6875,2.8125 z "
-       style="color:#000000;fill:url(#linearGradient2100);fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1;stroke-linecap:round;stroke-linejoin:round;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible" />
-    <rect
-       y="3.968539"
-       x="9.7886267"
-       height="29.604792"
-       width="2"
-       id="rect2793"
-       style="opacity:0.48044691;color:#000000;fill:url(#linearGradient2801);fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1;stroke-linecap:round;stroke-linejoin:round;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dashoffset:0;stroke-opacity:0.60818715;visibility:visible;display:inline;overflow:visible"
-       transform="matrix(1.000000,0.000000,-3.582731e-2,0.999358,0.000000,0.000000)" />
-    <path
-       style="color:#000000;fill:none;fill-opacity:1;fill-rule:nonzero;stroke:url(#linearGradient2112);stroke-width:1.00000012;stroke-linecap:round;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:20;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"
-       d="M 9.8751008,3.3336831 C 8.1912014,3.3336831 7.5384236,4.0658459 7.4581673,5.887831 L 6.1592633,35.777198 C 7.0925916,34.170451 8.5988591,33.594437 11.011665,33.594437 L 40.963081,33.594437 L 38.137179,3.7573631 C 38.114727,3.5203092 37.793961,3.3336831 37.551434,3.3336831 L 9.8751008,3.3336831 z "
-       id="path2104"
-       sodipodi:nodetypes="cccscssc" />
-    <path
-       style="font-size:12px;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;line-height:120.00000477%;writing-mode:lr-tb;text-anchor:start;fill:#ad7fa8;fill-opacity:1;stroke:none;stroke-width:1pt;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;font-family:Bitstream Vera Sans"
-       d="M 21.12553,18.381288 C 21.050283,19.50227 21.269376,20.384155 21.782812,21.026947 C 22.296751,21.661909 23.039741,21.979388 24.011788,21.979387 C 24.97597,21.979388 25.754005,21.65799 26.345892,21.01519 C 26.945589,20.372398 27.282799,19.49443 27.357529,18.381288 C 27.431173,17.283839 27.207372,16.413709 26.686123,15.770905 C 26.165371,15.120279 25.426826,14.794959 24.470482,14.79495 C 23.521952,14.794959 22.743917,15.11636 22.136378,15.759145 C 21.536656,16.401952 21.199707,17.275998 21.12553,18.381288 M 27.29793,21.897075 C 26.787062,22.500679 26.216183,22.947501 25.58529,23.237544 C 24.962734,23.519747 24.247754,23.66085 23.44035,23.660849 C 22.092032,23.66085 21.027197,23.174832 20.245835,22.202797 C 19.472826,21.222925 19.138938,19.949092 19.244172,18.381288 C 19.349395,16.813498 19.858197,15.539665 20.770584,14.559781 C 21.682954,13.579917 22.809375,13.089981 24.149854,13.089969 C 24.957257,13.089981 25.656689,13.238924 26.24815,13.536791 C 26.840107,13.826846 27.347352,14.269749 27.76988,14.865501 L 27.873267,13.325141 L 29.554732,13.325141 L 28.973868,21.979387 C 30.129917,21.806931 31.058551,21.285637 31.759769,20.415508 C 32.469312,19.537544 32.870659,18.404812 32.963808,17.017304 C 33.020082,16.178542 32.947536,15.390722 32.746168,14.653848 C 32.552597,13.916994 32.226018,13.235002 31.766435,12.607873 C 31.020085,11.580979 30.077151,10.79708 28.937625,10.256176 C 27.806428,9.707462 26.551007,9.433097 25.171361,9.433081 C 24.207151,9.433097 23.27347,9.56244 22.370314,9.821111 C 21.467662,10.071974 20.623234,10.448244 19.837027,10.949925 C 18.552629,11.749517 17.517932,12.79994 16.732929,14.101199 C 15.956279,15.394643 15.517185,16.797819 15.415642,18.310738 C 15.331983,19.557142 15.476998,20.725151 15.85069,21.814765 C 16.232213,22.904387 16.822316,23.864664 17.621,24.695594 C 18.389368,25.51085 19.300238,26.130129 20.353615,26.553435 C 21.406448,26.984578 22.54823,27.20015 23.778962,27.200153 C 24.790178,27.20015 25.793384,27.027692 26.788584,26.682781 C 27.791068,26.345701 28.72125,25.859684 29.579139,25.224728 L 30.549801,26.529919 C 29.518874,27.2903 28.409917,27.870384 27.222932,28.270174 C 26.043227,28.677799 24.857618,28.881612 23.666104,28.881616 C 22.215881,28.881612 20.865341,28.622926 19.614483,28.105557 C 18.36308,27.596019 17.268571,26.851316 16.330955,25.871444 C 15.393328,24.89157 14.705054,23.758838 14.266133,22.47324 C 13.827731,21.179813 13.658252,19.792311 13.757696,18.310738 C 13.853452,16.88405 14.211263,15.523986 14.831129,14.230542 C 15.450993,12.937121 16.287663,11.800469 17.34115,10.820582 C 18.419191,9.825045 19.638236,9.0646655 20.998287,8.5394366 C 22.358842,8.0064001 23.779908,7.7398759 25.261489,7.7398585 C 26.923341,7.7398759 28.440813,8.080872 29.813913,8.7628469 C 31.194815,9.444854 32.325282,10.41297 33.205316,11.667193 C 33.741656,12.435425 34.132443,13.270279 34.377679,14.171752 C 34.630708,15.073243 34.724877,16.006082 34.660187,16.970271 C 34.521787,19.031929 33.789414,20.658519 32.463064,21.850041 C 31.136671,23.04157 29.374449,23.66085 27.17639,23.707883 L 27.29793,21.897075"
-       id="text21625" />
-    <path
-       sodipodi:type="arc"
-       style="color:#000000;fill:url(#radialGradient278);fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1.25000024;stroke-linecap:butt;stroke-linejoin:round;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:block"
-       id="path12511"
-       sodipodi:cx="55"
-       sodipodi:cy="125"
-       sodipodi:rx="14.375"
-       sodipodi:ry="14.375"
-       d="M 69.375 125 A 14.375 14.375 0 1 1  40.625,125 A 14.375 14.375 0 1 1  69.375 125 z"
-       transform="matrix(0.611127,0.000000,0.000000,0.611127,-24.94992,-67.63529)"
-       inkscape:export-filename="/home/jimmac/ximian_art/icons/nautilus/suse93/stock_new-16.png"
-       inkscape:export-xdpi="33.852203"
-       inkscape:export-ydpi="33.852203" />
-  </g>
-</svg>
diff --git a/tests/auto/widgets/kernel/qicon/icons/themeparent/scalable/actions/appointment-new.svg b/tests/auto/widgets/kernel/qicon/icons/themeparent/scalable/actions/appointment-new.svg
deleted file mode 100644
index 4cb14f8..0000000
--- a/tests/auto/widgets/kernel/qicon/icons/themeparent/scalable/actions/appointment-new.svg
+++ /dev/null
@@ -1,425 +0,0 @@
-<?xml version="1.0" encoding="UTF-8" standalone="no"?>
-<!-- Created with Inkscape (http://www.inkscape.org/) -->
-<svg
-   xmlns:dc="http://purl.org/dc/elements/1.1/"
-   xmlns:cc="http://creativecommons.org/ns#"
-   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
-   xmlns:svg="http://www.w3.org/2000/svg"
-   xmlns="http://www.w3.org/2000/svg"
-   xmlns:xlink="http://www.w3.org/1999/xlink"
-   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
-   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
-   inkscape:export-ydpi="90.000000"
-   inkscape:export-xdpi="90.000000"
-   inkscape:export-filename="/home/jimmac/Desktop/wi-fi.png"
-   width="48px"
-   height="48px"
-   id="svg11300"
-   sodipodi:version="0.32"
-   inkscape:version="0.46"
-   sodipodi:docbase="/home/tigert/cvs/freedesktop.org/tango-icon-theme/scalable/actions"
-   sodipodi:docname="appointment-new.svg"
-   inkscape:output_extension="org.inkscape.output.svg.inkscape">
-  <defs
-     id="defs3">
-    <inkscape:perspective
-       sodipodi:type="inkscape:persp3d"
-       inkscape:vp_x="0 : 24 : 1"
-       inkscape:vp_y="0 : 1000 : 0"
-       inkscape:vp_z="48 : 24 : 1"
-       inkscape:persp3d-origin="24 : 16 : 1"
-       id="perspective59" />
-    <linearGradient
-       inkscape:collect="always"
-       id="linearGradient5204">
-      <stop
-         style="stop-color:#c4a000;stop-opacity:1;"
-         offset="0"
-         id="stop5206" />
-      <stop
-         style="stop-color:#c4a000;stop-opacity:0;"
-         offset="1"
-         id="stop5208" />
-    </linearGradient>
-    <linearGradient
-       inkscape:collect="always"
-       id="linearGradient5196">
-      <stop
-         style="stop-color:#c4a000;stop-opacity:1;"
-         offset="0"
-         id="stop5198" />
-      <stop
-         style="stop-color:#c4a000;stop-opacity:0;"
-         offset="1"
-         id="stop5200" />
-    </linearGradient>
-    <linearGradient
-       id="linearGradient12512">
-      <stop
-         style="stop-color:#ffffff;stop-opacity:1.0000000;"
-         offset="0.0000000"
-         id="stop12513" />
-      <stop
-         style="stop-color:#fff520;stop-opacity:0.89108908;"
-         offset="0.50000000"
-         id="stop12517" />
-      <stop
-         style="stop-color:#fff300;stop-opacity:0.0000000;"
-         offset="1.0000000"
-         id="stop12514" />
-    </linearGradient>
-    <radialGradient
-       inkscape:collect="always"
-       xlink:href="#linearGradient12512"
-       id="radialGradient278"
-       gradientUnits="userSpaceOnUse"
-       cx="55.000000"
-       cy="125.00000"
-       fx="55.000000"
-       fy="125.00000"
-       r="14.375000" />
-    <linearGradient
-       id="linearGradient10653">
-      <stop
-         style="stop-color:#f3f4ff;stop-opacity:1.0000000;"
-         offset="0.0000000"
-         id="stop10655" />
-      <stop
-         style="stop-color:#9193af;stop-opacity:1.0000000;"
-         offset="1.0000000"
-         id="stop10657" />
-    </linearGradient>
-    <linearGradient
-       id="linearGradient42174">
-      <stop
-         style="stop-color:#a0a0a0;stop-opacity:1.0000000;"
-         offset="0.0000000"
-         id="stop42176" />
-      <stop
-         style="stop-color:#ffffff;stop-opacity:1.0000000;"
-         offset="1.0000000"
-         id="stop42178" />
-    </linearGradient>
-    <linearGradient
-       id="linearGradient2145">
-      <stop
-         style="stop-color:#fffffd;stop-opacity:1.0000000;"
-         offset="0.0000000"
-         id="stop2147" />
-      <stop
-         style="stop-color:#cbcbc9;stop-opacity:1.0000000;"
-         offset="1.0000000"
-         id="stop2149" />
-    </linearGradient>
-    <linearGradient
-       id="linearGradient37935">
-      <stop
-         id="stop37937"
-         offset="0.0000000"
-         style="stop-color:#9497b3;stop-opacity:1.0000000;" />
-      <stop
-         id="stop37939"
-         offset="1.0000000"
-         style="stop-color:#4c4059;stop-opacity:1.0000000;" />
-    </linearGradient>
-    <linearGradient
-       id="linearGradient2152">
-      <stop
-         id="stop2154"
-         offset="0.0000000"
-         style="stop-color:#9aa29a;stop-opacity:1.0000000;" />
-      <stop
-         id="stop2156"
-         offset="1.0000000"
-         style="stop-color:#b5beb5;stop-opacity:1.0000000;" />
-    </linearGradient>
-    <linearGradient
-       inkscape:collect="always"
-       id="linearGradient3816">
-      <stop
-         style="stop-color:#000000;stop-opacity:1;"
-         offset="0"
-         id="stop3818" />
-      <stop
-         style="stop-color:#000000;stop-opacity:0;"
-         offset="1"
-         id="stop3820" />
-    </linearGradient>
-    <radialGradient
-       inkscape:collect="always"
-       xlink:href="#linearGradient3816"
-       id="radialGradient3822"
-       cx="31.112698"
-       cy="19.008621"
-       fx="31.112698"
-       fy="19.008621"
-       r="8.6620579"
-       gradientUnits="userSpaceOnUse" />
-    <linearGradient
-       inkscape:collect="always"
-       xlink:href="#linearGradient2152"
-       id="linearGradient4307"
-       gradientUnits="userSpaceOnUse"
-       gradientTransform="matrix(3.123841,0.000000,0.000000,0.969691,-31.88758,-19.59492)"
-       x1="8.9156475"
-       y1="37.197018"
-       x2="9.8855033"
-       y2="52.090678" />
-    <radialGradient
-       inkscape:collect="always"
-       xlink:href="#linearGradient10653"
-       id="radialGradient4309"
-       gradientUnits="userSpaceOnUse"
-       cx="11.329200"
-       cy="10.583970"
-       fx="11.329200"
-       fy="10.583970"
-       r="15.532059" />
-    <radialGradient
-       inkscape:collect="always"
-       xlink:href="#linearGradient2145"
-       id="radialGradient4311"
-       gradientUnits="userSpaceOnUse"
-       cx="11.901996"
-       cy="10.045444"
-       fx="11.901996"
-       fy="10.045444"
-       r="29.292715" />
-    <linearGradient
-       inkscape:collect="always"
-       xlink:href="#linearGradient42174"
-       id="linearGradient4313"
-       gradientUnits="userSpaceOnUse"
-       x1="6.3422160"
-       y1="7.7893324"
-       x2="22.218424"
-       y2="25.884274" />
-    <radialGradient
-       inkscape:collect="always"
-       xlink:href="#linearGradient5196"
-       id="radialGradient5202"
-       cx="23.375"
-       cy="10.972863"
-       fx="23.375"
-       fy="10.972863"
-       r="3.3478092"
-       gradientTransform="matrix(3.630420,1.654030e-15,-1.608743e-15,3.742066,-61.48607,-29.18618)"
-       gradientUnits="userSpaceOnUse" />
-    <linearGradient
-       inkscape:collect="always"
-       xlink:href="#linearGradient5204"
-       id="linearGradient5210"
-       x1="19.667364"
-       y1="4.2570662"
-       x2="20.329933"
-       y2="5.2845874"
-       gradientUnits="userSpaceOnUse" />
-    <radialGradient
-       inkscape:collect="always"
-       xlink:href="#linearGradient37935"
-       id="radialGradient5212"
-       gradientUnits="userSpaceOnUse"
-       cx="8.7468252"
-       cy="6.8283234"
-       fx="8.7468252"
-       fy="6.8283234"
-       r="29.889715" />
-  </defs>
-  <sodipodi:namedview
-     stroke="#c4a000"
-     fill="#babdb6"
-     id="base"
-     pagecolor="#ffffff"
-     bordercolor="#666666"
-     borderopacity="0.25490196"
-     inkscape:pageopacity="0.0"
-     inkscape:pageshadow="2"
-     inkscape:zoom="11.313708"
-     inkscape:cx="13.2248"
-     inkscape:cy="25.106052"
-     inkscape:current-layer="layer1"
-     showgrid="false"
-     inkscape:grid-bbox="true"
-     inkscape:document-units="px"
-     inkscape:showpageshadow="false"
-     inkscape:window-width="833"
-     inkscape:window-height="772"
-     inkscape:window-x="305"
-     inkscape:window-y="76" />
-  <metadata
-     id="metadata4">
-    <rdf:RDF>
-      <cc:Work
-         rdf:about="">
-        <dc:format>image/svg+xml</dc:format>
-        <dc:type
-           rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
-        <dc:creator>
-          <cc:Agent>
-            <dc:title>Jakub Steiner</dc:title>
-          </cc:Agent>
-        </dc:creator>
-        <dc:source>http://jimmac.musichall.cz</dc:source>
-        <cc:license
-           rdf:resource="http://creativecommons.org/licenses/publicdomain/" />
-        <dc:title>New Appointment</dc:title>
-        <dc:subject>
-          <rdf:Bag>
-            <rdf:li>appointment</rdf:li>
-            <rdf:li>new</rdf:li>
-            <rdf:li>meeting</rdf:li>
-            <rdf:li>rvsp</rdf:li>
-          </rdf:Bag>
-        </dc:subject>
-      </cc:Work>
-      <cc:License
-         rdf:about="http://creativecommons.org/licenses/publicdomain/">
-        <cc:permits
-           rdf:resource="http://creativecommons.org/ns#Reproduction" />
-        <cc:permits
-           rdf:resource="http://creativecommons.org/ns#Distribution" />
-        <cc:permits
-           rdf:resource="http://creativecommons.org/ns#DerivativeWorks" />
-      </cc:License>
-    </rdf:RDF>
-  </metadata>
-  <g
-     id="layer1"
-     inkscape:label="Layer 1"
-     inkscape:groupmode="layer">
-    <path
-       d="M 39.774755 19.008621 A 8.6620579 8.6620579 0 1 1  22.45064,19.008621 A 8.6620579 8.6620579 0 1 1  39.774755 19.008621 z"
-       sodipodi:ry="8.6620579"
-       sodipodi:rx="8.6620579"
-       sodipodi:cy="19.008621"
-       sodipodi:cx="31.112698"
-       id="path4318"
-       style="opacity:1;color:#000000;fill:url(#radialGradient3822);fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:round;stroke-linejoin:round;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"
-       sodipodi:type="arc"
-       transform="matrix(2.563158,0.000000,0.000000,1.219602,-55.98414,14.04144)" />
-    <path
-       sodipodi:nodetypes="cccc"
-       id="path14341"
-       d="M 18.587591,1.403729 L 4.226755,18.096665 L 5.4854717,19.339844 L 18.587591,1.403729 z "
-       style="color:#000000;fill:url(#linearGradient4307);fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible" />
-    <path
-       sodipodi:nodetypes="cccc"
-       id="path18921"
-       d="M 18.467176,1.3138035 L 5.6605716,19.072612 L 7.4900985,20.687913 L 18.467176,1.3138035 z "
-       style="fill:#fefefe;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1" />
-    <path
-       transform="matrix(1.431529,0.000000,0.000000,1.431529,0.569459,-1.654618)"
-       d="M 31.160714 16.910715 A 14.910714 14.910714 0 1 1  1.3392859,16.910715 A 14.910714 14.910714 0 1 1  31.160714 16.910715 z"
-       sodipodi:ry="14.910714"
-       sodipodi:rx="14.910714"
-       sodipodi:cy="16.910715"
-       sodipodi:cx="16.25"
-       id="path27786"
-       style="fill:url(#radialGradient5212);fill-opacity:1;fill-rule:evenodd;stroke:#605773;stroke-width:0.69855404;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dashoffset:0;stroke-opacity:1"
-       sodipodi:type="arc" />
-    <path
-       transform="matrix(1.163838,0.000000,0.000000,1.163838,4.824801,2.777556)"
-       d="M 31.160714 16.910715 A 14.910714 14.910714 0 1 1  1.3392859,16.910715 A 14.910714 14.910714 0 1 1  31.160714 16.910715 z"
-       sodipodi:ry="14.910714"
-       sodipodi:rx="14.910714"
-       sodipodi:cy="16.910715"
-       sodipodi:cx="16.25"
-       id="path35549"
-       style="fill:url(#radialGradient4311);fill-opacity:1;fill-rule:evenodd;stroke:url(#linearGradient4313);stroke-width:0.71139598;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dashoffset:0;stroke-opacity:1"
-       sodipodi:type="arc" />
-    <path
-       sodipodi:type="arc"
-       style="opacity:1;color:#000000;fill:url(#radialGradient5202);fill-opacity:1;fill-rule:evenodd;stroke:url(#linearGradient5210);stroke-width:0.56498736;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible"
-       id="path4120"
-       sodipodi:cx="23.375"
-       sodipodi:cy="11.875"
-       sodipodi:rx="8.5"
-       sodipodi:ry="8.5"
-       d="M 16.679382,6.6387137 A 8.5,8.5 0 0 1 23.332691,3.3751053 L 23.375,11.875 z"
-       transform="matrix(1.769951,0.000000,0.000000,1.769951,-17.02424,1.610741)"
-       sodipodi:start="3.8052902"
-       sodipodi:end="4.7074114" />
-    <path
-       transform="matrix(2.073295,0.000000,0.000000,2.073295,-7.310224,-13.13682)"
-       d="M 16.40625 17.28125 A 1.21875 1.21875 0 1 1  13.96875,17.28125 A 1.21875 1.21875 0 1 1  16.40625 17.28125 z"
-       sodipodi:ry="1.21875"
-       sodipodi:rx="1.21875"
-       sodipodi:cy="17.28125"
-       sodipodi:cx="15.1875"
-       id="path34778"
-       style="fill:#f3f3f3;fill-opacity:1;fill-rule:evenodd;stroke:#000000;stroke-width:0.48232403;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dashoffset:0;stroke-opacity:1;stroke-dasharray:none"
-       sodipodi:type="arc" />
-    <path
-       id="path35559"
-       d="M 22.176614,20.718014 L 13.155702,13.140282"
-       style="fill:none;fill-opacity:0.75;fill-rule:evenodd;stroke:#000000;stroke-width:1;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none" />
-    <path
-       id="path35561"
-       d="M 19.408614,29.776506 L 22.368655,25.283228"
-       style="fill:none;fill-opacity:0.75;fill-rule:evenodd;stroke:#000000;stroke-width:2;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
-       sodipodi:nodetypes="cc" />
-    <path
-       transform="matrix(2.749493,0.000000,0.000000,2.749493,-22.30073,-12.40939)"
-       d="M 17.324117 7.6932044 A 0.61871845 0.61871845 0 1 1  16.08668,7.6932044 A 0.61871845 0.61871845 0 1 1  17.324117 7.6932044 z"
-       sodipodi:ry="0.61871845"
-       sodipodi:rx="0.61871845"
-       sodipodi:cy="7.6932044"
-       sodipodi:cx="16.705399"
-       id="path35563"
-       style="fill:#b6b9b1;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1.36871839;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dashoffset:0;stroke-opacity:1;opacity:1"
-       sodipodi:type="arc" />
-    <path
-       transform="matrix(2.749493,0.000000,0.000000,2.749493,-22.30073,14.80922)"
-       d="M 17.324117 7.6932044 A 0.61871845 0.61871845 0 1 1  16.08668,7.6932044 A 0.61871845 0.61871845 0 1 1  17.324117 7.6932044 z"
-       sodipodi:ry="0.61871845"
-       sodipodi:rx="0.61871845"
-       sodipodi:cy="7.6932044"
-       sodipodi:cx="16.705399"
-       id="path35565"
-       style="fill:#b6b9b1;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1.36871839;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dashoffset:0;stroke-opacity:1;opacity:1"
-       sodipodi:type="arc" />
-    <path
-       transform="matrix(2.749493,0.000000,0.000000,2.749493,-35.91004,1.199890)"
-       d="M 17.324117 7.6932044 A 0.61871845 0.61871845 0 1 1  16.08668,7.6932044 A 0.61871845 0.61871845 0 1 1  17.324117 7.6932044 z"
-       sodipodi:ry="0.61871845"
-       sodipodi:rx="0.61871845"
-       sodipodi:cy="7.6932044"
-       sodipodi:cx="16.705399"
-       id="path35567"
-       style="fill:#b6b9b1;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1.36871839;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dashoffset:0;stroke-opacity:1;opacity:1"
-       sodipodi:type="arc" />
-    <path
-       transform="matrix(2.749493,0.000000,0.000000,2.749493,-8.691448,1.199890)"
-       d="M 17.324117 7.6932044 A 0.61871845 0.61871845 0 1 1  16.08668,7.6932044 A 0.61871845 0.61871845 0 1 1  17.324117 7.6932044 z"
-       sodipodi:ry="0.61871845"
-       sodipodi:rx="0.61871845"
-       sodipodi:cy="7.6932044"
-       sodipodi:cx="16.705399"
-       id="path35569"
-       style="fill:#b6b9b1;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1.36871839;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dashoffset:0;stroke-opacity:1;opacity:1"
-       sodipodi:type="arc" />
-    <path
-       sodipodi:type="arc"
-       style="fill:none;fill-opacity:1;fill-rule:evenodd;stroke:url(#radialGradient4309);stroke-width:0.73656511;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dashoffset:0;stroke-opacity:1"
-       id="path10651"
-       sodipodi:cx="16.25"
-       sodipodi:cy="16.910715"
-       sodipodi:rx="14.910714"
-       sodipodi:ry="14.910714"
-       d="M 31.160714 16.910715 A 14.910714 14.910714 0 1 1  1.3392859,16.910715 A 14.910714 14.910714 0 1 1  31.160714 16.910715 z"
-       transform="matrix(1.357654,0.000000,0.000000,1.357654,1.769896,-0.493735)" />
-    <path
-       sodipodi:type="arc"
-       style="color:#000000;fill:url(#radialGradient278);fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1.25000024;stroke-linecap:butt;stroke-linejoin:round;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:block"
-       id="path12511"
-       sodipodi:cx="55"
-       sodipodi:cy="125"
-       sodipodi:rx="14.375"
-       sodipodi:ry="14.375"
-       d="M 69.375 125 A 14.375 14.375 0 1 1  40.625,125 A 14.375 14.375 0 1 1  69.375 125 z"
-       transform="matrix(0.611127,0.000000,0.000000,0.611127,5.544052,-66.92818)"
-       inkscape:export-filename="/home/jimmac/ximian_art/icons/nautilus/suse93/stock_new-16.png"
-       inkscape:export-xdpi="33.852203"
-       inkscape:export-ydpi="33.852203" />
-  </g>
-</svg>
diff --git a/tests/auto/widgets/kernel/qicon/image.png b/tests/auto/widgets/kernel/qicon/image.png
deleted file mode 100644
index 8d70364..0000000
Binary files a/tests/auto/widgets/kernel/qicon/image.png and /dev/null differ
diff --git a/tests/auto/widgets/kernel/qicon/qicon.pro b/tests/auto/widgets/kernel/qicon/qicon.pro
deleted file mode 100644
index c44c080..0000000
--- a/tests/auto/widgets/kernel/qicon/qicon.pro
+++ /dev/null
@@ -1,12 +0,0 @@
-CONFIG += testcase
-TARGET = tst_qicon
-
-QT += widgets testlib
-SOURCES += tst_qicon.cpp
-RESOURCES = tst_qicon.qrc
-
-wince* {
-   QT += xml svg
-   DEPLOYMENT_PLUGIN += qsvg
-}
-TESTDATA += icons/* *.png *.svg *.svgz
diff --git a/tests/auto/widgets/kernel/qicon/rect.png b/tests/auto/widgets/kernel/qicon/rect.png
deleted file mode 100644
index b5d3ecb..0000000
Binary files a/tests/auto/widgets/kernel/qicon/rect.png and /dev/null differ
diff --git a/tests/auto/widgets/kernel/qicon/tst_qicon.cpp b/tests/auto/widgets/kernel/qicon/tst_qicon.cpp
deleted file mode 100644
index cca0887..0000000
--- a/tests/auto/widgets/kernel/qicon/tst_qicon.cpp
+++ /dev/null
@@ -1,637 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/
-**
-** This file is part of the test suite of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:LGPL$
-** GNU Lesser General Public License Usage
-** This file may be used under the terms of the GNU Lesser General Public
-** License version 2.1 as published by the Free Software Foundation and
-** appearing in the file LICENSE.LGPL included in the packaging of this
-** file. Please review the following information to ensure the GNU Lesser
-** General Public License version 2.1 requirements will be met:
-** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
-**
-** In addition, as a special exception, Nokia gives you certain additional
-** rights. These rights are described in the Nokia Qt LGPL Exception
-** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
-**
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU General
-** Public License version 3.0 as published by the Free Software Foundation
-** and appearing in the file LICENSE.GPL included in the packaging of this
-** file. Please review the following information to ensure the GNU General
-** Public License version 3.0 requirements will be met:
-** http://www.gnu.org/copyleft/gpl.html.
-**
-** Other Usage
-** Alternatively, this file may be used in accordance with the terms and
-** conditions contained in a signed written agreement between you and Nokia.
-**
-**
-**
-**
-**
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-
-#include <QtTest/QtTest>
-#include <QImageReader>
-#include <qicon.h>
-#include <qiconengine.h>
-
-Q_DECLARE_METATYPE(QSize)
-
-class tst_QIcon : public QObject
-{
-    Q_OBJECT
-public:
-    tst_QIcon();
-
-private slots:
-    void actualSize_data(); // test with 1 pixmap
-    void actualSize();
-    void actualSize2_data(); // test with 2 pixmaps with different aspect ratio
-    void actualSize2();
-    void isNull();
-    void swap();
-    void bestMatch();
-    void cacheKey();
-    void detach();
-    void addFile();
-    void availableSizes();
-    void name();
-    void streamAvailableSizes_data();
-    void streamAvailableSizes();
-    void fromTheme();
-
-    void task184901_badCache();
-    void task223279_inconsistentAddFile();
-
-private:
-    bool haveImageFormat(QByteArray const&);
-
-    const static QIcon staticIcon;
-};
-
-// Creating an icon statically should not cause a crash. 
-// But we do not officially support this. See QTBUG-8666
-const QIcon tst_QIcon::staticIcon = QIcon::fromTheme("edit-find");
-
-bool tst_QIcon::haveImageFormat(QByteArray const& desiredFormat)
-{
-    return QImageReader::supportedImageFormats().contains(desiredFormat);
-}
-
-tst_QIcon::tst_QIcon()
-{
-}
-
-void tst_QIcon::actualSize_data()
-{
-    QTest::addColumn<QString>("source");
-    QTest::addColumn<QSize>("argument");
-    QTest::addColumn<QSize>("result");
-
-    // square image
-    QTest::newRow("resource0") << ":/image.png" << QSize(128, 128) << QSize(128, 128);
-    QTest::newRow("resource1") << ":/image.png" << QSize( 64,  64) << QSize( 64,  64);
-    QTest::newRow("resource2") << ":/image.png" << QSize( 32,  64) << QSize( 32,  32);
-    QTest::newRow("resource3") << ":/image.png" << QSize( 16,  64) << QSize( 16,  16);
-    QTest::newRow("resource4") << ":/image.png" << QSize( 16,  128) << QSize( 16,  16);
-    QTest::newRow("resource5") << ":/image.png" << QSize( 128,  16) << QSize( 16,  16);
-    QTest::newRow("resource6") << ":/image.png" << QSize( 150,  150) << QSize( 128,  128);
-    // rect image
-    QTest::newRow("resource7") << ":/rect.png" << QSize( 20,  40) << QSize( 20,  40);
-    QTest::newRow("resource8") << ":/rect.png" << QSize( 10,  20) << QSize( 10,  20);
-    QTest::newRow("resource9") << ":/rect.png" << QSize( 15,  50) << QSize( 15,  30);
-    QTest::newRow("resource10") << ":/rect.png" << QSize( 25,  50) << QSize( 20,  40);
-
-    const QString prefix = QFileInfo(QFINDTESTDATA("icons")).absolutePath() + "/";
-    QTest::newRow("external0") << prefix + "image.png" << QSize(128, 128) << QSize(128, 128);
-    QTest::newRow("external1") << prefix + "image.png" << QSize( 64,  64) << QSize( 64,  64);
-    QTest::newRow("external2") << prefix + "image.png" << QSize( 32,  64) << QSize( 32,  32);
-    QTest::newRow("external3") << prefix + "image.png" << QSize( 16,  64) << QSize( 16,  16);
-    QTest::newRow("external4") << prefix + "image.png" << QSize( 16,  128) << QSize( 16,  16);
-    QTest::newRow("external5") << prefix + "image.png" << QSize( 128,  16) << QSize( 16,  16);
-    QTest::newRow("external6") << prefix + "image.png" << QSize( 150,  150) << QSize( 128,  128);
-    // rect image
-    QTest::newRow("external7") << ":/rect.png" << QSize( 20,  40) << QSize( 20,  40);
-    QTest::newRow("external8") << ":/rect.png" << QSize( 10,  20) << QSize( 10,  20);
-    QTest::newRow("external9") << ":/rect.png" << QSize( 15,  50) << QSize( 15,  30);
-    QTest::newRow("external10") << ":/rect.png" << QSize( 25,  50) << QSize( 20,  40);
-}
-
-void tst_QIcon::actualSize()
-{
-    QFETCH(QString, source);
-    QFETCH(QSize, argument);
-    QFETCH(QSize, result);
-
-    {
-        QPixmap pixmap(source);
-        QIcon icon(pixmap);
-        QCOMPARE(icon.actualSize(argument), result);
-        QCOMPARE(icon.pixmap(argument).size(), result);
-    }
-
-    {
-        QIcon icon(source);
-        QCOMPARE(icon.actualSize(argument), result);
-        QCOMPARE(icon.pixmap(argument).size(), result);
-    }
-}
-
-void tst_QIcon::actualSize2_data()
-{
-    QTest::addColumn<QSize>("argument");
-    QTest::addColumn<QSize>("result");
-
-    // two images - 128x128 and 20x40. Let the games begin
-    QTest::newRow("trivial1") << QSize( 128,  128) << QSize( 128,  128);
-    QTest::newRow("trivial2") << QSize( 20,  40) << QSize( 20,  40);
-
-    // QIcon chooses the one with the smallest area to choose the pixmap
-    QTest::newRow("best1") << QSize( 100,  100) << QSize( 100,  100);
-    QTest::newRow("best2") << QSize( 20,  20) << QSize( 10,  20);
-    QTest::newRow("best3") << QSize( 15,  30) << QSize( 15,  30);
-    QTest::newRow("best4") << QSize( 5,  5) << QSize( 2,  5);
-    QTest::newRow("best5") << QSize( 10,  15) << QSize( 7,  15);
-}
-
-void tst_QIcon::actualSize2()
-{
-    QIcon icon;
-    const QString prefix = QFileInfo(QFINDTESTDATA("icons")).absolutePath() + "/";
-
-    icon.addPixmap(QPixmap(prefix + "image.png"));
-    icon.addPixmap(QPixmap(prefix + "rect.png"));
-
-    QFETCH(QSize, argument);
-    QFETCH(QSize, result);
-
-    QCOMPARE(icon.actualSize(argument), result);
-    QCOMPARE(icon.pixmap(argument).size(), result);
-}
-
-void tst_QIcon::isNull() {
-    // test default constructor
-    QIcon defaultConstructor;
-    QVERIFY(defaultConstructor.isNull());
-
-    // test copy constructor
-    QVERIFY(QIcon(defaultConstructor).isNull());
-
-    // test pixmap constructor
-    QPixmap nullPixmap;
-    QVERIFY(QIcon(nullPixmap).isNull());
-
-    // test string constructor with empty string
-    QIcon iconEmptyString = QIcon(QString());
-    QVERIFY(iconEmptyString.isNull());
-    QVERIFY(!iconEmptyString.actualSize(QSize(32, 32)).isValid());;
-
-    // test string constructor with non-existing file
-    QIcon iconNoFile = QIcon("imagedoesnotexist");
-    QVERIFY(!iconNoFile.isNull());
-    QVERIFY(!iconNoFile.actualSize(QSize(32, 32)).isValid());
-
-    // test string constructor with non-existing file with suffix
-    QIcon iconNoFileSuffix = QIcon("imagedoesnotexist.png");
-    QVERIFY(!iconNoFileSuffix.isNull());
-    QVERIFY(!iconNoFileSuffix.actualSize(QSize(32, 32)).isValid());
-
-    const QString prefix = QFileInfo(QFINDTESTDATA("icons")).absolutePath() + "/";
-    // test string constructor with existing file but unsupported format
-    QIcon iconUnsupportedFormat = QIcon(prefix + "tst_qicon.cpp");
-    QVERIFY(!iconUnsupportedFormat.isNull());
-    QVERIFY(!iconUnsupportedFormat.actualSize(QSize(32, 32)).isValid());
-
-    // test string constructor with existing file and supported format
-    QIcon iconSupportedFormat = QIcon(prefix + "image.png");
-    QVERIFY(!iconSupportedFormat.isNull());
-    QVERIFY(iconSupportedFormat.actualSize(QSize(32, 32)).isValid());
-}
-
-void tst_QIcon::swap()
-{
-    QPixmap p1(1, 1), p2(2, 2);
-    p1.fill(Qt::black);
-    p2.fill(Qt::black);
-
-    QIcon i1(p1), i2(p2);
-    const qint64 i1k = i1.cacheKey();
-    const qint64 i2k = i2.cacheKey();
-    QVERIFY(i1k != i2k);
-    i1.swap(i2);
-    QCOMPARE(i1.cacheKey(), i2k);
-    QCOMPARE(i2.cacheKey(), i1k);
-}
-
-void tst_QIcon::bestMatch()
-{
-    QPixmap p1(1, 1);
-    QPixmap p2(2, 2);
-    QPixmap p3(3, 3);
-    QPixmap p4(4, 4);
-    QPixmap p5(5, 5);
-    QPixmap p6(6, 6);
-    QPixmap p7(7, 7);
-    QPixmap p8(8, 8);
-
-    p1.fill(Qt::black);
-    p2.fill(Qt::black);
-    p3.fill(Qt::black);
-    p4.fill(Qt::black);
-    p5.fill(Qt::black);
-    p6.fill(Qt::black);
-    p7.fill(Qt::black);
-    p8.fill(Qt::black);
-
-    for (int i = 0; i < 4; ++i) {
-        for (int j = 0; j < 2; ++j) {
-            QIcon::State state = (j == 0) ? QIcon::On : QIcon::Off;
-            QIcon::State oppositeState = (state == QIcon::On) ? QIcon::Off
-                                                              : QIcon::On;
-            QIcon::Mode mode;
-            QIcon::Mode oppositeMode;
-
-            QIcon icon;
-
-            switch (i) {
-            case 0:
-            default:
-                mode = QIcon::Normal;
-                oppositeMode = QIcon::Active;
-                break;
-            case 1:
-                mode = QIcon::Active;
-                oppositeMode = QIcon::Normal;
-                break;
-            case 2:
-                mode = QIcon::Disabled;
-                oppositeMode = QIcon::Selected;
-                break;
-            case 3:
-                mode = QIcon::Selected;
-                oppositeMode = QIcon::Disabled;
-            }
-
-            /*
-                The test mirrors the code in
-                QPixmapIconEngine::bestMatch(), to make sure that
-                nobody breaks QPixmapIconEngine by mistake. Before
-                you change this test or the code that it tests,
-                please talk to the maintainer if possible.
-            */
-            if (mode == QIcon::Disabled || mode == QIcon::Selected) {
-                icon.addPixmap(p1, oppositeMode, oppositeState);
-                QVERIFY(icon.pixmap(100, mode, state).size() == p1.size());
-
-                icon.addPixmap(p2, oppositeMode, state);
-                QVERIFY(icon.pixmap(100, mode, state).size() == p2.size());
-
-                icon.addPixmap(p3, QIcon::Active, oppositeState);
-                QVERIFY(icon.pixmap(100, mode, state).size() == p3.size());
-
-                icon.addPixmap(p4, QIcon::Normal, oppositeState);
-                QVERIFY(icon.pixmap(100, mode, state).size() == p4.size());
-
-                icon.addPixmap(p5, mode, oppositeState);
-                QVERIFY(icon.pixmap(100, mode, state).size() == p5.size());
-
-                icon.addPixmap(p6, QIcon::Active, state);
-                QVERIFY(icon.pixmap(100, mode, state).size() == p6.size());
-
-                icon.addPixmap(p7, QIcon::Normal, state);
-                QVERIFY(icon.pixmap(100, mode, state).size() == p7.size());
-
-                icon.addPixmap(p8, mode, state);
-                QVERIFY(icon.pixmap(100, mode, state).size() == p8.size());
-            } else {
-                icon.addPixmap(p1, QIcon::Selected, oppositeState);
-                QVERIFY(icon.pixmap(100, mode, state).size() == p1.size());
-
-                icon.addPixmap(p2, QIcon::Disabled, oppositeState);
-                QVERIFY(icon.pixmap(100, mode, state).size() == p2.size());
-
-                icon.addPixmap(p3, QIcon::Selected, state);
-                QVERIFY(icon.pixmap(100, mode, state).size() == p3.size());
-
-                icon.addPixmap(p4, QIcon::Disabled, state);
-                QVERIFY(icon.pixmap(100, mode, state).size() == p4.size());
-
-                icon.addPixmap(p5, oppositeMode, oppositeState);
-                QVERIFY(icon.pixmap(100, mode, state).size() == p5.size());
-
-                icon.addPixmap(p6, mode, oppositeState);
-                QVERIFY(icon.pixmap(100, mode, state).size() == p6.size());
-
-                icon.addPixmap(p7, oppositeMode, state);
-                QVERIFY(icon.pixmap(100, mode, state).size() == p7.size());
-
-                icon.addPixmap(p8, mode, state);
-                QVERIFY(icon.pixmap(100, mode, state).size() == p8.size());
-            }
-        }
-    }
-}
-
-void tst_QIcon::cacheKey()
-{
-    QIcon icon1("image.png");
-    qint64 icon1_key = icon1.cacheKey();
-    QIcon icon2 = icon1;
-
-    QVERIFY(icon2.cacheKey() == icon1.cacheKey());
-    icon2.detach();
-    QVERIFY(icon2.cacheKey() != icon1.cacheKey());
-    QVERIFY(icon1.cacheKey() == icon1_key);
-}
-
-void tst_QIcon::detach()
-{
-    QImage img(32, 32, QImage::Format_ARGB32_Premultiplied);
-    img.fill(0xffff0000);
-    QIcon icon1(QPixmap::fromImage(img));
-    QIcon icon2 = icon1;
-    icon2.addFile(QFINDTESTDATA("image.png"), QSize(64, 64));
-
-    QImage img1 = icon1.pixmap(64, 64).toImage();
-    QImage img2 = icon2.pixmap(64, 64).toImage();
-    QVERIFY(img1 != img2);
-
-    img1 = icon1.pixmap(32, 32).toImage();
-    img2 = icon2.pixmap(32, 32).toImage();
-    QVERIFY(img1 == img2);
-}
-
-void tst_QIcon::addFile()
-{
-    QIcon icon;
-    icon.addFile(QLatin1String(":/qt-project.org/styles/commonstyle/images/standardbutton-open-16.png"));
-    icon.addFile(QLatin1String(":/qt-project.org/styles/commonstyle/images/standardbutton-open-32.png"));
-    icon.addFile(QLatin1String(":/qt-project.org/styles/commonstyle/images/standardbutton-open-128.png"));
-    icon.addFile(QLatin1String(":/qt-project.org/styles/commonstyle/images/standardbutton-save-16.png"), QSize(), QIcon::Selected);
-    icon.addFile(QLatin1String(":/qt-project.org/styles/commonstyle/images/standardbutton-save-32.png"), QSize(), QIcon::Selected);
-    icon.addFile(QLatin1String(":/qt-project.org/styles/commonstyle/images/standardbutton-save-128.png"), QSize(), QIcon::Selected);
-
-#ifndef Q_OS_WINCE
-    QVERIFY(icon.pixmap(16, QIcon::Normal).toImage() ==
-            QPixmap(QLatin1String(":/qt-project.org/styles/commonstyle/images/standardbutton-open-16.png")).toImage());
-    QVERIFY(icon.pixmap(32, QIcon::Normal).toImage() ==
-            QPixmap(QLatin1String(":/qt-project.org/styles/commonstyle/images/standardbutton-open-32.png")).toImage());
-    QVERIFY(icon.pixmap(128, QIcon::Normal).toImage() ==
-            QPixmap(QLatin1String(":/qt-project.org/styles/commonstyle/images/standardbutton-open-128.png")).toImage());
-    QVERIFY(icon.pixmap(16, QIcon::Selected).toImage() ==
-            QPixmap(QLatin1String(":/qt-project.org/styles/commonstyle/images/standardbutton-save-16.png")).toImage());
-    QVERIFY(icon.pixmap(32, QIcon::Selected).toImage() ==
-            QPixmap(QLatin1String(":/qt-project.org/styles/commonstyle/images/standardbutton-save-32.png")).toImage());
-    QVERIFY(icon.pixmap(128, QIcon::Selected).toImage() ==
-            QPixmap(QLatin1String(":/qt-project.org/styles/commonstyle/images/standardbutton-save-128.png")).toImage());
-#else
-    // WinCE only includes the 16x16 images for size reasons
-    QVERIFY(icon.pixmap(16, QIcon::Normal).toImage() ==
-            QPixmap(QLatin1String(":/qt-project.org/styles/commonstyle/images/standardbutton-open-16.png")).toImage());
-    QVERIFY(icon.pixmap(16, QIcon::Selected).toImage() ==
-            QPixmap(QLatin1String(":/qt-project.org/styles/commonstyle/images/standardbutton-save-16.png")).toImage());
-#endif
-}
-
-static bool sizeLess(const QSize &a, const QSize &b)
-{
-    return a.width() < b.width();
-}
-
-void tst_QIcon::availableSizes()
-{
-    {
-        QIcon icon;
-        icon.addFile("image.png", QSize(32,32));
-        icon.addFile("image.png", QSize(64,64));
-        icon.addFile("image.png", QSize(128,128));
-        icon.addFile("image.png", QSize(256,256), QIcon::Disabled);
-        icon.addFile("image.png", QSize(16,16), QIcon::Normal, QIcon::On);
-
-        QList<QSize> availableSizes = icon.availableSizes();
-        QCOMPARE(availableSizes.size(), 3);
-        qSort(availableSizes.begin(), availableSizes.end(), sizeLess);
-        QCOMPARE(availableSizes.at(0), QSize(32,32));
-        QCOMPARE(availableSizes.at(1), QSize(64,64));
-        QCOMPARE(availableSizes.at(2), QSize(128,128));
-
-        availableSizes = icon.availableSizes(QIcon::Disabled);
-        QCOMPARE(availableSizes.size(), 1);
-        QCOMPARE(availableSizes.at(0), QSize(256,256));
-
-        availableSizes = icon.availableSizes(QIcon::Normal, QIcon::On);
-        QCOMPARE(availableSizes.size(), 1);
-        QCOMPARE(availableSizes.at(0), QSize(16,16));
-    }
-
-    {
-        // we try to load an icon from resources
-        QIcon icon(QLatin1String(":/qt-project.org/styles/commonstyle/images/standardbutton-open-16.png"));
-        QList<QSize> availableSizes = icon.availableSizes();
-        QCOMPARE(availableSizes.size(), 1);
-        QCOMPARE(availableSizes.at(0), QSize(16, 16));
-    }
-
-    {
-        // load an icon from binary data.
-        QPixmap pix;
-        QFile file(QLatin1String(":/qt-project.org/styles/commonstyle/images/standardbutton-open-16.png"));
-        QVERIFY(file.open(QIODevice::ReadOnly));
-        uchar *data = file.map(0, file.size());
-        QVERIFY(data != 0);
-        pix.loadFromData(data, file.size());
-        QIcon icon(pix);
-
-        QList<QSize> availableSizes = icon.availableSizes();
-        QCOMPARE(availableSizes.size(), 1);
-        QCOMPARE(availableSizes.at(0), QSize(16,16));
-    }
-
-    {
-        // there shouldn't be available sizes for invalid images!
-        QVERIFY(QIcon(QLatin1String("")).availableSizes().isEmpty());
-        QVERIFY(QIcon(QLatin1String("non-existing.png")).availableSizes().isEmpty());
-    }
-}
-
-void tst_QIcon::name()
-{
-    {
-        // No name if icon does not come from a theme
-        QIcon icon(":/image.png");
-        QString name = icon.name();
-        QVERIFY(name.isEmpty());
-    }
-
-    {
-        // Getting the name of an icon coming from a theme should work
-        QString searchPath = QLatin1String(":/icons");
-        QIcon::setThemeSearchPaths(QStringList() << searchPath);
-        QString themeName("testtheme");
-        QIcon::setThemeName(themeName);
-
-        QIcon icon = QIcon::fromTheme("appointment-new");
-        QString name = icon.name();
-        QCOMPARE(name, QLatin1String("appointment-new"));
-    }
-}
-
-void tst_QIcon::streamAvailableSizes_data()
-{
-    QTest::addColumn<QIcon>("icon");
-
-    QIcon icon;
-    icon.addFile(":/image.png", QSize(32,32));
-    QTest::newRow( "32x32" ) << icon;
-    icon.addFile(":/image.png", QSize(64,64));
-    QTest::newRow( "64x64" ) << icon;
-    icon.addFile(":/image.png", QSize(128,128));
-    QTest::newRow( "128x128" ) << icon;
-    icon.addFile(":/image.png", QSize(256,256));
-    QTest::newRow( "256x256" ) << icon;
-}
-
-void tst_QIcon::streamAvailableSizes()
-{
-    QFETCH(QIcon, icon);
-
-    QByteArray ba;
-    // write to QByteArray
-    {
-        QBuffer buffer(&ba);
-        buffer.open(QIODevice::WriteOnly);
-        QDataStream stream(&buffer);
-        stream << icon;
-    }
-
-    // read from QByteArray
-    {
-        QBuffer buffer(&ba);
-        buffer.open(QIODevice::ReadOnly);
-        QDataStream stream(&buffer);
-        QIcon i;
-        stream >> i;
-        QCOMPARE(i.isNull(), icon.isNull());
-        QCOMPARE(i.availableSizes(), icon.availableSizes());
-    }
-}
-
-
-static inline bool operator<(const QSize &lhs, const QSize &rhs)
-{
-    if (lhs.width() < rhs.width())
-        return true;
-    else if (lhs.width() == lhs.width())
-        return lhs.height() < lhs.height();
-    return false;
-}
-
-void tst_QIcon::task184901_badCache()
-{
-    QPixmap pm(QFINDTESTDATA("image.png"));
-    QIcon icon(pm);
-
-    //the disabled icon must have an effect (grayed)
-    QVERIFY(icon.pixmap(32, QIcon::Normal).toImage() != icon.pixmap(32, QIcon::Disabled).toImage());
-
-    icon.addPixmap(pm, QIcon::Disabled);
-    //the disabled icon must now be the same as the normal one.
-    QVERIFY( icon.pixmap(32, QIcon::Normal).toImage() == icon.pixmap(32, QIcon::Disabled).toImage() );
-}
-
-void tst_QIcon::fromTheme()
-{
-    QString searchPath = QLatin1String(":/icons");
-    QIcon::setThemeSearchPaths(QStringList() << searchPath);
-    QVERIFY(QIcon::themeSearchPaths().size() == 1);
-    QCOMPARE(searchPath, QIcon::themeSearchPaths()[0]);
-
-    QString themeName("testtheme");
-    QIcon::setThemeName(themeName);
-    QCOMPARE(QIcon::themeName(), themeName);
-
-    // Test normal icon
-    QIcon appointmentIcon = QIcon::fromTheme("appointment-new");
-    QVERIFY(!appointmentIcon.isNull());
-    QVERIFY(!appointmentIcon.availableSizes(QIcon::Normal, QIcon::Off).isEmpty());
-    QVERIFY(appointmentIcon.availableSizes().contains(QSize(16, 16)));
-    QVERIFY(appointmentIcon.availableSizes().contains(QSize(32, 32)));
-    QVERIFY(appointmentIcon.availableSizes().contains(QSize(22, 22)));
-
-    // Test icon from parent theme
-    QIcon abIcon = QIcon::fromTheme("address-book-new");
-    QVERIFY(!abIcon.isNull());
-    QVERIFY(QIcon::hasThemeIcon("address-book-new"));
-    QVERIFY(!abIcon.availableSizes().isEmpty());
-
-    // Test non existing icon
-    QIcon noIcon = QIcon::fromTheme("broken-icon");
-    QVERIFY(noIcon.isNull());
-    QVERIFY(!QIcon::hasThemeIcon("broken-icon"));
-
-    // Test non existing icon with fallback
-    noIcon = QIcon::fromTheme("broken-icon", abIcon);
-    QVERIFY(noIcon.cacheKey() == abIcon.cacheKey());
-
-    // Test svg-only icon
-    noIcon = QIcon::fromTheme("svg-icon", abIcon);
-    QVERIFY(!noIcon.availableSizes().isEmpty());
-
-    QByteArray ba;
-    // write to QByteArray
-    {
-        QBuffer buffer(&ba);
-        buffer.open(QIODevice::WriteOnly);
-        QDataStream stream(&buffer);
-        stream << abIcon;
-    }
-
-    // read from QByteArray
-    {
-        QBuffer buffer(&ba);
-        buffer.open(QIODevice::ReadOnly);
-        QDataStream stream(&buffer);
-        QIcon i;
-        stream >> i;
-        QCOMPARE(i.isNull(), abIcon.isNull());
-        QCOMPARE(i.availableSizes(), abIcon.availableSizes());
-    }
-
-    // Make sure setting the theme name clears the state
-    QIcon::setThemeName("");
-    abIcon = QIcon::fromTheme("address-book-new");
-    QVERIFY(abIcon.isNull());
-}
-
-
-void tst_QIcon::task223279_inconsistentAddFile()
-{
-    QIcon icon1;
-    icon1.addFile(QLatin1String(":/qt-project.org/styles/commonstyle/images/standardbutton-open-16.png"));
-    icon1.addFile(QLatin1String("IconThatDoesntExist"), QSize(32, 32));
-    QPixmap pm1 = icon1.pixmap(32, 32);
-
-    QIcon icon2;
-    icon2.addFile(QLatin1String(":/qt-project.org/styles/commonstyle/images/standardbutton-open-16.png"));
-    icon2.addFile(QLatin1String("IconThatDoesntExist"));
-    QPixmap pm2 = icon1.pixmap(32, 32);
-
-    QCOMPARE(pm1.isNull(), false);
-    QCOMPARE(pm1.size(), QSize(16,16));
-    QCOMPARE(pm1.isNull(), pm2.isNull());
-    QCOMPARE(pm1.size(), pm2.size());
-}
-
-
-QTEST_MAIN(tst_QIcon)
-#include "tst_qicon.moc"
diff --git a/tests/auto/widgets/kernel/qicon/tst_qicon.qrc b/tests/auto/widgets/kernel/qicon/tst_qicon.qrc
deleted file mode 100644
index 7925a33..0000000
--- a/tests/auto/widgets/kernel/qicon/tst_qicon.qrc
+++ /dev/null
@@ -1,20 +0,0 @@
-<!DOCTYPE RCC><RCC version="1.0">
-<qresource prefix="/">
-<file>image.png</file>
-<file>rect.png</file>
-<file>./icons/testtheme/16x16/actions/appointment-new.png</file>
-<file>./icons/testtheme/22x22/actions/appointment-new.png</file>
-<file>./icons/testtheme/32x32/actions/appointment-new.png</file>
-<file>./icons/testtheme/index.theme</file>
-<file>./icons/testtheme/scalable/actions/svg-only.svg</file>
-<file>./icons/themeparent/16x16/actions/address-book-new.png</file>
-<file>./icons/themeparent/16x16/actions/appointment-new.png</file>
-<file>./icons/themeparent/22x22/actions/address-book-new.png</file>
-<file>./icons/themeparent/22x22/actions/appointment-new.png</file>
-<file>./icons/themeparent/32x32/actions/address-book-new.png</file>
-<file>./icons/themeparent/32x32/actions/appointment-new.png</file>
-<file>./icons/themeparent/index.theme</file>
-<file>./icons/themeparent/scalable/actions/address-book-new.svg</file>
-<file>./icons/themeparent/scalable/actions/appointment-new.svg</file>
-</qresource>
-</RCC>