diff --git a/src/quick/items/qquickcanvas.cpp b/src/quick/items/qquickcanvas.cpp
index fa7931a..626c3a1 100644
--- a/src/quick/items/qquickcanvas.cpp
+++ b/src/quick/items/qquickcanvas.cpp
@@ -671,6 +671,16 @@ QQuickItem *QQuickCanvas::activeFocusItem() const
     return d->activeFocusItem;
 }
 
+QObject *QQuickCanvas::focusObject() const
+{
+    Q_D(const QQuickCanvas);
+
+    if (d->activeFocusItem)
+        return d->activeFocusItem;
+    return const_cast<QQuickCanvas*>(this);
+}
+
+
 /*!
   Returns the item which currently has the mouse grab.
 */
diff --git a/src/quick/items/qquickcanvas.h b/src/quick/items/qquickcanvas.h
index 46d2702..5e6bb3a 100644
--- a/src/quick/items/qquickcanvas.h
+++ b/src/quick/items/qquickcanvas.h
@@ -83,6 +83,7 @@ public:
 
     QQuickItem *rootItem() const;
     QQuickItem *activeFocusItem() const;
+    QObject *focusObject() const;
 
     QQuickItem *mouseGrabberItem() const;
 
diff --git a/tests/auto/qtquick2/qquickcanvas/data/focus.qml b/tests/auto/qtquick2/qquickcanvas/data/focus.qml
new file mode 100644
index 0000000..901f2fc
--- /dev/null
+++ b/tests/auto/qtquick2/qquickcanvas/data/focus.qml
@@ -0,0 +1,11 @@
+import QtQuick 2.0
+import QtQuick.Window 2.0 as Window
+
+Window.Window {
+     Item {
+          objectName: "item1"
+     }
+     Item {
+          objectName: "item2"
+     }
+}
diff --git a/tests/auto/qtquick2/qquickcanvas/tst_qquickcanvas.cpp b/tests/auto/qtquick2/qquickcanvas/tst_qquickcanvas.cpp
index 78bf989..307968d 100644
--- a/tests/auto/qtquick2/qquickcanvas/tst_qquickcanvas.cpp
+++ b/tests/auto/qtquick2/qquickcanvas/tst_qquickcanvas.cpp
@@ -208,6 +208,8 @@ private slots:
 
     void animationsWhileHidden();
 
+    void focusObject();
+
 private:
     QTouchDevice *touchDevice;
 };
@@ -668,6 +670,30 @@ void tst_qquickcanvas::headless()
 
 }
 
+void tst_qquickcanvas::focusObject()
+{
+    QDeclarativeEngine engine;
+    QDeclarativeComponent component(&engine);
+    component.loadUrl(testFileUrl("focus.qml"));
+    QObject *created = component.create();
+    QVERIFY(created);
+
+    QQuickCanvas *canvas = qobject_cast<QQuickCanvas*>(created);
+    QVERIFY(canvas);
+
+    QQuickItem *item1 = canvas->findChild<QQuickItem*>("item1");
+    QVERIFY(item1);
+    item1->setFocus(true);
+    QCOMPARE(item1, canvas->focusObject());
+
+    QQuickItem *item2 = canvas->findChild<QQuickItem*>("item2");
+    QVERIFY(item2);
+    item2->setFocus(true);
+    QCOMPARE(item2, canvas->focusObject());
+
+    delete canvas;
+}
+
 QTEST_MAIN(tst_qquickcanvas)
 
 #include "tst_qquickcanvas.moc"