diff --git a/src/qml/qml/qqmlcomponent.cpp b/src/qml/qml/qqmlcomponent.cpp
index 416178e..7bddaad 100644
--- a/src/qml/qml/qqmlcomponent.cpp
+++ b/src/qml/qml/qqmlcomponent.cpp
@@ -110,8 +110,9 @@ static inline QString buildTypeNameForDebug(const QMetaObject *metaObject)
 
 /*!
     \class QQmlComponent
-    \since 4.7
+    \since 5.0
     \brief The QQmlComponent class encapsulates a QML component definition.
+    \inmodule QtQml
     \mainclass
 
     Components are reusable, encapsulated QML elements with well-defined interfaces.
@@ -179,6 +180,8 @@ static inline QString buildTypeNameForDebug(const QMetaObject *metaObject)
     }
     \endcode
 
+    Note that the QtQuick 1 version is named QDeclarativeComponent.
+
     \sa {Using QML Bindings in C++ Applications}, {Integrating QML Code with Existing Qt UI Code}
 */
 
diff --git a/src/qml/qml/qqmlengine.cpp b/src/qml/qml/qqmlengine.cpp
index c926a8e..ec72804 100644
--- a/src/qml/qml/qqmlengine.cpp
+++ b/src/qml/qml/qqmlengine.cpp
@@ -473,7 +473,8 @@ QQuickWorkerScriptEngine *QQmlEnginePrivate::getWorkerScriptEngine()
 
 /*!
   \class QQmlEngine
-  \since 4.7
+  \since 5.0
+  \inmodule QtQml
   \brief The QQmlEngine class provides an environment for instantiating QML components.
   \mainclass
 
@@ -499,6 +500,8 @@ QQuickWorkerScriptEngine *QQmlEnginePrivate::getWorkerScriptEngine()
   In this case, the Text item will be created in the engine's
   \l {QQmlEngine::rootContext()}{root context}.
 
+  Note that the QtQuick 1 version is called QDeclarativeEngine.
+
   \sa QQmlComponent QQmlContext
 */
 
diff --git a/src/qml/qml/qqmlerror.cpp b/src/qml/qml/qqmlerror.cpp
index 7942491..ce7fd01 100644
--- a/src/qml/qml/qqmlerror.cpp
+++ b/src/qml/qml/qqmlerror.cpp
@@ -49,7 +49,8 @@ QT_BEGIN_NAMESPACE
 
 /*!
     \class QQmlError
-    \since 4.7
+    \since 5.0
+    \inmodule QtQml
     \brief The QQmlError class encapsulates a QML error.
 
     QQmlError includes a textual description of the error, as well
@@ -69,6 +70,8 @@ QT_BEGIN_NAMESPACE
                ^
     \endcode
 
+    Note that the QtQuick 1 version is named QDeclarativeError
+
     \sa QQuickView::errors(), QQmlComponent::errors()
 */
 class QQmlErrorPrivate
diff --git a/src/qml/qml/qqmlexpression.cpp b/src/qml/qml/qqmlexpression.cpp
index 60a0fe1..d760486 100644
--- a/src/qml/qml/qqmlexpression.cpp
+++ b/src/qml/qml/qqmlexpression.cpp
@@ -137,7 +137,8 @@ QQmlExpressionPrivate::create(QQmlContextData *ctxt, QObject *object,
 
 /*!
     \class QQmlExpression
-    \since 4.7
+    \since 5.0
+    \inmodule QtQml
     \brief The QQmlExpression class evaluates JavaScript in a QML context.
 
     For example, given a file \c main.qml like this:
@@ -161,6 +162,8 @@ QQmlExpressionPrivate::create(QQmlContextData *ctxt, QObject *object,
     QQmlExpression *expr = new QQmlExpression(engine->rootContext(), myObject, "width * 2");
     int result = expr->evaluate().toInt();  // result = 400
     \endcode
+
+    Note that the QtQuick 1 version is called QDeclarativeExpression.
 */
 
 /*!
diff --git a/src/qml/qml/qqmlextensionplugin.cpp b/src/qml/qml/qqmlextensionplugin.cpp
index 86d9f95..73d74f9 100644
--- a/src/qml/qml/qqmlextensionplugin.cpp
+++ b/src/qml/qml/qqmlextensionplugin.cpp
@@ -44,7 +44,8 @@
 QT_BEGIN_NAMESPACE
 
 /*!
-    \since 4.7
+    \since 5.0
+    \inmodule QtQml
     \class QQmlExtensionPlugin
     \brief The QQmlExtensionPlugin class provides an abstract base for custom QML extension plugins.
 
@@ -75,7 +76,7 @@ QT_BEGIN_NAMESPACE
     as a new QML element. It provides the current time through \c hour and \c minute 
     properties, like this:
 
-    \snippet examples/declarative/cppextensions/plugins/plugin.cpp 0
+    \snippet examples/qml/cppextensions/plugins/plugin.cpp 0
     \dots
 
     To make this class available as a QML type, create a plugin that registers
@@ -83,9 +84,9 @@ QT_BEGIN_NAMESPACE
     module will be named \c com.nokia.TimeExample (as defined in the project
     file further below).
 
-    \snippet examples/declarative/cppextensions/plugins/plugin.cpp plugin
+    \snippet examples/qml/cppextensions/plugins/plugin.cpp plugin
     \codeline
-    \snippet examples/declarative/cppextensions/plugins/plugin.cpp export
+    \snippet examples/qml/cppextensions/plugins/plugin.cpp export
 
     This registers the \c TimeModel class with the 1.0 version of this 
     plugin library, as a QML type called \c Time. The Q_ASSERT statement 
@@ -121,6 +122,8 @@ QT_BEGIN_NAMESPACE
     The \l {Tutorial: Writing QML extensions with C++} also contains a chapter
     on creating QML plugins.
 
+    Note that the QtQuick 1 version is called QDeclarativeExtensionPlugin.
+
     \sa QQmlEngine::importPlugin(), {How to Create Qt Plugins}
 */
 
diff --git a/src/qml/qml/qqmlimageprovider.cpp b/src/qml/qml/qqmlimageprovider.cpp
index d1afa54..5742b00 100644
--- a/src/qml/qml/qqmlimageprovider.cpp
+++ b/src/qml/qml/qqmlimageprovider.cpp
@@ -53,6 +53,7 @@ public:
     \class QQuickTextureFactory
     \since 5.0
     \brief The QQuickTextureFactory class provides an interface for loading custom textures from QML.
+    \inmodule QtQml
 
     The purpose of the texture factory is to provide a placeholder for a image
     data that can be converted into an OpenGL texture.
@@ -110,7 +111,8 @@ QImage QQuickTextureFactory::image() const
 
 /*!
     \class QQmlImageProvider
-    \since 4.7
+    \since 5.0
+    \inmodule QtQml
     \brief The QQmlImageProvider class provides an interface for supporting pixmaps and threaded image requests in QML.
 
     QQmlImageProvider is used to provide advanced image loading features
@@ -218,6 +220,8 @@ QImage QQuickTextureFactory::image() const
     \c cache property to \c false for the relevant \l Image, \l BorderImage or
     \l AnimatedImage object.
 
+    The QtQuick 1 version of this class is named QDeclarativeImageProvider.
+
     \sa QQmlEngine::addImageProvider()
 */
 
diff --git a/src/qml/qml/qqmllist.cpp b/src/qml/qml/qqmllist.cpp
index 00fd805..ad28e38 100644
--- a/src/qml/qml/qqmllist.cpp
+++ b/src/qml/qml/qqmllist.cpp
@@ -87,7 +87,7 @@ void QQmlListReferencePrivate::release()
 
 /*!
 \class QQmlListReference
-\since 4.7
+\since 5.0
 \module QtQml
 \brief The QQmlListReference class allows the manipulation of QQmlListProperty properties.
 
@@ -111,6 +111,8 @@ Attempting to add objects of the incorrect type to a list property will fail.
 
 Like with normal lists, when accessing a list element by index, it is the callers responsibility to ensure 
 that it does not request an out of range element using the count() method before calling at().
+
+The QtQuick 1 version of this class is named QDeclarativeListReference.
 */
 
 /*!
@@ -306,7 +308,8 @@ int QQmlListReference::count() const
 
 /*!
 \class QQmlListProperty
-\since 4.7
+\since 5.0
+\inmodule QtQml
 \brief The QQmlListProperty class allows applications to expose list-like 
 properties to QML.
 
@@ -340,6 +343,8 @@ Q_PROPERTY(QQmlListProperty<Fruit> fruit READ fruit);
 QML list properties are typesafe - in this case \c {Fruit} is a QObject type that 
 \c {Apple}, \c {Orange} and \c {Banana} all derive from.
 
+The QtQuick 1 version of this class is named QDeclarativeListProperty.
+
 \note QQmlListProperty can only be used for lists of QObject-derived object pointers.
 
 \sa {Object and List Property Types}
diff --git a/src/qml/qml/qqmlnetworkaccessmanagerfactory.cpp b/src/qml/qml/qqmlnetworkaccessmanagerfactory.cpp
index e5d0d70..4c31e55 100644
--- a/src/qml/qml/qqmlnetworkaccessmanagerfactory.cpp
+++ b/src/qml/qml/qqmlnetworkaccessmanagerfactory.cpp
@@ -45,7 +45,8 @@ QT_BEGIN_NAMESPACE
 
 /*!
     \class QQmlNetworkAccessManagerFactory
-    \since 4.7
+    \since 5.0
+    \inmodule QtQml
     \brief The QQmlNetworkAccessManagerFactory class creates QNetworkAccessManager instances for a QML engine.
 
     A QML engine uses QNetworkAccessManager for all network access.
@@ -79,7 +80,9 @@ QT_BEGIN_NAMESPACE
     For more information about signals and threads, see
     \l {Threads and QObjects} and \l {Signals and Slots Across Threads}.
 
-    \sa {declarative/cppextensions/networkaccessmanagerfactory}{NetworkAccessManagerFactory example}
+    The QtQuick 1 version of this class is named QDeclarativeNetworkAccessManagerFactory.
+
+    \sa {qml/cppextensions/networkaccessmanagerfactory}{NetworkAccessManagerFactory example}
 */
 
 /*!
diff --git a/src/qml/qml/qqmlparserstatus.cpp b/src/qml/qml/qqmlparserstatus.cpp
index d4e415a..8468a1d 100644
--- a/src/qml/qml/qqmlparserstatus.cpp
+++ b/src/qml/qml/qqmlparserstatus.cpp
@@ -45,7 +45,8 @@ QT_BEGIN_NAMESPACE
 
 /*!
     \class QQmlParserStatus
-    \since 4.7
+    \since 5.0
+    \inmodule QtQml
     \brief The QQmlParserStatus class provides updates on the QML parser state.
 
     QQmlParserStatus provides a mechanism for classes instantiated by
@@ -75,6 +76,8 @@ QT_BEGIN_NAMESPACE
         void componentComplete();
     }
     \endcode
+
+    The QtQuick 1.0 version of this class is named QDeclarativeParserStatus.
 */
 
 /*! \internal */
diff --git a/src/qml/qml/qqmlproperty.cpp b/src/qml/qml/qqmlproperty.cpp
index 0848df6..ea7d624 100644
--- a/src/qml/qml/qqmlproperty.cpp
+++ b/src/qml/qml/qqmlproperty.cpp
@@ -72,7 +72,8 @@ QT_BEGIN_NAMESPACE
 
 /*!
 \class QQmlProperty
-\since 4.7
+\since 5.0
+\inmodule QtQml
 \brief The QQmlProperty class abstracts accessing properties on objects created from  QML.
 
 As QML uses Qt's meta-type system all of the existing QMetaObject classes can be used to introspect
@@ -108,6 +109,8 @@ qWarning() << "Current pixel size:" << property.read().toInt();
 property.write(24);
 qWarning() << "Pixel size should now be 24:" << property.read().toInt();
 \endcode
+
+The QtQuick 1 version of this class was named QDeclarativeProperty.
 */
 
 /*!