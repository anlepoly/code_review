diff --git a/doc/src/examples/dirview.qdoc b/doc/src/examples/dirview.qdoc
index 329f90e..a4b7996 100644
--- a/doc/src/examples/dirview.qdoc
+++ b/doc/src/examples/dirview.qdoc
@@ -30,7 +30,7 @@
     \title Dir View Example
 
     The Dir View example shows a tree view onto the local filing system. It uses the
-    QDirModel class to provide supply file and directory information.
+    QDirModel class to provide file and directory information.
 
     \image dirview-example.png
 */
diff --git a/src/corelib/io/qtextstream.cpp b/src/corelib/io/qtextstream.cpp
index 7f37866..a6d58c7 100644
--- a/src/corelib/io/qtextstream.cpp
+++ b/src/corelib/io/qtextstream.cpp
@@ -66,11 +66,6 @@ static const int QTEXTSTREAM_BUFFERSIZE = 16384;
 
     \snippet doc/src/snippets/code/src_corelib_io_qtextstream.cpp 1
 
-    Note that you cannot use QTextStream::atEnd(), which returns true when you
-    have reached the end of the data stream, with stdin. The reason for this is
-    that as long as stdin doesn't give any input to the QTextStream, \c atEnd()
-    will return true even if the stdin is open and waiting for more characters.
-
     Besides using QTextStream's constructors, you can also set the
     device or string QTextStream operates on by calling setDevice() or
     setString(). You can seek to a position by calling seek(), and
diff --git a/src/widgets/itemviews/qlistwidget.cpp b/src/widgets/itemviews/qlistwidget.cpp
index c8a7c66..97fbea6 100644
--- a/src/widgets/itemviews/qlistwidget.cpp
+++ b/src/widgets/itemviews/qlistwidget.cpp
@@ -1167,10 +1167,10 @@ void QListWidgetPrivate::_q_dataChanged(const QModelIndex &topLeft,
 
     \snippet doc/src/snippets/qlistwidget-using/mainwindow.cpp 1
 
-    If you need to insert a new item into the list at a particular position, it
-    is more required to construct the item without a parent widget and use the
-    insertItem() function to place it within the list. The list widget will
-    take ownership of the item.
+    If you need to insert a new item into the list at a particular position,
+    then it should be constructed without a parent widget. The insertItem()
+    function should then be used to place it within the list. The list widget
+    will take ownership of the item.
 
     \snippet doc/src/snippets/qlistwidget-using/mainwindow.cpp 6
     \snippet doc/src/snippets/qlistwidget-using/mainwindow.cpp 7
diff --git a/src/widgets/itemviews/qtreeview.cpp b/src/widgets/itemviews/qtreeview.cpp
index 179b122..7f5e596 100644
--- a/src/widgets/itemviews/qtreeview.cpp
+++ b/src/widgets/itemviews/qtreeview.cpp
@@ -83,7 +83,7 @@ QT_BEGIN_NAMESPACE
 
     It is simple to construct a tree view displaying data from a
     model. In the following example, the contents of a directory are
-    supplied by a QDirModel and displayed as a tree:
+    supplied by a QFileSystemModel and displayed as a tree:
 
     \snippet doc/src/snippets/shareddirmodel/main.cpp 3
     \snippet doc/src/snippets/shareddirmodel/main.cpp 6
diff --git a/src/widgets/widgets/qtextedit.cpp b/src/widgets/widgets/qtextedit.cpp
index 5273e16..d0065aa 100644
--- a/src/widgets/widgets/qtextedit.cpp
+++ b/src/widgets/widgets/qtextedit.cpp
@@ -404,7 +404,7 @@ void QTextEditPrivate::_q_ensureVisible(const QRectF &_rect)
     within the text.
 
     If you want to limit the total number of paragraphs in a QTextEdit,
-    as it is for example open useful in a log viewer, then you can use
+    as for example it is often useful in a log viewer, then you can use
     QTextDocument's maximumBlockCount property for that.
 
     \section2 Read-only Key Bindings