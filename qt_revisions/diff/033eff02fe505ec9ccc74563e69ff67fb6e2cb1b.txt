diff --git a/src/gui/image/qpixmap_raster.cpp b/src/gui/image/qpixmap_raster.cpp
index 7c7c465..27f472d 100644
--- a/src/gui/image/qpixmap_raster.cpp
+++ b/src/gui/image/qpixmap_raster.cpp
@@ -151,7 +151,7 @@ void QRasterPlatformPixmap::fromImageReader(QImageReader *imageReader,
     createPixmapForImage(image, flags, /* inplace = */true);
 }
 
-// from qwindowsurface.cpp
+// from qbackingstore.cpp
 extern void qt_scrollRectInImage(QImage &img, const QRect &rect, const QPoint &offset);
 
 void QRasterPlatformPixmap::copy(const QPlatformPixmap *data, const QRect &rect)
diff --git a/src/gui/kernel/qplatformwindow_qpa.cpp b/src/gui/kernel/qplatformwindow_qpa.cpp
index 973c641..d5f0277 100644
--- a/src/gui/kernel/qplatformwindow_qpa.cpp
+++ b/src/gui/kernel/qplatformwindow_qpa.cpp
@@ -327,7 +327,7 @@ bool QPlatformWindow::setMouseGrabEnabled(bool grab)
     However, it is not concerned with how Qt renders into the window it represents.
 
     Visible QWindows will always have a QPlatformWindow. However, it is not necessary for
-    all windows to have a QWindowSurface. This is the case for QOpenGLWidget. And could be the case for
+    all windows to have a QBackingStore. This is the case for QOpenGLWidget. And could be the case for
     windows where some  3.party renders into it.
 
     The platform specific window handle can be retrieved by the winId function.
@@ -338,7 +338,7 @@ bool QPlatformWindow::setMouseGrabEnabled(bool grab)
     The only way to retrieve a QPlatformOpenGLContext in QPA is by calling the glContext() function
     on QPlatformWindow.
 
-    \sa QWindowSurface, QWindow
+    \sa QBackingStore, QWindow
 */
 
 QT_END_NAMESPACE