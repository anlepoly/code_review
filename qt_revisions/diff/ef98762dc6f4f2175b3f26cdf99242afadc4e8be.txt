diff --git a/src/widgets/doc/src/widgets-and-layouts/layout.qdoc b/src/widgets/doc/src/widgets-and-layouts/layout.qdoc
index 637e16d..7521616 100644
--- a/src/widgets/doc/src/widgets-and-layouts/layout.qdoc
+++ b/src/widgets/doc/src/widgets-and-layouts/layout.qdoc
@@ -37,7 +37,7 @@
     \ingroup qt-gui-concepts
     \brief A tour of the standard layout managers and an introduction to custom
     layouts.
-    
+
     \previouspage Widgets and Layouts
     \contentspage Widgets and Layouts
     \nextpage {Styles and Style Aware Widgets}{Styles}
diff --git a/src/widgets/doc/src/widgets-and-layouts/stylesheet.qdoc b/src/widgets/doc/src/widgets-and-layouts/stylesheet.qdoc
index 7d1d143..41b256b 100644
--- a/src/widgets/doc/src/widgets-and-layouts/stylesheet.qdoc
+++ b/src/widgets/doc/src/widgets-and-layouts/stylesheet.qdoc
@@ -32,7 +32,7 @@
 
     \ingroup frameworks-technologies
     \ingroup qt-basic-concepts
-	\ingroup qt-gui-concepts
+    \ingroup qt-gui-concepts
 
     \previouspage {Styles and Style Aware Widgets}{Styles}
     \contentspage Widgets and Layouts
diff --git a/src/widgets/doc/src/widgets-and-layouts/widgets.qdoc b/src/widgets/doc/src/widgets-and-layouts/widgets.qdoc
index bf9b3c7..512a116 100644
--- a/src/widgets/doc/src/widgets-and-layouts/widgets.qdoc
+++ b/src/widgets/doc/src/widgets-and-layouts/widgets.qdoc
@@ -71,7 +71,7 @@
   widgets and encapsulate the look and feel of a GUI. Qt's built-in
   widgets use the QStyle class to perform nearly all of their drawing,
   ensuring that they look exactly like the equivalent native widgets.
-    
+
   \table
   \row
   \li \image windowsxp-tabwidget.png
diff --git a/src/widgets/doc/src/windows-and-dialogs/mainwindow.qdoc b/src/widgets/doc/src/windows-and-dialogs/mainwindow.qdoc
index 8dc6f51..21721eb 100644
--- a/src/widgets/doc/src/windows-and-dialogs/mainwindow.qdoc
+++ b/src/widgets/doc/src/windows-and-dialogs/mainwindow.qdoc
@@ -160,7 +160,7 @@
     These classes provide everything you need for a typical modern main
     application window, like the main window itself, menu and tool bars,
     a status bar, etc.
-    
+
     \annotatedlist mainwindow-classes
 
     \section1 The Main Window Classes
@@ -237,7 +237,7 @@
     \snippet dockwidgets/mainwindow.cpp 0
 
     In this example, the dock widget can only be placed in the left and
-    right dock areas, and it is initially placed in the left dock area. 
+    right dock areas, and it is initially placed in the left dock area.
 
     The QMainWindow API allows the programmer to customize which dock
     widget areas occupy the four corners of the dock widget area. If
diff --git a/src/widgets/itemviews/qdirmodel.cpp b/src/widgets/itemviews/qdirmodel.cpp
index d96fa3f..1a206a0 100644
--- a/src/widgets/itemviews/qdirmodel.cpp
+++ b/src/widgets/itemviews/qdirmodel.cpp
@@ -305,11 +305,11 @@ QModelIndex QDirModel::parent(const QModelIndex &child) const
     Q_D(const QDirModel);
 
     if (!d->indexValid(child))
-	return QModelIndex();
+        return QModelIndex();
     QDirModelPrivate::QDirNode *node = d->node(child);
     QDirModelPrivate::QDirNode *par = (node ? node->parent : 0);
     if (par == 0) // parent is the root node
-	return QModelIndex();
+        return QModelIndex();
 
     // get the parent's row
     const QVector<QDirModelPrivate::QDirNode> children =
@@ -435,7 +435,7 @@ QVariant QDirModel::headerData(int section, Qt::Orientation orientation, int rol
     if (orientation == Qt::Horizontal) {
         if (role != Qt::DisplayRole)
             return QVariant();
-	switch (section) {
+        switch (section) {
         case 0: return tr("Name");
         case 1: return tr("Size");
         case 2: return
@@ -898,7 +898,7 @@ QModelIndex QDirModel::index(const QString &path, int column) const
         pathElements.pop_front();
         if (childAppended)
             emit const_cast<QDirModel*>(this)->layoutChanged();
-    } else 
+    } else
 #endif
 #if defined(Q_OS_WIN) && !defined(Q_OS_WINCE)
     if (pathElements.at(0).endsWith(QLatin1Char(':'))) {
@@ -1179,7 +1179,7 @@ void QDirModelPrivate::init()
 QDirModelPrivate::QDirNode *QDirModelPrivate::node(int row, QDirNode *parent) const
 {
     if (row < 0)
-	return 0;
+        return 0;
 
     bool isDir = !parent || parent->info.isDir();
     QDirNode *p = (parent ? parent : &root);
diff --git a/src/widgets/itemviews/qheaderview.cpp b/src/widgets/itemviews/qheaderview.cpp
index 2f20bdd..08b4e4b 100644
--- a/src/widgets/itemviews/qheaderview.cpp
+++ b/src/widgets/itemviews/qheaderview.cpp
@@ -1926,7 +1926,7 @@ void QHeaderViewPrivate::_q_layoutAboutToBeChanged()
 {
     //if there is no row/column we can't have mapping for columns
     //because no QModelIndex in the model would be valid
-    // ### this is far from being bullet-proof and we would need a real system to 
+    // ### this is far from being bullet-proof and we would need a real system to
     // ### map columns or rows persistently
     if ((orientation == Qt::Horizontal && model->rowCount(root) == 0)
         || model->columnCount(root) == 0)