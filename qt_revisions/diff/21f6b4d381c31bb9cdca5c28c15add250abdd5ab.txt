diff --git a/doc/src/examples/advtutorial.qdoc b/doc/src/examples/advtutorial.qdoc
index bcf819a..6d548b7 100644
--- a/doc/src/examples/advtutorial.qdoc
+++ b/doc/src/examples/advtutorial.qdoc
@@ -42,7 +42,7 @@ included in the declarative \c examples directory, which looks like this:
 \image declarative-samegame.png
 
 We will cover concepts for producing a fully functioning application, including
-JavaScript integration, using QML  \l{State}{States} and \l{Behavior}{Behaviors} to
+JavaScript integration, using QML  \l{State}{Qt Quick States} and \l{Behavior}{Behaviors} to
 manage components and enhance your interface, and storing persistent application data.
 
 An understanding of JavaScript is helpful to understand parts of this tutorial, but if you don't
@@ -190,7 +190,7 @@ and moves the new block to its position on the game canvas. This involves severa
 
 Now we need to call the JavaScript code in \c samegame.js from our QML files.
 To do this, we add this line to \c samegame.qml which imports
-the JavaScript file as a \l{Modules#QML Modules}{module}:
+the JavaScript file as a \l{QML Modules}{module}:
 
 \snippet examples/tutorials/samegame/samegame2/samegame.qml 2
 
@@ -345,7 +345,7 @@ element in \c BoomBlock.qml:
 
 Note the \c{opacity: 0} which means the block is transparent when it is first created. We could set the opacity
 in \c samegame.js when we create and destroy the blocks,
-but instead we'll use \l{States}{states}, since this is useful for the next animation we're going to add.
+but instead we'll use \l{Qt Quick States}{states}, since this is useful for the next animation we're going to add.
 Initially, we add these States to the root element of \c{BoomBlock.qml}:
 \code
     property bool dying: false
@@ -428,7 +428,7 @@ Here is the \c saveHighScore() function in \c samegame.js:
 
 First we call \c sendHighScore() (explained in the section below) if it is possible to send the high scores to an online database.
 
-Then, we use the \l{Offline Storage API} to maintain a persistent SQL database unique to this application. We create an offline storage database for the high scores using \c openDatabaseSync() and prepare the data and SQL query that we want to use to save it. The offline storage API uses SQL queries for data manipulation and retrieval, and in the \c db.transaction() call we use three SQL queries to initialize the database (if necessary), and then add to and retrieve high scores. To use the returned data, we turn it into a string with one line per row returned, and show a dialog containing that string.
+Then, we use the \l{QtQuick.LocalStorage 2}{Local Storage API} to maintain a persistent SQL database unique to this application. We create an offline storage database for the high scores using \c openDatabaseSync() and prepare the data and SQL query that we want to use to save it. The offline storage API uses SQL queries for data manipulation and retrieval, and in the \c db.transaction() call we use three SQL queries to initialize the database (if necessary), and then add to and retrieve high scores. To use the returned data, we turn it into a string with one line per row returned, and show a dialog containing that string.
 
 This is one way of storing and displaying high scores locally, but certainly not the only way. A more complex alternative would be to create a high score dialog component, and pass it the results for processing and display (instead of reusing the \c Dialog). This would allow a more themeable dialog that could better present the high scores. If your QML is the UI for a C++ application, you could also have passed the score to a C++ function to store it locally in a variety of ways, including a simple format without SQL or in another SQL database.
 
@@ -459,12 +459,12 @@ makes it very easy to fetch and display XML based data such as RSS in a QML appl
 By following this tutorial you've seen how you can write a fully functional application in QML:
 
 \list
-\li Build your application with \l {{QML Elements}}{QML elements}
-\li Add application logic \l{JavaScript Expressions in QML}{with JavaScript code}
-\li Add animations with \l {Behavior}{Behaviors} and \l{States}{states}
-\li Store persistent application data using, for example, the \l{Offline Storage API} or \l XMLHttpRequest
+\li Build your application with \l {QML Types provided by the QtQuick Module}{QML elements}
+\li Add application logic \l{Using JavaScript Expressions in QML}{with JavaScript code}
+\li Add animations with \l {Behavior}{Behaviors} and \l{Qt Quick States}{states}
+\li Store persistent application data using, for example, \l{QtQuick.LocalStorage 2}{QtQuick.LocalStorage} or \l XMLHttpRequest
 \endlist
 
 There is so much more to learn about QML that we haven't been able to cover in this tutorial. Check out all the
-examples and the \l {Qt Quick}{documentation} to see all the things you can do with QML!
+examples and the \l {QtQuick}{documentation} to see all the things you can do with QML!
 */
diff --git a/doc/src/examples/example-slideswitch.qdoc b/doc/src/examples/example-slideswitch.qdoc
index 1c8f4d2..15d5cb2 100644
--- a/doc/src/examples/example-slideswitch.qdoc
+++ b/doc/src/examples/example-slideswitch.qdoc
@@ -97,7 +97,7 @@ We define the two states of the switch:
 \li In the \e off state the knob is on the left (\c x position is 1) and the \c on property is \c false.
 \endlist
 
-For more information on states see \l{States}.
+For more information on states see \l{Qt Quick States}.
 
 \section2 Functions
 
@@ -114,7 +114,7 @@ states (\e on and \e off).
 This second function is called when the knob is released and we want to make sure that the knob does not end up between states
 (neither \e on nor \e off). If it is the case call the \c toggle() function otherwise we do nothing.
 
-For more information on scripts see \l{JavaScript Expressions in QML}.
+For more information on scripts see \l{Using JavaScript Expressions in QML}.
 
 \section2 Transition
 \snippet examples/tutorials/ui-components/slideswitch/content/Switch.qml 7
@@ -122,7 +122,7 @@ For more information on scripts see \l{JavaScript Expressions in QML}.
 At this point, when the switch toggles between the two states the knob will instantly change its \c x position between 1 and 78.
 In order for the the knob to move smoothly we add a transition that will animate the \c x property with an easing curve for a duration of 200ms.
 
-For more information on transitions see \l{QML Animation and Transitions}.
+For more information on transitions see \l{Animation and Transitions in Qt Quick}.
 
 \section1 Usage
 The switch can be used in a QML file, like this:
diff --git a/doc/src/examples/examples.qdoc b/doc/src/examples/examples.qdoc
index b5cd036..039555d 100644
--- a/doc/src/examples/examples.qdoc
+++ b/doc/src/examples/examples.qdoc
@@ -40,7 +40,7 @@ compound interfaces are grouped as applications as they demonstrate more Qt
 Quick features.
 
 To run the sample applications, open them in Qt Creator or use the included
-\l {QML Viewer} tool.
+\l {Protoyping with qmlscene}{qmlscene} tool.
 
 Some of these code samples have a corresponding \l{qtquick-tutorials}{tutorial}.
 The Qt Quick features are covered in the \l {qtquick-overviews}{main page}.
@@ -178,7 +178,7 @@ This set of code samples are part of the collection of \l{Qt Examples}.
             Elements and Components
         \enddiv
         \list
-        \li \l{QML Elements}
+        \li \l{QML Types provided by the QtQuick Module}
         \li \l{external: Qt Mobility QML Plugins}{QML Plugins}
         \li \l{external: Qt Quick Components for Symbian}{Symbian Components}
         \li MeeGo Components
diff --git a/doc/src/examples/tutorial.qdoc b/doc/src/examples/tutorial.qdoc
index b423842..24dab74 100644
--- a/doc/src/examples/tutorial.qdoc
+++ b/doc/src/examples/tutorial.qdoc
@@ -104,7 +104,7 @@ The \c font.pointSize and \c font.bold properties are related to fonts and use t
 
 \section2 Viewing the example
 
-To view what you have created, run the \l{QML Viewer} tool (located in the \c bin directory) with your filename as the first argument.
+To view what you have created, run the \l{Protoyping with qmlscene}{qmlscene} tool (located in the \c bin directory) with your filename as the first argument.
 For example, to run the provided completed Tutorial 1 example from the install location, you would type:
 
 \code
@@ -182,7 +182,7 @@ We create the color picker by putting 6 cells with different colors in a grid.
 \snippet examples/tutorials/helloworld/tutorial2.qml 1
 
 When the \e clicked signal of our cell is triggered, we want to set the color of the text to the \e cellColor passed as a parameter.
-We can react to any signal of our component through a property of the name \e 'onSignalName' (see \l{Signal Handlers}).
+We can react to any signal of our component through a property of the name \e 'onSignalName' (see \l{Signal Attributes}).
 */
 
 /*!
@@ -228,5 +228,5 @@ This is equivalent to writing the two transitions separately.
 The \l ParallelAnimation element makes sure that the two types of animations (number and color) start at the same time.
 We could also run them one after the other by using \l SequentialAnimation instead.
 
-For more details on states and transitions, see \l {States} and the \l{declarative/animation/states}{states and transitions example}.
+For more details on states and transitions, see \l {Qt Quick States} and the \l{declarative/animation/states}{states and transitions example}.
 */
diff --git a/src/qml/doc/src/cppintegration/data.qdoc b/src/qml/doc/src/cppintegration/data.qdoc
index bdfb6fa..39168bf 100644
--- a/src/qml/doc/src/cppintegration/data.qdoc
+++ b/src/qml/doc/src/cppintegration/data.qdoc
@@ -346,8 +346,8 @@ within the same class, or that the enumeration value is one of those declared
 in the \l {Qt}{Qt Namespace}.
 
 Additionally, if a C++ signal with an enum parameter should be connectable to a
-QML function using the \l{QML Signal and Handler Event System#Connecting Signals
-to Methods and Signals}{connect()} function, the enum type must be registered
+QML function using the \l{qtqml-syntax-signals.html#connecting-signals-to-methods-and-signals}
+{connect()} function, the enum type must be registered
 using qRegisterMetaType().
 
 For QML signals, enum values may be passed as signal parameters using the \c int
diff --git a/src/qml/doc/src/cppintegration/definetypes.qdoc b/src/qml/doc/src/cppintegration/definetypes.qdoc
index 140ab6a..969261a 100644
--- a/src/qml/doc/src/cppintegration/definetypes.qdoc
+++ b/src/qml/doc/src/cppintegration/definetypes.qdoc
@@ -395,7 +395,7 @@ board context, they could be implemented as \e attached attributes on a
 terms of the concepts described earlier, the parties involved here are:
 
 \list
-\li An instance of an anonymous \l{attached object type}, which provides a
+\li An instance of an anonymous \e{attached object type}, which provides a
     \c published signal and an expired property. This type is implemented by
     \c MessageBoardAttachedType below
 \li A \c Message object, which will be the \e attachee
@@ -614,7 +614,7 @@ MessageBoard {
 \endqml
 
 (Incidentally, the \l Item::children property is its default property, which
-enables visual children to be conveniently declared for any \l Item-based
+enables visual children to be conveniently declared for any \l {Item}-based
 type without explicitly assigning them to this property.)
 
 A default property is optional. A derived class inherits its base class's
diff --git a/src/qml/doc/src/cppintegration/interactqmlfromcpp.qdoc b/src/qml/doc/src/cppintegration/interactqmlfromcpp.qdoc
index 51e92b2..a7cc977 100644
--- a/src/qml/doc/src/cppintegration/interactqmlfromcpp.qdoc
+++ b/src/qml/doc/src/cppintegration/interactqmlfromcpp.qdoc
@@ -87,8 +87,8 @@ compile-time safety. In this case the base object of \c MyItem.qml is an
 \snippet qml/qtbinding/loading/main.cpp cast
 
 You can also connect to any signals or call methods defined in the component
-using QMetaObject::invokeMethod() and QObject::connect(). See \l {Exchanging
-data between QML and C++} below for further details.
+using QMetaObject::invokeMethod() and QObject::connect(). See \l {Invoking QML Methods}
+and \l {Connecting to QML Signals} below for further details.
 
 
 \section1 Accessing Loaded QML Objects by Object Name
@@ -159,7 +159,7 @@ System}{meta-object system} and the QML engine is not made aware of the
 property change. This means property bindings to \c buttonText would not be
 updated, and any \c onButtonTextChanged handlers would not be called.
 
-\section2 Methods
+\section2 Invoking QML Methods
 
 All QML methods are exposed to the meta-object system and can be called from C++
 using QMetaObject::invokeMethod(). Method parameters and return values passed
@@ -179,12 +179,12 @@ must be specified as QVariant types, as this is the generic data type used for
 QML method parameters and return values.
 
 
-\section2 Signals And Slots
+\section2 Connecting to QML Signals
 
 All QML signals are automatically available to C++, and can be connected to
 using QObject::connect() like any ordinary Qt C++ signal. In return, any C++
 signal can be received by a QML object using
-\l {Signal Handlers}{signal handlers}.
+\l {qtqml-syntax-signals.html}{signal handlers}.
 
 Here is a QML component with a signal named \c qmlSignal that is emitted with
 a string-type parameter. This signal is connected to a C++ object's slot using
@@ -256,4 +256,4 @@ QVariant type:
 \endcode
 \endtable
 
-*/
\ No newline at end of file
+*/
diff --git a/src/qml/doc/src/documents/definetypes.qdoc b/src/qml/doc/src/documents/definetypes.qdoc
index ec1750e..d243afb 100644
--- a/src/qml/doc/src/documents/definetypes.qdoc
+++ b/src/qml/doc/src/documents/definetypes.qdoc
@@ -95,7 +95,7 @@ Column {
 
 \image documents-definetypes-attributes.png
 
-The attributes that are accessible to objects of the custom QML type include any \l{Custom properties}{custom properties}, \l{Custom methods}{methods} and \l{Custom signals}{signals} that have additionally been defined for an object. For example, suppose the \l Rectangle in \c SquareButton.qml had been defined as follows, with additional properties, methods and signals:
+The attributes that are accessible to objects of the custom QML type include any \l{Defining Property Attributes}{custom properties}, \l{Defining Method Attributes}{methods} and \l{Defining Signal Attributes}{signals} that have additionally been defined for an object. For example, suppose the \l Rectangle in \c SquareButton.qml had been defined as follows, with additional properties, methods and signals:
 
 \qml
 // SquareButton.qml
diff --git a/src/qml/doc/src/javascript/expressions.qdoc b/src/qml/doc/src/javascript/expressions.qdoc
index 130be84..3c8f83d 100644
--- a/src/qml/doc/src/javascript/expressions.qdoc
+++ b/src/qml/doc/src/javascript/expressions.qdoc
@@ -58,17 +58,17 @@ QML \l{QML Object Types}{object types} defined in \l{QML Documents}
 logic.  There are four ways that JavaScript can be used in a QML document:
 
 \list
-  \li \l{QML Object Attributes#property-initialization}{properties} can be
+  \li \l{Property Attributes}{properties} can be
       assigned \l{Property Binding}{bindings} which are defined with
       JavaScript expressions, and which are automatically evaluated by the
       \l{QQmlEngine}{QML engine} when any properties accessed in the binding
       change, in order to ensure always-up-to-date property values.  Binding
       expressions can also perform function evaluation as an explicit side
       effect
-  \li \l{QML Object Attributes#signal-handlers}{signal handlers} can be defined
+  \li \l{Signal Attributes}{signal handlers} can be defined
       which are automatically evaluated when the object emits the associated
       signal
-  \li \l{QML Object Attributes#custom-methods}{custom methods} can be defined
+  \li \l{Method Attributes}{custom methods} can be defined
       in QML files as JavaScript functions
   \li JavaScript files providing functions and variables can be
       \l{Importing JavaScript Files in QML Documents}{imported} in a QML
@@ -244,9 +244,8 @@ Non-trivial program logic is best separated into external JavaScript files.
 These files can be imported into QML files using an \c import statement, in
 the same way that \l {QML Modules}{modules} are imported.
 
-For example, the \c {factorial()} method in the above example for
-\l{JavaScript Expressions in Custom Methods} could be moved into an external
-file named \c factorial.js, and accessed like this:
+For example, the \c {factorial()} method in the above example could be moved
+into an external file named \c factorial.js, and accessed like this:
 
 \qml
 import "factorial.js" as MathFunctions
@@ -260,7 +259,7 @@ Item {
 \endqml
 
 For more information about loading external JavaScript files into QML, read
-the section about \l{Importing JavaScript into QML}.
+the section about \l{Importing JavaScript Files in QML Documents}.
 
 
 
@@ -286,7 +285,7 @@ as an argument.  For example, the following code connects the MouseArea
 The \c jsFunction() will now be called whenever MouseArea's \c clicked signal
 is emitted.
 
-See \l{QML Signal and Handler Event System#Connecting Signals to Methods and Signals}
+See \l{qtqml-syntax-signals.html}
 {Connecting Signals to Methods and Signals} for more information.
 
 
@@ -300,7 +299,7 @@ component instance) startup.  While it is tempting to just include the startup
 script as \e {global code} in an external script file, this can have severe
 limitations as the QML environment may not have been fully established.  For
 example, some objects might not have been created or some
-\l {Property Binding}s may not have been run.  \l {QML JavaScript Restrictions}
+\l {Property Binding}s may not have been run.  \l {JavaScript Expression Restrictions in QML}
 covers the exact limitations of global script code.
 
 Every QML object has an \e attached \l Component property that references the
@@ -378,7 +377,7 @@ that includes the file and line number of the offending code.
 During startup, if a QML file includes an external JavaScript file with "global"
 code, it is executed in a scope that contains only the external file itself and
 the global object.  That is, it will not have access to the QML objects and
-properties it \l {QML Scope}{normally would}.
+properties it \l {Scope and Naming Resolution}{normally would}.
 
 Global code that only accesses script local variable is permitted.  This is an
 example of valid global code.
diff --git a/src/qml/doc/src/javascript/functionlist.qdoc b/src/qml/doc/src/javascript/functionlist.qdoc
index e81cd64..9dca6c5 100644
--- a/src/qml/doc/src/javascript/functionlist.qdoc
+++ b/src/qml/doc/src/javascript/functionlist.qdoc
@@ -31,7 +31,7 @@
 
     This reference contains a list of objects, functions and
     properties supported by the \l{QQmlEngine}{QML engine}. For a detailed
-    description, see the \l{External: ECMA-262} specification.
+    description, see the \l{ECMA-262} specification.
 
     \section1 The Global Object
 
diff --git a/src/qml/doc/src/javascript/topic.qdoc b/src/qml/doc/src/javascript/topic.qdoc
index c7d7d2b..19019f0 100644
--- a/src/qml/doc/src/javascript/topic.qdoc
+++ b/src/qml/doc/src/javascript/topic.qdoc
@@ -39,8 +39,8 @@ JavaScript to quickly develop both user-interfaces and application logic.
 \section1 JavaScript Expressions
 
 QML has a deep JavaScript integration, and allows
-\l{qtqml-syntax-objectattributes.html#signal-handlers}{signal handlers}
-and \l{qtqml-syntax-objectattributes.html#custom-methods}{methods}
+\l{Signal Attributes}{signal handlers}
+and \l{Method Attributes}{methods}
 to be defined in JavaScript.  One of the other fundamental concepts of QML is
 the ability to bind property values to the result of complex expressions which
 can include properties from other objects. These
diff --git a/src/qml/doc/src/modules/cppplugins.qdoc b/src/qml/doc/src/modules/cppplugins.qdoc
index 4887e42..fb20c3e 100644
--- a/src/qml/doc/src/modules/cppplugins.qdoc
+++ b/src/qml/doc/src/modules/cppplugins.qdoc
@@ -50,7 +50,7 @@
     \li Register types with qmlRegisterType()
     \li Export the class using the Q_EXPORT_PLUGIN2() macro
     \li Write a project file for the plugin
-    \li Create a \l{Syntax of a qmldir file}{qmldir file} to describe the plugin
+    \li Create a \l{Adding Module Metadata with a qmldir file}{qmldir file} to describe the plugin
     \endlist
 
     QML extension plugins are for either application-specific or library-like
@@ -83,7 +83,7 @@
     The \c TimeModel class receives a \c{1.0} version of this plugin library, as
     a QML type called \c Time. The Q_ASSERT() macro can ensure the module is
     imported correctly by any QML components that use this plugin. The
-    \l{Defining QML Object Types from C++} article has more information about registering C++
+    \l{Defining QML Types from C++} article has more information about registering C++
     types into the runtime.
 
     For this example, the TimeExample source directory is in
@@ -104,7 +104,7 @@
     ...
     \endcode
 
-    Finally, a \l{Syntax of a qmldir file}{qmldir file} is required in the \c
+    Finally, a \l{Adding Module Metadata with a qmldir file}{qmldir file} is required in the \c
     com/nokia/TimeExample directory to specify the plugin. This directory
     includes a \c Clock.qml file that should be bundled with the plugin, so it
     needs to be specified in the \c qmldir file:
@@ -125,7 +125,7 @@
     \list
     \li \l {Tutorial: Extending QML with C++} - contains a chapter
     on creating QML plugins.
-    \li \l{Defining QML Object Types from C++} - information about registering C++ types into
+    \li \l{Defining QML Types from C++} - information about registering C++ types into
     the runtime.
     \li \l{How to Create Qt Plugins} - information about Qt plugins
     \endlist
diff --git a/src/qml/doc/src/modules/installedmodules.qdoc b/src/qml/doc/src/modules/installedmodules.qdoc
index a17b236..4440f1b 100644
--- a/src/qml/doc/src/modules/installedmodules.qdoc
+++ b/src/qml/doc/src/modules/installedmodules.qdoc
@@ -154,7 +154,7 @@ example:
 
 \snippet examples/qml/cppextensions/plugins/plugin.cpp plugin
 
-Once the plugin is built and installed, and includes a \l{Syntax of a qmldir file}{qmldir file},
+Once the plugin is built and installed, and includes a \l{Adding Module Metadata with a qmldir file}{qmldir file},
 the module can be imported from QML, like this:
 
 \snippet qml/imports/timeexample.qml import
diff --git a/src/qml/doc/src/modules/qmldir.qdoc b/src/qml/doc/src/modules/qmldir.qdoc
index 5c9a4ef..7e9b8c5 100644
--- a/src/qml/doc/src/modules/qmldir.qdoc
+++ b/src/qml/doc/src/modules/qmldir.qdoc
@@ -235,7 +235,7 @@ to \c /tmp/imports/My/Module/qmldir to register it.
 
 While the qmldump tool covers most cases, it does not work if:
 \list
-\li The plugin uses a \l{QQmlCustomParser}. The component that uses
+\li The plugin uses a \c{QQmlCustomParser}. The component that uses
    the custom parser will not get its members documented.
 \li The plugin can not be loaded. In particular if you cross-compiled
    the plugin for a different architecture, qmldump will not be able to
diff --git a/src/qml/doc/src/qmlfunctions.qdoc b/src/qml/doc/src/qmlfunctions.qdoc
index c240a02..0e23db3 100644
--- a/src/qml/doc/src/qmlfunctions.qdoc
+++ b/src/qml/doc/src/qmlfunctions.qdoc
@@ -70,7 +70,7 @@
 
   The former is the standard form which registers the type \e T as a new type.
   The latter allows a particular revision of a class to be registered in
-  a specified version (see \l {QML Type Versioning}).
+  a specified version (see \l {Type Revisions and Versions}).
 
 
   For example, this registers a C++ class \c MySliderItem as a QML type
@@ -118,7 +118,7 @@
   \endcode
 
   This function is typically used to register the revision of a base class to
-  use for the specified module version (see \l {QML Type Versioning}).
+  use for the specified module version (see \l {Type Revisions and Versions}).
 */
 
 /*!
diff --git a/src/qml/doc/src/qmltypereference.qdoc b/src/qml/doc/src/qmltypereference.qdoc
index 04f0e48..4e4c2c5 100644
--- a/src/qml/doc/src/qmltypereference.qdoc
+++ b/src/qml/doc/src/qmltypereference.qdoc
@@ -59,11 +59,11 @@ and functionality provided by the \c QtQml namespace are also provided by the
 import QtQuick 2.0
 \endqml
 
-See the \l{QtQuick}{Qt Quick} module documentation for more information about the
+See the \l{QtQuick}{QtQuick} module documentation for more information about the
 \c QtQuick namespace and what it provides to QML application developers.
 
 The documentation for the types below applies equally to the types of the same
-name provided by the \l{QtQuick}{Qt Quick} module, as they are in fact identical.
+name provided by the \l{QtQuick}{QtQuick} module, as they are in fact identical.
 
 \section1 Basic Types
 
diff --git a/src/qml/doc/src/qtqml.qdoc b/src/qml/doc/src/qtqml.qdoc
index 4482822..5ec2982 100644
--- a/src/qml/doc/src/qtqml.qdoc
+++ b/src/qml/doc/src/qtqml.qdoc
@@ -174,7 +174,7 @@ types, animation classes, and canvas integration) for the QML language.
 \section1 Reference Documentation
 
 More information about the Qt QML module is contained within the class and
-function documentation of the \l{qtqml-apireference.html}
+function documentation of the \l{QtQml}
 {Qt QML Module API Reference}.  The QML types provided by the Qt QML module
 are listed in the \l{qtqml-typereference-topic.html}
 {Qt QML Module QML Type Reference} page.
@@ -189,7 +189,7 @@ application developers will use in their applications.
 Quick Links:
 \list
 \li \l{qtqml-typereference-topic.html}{Qt QML Module QML Type Reference}
-\li \l{qtqml-module.html}{Qt QML Module C++ API Reference}
+\li \l{QtQml}{Qt QML Module C++ API Reference}
 \li \l{qtquick-main.html}{Qt Quick Module Documentation}
 \li \l{qtquick-applicationdevelopers.html}{QML Application Developer Resources}
 \li \l{qtqml-releasenotes.html}{QtQml Release Notes}
diff --git a/src/qml/doc/src/syntax/basics.qdoc b/src/qml/doc/src/syntax/basics.qdoc
index afb0731..786d208 100644
--- a/src/qml/doc/src/syntax/basics.qdoc
+++ b/src/qml/doc/src/syntax/basics.qdoc
@@ -114,7 +114,7 @@ When placed into a \c .qml file and loaded by the QML engine, the above code cre
 Rectangle { width: 200; height: 200; color: "red" }
 \endqml
 
-Obviously, the \l Rectangle object declared in this example is very simple indeed, as it defines nothing more than a few property values. To create more useful objects, an object declaration may define many other types of attributes: these are discussed in the \l{qtqml-syntax-object-declaration.html}{Object Declarations} documentation. Additionally, an object declaration may define child objects, as discussed below.
+Obviously, the \l Rectangle object declared in this example is very simple indeed, as it defines nothing more than a few property values. To create more useful objects, an object declaration may define many other types of attributes: these are discussed in the \l{qtqml-syntax-objectattributes.html}{QML Object Attributes} documentation. Additionally, an object declaration may define child objects, as discussed below.
 
 
 \section2 Child Objects
diff --git a/src/qml/doc/src/syntax/imports.qdoc b/src/qml/doc/src/syntax/imports.qdoc
index b68c29d..3519b3c 100644
--- a/src/qml/doc/src/syntax/imports.qdoc
+++ b/src/qml/doc/src/syntax/imports.qdoc
@@ -153,7 +153,7 @@ The qualifier ("MyScript" in the above example) must be unique within the QML do
 Unlike ordinary modules, multiple scripts cannot be imported into the same namespace.
 
 Javascript files can be provided by modules, by adding Namespace definitions to the
-\l{Syntax of a qmldir file}{qmldir file} for the module.  For example:
+\l{Adding Module Metadata with a qmldir file}{qmldir file} for the module.  For example:
 
 \code
 SystemFunctions 1.0 SystemFunctions.js
diff --git a/src/qml/doc/src/syntax/objectattributes.qdoc b/src/qml/doc/src/syntax/objectattributes.qdoc
index 941d3c6..ddfe70a 100644
--- a/src/qml/doc/src/syntax/objectattributes.qdoc
+++ b/src/qml/doc/src/syntax/objectattributes.qdoc
@@ -415,7 +415,7 @@ In some cases properties contain a logical group of sub-property attributes.
 These sub-property attributes can be assigned to using either the dot notation
 or group notation.
 
-For example, the \l Text type has a \l{Text::font}{font} group property. Below,
+For example, the \l Text type has a \l{Text::font.family}{font} group property. Below,
 the first \l Text object initializes its \c font values using dot notation,
 while the second uses group notation:
 
@@ -605,7 +605,7 @@ Item {
 A signal is a notification from an object that some event has occurred: for
 example, a property has changed, an animation has started or stopped, or
 when an image has been downloaded. The \l MouseArea type, for example, has
-a \l {MouseArea::clicked}{clicked} signal that is emitted when the user clicks
+a \l {MouseArea::onClicked}{clicked} signal that is emitted when the user clicks
 within the mouse area.
 
 An object can be notified through a \l{Signal handler attributes}
@@ -666,7 +666,7 @@ Item {
 If the signal has no parameters, the "()" brackets are optional. If parameters
 are used, the parameter types must be declared, as for the \c string and \c var
 arguments for the \c actionPerformed signal above. The allowed parameter types
-are the same as those listed under \l {custom property types} on this page.
+are the same as those listed under \l {Defining Property Attributes} on this page.
 
 To emit a signal, invoke it as a method. Any relevant
 \l{Signal handler attributes}{signal handlers} will be invoked when the signal
@@ -842,7 +842,7 @@ prefixing the properties and respective signal handlers with the name of the
 attaching type.
 
 For example, the \l ListView type has an attached property
-\l ListView.isCurrentItem that is available to each delegate object in a
+\l {ListView::isCurrentItem}{ListView.isCurrentItem} that is available to each delegate object in a
 ListView. This can be used by each individual delegate object to determine
 whether it is the currently selected item in the view:
 
diff --git a/src/qml/doc/src/syntax/propertybinding.qdoc b/src/qml/doc/src/syntax/propertybinding.qdoc
index 75efc35..48c17ff 100644
--- a/src/qml/doc/src/syntax/propertybinding.qdoc
+++ b/src/qml/doc/src/syntax/propertybinding.qdoc
@@ -186,7 +186,7 @@ In this case, the function could also have referred to \c rect.width rather than
 \c this.width.
 
 Note that the value of \c this is not defined outside of its use in property binding.
-See \l {QML JavaScript Restrictions} for details.
+See \l {JavaScript Expression Restrictions in QML} for details.
 
 
 */
diff --git a/src/qml/doc/src/syntax/signals.qdoc b/src/qml/doc/src/syntax/signals.qdoc
index 6cc68d3..3c203f3 100644
--- a/src/qml/doc/src/syntax/signals.qdoc
+++ b/src/qml/doc/src/syntax/signals.qdoc
@@ -115,9 +115,9 @@ Even though the \l MouseArea documentation does not document a signal handler na
 
 \section2 Using the Connections Type
 
-In some cases it may be desirable to access a signal outside of the object that emits it. For these purposes, the QtQuick module provides the \l Connections type for connecting to signals of arbitrary objects. A \l Connections object can receive any signal from its specified \l {Connection::target}{target}.
+In some cases it may be desirable to access a signal outside of the object that emits it. For these purposes, the QtQuick module provides the \l Connections type for connecting to signals of arbitrary objects. A \l Connections object can receive any signal from its specified \l {Connections::target}{target}.
 
-For example, the \c onClicked handler in the earlier example could have been received by the root \l Rectangle instead, by placing the \c onClicked handler in a \l Connections object that has its \l {Connection::target}{target} set to the \l MouseArea:
+For example, the \c onClicked handler in the earlier example could have been received by the root \l Rectangle instead, by placing the \c onClicked handler in a \l Connections object that has its \l {Connections::target}{target} set to the \l MouseArea:
 
 \qml
 import QtQuick 2.0
@@ -204,7 +204,7 @@ SquareButton {
 }
 \endqml
 
-See \l {Custom signals} for more details on writing signals for custom QML types.
+See \l {Signal Attributes} for more details on writing signals for custom QML types.
 
 
 \keyword qml-connect-signals-to-method
diff --git a/src/qml/doc/src/typesystem/objecttypes.qdoc b/src/qml/doc/src/typesystem/objecttypes.qdoc
index 9d8f636..a73d723 100644
--- a/src/qml/doc/src/typesystem/objecttypes.qdoc
+++ b/src/qml/doc/src/typesystem/objecttypes.qdoc
@@ -47,10 +47,10 @@ and registering the type with the QML engine, as discussed in
 \l{qtqml-cppintegration-definetypes.html}{Defining QML Types from C++}.
 
 
-\section1 Creating Object Types from QML
+\section1 Defining Object Types from QML
 
 
-\section2 Creating Object Types from QML Documents
+\section2 Defining Object Types through QML Documents
 
 Plugin writers and application developers may provide types defined as QML
 documents.  A QML document, when visible to the QML import system, defines a
@@ -70,7 +70,7 @@ See \l {Defining Object Types through QML Documents} for more information.
 
 
 
-\section2 Creating Anonymous Types with Component
+\section2 Defining Anonymous Types with Component
 
 Another method of creating object types from within QML is to use the \l Component type.
 This allows a type to be defined inline within a QML document, instead of using a separate
@@ -114,9 +114,9 @@ different component scopes.
 See \l{qtqml-documents-scope.html}{Scope and Naming Resolution} for more details.
 
 
-\section1 Creating Object Types from C++
+\section1 Defining Object Types from C++
 
-Plugin writers and application developers may register types defined in C++
+C++ plugin writers and application developers may register types defined in C++
 through API provided by the Qt QML module.  There are various registration
 functions which each allow different use-cases to be fulfilled.
 
diff --git a/src/qml/doc/src/typesystem/topic.qdoc b/src/qml/doc/src/typesystem/topic.qdoc
index decfdb4..3fe1794 100644
--- a/src/qml/doc/src/typesystem/topic.qdoc
+++ b/src/qml/doc/src/typesystem/topic.qdoc
@@ -53,11 +53,8 @@ integers, double-precision floating point numbers, strings, and boolean values.
 Objects may have properties of these types, and values of these types may be
 passed as arguments to methods of objects.
 
-See the \l{qtqml-typesystem-basictypes.html}{Basic Types} documentation for
-more information about basic types, or the \l{qtqml-documents-properties.html}
-{QML Documents - Object Properties} documentation for more information about
-other available property types.
-
+See the \l{qtqml-typesystem-basictypes.html}{QML Basic Types} documentation for
+more information about basic types.
 
 \section1 JavaScript Types
 
diff --git a/src/qml/qml/qqmlcontext.cpp b/src/qml/qml/qqmlcontext.cpp
index b8e1e6d..1fa4835 100644
--- a/src/qml/qml/qqmlcontext.cpp
+++ b/src/qml/qml/qqmlcontext.cpp
@@ -156,7 +156,7 @@ QQmlContextPrivate::QQmlContextPrivate()
     to reevaluate). Thus whenever possible you should complete "setup" of the context
     before using it to create any objects.
 
-    \sa {Exposing C++ Data to QML}
+    \sa {qtqml-cppintegration-exposecppattributes.html}{Exposing Attributes of C++ Types to QML}
 */
 
 /*! \internal */
diff --git a/src/qml/qml/qqmlengine.cpp b/src/qml/qml/qqmlengine.cpp
index 65eeb24..589d7b7 100644
--- a/src/qml/qml/qqmlengine.cpp
+++ b/src/qml/qml/qqmlengine.cpp
@@ -198,6 +198,7 @@ void QQmlEnginePrivate::defineQtQuick2Module()
     \class QQmlImageProviderBase
     \brief The QQmlImageProviderBase class is used to register image providers in the QML engine.
     \mainclass
+    \inmodule QtQml
 
     Image providers must be registered with the QML engine.  The only information the QML
     engine knows about image providers is the type of image data they provide.  To use an
@@ -295,7 +296,7 @@ creating objects of specific data types are also available for clients to use:
 \li \c matrix4x4 - use \l{Qt::matrix4x4()}{Qt.matrix4x4()}
 \endlist
 
-There are also string based constructors for these types. See \l{qdeclarativebasictypes.html}{QML Basic Types} for more information.
+There are also string based constructors for these types. See \l{qtqml-typesystem-basictypes.html}{QML Basic Types} for more information.
 
 \section1 Date/Time Formatters
 
diff --git a/src/qml/qml/qqmlextensionplugin.cpp b/src/qml/qml/qqmlextensionplugin.cpp
index 5ece9d5..8ccbb88 100644
--- a/src/qml/qml/qqmlextensionplugin.cpp
+++ b/src/qml/qml/qqmlextensionplugin.cpp
@@ -61,7 +61,7 @@ QT_BEGIN_NAMESPACE
     \li Subclass QQmlExtensionPlugin, implement registerTypes() method
     to register types using qmlRegisterType(), and export the class using the Q_EXPORT_PLUGIN2() macro
     \li Write an appropriate project file for the plugin
-    \li Create a \l{Syntax of a qmldir file}{qmldir file} to describe the plugin
+    \li Create a \l{Adding Module Metadata with a qmldir file}{qmldir file} to describe the plugin
     \endlist
 
     QML extension plugins can be used to provide either application-specific or
@@ -105,7 +105,7 @@ QT_BEGIN_NAMESPACE
     ...
     \endcode    
 
-    Finally, a \l{Syntax of a qmldir file}{qmldir file} is required in the \c com/nokia/TimeExample directory
+    Finally, a \l{Adding Module Metadata with a qmldir file}{qmldir file} is required in the \c com/nokia/TimeExample directory
     that describes the plugin. This directory includes a \c Clock.qml file that
     should be bundled with the plugin, so it needs to be specified in the \c qmldir
     file:
diff --git a/src/qml/qml/qquicklistmodel.cpp b/src/qml/qml/qquicklistmodel.cpp
index a3e2456..548453b 100644
--- a/src/qml/qml/qquicklistmodel.cpp
+++ b/src/qml/qml/qquicklistmodel.cpp
@@ -1512,7 +1512,7 @@ QQuickListModelParser::ListInstruction *QQuickListModelParser::ListModelData::in
     handler. You must call sync() or else the changes made to the list from the external
     thread will not be reflected in the list model in the main thread.
 
-    \sa {qmlmodels}{Data Models}, {declarative/threading/threadedlistmodel}{Threaded ListModel example}, QtQml
+    \sa {qml-data-models}{Data Models}, {declarative/threading/threadedlistmodel}{Threaded ListModel example}, QtQml
 */
 
 QQuickListModel::QQuickListModel(QObject *parent)
diff --git a/src/quick/doc/src/appdevguide/deployment.qdoc b/src/quick/doc/src/appdevguide/deployment.qdoc
index 2104bb6..916483a 100644
--- a/src/quick/doc/src/appdevguide/deployment.qdoc
+++ b/src/quick/doc/src/appdevguide/deployment.qdoc
@@ -128,7 +128,7 @@ loaded as a QQmlComponent instance rather than placed into a view:
     }
 \endcode
 
-See \l{qtqml-cppintegration-data.html}{Exposing C++ Data to QML} for more information about using
+See \l{qtqml-cppintegration-data.html}{qtqml-cppintegration-exposecppattributes.html}{Exposing Attributes of C++ Types to QML} for more information about using
 QQmlEngine, QQmlContext and QQmlComponent, as well
 as details on including QML files through \l{The Qt Resource System}{Qt's Resource system}.
 
diff --git a/src/quick/doc/src/appdevguide/glossary.qdoc b/src/quick/doc/src/appdevguide/glossary.qdoc
index 65b9b33..a3b6db8 100644
--- a/src/quick/doc/src/appdevguide/glossary.qdoc
+++ b/src/quick/doc/src/appdevguide/glossary.qdoc
@@ -159,7 +159,7 @@
         \li Signal
         \li A signal is a notification from a QML object. When an object emits
             a signal, other objects can receive and process this signal through
-            a \l{qtqml-syntax-objectattributes.html#signal-handlers}{signal handler}.
+            a \l{Signal Attributes}{signal handler}.
 
             Most properties of QML objects
             have a change signal, and also an associated change signal handler
diff --git a/src/quick/doc/src/appdevguide/porting.qdoc b/src/quick/doc/src/appdevguide/porting.qdoc
index eb1bb63..f4937fa 100644
--- a/src/quick/doc/src/appdevguide/porting.qdoc
+++ b/src/quick/doc/src/appdevguide/porting.qdoc
@@ -67,7 +67,7 @@ Qt.inputMethod.hide() to show and hide the virtual keyboard.
 XmlListModel and XmlRole types must import \e {QtQuick.XmlListModel} instead.
 \li The local storage API that enables SQL support has been moved from the \l {QML Global Object}
 into a \c QtQuick.LocalStorage module API. Any code that requires the local storage API must import
-\e {QtQuick.LocalStorage} with a namespaced import instead. See the \l LocalStorage documentation
+\e {QtQuick.LocalStorage} with a namespaced import instead. See the \l \l{QtQuick.LocalStorage 2}{QtQuick.LocalStorage} documentation
 for examples.
 \li The \c LayoutItem type has been removed from the \c QtQuick module as it was specific to the
 Graphics View framework backend used in QtQuick 1.
diff --git a/src/quick/doc/src/appdevguide/quickstart/components.qdoc b/src/quick/doc/src/appdevguide/quickstart/components.qdoc
index b11f849..989eefa 100644
--- a/src/quick/doc/src/appdevguide/quickstart/components.qdoc
+++ b/src/quick/doc/src/appdevguide/quickstart/components.qdoc
@@ -211,7 +211,7 @@ arrays. See the \l {list}{list type documentation} for details.
 
 Adding a \c property to an item automatically adds a \e {value changed}
 signal handler to the item. To connect to this signal, use a
-\l{qtqml-syntax-objectattributes.html#signal-handlers}{signal handler}
+\l{Signal Attributes}{signal handler}
 named with the \c on<Property>Changed syntax, using upper case for the first letter of the
 property name.
 
@@ -431,7 +431,7 @@ performAction signal above; the allowed parameter types are the same as those li
 {Adding Properties} section on this page.
 
 Adding a signal to an item automatically adds a
-\l{qtqml-syntax-objectattributes.html#signal-handlers}{signal handler} as well.
+\l{Signal Attributes}{signal handler} as well.
 The signal hander is named \c on<SignalName>, with the first letter of the signal being upper
 cased. The above example item would now have the following signal handlers:
 
@@ -467,7 +467,7 @@ Signal objects have a \c connect() method that can be used to a connect a signal
 another signal. When a signal is connected to a method, the method is automatically invoked
 whenever the signal is emitted. (In Qt terminology, the method is a \e slot that is connected
 to the \e signal; all methods defined in QML are created as Qt slots.) This enables a signal
-to be received by a method instead of a \l{qtqml-syntax-objectattributes.html#signal-handlers}
+to be received by a method instead of a \l{Signal Attributes}
 {signal handler}.
 
 For example, the \c application.qml above could be rewritten as:
diff --git a/src/quick/doc/src/concepts/modelviewsdata/modelview.qdoc b/src/quick/doc/src/concepts/modelviewsdata/modelview.qdoc
index d2c0307..c02a583 100644
--- a/src/quick/doc/src/concepts/modelviewsdata/modelview.qdoc
+++ b/src/quick/doc/src/concepts/modelviewsdata/modelview.qdoc
@@ -187,7 +187,7 @@ To visualize data, bind the view's \c model property to a model and the
 
     QML provides several types of data models among the built-in set of QML
     elements. In addition, models can be created with Qt C++ and then made
-    available to the \l{qtqml-cppclasses-engine.html}{QML engine} for use by
+    available to the \l{QQmlEngine}{QMLEngine} for use by
     QML components. For information about creating these models, visit the
     \l{qtquick-modelviewsdata-cppmodels.html}{Using C++ Models with QtQuick Views}
     and \l{qtqml-typesystem-topic.html#qml-object-types}
@@ -358,7 +358,7 @@ rectangles for the Grid item to position in a 5 by 5 arrangement.
 The number of items created by a Repeater is held by its \l{Repeater::}{count}
 property. It is not possible to set this property to determine the number of
 items to be created. Instead, as in the above example, we use an integer as
-the model. This is explained in the \l{QML Data Models#An Integer}{QML Data Models}
+the model. This is explained in the \l{qtquick-modelviewsdata-modelview.html#integers-as-models}{QML Data Models}
 document.
 
 It is also possible to use a delegate as the template for the items created
diff --git a/src/quick/doc/src/concepts/positioning/righttoleft.qdoc b/src/quick/doc/src/concepts/positioning/righttoleft.qdoc
index cc8add1..53febb5 100644
--- a/src/quick/doc/src/concepts/positioning/righttoleft.qdoc
+++ b/src/quick/doc/src/concepts/positioning/righttoleft.qdoc
@@ -91,7 +91,7 @@ views that takes the mirroring into account can be read from the \c effectiveLay
 The attached property \l LayoutMirroring is provided as a convenience for easily implementing right-to-left
 support for existing left-to-right Qt Quick applications. It mirrors the behavior of \l {anchor-layout}
 {Item anchors}, the layout direction of \l{Composing User Interfaces with QML#Positioners}{positioners} and
-\l{qtquick-concepts-data-modelview.html}{model views}, and the explicit text alignment of QML text elements.
+\l{qtquick-modelviewsdata-modelview.html}{model views}, and the explicit text alignment of QML text elements.
 
 You can enable layout mirroring for a particular \l Item:
 
diff --git a/src/quick/doc/src/concepts/statesanimations/animations.qdoc b/src/quick/doc/src/concepts/statesanimations/animations.qdoc
index cb607fe..65e3a01 100644
--- a/src/quick/doc/src/concepts/statesanimations/animations.qdoc
+++ b/src/quick/doc/src/concepts/statesanimations/animations.qdoc
@@ -28,7 +28,7 @@
 /*!
 \ingroup qtquick-transitions-animations
 \page qtquick-statesanimations-animations.html
-\title Animation and Transitions In Qt Quick
+\title Animation and Transitions in Qt Quick
 \brief the animation system in Qt Quick
 
 \section1 Animation and Transitions Elements
@@ -94,7 +94,7 @@ information about the different animation properties.
 \keyword qml-transition-animations
 \section2 Transitions during State Changes
 
-\l{State}{States} are property configurations where a property may have different values to reflect different states. State changes introduce
+\l{State}{Qt Quick States} are property configurations where a property may have different values to reflect different states. State changes introduce
 abrupt property changes; animations smooth transitions to produce visually
 appealing state changes.
 
diff --git a/src/quick/doc/src/concepts/statesanimations/states.qdoc b/src/quick/doc/src/concepts/statesanimations/states.qdoc
index 095a3cb..a7a1282 100644
--- a/src/quick/doc/src/concepts/statesanimations/states.qdoc
+++ b/src/quick/doc/src/concepts/statesanimations/states.qdoc
@@ -125,7 +125,7 @@ The \l {declarative/animation/states}{States and Transitions example}
 demonstrates how to declare a basic set of states and apply animated
 transitions between them.
 
-\l{qtquick-statesanimations-behaviors.html}{Using QML Behaviors with States}
+\l{qtquick-statesanimations-behaviors.html}{Using Qt Quick Behaviors with States}
 explains a common problem when using Behaviors to animate state changes.
 
 \section1 State Fast Forwarding
diff --git a/src/quick/doc/src/concepts/statesanimations/topic.qdoc b/src/quick/doc/src/concepts/statesanimations/topic.qdoc
index 25b0958..f4c5e89 100644
--- a/src/quick/doc/src/concepts/statesanimations/topic.qdoc
+++ b/src/quick/doc/src/concepts/statesanimations/topic.qdoc
@@ -27,7 +27,7 @@
 
 /*!
 \page qtquick-statesanimations-topic.html
-\title Concepts - States And Animations
+\title Import Concepts in Qt Quick - States, Transitions and Animations
 \brief Description of the concepts of states, transitions and animations in Qt Quick
 
 In any modern user-interface, transitioning between states and animating
diff --git a/src/quick/doc/src/qmltypereference.qdoc b/src/quick/doc/src/qmltypereference.qdoc
index 6920fff..1db07ce 100644
--- a/src/quick/doc/src/qmltypereference.qdoc
+++ b/src/quick/doc/src/qmltypereference.qdoc
@@ -45,7 +45,7 @@ imported via the following statement:
 import QtQuick 2.0
 \endqml
 
-See the \l{qtquick-main.html}{Qt Quick} module documentation for more
+See the \l{qtquick-main.html}{QtQuick} module documentation for more
 information about the concepts which are central to \c QtQuick.
 
 \section1 Basic Types
@@ -231,7 +231,7 @@ Views
 
 Data Storage
 \list
-\li \l {LocalStorage} - Module API providing simplified SQL access
+\li \l {QtQuick.LocalStorage 2} - Module API providing simplified SQL access
 \endlist
 
 \section2 Graphical Effects
diff --git a/src/quick/doc/src/qtquick.qdoc b/src/quick/doc/src/qtquick.qdoc
index 8fa21ce..7c77150 100644
--- a/src/quick/doc/src/qtquick.qdoc
+++ b/src/quick/doc/src/qtquick.qdoc
@@ -80,11 +80,11 @@ To find out more about using the QML language, see the \l{Qt QML Module Document
         \li \l{qtquick-qmltypereference.html#object-types}{Object Types}
             \list
             \li \l{qtquick-qmltypereference.html#visual-types}{Visual Types}
-            \li \l{qtquick-qmltypereference.html#user-input-types}{User Input Types}
+            \li \l{qtquick-qmltypereference.html#user-input}{User Input}
             \li \l{qtquick-qmltypereference.html#positioning}{Positioning}
             \li \l{qtquick-qmltypereference.html#states-transitions-and-animations}{States, Transitions And Animations}
             \li \l{qtquick-qmltypereference.html#model-view-types-and-data-storage-and-access}{Model/View Types And Data Storage And Access}
-            \li \l{qtquick-qmltypereference.html#particles-and-graphical-effects}{Particles And Graphical Effects}
+            \li \l{qtquick-qmltypereference.html#graphical-effects}{Graphical Effects}
             \li \l{qtquick-qmltypereference.html#convenience-types}{Convenience Types}
             \li \l{qtquick-qmltypereference.html#canvas-similar-to-html5-canvas}{Canvas (similar to HTML5 Canvas)}
             \endlist
diff --git a/src/quick/items/context2d/qquickcanvasitem.cpp b/src/quick/items/context2d/qquickcanvasitem.cpp
index 16f08d3..b7de41c 100644
--- a/src/quick/items/context2d/qquickcanvasitem.cpp
+++ b/src/quick/items/context2d/qquickcanvasitem.cpp
@@ -415,7 +415,7 @@ void QQuickCanvasItem::setCanvasSize(const QSizeF & size)
 
     By default the tileSize is the same as the canvasSize.
 
-    \sa QtQuick2::Canvas::canvaasSize, QtQuick2::Canvas::canvasWindow
+    \sa QtQuick2::Canvas::canvasSize, QtQuick2::Canvas::canvasWindow
 */
 QSize QQuickCanvasItem::tileSize() const
 {
@@ -873,8 +873,8 @@ QQmlRefPointer<QQuickCanvasPixmap> QQuickCanvasItem::loadedPixmap(const QUrl& ur
     The loaded image can be unloaded by the \a QtQuick2::Canvas::unloadImage method.
 
     Note: Only loaded images can be painted on the Canvas item.
-  \sa QtQuick2::Canvas::unloadImage, QtQuick2::Canvas::imageLoaded, QtQuick2::Canvas::isImageLoaded,
-      QtQuick2::Context2D::createImageData, QtQuick2::Context2D::drawImage
+  \sa QtQuick2::Canvas::unloadImage, QtQuick2::Canvas::onImageLoaded, QtQuick2::Canvas::isImageLoaded,
+      QtQuick2::Context2D::createImageData(), QtQuick2::Context2D::drawImage
 */
 void QQuickCanvasItem::loadImage(const QUrl& url)
 {
@@ -900,8 +900,8 @@ void QQuickCanvasItem::loadImage(const QUrl& url)
   Once an image is unloaded it cannot be painted by the canvas context
   unless it is loaded again.
 
-  \sa QtQuick2::Canvas::loadImage, QtQuick2::Canvas::imageLoaded, QtQuick2::Canvas::isImageLoaded,
-      QtQuick2::Context2D::createImageData, QtQuick2::Context2D::drawImage
+  \sa QtQuick2::Canvas::loadImage, QtQuick2::Canvas::onImageLoaded, QtQuick2::Canvas::isImageLoaded,
+      QtQuick2::Context2D::createImageData(), QtQuick2::Context2D::drawImage
 */
 void QQuickCanvasItem::unloadImage(const QUrl& url)
 {
diff --git a/src/quick/items/context2d/qquickcontext2d.cpp b/src/quick/items/context2d/qquickcontext2d.cpp
index d940a0b..3b75229 100644
--- a/src/quick/items/context2d/qquickcontext2d.cpp
+++ b/src/quick/items/context2d/qquickcontext2d.cpp
@@ -818,7 +818,7 @@ static void ctx2d_globalCompositeOperation_set(v8::Local<v8::String>, v8::Local<
      The default value is  '#000000'.
      \sa QtQuick2::Context2D::createLinearGradient
      \sa QtQuick2::Context2D::createRadialGradient
-     \sa QtQuick2::Context2D::createPattern
+     \sa QtQuick2::Context2D::createPattern()
      \sa QtQuick2::Context2D::strokeStyle
  */
 static v8::Handle<v8::Value> ctx2d_fillStyle(v8::Local<v8::String>, const v8::AccessorInfo &info)
@@ -923,7 +923,7 @@ static void ctx2d_fillRule_set(v8::Local<v8::String>, v8::Local<v8::Value> value
 
      \sa QtQuick2::Context2D::createLinearGradient
      \sa QtQuick2::Context2D::createRadialGradient
-     \sa QtQuick2::Context2D::createPattern
+     \sa QtQuick2::Context2D::createPattern()
      \sa QtQuick2::Context2D::fillStyle
  */
 v8::Handle<v8::Value> ctx2d_strokeStyle(v8::Local<v8::String>, const v8::AccessorInfo &info)
@@ -992,8 +992,8 @@ static void ctx2d_strokeStyle_set(v8::Local<v8::String>, v8::Local<v8::Value> va
 
     \sa QtQuick2::Context2D::CanvasGradient::addColorStop
     \sa QtQuick2::Context2D::createRadialGradient
-    \sa QtQuick2::Context2D::ctx2d_createConicalGradient
-    \sa QtQuick2::Context2D::createPattern
+    \sa QtQuick2::Context2D::ctx2d_createConicalGradient()
+    \sa QtQuick2::Context2D::createPattern()
     \sa QtQuick2::Context2D::fillStyle
     \sa QtQuick2::Context2D::strokeStyle
   */
@@ -1038,8 +1038,8 @@ static v8::Handle<v8::Value> ctx2d_createLinearGradient(const v8::Arguments &arg
 
     \sa QtQuick2::Context2D::CanvasGradient::addColorStop
     \sa QtQuick2::Context2D::createLinearGradient
-    \sa QtQuick2::Context2D::ctx2d_createConicalGradient
-    \sa QtQuick2::Context2D::createPattern
+    \sa QtQuick2::Context2D::ctx2d_createConicalGradient()
+    \sa QtQuick2::Context2D::createPattern()
     \sa QtQuick2::Context2D::fillStyle
     \sa QtQuick2::Context2D::strokeStyle
   */
@@ -1093,8 +1093,8 @@ static v8::Handle<v8::Value> ctx2d_createRadialGradient(const v8::Arguments &arg
 
     \sa QtQuick2::Context2D::CanvasGradient::addColorStop
     \sa QtQuick2::Context2D::createLinearGradient
-    \sa QtQuick2::Context2D::ctx2d_createRadialGradient
-    \sa QtQuick2::Context2D::createPattern
+    \sa QtQuick2::Context2D::ctx2d_createRadialGradient()
+    \sa QtQuick2::Context2D::createPattern()
     \sa QtQuick2::Context2D::fillStyle
     \sa QtQuick2::Context2D::strokeStyle
   */
@@ -2256,7 +2256,7 @@ static v8::Handle<v8::Value> ctx2d_measureText(const v8::Arguments &args)
   \sa QtQuick2::Image
   \sa QtQuick2::Canvas::loadImage
   \sa QtQuick2::Canvas::isImageLoaded
-  \sa QtQuick2::Canvas::imageLoaded
+  \sa QtQuick2::Canvas::onImageLoaded
 
   \sa {http://www.w3.org/TR/2dcontext/#dom-context-2d-drawimage}{W3C 2d context standard for drawImage}
   */
@@ -2276,7 +2276,7 @@ static v8::Handle<v8::Value> ctx2d_measureText(const v8::Arguments &args)
   \sa QtQuick2::Image
   \sa QtQuick2::Canvas::loadImage
   \sa QtQuick2::Canvas::isImageLoaded
-  \sa QtQuick2::Canvas::imageLoaded
+  \sa QtQuick2::Canvas::onImageLoaded
 
   \sa {http://www.w3.org/TR/2dcontext/#dom-context-2d-drawimage}{W3C 2d context standard for drawImage}
   */
@@ -2297,7 +2297,7 @@ static v8::Handle<v8::Value> ctx2d_measureText(const v8::Arguments &args)
   \sa QtQuick2::Image
   \sa QtQuick2::Canvas::loadImage
   \sa QtQuick2::Canvas::isImageLoaded
-  \sa QtQuick2::Canvas::imageLoaded
+  \sa QtQuick2::Canvas::onImageLoaded
 
   \sa {http://www.w3.org/TR/2dcontext/#dom-context-2d-drawimage}{W3C 2d context standard for drawImage}
 */
@@ -2419,7 +2419,7 @@ static v8::Handle<v8::Value> ctx2d_drawImage(const v8::Arguments &args)
      \sa QtQuick2::CanvasImageData::width
      \sa QtQuick2::CanvasImageData::height
      \sa QtQuick2::CanvasImageData::data
-     \sa QtQuick2::Context2D::createImageData
+     \sa QtQuick2::Context2D::createImageData()
      \sa QtQuick2::Context2D::getImageData
      \sa QtQuick2::Context2D::putImageData
   */
diff --git a/src/quick/items/qquickdroparea.cpp b/src/quick/items/qquickdroparea.cpp
index f7a8793..ab27993 100644
--- a/src/quick/items/qquickdroparea.cpp
+++ b/src/quick/items/qquickdroparea.cpp
@@ -100,13 +100,13 @@ QQuickDropAreaPrivate::~QQuickDropAreaPrivate()
     A DropArea is an invisible item which receives events when other items are
     dragged over it.
 
-    The Drag attached property can be used to notify the DropArea when an Item is
+    The \l Drag attached property can be used to notify the DropArea when an Item is
     dragged over it.
 
     The \l keys property can be used to filter drag events which don't include
     a matching key.
 
-    The \l dropItem property is communicated to the source of a drag event as
+    The \l source property is communicated to the source of a drag event as
     the recipient of a drop on the drag target.
 
     The \l delegate property provides a means to specify a component to be
diff --git a/src/quick/items/qquickflipable.cpp b/src/quick/items/qquickflipable.cpp
index b4e3a38..0a472ea 100644
--- a/src/quick/items/qquickflipable.cpp
+++ b/src/quick/items/qquickflipable.cpp
@@ -124,8 +124,8 @@ public:
     default states, the NumberAnimation animates the angle between
     its old and new values.
 
-    See \l {States} for details on state changes and the default
-    state, and \l {QML Animation and Transitions} for more information on how
+    See \l {Qt Quick States} for details on state changes and the default
+    state, and \l {Animation and Transitions in Qt Quick} for more information on how
     animations work within transitions.
 
     \sa {declarative/ui-components/flipable}{Flipable example}
diff --git a/src/quick/items/qquickfocusscope.cpp b/src/quick/items/qquickfocusscope.cpp
index 871a2cf..9790b39 100644
--- a/src/quick/items/qquickfocusscope.cpp
+++ b/src/quick/items/qquickfocusscope.cpp
@@ -54,7 +54,7 @@ QT_BEGIN_NAMESPACE
 
     Focus scopes assist in keyboard focus handling when building reusable QML
     components.  All the details are covered in the
-    \l {qmlfocus}{keyboard focus documentation}.
+    \l {Keyboard Focus in Qt Quick}{keyboard focus documentation}.
 
     \sa {declarative/keyinteraction/focus}{Keyboard focus example}
 */
diff --git a/src/quick/items/qquickgridview.cpp b/src/quick/items/qquickgridview.cpp
index b562380..139f9e7 100644
--- a/src/quick/items/qquickgridview.cpp
+++ b/src/quick/items/qquickgridview.cpp
@@ -1186,7 +1186,7 @@ bool QQuickGridViewPrivate::flick(AxisData &data, qreal minExtent, qreal maxExte
 
     The currently selected item is highlighted with a blue \l Rectangle using the \l highlight property,
     and \c focus is set to \c true to enable keyboard navigation for the grid view.
-    The grid view itself is a focus scope (see \l{qmlfocus#Acquiring Focus and Focus Scopes}{the focus documentation page} for more details).
+    The grid view itself is a focus scope (see \l{Keyboard Focus in Qt Quick} for more details).
 
     Delegates are instantiated as needed and may be destroyed at any time.
     State should \e never be stored in a delegate.
@@ -1335,7 +1335,7 @@ void QQuickGridView::setHighlightFollowsCurrentItem(bool autoHighlight)
     or \l VisualItemModel, or provided by C++ model classes. If a C++ model class is
     used, it must be a subclass of \l QAbstractItemModel or a simple list.
 
-  \sa {qmlmodels}{Data Models}
+  \sa {qml-data-models}{Data Models}
 */
 
 /*!
@@ -1343,7 +1343,7 @@ void QQuickGridView::setHighlightFollowsCurrentItem(bool autoHighlight)
 
     The delegate provides a template defining each item instantiated by the view.
     The index is exposed as an accessible \c index property.  Properties of the
-    model are also available depending upon the type of \l {qmlmodels}{Data Model}.
+    model are also available depending upon the type of \l {qml-data-models}{Data Model}.
 
     The number of objects and bindings in the delegate has a direct effect on the
     flicking performance of the view.  If at all possible, place functionality
@@ -1716,7 +1716,7 @@ void QQuickGridView::setSnapMode(SnapMode mode)
     \list
     \li The view is first created
     \li The view's \l model changes
-    \li The view's \l model is \l {QAbstractItemModel::reset}{reset}, if the model is a QAbstractItemModel subclass
+    \li The view's \l model is \l {QAbstractItemModel::reset()}{reset}, if the model is a QAbstractItemModel subclass
     \endlist
 
     For example, here is a view that specifies such a transition:
diff --git a/src/quick/items/qquickimage.cpp b/src/quick/items/qquickimage.cpp
index 9d2babb..8b0392f 100644
--- a/src/quick/items/qquickimage.cpp
+++ b/src/quick/items/qquickimage.cpp
@@ -403,7 +403,7 @@ qreal QQuickImage::paintedHeight() const
 
     If both the sourceSize.width and sourceSize.height are set the image will be scaled
     down to fit within the specified size, maintaining the image's aspect ratio.  The actual
-    size of the image after scaling is available via \l implicitWidth and \l implicitHeight.
+    size of the image after scaling is available via \l Item::implicitWidth and \l Item::implicitHeight.
 
     If the source is an intrinsically scalable image (eg. SVG), this property
     determines the size of the loaded image regardless of intrinsic size.
diff --git a/src/quick/items/qquickitem.cpp b/src/quick/items/qquickitem.cpp
index f360ca5..af47053 100644
--- a/src/quick/items/qquickitem.cpp
+++ b/src/quick/items/qquickitem.cpp
@@ -1478,7 +1478,7 @@ QQuickKeysAttached *QQuickKeysAttached::qmlAttachedProperties(QObject *obj)
     \brief Property used to mirror layout behavior
 
     The LayoutMirroring attached property is used to horizontally mirror \l {anchor-layout}{Item anchors},
-    \l{Using QML Positioner and Repeater Items}{positioner} types (such as \l Row and \l Grid)
+    \l{Item Layouts}{positioner} types (such as \l Row and \l Grid)
     and views (such as \l GridView and horizontal \l ListView). Mirroring is a visual change: left
     anchors become right anchors, and positioner types like \l Grid and \l Row reverse the
     horizontal layout of child items.
@@ -1509,7 +1509,7 @@ QQuickKeysAttached *QQuickKeysAttached::qmlAttachedProperties(QObject *obj)
     mirroring is not the desired behavior, or if the child item already implements mirroring in
     some custom way.
 
-    See \l {QML Right-to-left User Interfaces} for further details on using \c LayoutMirroring and
+    See \l {Right-to-left User Interfaces} for further details on using \c LayoutMirroring and
     other related features to implement right-to-left support for an application.
 */
 
@@ -1518,7 +1518,7 @@ QQuickKeysAttached *QQuickKeysAttached::qmlAttachedProperties(QObject *obj)
 
     This property holds whether the item's layout is mirrored horizontally. Setting this to true
     horizontally reverses \l {anchor-layout}{anchor} settings such that left anchors become right,
-    and right anchors become left. For \l{Using QML Positioner and Repeater Items}{positioner} types
+    and right anchors become left. For \l{Item Layouts}{positioner} types
     (such as \l Row and \l Grid) and view types (such as \l {GridView}{GridView} and \l {ListView}{ListView})
     this also mirrors the horizontal layout direction of the item.
 
@@ -1771,7 +1771,7 @@ void QQuickItemPrivate::updateSubFocusItem(QQuickItem *scope, bool focus)
     as \l {Keys::onPressed}{onPressed} and \l {Keys::onReleased}{onReleased},
     as well as handlers for specific keys, such as
     \l {Keys::onCancelPressed}{onCancelPressed}.  The example below
-    assigns \l {qmlfocus}{focus} to the item and handles
+    assigns \l {Keyboard Focus in Qt Quick}{focus} to the item and handles
     the Left key via the general \e onPressed handler and the Select key via the
     onSelectPressed handler:
 
@@ -5484,7 +5484,7 @@ QRectF QQuickItem::mapRectFromScene(const QRectF &rect) const
   }
   \endqml
 
-  \sa {qmlstate}{States}
+  \sa {Qt Quick States}{Qt Quick States}
 */
 /*!
   \qmlproperty list<Transition> QtQuick2::Item::transitions
@@ -5504,7 +5504,7 @@ QRectF QQuickItem::mapRectFromScene(const QRectF &rect) const
   }
   \endqml
 
-  \sa {QML Animation and Transitions}{Transitions}
+  \sa {Animation and Transitions in Qt Quick}{Transitions}
 */
 /*
   \qmlproperty list<Filter> QtQuick2::Item::filter
@@ -5574,7 +5574,7 @@ QRectF QQuickItem::mapRectFromScene(const QRectF &rect) const
   set), \c state will be a blank string. Likewise, you can return an
   item to its base state by setting its current state to \c ''.
 
-  \sa {qmlstates}{States}
+  \sa {Qt Quick States}{Qt Quick States}
 */
 
 /*!
@@ -5623,7 +5623,7 @@ QRectF QQuickItem::mapRectFromScene(const QRectF &rect) const
   }
   \endqml
 
-  \sa focus, {qmlfocus}{Keyboard Focus}
+  \sa focus, {Keyboard Focus in Qt Quick}{Keyboard Focus}
 */
 
 /*!
@@ -5655,7 +5655,7 @@ QRectF QQuickItem::mapRectFromScene(const QRectF &rect) const
   }
   \endqml
 
-  \sa activeFocus, {qmlfocus}{Keyboard Focus}
+  \sa activeFocus, {Keyboard Focus in Qt Quick}{Keyboard Focus}
 */
 
 
@@ -6045,9 +6045,9 @@ void QQuickItemLayer::deactivateEffect()
     Holds the effect that is applied to this layer.
 
     The effect is typically a \l ShaderEffect component, although any \l Item component can be
-    assigned. The effect should have a source texture property with a name matching \l samplerName.
+    assigned. The effect should have a source texture property with a name matching \l layer.samplerName.
 
-    \sa samplerName
+    \sa layer.samplerName
  */
 
 void QQuickItemLayer::setEffect(QQmlComponent *component)
@@ -6135,10 +6135,10 @@ void QQuickItemLayer::setFormat(QQuickShaderEffectSource::Format f)
 /*!
     \qmlproperty enumeration QtQuick2::Item::layer.sourceRect
 
-    This property defines which rectangular area of the \l sourceItem to
-    render into the texture. The source rectangle can be larger than
-    \l sourceItem itself. If the rectangle is null, which is the default,
-    the whole \l sourceItem is rendered to texture.
+    This property defines the rectangular area of the item that should be
+    rendered into the texture. The source rectangle can be larger than
+    the item itself. If the rectangle is null, which is the default,
+    then the whole item is rendered to the texture.
  */
 
 void QQuickItemLayer::setSourceRect(const QRectF &sourceRect)
@@ -6235,10 +6235,10 @@ void QQuickItemLayer::setWrapMode(QQuickShaderEffectSource::WrapMode mode)
 
     Holds the name of the effect's source texture property.
 
-    samplerName needs to match the name of the effect's source texture property
+    This value must match the name of the effect's source texture property
     so that the Item can pass the layer's offscreen surface to the effect correctly.
 
-    \sa effect, ShaderEffect
+    \sa layer.effect, ShaderEffect
  */
 
 void QQuickItemLayer::setName(const QByteArray &name) {
diff --git a/src/quick/items/qquickitemanimation.cpp b/src/quick/items/qquickitemanimation.cpp
index 078fb3f..aecf45b 100644
--- a/src/quick/items/qquickitemanimation.cpp
+++ b/src/quick/items/qquickitemanimation.cpp
@@ -88,10 +88,10 @@ QT_BEGIN_NAMESPACE
 
     Like any other animation type, a ParentAnimation can be applied in a
     number of ways, including transitions, behaviors and property value
-    sources. The \l {QML Animation and Transitions} documentation shows a
+    sources. The \l {Animation and Transitions in Qt Quick} documentation shows a
     variety of methods for creating animations.
 
-    \sa {QML Animation and Transitions}, {declarative/animation/basics}{Animation basics example}
+    \sa {Animation and Transitions in Qt Quick}, {declarative/animation/basics}{Animation basics example}
 */
 QQuickParentAnimation::QQuickParentAnimation(QObject *parent)
     : QQuickAnimationGroup(*(new QQuickParentAnimationPrivate), parent)
@@ -436,10 +436,10 @@ QAbstractAnimationJob* QQuickParentAnimation::transition(QQuickStateActions &act
 
     Like any other animation type, an AnchorAnimation can be applied in a
     number of ways, including transitions, behaviors and property value
-    sources. The \l {QML Animation and Transitions} documentation shows a
+    sources. The \l {Animation and Transitions in Qt Quick} documentation shows a
     variety of methods for creating animations.
 
-    \sa {QML Animation and Transitions}, AnchorChanges
+    \sa {Animation and Transitions in Qt Quick}, AnchorChanges
 */
 QQuickAnchorAnimation::QQuickAnchorAnimation(QObject *parent)
 : QQuickAbstractAnimation(*(new QQuickAnchorAnimationPrivate), parent)
@@ -583,7 +583,7 @@ QAbstractAnimationJob* QQuickAnchorAnimation::transition(QQuickStateActions &act
     In the above case, the path start will be the item's current position, and the
     path end will be the item's target position in the target state.
 
-    \sa {QML Animation and Transitions}, PathInterpolator
+    \sa {Animation and Transitions in Qt Quick}, PathInterpolator
 */
 QQuickPathAnimation::QQuickPathAnimation(QObject *parent)
 : QQuickAbstractAnimation(*(new QQuickPathAnimationPrivate), parent)
diff --git a/src/quick/items/qquicklistview.cpp b/src/quick/items/qquicklistview.cpp
index 818f045..f9ff4db 100644
--- a/src/quick/items/qquicklistview.cpp
+++ b/src/quick/items/qquicklistview.cpp
@@ -1691,13 +1691,13 @@ bool QQuickListViewPrivate::flick(AxisData &data, qreal minExtent, qreal maxExte
 
     The currently selected item is highlighted with a blue \l Rectangle using the \l highlight property,
     and \c focus is set to \c true to enable keyboard navigation for the list view.
-    The list view itself is a focus scope (see \l{qmlfocus#Acquiring Focus and Focus Scopes}{the focus documentation page} for more details).
+    The list view itself is a focus scope (see \l{Keyboard Focus in Qt Quick} for more details).
 
     Delegates are instantiated as needed and may be destroyed at any time.
     State should \e never be stored in a delegate.
 
     ListView attaches a number of properties to the root item of the delegate, for example
-    \c {ListView.isCurrentItem}.  In the following example, the root delegate item can access
+    \c {ListView:isCurrentItem}.  In the following example, the root delegate item can access
     this attached property directly as \c ListView.isCurrentItem, while the child
     \c contactInfo object must refer to this property as \c wrapper.ListView.isCurrentItem.
 
@@ -1844,7 +1844,7 @@ QQuickListView::~QQuickListView()
     or \l VisualItemModel, or provided by C++ model classes. If a C++ model class is
     used, it must be a subclass of \l QAbstractItemModel or a simple list.
 
-    \sa {qmlmodels}{Data Models}
+    \sa {qml-data-models}{Data Models}
 */
 
 /*!
@@ -1852,7 +1852,7 @@ QQuickListView::~QQuickListView()
 
     The delegate provides a template defining each item instantiated by the view.
     The index is exposed as an accessible \c index property.  Properties of the
-    model are also available depending upon the type of \l {qmlmodels}{Data Model}.
+    model are also available depending upon the type of \l {qml-data-models}{Data Model}.
 
     The number of objects and bindings in the delegate has a direct effect on the
     flicking performance of the view.  If at all possible, place functionality
@@ -2350,7 +2350,7 @@ void QQuickListView::setSnapMode(SnapMode mode)
     An instance of the header component is created for each view.  The
     header is positioned at the beginning of the view, before any items.
 
-    \sa footer, headertem
+    \sa footer, headerItem
 */
 
 /*!
@@ -2384,7 +2384,7 @@ void QQuickListView::setSnapMode(SnapMode mode)
     \list
     \li The view is first created
     \li The view's \l model changes
-    \li The view's \l model is \l {QAbstractItemModel::reset}{reset}, if the model is a QAbstractItemModel subclass
+    \li The view's \l model is \l {QAbstractItemModel::reset()}{reset}, if the model is a QAbstractItemModel subclass
     \endlist
 
     For example, here is a view that specifies such a transition:
diff --git a/src/quick/items/qquickloader.cpp b/src/quick/items/qquickloader.cpp
index 52338af..5919878 100644
--- a/src/quick/items/qquickloader.cpp
+++ b/src/quick/items/qquickloader.cpp
@@ -244,7 +244,7 @@ qreal QQuickLoaderPrivate::getImplicitHeight() const
 
     Loader is a focus scope. Its \l {Item::}{focus} property must be set to
     \c true for any of its children to get the \e {active focus}. (See
-    \l{qmlfocus#Acquiring Focus and Focus Scopes}{the focus documentation page}
+    \l{Keyboard Focus in Qt Quick}
     for more details.) Any key events received in the loaded item should likely
     also be \l {KeyEvent::}{accepted} so they are not propagated to the Loader.
 
@@ -314,7 +314,7 @@ QQuickLoader::~QQuickLoader()
 /*!
     \qmlproperty bool QtQuick2::Loader::active
     This property is \c true if the Loader is currently active.
-    The default value for the \l active property is \c true.
+    The default value for this property is \c true.
 
     If the Loader is inactive, changing the \l source or \l sourceComponent
     will not cause the item to be instantiated until the Loader is made active.
diff --git a/src/quick/items/qquickmultipointtoucharea.cpp b/src/quick/items/qquickmultipointtoucharea.cpp
index f6f48e4..1c954b3 100644
--- a/src/quick/items/qquickmultipointtoucharea.cpp
+++ b/src/quick/items/qquickmultipointtoucharea.cpp
@@ -233,7 +233,7 @@ void QQuickTouchPoint::setSceneY(qreal sceneY)
 
     A MultiPointTouchArea is an invisible item that is used to track multiple touch points.
 
-    The \l enabled property is used to enable and disable touch handling. When disabled,
+    The \l Item::enabled property is used to enable and disable touch handling. When disabled,
     the touch area becomes transparent to mouse/touch events.
 
     MultiPointTouchArea can be used in two ways:
diff --git a/src/quick/items/qquickpathview.cpp b/src/quick/items/qquickpathview.cpp
index 00443fb..748166a 100644
--- a/src/quick/items/qquickpathview.cpp
+++ b/src/quick/items/qquickpathview.cpp
@@ -497,7 +497,7 @@ void QQuickPathViewPrivate::setDragging(bool d)
     }
     \endqml
 
-    The path view itself is a focus scope (see \l{qmlfocus#Acquiring Focus and Focus Scopes}{the focus documentation page} for more details).
+    The path view itself is a focus scope (see \l{Keyboard Focus in Qt Quick} for more details).
 
     Delegates are instantiated as needed and may be destroyed at any time.
     State should \e never be stored in a delegate.
@@ -582,7 +582,7 @@ QQuickPathView::~QQuickPathView()
 
     \note changing the model will reset the offset and currentIndex to 0.
 
-    \sa {qmlmodels}{Data Models}
+    \sa {qml-data-models}{Data Models}
 */
 QVariant QQuickPathView::model() const
 {
@@ -1167,7 +1167,7 @@ bool QQuickPathView::isDragging() const
 
     The delegate provides a template defining each item instantiated by the view.
     The index is exposed as an accessible \c index property.  Properties of the
-    model are also available depending upon the type of \l {qmlmodels}{Data Model}.
+    model are also available depending upon the type of \l {qml-data-models}{Data Model}.
 
     The number of objects and bindings in the delegate has a direct effect on the
     flicking performance of the view when pathItemCount is specified.  If at all possible, place functionality
diff --git a/src/quick/items/qquickpositioners.cpp b/src/quick/items/qquickpositioners.cpp
index 333cd8f..5e2f2e8 100644
--- a/src/quick/items/qquickpositioners.cpp
+++ b/src/quick/items/qquickpositioners.cpp
@@ -504,8 +504,8 @@ void QQuickBasePositioner::updateAttachedProperties(QQuickPositionerAttached *sp
     where it exists within the layout of its parent Column, Row, Flow or Grid.
 
     For example, below is a \l Grid with 16 child rectangles, as created through a \l Repeater.
-    Each \l Rectangle displays its index in the Grid using \l Positioner.index, and the first
-    item is colored differently by taking \l Positioner.isFirstItem into account:
+    Each \l Rectangle displays its index in the Grid using \l {Positioner::index}{Positioner.index}, and the first
+    item is colored differently by taking \l {Positioner::isFirstItem}{Positioner.isFirstItem} into account:
 
     \code
     Grid {
@@ -585,7 +585,7 @@ void QQuickPositionerAttached::setIsLastItem(bool isLastItem)
 
     Column is a type that positions its child items along a single column.
     It can be used as a convenient way to vertically position a series of items without
-    using \l {Anchor-based Layout in QML}{anchors}.
+    using \l {Positioning with Anchors}{anchors}.
 
     Below is a Column that contains three rectangles of various sizes:
 
@@ -650,7 +650,7 @@ void QQuickPositionerAttached::setIsLastItem(bool isLastItem)
     \list
     \li Items that are created or reparented as a child of the positioner after the
         positioner has been created
-    \li Child items that change their \l visible property from false to true, and thus
+    \li Child items that change their \l Item::visible property from false to true, and thus
        are now visible
     \endlist
 
@@ -754,7 +754,7 @@ void QQuickColumn::reportConflictingAnchors()
 
     Row is a type that positions its child items along a single row.
     It can be used as a convenient way to horizontally position a series of items without
-    using \l {Anchor-based Layout in QML}{anchors}.
+    using \l {Positioning with Anchors}{anchors}.
 
     Below is a Row that contains three rectangles of various sizes:
 
@@ -804,7 +804,7 @@ void QQuickColumn::reportConflictingAnchors()
     \list
     \li Items that are created or reparented as a child of the positioner after the
         positioner has been created
-    \li Child items that change their \l visible property from false to true, and thus
+    \li Child items that change their \l Item::visible property from false to true, and thus
        are now visible
     \endlist
 
@@ -1037,7 +1037,7 @@ void QQuickRow::reportConflictingAnchors()
     \list
     \li Items that are created or reparented as a child of the positioner after the
         positioner has been created
-    \li Child items that change their \l visible property from false to true, and thus
+    \li Child items that change their \l Item::visible property from false to true, and thus
        are now visible
     \endlist
 
@@ -1471,7 +1471,7 @@ void QQuickGrid::reportConflictingAnchors()
     \list
     \li Items that are created or reparented as a child of the positioner after the
         positioner has been created
-    \li Child items that change their \l visible property from false to true, and thus
+    \li Child items that change their \l Item::visible property from false to true, and thus
        are now visible
     \endlist
 
diff --git a/src/quick/items/qquickrectangle.cpp b/src/quick/items/qquickrectangle.cpp
index 542f544..0e9a416 100644
--- a/src/quick/items/qquickrectangle.cpp
+++ b/src/quick/items/qquickrectangle.cpp
@@ -286,7 +286,7 @@ int QQuickRectanglePrivate::doUpdateSlotIdx = -1;
 
     You can also create rounded rectangles using the \l radius property. Since this
     introduces curved edges to the corners of a rectangle, it may be appropriate to
-    set the \l antialiasing property to improve its appearance.
+    set the \l Item::antialiasing property to improve its appearance.
 
     \section1 Example Usage
 
diff --git a/src/quick/items/qquickrepeater.cpp b/src/quick/items/qquickrepeater.cpp
index 943375d..beb7be8 100644
--- a/src/quick/items/qquickrepeater.cpp
+++ b/src/quick/items/qquickrepeater.cpp
@@ -85,7 +85,7 @@ QQuickRepeaterPrivate::~QQuickRepeaterPrivate()
 
     \image repeater-simple.png
 
-    A Repeater's \l model can be any of the supported \l {qmlmodels}{data models}.
+    A Repeater's \l model can be any of the supported \l {qml-data-models}{data models}.
     Additionally, like delegates for other views, a Repeater delegate can access
     its index within the repeater, as well as the model data relevant to the
     delegate. See the \l delegate property documentation for details.
@@ -159,7 +159,7 @@ QQuickRepeater::~QQuickRepeater()
 
     The model providing data for the repeater.
 
-    This property can be set to any of the supported \l {qmlmodels}{data models}:
+    This property can be set to any of the supported \l {qml-data-models}{data models}:
 
     \list
     \li A number that indicates the number of delegates to be created by the repeater
@@ -170,7 +170,7 @@ QQuickRepeater::~QQuickRepeater()
 
     The type of model affects the properties that are exposed to the \l delegate.
 
-    \sa {qmlmodels}{Data Models}
+    \sa {qml-data-models}{Data Models}
 */
 QVariant QQuickRepeater::model() const
 {
diff --git a/src/quick/items/qquickshadereffect.cpp b/src/quick/items/qquickshadereffect.cpp
index 9ab926d..1bb9b41 100644
--- a/src/quick/items/qquickshadereffect.cpp
+++ b/src/quick/items/qquickshadereffect.cpp
@@ -743,7 +743,7 @@ void QQuickShaderEffect::setBlending(bool enable)
     \qmlproperty variant QtQuick2::ShaderEffect::mesh
 
     This property defines the mesh used to draw the ShaderEffect. It can hold
-    any mesh object deriving from \l QQuickShaderEffectMesh, such as \l GridMesh.
+    any \l GridMesh object.
     If a size value is assigned to this property, the ShaderEffect implicitly
     uses a \l GridMesh with the value as
     \l{GridMesh::resolution}{mesh resolution}. By default, this property is
diff --git a/src/quick/items/qquicktextedit.cpp b/src/quick/items/qquicktextedit.cpp
index 73d9b67..4d1eb61 100644
--- a/src/quick/items/qquicktextedit.cpp
+++ b/src/quick/items/qquicktextedit.cpp
@@ -1484,6 +1484,8 @@ void QQuickTextEdit::paste()
 
 
 /*!
+    \qmlmethod QtQuick2::QQuickTextEdit::undo()
+
     Undoes the last operation if undo is \l {canUndo}{available}. Deselects any
     current selection, and updates the selection start to the current cursor
     position.
@@ -1496,6 +1498,8 @@ void QQuickTextEdit::undo()
 }
 
 /*!
+    \qmlmethod QtQuick2::QQuickTextEdit::redo()
+
     Redoes the last operation if redo is \l {canRedo}{available}.
 */
 
diff --git a/src/quick/items/qquicktextinput.cpp b/src/quick/items/qquicktextinput.cpp
index 73e329b..5b7bbaf 100644
--- a/src/quick/items/qquicktextinput.cpp
+++ b/src/quick/items/qquicktextinput.cpp
@@ -1928,6 +1928,8 @@ void QQuickTextInput::paste()
 #endif // QT_NO_CLIPBOARD
 
 /*!
+    \qmlmethod QtQuick2::TextInput::undo()
+
     Undoes the last operation if undo is \l {canUndo}{available}. Deselects any
     current selection, and updates the selection start to the current cursor
     position.
@@ -1943,6 +1945,8 @@ void QQuickTextInput::undo()
 }
 
 /*!
+    \qmlmethod QtQuick2::TextInput::redo()
+
     Redoes the last operation if redo is \l {canRedo}{available}.
 */
 
diff --git a/src/quick/items/qquickview.cpp b/src/quick/items/qquickview.cpp
index 2a56c73..87066f6 100644
--- a/src/quick/items/qquickview.cpp
+++ b/src/quick/items/qquickview.cpp
@@ -149,7 +149,7 @@ void QQuickViewPrivate::itemGeometryChanged(QQuickItem *resizeItem, const QRectF
     size of the view.  Alternatively the resizeMode may be set to SizeRootObjectToView which
     will resize the view to the size of the root object.
 
-    \sa {Exposing C++ Data to QML}
+    \sa {qtqml-cppintegration-exposecppattributes.html}{Exposing Attributes of C++ Types to QML}
 */
 
 
@@ -348,7 +348,7 @@ QList<QQmlError> QQuickView::errors() const
     is the initial size of the root item. Note though that
     since QML may load dynamically, that size may change.
 
-    \sa initialSize
+    \sa initialSize()
 */
 
 void QQuickView::setResizeMode(ResizeMode mode)
diff --git a/src/quick/items/qquickvisualdatamodel.cpp b/src/quick/items/qquickvisualdatamodel.cpp
index 832476e..2f7e162 100644
--- a/src/quick/items/qquickvisualdatamodel.cpp
+++ b/src/quick/items/qquickvisualdatamodel.cpp
@@ -292,7 +292,7 @@ void QQuickVisualDataModel::componentComplete()
     Models can also be created directly in QML, using a \l{ListModel} or
     \l{XmlListModel}.
 
-    \sa {qmlmodels}{Data Models}
+    \sa {qml-data-models}{Data Models}
 */
 QVariant QQuickVisualDataModel::model() const
 {
@@ -326,7 +326,7 @@ void QQuickVisualDataModel::setModel(const QVariant &model)
 
     The delegate provides a template defining each item instantiated by a view.
     The index is exposed as an accessible \c index property.  Properties of the
-    model are also available depending upon the type of \l {qmlmodels}{Data Model}.
+    model are also available depending upon the type of \l {qml-data-models}{Data Model}.
 */
 QQmlComponent *QQuickVisualDataModel::delegate() const
 {
diff --git a/src/quick/items/qquickwindow.cpp b/src/quick/items/qquickwindow.cpp
index 0a803c5..3e1de8b 100644
--- a/src/quick/items/qquickwindow.cpp
+++ b/src/quick/items/qquickwindow.cpp
@@ -926,7 +926,7 @@ QQuickWindow::~QQuickWindow()
     functions can be used to prevent this from happening, if handling the cleanup is
     not feasible in the application, at the cost of higher memory usage.
 
-    \sa sceneGraphInvalidated(), setPersistentOpenGLContext(), setPersistentSceneGraph().
+    \sa sceneGraphInvalidated(), setPersistentOpenGLContext(), setPersistentSceneGraph()
  */
 
 void QQuickWindow::releaseResources()
@@ -2495,7 +2495,7 @@ QImage QQuickWindow::grabWindow()
 /*!
     Returns an incubation controller that splices incubation between frames
     for this window. QQuickView automatically installs this controller for you,
-    otherwise you will need to install it yourself using \l{QQmlEngine::setIncubationController}
+    otherwise you will need to install it yourself using \l{QQmlEngine::setIncubationController()}.
 
     The controller is owned by the window and will be destroyed when the window
     is deleted.
diff --git a/src/quick/scenegraph/coreapi/qsggeometry.cpp b/src/quick/scenegraph/coreapi/qsggeometry.cpp
index 49f64d5..54c5100 100644
--- a/src/quick/scenegraph/coreapi/qsggeometry.cpp
+++ b/src/quick/scenegraph/coreapi/qsggeometry.cpp
@@ -201,7 +201,7 @@ const QSGGeometry::AttributeSet &QSGGeometry::defaultAttributes_ColoredPoint2D()
     \class QSGGeometry
 
     \brief The QSGGeometry class provides low-level
-    storage for graphics primitives in the \l{QML Scene Graph}.
+    storage for graphics primitives in the \l{Qt Quick Scene Graph}.
 
     \inmodule QtQuick
 
diff --git a/src/quick/util/qquickanimation.cpp b/src/quick/util/qquickanimation.cpp
index 10996d8..6ed2b01 100644
--- a/src/quick/util/qquickanimation.cpp
+++ b/src/quick/util/qquickanimation.cpp
@@ -663,7 +663,7 @@ void QQuickAbstractAnimationPrivate::animationFinished(QAbstractAnimationJob*)
     }
     \endcode
 
-    \sa {QML Animation and Transitions}, {qml/animation/basics}{Animation basics example}
+    \sa {Animation and Transitions in Qt Quick}, {qml/animation/basics}{Animation basics example}
 */
 QQuickPauseAnimation::QQuickPauseAnimation(QObject *parent)
 : QQuickAbstractAnimation(*(new QQuickPauseAnimationPrivate), parent)
@@ -733,7 +733,7 @@ QAbstractAnimationJob* QQuickPauseAnimation::transition(QQuickStateActions &acti
 
     Like any other animation type, a ColorAnimation can be applied in a
     number of ways, including transitions, behaviors and property value
-    sources. The \l {QML Animation and Transitions} documentation shows a
+    sources. The \l {Animation and Transitions in Qt Quick} documentation shows a
     variety of methods for creating animations.
 
     For convenience, when a ColorAnimation is used in a \l Transition, it will
@@ -742,7 +742,7 @@ QAbstractAnimationJob* QQuickPauseAnimation::transition(QQuickStateActions &acti
     \l{PropertyAnimation::}{properties} are explicitly set for the animation,
     then those are used instead.
 
-    \sa {QML Animation and Transitions}, {qml/animation/basics}{Animation basics example}
+    \sa {Animation and Transitions in Qt Quick}, {qml/animation/basics}{Animation basics example}
 */
 QQuickColorAnimation::QQuickColorAnimation(QObject *parent)
 : QQuickPropertyAnimation(parent)
@@ -781,7 +781,7 @@ QQuickColorAnimation::~QQuickColorAnimation()
     \l Transition, or the current value of the property at the moment the
     \l Behavior is triggered.
 
-    \sa {QML Animation and Transitions}
+    \sa {Animation and Transitions in Qt Quick}
 */
 QColor QQuickColorAnimation::from() const
 {
@@ -804,7 +804,7 @@ void QQuickColorAnimation::setFrom(const QColor &f)
     \l Transition, or the value of the property change that triggered the
     \l Behavior.
 
-    \sa {QML Animation and Transitions}
+    \sa {Animation and Transitions in Qt Quick}
 */
 QColor QQuickColorAnimation::to() const
 {
@@ -1025,7 +1025,7 @@ QAbstractAnimationJob* QQuickScriptAction::transition(QQuickStateActions &action
     PropertyAction object) so that the rotation animation begins with the
     correct transform origin.
 
-    \sa {QML Animation and Transitions}, QtQml
+    \sa {Animation and Transitions in Qt Quick}, QtQml
 */
 QQuickPropertyAction::QQuickPropertyAction(QObject *parent)
 : QQuickAbstractAnimation(*(new QQuickPropertyActionPrivate), parent)
@@ -1258,14 +1258,14 @@ QAbstractAnimationJob* QQuickPropertyAction::transition(QQuickStateActions &acti
 
     Like any other animation type, a NumberAnimation can be applied in a
     number of ways, including transitions, behaviors and property value
-    sources. The \l {QML Animation and Transitions} documentation shows a
+    sources. The \l {Animation and Transitions in Qt Quick} documentation shows a
     variety of methods for creating animations.
 
     Note that NumberAnimation may not animate smoothly if there are irregular
     changes in the number value that it is tracking. If this is the case, use
     SmoothedAnimation instead.
 
-    \sa {QML Animation and Transitions}, {qml/animation/basics}{Animation basics example}
+    \sa {Animation and Transitions in Qt Quick}, {qml/animation/basics}{Animation basics example}
 */
 QQuickNumberAnimation::QQuickNumberAnimation(QObject *parent)
 : QQuickPropertyAnimation(parent)
@@ -1314,7 +1314,7 @@ void QQuickNumberAnimation::init()
     \l Transition, or the current value of the property at the moment the
     \l Behavior is triggered.
 
-    \sa {QML Animation and Transitions}
+    \sa {Animation and Transitions in Qt Quick}
 */
 
 qreal QQuickNumberAnimation::from() const
@@ -1337,7 +1337,7 @@ void QQuickNumberAnimation::setFrom(qreal f)
     \l Transition, or the value of the property change that triggered the
     \l Behavior.
 
-    \sa {QML Animation and Transitions}
+    \sa {Animation and Transitions in Qt Quick}
 */
 qreal QQuickNumberAnimation::to() const
 {
@@ -1365,10 +1365,10 @@ void QQuickNumberAnimation::setTo(qreal t)
 
     Like any other animation type, a Vector3dAnimation can be applied in a
     number of ways, including transitions, behaviors and property value
-    sources. The \l {QML Animation and Transitions} documentation shows a
+    sources. The \l {Animation and Transitions in Qt Quick} documentation shows a
     variety of methods for creating animations.
 
-    \sa {QML Animation and Transitions}, {qml/animation/basics}{Animation basics example}
+    \sa {Animation and Transitions in Qt Quick}, {qml/animation/basics}{Animation basics example}
 */
 QQuickVector3dAnimation::QQuickVector3dAnimation(QObject *parent)
 : QQuickPropertyAnimation(parent)
@@ -1392,7 +1392,7 @@ QQuickVector3dAnimation::~QQuickVector3dAnimation()
     \l Transition, or the current value of the property at the moment the
     \l Behavior is triggered.
 
-    \sa {QML Animation and Transitions}
+    \sa {Animation and Transitions in Qt Quick}
 */
 QVector3D QQuickVector3dAnimation::from() const
 {
@@ -1414,7 +1414,7 @@ void QQuickVector3dAnimation::setFrom(QVector3D f)
     \l Transition, or the value of the property change that triggered the
     \l Behavior.
 
-    \sa {QML Animation and Transitions}
+    \sa {Animation and Transitions in Qt Quick}
 */
 QVector3D QQuickVector3dAnimation::to() const
 {
@@ -1465,10 +1465,10 @@ void QQuickVector3dAnimation::setTo(QVector3D t)
 
     Like any other animation type, a RotationAnimation can be applied in a
     number of ways, including transitions, behaviors and property value
-    sources. The \l {QML Animation and Transitions} documentation shows a
+    sources. The \l {Animation and Transitions in Qt Quick} documentation shows a
     variety of methods for creating animations.
 
-    \sa {QML Animation and Transitions}, {qml/animation/basics}{Animation basics example}
+    \sa {Animation and Transitions in Qt Quick}, {qml/animation/basics}{Animation basics example}
 */
 QVariant _q_interpolateShortestRotation(qreal &f, qreal &t, qreal progress)
 {
@@ -1544,7 +1544,7 @@ QQuickRotationAnimation::~QQuickRotationAnimation()
     \l Transition, or the current value of the property at the moment the
     \l Behavior is triggered.
 
-    \sa {QML Animation and Transitions}
+    \sa {Animation and Transitions in Qt Quick}
 */
 qreal QQuickRotationAnimation::from() const
 {
@@ -1566,7 +1566,7 @@ void QQuickRotationAnimation::setFrom(qreal f)
     \l Transition, or the value of the property change that triggered the
     \l Behavior.
 
-    \sa {QML Animation and Transitions}
+    \sa {Animation and Transitions in Qt Quick}
 */
 qreal QQuickRotationAnimation::to() const
 {
@@ -1694,14 +1694,14 @@ QQmlListProperty<QQuickAbstractAnimation> QQuickAnimationGroup::animations()
 
     Like any other animation type, a SequentialAnimation can be applied in a
     number of ways, including transitions, behaviors and property value
-    sources. The \l {QML Animation and Transitions} documentation shows a
+    sources. The \l {Animation and Transitions in Qt Quick} documentation shows a
     variety of methods for creating animations.
 
     \note Once an animation has been grouped into a SequentialAnimation or
     ParallelAnimation, it cannot be individually started and stopped; the
     SequentialAnimation or ParallelAnimation must be started and stopped as a group.
 
-    \sa ParallelAnimation, {QML Animation and Transitions}, {qml/animation/basics}{Animation basics example}
+    \sa ParallelAnimation, {Animation and Transitions in Qt Quick}, {qml/animation/basics}{Animation basics example}
 */
 
 QQuickSequentialAnimation::QQuickSequentialAnimation(QObject *parent) :
@@ -1764,14 +1764,14 @@ QAbstractAnimationJob* QQuickSequentialAnimation::transition(QQuickStateActions
 
     Like any other animation type, a ParallelAnimation can be applied in a
     number of ways, including transitions, behaviors and property value
-    sources. The \l {QML Animation and Transitions} documentation shows a
+    sources. The \l {Animation and Transitions in Qt Quick} documentation shows a
     variety of methods for creating animations.
 
     \note Once an animation has been grouped into a SequentialAnimation or
     ParallelAnimation, it cannot be individually started and stopped; the
     SequentialAnimation or ParallelAnimation must be started and stopped as a group.
 
-    \sa SequentialAnimation, {QML Animation and Transitions}, {qml/animation/basics}{Animation basics example}
+    \sa SequentialAnimation, {Animation and Transitions in Qt Quick}, {qml/animation/basics}{Animation basics example}
 */
 QQuickParallelAnimation::QQuickParallelAnimation(QObject *parent) :
     QQuickAnimationGroup(parent)
@@ -1926,12 +1926,12 @@ void QQuickBulkValueAnimator::topLevelAnimationLoopChanged()
 
     Depending on how the animation is used, the set of properties normally used will be
     different. For more information see the individual property documentation, as well
-    as the \l{QML Animation and Transitions} introduction.
+    as the \l{Animation and Transitions in Qt Quick} introduction.
 
     Note that PropertyAnimation inherits the abstract \l Animation type.
     This includes additional properties and methods for controlling the animation.
 
-    \sa {QML Animation and Transitions}, {qml/animation/basics}{Animation basics example}
+    \sa {Animation and Transitions in Qt Quick}, {qml/animation/basics}{Animation basics example}
 */
 
 QQuickPropertyAnimation::QQuickPropertyAnimation(QObject *parent)
@@ -1983,7 +1983,7 @@ void QQuickPropertyAnimation::setDuration(int duration)
     \l Transition, or the current value of the property at the moment the
     \l Behavior is triggered.
 
-    \sa {QML Animation and Transitions}
+    \sa {Animation and Transitions in Qt Quick}
 */
 QVariant QQuickPropertyAnimation::from() const
 {
@@ -2010,7 +2010,7 @@ void QQuickPropertyAnimation::setFrom(const QVariant &f)
     \l Transition, or the value of the property change that triggered the
     \l Behavior.
 
-    \sa {QML Animation and Transitions}
+    \sa {Animation and Transitions in Qt Quick}
 */
 QVariant QQuickPropertyAnimation::to() const
 {
@@ -2386,7 +2386,7 @@ void QQuickPropertyAnimation::setProperties(const QString &prop)
 
     As seen in the above example, properties is specified as a comma-separated string of property names to animate.
 
-    \sa exclude, {QML Animation and Transitions}
+    \sa exclude, {Animation and Transitions in Qt Quick}
 */
 QQmlListProperty<QObject> QQuickPropertyAnimation::targets()
 {
diff --git a/src/quick/util/qquickanimationcontroller.cpp b/src/quick/util/qquickanimationcontroller.cpp
index 7a0eba8..4378460 100644
--- a/src/quick/util/qquickanimationcontroller.cpp
+++ b/src/quick/util/qquickanimationcontroller.cpp
@@ -243,7 +243,7 @@ void QQuickAnimationController::componentFinalized()
 
     The animation controller's progress value will be automatically updated while the animation is running.
 
-    \sa completeToEnd(), progress()
+    \sa completeToEnd(), progress
 */
 void QQuickAnimationController::completeToBeginning()
 {
@@ -272,7 +272,7 @@ void QQuickAnimationController::completeToBeginning()
 
     The animation controller's progress value will be automatically updated while the animation is running.
 
-    \sa completeToBeginning(), progress()
+    \sa completeToBeginning(), progress
 */
 void QQuickAnimationController::completeToEnd()
 {
diff --git a/src/quick/util/qquickbehavior.cpp b/src/quick/util/qquickbehavior.cpp
index 77ea796..a58dbba 100644
--- a/src/quick/util/qquickbehavior.cpp
+++ b/src/quick/util/qquickbehavior.cpp
@@ -93,12 +93,12 @@ public:
     multiple animations within a Behavior, use ParallelAnimation or
     SequentialAnimation.
 
-    If a \l{States}{state change} has a \l Transition that matches the same property as a
+    If a \l{Qt Quick States}{state change} has a \l Transition that matches the same property as a
     Behavior, the \l Transition animation overrides the Behavior for that
     state change. For general advice on using Behaviors to animate state changes, see
-    \l{Using QML Behaviors with States}.
+    \l{Using Qt Quick Behaviors with States}.
 
-    \sa {QML Animation and Transitions}, {declarative/animation/behaviors}{Behavior example}, QtQml
+    \sa {Animation and Transitions in Qt Quick}, {declarative/animation/behaviors}{Behavior example}, QtQml
 */
 
 
diff --git a/src/quick/util/qquickpath.cpp b/src/quick/util/qquickpath.cpp
index a38e12d..c942959 100644
--- a/src/quick/util/qquickpath.cpp
+++ b/src/quick/util/qquickpath.cpp
@@ -814,7 +814,7 @@ bool QQuickCurve::hasRelativeY()
     The PathAttribute object allows attributes consisting of a name and
     a value to be specified for various points along a path.  The
     attributes are exposed to the delegate as
-    \l{qdeclarativeintroduction.html#attached-properties} {Attached Properties}.
+    \l{Attached Properties and Attached Signal Handlers} {Attached Properties}.
     The value of an attribute at any particular point along the path is interpolated
     from the PathAttributes bounding that point.
 
@@ -845,7 +845,7 @@ bool QQuickCurve::hasRelativeY()
 
     Note that using an existing Item property name such as "opacity" as an
     attribute is allowed.  This is because path attributes add a new
-    \l{qdeclarativeintroduction.html#attached-properties} {Attached Property}
+    \l{Attached Properties and Attached Signal Handlers} {Attached Property}
     which in no way clashes with existing properties.
 */
 
@@ -886,7 +886,7 @@ void QQuickPathAttribute::setName(const QString &name)
    \endqml
 
    In our delegate, we can then bind the \e rotation property to the
-   \l{qdeclarativeintroduction.html#attached-properties} {Attached Property}
+   \l{Attached Properties and Attached Signal Handlers} {Attached Property}
    \e PathView.itemRotation created for this attribute.
 
    \qml
diff --git a/src/quick/util/qquickpropertychanges.cpp b/src/quick/util/qquickpropertychanges.cpp
index 6bd48e2..48c00f1 100644
--- a/src/quick/util/qquickpropertychanges.cpp
+++ b/src/quick/util/qquickpropertychanges.cpp
@@ -72,7 +72,7 @@ QT_BEGIN_NAMESPACE
 
     PropertyChanges is used to define the property values or bindings in a
     \l State. This enables an item's property values to be changed when it
-    \l {States}{changes between states}.
+    \l {Qt Quick States}{changes between states}.
 
     To create a PropertyChanges object, specify the \l target item whose
     properties are to be modified, and define the new property values or
@@ -119,7 +119,7 @@ QT_BEGIN_NAMESPACE
 
     \section2 Immediate property changes in transitions
 
-    When \l{QML Animation and Transitions}{Transitions} are used to animate
+    When \l{Animation and Transitions in Qt Quick}{Transitions} are used to animate
     state changes, they animate properties from their values in the current
     state to those defined in the new state (as defined by PropertyChanges
     objects). However, it is sometimes desirable to set a property value
@@ -129,7 +129,7 @@ QT_BEGIN_NAMESPACE
 
     See the PropertyAction documentation for more details.
 
-    \sa {declarative/animation/states}{states example}, {qmlstate}{States}, QtQml
+    \sa {declarative/animation/states}{states example}, {Qt Quick States}{Qt Quick States}, QtQml
 */
 
 /*!
diff --git a/src/quick/util/qquicksmoothedanimation.cpp b/src/quick/util/qquicksmoothedanimation.cpp
index 9684cf6..cf7ec9a 100644
--- a/src/quick/util/qquicksmoothedanimation.cpp
+++ b/src/quick/util/qquicksmoothedanimation.cpp
@@ -348,10 +348,10 @@ void QSmoothedAnimation::init()
 
     Like any other animation type, a SmoothedAnimation can be applied in a
     number of ways, including transitions, behaviors and property value
-    sources. The \l {QML Animation and Transitions} documentation shows a
+    sources. The \l {Animation and Transitions in Qt Quick} documentation shows a
     variety of methods for creating animations.
 
-    \sa SpringAnimation, NumberAnimation, {QML Animation and Transitions}, {declarative/animation/basics}{Animation basics example}
+    \sa SpringAnimation, NumberAnimation, {Animation and Transitions in Qt Quick}, {declarative/animation/basics}{Animation basics example}
 */
 
 QQuickSmoothedAnimation::QQuickSmoothedAnimation(QObject *parent)
diff --git a/src/quick/util/qquickspringanimation.cpp b/src/quick/util/qquickspringanimation.cpp
index e5780f6..97d003b 100644
--- a/src/quick/util/qquickspringanimation.cpp
+++ b/src/quick/util/qquickspringanimation.cpp
@@ -362,10 +362,10 @@ void QQuickSpringAnimationPrivate::updateMode()
 
     Like any other animation type, a SpringAnimation can be applied in a
     number of ways, including transitions, behaviors and property value
-    sources. The \l {QML Animation and Transitions} documentation shows a
+    sources. The \l {Animation and Transitions in Qt Quick} documentation shows a
     variety of methods for creating animations.
 
-    \sa SmoothedAnimation, {QML Animation and Transitions}, {declarative/animation/basics}{Animation basics example}, {declarative/toys/clocks}{Clocks example}
+    \sa SmoothedAnimation, {Animation and Transitions in Qt Quick}, {declarative/animation/basics}{Animation basics example}, {declarative/toys/clocks}{Clocks example}
 */
 
 QQuickSpringAnimation::QQuickSpringAnimation(QObject *parent)
diff --git a/src/quick/util/qquickstate.cpp b/src/quick/util/qquickstate.cpp
index 99f9819..02d5a23 100644
--- a/src/quick/util/qquickstate.cpp
+++ b/src/quick/util/qquickstate.cpp
@@ -144,14 +144,14 @@ QQuickStateOperation::QQuickStateOperation(QObjectPrivate &dd, QObject *parent)
 
     Notice the default state is referred to using an empty string ("").
 
-    States are commonly used together with \l{QML Animation and Transitions}{Transitions} to provide
+    States are commonly used together with \l{Animation and Transitions in Qt Quick}{Transitions} to provide
     animations when state changes occur.
 
     \note Setting the state of an object from within another state of the same object is
     not allowed.
 
-    \sa {declarative/animation/states}{states example}, {qmlstates}{States},
-    {QML Animation and Transitions}{Transitions}, QtQml
+    \sa {declarative/animation/states}{states example}, {Qt Quick States}{Qt Quick States},
+    {Animation and Transitions in Qt Quick}{Transitions}, QtQml
 */
 QQuickState::QQuickState(QObject *parent)
 : QObject(*(new QQuickStatePrivate), parent)
diff --git a/src/quick/util/qquickstategroup.cpp b/src/quick/util/qquickstategroup.cpp
index 23a7348..9ffd0de 100644
--- a/src/quick/util/qquickstategroup.cpp
+++ b/src/quick/util/qquickstategroup.cpp
@@ -119,7 +119,7 @@ public:
    }
    \endqml
 
-   \sa {qmlstate}{States}, {QML Animation and Transitions}{Transitions}, {QtQml}
+   \sa {Qt Quick States}{Qt Quick States}, {Animation and Transitions in Qt Quick}{Transitions}, {QtQml}
 */
 
 QQuickStateGroup::QQuickStateGroup(QObject *parent)
@@ -158,7 +158,7 @@ QList<QQuickState *> QQuickStateGroup::states() const
   }
   \endqml
 
-  \sa {qmlstate}{States}
+  \sa {Qt Quick States}{Qt Quick States}
 */
 QQmlListProperty<QQuickState> QQuickStateGroup::statesProperty()
 {
@@ -219,7 +219,7 @@ void QQuickStateGroupPrivate::clear_states(QQmlListProperty<QQuickState> *list)
   }
   \endqml
 
-  \sa {QML Animation and Transitions}{Transitions}
+  \sa {Animation and Transitions in Qt Quick}{Transitions}
 */
 QQmlListProperty<QQuickTransition> QQuickStateGroup::transitionsProperty()
 {
@@ -276,7 +276,7 @@ void QQuickStateGroupPrivate::clear_transitions(QQmlListProperty<QQuickTransitio
   set), \c state will be a blank string. Likewise, you can return a
   state group to its base state by setting its current state to \c ''.
 
-  \sa {qmlstates}{States}
+  \sa {Qt Quick States}{Qt Quick States}
 */
 QString QQuickStateGroup::state() const
 {
diff --git a/src/quick/util/qquicktransition.cpp b/src/quick/util/qquicktransition.cpp
index 1548c07..311ff51 100644
--- a/src/quick/util/qquicktransition.cpp
+++ b/src/quick/util/qquicktransition.cpp
@@ -94,7 +94,7 @@ QT_BEGIN_NAMESPACE
     \l Behavior, the Transition animation overrides the \l Behavior for that
     state change.
 
-    \sa {QML Animation and Transitions}, {declarative/animation/states}{states example}, {qmlstates}{States}, {QtQml}
+    \sa {Animation and Transitions in Qt Quick}, {declarative/animation/states}{states example}, {Qt Quick States}{Qt Quick States}, {QtQml}
 */
 
 //ParallelAnimationWrapper allows us to do a "callback" when the animation finishes, rather than connecting