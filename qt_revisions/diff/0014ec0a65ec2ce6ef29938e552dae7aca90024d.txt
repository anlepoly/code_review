diff --git a/src/declarative/graphicsitems/qdeclarativeitem.h b/src/declarative/graphicsitems/qdeclarativeitem.h
index b2ac42a..519e08a 100644
--- a/src/declarative/graphicsitems/qdeclarativeitem.h
+++ b/src/declarative/graphicsitems/qdeclarativeitem.h
@@ -227,7 +227,9 @@ QML_DECLARE_TYPE(QGraphicsTransform)
 QML_DECLARE_TYPE(QGraphicsScale)
 QML_DECLARE_TYPE(QGraphicsRotation)
 QML_DECLARE_TYPE(QGraphicsWidget)
+#ifndef QT_NO_ACTION
 QML_DECLARE_TYPE(QAction)
+#endif
 
 QT_END_HEADER
 
diff --git a/src/plugins/qmltooling/qmldbg_inspector/editor/liveselectiontool.cpp b/src/plugins/qmltooling/qmldbg_inspector/editor/liveselectiontool.cpp
index 967787b..77cba9c 100644
--- a/src/plugins/qmltooling/qmldbg_inspector/editor/liveselectiontool.cpp
+++ b/src/plugins/qmltooling/qmldbg_inspector/editor/liveselectiontool.cpp
@@ -128,11 +128,14 @@ void LiveSelectionTool::mousePressEvent(QMouseEvent *event)
             m_singleSelectionManipulator.begin(event->pos());
             m_singleSelectionManipulator.select(selectionType, m_selectOnlyContentItems);
         }
+#ifndef QT_NO_CONTEXTMENU
     } else if (event->buttons() & Qt::RightButton) {
         createContextMenu(itemList, event->globalPos());
+#endif
     }
 }
 
+#ifndef QT_NO_CONTEXTMENU
 void LiveSelectionTool::createContextMenu(const QList<QGraphicsItem*> &itemList, QPoint globalPos)
 {
     QMenu contextMenu;
@@ -200,6 +203,8 @@ void LiveSelectionTool::contextMenuElementHovered(QAction *action)
     }
 }
 
+#endif // QT_NO_CONTEXTMENU
+
 void LiveSelectionTool::mouseMoveEvent(QMouseEvent *event)
 {
     if (m_singleSelectionManipulator.isActive()) {
diff --git a/src/plugins/qmltooling/qmldbg_inspector/editor/liveselectiontool.h b/src/plugins/qmltooling/qmldbg_inspector/editor/liveselectiontool.h
index f6046d4..c3fcaa5 100644
--- a/src/plugins/qmltooling/qmldbg_inspector/editor/liveselectiontool.h
+++ b/src/plugins/qmltooling/qmldbg_inspector/editor/liveselectiontool.h
@@ -93,12 +93,16 @@ public:
     void setRubberbandSelectionMode(bool value);
 
 private slots:
+#ifndef QT_NO_CONTEXTMENU
     void contextMenuElementSelected();
     void contextMenuElementHovered(QAction *action);
+#endif
     void repaintBoundingRects();
 
 private:
+#ifndef QT_NO_CONTEXTMENU
     void createContextMenu(const QList<QGraphicsItem*> &itemList, QPoint globalPos);
+#endif
     LiveSingleSelectionManipulator::SelectionType getSelectionType(Qt::KeyboardModifiers modifiers);
     bool alreadySelected(const QList<QGraphicsItem*> &itemList) const;
 
@@ -113,7 +117,9 @@ private:
 
     QList<QWeakPointer<QGraphicsObject> > m_selectedItemList;
 
+#ifndef QT_NO_CONTEXTMENU
     QList<QGraphicsItem*> m_contextMenuItemList;
+#endif
 };
 
 } // namespace QtQuick1
diff --git a/src/plugins/qmltooling/qmldbg_inspector/editor/zoomtool.cpp b/src/plugins/qmltooling/qmldbg_inspector/editor/zoomtool.cpp
index 77521a3..e882b6d 100644
--- a/src/plugins/qmltooling/qmldbg_inspector/editor/zoomtool.cpp
+++ b/src/plugins/qmltooling/qmldbg_inspector/editor/zoomtool.cpp
@@ -61,21 +61,23 @@ ZoomTool::ZoomTool(QDeclarativeViewInspector *view) :
     m_smoothZoomMultiplier(0.05f),
     m_currentScale(1.0f)
 {
+#ifndef QT_NO_ACTION
     m_zoomTo100Action = new QAction(tr("Zoom to &100%"), this);
     m_zoomInAction = new QAction(tr("Zoom In"), this);
     m_zoomOutAction = new QAction(tr("Zoom Out"), this);
     m_zoomInAction->setShortcut(QKeySequence(Qt::Key_Plus));
     m_zoomOutAction->setShortcut(QKeySequence(Qt::Key_Minus));
-
+#endif
 
     LiveLayerItem *layerItem = QDeclarativeViewInspectorPrivate::get(view)->manipulatorLayer;
     QGraphicsObject *layerObject = reinterpret_cast<QGraphicsObject *>(layerItem);
     m_rubberbandManipulator = new LiveRubberBandSelectionManipulator(layerObject, view);
 
-
+#ifndef QT_NO_ACTION
     connect(m_zoomTo100Action, SIGNAL(triggered()), SLOT(zoomTo100()));
     connect(m_zoomInAction, SIGNAL(triggered()), SLOT(zoomIn()));
     connect(m_zoomOutAction, SIGNAL(triggered()), SLOT(zoomOut()));
+#endif
 }
 
 ZoomTool::~ZoomTool()
@@ -90,12 +92,14 @@ void ZoomTool::mousePressEvent(QMouseEvent *event)
     QPointF scenePos = view()->mapToScene(event->pos());
 
     if (event->buttons() & Qt::RightButton) {
+#ifndef QT_NO_MENU
         QMenu contextMenu;
         contextMenu.addAction(m_zoomTo100Action);
         contextMenu.addSeparator();
         contextMenu.addAction(m_zoomInAction);
         contextMenu.addAction(m_zoomOutAction);
         contextMenu.exec(event->globalPos());
+#endif
     } else if (event->buttons() & Qt::LeftButton) {
         m_dragBeginPos = scenePos;
         m_dragStarted = false;
diff --git a/src/plugins/qmltooling/qmldbg_inspector/editor/zoomtool.h b/src/plugins/qmltooling/qmldbg_inspector/editor/zoomtool.h
index f6855c4..2fa36e8 100644
--- a/src/plugins/qmltooling/qmldbg_inspector/editor/zoomtool.h
+++ b/src/plugins/qmltooling/qmldbg_inspector/editor/zoomtool.h
@@ -94,9 +94,11 @@ private:
     bool m_dragStarted;
     QPoint m_mousePos; // in view coords
     QPointF m_dragBeginPos;
+#ifndef QT_NO_ACTION
     QAction *m_zoomTo100Action;
     QAction *m_zoomInAction;
     QAction *m_zoomOutAction;
+#endif
     LiveRubberBandSelectionManipulator *m_rubberbandManipulator;
 
     qreal m_smoothZoomMultiplier;