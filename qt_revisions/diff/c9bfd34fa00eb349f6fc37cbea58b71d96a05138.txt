diff --git a/src/corelib/arch/qatomic_armv6.h b/src/corelib/arch/qatomic_armv6.h
index 1b13f84..129c80e 100644
--- a/src/corelib/arch/qatomic_armv6.h
+++ b/src/corelib/arch/qatomic_armv6.h
@@ -74,6 +74,13 @@ QT_END_HEADER
 
 template<> struct QAtomicIntegerTraits<int> { enum { IsInteger = 1 }; };
 template<> struct QAtomicIntegerTraits<unsigned int> { enum { IsInteger = 1 }; };
+#if defined(Q_COMPILER_UNICODE_STRINGS) && !defined(Q_PROCESSOR_ARM_V6)
+// for ARMv5, ensure that char32_t (an uint_least32_t), is 32-bit
+// it's extremely unlikely it won't be on a 32-bit ARM, but just to be sure
+// For ARMv6 and up, we're sure it works, but the definition is below
+template<> struct QAtomicIntegerTraits<char32_t>
+{ enum { IsInteger = sizeof(char32_t) == sizeof(int) ? 1 : -1 }; };
+#endif
 
 template <int size> struct QBasicAtomicOps: QGenericAtomicOps<QBasicAtomicOps<size> >
 {
@@ -226,6 +233,11 @@ template<> struct QAtomicIntegerTraits<unsigned long> { enum { IsInteger = 1 };
 template<> struct QAtomicIntegerTraits<long long> { enum { IsInteger = 1 }; };
 template<> struct QAtomicIntegerTraits<unsigned long long> { enum { IsInteger = 1 }; };
 
+# ifdef Q_COMPILER_UNICODE_STRINGS
+template<> struct QAtomicIntegerTraits<char16_t> { enum { IsInteger = 1 }; };
+template<> struct QAtomicIntegerTraits<char32_t> { enum { IsInteger = 1 }; };
+# endif
+
 #define Q_ATOMIC_INT8_IS_SUPPORTED
 #define Q_ATOMIC_INT8_REFERENCE_COUNTING_IS_ALWAYS_NATIVE
 #define Q_ATOMIC_INT8_TEST_AND_SET_IS_ALWAYS_NATIVE
diff --git a/src/corelib/arch/qatomic_cxx11.h b/src/corelib/arch/qatomic_cxx11.h
index 46b94e4..83160af 100644
--- a/src/corelib/arch/qatomic_cxx11.h
+++ b/src/corelib/arch/qatomic_cxx11.h
@@ -84,6 +84,11 @@ template<> struct QAtomicIntegerTraits<unsigned long> { enum { IsInteger = 1 };
 template<> struct QAtomicIntegerTraits<long long> { enum { IsInteger = 1 }; };
 template<> struct QAtomicIntegerTraits<unsigned long long> { enum { IsInteger = 1 }; };
 
+# ifdef Q_COMPILER_UNICODE_STRINGS
+template<> struct QAtomicIntegerTraits<char16_t> { enum { IsInteger = 1 }; };
+template<> struct QAtomicIntegerTraits<char32_t> { enum { IsInteger = 1 }; };
+# endif
+
 #define Q_ATOMIC_INT8_IS_SUPPORTED
 #define Q_ATOMIC_INT8_REFERENCE_COUNTING_IS_ALWAYS_NATIVE
 #define Q_ATOMIC_INT8_TEST_AND_SET_IS_ALWAYS_NATIVE
diff --git a/src/corelib/arch/qatomic_gcc.h b/src/corelib/arch/qatomic_gcc.h
index 2ceb038..cb38dc8 100644
--- a/src/corelib/arch/qatomic_gcc.h
+++ b/src/corelib/arch/qatomic_gcc.h
@@ -57,6 +57,9 @@ QT_END_HEADER
 
 template<> struct QAtomicIntegerTraits<int> { enum { IsInteger = 1 }; };
 template<> struct QAtomicIntegerTraits<unsigned int> { enum { IsInteger = 1 }; };
+#ifdef Q_COMPILER_UNICODE_STRINGS
+template<> struct QAtomicIntegerTraits<char32_t> { enum { IsInteger = 1 }; };
+#endif
 
 #define Q_ATOMIC_INT_REFERENCE_COUNTING_IS_SOMETIMES_NATIVE
 #define Q_ATOMIC_INT_TEST_AND_SET_IS_SOMETIMES_NATIVE
diff --git a/src/corelib/arch/qatomic_ia64.h b/src/corelib/arch/qatomic_ia64.h
index c638710..7f22bac 100644
--- a/src/corelib/arch/qatomic_ia64.h
+++ b/src/corelib/arch/qatomic_ia64.h
@@ -138,6 +138,11 @@ template<> struct QAtomicIntegerTraits<unsigned long> { enum { IsInteger = 1 };
 template<> struct QAtomicIntegerTraits<long long> { enum { IsInteger = 1 }; };
 template<> struct QAtomicIntegerTraits<unsigned long long> { enum { IsInteger = 1 }; };
 
+# ifdef Q_COMPILER_UNICODE_STRINGS
+template<> struct QAtomicIntegerTraits<char16_t> { enum { IsInteger = 1 }; };
+template<> struct QAtomicIntegerTraits<char32_t> { enum { IsInteger = 1 }; };
+# endif
+
 template <int size> struct QBasicAtomicOps: QGenericAtomicOps<QBasicAtomicOps<size> >
 {
     template <typename T>
diff --git a/src/corelib/arch/qatomic_mips.h b/src/corelib/arch/qatomic_mips.h
index e662b9a..718121c 100644
--- a/src/corelib/arch/qatomic_mips.h
+++ b/src/corelib/arch/qatomic_mips.h
@@ -74,6 +74,13 @@ QT_END_HEADER
 
 template<> struct QAtomicIntegerTraits<int> { enum { IsInteger = 1 }; };
 template<> struct QAtomicIntegerTraits<unsigned int> { enum { IsInteger = 1 }; };
+#if defined(Q_COMPILER_UNICODE_STRINGS) && !defined(Q_PROCESSOR_MIPS_64)
+// for MIPS32, ensure that char32_t (an uint_least32_t), is 32-bit
+// it's extremely unlikely it won't be on a 32-bit MIPS, but just to be sure
+// For MIPS64, we're sure it works, but the definition is below
+template<> struct QAtomicIntegerTraits<char32_t>
+{ enum { IsInteger = sizeof(char32_t) == sizeof(int) ? 1 : -1 }; };
+#endif
 
 template <int size> struct QBasicAtomicOps: QGenericAtomicOps<QBasicAtomicOps<size> >
 {
@@ -241,6 +248,12 @@ T QBasicAtomicOps<4>::fetchAndAddRelaxed(T &_q_value, typename QAtomicAdditiveTy
 template<> struct QAtomicIntegerTraits<long long> { enum { IsInteger = 1 }; };
 template<> struct QAtomicIntegerTraits<unsigned long long > { enum { IsInteger = 1 }; };
 
+#ifdef Q_COMPILER_UNICODE_STRINGS
+template<> struct QAtomicIntegerTraits<char16_t>
+{ enum { IsInteger = sizeof(char16_t) == sizeof(int) ? 1 : -1 }; };
+template<> struct QAtomicIntegerTraits<char32_t> { enum { IsInteger = 1 }; };
+#endif
+
 template<> template<typename T> inline
 bool QBasicAtomicOps<8>::ref(T &_q_value) Q_DECL_NOTHROW
 {
diff --git a/src/corelib/arch/qatomic_msvc.h b/src/corelib/arch/qatomic_msvc.h
index f5801a2..41c526b 100644
--- a/src/corelib/arch/qatomic_msvc.h
+++ b/src/corelib/arch/qatomic_msvc.h
@@ -266,6 +266,9 @@ template<> struct QAtomicIntegerTraits<int> { enum { IsInteger = 1 }; };
 template<> struct QAtomicIntegerTraits<unsigned int> { enum { IsInteger = 1 }; };
 template<> struct QAtomicIntegerTraits<long> { enum { IsInteger = 1 }; };
 template<> struct QAtomicIntegerTraits<unsigned long> { enum { IsInteger = 1 }; };
+#ifdef Q_COMPILER_UNICODE_STRINGS
+template<> struct QAtomicIntegerTraits<char32_t> { enum { IsInteger = 1 }; };
+#endif
 
 // No definition, needs specialization
 template <int N> struct QAtomicOpsBySize;
diff --git a/src/corelib/arch/qatomic_x86.h b/src/corelib/arch/qatomic_x86.h
index 094bf1e..8fb83cd 100644
--- a/src/corelib/arch/qatomic_x86.h
+++ b/src/corelib/arch/qatomic_x86.h
@@ -133,6 +133,12 @@ template<> struct QAtomicIntegerTraits<unsigned long> { enum { IsInteger = 1 };
 template<> struct QAtomicIntegerTraits<long long> { enum { IsInteger = 1 }; };
 template<> struct QAtomicIntegerTraits<unsigned long long> { enum { IsInteger = 1 }; };
 
+# ifdef Q_COMPILER_UNICODE_STRINGS
+template<> struct QAtomicIntegerTraits<char16_t> { enum { IsInteger = 1 }; };
+template<> struct QAtomicIntegerTraits<char32_t> { enum { IsInteger = 1 }; };
+# endif
+
+
 /*
  * Guide for the inline assembly below:
  *
diff --git a/tests/auto/corelib/thread/qatomicint/tst_qatomicint.cpp b/tests/auto/corelib/thread/qatomicint/tst_qatomicint.cpp
index 1283083..fbabb11 100644
--- a/tests/auto/corelib/thread/qatomicint/tst_qatomicint.cpp
+++ b/tests/auto/corelib/thread/qatomicint/tst_qatomicint.cpp
@@ -190,6 +190,10 @@ void tst_QAtomicInt::warningFreeHelper()
     warningFreeHelperTemplate<unsigned int, QBasicAtomicInteger<unsigned int> >();
     constexprFunctionsHelperTemplate<QBasicAtomicInteger<int> >();
     constexprFunctionsHelperTemplate<QBasicAtomicInteger<unsigned int> >();
+# ifdef Q_COMPILER_UNICODE_STRINGS
+    warningFreeHelperTemplate<qint16, QBasicAtomicInteger<char32_t> >();
+    constexprFunctionsHelperTemplate<QBasicAtomicInteger<char32_t> >();
+# endif
 #endif
 
 #ifdef Q_ATOMIC_INT16_IS_SUPPORTED
@@ -197,6 +201,10 @@ void tst_QAtomicInt::warningFreeHelper()
     warningFreeHelperTemplate<quint16, QBasicAtomicInteger<quint16> >();
     constexprFunctionsHelperTemplate<QBasicAtomicInteger<qint16> >();
     constexprFunctionsHelperTemplate<QBasicAtomicInteger<quint16> >();
+# ifdef Q_COMPILER_UNICODE_STRINGS
+    warningFreeHelperTemplate<qint16, QBasicAtomicInteger<char16_t> >();
+    constexprFunctionsHelperTemplate<QBasicAtomicInteger<char16_t> >();
+# endif
 #endif
 
 #ifdef Q_ATOMIC_INT8_IS_SUPPORTED