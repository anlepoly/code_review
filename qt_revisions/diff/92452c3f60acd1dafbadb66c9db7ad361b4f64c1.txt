diff --git a/src/serialport.cpp b/src/serialport.cpp
index a15fbc4..d910b88 100755
--- a/src/serialport.cpp
+++ b/src/serialport.cpp
@@ -494,7 +494,7 @@ void SerialPortPrivate::clearBuffers()
 /*! \internal
 
     Reads data from the serial port into the read buffer. Returns
-    true on success; otherwise false. This operation takes place
+    true on success; otherwise returns false. This operation takes place
     automatically when the driver (UART) in the input buffer have
     of at least one byte, i.e. by event.
 */
@@ -1063,7 +1063,7 @@ QString SerialPort::portName() const
 
 /*! \reimp
     Opens the serial port using OpenMode \a mode, returning true if
-    successful; otherwise false with saved error code which can be
+    successful; otherwise returns false with saved error code which can be
     obtained by calling error().
 
     \warning The \a mode must be QIODevice::ReadOnly, QIODevice::WriteOnly,
@@ -1158,7 +1158,7 @@ bool SerialPort::restoreSettingsOnClose() const
 
 /*!
     Sets the desired data rate \a rate for a given direction \a dir.
-    If successful, returns true; otherwise false with saved error
+    If successful, returns true; otherwise returns false with saved error
     code which can be obtained by calling error(). To set the speed
     can use enumeration SerialPort::Rate or any positive qint32 value.
 
@@ -1189,7 +1189,7 @@ qint32 SerialPort::rate(Directions dir) const
 
 /*!
     Sets the desired number of data bits \a dataBits in byte.
-    If successful, returns true; otherwise false with saved error
+    If successful, returns true; otherwise returns false with saved error
     code which can be obtained by calling error().
 
     \sa dataBits()
@@ -1213,7 +1213,7 @@ SerialPort::DataBits SerialPort::dataBits() const
 
 /*!
     Sets the desired parity \a parity checking mode.
-    If successful, returns true; otherwise false with saved error
+    If successful, returns true; otherwise returns false with saved error
     code which can be obtained by calling error().
 
     \sa parity()
@@ -1237,7 +1237,7 @@ SerialPort::Parity SerialPort::parity() const
 
 /*!
     Sets the desired number of stop bits \a stopBits in frame.
-    If successful, returns true; otherwise false with saved error
+    If successful, returns true; otherwise returns false with saved error
     code which can be obtained by calling error().
 
     \sa stopBits()
@@ -1261,7 +1261,7 @@ SerialPort::StopBits SerialPort::stopBits() const
 
 /*!
     Sets the desired number flow control mode \a flow.
-    If successful, returns true; otherwise false with saved error
+    If successful, returns true; otherwise returns false with saved error
     code which can be obtained by calling error().
 
     \sa flowControl()
@@ -1286,7 +1286,7 @@ SerialPort::FlowControl SerialPort::flowControl() const
 /*!
     Returns the current state of the line signal DTR.
     If the signal state high, the return true;
-    otherwise false;
+    otherwise returns false;
 
     \sa lines()
 */
@@ -1299,7 +1299,7 @@ bool SerialPort::dtr() const
 /*!
     Returns the current state of the line signal RTS.
     If the signal state high, the return true;
-    otherwise false;
+    otherwise returns false;
 
     \sa lines()
 */
@@ -1326,7 +1326,7 @@ SerialPort::Lines SerialPort::lines() const
 /*!
     This function writes as much as possible from the internal write
     buffer to the underlying serial port, without blocking. If any data
-    was written, this function returns true; otherwise false is returned.
+    was written, this function returns true; otherwise returns false is returned.
 
     Call this function if you need SerialPort to start sending buffered
     data immediately. The number of bytes successfully written depends on
@@ -1346,7 +1346,7 @@ bool SerialPort::flush()
 /*! \reimp
     Resets and clears all buffers of the serial port, including an
     internal class buffer and the UART (driver) buffer. If successful,
-    returns true; otherwise false.
+    returns true; otherwise returns false.
 */
 bool SerialPort::reset()
 {
@@ -1378,7 +1378,7 @@ bool SerialPort::atEnd() const
 /*!
     Sets the error policy \a policy process received character in
     the case of parity error detection. If successful, returns
-    true; otherwise false. By default is set policy IgnorePolicy.
+    true; otherwise returns false. By default is set policy IgnorePolicy.
 
     \sa dataErrorPolicy()
 */
@@ -1475,7 +1475,7 @@ void SerialPort::setReadBufferSize(qint64 size)
 }
 
 /*! \reimp
-    Always returned true. Serial port is sequential device.
+    Always returns true. Serial port is a sequential device.
 */
 bool SerialPort::isSequential() const
 {
@@ -1628,7 +1628,7 @@ bool SerialPort::waitForBytesWritten(int msecs)
 /*!
     Sets the desired state of the line signal DTR,
     depending on the flag \a set. If successful, returns true;
-    otherwise false.
+    otherwise returns false.
 
     If the flag is true then DTR signal is established in the high;
     otherwise low.
@@ -1644,7 +1644,7 @@ bool SerialPort::setDtr(bool set)
 /*!
     Sets the desired state of the line signal RTS,
     depending on the flag \a set. If successful, returns true;
-    otherwise false.
+    otherwise returns false.
 
     If the flag is true then RTS signal is established in the high;
     otherwise low.
@@ -1660,7 +1660,7 @@ bool SerialPort::setRts(bool set)
 /*!
     Sends a continuous stream of zero bits during a specified period
     of time \a duration in msec if the terminal is using asynchronous
-    serial data. If successful, returns true; otherwise false.
+    serial data. If successful, returns true; otherwise returns false.
 
     If duration is zero then zero bits are transmitted by at least
     0.25 seconds, but no more than 0.5 seconds.
@@ -1678,9 +1678,9 @@ bool SerialPort::sendBreak(int duration)
 
 /*!
     Control the signal break, depending on the flag \a set.
-    If successful, returns true; otherwise false.
+    If successful, returns true; otherwise returns false.
 
-    If set is true then enable break transmission; otherwise disable.
+    If \a set is true then enable break transmission; otherwise disable.
 
     \sa clearBreak(), sendBreak()
 */
@@ -1771,7 +1771,7 @@ qint64 SerialPort::writeData(const char *data, qint64 maxSize)
     \fn bool SerialPort::clearBreak(bool clear)
 
     Control the signal break, depending on the flag \a clear.
-    If successful, returns true; otherwise false.
+    If successful, returns true; otherwise returns false.
 
     If clear is false then enable break transmission; otherwise disable.
 
diff --git a/src/serialportengine_symbian.cpp b/src/serialportengine_symbian.cpp
index c438420..aa4f772 100755
--- a/src/serialportengine_symbian.cpp
+++ b/src/serialportengine_symbian.cpp
@@ -128,7 +128,7 @@ SymbianSerialPortEngine::~SymbianSerialPortEngine()
     mode (when the read operation returns immediately) and tries to
     determine its current configuration and install them.
 
-    If successful, returns true; otherwise false, with the setup a
+    If successful, returns true; otherwise returns false, with the setup a
     error code.
 */
 bool SymbianSerialPortEngine::open(const QString &location, QIODevice::OpenMode mode)
@@ -531,7 +531,7 @@ QString SymbianSerialPortEngine::fromSystemLocation(const QString &location) con
     method will return an error. Also it supports only the standard
     set of speed.
 
-    If successful, returns true; otherwise false, with the setup a
+    If successful, returns true; otherwise returns false, with the setup a
     error code.
 */
 bool SymbianSerialPortEngine::setRate(qint32 rate, SerialPort::Directions dir)
@@ -556,7 +556,7 @@ bool SymbianSerialPortEngine::setRate(qint32 rate, SerialPort::Directions dir)
     Set desired number of data bits \a dataBits in byte. Symbian
     native supported all present number of data bits 5, 6, 7, 8.
 
-    If successful, returns true; otherwise false, with the setup a
+    If successful, returns true; otherwise returns false, with the setup a
     error code.
 */
 bool SymbianSerialPortEngine::setDataBits(SerialPort::DataBits dataBits)
@@ -586,7 +586,7 @@ bool SymbianSerialPortEngine::setDataBits(SerialPort::DataBits dataBits)
     Set desired \a parity control mode. Symbian native supported
     all present parity types no parity, space, mark, even, odd.
 
-    If successful, returns true; otherwise false, with the setup a
+    If successful, returns true; otherwise returns false, with the setup a
     error code.
 */
 bool SymbianSerialPortEngine::setParity(SerialPort::Parity parity)
@@ -619,7 +619,7 @@ bool SymbianSerialPortEngine::setParity(SerialPort::Parity parity)
     Set desired number of stop bits \a stopBits in frame. Symbian
     native supported only 1, 2 number of stop bits.
 
-    If successful, returns true; otherwise false, with the setup a
+    If successful, returns true; otherwise returns false, with the setup a
     error code.
 */
 bool SymbianSerialPortEngine::setStopBits(SerialPort::StopBits stopBits)
@@ -644,7 +644,7 @@ bool SymbianSerialPortEngine::setStopBits(SerialPort::StopBits stopBits)
     present flow control modes no control, hardware (RTS/CTS),
     software (XON/XOFF).
 
-    If successful, returns true; otherwise false, with the setup a
+    If successful, returns true; otherwise returns false, with the setup a
     error code.
 */
 bool SymbianSerialPortEngine::setFlowControl(SerialPort::FlowControl flow)
@@ -906,7 +906,7 @@ void SymbianSerialPortEngine::detectDefaultSettings()
     Updates the TCommConfig structure wehn changing of any the
     parameters a serial port.
 
-    If successful, returns true; otherwise false.
+    If successful, returns true; otherwise returns false.
 */
 bool SymbianSerialPortEngine::updateCommConfig()
 {
diff --git a/src/serialportengine_unix.cpp b/src/serialportengine_unix.cpp
index 8da5205..ef1f774 100755
--- a/src/serialportengine_unix.cpp
+++ b/src/serialportengine_unix.cpp
@@ -119,7 +119,7 @@ UnixSerialPortEngine::~UnixSerialPortEngine()
     lock file. Creation and analysis of lock file, by using a special
     helper class TTYLocker.
 
-    If successful, returns true; otherwise false, with the setup a
+    If successful, returns true; otherwise returns false, with the setup a
     error code.
 */
 bool UnixSerialPortEngine::open(const QString &location, QIODevice::OpenMode mode)
@@ -302,7 +302,7 @@ static bool trigger_out_line(int fd, int bit, bool set)
 /*!
     Set DTR signal to state \a set.
 
-    If successful, returns true; otherwise false.
+    If successful, returns true; otherwise returns false.
 */
 bool UnixSerialPortEngine::setDtr(bool set)
 {
@@ -317,7 +317,7 @@ bool UnixSerialPortEngine::setDtr(bool set)
 /*!
     Set RTS signal to state \a set.
 
-    If successful, returns true; otherwise false.
+    If successful, returns true; otherwise returns false.
 */
 bool UnixSerialPortEngine::setRts(bool set)
 {
@@ -333,7 +333,7 @@ bool UnixSerialPortEngine::setRts(bool set)
     The shall block until all data output written to the serial
     port is transmitted.
 
-    If successful, returns true; otherwise false.
+    If successful, returns true; otherwise returns false.
 */
 bool UnixSerialPortEngine::flush()
 {
@@ -349,7 +349,7 @@ bool UnixSerialPortEngine::flush()
     Flushes both data received but not read and data written
     but not transmitted.
 
-    If successful, returns true; otherwise false.
+    If successful, returns true; otherwise returns false.
 */
 bool UnixSerialPortEngine::reset()
 {
@@ -364,7 +364,7 @@ bool UnixSerialPortEngine::reset()
 /*!
     Send a break for a specific \a duration.
 
-    If successful, returns true; otherwise false.
+    If successful, returns true; otherwise returns false.
 */
 bool UnixSerialPortEngine::sendBreak(int duration)
 {
@@ -380,7 +380,7 @@ bool UnixSerialPortEngine::sendBreak(int duration)
     Turn break on or off, that is, start or stop sending zero
     bits, depending on the parameter \a set.
 
-    If successful, returns true; otherwise false.
+    If successful, returns true; otherwise returns false.
 */
 bool UnixSerialPortEngine::setBreak(bool set)
 {
@@ -626,7 +626,7 @@ QString UnixSerialPortEngine::fromSystemLocation(const QString &location) const
     Also the method make attempts to analyze the type of the desired
     standard or custom speed and trying to set it.
 
-    If successful, returns true; otherwise false, with the setup a
+    If successful, returns true; otherwise returns false, with the setup a
     error code.
 */
 bool UnixSerialPortEngine::setRate(qint32 rate, SerialPort::Directions dir)
@@ -711,7 +711,7 @@ bool UnixSerialPortEngine::setRate(qint32 rate, SerialPort::Directions dir)
     Set desired number of data bits \a dataBits in byte. POSIX
     native supported all present number of data bits 5, 6, 7, 8.
 
-    If successful, returns true; otherwise false, with the setup a
+    If successful, returns true; otherwise returns false, with the setup a
     error code.
 */
 bool UnixSerialPortEngine::setDataBits(SerialPort::DataBits dataBits)
@@ -744,7 +744,7 @@ bool UnixSerialPortEngine::setDataBits(SerialPort::DataBits dataBits)
     has hardware support for these modes, therefore, no need to
     emulate.
 
-    If successful, returns true; otherwise false, with the setup a
+    If successful, returns true; otherwise returns false, with the setup a
     error code.
 */
 bool UnixSerialPortEngine::setParity(SerialPort::Parity parity)
@@ -788,7 +788,7 @@ bool UnixSerialPortEngine::setParity(SerialPort::Parity parity)
     Set desired number of stop bits \a stopBits in frame. POSIX
     native supported only 1, 2 number of stop bits.
 
-    If successful, returns true; otherwise false, with the setup a
+    If successful, returns true; otherwise returns false, with the setup a
     error code.
 */
 bool UnixSerialPortEngine::setStopBits(SerialPort::StopBits stopBits)
@@ -812,7 +812,7 @@ bool UnixSerialPortEngine::setStopBits(SerialPort::StopBits stopBits)
     present flow control modes no control, hardware (RTS/CTS),
     software (XON/XOFF).
 
-    If successful, returns true; otherwise false, with the setup a
+    If successful, returns true; otherwise returns false, with the setup a
     error code.
 */
 bool UnixSerialPortEngine::setFlowControl(SerialPort::FlowControl flow)
@@ -1245,7 +1245,7 @@ bool UnixSerialPortEngine::eventFilter(QObject *obj, QEvent *e)
     Updates the termios structure wehn changing of any the
     parameters a serial port.
 
-    If successful, returns true; otherwise false.
+    If successful, returns true; otherwise returns false.
 */
 bool UnixSerialPortEngine::updateTermios()
 {
diff --git a/src/serialportengine_win.cpp b/src/serialportengine_win.cpp
index 497eabd..28b0ae5 100755
--- a/src/serialportengine_win.cpp
+++ b/src/serialportengine_win.cpp
@@ -150,7 +150,7 @@ WinSerialPortEngine::~WinSerialPortEngine()
     For Windows NT-based platforms, the serial port is opened in the
     overlapped mode, with flag FILE_FLAG_OVERLAPPED.
 
-    If successful, returns true; otherwise false, with the setup a
+    If successful, returns true; otherwise returns false, with the setup a
     error code.
 */
 bool WinSerialPortEngine::open(const QString &location, QIODevice::OpenMode mode)
@@ -312,7 +312,7 @@ SerialPort::Lines WinSerialPortEngine::lines() const
 /*!
     Set DTR signal to state \a set.
 
-    If successful, returns true; otherwise false.
+    If successful, returns true; otherwise returns false.
 */
 bool WinSerialPortEngine::setDtr(bool set)
 {
@@ -327,7 +327,7 @@ bool WinSerialPortEngine::setDtr(bool set)
 /*!
     Set RTS signal to state \a set.
 
-    If successful, returns true; otherwise false.
+    If successful, returns true; otherwise returns false.
 */
 bool WinSerialPortEngine::setRts(bool set)
 {
@@ -343,7 +343,7 @@ bool WinSerialPortEngine::setRts(bool set)
     Flushes the buffers of a specified serial port and
     causes all buffered data to be written to a serial port.
 
-    If successful, returns true; otherwise false.
+    If successful, returns true; otherwise returns false.
 */
 bool WinSerialPortEngine::flush()
 {
@@ -360,7 +360,7 @@ bool WinSerialPortEngine::flush()
     a specified communications resource. It can also terminate
     pending read or write operations on the resource.
 
-    If successful, returns true; otherwise false.
+    If successful, returns true; otherwise returns false.
 */
 bool WinSerialPortEngine::reset()
 {
@@ -377,7 +377,7 @@ bool WinSerialPortEngine::reset()
     Sends a continuous stream of zero bits during a specified
     period of time \a duration in msec.
 
-    If successful, returns true; otherwise false.
+    If successful, returns true; otherwise returns false.
 */
 bool WinSerialPortEngine::sendBreak(int duration)
 {
@@ -395,7 +395,7 @@ bool WinSerialPortEngine::sendBreak(int duration)
     transmission line in a nonbreak or break state,
     depending on the parameter \a set.
 
-    If successful, returns true; otherwise false.
+    If successful, returns true; otherwise returns false.
 */
 bool WinSerialPortEngine::setBreak(bool set)
 {
@@ -424,7 +424,7 @@ static qint64 get_commstat_que(HANDLE m_descriptor, enum CommStatQue que)
     device's error flag to enable additional input and output
     (I/O) operations.
 
-    If successful, returns true; otherwise false.
+    If successful, returns true; otherwise returns false.
 */
 qint64 WinSerialPortEngine::bytesAvailable() const
 {
@@ -438,7 +438,7 @@ qint64 WinSerialPortEngine::bytesAvailable() const
     Also it clears the device's error flag to enable additional
     input and output (I/O) operations.
 
-    If successful, returns true; otherwise false.
+    If successful, returns true; otherwise returns false.
 */
 qint64 WinSerialPortEngine::bytesToWrite() const
 {
@@ -723,7 +723,7 @@ QString WinSerialPortEngine::fromSystemLocation(const QString &location) const
     However, windows does not support separate directions, so the
     method will return an error.
 
-    If successful, returns true; otherwise false, with the setup a
+    If successful, returns true; otherwise returns false, with the setup a
     error code.
 */
 bool WinSerialPortEngine::setRate(qint32 rate, SerialPort::Directions dir)
@@ -740,7 +740,7 @@ bool WinSerialPortEngine::setRate(qint32 rate, SerialPort::Directions dir)
     Set desired number of data bits \a dataBits in byte. Windows
     native supported all present number of data bits 5, 6, 7, 8.
 
-    If successful, returns true; otherwise false, with the setup a
+    If successful, returns true; otherwise returns false, with the setup a
     error code.
 */
 bool WinSerialPortEngine::setDataBits(SerialPort::DataBits dataBits)
@@ -753,7 +753,7 @@ bool WinSerialPortEngine::setDataBits(SerialPort::DataBits dataBits)
     Set desired \a parity control mode. Windows native supported
     all present parity types no parity, space, mark, even, odd.
 
-    If successful, returns true; otherwise false, with the setup a
+    If successful, returns true; otherwise returns false, with the setup a
     error code.
 */
 bool WinSerialPortEngine::setParity(SerialPort::Parity parity)
@@ -788,7 +788,7 @@ bool WinSerialPortEngine::setParity(SerialPort::Parity parity)
     Windows native supported all present number of stop bits
     1, 1.5, 2.
 
-    If successful, returns true; otherwise false, with the setup a
+    If successful, returns true; otherwise returns false, with the setup a
     error code.
 */
 bool WinSerialPortEngine::setStopBits(SerialPort::StopBits stopBits)
@@ -815,7 +815,7 @@ bool WinSerialPortEngine::setStopBits(SerialPort::StopBits stopBits)
     present flow control modes no control, hardware (RTS/CTS),
     software (XON/XOFF).
 
-    If successful, returns true; otherwise false, with the setup a
+    If successful, returns true; otherwise returns false, with the setup a
     error code.
 */
 bool WinSerialPortEngine::setFlowControl(SerialPort::FlowControl flow)
@@ -1216,7 +1216,7 @@ bool WinSerialPortEngine::event(QEvent *e)
     writing \a tx, and waiting for data from the serial port.
     This method is only used in the method open().
 
-    If successful, returns true; otherwise false.
+    If successful, returns true; otherwise returns false.
 */
 bool WinSerialPortEngine::createEvents(bool rx, bool tx)
 {
@@ -1318,7 +1318,7 @@ void WinSerialPortEngine::setNotificationEnabled(bool enable, DWORD mask)
     Updates the DCB structure wehn changing of any the parameters
     a serial port.
 
-    If successful, returns true; otherwise false.
+    If successful, returns true; otherwise returns false.
 */
 bool WinSerialPortEngine::updateDcb()
 {
@@ -1342,7 +1342,7 @@ bool WinSerialPortEngine::updateDcb()
     Updates the COMMTIMEUTS structure wehn changing of any timeout the
     parameters a serial port.
 
-    If successful, returns true; otherwise false.
+    If successful, returns true; otherwise returns false.
 */
 bool WinSerialPortEngine::updateCommTimeouts()
 {
diff --git a/src/serialportinfo.cpp b/src/serialportinfo.cpp
index 18195ac..831dbb2 100644
--- a/src/serialportinfo.cpp
+++ b/src/serialportinfo.cpp
@@ -174,14 +174,14 @@ QString SerialPortInfo::pid() const
     \fn bool SerialPortInfo::isBusy() const
 
     Returns true if serial port is busy;
-    otherwise false.
+    otherwise returns false.
 */
 
 /*!
     \fn bool SerialPortInfo::isValid() const
 
     Returns true if serial port is present on system;
-    otherwise false.
+    otherwise returns false.
 */
 
 /*!