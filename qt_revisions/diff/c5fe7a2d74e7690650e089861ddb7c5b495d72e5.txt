diff --git a/src/plugins/qmltooling/qmldbg_tcp/qmldbg_tcp.pro b/src/plugins/qmltooling/qmldbg_tcp/qmldbg_tcp.pro
new file mode 100644
index 0000000..fcce2e8
--- /dev/null
+++ b/src/plugins/qmltooling/qmldbg_tcp/qmldbg_tcp.pro
@@ -0,0 +1,17 @@
+TARGET = qmldbg_tcp
+QT       += quick1 quick1-private network
+
+load(qt_plugin)
+
+DESTDIR  = $$QT.quick1.plugins/qmltooling
+
+SOURCES += \
+    qtcpserverconnection.cpp
+
+HEADERS += \
+    qtcpserverconnection.h
+
+target.path += $$[QT_INSTALL_PLUGINS]/qmltooling
+INSTALLS += target
+
+symbian:TARGET.UID3=0x20031E90
diff --git a/src/plugins/qmltooling/qmldbg_tcp/qtcpserverconnection.cpp b/src/plugins/qmltooling/qmldbg_tcp/qtcpserverconnection.cpp
new file mode 100644
index 0000000..3923fbc
--- /dev/null
+++ b/src/plugins/qmltooling/qmldbg_tcp/qtcpserverconnection.cpp
@@ -0,0 +1,199 @@
+/****************************************************************************
+**
+** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies).
+** All rights reserved.
+** Contact: Nokia Corporation (qt-info@nokia.com)
+**
+** This file is part of the QtDeclarative module of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** GNU Lesser General Public License Usage
+** This file may be used under the terms of the GNU Lesser General Public
+** License version 2.1 as published by the Free Software Foundation and
+** appearing in the file LICENSE.LGPL included in the packaging of this
+** file. Please review the following information to ensure the GNU Lesser
+** General Public License version 2.1 requirements will be met:
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** In addition, as a special exception, Nokia gives you certain additional
+** rights. These rights are described in the Nokia Qt LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU General
+** Public License version 3.0 as published by the Free Software Foundation
+** and appearing in the file LICENSE.GPL included in the packaging of this
+** file. Please review the following information to ensure the GNU General
+** Public License version 3.0 requirements will be met:
+** http://www.gnu.org/copyleft/gpl.html.
+**
+** Other Usage
+** Alternatively, this file may be used in accordance with the terms and
+** conditions contained in a signed written agreement between you and Nokia.
+**
+**
+**
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#include "qtcpserverconnection.h"
+
+#include <QtCore/qplugin.h>
+#include <QtNetwork/qtcpserver.h>
+#include <QtNetwork/qtcpsocket.h>
+
+#include <private/qdeclarativedebugserver_p.h>
+#include <private/qpacketprotocol_p.h>
+
+QT_BEGIN_NAMESPACE
+
+class QTcpServerConnectionPrivate {
+public:
+    QTcpServerConnectionPrivate();
+
+    int port;
+    bool block;
+    QTcpSocket *socket;
+    QPacketProtocol *protocol;
+    QTcpServer *tcpServer;
+
+    QDeclarativeDebugServer *debugServer;
+};
+
+QTcpServerConnectionPrivate::QTcpServerConnectionPrivate() :
+    port(0),
+    block(false),
+    socket(0),
+    protocol(0),
+    tcpServer(0),
+    debugServer(0)
+{
+}
+
+QTcpServerConnection::QTcpServerConnection() :
+    d_ptr(new QTcpServerConnectionPrivate)
+{
+
+}
+
+QTcpServerConnection::~QTcpServerConnection()
+{
+    delete d_ptr;
+}
+
+void QTcpServerConnection::setServer(QDeclarativeDebugServer *server)
+{
+    Q_D(QTcpServerConnection);
+    d->debugServer = server;
+}
+
+bool QTcpServerConnection::isConnected() const
+{
+    Q_D(const QTcpServerConnection);
+    return d->socket && d->socket->state() == QTcpSocket::ConnectedState;
+}
+
+void QTcpServerConnection::send(const QList<QByteArray> &messages)
+{
+    Q_D(QTcpServerConnection);
+
+    if (!isConnected()
+            || !d->protocol || !d->socket)
+        return;
+
+    foreach (const QByteArray &message, messages) {
+        QPacket pack;
+        pack.writeRawData(message.data(), message.length());
+        d->protocol->send(pack);
+    }
+    d->socket->flush();
+}
+
+void QTcpServerConnection::disconnect()
+{
+    Q_D(QTcpServerConnection);
+
+    // protocol might still be processing packages at this point
+    d->protocol->deleteLater();
+    d->protocol = 0;
+    d->socket->deleteLater();
+    d->socket = 0;
+}
+
+bool QTcpServerConnection::waitForMessage()
+{
+    Q_D(QTcpServerConnection);
+    if (d->protocol->packetsAvailable() > 0) {
+        QPacket packet = d->protocol->read();
+        d->debugServer->receiveMessage(packet.data());
+        return true;
+    } else {
+        return d->protocol->waitForReadyRead(-1);
+    }
+}
+
+void QTcpServerConnection::setPort(int port, bool block)
+{
+    Q_D(QTcpServerConnection);
+    d->port = port;
+    d->block = block;
+
+    listen();
+    if (block)
+        d->tcpServer->waitForNewConnection(-1);
+}
+
+void QTcpServerConnection::listen()
+{
+    Q_D(QTcpServerConnection);
+
+    d->tcpServer = new QTcpServer(this);
+    QObject::connect(d->tcpServer, SIGNAL(newConnection()), this, SLOT(newConnection()));
+    if (d->tcpServer->listen(QHostAddress::Any, d->port)) {
+        qDebug("QDeclarativeDebugServer: Waiting for connection on port %d...", d->port);
+    } else {
+        qWarning("QDeclarativeDebugServer: Unable to listen on port %d", d->port);
+    }
+}
+
+
+void QTcpServerConnection::readyRead()
+{
+    Q_D(QTcpServerConnection);
+    if (!d->protocol)
+        return;
+
+    while (d->protocol->packetsAvailable() > 0) {
+        QPacket packet = d->protocol->read();
+        d->debugServer->receiveMessage(packet.data());
+    }
+}
+
+void QTcpServerConnection::newConnection()
+{
+    Q_D(QTcpServerConnection);
+
+    if (d->socket) {
+        qWarning("QDeclarativeDebugServer: Another client is already connected");
+        QTcpSocket *faultyConnection = d->tcpServer->nextPendingConnection();
+        delete faultyConnection;
+        return;
+    }
+
+    d->socket = d->tcpServer->nextPendingConnection();
+    d->socket->setParent(this);
+    d->protocol = new QPacketProtocol(d->socket, this);
+    QObject::connect(d->protocol, SIGNAL(readyRead()), this, SLOT(readyRead()));
+
+    if (d->block) {
+        d->protocol->waitForReadyRead(-1);
+    }
+}
+
+Q_EXPORT_PLUGIN2(tcpserver, QTcpServerConnection)
+
+QT_END_NAMESPACE
+
diff --git a/src/plugins/qmltooling/qmldbg_tcp/qtcpserverconnection.h b/src/plugins/qmltooling/qmldbg_tcp/qtcpserverconnection.h
new file mode 100644
index 0000000..e429b5b
--- /dev/null
+++ b/src/plugins/qmltooling/qmldbg_tcp/qtcpserverconnection.h
@@ -0,0 +1,84 @@
+/****************************************************************************
+**
+** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies).
+** All rights reserved.
+** Contact: Nokia Corporation (qt-info@nokia.com)
+**
+** This file is part of the QtDeclarative module of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** GNU Lesser General Public License Usage
+** This file may be used under the terms of the GNU Lesser General Public
+** License version 2.1 as published by the Free Software Foundation and
+** appearing in the file LICENSE.LGPL included in the packaging of this
+** file. Please review the following information to ensure the GNU Lesser
+** General Public License version 2.1 requirements will be met:
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** In addition, as a special exception, Nokia gives you certain additional
+** rights. These rights are described in the Nokia Qt LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU General
+** Public License version 3.0 as published by the Free Software Foundation
+** and appearing in the file LICENSE.GPL included in the packaging of this
+** file. Please review the following information to ensure the GNU General
+** Public License version 3.0 requirements will be met:
+** http://www.gnu.org/copyleft/gpl.html.
+**
+** Other Usage
+** Alternatively, this file may be used in accordance with the terms and
+** conditions contained in a signed written agreement between you and Nokia.
+**
+**
+**
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#ifndef QTCPSERVERCONNECTION_H
+#define QTCPSERVERCONNECTION_H
+
+#include <QtQuick1/private/qdeclarativedebugserverconnection_p.h>
+
+QT_BEGIN_NAMESPACE
+
+class QDeclarativeDebugServer;
+class QTcpServerConnectionPrivate;
+class QTcpServerConnection : public QObject, public QDeclarativeDebugServerConnection
+{
+    Q_OBJECT
+    Q_DECLARE_PRIVATE(QTcpServerConnection)
+    Q_DISABLE_COPY(QTcpServerConnection)
+    Q_INTERFACES(QDeclarativeDebugServerConnection)
+
+
+public:
+    QTcpServerConnection();
+    ~QTcpServerConnection();
+
+    void setServer(QDeclarativeDebugServer *server);
+    void setPort(int port, bool bock);
+
+    bool isConnected() const;
+    void send(const QList<QByteArray> &messages);
+    void disconnect();
+    bool waitForMessage();
+
+    void listen();
+    void waitForConnection();
+
+private Q_SLOTS:
+    void readyRead();
+    void newConnection();
+
+private:
+    QTcpServerConnectionPrivate *d_ptr;
+};
+
+QT_END_NAMESPACE
+
+#endif // QTCPSERVERCONNECTION_H
diff --git a/src/plugins/qmltooling/qmltooling.pro b/src/plugins/qmltooling/qmltooling.pro
index 6d76f8c..bda487c 100644
--- a/src/plugins/qmltooling/qmltooling.pro
+++ b/src/plugins/qmltooling/qmltooling.pro
@@ -1,3 +1,5 @@
 TEMPLATE = subdirs
 
 SUBDIRS = qmldbg_inspector
+
+!contains(QT_CONFIG, declarative): SUBDIRS +=  qmldbg_tcp
diff --git a/tests/auto/declarative/qdeclarativedebug/tst_qdeclarativedebug.cpp b/tests/auto/declarative/qdeclarativedebug/tst_qdeclarativedebug.cpp
index eb8e8d8..804c7b5 100644
--- a/tests/auto/declarative/qdeclarativedebug/tst_qdeclarativedebug.cpp
+++ b/tests/auto/declarative/qdeclarativedebug/tst_qdeclarativedebug.cpp
@@ -221,7 +221,7 @@ void tst_QDeclarativeDebug::recursiveObjectTest(QObject *o, const QDeclarativeDe
 
         QCOMPARE(p.name(), QString::fromUtf8(pmeta.name()));
 
-        if (pmeta.type() > 0 && pmeta.type() < QVariant::UserType) // TODO test complex types
+        if (pmeta.type() > 0 && pmeta.type() < QVariant::UserType && pmeta.userType() != QMetaType::QVariant) // TODO test complex types
             QCOMPARE(p.value(), pmeta.read(o));
 
         if (p.name() == "parent")