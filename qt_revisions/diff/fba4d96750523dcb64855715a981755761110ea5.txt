diff --git a/tests/auto/tools/rcc/tst_rcc.cpp b/tests/auto/tools/rcc/tst_rcc.cpp
index 8af85a6..d0806bd 100644
--- a/tests/auto/tools/rcc/tst_rcc.cpp
+++ b/tests/auto/tools/rcc/tst_rcc.cpp
@@ -156,7 +156,7 @@ void tst_rcc::rcc()
     }
     const QChar cr = QLatin1Char('\r');
     const QString err = QString::fromLocal8Bit(process.readAllStandardError()).remove(cr);
-    const QString out = QString::fromAscii(process.readAllStandardOutput()).remove(cr);
+    const QString out = QString::fromLatin1(process.readAllStandardOutput()).remove(cr);
 
     if (!err.isEmpty()) {
         qDebug() << "UNEXPECTED STDERR CONTENTS: " << err;
@@ -167,7 +167,7 @@ void tst_rcc::rcc()
     const QStringList actualLines = out.split(nl);
 
     QVERIFY(expectedFile.open(QIODevice::ReadOnly|QIODevice::Text));
-    const QStringList expectedLines = QString::fromAscii(expectedFile.readAll()).split(nl);
+    const QStringList expectedLines = QString::fromLatin1(expectedFile.readAll()).split(nl);
 
     const QString diff = doCompare(actualLines, expectedLines);
     if (diff.size())
diff --git a/tests/auto/tools/uic/tst_uic.cpp b/tests/auto/tools/uic/tst_uic.cpp
index 0ea2296..f77d71e 100644
--- a/tests/auto/tools/uic/tst_uic.cpp
+++ b/tests/auto/tools/uic/tst_uic.cpp
@@ -93,7 +93,7 @@ void tst_uic::initTestCase()
     const QStringList outLines = out.split(QLatin1Char('\n'));
     // Print version
     QString msg = QString::fromLatin1("uic test built %1 running in '%2' using: ").
-                  arg(QString::fromAscii(__DATE__), QDir::currentPath());
+                  arg(QString::fromLatin1(__DATE__), QDir::currentPath());
     if (!outLines.empty())
         msg += outLines.front();
     qDebug() << msg;
diff --git a/util/xkbdatagen/main.cpp b/util/xkbdatagen/main.cpp
index 9919345..98994db 100644
--- a/util/xkbdatagen/main.cpp
+++ b/util/xkbdatagen/main.cpp
@@ -476,26 +476,26 @@ int main(int argc, char **argv)
             lang = "C";
         printf("    // name = %s, description = %s\n"
                "    { \"%s\", \"\", %s, QLocale::%s, QLocale::%s },\n",
-               l.name.toAscii().constData(),
-               l.description.toAscii().constData(),
-               l.name.toAscii().constData(),
-               mapDirection(lang).toAscii().constData(),
-               lang.toAscii().constData(),
-               country.toAscii().constData());
+               l.name.toLatin1().constData(),
+               l.description.toLatin1().constData(),
+               l.name.toLatin1().constData(),
+               mapDirection(lang).toLatin1().constData(),
+               lang.toLatin1().constData(),
+               country.toLatin1().constData());
         foreach (const QString &v, l.variants) {
             QString vlang = mapLanguage(l.name + ":" + v);
             if (vlang.isEmpty())
                 vlang = "C";
             printf("    // name = %s:%s, description = %s\n"
                    "    { \"%s\", \"%s\", %s, QLocale::%s, QLocale::%s },\n",
-                   l.name.toAscii().constData(),
-                   v.toAscii().constData(),
-                   l.description.toAscii().constData(),
-                   l.name.toAscii().constData(),
-                   v.toAscii().constData(),
-                   mapDirection(vlang).toAscii().constData(),
-                   vlang.toAscii().constData(),
-                   country.toAscii().constData());
+                   l.name.toLatin1().constData(),
+                   v.toLatin1().constData(),
+                   l.description.toLatin1().constData(),
+                   l.name.toLatin1().constData(),
+                   v.toLatin1().constData(),
+                   mapDirection(vlang).toLatin1().constData(),
+                   vlang.toLatin1().constData(),
+                   country.toLatin1().constData());
         }
     }