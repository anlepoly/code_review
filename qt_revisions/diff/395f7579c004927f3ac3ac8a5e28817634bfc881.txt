diff --git a/src/tools/qdoc/codemarker.cpp b/src/tools/qdoc/codemarker.cpp
index 1ba6a0f..122feeb 100644
--- a/src/tools/qdoc/codemarker.cpp
+++ b/src/tools/qdoc/codemarker.cpp
@@ -95,8 +95,8 @@ void CodeMarker::terminateMarker()
 void CodeMarker::initialize(const Config& config)
 {
     defaultLang = config.getString(QLatin1String(CONFIG_LANGUAGE));
-    QList<CodeMarker *>::ConstIterator m = markers.begin();
-    while (m != markers.end()) {
+    QList<CodeMarker *>::ConstIterator m = markers.constBegin();
+    while (m != markers.constEnd()) {
         (*m)->initializeMarker(config);
         ++m;
     }
@@ -107,8 +107,8 @@ void CodeMarker::initialize(const Config& config)
  */
 void CodeMarker::terminate()
 {
-    QList<CodeMarker *>::ConstIterator m = markers.begin();
-    while (m != markers.end()) {
+    QList<CodeMarker *>::ConstIterator m = markers.constBegin();
+    while (m != markers.constEnd()) {
         (*m)->terminateMarker();
         ++m;
     }
@@ -120,8 +120,8 @@ CodeMarker *CodeMarker::markerForCode(const QString& code)
     if (defaultMarker != 0 && defaultMarker->recognizeCode(code))
         return defaultMarker;
 
-    QList<CodeMarker *>::ConstIterator m = markers.begin();
-    while (m != markers.end()) {
+    QList<CodeMarker *>::ConstIterator m = markers.constBegin();
+    while (m != markers.constEnd()) {
         if ((*m)->recognizeCode(code))
             return *m;
         ++m;
@@ -137,8 +137,8 @@ CodeMarker *CodeMarker::markerForFileName(const QString& fileName)
         QString ext = fileName.mid(dot + 1);
         if (defaultMarker != 0 && defaultMarker->recognizeExtension(ext))
             return defaultMarker;
-        QList<CodeMarker *>::ConstIterator m = markers.begin();
-        while (m != markers.end()) {
+        QList<CodeMarker *>::ConstIterator m = markers.constBegin();
+        while (m != markers.constEnd()) {
             if ((*m)->recognizeExtension(ext))
                 return *m;
             ++m;
@@ -150,8 +150,8 @@ CodeMarker *CodeMarker::markerForFileName(const QString& fileName)
 
 CodeMarker *CodeMarker::markerForLanguage(const QString& lang)
 {
-    QList<CodeMarker *>::ConstIterator m = markers.begin();
-    while (m != markers.end()) {
+    QList<CodeMarker *>::ConstIterator m = markers.constBegin();
+    while (m != markers.constEnd()) {
         if ((*m)->recognizeLanguage(lang))
             return *m;
         ++m;
diff --git a/src/tools/qdoc/codeparser.cpp b/src/tools/qdoc/codeparser.cpp
index 71a82a7..bfa0064 100644
--- a/src/tools/qdoc/codeparser.cpp
+++ b/src/tools/qdoc/codeparser.cpp
@@ -132,8 +132,8 @@ void CodeParser::doneParsingHeaderFiles(Tree *tree)
  */
 void CodeParser::initialize(const Config& config)
 {
-    QList<CodeParser *>::ConstIterator p = parsers.begin();
-    while (p != parsers.end()) {
+    QList<CodeParser *>::ConstIterator p = parsers.constBegin();
+    while (p != parsers.constEnd()) {
         (*p)->initializeParser(config);
         ++p;
     }
@@ -144,8 +144,8 @@ void CodeParser::initialize(const Config& config)
  */
 void CodeParser::terminate()
 {
-    QList<CodeParser *>::ConstIterator p = parsers.begin();
-    while (p != parsers.end()) {
+    QList<CodeParser *>::ConstIterator p = parsers.constBegin();
+    while (p != parsers.constEnd()) {
         (*p)->terminateParser();
         ++p;
     }
@@ -153,8 +153,8 @@ void CodeParser::terminate()
 
 CodeParser *CodeParser::parserForLanguage(const QString& language)
 {
-    QList<CodeParser *>::ConstIterator p = parsers.begin();
-    while (p != parsers.end()) {
+    QList<CodeParser *>::ConstIterator p = parsers.constBegin();
+    while (p != parsers.constEnd()) {
         if ((*p)->language() == language)
             return *p;
         ++p;
@@ -166,8 +166,8 @@ CodeParser *CodeParser::parserForHeaderFile(const QString &filePath)
 {
     QString fileName = QFileInfo(filePath).fileName();
 
-    QList<CodeParser *>::ConstIterator p = parsers.begin();
-    while (p != parsers.end()) {
+    QList<CodeParser *>::ConstIterator p = parsers.constBegin();
+    while (p != parsers.constEnd()) {
 
         QStringList headerPatterns = (*p)->headerFileNameFilter();
         foreach (QString pattern, headerPatterns) {
@@ -184,8 +184,8 @@ CodeParser *CodeParser::parserForSourceFile(const QString &filePath)
 {
     QString fileName = QFileInfo(filePath).fileName();
 
-    QList<CodeParser *>::ConstIterator p = parsers.begin();
-    while (p != parsers.end()) {
+    QList<CodeParser *>::ConstIterator p = parsers.constBegin();
+    while (p != parsers.constEnd()) {
 
         QStringList sourcePatterns = (*p)->sourceFileNameFilter();
         foreach (QString pattern, sourcePatterns) {
@@ -276,8 +276,8 @@ void CodeParser::processCommonMetaCommand(const Location& location,
             node->setStatus(Node::Internal);
             if (node->subType() == Node::QmlPropertyGroup) {
                 const QmlPropGroupNode* qpgn = static_cast<const QmlPropGroupNode*>(node);
-                NodeList::ConstIterator p = qpgn->childNodes().begin();
-                while (p != qpgn->childNodes().end()) {
+                NodeList::ConstIterator p = qpgn->childNodes().constBegin();
+                while (p != qpgn->childNodes().constEnd()) {
                     if ((*p)->type() == Node::QmlProperty) {
                         (*p)->setAccess(Node::Private);
                         (*p)->setStatus(Node::Internal);
diff --git a/src/tools/qdoc/config.cpp b/src/tools/qdoc/config.cpp
index e715ea1..09b752c 100644
--- a/src/tools/qdoc/config.cpp
+++ b/src/tools/qdoc/config.cpp
@@ -115,10 +115,10 @@ void MetaStack::process(QChar ch, const Location& location)
         QStringList prefixes = top().next;
 
         top().next.clear();
-        QStringList::ConstIterator pre = prefixes.begin();
-        while (pre != prefixes.end()) {
-            QStringList::ConstIterator suf = suffixes.begin();
-            while (suf != suffixes.end()) {
+        QStringList::ConstIterator pre = prefixes.constBegin();
+        while (pre != prefixes.constEnd()) {
+            QStringList::ConstIterator suf = suffixes.constBegin();
+            while (suf != suffixes.constEnd()) {
                 top().next << (*pre + *suf);
                 ++suf;
             }
@@ -212,8 +212,8 @@ void Config::load(const QString& fileName)
  */
 void Config::unload(const QString& fileName)
 {
-    QStringMultiMap::ConstIterator v = stringValueMap.begin();
-    while (v != stringValueMap.end()) {
+    QStringMultiMap::ConstIterator v = stringValueMap.constBegin();
+    while (v != stringValueMap.constEnd()) {
         qDebug() << v.key() << " = " << v.value();
 #if 0
         if (v.key().startsWith(varDot)) {
@@ -261,10 +261,10 @@ bool Config::getBool(const QString& var) const
 int Config::getInt(const QString& var) const
 {
     QStringList strs = getStringList(var);
-    QStringList::ConstIterator s = strs.begin();
+    QStringList::ConstIterator s = strs.constBegin();
     int sum = 0;
 
-    while (s != strs.end()) {
+    while (s != strs.constEnd()) {
         sum += (*s).toInt();
         ++s;
     }
@@ -357,8 +357,8 @@ QStringList Config::getCleanPathList(const QString& var) const
     if (!locMap[var].isEmpty())
         (Location&) lastLoc = locMap[var];
     QStringList t;
-    QMap<QString,QStringList>::const_iterator it = stringListValueMap.find(var);
-    if (it != stringListValueMap.end()) {
+    QMap<QString,QStringList>::const_iterator it = stringListValueMap.constFind(var);
+    if (it != stringListValueMap.constEnd()) {
         const QStringList& sl = it.value();
         if (!sl.isEmpty()) {
             t.reserve(sl.size());
@@ -382,9 +382,9 @@ QRegExp Config::getRegExp(const QString& var) const
 {
     QString pattern;
     QList<QRegExp> subRegExps = getRegExpList(var);
-    QList<QRegExp>::ConstIterator s = subRegExps.begin();
+    QList<QRegExp>::ConstIterator s = subRegExps.constBegin();
 
-    while (s != subRegExps.end()) {
+    while (s != subRegExps.constEnd()) {
         if (!(*s).isValid())
             return *s;
         if (!pattern.isEmpty())
@@ -405,10 +405,10 @@ QRegExp Config::getRegExp(const QString& var) const
 QList<QRegExp> Config::getRegExpList(const QString& var) const
 {
     QStringList strs = getStringList(var);
-    QStringList::ConstIterator s = strs.begin();
+    QStringList::ConstIterator s = strs.constBegin();
     QList<QRegExp> regExps;
 
-    while (s != strs.end()) {
+    while (s != strs.constEnd()) {
         regExps += QRegExp(*s);
         ++s;
     }
@@ -425,8 +425,8 @@ QSet<QString> Config::subVars(const QString& var) const
 {
     QSet<QString> result;
     QString varDot = var + QLatin1Char('.');
-    QStringMultiMap::ConstIterator v = stringValueMap.begin();
-    while (v != stringValueMap.end()) {
+    QStringMultiMap::ConstIterator v = stringValueMap.constBegin();
+    while (v != stringValueMap.constEnd()) {
         if (v.key().startsWith(varDot)) {
             QString subVar = v.key().mid(varDot.length());
             int dot = subVar.indexOf(QLatin1Char('.'));
@@ -447,8 +447,8 @@ QSet<QString> Config::subVars(const QString& var) const
 void Config::subVarsAndValues(const QString& var, QStringMultiMap& t) const
 {
     QString varDot = var + QLatin1Char('.');
-    QStringMultiMap::ConstIterator v = stringValueMap.begin();
-    while (v != stringValueMap.end()) {
+    QStringMultiMap::ConstIterator v = stringValueMap.constBegin();
+    while (v != stringValueMap.constEnd()) {
         if (v.key().startsWith(varDot)) {
             QString subVar = v.key().mid(varDot.length());
             int dot = subVar.indexOf(QLatin1Char('.'));
@@ -479,8 +479,8 @@ QStringList Config::getAllFiles(const QString &filesVar,
 
     QString nameFilter = getString(filesVar + dot + QLatin1String(CONFIG_FILEEXTENSIONS));
 
-    QStringList::ConstIterator d = dirs.begin();
-    while (d != dirs.end()) {
+    QStringList::ConstIterator d = dirs.constBegin();
+    while (d != dirs.constEnd()) {
         result += getFilesHere(*d, nameFilter, excludedDirs, excludedFiles);
         ++d;
     }
@@ -511,8 +511,8 @@ QString Config::findFile(const Location& location,
     QStringList components = fileName.split(QLatin1Char('?'));
     QString firstComponent = components.first();
 
-    QStringList::ConstIterator f = files.begin();
-    while (f != files.end()) {
+    QStringList::ConstIterator f = files.constBegin();
+    while (f != files.constEnd()) {
         if (*f == firstComponent ||
                 (*f).endsWith(QLatin1Char('/') + firstComponent)) {
             fileInfo.setFile(*f);
@@ -524,8 +524,8 @@ QString Config::findFile(const Location& location,
     }
 
     if (fileInfo.fileName().isEmpty()) {
-        QStringList::ConstIterator d = dirs.begin();
-        while (d != dirs.end()) {
+        QStringList::ConstIterator d = dirs.constBegin();
+        while (d != dirs.constEnd()) {
             fileInfo.setFile(QDir(*d), firstComponent);
             if (fileInfo.exists()) {
                 break;
@@ -538,9 +538,9 @@ QString Config::findFile(const Location& location,
     if (!fileInfo.exists())
         return QString();
 
-    QStringList::ConstIterator c = components.begin();
+    QStringList::ConstIterator c = components.constBegin();
     for (;;) {
-        bool isArchive = (c != components.end() - 1);
+        bool isArchive = (c != components.constEnd() - 1);
         QString userFriendly = *c;
 
         userFriendlyFilePath += userFriendly;
@@ -567,8 +567,8 @@ QString Config::findFile(const Location& location,
                          const QStringList& fileExtensions,
                          QString& userFriendlyFilePath)
 {
-    QStringList::ConstIterator e = fileExtensions.begin();
-    while (e != fileExtensions.end()) {
+    QStringList::ConstIterator e = fileExtensions.constBegin();
+    while (e != fileExtensions.constEnd()) {
         QString filePath = findFile(location,
                                     files,
                                     dirs,
@@ -900,8 +900,8 @@ void Config::load(Location location, const QString& fileName)
                     }
                 }
 
-                QStringList::ConstIterator key = keys.begin();
-                while (key != keys.end()) {
+                QStringList::ConstIterator key = keys.constBegin();
+                while (key != keys.constEnd()) {
                     if (!keySyntax.exactMatch(*key))
                         keyLoc.fatal(tr("Invalid key '%1'").arg(*key));
 
diff --git a/src/tools/qdoc/cppcodemarker.cpp b/src/tools/qdoc/cppcodemarker.cpp
index 90507ca..61f8070 100644
--- a/src/tools/qdoc/cppcodemarker.cpp
+++ b/src/tools/qdoc/cppcodemarker.cpp
@@ -197,9 +197,9 @@ QString CppCodeMarker::markedUpSynopsis(const Node *node,
             synopsis += "(";
             if (!func->parameters().isEmpty()) {
                 //synopsis += QLatin1Char(' ');
-                QList<Parameter>::ConstIterator p = func->parameters().begin();
-                while (p != func->parameters().end()) {
-                    if (p != func->parameters().begin())
+                QList<Parameter>::ConstIterator p = func->parameters().constBegin();
+                while (p != func->parameters().constEnd()) {
+                    if (p != func->parameters().constBegin())
                         synopsis += ", ";
                     synopsis += typified((*p).leftType());
                     if (style != Subpage && !(*p).name().isEmpty())
@@ -368,9 +368,9 @@ QString CppCodeMarker::markedUpQmlItem(const Node* node, bool summary)
             synopsis = name;
         synopsis += QLatin1Char('(');
         if (!func->parameters().isEmpty()) {
-            QList<Parameter>::ConstIterator p = func->parameters().begin();
-            while (p != func->parameters().end()) {
-                if (p != func->parameters().begin())
+            QList<Parameter>::ConstIterator p = func->parameters().constBegin();
+            while (p != func->parameters().constEnd()) {
+                if (p != func->parameters().constBegin())
                     synopsis += ", ";
                 synopsis += typified((*p).leftType());
                 if (!(*p).name().isEmpty()) {
@@ -455,8 +455,8 @@ QString CppCodeMarker::markedUpIncludes(const QStringList& includes)
 {
     QString code;
 
-    QStringList::ConstIterator inc = includes.begin();
-    while (inc != includes.end()) {
+    QStringList::ConstIterator inc = includes.constBegin();
+    while (inc != includes.constEnd()) {
         code += "<@preprocessor>#include &lt;<@headerfile>" + *inc + "</@headerfile>&gt;</@preprocessor>\n";
         ++inc;
     }
@@ -547,8 +547,8 @@ QList<Section> CppCodeMarker::sections(const InnerNode *inner,
                                             "static public members");
             FastSection macros(inner, "Macros", "", "macro", "macros");
 
-            NodeList::ConstIterator r = classe->relatedNodes().begin();
-            while (r != classe->relatedNodes().end()) {
+            NodeList::ConstIterator r = classe->relatedNodes().constBegin();
+            while (r != classe->relatedNodes().constEnd()) {
                 if ((*r)->type() == Node::Function) {
                     FunctionNode *func = static_cast<FunctionNode *>(*r);
                     if (func->isMacro())
@@ -568,8 +568,8 @@ QList<Section> CppCodeMarker::sections(const InnerNode *inner,
             while (!stack.isEmpty()) {
                 const ClassNode *ancestorClass = stack.pop();
 
-                NodeList::ConstIterator c = ancestorClass->childNodes().begin();
-                while (c != ancestorClass->childNodes().end()) {
+                NodeList::ConstIterator c = ancestorClass->childNodes().constBegin();
+                while (c != ancestorClass->childNodes().constEnd()) {
                     bool isSlot = false;
                     bool isSignal = false;
                     bool isStatic = false;
@@ -654,8 +654,8 @@ QList<Section> CppCodeMarker::sections(const InnerNode *inner,
                 }
 
                 QList<RelatedClass>::ConstIterator r =
-                        ancestorClass->baseClasses().begin();
-                while (r != ancestorClass->baseClasses().end()) {
+                        ancestorClass->baseClasses().constBegin();
+                while (r != ancestorClass->baseClasses().constEnd()) {
                     stack.prepend((*r).node);
                     ++r;
                 }
@@ -688,8 +688,8 @@ QList<Section> CppCodeMarker::sections(const InnerNode *inner,
             FastSection relatedNonMembers(classe,"Related Non-Members","relnonmem","member","members");
             FastSection macros(classe,"Macro Documentation","macros","member","members");
 
-            NodeList::ConstIterator r = classe->relatedNodes().begin();
-            while (r != classe->relatedNodes().end()) {
+            NodeList::ConstIterator r = classe->relatedNodes().constBegin();
+            while (r != classe->relatedNodes().constEnd()) {
                 if ((*r)->type() == Node::Function) {
                     FunctionNode *func = static_cast<FunctionNode *>(*r);
                     if (func->isMacro())
@@ -703,8 +703,8 @@ QList<Section> CppCodeMarker::sections(const InnerNode *inner,
                 ++r;
             }
 
-            NodeList::ConstIterator c = classe->childNodes().begin();
-            while (c != classe->childNodes().end()) {
+            NodeList::ConstIterator c = classe->childNodes().constBegin();
+            while (c != classe->childNodes().constEnd()) {
                 if ((*c)->type() == Node::Enum ||
                         (*c)->type() == Node::Typedef) {
                     insert(memberTypes, *c, style, status);
@@ -740,8 +740,8 @@ QList<Section> CppCodeMarker::sections(const InnerNode *inner,
             while (!stack.isEmpty()) {
                 const ClassNode *ancestorClass = stack.pop();
 
-                NodeList::ConstIterator c = ancestorClass->childNodes().begin();
-                while (c != ancestorClass->childNodes().end()) {
+                NodeList::ConstIterator c = ancestorClass->childNodes().constBegin();
+                while (c != ancestorClass->childNodes().constEnd()) {
                     if ((*c)->access() != Node::Private &&
                             (*c)->type() != Node::Property)
                         insert(all, *c, style, status);
@@ -749,8 +749,8 @@ QList<Section> CppCodeMarker::sections(const InnerNode *inner,
                 }
 
                 QList<RelatedClass>::ConstIterator r =
-                        ancestorClass->baseClasses().begin();
-                while (r != ancestorClass->baseClasses().end()) {
+                        ancestorClass->baseClasses().constBegin();
+                while (r != ancestorClass->baseClasses().constEnd()) {
                     stack.prepend((*r).node);
                     ++r;
                 }
@@ -791,8 +791,8 @@ QList<Section> CppCodeMarker::sections(const InnerNode *inner,
             NodeList nodeList = inner->childNodes();
             nodeList += inner->relatedNodes();
 
-            NodeList::ConstIterator n = nodeList.begin();
-            while (n != nodeList.end()) {
+            NodeList::ConstIterator n = nodeList.constBegin();
+            while (n != nodeList.constEnd()) {
                 switch ((*n)->type()) {
                 case Node::Namespace:
                     insert(namespaces, *n, style, status);
@@ -1169,12 +1169,12 @@ QList<Section> CppCodeMarker::qmlSections(const QmlClassNode* qmlClassNode, Syno
 
             const QmlClassNode* qcn = qmlClassNode;
             while (qcn != 0) {
-                NodeList::ConstIterator c = qcn->childNodes().begin();
-                while (c != qcn->childNodes().end()) {
+                NodeList::ConstIterator c = qcn->childNodes().constBegin();
+                while (c != qcn->childNodes().constEnd()) {
                     if ((*c)->subType() == Node::QmlPropertyGroup) {
                         const QmlPropGroupNode* qpgn = static_cast<const QmlPropGroupNode*>(*c);
-                        NodeList::ConstIterator p = qpgn->childNodes().begin();
-                        while (p != qpgn->childNodes().end()) {
+                        NodeList::ConstIterator p = qpgn->childNodes().constBegin();
+                        while (p != qpgn->childNodes().constEnd()) {
                             if ((*p)->type() == Node::QmlProperty) {
                                 const QmlPropertyNode* pn = static_cast<const QmlPropertyNode*>(*p);
                                 if (pn->isAttached())
@@ -1194,8 +1194,8 @@ QList<Section> CppCodeMarker::qmlSections(const QmlClassNode* qmlClassNode, Syno
                                 insert(qmlproperties,*c,style,Okay);
                         }
                         else {
-                            NodeList::ConstIterator p = pn->qmlPropNodes().begin();
-                            while (p != pn->qmlPropNodes().end()) {
+                            NodeList::ConstIterator p = pn->qmlPropNodes().constBegin();
+                            while (p != pn->qmlPropNodes().constEnd()) {
                                 if ((*p)->type() == Node::QmlProperty) {
                                     const QmlPropertyNode* pn = static_cast<const QmlPropertyNode*>(*p);
                                     if (pn->isAttached())
@@ -1255,13 +1255,13 @@ QList<Section> CppCodeMarker::qmlSections(const QmlClassNode* qmlClassNode, Syno
                                            "member","members");
             const QmlClassNode* qcn = qmlClassNode;
             while (qcn != 0) {
-                NodeList::ConstIterator c = qcn->childNodes().begin();
-                while (c != qcn->childNodes().end()) {
+                NodeList::ConstIterator c = qcn->childNodes().constBegin();
+                while (c != qcn->childNodes().constEnd()) {
                     if ((*c)->subType() == Node::QmlPropertyGroup) {
                         bool attached = false;
                         const QmlPropGroupNode* pgn = static_cast<const QmlPropGroupNode*>(*c);
-                        NodeList::ConstIterator C = pgn->childNodes().begin();
-                        while (C != pgn->childNodes().end()) {
+                        NodeList::ConstIterator C = pgn->childNodes().constBegin();
+                        while (C != pgn->childNodes().constEnd()) {
                             if ((*C)->type() == Node::QmlProperty) {
                                 const QmlPropertyNode* pn = static_cast<const QmlPropertyNode*>(*C);
                                 if (pn->isAttached()) {
@@ -1323,12 +1323,12 @@ QList<Section> CppCodeMarker::qmlSections(const QmlClassNode* qmlClassNode, Syno
 
             const QmlClassNode* current = qmlClassNode;
             while (current != 0) {
-                NodeList::ConstIterator c = current->childNodes().begin();
-                while (c != current->childNodes().end()) {
+                NodeList::ConstIterator c = current->childNodes().constBegin();
+                while (c != current->childNodes().constEnd()) {
                     if ((*c)->subType() == Node::QmlPropertyGroup) {
                         const QmlPropGroupNode* qpgn = static_cast<const QmlPropGroupNode*>(*c);
-                        NodeList::ConstIterator p = qpgn->childNodes().begin();
-                        while (p != qpgn->childNodes().end()) {
+                        NodeList::ConstIterator p = qpgn->childNodes().constBegin();
+                        while (p != qpgn->childNodes().constEnd()) {
                             if ((*p)->type() == Node::QmlProperty) {
                                 QString key = current->name() + "::" + (*p)->name();
                                 key = sortName(*p, &key);
diff --git a/src/tools/qdoc/cppcodeparser.cpp b/src/tools/qdoc/cppcodeparser.cpp
index e7c7595..affc985 100644
--- a/src/tools/qdoc/cppcodeparser.cpp
+++ b/src/tools/qdoc/cppcodeparser.cpp
@@ -908,7 +908,7 @@ Node *CppCodeParser::processTopicCommandGroup(const QString& command, const ArgL
         QString property;
         QmlClassNode* qmlClass = 0;
         bool attached = (command == COMMAND_QMLATTACHEDPROPERTY);
-        ArgList::ConstIterator argsIter = args.begin();
+        ArgList::ConstIterator argsIter = args.constBegin();
         arg = argsIter->first;
         if (splitQmlPropertyArg(arg,type,module,element,property)) {
             qmlClass = tree_->findQmlClassNode(module,element);
@@ -937,7 +937,7 @@ Node *CppCodeParser::processTopicCommandGroup(const QString& command, const ArgL
                 }
             }
             ++argsIter;
-            while (argsIter != args.end()) {
+            while (argsIter != args.constEnd()) {
                 arg = argsIter->first;
                 if (splitQmlPropertyArg(arg,type,module,element,property)) {
                     if (qmlClass->hasProperty(property)) {
@@ -1110,8 +1110,8 @@ void CppCodeParser::processOtherMetaCommand(const Doc& doc,
         }
         else if (node->type() == Node::Fake && node->subType() == Node::QmlPropertyGroup) {
             QmlPropGroupNode* qpgn = static_cast<QmlPropGroupNode*>(node);
-            NodeList::ConstIterator p = qpgn->childNodes().begin();
-            while (p != qpgn->childNodes().end()) {
+            NodeList::ConstIterator p = qpgn->childNodes().constBegin();
+            while (p != qpgn->childNodes().constEnd()) {
                 if ((*p)->type() == Node::QmlProperty) {
                     QmlPropertyNode* qpn = static_cast<QmlPropertyNode*>(*p);
                     qpn->setDefault();
@@ -1127,8 +1127,8 @@ void CppCodeParser::processOtherMetaCommand(const Doc& doc,
         }
         else if (node->type() == Node::Fake && node->subType() == Node::QmlPropertyGroup) {
             QmlPropGroupNode* qpgn = static_cast<QmlPropGroupNode*>(node);
-            NodeList::ConstIterator p = qpgn->childNodes().begin();
-            while (p != qpgn->childNodes().end()) {
+            NodeList::ConstIterator p = qpgn->childNodes().constBegin();
+            while (p != qpgn->childNodes().constEnd()) {
                 if ((*p)->type() == Node::QmlProperty) {
                     QmlPropertyNode* qpn = static_cast<QmlPropertyNode*>(*p);
                     qpn->setReadOnly(1);
@@ -1155,11 +1155,11 @@ void CppCodeParser::processOtherMetaCommand(const Doc& doc,
 void CppCodeParser::processOtherMetaCommands(const Doc& doc, Node *node)
 {
     const QSet<QString> metaCommands = doc.metaCommandsUsed();
-    QSet<QString>::ConstIterator cmd = metaCommands.begin();
-    while (cmd != metaCommands.end()) {
+    QSet<QString>::ConstIterator cmd = metaCommands.constBegin();
+    while (cmd != metaCommands.constEnd()) {
         ArgList args = doc.metaCommandArgs(*cmd);
-        ArgList::ConstIterator arg = args.begin();
-        while (arg != args.end()) {
+        ArgList::ConstIterator arg = args.constBegin();
+        while (arg != args.constEnd()) {
             processOtherMetaCommand(doc, *cmd, *arg, node);
             ++arg;
         }
@@ -2210,7 +2210,7 @@ bool CppCodeParser::matchDocsAndStuff()
               should be a function description.
              */
             if (topicCommandsUsed.count() > 0) {
-                topic = *topicCommandsUsed.begin();
+                topic = *topicCommandsUsed.constBegin();
                 args = doc.metaCommandArgs(topic);
             }
 
@@ -2263,8 +2263,8 @@ bool CppCodeParser::matchDocsAndStuff()
                     }
                 }
                 else {
-                    ArgList::ConstIterator a = args.begin();
-                    while (a != args.end()) {
+                    ArgList::ConstIterator a = args.constBegin();
+                    while (a != args.constEnd()) {
                         Doc nodeDoc = doc;
                         Node *node = processTopicCommand(nodeDoc,topic,*a);
                         if (node != 0) {
diff --git a/src/tools/qdoc/ditaxmlgenerator.cpp b/src/tools/qdoc/ditaxmlgenerator.cpp
index 1b51ace..9c84c43 100644
--- a/src/tools/qdoc/ditaxmlgenerator.cpp
+++ b/src/tools/qdoc/ditaxmlgenerator.cpp
@@ -525,8 +525,8 @@ void DitaXmlGenerator::initializeGenerator(const Config &config)
 
     config.subVarsAndValues("dita.metadata.default",metadataDefaults);
     QSet<QString> editionNames = config.subVars(CONFIG_EDITION);
-    QSet<QString>::ConstIterator edition = editionNames.begin();
-    while (edition != editionNames.end()) {
+    QSet<QString>::ConstIterator edition = editionNames.constBegin();
+    while (edition != editionNames.constEnd()) {
         QString editionName = *edition;
         QStringList editionModules = config.getStringList(CONFIG_EDITION +
                                                           Config::dot +
@@ -604,8 +604,8 @@ void DitaXmlGenerator::writeGuidAttribute(Node* node)
  */
 QString DitaXmlGenerator::lookupGuid(QString text)
 {
-    QMap<QString, QString>::const_iterator i = name2guidMap.find(text);
-    if (i != name2guidMap.end())
+    QMap<QString, QString>::const_iterator i = name2guidMap.constFind(text);
+    if (i != name2guidMap.constEnd())
         return i.value();
 #if 0
     QString t = QUuid::createUuid().toString();
@@ -627,8 +627,8 @@ QString DitaXmlGenerator::lookupGuid(QString text)
 QString DitaXmlGenerator::lookupGuid(const QString& fileName, const QString& text)
 {
     GuidMap* gm = lookupGuidMap(fileName);
-    GuidMap::const_iterator i = gm->find(text);
-    if (i != gm->end())
+    GuidMap::const_iterator i = gm->constFind(text);
+    if (i != gm->constEnd())
         return i.value();
 #if 0
     QString t = QUuid::createUuid().toString();
@@ -647,8 +647,8 @@ QString DitaXmlGenerator::lookupGuid(const QString& fileName, const QString& tex
  */
 GuidMap* DitaXmlGenerator::lookupGuidMap(const QString& fileName)
 {
-    GuidMaps::const_iterator i = guidMaps.find(fileName);
-    if (i != guidMaps.end())
+    GuidMaps::const_iterator i = guidMaps.constFind(fileName);
+    if (i != guidMaps.constEnd())
         return i.value();
     GuidMap* gm = new GuidMap;
     guidMaps.insert(fileName,gm);
@@ -1103,11 +1103,11 @@ int DitaXmlGenerator::generateAtom(const Atom *atom,
     case Atom::SinceList:
     {
         NewSinceMaps::const_iterator nsmap;
-        nsmap = newSinceMaps.find(atom->string());
+        nsmap = newSinceMaps.constFind(atom->string());
         NewClassMaps::const_iterator ncmap;
-        ncmap = newClassMaps.find(atom->string());
+        ncmap = newClassMaps.constFind(atom->string());
         NewClassMaps::const_iterator nqcmap;
-        nqcmap = newQmlClassMaps.find(atom->string());
+        nqcmap = newQmlClassMaps.constFind(atom->string());
         if ((nsmap != newSinceMaps.constEnd()) && !nsmap.value().isEmpty()) {
             QList<Section> sections;
             QList<Section>::ConstIterator s;
@@ -1854,8 +1854,8 @@ DitaXmlGenerator::generateClassLikeNode(InnerNode* inner, CodeMarker* marker)
         summarySections = marker->sections(inner, CodeMarker::Summary, CodeMarker::Okay);
         if (!summarySections.isEmpty()) {
             enterSection("redundant",QString());
-            s = summarySections.begin();
-            while (s != summarySections.end()) {
+            s = summarySections.constBegin();
+            while (s != summarySections.constEnd()) {
                 if (s->members.isEmpty() && s->reimpMembers.isEmpty()) {
                     if (!s->inherited.isEmpty())
                         needOtherSection = true;
@@ -1889,8 +1889,8 @@ DitaXmlGenerator::generateClassLikeNode(InnerNode* inner, CodeMarker* marker)
                 xmlWriter().writeAttribute("outputclass","h3");
                 xmlWriter().writeCharacters("Additional Inherited Members");
                 writeEndTag(); // </title>
-                s = summarySections.begin();
-                while (s != summarySections.end()) {
+                s = summarySections.constBegin();
+                while (s != summarySections.constEnd()) {
                     if (s->members.isEmpty())
                         generateSectionInheritedList(*s, inner, marker);
                     ++s;
@@ -1906,8 +1906,8 @@ DitaXmlGenerator::generateClassLikeNode(InnerNode* inner, CodeMarker* marker)
 
         QList<Section> detailSections;
         detailSections = marker->sections(inner, CodeMarker::Detailed, CodeMarker::Okay);
-        s = detailSections.begin();
-        while (s != detailSections.end()) {
+        s = detailSections.constBegin();
+        while (s != detailSections.constEnd()) {
             if ((*s).name == "Classes") {
                 writeNestedClasses((*s),nsn);
                 break;
@@ -1915,8 +1915,8 @@ DitaXmlGenerator::generateClassLikeNode(InnerNode* inner, CodeMarker* marker)
             ++s;
         }
 
-        s = detailSections.begin();
-        while (s != detailSections.end()) {
+        s = detailSections.constBegin();
+        while (s != detailSections.constEnd()) {
             if ((*s).name == "Function Documentation") {
                 writeFunctions((*s),nsn,marker);
             }
@@ -1991,8 +1991,8 @@ DitaXmlGenerator::generateClassLikeNode(InnerNode* inner, CodeMarker* marker)
         summarySections = marker->sections(inner, CodeMarker::Summary, CodeMarker::Okay);
         if (!summarySections.isEmpty()) {
             enterSection("redundant",QString());
-            s = summarySections.begin();
-            while (s != summarySections.end()) {
+            s = summarySections.constBegin();
+            while (s != summarySections.constEnd()) {
                 if (s->members.isEmpty() && s->reimpMembers.isEmpty()) {
                     if (!s->inherited.isEmpty())
                         needOtherSection = true;
@@ -2026,8 +2026,8 @@ DitaXmlGenerator::generateClassLikeNode(InnerNode* inner, CodeMarker* marker)
                 xmlWriter().writeAttribute("outputclass","h3");
                 xmlWriter().writeCharacters("Additional Inherited Members");
                 writeEndTag(); // </p>
-                s = summarySections.begin();
-                while (s != summarySections.end()) {
+                s = summarySections.constBegin();
+                while (s != summarySections.constEnd()) {
                     if (s->members.isEmpty())
                         generateSectionInheritedList(*s, inner, marker);
                     ++s;
@@ -2045,8 +2045,8 @@ DitaXmlGenerator::generateClassLikeNode(InnerNode* inner, CodeMarker* marker)
 
         QList<Section> detailSections;
         detailSections = marker->sections(inner, CodeMarker::Detailed, CodeMarker::Okay);
-        s = detailSections.begin();
-        while (s != detailSections.end()) {
+        s = detailSections.constBegin();
+        while (s != detailSections.constEnd()) {
             if ((*s).name == "Member Function Documentation") {
                 writeFunctions((*s),cn,marker);
             }
@@ -2116,8 +2116,8 @@ DitaXmlGenerator::generateClassLikeNode(InnerNode* inner, CodeMarker* marker)
         summarySections = marker->sections(inner, CodeMarker::Summary, CodeMarker::Okay);
         if (!summarySections.isEmpty()) {
             enterSection("redundant",QString());
-            s = summarySections.begin();
-            while (s != summarySections.end()) {
+            s = summarySections.constBegin();
+            while (s != summarySections.constEnd()) {
                 if (s->members.isEmpty() && s->reimpMembers.isEmpty()) {
                     if (!s->inherited.isEmpty())
                         needOtherSection = true;
@@ -2152,8 +2152,8 @@ DitaXmlGenerator::generateClassLikeNode(InnerNode* inner, CodeMarker* marker)
                 xmlWriter().writeAttribute("outputclass","h3");
                 xmlWriter().writeCharacters("Additional Inherited Members");
                 writeEndTag(); // </p>
-                s = summarySections.begin();
-                while (s != summarySections.end()) {
+                s = summarySections.constBegin();
+                while (s != summarySections.constEnd()) {
                     if (s->members.isEmpty())
                         generateSectionInheritedList(*s, inner, marker);
                     ++s;
@@ -2169,8 +2169,8 @@ DitaXmlGenerator::generateClassLikeNode(InnerNode* inner, CodeMarker* marker)
 
         QList<Section> detailSections;
         detailSections = marker->sections(inner, CodeMarker::Detailed, CodeMarker::Okay);
-        s = detailSections.begin();
-        while (s != detailSections.end()) {
+        s = detailSections.constBegin();
+        while (s != detailSections.constEnd()) {
             if ((*s).name == "Classes") {
                 writeNestedClasses((*s),fn);
                 break;
@@ -2178,8 +2178,8 @@ DitaXmlGenerator::generateClassLikeNode(InnerNode* inner, CodeMarker* marker)
             ++s;
         }
 
-        s = detailSections.begin();
-        while (s != detailSections.end()) {
+        s = detailSections.constBegin();
+        while (s != detailSections.constEnd()) {
             if ((*s).name == "Function Documentation") {
                 writeFunctions((*s),fn,marker);
             }
@@ -2240,11 +2240,11 @@ DitaXmlGenerator::generateClassLikeNode(InnerNode* inner, CodeMarker* marker)
 
         QList<Section> members = marker->qmlSections(qcn,CodeMarker::Detailed);
         if (!members.isEmpty()) {
-            s = members.begin();
-            while (s != members.end()) {
+            s = members.constBegin();
+            while (s != members.constEnd()) {
                 if (!s->members.isEmpty()) {
-                    NodeList::ConstIterator m = (*s).members.begin();
-                    while (m != (*s).members.end()) {
+                    NodeList::ConstIterator m = (*s).members.constBegin();
+                    while (m != (*s).members.constEnd()) {
                         generateDetailedQmlMember(*m, qcn, marker);
                         ++m;
                     }
@@ -2702,8 +2702,8 @@ void DitaXmlGenerator::generateTableOfContents(const Node* node,
         }
     }
     else if (sections && (node->type() == Node::Class)) {
-        QList<Section>::ConstIterator s = sections->begin();
-        while (s != sections->end()) {
+        QList<Section>::ConstIterator s = sections->constBegin();
+        while (s != sections->constEnd()) {
             if (!s->members.isEmpty() || !s->reimpMembers.isEmpty()) {
                 out() << "<li class=\"level"
                       << sectionNumber.size()
@@ -2784,8 +2784,8 @@ void DitaXmlGenerator::generateLowStatusMembers(const InnerNode* inner,
     if (sections.isEmpty())
         return;
 
-    QList<Section>::ConstIterator s = sections.begin();
-    while (s != sections.end()) {
+    QList<Section>::ConstIterator s = sections.constBegin();
+    while (s != sections.constEnd()) {
         if ((*s).name == "Member Function Documentation") {
             writeFunctions((*s),inner,marker,attribute);
         }
@@ -2817,8 +2817,8 @@ void DitaXmlGenerator::generateClassHierarchy(const Node* relative,
         return;
 
     NodeMap topLevel;
-    NodeMap::ConstIterator c = classMap.begin();
-    while (c != classMap.end()) {
+    NodeMap::ConstIterator c = classMap.constBegin();
+    while (c != classMap.constEnd()) {
         const ClassNode* classe = static_cast<const ClassNode*>(*c);
         if (classe->baseClasses().isEmpty())
             topLevel.insert(classe->name(), classe);
@@ -2838,7 +2838,7 @@ void DitaXmlGenerator::generateClassHierarchy(const Node* relative,
         }
         else {
             const ClassNode *child =
-                    static_cast<const ClassNode *>(*stack.top().begin());
+                    static_cast<const ClassNode *>(*stack.top().constBegin());
             writeStartTag(DT_li);
             generateFullName(child, relative, marker);
             writeEndTag(); // </li>
@@ -2945,8 +2945,8 @@ void DitaXmlGenerator::generateCompactList(const Node* relative,
         for (int i=0; i<26; ++i)
             count[i] = 0;
 
-        NodeMap::const_iterator iter = classMap.begin();
-        while (iter != classMap.end()) {
+        NodeMap::const_iterator iter = classMap.constBegin();
+        while (iter != classMap.constEnd()) {
             if (!iter.key().contains("::")) {
                 QChar c = iter.key()[0];
                 if ((c >= 'A') && (c <= 'Z')) {
@@ -2986,8 +2986,8 @@ void DitaXmlGenerator::generateCompactList(const Node* relative,
         */
         QString first;
         QString last;
-        NodeMap::const_iterator iter = classMap.begin();
-        while (iter != classMap.end()) {
+        NodeMap::const_iterator iter = classMap.constBegin();
+        while (iter != classMap.constEnd()) {
             if (!iter.key().contains("::")) {
                 first = iter.key();
                 break;
@@ -2996,10 +2996,10 @@ void DitaXmlGenerator::generateCompactList(const Node* relative,
         }
 
         if (first.isEmpty())
-            first = classMap.begin().key();
+            first = classMap.constBegin().key();
 
-        iter = classMap.end();
-        while (iter != classMap.begin()) {
+        iter = classMap.constEnd();
+        while (iter != classMap.constBegin()) {
             --iter;
             if (!iter.key().contains("::")) {
                 last = iter.key();
@@ -3008,7 +3008,7 @@ void DitaXmlGenerator::generateCompactList(const Node* relative,
         }
 
         if (last.isEmpty())
-            last = classMap.begin().key();
+            last = classMap.constBegin().key();
 
         if (classMap.size() > 1) {
             while (commonPrefixLen < first.length() + 1 &&
@@ -3031,8 +3031,8 @@ void DitaXmlGenerator::generateCompactList(const Node* relative,
     QString paragraphName[NumParagraphs+1];
     QSet<char> usedParagraphNames;
 
-    NodeMap::ConstIterator c = classMap.begin();
-    while (c != classMap.end()) {
+    NodeMap::ConstIterator c = classMap.constBegin();
+    while (c != classMap.constEnd()) {
         QStringList pieces = c.key().split("::");
         QString key;
         int idx = commonPrefixLen;
@@ -3194,8 +3194,8 @@ void DitaXmlGenerator::generateFunctionIndex(const Node* relative,
     char currentLetter;
 
     writeStartTag(DT_ul);
-    QMap<QString, NodeMap >::ConstIterator f = funcIndex.begin();
-    while (f != funcIndex.end()) {
+    QMap<QString, NodeMap >::ConstIterator f = funcIndex.constBegin();
+    while (f != funcIndex.constEnd()) {
         writeStartTag(DT_li);
         currentLetter = f.key()[0].unicode();
         while (islower(currentLetter) && currentLetter >= nextLetter) {
@@ -3209,8 +3209,8 @@ void DitaXmlGenerator::generateFunctionIndex(const Node* relative,
         xmlWriter().writeCharacters(protectEnc(f.key()));
         xmlWriter().writeCharacters(":");
 
-        NodeMap::ConstIterator s = (*f).begin();
-        while (s != (*f).end()) {
+        NodeMap::ConstIterator s = (*f).constBegin();
+        while (s != (*f).constEnd()) {
             generateFullName((*s)->parent(), relative, marker, *s);
             ++s;
         }
@@ -3226,8 +3226,8 @@ void DitaXmlGenerator::generateFunctionIndex(const Node* relative,
 void DitaXmlGenerator::generateLegaleseList(const Node* relative,
                                             CodeMarker* marker)
 {
-    QMap<Text, const Node*>::ConstIterator it = legaleseTexts.begin();
-    while (it != legaleseTexts.end()) {
+    QMap<Text, const Node*>::ConstIterator it = legaleseTexts.constBegin();
+    while (it != legaleseTexts.constEnd()) {
         Text text = it.key();
         generateText(text, relative, marker);
         writeStartTag(DT_ul);
@@ -3236,7 +3236,7 @@ void DitaXmlGenerator::generateLegaleseList(const Node* relative,
             generateFullName(it.value(), relative, marker);
             writeEndTag(); // </li>
             ++it;
-        } while (it != legaleseTexts.end() && it.key() == text);
+        } while (it != legaleseTexts.constEnd() && it.key() == text);
         writeEndTag(); //</ul>
     }
 }
@@ -3413,8 +3413,8 @@ void DitaXmlGenerator::generateSection(const NodeList& nl,
 {
     if (!nl.isEmpty()) {
         writeStartTag(DT_ul);
-        NodeList::ConstIterator m = nl.begin();
-        while (m != nl.end()) {
+        NodeList::ConstIterator m = nl.constBegin();
+        while (m != nl.constEnd()) {
             if ((*m)->access() != Node::Private) {
                 writeStartTag(DT_li);
                 QString marked = getMarkedUpSynopsis(*m, relative, marker, style);
@@ -3437,8 +3437,8 @@ void DitaXmlGenerator::generateSectionInheritedList(const Section& section,
     if (section.inherited.isEmpty())
         return;
     writeStartTag(DT_ul);
-    QList<QPair<InnerNode*,int> >::ConstIterator p = section.inherited.begin();
-    while (p != section.inherited.end()) {
+    QList<QPair<InnerNode*,int> >::ConstIterator p = section.inherited.constBegin();
+    while (p != section.inherited.constEnd()) {
         writeStartTag(DT_li);
         QString text;
         text.setNum((*p).second);
@@ -4063,8 +4063,8 @@ void DitaXmlGenerator::findAllClasses(const InnerNode* node)
 
 void DitaXmlGenerator::findAllFunctions(const InnerNode* node)
 {
-    NodeList::ConstIterator c = node->childNodes().begin();
-    while (c != node->childNodes().end()) {
+    NodeList::ConstIterator c = node->childNodes().constBegin();
+    while (c != node->childNodes().constEnd()) {
         if ((*c)->access() != Node::Private) {
             if ((*c)->isInnerNode() && (*c)->url().isEmpty()) {
                 findAllFunctions(static_cast<const InnerNode*>(*c));
@@ -4085,8 +4085,8 @@ void DitaXmlGenerator::findAllFunctions(const InnerNode* node)
 
 void DitaXmlGenerator::findAllLegaleseTexts(const InnerNode* node)
 {
-    NodeList::ConstIterator c = node->childNodes().begin();
-    while (c != node->childNodes().end()) {
+    NodeList::ConstIterator c = node->childNodes().constBegin();
+    while (c != node->childNodes().constEnd()) {
         if ((*c)->access() != Node::Private) {
             if (!(*c)->doc().legaleseText().isEmpty())
                 legaleseTexts.insertMulti((*c)->doc().legaleseText(), *c);
@@ -4099,8 +4099,8 @@ void DitaXmlGenerator::findAllLegaleseTexts(const InnerNode* node)
 
 void DitaXmlGenerator::findAllNamespaces(const InnerNode* node)
 {
-    NodeList::ConstIterator c = node->childNodes().begin();
-    while (c != node->childNodes().end()) {
+    NodeList::ConstIterator c = node->childNodes().constBegin();
+    while (c != node->childNodes().constEnd()) {
         if ((*c)->access() != Node::Private) {
             if ((*c)->isInnerNode() && (*c)->url().isEmpty()) {
                 findAllNamespaces(static_cast<const InnerNode *>(*c));
@@ -4413,8 +4413,8 @@ void DitaXmlGenerator::generateQmlSummary(const Section& section,
     if (!section.members.isEmpty()) {
         writeStartTag(DT_ul);
         NodeList::ConstIterator m;
-        m = section.members.begin();
-        while (m != section.members.end()) {
+        m = section.members.constBegin();
+        while (m != section.members.constEnd()) {
             writeStartTag(DT_li);
             generateQmlItem(*m,relative,marker,true);
             writeEndTag(); // </li>
@@ -4481,7 +4481,7 @@ void DitaXmlGenerator::generateDetailedQmlMember(Node* node,
 
     if (node->subType() == Node::QmlPropertyGroup) {
         const QmlPropGroupNode* qpgn = static_cast<const QmlPropGroupNode*>(node);
-        NodeList::ConstIterator p = qpgn->childNodes().begin();
+        NodeList::ConstIterator p = qpgn->childNodes().constBegin();
         if (qpgn->childNodes().size() == 1) {
             qpn = static_cast<QmlPropertyNode*>(*p);
             startQmlProperty(qpn,relative,marker);
@@ -4500,7 +4500,7 @@ void DitaXmlGenerator::generateDetailedQmlMember(Node* node,
             writeStartTag(DT_qmlPropertyGroupDetail);
             writeApiDesc(node, marker, node->title());
             writeEndTag(); // </qmlPropertyGroupDetail>
-            while (p != qpgn->childNodes().end()) {
+            while (p != qpgn->childNodes().constEnd()) {
                 if ((*p)->type() == Node::QmlProperty) {
                     qpn = static_cast<QmlPropertyNode*>(*p);
                     startQmlProperty(qpn,relative,marker);
@@ -4546,8 +4546,8 @@ void DitaXmlGenerator::generateDetailedQmlMember(Node* node,
             writeStartTag(DT_qmlPropertyGroupDetail);
             writeApiDesc(node, marker, node->title());
             writeEndTag(); // </qmlPropertyGroupDetail>
-            NodeList::ConstIterator p = qpn->qmlPropNodes().begin();
-            while (p != qpn->qmlPropNodes().end()) {
+            NodeList::ConstIterator p = qpn->qmlPropNodes().constBegin();
+            while (p != qpn->qmlPropNodes().constEnd()) {
                 if ((*p)->type() == Node::QmlProperty) {
                     QmlPropertyNode* q = static_cast<QmlPropertyNode*>(*p);
                     startQmlProperty(q,relative,marker);
@@ -4793,8 +4793,8 @@ void DitaXmlGenerator::writeDerivations(const ClassNode* cn, CodeMarker* marker)
 
     if (!cn->baseClasses().isEmpty()) {
         writeStartTag(DT_cxxClassDerivations);
-        r = cn->baseClasses().begin();
-        while (r != cn->baseClasses().end()) {
+        r = cn->baseClasses().constBegin();
+        while (r != cn->baseClasses().constEnd()) {
             writeStartTag(DT_cxxClassDerivation);
             writeStartTag(DT_cxxClassDerivationAccessSpecifier);
             xmlWriter().writeAttribute("value",(*r).accessString());
@@ -4900,8 +4900,8 @@ void DitaXmlGenerator::writeFunctions(const Section& s,
                                       CodeMarker* marker,
                                       const QString& attribute)
 {
-    NodeList::ConstIterator m = s.members.begin();
-    while (m != s.members.end()) {
+    NodeList::ConstIterator m = s.members.constBegin();
+    while (m != s.members.constEnd()) {
         if ((*m)->type() == Node::Function) {
             FunctionNode* fn = const_cast<FunctionNode*>(static_cast<const FunctionNode*>(*m));
             writeStartTag(DT_cxxFunction);
@@ -5091,8 +5091,8 @@ void DitaXmlGenerator::writeParameters(const FunctionNode* fn,
     const QList<Parameter>& parameters = fn->parameters();
     if (!parameters.isEmpty()) {
         writeStartTag(DT_cxxFunctionParameters);
-        QList<Parameter>::ConstIterator p = parameters.begin();
-        while (p != parameters.end()) {
+        QList<Parameter>::ConstIterator p = parameters.constBegin();
+        while (p != parameters.constEnd()) {
             writeStartTag(DT_cxxFunctionParameter);
             writeStartTag(DT_cxxFunctionParameterDeclaredType);
             QString src = marker->typified((*p).leftType());
@@ -5129,8 +5129,8 @@ void DitaXmlGenerator::writeEnumerations(const Section& s,
                                          CodeMarker* marker,
                                          const QString& attribute)
 {
-    NodeList::ConstIterator m = s.members.begin();
-    while (m != s.members.end()) {
+    NodeList::ConstIterator m = s.members.constBegin();
+    while (m != s.members.constEnd()) {
         if ((*m)->type() == Node::Enum) {
             const EnumNode* en = static_cast<const EnumNode*>(*m);
             writeStartTag(DT_cxxEnumeration);
@@ -5161,15 +5161,15 @@ void DitaXmlGenerator::writeEnumerations(const Section& s,
                 writeStartTag(DT_cxxEnumerationPrototype);
                 writeCharacters(en->name());
                 xmlWriter().writeCharacters(" = { ");
-                QList<EnumItem>::ConstIterator i = items.begin();
-                while (i != items.end()) {
+                QList<EnumItem>::ConstIterator i = items.constBegin();
+                while (i != items.constEnd()) {
                     writeCharacters((*i).name());
                     if (!(*i).value().isEmpty()) {
                         xmlWriter().writeCharacters(" = ");
                         writeCharacters((*i).value());
                     }
                     ++i;
-                    if (i != items.end())
+                    if (i != items.constEnd())
                         xmlWriter().writeCharacters(", ");
                 }
                 xmlWriter().writeCharacters(" }");
@@ -5184,8 +5184,8 @@ void DitaXmlGenerator::writeEnumerations(const Section& s,
 
             if (!items.isEmpty()) {
                 writeStartTag(DT_cxxEnumerators);
-                QList<EnumItem>::ConstIterator i = items.begin();
-                while (i != items.end()) {
+                QList<EnumItem>::ConstIterator i = items.constBegin();
+                while (i != items.constEnd()) {
                     writeStartTag(DT_cxxEnumerator);
                     writeStartTag(DT_apiName);
                     writeCharacters((*i).name());
@@ -5251,8 +5251,8 @@ void DitaXmlGenerator::writeTypedefs(const Section& s,
                                      const QString& attribute)
 
 {
-    NodeList::ConstIterator m = s.members.begin();
-    while (m != s.members.end()) {
+    NodeList::ConstIterator m = s.members.constBegin();
+    while (m != s.members.constEnd()) {
         if ((*m)->type() == Node::Typedef) {
             const TypedefNode* tn = static_cast<const TypedefNode*>(*m);
             writeStartTag(DT_cxxTypedef);
@@ -5314,8 +5314,8 @@ void DitaXmlGenerator::writeProperties(const Section& s,
                                        CodeMarker* marker,
                                        const QString& attribute)
 {
-    NodeList::ConstIterator m = s.members.begin();
-    while (m != s.members.end()) {
+    NodeList::ConstIterator m = s.members.constBegin();
+    while (m != s.members.constEnd()) {
         if ((*m)->type() == Node::Property) {
             const PropertyNode* pn = static_cast<const PropertyNode*>(*m);
             writeStartTag(DT_cxxVariable);
@@ -5426,8 +5426,8 @@ void DitaXmlGenerator::writeDataMembers(const Section& s,
                                         CodeMarker* marker,
                                         const QString& attribute)
 {
-    NodeList::ConstIterator m = s.members.begin();
-    while (m != s.members.end()) {
+    NodeList::ConstIterator m = s.members.constBegin();
+    while (m != s.members.constEnd()) {
         if ((*m)->type() == Node::Variable) {
             const VariableNode* vn = static_cast<const VariableNode*>(*m);
             writeStartTag(DT_cxxVariable);
@@ -5510,8 +5510,8 @@ void DitaXmlGenerator::writeMacros(const Section& s,
                                    CodeMarker* marker,
                                    const QString& attribute)
 {
-    NodeList::ConstIterator m = s.members.begin();
-    while (m != s.members.end()) {
+    NodeList::ConstIterator m = s.members.constBegin();
+    while (m != s.members.constEnd()) {
         if ((*m)->type() == Node::Function) {
             const FunctionNode* fn = static_cast<const FunctionNode*>(*m);
             if (fn->isMacro()) {
@@ -5607,8 +5607,8 @@ void DitaXmlGenerator::writeMacros(const Section& s,
  */
 void DitaXmlGenerator::writePropertyParameter(const QString& tag, const NodeList& nlist)
 {
-    NodeList::const_iterator n = nlist.begin();
-    while (n != nlist.end()) {
+    NodeList::const_iterator n = nlist.constBegin();
+    while (n != nlist.constEnd()) {
         xmlWriter().writeCharacters(" ");
         writeCharacters(tag);
         xmlWriter().writeCharacters(" ");
@@ -5695,8 +5695,8 @@ void DitaXmlGenerator::writeNestedClasses(const Section& s,
     writeStartTag(DT_cxxClassNested);
     writeStartTag(DT_cxxClassNestedDetail);
 
-    NodeList::ConstIterator m = s.members.begin();
-    while (m != s.members.end()) {
+    NodeList::ConstIterator m = s.members.constBegin();
+    while (m != s.members.constEnd()) {
         if ((*m)->type() == Node::Class) {
             writeStartTag(DT_cxxClassNestedClass);
             QString link = linkForNode((*m), n);
@@ -5767,8 +5767,8 @@ DitaXmlGenerator::generateInnerNode(InnerNode* node)
         }
     }
 
-    NodeList::ConstIterator c = node->childNodes().begin();
-    while (c != node->childNodes().end()) {
+    NodeList::ConstIterator c = node->childNodes().constBegin();
+    while (c != node->childNodes().constEnd()) {
         if ((*c)->isInnerNode() && (*c)->access() != Node::Private)
             generateInnerNode((InnerNode*)*c);
         ++c;
@@ -5951,8 +5951,8 @@ void DitaXmlGenerator::writeDitaMap(Tree *tree)
     xmlWriter().writeCharacters("The top level map for the Qt documentation");
     writeEndTag(); // </shortdesc>
     writeEndTag(); // </topicmeta>
-    GuidMaps::iterator i = guidMaps.begin();
-    while (i != guidMaps.end()) {
+    GuidMaps::iterator i = guidMaps.constBegin();
+    while (i != guidMaps.constEnd()) {
         writeStartTag(DT_topicref);
         if (i.key() != "qt.ditamap")
             xmlWriter().writeAttribute("href",i.key());
@@ -6415,14 +6415,14 @@ DitaXmlGenerator::writeProlog(const InnerNode* inner)
         writeStartTag(DT_othermeta);
         xmlWriter().writeAttribute("name","includeFile");
         QString text;
-        QStringList::ConstIterator i = inner->includes().begin();
-        while (i != inner->includes().end()) {
+        QStringList::ConstIterator i = inner->includes().constBegin();
+        while (i != inner->includes().constEnd()) {
             if ((*i).startsWith(QLatin1Char('<')) && (*i).endsWith(QLatin1Char('>')))
                 text += *i;
             else
                 text += QLatin1Char('<') + *i + QLatin1Char('>');
             ++i;
-            if (i != inner->includes().end())
+            if (i != inner->includes().constEnd())
                 text += "\n";
         }
         xmlWriter().writeAttribute("content",text);
@@ -6506,8 +6506,8 @@ void DitaXmlGenerator::generateCollisionPages()
         NodeList collisions;
         const NodeList& nl = ncn->childNodes();
         if (!nl.isEmpty()) {
-            NodeList::ConstIterator it = nl.begin();
-            while (it != nl.end()) {
+            NodeList::ConstIterator it = nl.constBegin();
+            while (it != nl.constEnd()) {
                 if (!(*it)->isInternal())
                     collisions.append(*it);
                 ++it;
@@ -6545,8 +6545,8 @@ void DitaXmlGenerator::generateCollisionPages()
 
         QList<QString> targets;
         if (!ncn->linkTargets().isEmpty()) {
-            QMap<QString,QString>::ConstIterator t = ncn->linkTargets().begin();
-            while (t != ncn->linkTargets().end()) {
+            QMap<QString,QString>::ConstIterator t = ncn->linkTargets().constBegin();
+            while (t != ncn->linkTargets().constEnd()) {
                 int count = 0;
                 for (int i=0; i<collisions.size(); ++i) {
                     InnerNode* n = static_cast<InnerNode*>(collisions.at(i));
@@ -6562,8 +6562,8 @@ void DitaXmlGenerator::generateCollisionPages()
             }
         }
         if (!targets.isEmpty()) {
-            QList<QString>::ConstIterator t = targets.begin();
-            while (t != targets.end()) {
+            QList<QString>::ConstIterator t = targets.constBegin();
+            while (t != targets.constEnd()) {
                 writeStartTag(DT_p);
                 writeGuidAttribute(Doc::canonicalTitle(*t));
                 xmlWriter().writeAttribute("outputclass","h2");
diff --git a/src/tools/qdoc/doc.cpp b/src/tools/qdoc/doc.cpp
index 3086a64..15d194e 100644
--- a/src/tools/qdoc/doc.cpp
+++ b/src/tools/qdoc/doc.cpp
@@ -1403,13 +1403,13 @@ void DocParser::parse(const QString& source,
                         const Macro &macro = macroHash()->value(cmdStr);
                         int numPendingFi = 0;
                         QStringMap::ConstIterator d;
-                        d = macro.otherDefs.begin();
-                        while (d != macro.otherDefs.end()) {
+                        d = macro.otherDefs.constBegin();
+                        while (d != macro.otherDefs.constEnd()) {
                             append(Atom::FormatIf, d.key());
                             expandMacro(cmdStr, *d, macro.numParams);
                             ++d;
 
-                            if (d == macro.otherDefs.end()) {
+                            if (d == macro.otherDefs.constEnd()) {
                                 append(Atom::FormatEndif);
                             }
                             else {
@@ -1785,8 +1785,8 @@ void DocParser::startFormat(const QString& format, int cmd)
 {
     enterPara();
 
-    QMap<int, QString>::ConstIterator f = pendingFormats.begin();
-    while (f != pendingFormats.end()) {
+    QMap<int, QString>::ConstIterator f = pendingFormats.constBegin();
+    while (f != pendingFormats.constEnd()) {
         if (*f == format) {
             location().warning(tr("Cannot nest '\\%1' commands")
                                .arg(cmdName(cmd)));
@@ -3108,8 +3108,8 @@ void Doc::initialize(const Config& config)
     QStringMap reverseAliasMap;
 
     QSet<QString> commands = config.subVars(CONFIG_ALIAS);
-    QSet<QString>::ConstIterator c = commands.begin();
-    while (c != commands.end()) {
+    QSet<QString>::ConstIterator c = commands.constBegin();
+    while (c != commands.constEnd()) {
         QString alias = config.getString(CONFIG_ALIAS + Config::dot + *c);
         if (reverseAliasMap.contains(alias)) {
             config.lastLocation().warning(tr("Command name '\\%1' cannot stand"
@@ -3136,8 +3136,8 @@ void Doc::initialize(const Config& config)
     }
 
     QSet<QString> macroNames = config.subVars(CONFIG_MACRO);
-    QSet<QString>::ConstIterator n = macroNames.begin();
-    while (n != macroNames.end()) {
+    QSet<QString>::ConstIterator n = macroNames.constBegin();
+    while (n != macroNames.constEnd()) {
         QString macroDotName = CONFIG_MACRO + Config::dot + *n;
         Macro macro;
         macro.numParams = -1;
@@ -3149,8 +3149,8 @@ void Doc::initialize(const Config& config)
         bool silent = false;
 
         QSet<QString> formats = config.subVars(macroDotName);
-        QSet<QString>::ConstIterator f = formats.begin();
-        while (f != formats.end()) {
+        QSet<QString>::ConstIterator f = formats.constBegin();
+        while (f != formats.constEnd()) {
             QString def = config.getString(macroDotName + Config::dot + *f);
             if (!def.isEmpty()) {
                 macro.otherDefs.insert(*f, def);
@@ -3162,7 +3162,7 @@ void Doc::initialize(const Config& config)
                     if (!silent) {
                         QString other = tr("default");
                         if (macro.defaultDef.isEmpty())
-                            other = macro.otherDefs.begin().key();
+                            other = macro.otherDefs.constBegin().key();
                         config.lastLocation().warning(tr("Macro '\\%1' takes"
                                                          " inconsistent number"
                                                          " of arguments (%2"
diff --git a/src/tools/qdoc/editdistance.cpp b/src/tools/qdoc/editdistance.cpp
index 6538f6b..353f863 100644
--- a/src/tools/qdoc/editdistance.cpp
+++ b/src/tools/qdoc/editdistance.cpp
@@ -88,8 +88,8 @@ QString nearestName( const QString& actual, const QSet<QString>& candidates )
     int numBest = 0;
     QString best;
 
-    QSet<QString>::ConstIterator c = candidates.begin();
-    while ( c != candidates.end() ) {
+    QSet<QString>::ConstIterator c = candidates.constBegin();
+    while ( c != candidates.constEnd() ) {
         if ( (*c)[0] == actual[0] ) {
             int delta = editDistance( actual, *c );
             if ( delta < deltaBest ) {
diff --git a/src/tools/qdoc/generator.cpp b/src/tools/qdoc/generator.cpp
index a0c7893..4f0c69f 100644
--- a/src/tools/qdoc/generator.cpp
+++ b/src/tools/qdoc/generator.cpp
@@ -146,9 +146,9 @@ void Generator::appendFullNames(Text& text,
                                 const Node* relative,
                                 CodeMarker* marker)
 {
-    NodeList::ConstIterator n = nodes.begin();
+    NodeList::ConstIterator n = nodes.constBegin();
     int index = 0;
-    while (n != nodes.end()) {
+    while (n != nodes.constEnd()) {
         appendFullName(text,*n,relative,marker);
         text << comma(index++,nodes.count());
         ++n;
@@ -164,8 +164,8 @@ void Generator::appendSortedNames(Text& text,
     QMap<QString,Text> classMap;
     int index = 0;
 
-    r = classes.begin();
-    while (r != classes.end()) {
+    r = classes.constBegin();
+    while (r != classes.constEnd()) {
         if ((*r).node->access() == Node::Public &&
                 (*r).node->status() != Node::Internal
                 && !(*r).node->doc().isEmpty()) {
@@ -755,8 +755,8 @@ void Generator::generateBody(const Node *node, CodeMarker *marker)
             const EnumNode *enume = (const EnumNode *) node;
 
             QSet<QString> definedItems;
-            QList<EnumItem>::ConstIterator it = enume->items().begin();
-            while (it != enume->items().end()) {
+            QList<EnumItem>::ConstIterator it = enume->items().constBegin();
+            while (it != enume->items().constEnd()) {
                 definedItems.insert((*it).name());
                 ++it;
             }
@@ -765,8 +765,8 @@ void Generator::generateBody(const Node *node, CodeMarker *marker)
             QSet<QString> allItems = definedItems + documentedItems;
             if (allItems.count() > definedItems.count() ||
                     allItems.count() > documentedItems.count()) {
-                QSet<QString>::ConstIterator a = allItems.begin();
-                while (a != allItems.end()) {
+                QSet<QString>::ConstIterator a = allItems.constBegin();
+                while (a != allItems.constEnd()) {
                     if (!definedItems.contains(*a)) {
                         QString details;
                         QString best = nearestName(*a, definedItems);
@@ -790,8 +790,8 @@ void Generator::generateBody(const Node *node, CodeMarker *marker)
         else if (node->type() == Node::Function) {
             const FunctionNode *func = static_cast<const FunctionNode *>(node);
             QSet<QString> definedParams;
-            QList<Parameter>::ConstIterator p = func->parameters().begin();
-            while (p != func->parameters().end()) {
+            QList<Parameter>::ConstIterator p = func->parameters().constBegin();
+            while (p != func->parameters().constEnd()) {
                 if ((*p).name().isEmpty() && (*p).leftType() != QLatin1String("...")
                         && func->name() != QLatin1String("operator++")
                         && func->name() != QLatin1String("operator--")) {
@@ -807,8 +807,8 @@ void Generator::generateBody(const Node *node, CodeMarker *marker)
             QSet<QString> allParams = definedParams + documentedParams;
             if (allParams.count() > definedParams.count()
                     || allParams.count() > documentedParams.count()) {
-                QSet<QString>::ConstIterator a = allParams.begin();
-                while (a != allParams.end()) {
+                QSet<QString>::ConstIterator a = allParams.constBegin();
+                while (a != allParams.constEnd()) {
                     if (!definedParams.contains(*a)) {
                         QString details;
                         QString best = nearestName(*a, definedParams);
@@ -980,9 +980,9 @@ void Generator::generateInherits(const ClassNode *classe, CodeMarker *marker)
              << "Inherits: "
              << Atom(Atom::FormattingRight,ATOM_FORMATTING_BOLD);
 
-        r = classe->baseClasses().begin();
+        r = classe->baseClasses().constBegin();
         index = 0;
-        while (r != classe->baseClasses().end()) {
+        while (r != classe->baseClasses().constEnd()) {
             text << Atom(Atom::LinkNode, CodeMarker::stringForNode((*r).node))
                  << Atom(Atom::FormattingLeft, ATOM_FORMATTING_LINK)
                  << Atom(Atom::String, (*r).dataTypeWithTemplateArgs)
@@ -1055,8 +1055,8 @@ void Generator::generateInnerNode(InnerNode* node)
         }
     }
 
-    NodeList::ConstIterator c = node->childNodes().begin();
-    while (c != node->childNodes().end()) {
+    NodeList::ConstIterator c = node->childNodes().constBegin();
+    while (c != node->childNodes().constEnd()) {
         if ((*c)->isInnerNode() && (*c)->access() != Node::Private) {
             generateInnerNode((InnerNode*)*c);
         }
@@ -1323,8 +1323,8 @@ void Generator::generateThreadSafeness(const Node *node, CodeMarker *marker)
             NodeList reentrant;
             NodeList threadsafe;
             NodeList nonreentrant;
-            NodeList::ConstIterator c = innerNode->childNodes().begin();
-            while (c != innerNode->childNodes().end()) {
+            NodeList::ConstIterator c = innerNode->childNodes().constBegin();
+            while (c != innerNode->childNodes().constEnd()) {
 
                 if ((*c)->status() != Node::Obsolete){
                     switch ((*c)->threadSafeness()) {
@@ -1420,8 +1420,8 @@ void Generator::generateTree(Tree *tree)
 
 Generator *Generator::generatorForFormat(const QString& format)
 {
-    QList<Generator *>::ConstIterator g = generators.begin();
-    while (g != generators.end()) {
+    QList<Generator *>::ConstIterator g = generators.constBegin();
+    while (g != generators.constEnd()) {
         if ((*g)->format() == format)
             return *g;
         ++g;
@@ -1600,22 +1600,22 @@ void Generator::initialize(const Config &config)
     QString imagesDotFileExtensions =
             CONFIG_IMAGES + Config::dot + CONFIG_FILEEXTENSIONS;
     QSet<QString> formats = config.subVars(imagesDotFileExtensions);
-    QSet<QString>::ConstIterator f = formats.begin();
-    while (f != formats.end()) {
+    QSet<QString>::ConstIterator f = formats.constBegin();
+    while (f != formats.constEnd()) {
         imgFileExts[*f] = config.getStringList(imagesDotFileExtensions +
                                                Config::dot + *f);
         ++f;
     }
 
-    QList<Generator *>::ConstIterator g = generators.begin();
-    while (g != generators.end()) {
+    QList<Generator *>::ConstIterator g = generators.constBegin();
+    while (g != generators.constEnd()) {
         if (outputFormats.contains((*g)->format())) {
             currentGenerator_ = (*g);
             (*g)->initializeGenerator(config);
             QStringList extraImages =
                     config.getCleanPathList(CONFIG_EXTRAIMAGES+Config::dot+(*g)->format());
-            QStringList::ConstIterator e = extraImages.begin();
-            while (e != extraImages.end()) {
+            QStringList::ConstIterator e = extraImages.constBegin();
+            while (e != extraImages.constEnd()) {
                 QString userFriendlyFilePath;
                 QString filePath = Config::findFile(config.lastLocation(),
                                                     imageFiles,
@@ -1641,8 +1641,8 @@ void Generator::initialize(const Config &config)
                 QStringList searchDirs = QStringList() << templateDir;
                 QStringList scripts =
                         config.getCleanPathList((*g)->format()+Config::dot+CONFIG_SCRIPTS);
-                e = scripts.begin();
-                while (e != scripts.end()) {
+                e = scripts.constBegin();
+                while (e != scripts.constEnd()) {
                     QString userFriendlyFilePath;
                     QString filePath = Config::findFile(config.lastLocation(),
                                                         scriptFiles,
@@ -1661,8 +1661,8 @@ void Generator::initialize(const Config &config)
 
                 QStringList styles =
                         config.getCleanPathList((*g)->format()+Config::dot+CONFIG_STYLESHEETS);
-                e = styles.begin();
-                while (e != styles.end()) {
+                e = styles.constBegin();
+                while (e != styles.constEnd()) {
                     QString userFriendlyFilePath;
                     QString filePath = Config::findFile(config.lastLocation(),
                                                         styleFiles,
@@ -1685,13 +1685,13 @@ void Generator::initialize(const Config &config)
 
     QRegExp secondParamAndAbove("[\2-\7]");
     QSet<QString> formattingNames = config.subVars(CONFIG_FORMATTING);
-    QSet<QString>::ConstIterator n = formattingNames.begin();
-    while (n != formattingNames.end()) {
+    QSet<QString>::ConstIterator n = formattingNames.constBegin();
+    while (n != formattingNames.constEnd()) {
         QString formattingDotName = CONFIG_FORMATTING + Config::dot + *n;
 
         QSet<QString> formats = config.subVars(formattingDotName);
-        QSet<QString>::ConstIterator f = formats.begin();
-        while (f != formats.end()) {
+        QSet<QString>::ConstIterator f = formats.constBegin();
+        while (f != formats.constEnd()) {
             QString def = config.getString(formattingDotName +
                                            Config::dot + *f);
             if (!def.isEmpty()) {
@@ -1953,8 +1953,8 @@ void Generator::supplementAlsoList(const Node *node, QList<Text> &alsoList)
 
 void Generator::terminate()
 {
-    QList<Generator *>::ConstIterator g = generators.begin();
-    while (g != generators.end()) {
+    QList<Generator *>::ConstIterator g = generators.constBegin();
+    while (g != generators.constEnd()) {
         if (outputFormats.contains((*g)->format()))
             (*g)->terminateGenerator();
         ++g;
diff --git a/src/tools/qdoc/helpprojectwriter.cpp b/src/tools/qdoc/helpprojectwriter.cpp
index 626d9aa..5e4a60b 100644
--- a/src/tools/qdoc/helpprojectwriter.cpp
+++ b/src/tools/qdoc/helpprojectwriter.cpp
@@ -606,7 +606,7 @@ void HelpProjectWriter::generateProject(HelpProject &project)
 
     // Write customFilter elements.
     QHash<QString, QSet<QString> >::ConstIterator it;
-    for (it = project.customFilters.begin(); it != project.customFilters.end(); ++it) {
+    for (it = project.customFilters.constBegin(); it != project.customFilters.constEnd(); ++it) {
         writer.writeStartElement("customFilter");
         writer.writeAttribute("name", it.key());
         foreach (const QString &filter, it.value())
diff --git a/src/tools/qdoc/htmlgenerator.cpp b/src/tools/qdoc/htmlgenerator.cpp
index 0fdc8bf..83f3c4a 100644
--- a/src/tools/qdoc/htmlgenerator.cpp
+++ b/src/tools/qdoc/htmlgenerator.cpp
@@ -185,8 +185,8 @@ void HtmlGenerator::initializeGenerator(const Config &config)
         naturalLanguage = QLatin1String("en");
 
     QSet<QString> editionNames = config.subVars(CONFIG_EDITION);
-    QSet<QString>::ConstIterator edition = editionNames.begin();
-    while (edition != editionNames.end()) {
+    QSet<QString>::ConstIterator edition = editionNames.constBegin();
+    while (edition != editionNames.constEnd()) {
         QString editionName = *edition;
         QStringList editionModules = config.getStringList(CONFIG_EDITION +
                                                           Config::dot +
@@ -608,11 +608,11 @@ int HtmlGenerator::generateAtom(const Atom *atom,
     case Atom::SinceList:
     {
         NewSinceMaps::const_iterator nsmap;
-        nsmap = newSinceMaps.find(atom->string());
+        nsmap = newSinceMaps.constFind(atom->string());
         NewClassMaps::const_iterator ncmap;
-        ncmap = newClassMaps.find(atom->string());
+        ncmap = newClassMaps.constFind(atom->string());
         NewClassMaps::const_iterator nqcmap;
-        nqcmap = newQmlClassMaps.find(atom->string());
+        nqcmap = newQmlClassMaps.constFind(atom->string());
 
         if ((nsmap != newSinceMaps.constEnd()) && !nsmap.value().isEmpty()) {
             QList<Section> sections;
@@ -1231,8 +1231,8 @@ void HtmlGenerator::generateClassLikeNode(InnerNode* inner, CodeMarker* marker)
     /*
       sections is built above for the call to generateTableOfContents().
      */
-    s = sections.begin();
-    while (s != sections.end()) {
+    s = sections.constBegin();
+    while (s != sections.constEnd()) {
         if (s->members.isEmpty() && s->reimpMembers.isEmpty()) {
             if (!s->inherited.isEmpty())
                 needOtherSection = true;
@@ -1269,8 +1269,8 @@ void HtmlGenerator::generateClassLikeNode(InnerNode* inner, CodeMarker* marker)
         out() << "<h3>Additional Inherited Members</h3>\n"
                  "<ul>\n";
 
-        s = sections.begin();
-        while (s != sections.end()) {
+        s = sections.constBegin();
+        while (s != sections.constEnd()) {
             if (s->members.isEmpty() && !s->inherited.isEmpty())
                 generateSectionInheritedList(*s, inner, marker);
             ++s;
@@ -1293,15 +1293,15 @@ void HtmlGenerator::generateClassLikeNode(InnerNode* inner, CodeMarker* marker)
     }
 
     sections = marker->sections(inner, CodeMarker::Detailed, CodeMarker::Okay);
-    s = sections.begin();
-    while (s != sections.end()) {
+    s = sections.constBegin();
+    while (s != sections.constEnd()) {
         //out() << "<hr />\n";
         if (!(*s).divClass.isEmpty())
             out() << "<div class=\"" << (*s).divClass << "\">\n"; // QTBUG-9504
         out() << "<h2>" << protectEnc((*s).name) << "</h2>\n";
 
-        NodeList::ConstIterator m = (*s).members.begin();
-        while (m != (*s).members.end()) {
+        NodeList::ConstIterator m = (*s).members.constBegin();
+        while (m != (*s).members.constEnd()) {
             if ((*m)->access() != Node::Private) { // ### check necessary?
                 if ((*m)->type() != Node::Class)
                     generateDetailedMember(*m, inner, marker);
@@ -1382,8 +1382,8 @@ void HtmlGenerator::generateCollisionPages()
         NodeList collisions;
         const NodeList& nl = ncn->childNodes();
         if (!nl.isEmpty()) {
-            NodeList::ConstIterator it = nl.begin();
-            while (it != nl.end()) {
+            NodeList::ConstIterator it = nl.constBegin();
+            while (it != nl.constEnd()) {
                 if (!(*it)->isInternal())
                     collisions.append(*it);
                 ++it;
@@ -1420,8 +1420,8 @@ void HtmlGenerator::generateCollisionPages()
 
         QList<QString> targets;
         if (!ncn->linkTargets().isEmpty()) {
-            QMap<QString,QString>::ConstIterator t = ncn->linkTargets().begin();
-            while (t != ncn->linkTargets().end()) {
+            QMap<QString,QString>::ConstIterator t = ncn->linkTargets().constBegin();
+            while (t != ncn->linkTargets().constEnd()) {
                 int count = 0;
                 for (int i=0; i<collisions.size(); ++i) {
                     InnerNode* n = static_cast<InnerNode*>(collisions.at(i));
@@ -1437,8 +1437,8 @@ void HtmlGenerator::generateCollisionPages()
             }
         }
         if (!targets.isEmpty()) {
-            QList<QString>::ConstIterator t = targets.begin();
-            while (t != targets.end()) {
+            QList<QString>::ConstIterator t = targets.constBegin();
+            while (t != targets.constEnd()) {
                 out() << "<a name=\"" << Doc::canonicalTitle(*t) << "\"></a>";
                 out() << "<h2 class=\"title\">" << protectEnc(*t) << "</h2>\n";
                 out() << "<ul>\n";
@@ -1588,8 +1588,8 @@ void HtmlGenerator::generateFakeNode(FakeNode* fake, CodeMarker* marker)
             out() << "</ul>\n";
         }
 
-        s = sections.begin();
-        while (s != sections.end()) {
+        s = sections.constBegin();
+        while (s != sections.constEnd()) {
             out() << "<a name=\"" << registerRef((*s).name.toLower())
                   << "\"></a>" << divNavTop << '\n';
             out() << "<h2>" << protectEnc((*s).name) << "</h2>\n";
@@ -1608,11 +1608,11 @@ void HtmlGenerator::generateFakeNode(FakeNode* fake, CodeMarker* marker)
         //out() << "<hr />\n";
 
         sections = marker->qmlSections(qml_cn,CodeMarker::Detailed);
-        s = sections.begin();
-        while (s != sections.end()) {
+        s = sections.constBegin();
+        while (s != sections.constEnd()) {
             out() << "<h2>" << protectEnc((*s).name) << "</h2>\n";
-            NodeList::ConstIterator m = (*s).members.begin();
-            while (m != (*s).members.end()) {
+            NodeList::ConstIterator m = (*s).members.constBegin();
+            while (m != (*s).members.constEnd()) {
                 generateDetailedQmlMember(*m, fake, marker);
                 out() << "<br/>\n";
                 ++m;
@@ -1625,8 +1625,8 @@ void HtmlGenerator::generateFakeNode(FakeNode* fake, CodeMarker* marker)
     }
 
     sections = marker->sections(fake, CodeMarker::Summary, CodeMarker::Okay);
-    s = sections.begin();
-    while (s != sections.end()) {
+    s = sections.constBegin();
+    while (s != sections.constEnd()) {
         out() << "<a name=\"" << registerRef((*s).name) << "\"></a>" << divNavTop << '\n';
         out() << "<h2>" << protectEnc((*s).name) << "</h2>\n";
         generateSectionList(*s, fake, marker, CodeMarker::Summary);
@@ -1668,13 +1668,13 @@ void HtmlGenerator::generateFakeNode(FakeNode* fake, CodeMarker* marker)
     }
 
     sections = marker->sections(fake, CodeMarker::Detailed, CodeMarker::Okay);
-    s = sections.begin();
-    while (s != sections.end()) {
+    s = sections.constBegin();
+    while (s != sections.constEnd()) {
         //out() << "<hr />\n";
         out() << "<h2>" << protectEnc((*s).name) << "</h2>\n";
 
-        NodeList::ConstIterator m = (*s).members.begin();
-        while (m != (*s).members.end()) {
+        NodeList::ConstIterator m = (*s).members.constBegin();
+        while (m != (*s).members.constEnd()) {
             generateDetailedMember(*m, fake, marker);
             ++m;
         }
@@ -2031,8 +2031,8 @@ void HtmlGenerator::generateTableOfContents(const Node *node,
     else if (sections && ((node->type() == Node::Class) ||
                           (node->type() == Node::Namespace) ||
                           (node->subType() == Node::QmlClass))) {
-        QList<Section>::ConstIterator s = sections->begin();
-        while (s != sections->end()) {
+        QList<Section>::ConstIterator s = sections->constBegin();
+        while (s != sections->constEnd()) {
             if (!s->members.isEmpty() || !s->reimpMembers.isEmpty()) {
                 out() << "<li class=\"level"
                       << sectionNumber.size()
@@ -2214,8 +2214,8 @@ QString HtmlGenerator::generateLowStatusMemberFile(const InnerNode *inner,
         //out() << "<hr />\n";
         out() << "<h2>" << protectEnc(sections.at(i).name) << "</h2>\n";
 
-        NodeList::ConstIterator m = sections.at(i).members.begin();
-        while (m != sections.at(i).members.end()) {
+        NodeList::ConstIterator m = sections.at(i).members.constBegin();
+        while (m != sections.at(i).members.constEnd()) {
             if ((*m)->access() != Node::Private)
                 generateDetailedMember(*m, inner, marker);
             ++m;
@@ -2235,8 +2235,8 @@ void HtmlGenerator::generateClassHierarchy(const Node *relative,
         return;
 
     NodeMap topLevel;
-    NodeMap::ConstIterator c = classMap.begin();
-    while (c != classMap.end()) {
+    NodeMap::ConstIterator c = classMap.constBegin();
+    while (c != classMap.constEnd()) {
         const ClassNode *classe = static_cast<const ClassNode *>(*c);
         if (classe->baseClasses().isEmpty())
             topLevel.insert(classe->name(), classe);
@@ -2254,7 +2254,7 @@ void HtmlGenerator::generateClassHierarchy(const Node *relative,
         }
         else {
             const ClassNode *child =
-                    static_cast<const ClassNode *>(*stack.top().begin());
+                    static_cast<const ClassNode *>(*stack.top().constBegin());
             out() << "<li>";
             generateFullName(child, relative, marker);
             out() << "</li>\n";
@@ -2347,8 +2347,8 @@ void HtmlGenerator::generateCompactList(const Node *relative,
         for (int i=0; i<26; ++i)
             count[i] = 0;
 
-        NodeMap::const_iterator iter = classMap.begin();
-        while (iter != classMap.end()) {
+        NodeMap::const_iterator iter = classMap.constBegin();
+        while (iter != classMap.constEnd()) {
             if (!iter.key().contains("::")) {
                 QChar c = iter.key()[0];
                 if ((c >= 'A') && (c <= 'Z')) {
@@ -2388,8 +2388,8 @@ void HtmlGenerator::generateCompactList(const Node *relative,
         */
         QString first;
         QString last;
-        NodeMap::const_iterator iter = classMap.begin();
-        while (iter != classMap.end()) {
+        NodeMap::const_iterator iter = classMap.constBegin();
+        while (iter != classMap.constEnd()) {
             if (!iter.key().contains("::")) {
                 first = iter.key();
                 break;
@@ -2398,10 +2398,10 @@ void HtmlGenerator::generateCompactList(const Node *relative,
         }
 
         if (first.isEmpty())
-            first = classMap.begin().key();
+            first = classMap.constBegin().key();
 
-        iter = classMap.end();
-        while (iter != classMap.begin()) {
+        iter = classMap.constEnd();
+        while (iter != classMap.constBegin()) {
             --iter;
             if (!iter.key().contains("::")) {
                 last = iter.key();
@@ -2410,7 +2410,7 @@ void HtmlGenerator::generateCompactList(const Node *relative,
         }
 
         if (last.isEmpty())
-            last = classMap.begin().key();
+            last = classMap.constBegin().key();
 
         if (classMap.size() > 1) {
             while (commonPrefixLen < first.length() + 1 &&
@@ -2433,8 +2433,8 @@ void HtmlGenerator::generateCompactList(const Node *relative,
     QString paragraphName[NumParagraphs+1];
     QSet<char> usedParagraphNames;
 
-    NodeMap::ConstIterator c = classMap.begin();
-    while (c != classMap.end()) {
+    NodeMap::ConstIterator c = classMap.constBegin();
+    while (c != classMap.constEnd()) {
         QStringList pieces = c.key().split("::");
         QString key;
         int idx = commonPrefixLen;
@@ -2578,8 +2578,8 @@ void HtmlGenerator::generateFunctionIndex(const Node *relative,
 #if 1
     out() << "<ul>\n";
 #endif
-    QMap<QString, NodeMap >::ConstIterator f = funcIndex.begin();
-    while (f != funcIndex.end()) {
+    QMap<QString, NodeMap >::ConstIterator f = funcIndex.constBegin();
+    while (f != funcIndex.constEnd()) {
 #if 1
         out() << "<li>";
 #else
@@ -2593,8 +2593,8 @@ void HtmlGenerator::generateFunctionIndex(const Node *relative,
             nextLetter++;
         }
 
-        NodeMap::ConstIterator s = (*f).begin();
-        while (s != (*f).end()) {
+        NodeMap::ConstIterator s = (*f).constBegin();
+        while (s != (*f).constEnd()) {
             out() << ' ';
             generateFullName((*s)->parent(), relative, marker, *s);
             ++s;
@@ -2615,8 +2615,8 @@ void HtmlGenerator::generateFunctionIndex(const Node *relative,
 void HtmlGenerator::generateLegaleseList(const Node *relative,
                                          CodeMarker *marker)
 {
-    QMap<Text, const Node *>::ConstIterator it = legaleseTexts.begin();
-    while (it != legaleseTexts.end()) {
+    QMap<Text, const Node *>::ConstIterator it = legaleseTexts.constBegin();
+    while (it != legaleseTexts.constEnd()) {
         Text text = it.key();
         //out() << "<hr />\n";
         generateText(text, relative, marker);
@@ -2626,7 +2626,7 @@ void HtmlGenerator::generateLegaleseList(const Node *relative,
             generateFullName(it.value(), relative, marker);
             out() << "</li>\n";
             ++it;
-        } while (it != legaleseTexts.end() && it.key() == text);
+        } while (it != legaleseTexts.constEnd() && it.key() == text);
         out() << "</ul>\n";
     }
 }
@@ -2799,8 +2799,8 @@ void HtmlGenerator::generateSection(const NodeList& nl,
         }
 
         int i = 0;
-        NodeList::ConstIterator m = nl.begin();
-        while (m != nl.end()) {
+        NodeList::ConstIterator m = nl.constBegin();
+        while (m != nl.constEnd()) {
             if ((*m)->access() == Node::Private) {
                 ++m;
                 continue;
@@ -2860,8 +2860,8 @@ void HtmlGenerator::generateSectionList(const Section& section,
         }
 
         int i = 0;
-        NodeList::ConstIterator m = section.members.begin();
-        while (m != section.members.end()) {
+        NodeList::ConstIterator m = section.members.constBegin();
+        while (m != section.members.constEnd()) {
             if ((*m)->access() == Node::Private) {
                 ++m;
                 continue;
@@ -2909,8 +2909,8 @@ void HtmlGenerator::generateSectionInheritedList(const Section& section,
                                                  const Node *relative,
                                                  CodeMarker *marker)
 {
-    QList<QPair<InnerNode *, int> >::ConstIterator p = section.inherited.begin();
-    while (p != section.inherited.end()) {
+    QList<QPair<InnerNode *, int> >::ConstIterator p = section.inherited.constBegin();
+    while (p != section.inherited.constEnd()) {
         out() << "<li class=\"fn\">";
         out() << (*p).second << ' ';
         if ((*p).second == 1) {
@@ -3632,8 +3632,8 @@ void HtmlGenerator::findAllClasses(const InnerNode *node)
 
 void HtmlGenerator::findAllFunctions(const InnerNode *node)
 {
-    NodeList::ConstIterator c = node->childNodes().begin();
-    while (c != node->childNodes().end()) {
+    NodeList::ConstIterator c = node->childNodes().constBegin();
+    while (c != node->childNodes().constEnd()) {
         if ((*c)->access() != Node::Private) {
             if ((*c)->isInnerNode() && (*c)->url().isEmpty()) {
                 findAllFunctions(static_cast<const InnerNode *>(*c));
@@ -3654,8 +3654,8 @@ void HtmlGenerator::findAllFunctions(const InnerNode *node)
 
 void HtmlGenerator::findAllLegaleseTexts(const InnerNode *node)
 {
-    NodeList::ConstIterator c = node->childNodes().begin();
-    while (c != node->childNodes().end()) {
+    NodeList::ConstIterator c = node->childNodes().constBegin();
+    while (c != node->childNodes().constEnd()) {
         if ((*c)->access() != Node::Private) {
             if (!(*c)->doc().legaleseText().isEmpty())
                 legaleseTexts.insertMulti((*c)->doc().legaleseText(), *c);
@@ -3668,8 +3668,8 @@ void HtmlGenerator::findAllLegaleseTexts(const InnerNode *node)
 
 void HtmlGenerator::findAllNamespaces(const InnerNode *node)
 {
-    NodeList::ConstIterator c = node->childNodes().begin();
-    while (c != node->childNodes().end()) {
+    NodeList::ConstIterator c = node->childNodes().constBegin();
+    while (c != node->childNodes().constEnd()) {
         if ((*c)->access() != Node::Private) {
             if ((*c)->isInnerNode() && (*c)->url().isEmpty()) {
                 findAllNamespaces(static_cast<const InnerNode *>(*c));
@@ -4033,8 +4033,8 @@ void HtmlGenerator::generateQmlSummary(const Section& section,
     if (!section.members.isEmpty()) {
         out() << "<ul>\n";
         NodeList::ConstIterator m;
-        m = section.members.begin();
-        while (m != section.members.end()) {
+        m = section.members.constBegin();
+        while (m != section.members.constEnd()) {
             out() << "<li class=\"fn\">";
             generateQmlItem(*m,relative,marker,true);
             out() << "</li>\n";
@@ -4060,10 +4060,10 @@ void HtmlGenerator::generateDetailedQmlMember(Node *node,
     out() << "<div class=\"qmlitem\">";
     if (node->subType() == Node::QmlPropertyGroup) {
         const QmlPropGroupNode* qpgn = static_cast<const QmlPropGroupNode*>(node);
-        NodeList::ConstIterator p = qpgn->childNodes().begin();
+        NodeList::ConstIterator p = qpgn->childNodes().constBegin();
         out() << "<div class=\"qmlproto\">";
         out() << "<table class=\"qmlname\">";
-        while (p != qpgn->childNodes().end()) {
+        while (p != qpgn->childNodes().constEnd()) {
             if ((*p)->type() == Node::QmlProperty) {
                 qpn = static_cast<QmlPropertyNode*>(*p);
                 out() << "<tr valign=\"top\" class=\"odd\">";
@@ -4125,10 +4125,10 @@ void HtmlGenerator::generateDetailedQmlMember(Node *node,
               Process the whole list as we would for a QML property
               group.
              */
-            NodeList::ConstIterator p = qpn->qmlPropNodes().begin();
+            NodeList::ConstIterator p = qpn->qmlPropNodes().constBegin();
             out() << "<div class=\"qmlproto\">";
             out() << "<table class=\"qmlname\">";
-            while (p != qpn->qmlPropNodes().end()) {
+            while (p != qpn->qmlPropNodes().constEnd()) {
                 if ((*p)->type() == Node::QmlProperty) {
                     QmlPropertyNode* q = static_cast<QmlPropertyNode*>(*p);
                     out() << "<tr valign=\"top\" class=\"odd\">";
diff --git a/src/tools/qdoc/main.cpp b/src/tools/qdoc/main.cpp
index bb0aa7e..34ef213 100644
--- a/src/tools/qdoc/main.cpp
+++ b/src/tools/qdoc/main.cpp
@@ -209,8 +209,8 @@ static void processQdocconfFile(const QString &fileName)
       Load the language translators, if the configuration specifies any.
      */
     QStringList fileNames = config.getStringList(CONFIG_TRANSLATORS);
-    QStringList::Iterator fn = fileNames.begin();
-    while (fn != fileNames.end()) {
+    QStringList::Iterator fn = fileNames.constBegin();
+    while (fn != fileNames.constEnd()) {
         QTranslator *translator = new QTranslator(0);
         if (!translator->load(*fn))
             config.lastLocation().error(tr("Cannot load translator '%1'")
@@ -331,8 +331,8 @@ static void processQdocconfFile(const QString &fileName)
      */
     QSet<CodeParser *> usedParsers;
 
-    QSet<QString>::ConstIterator h = headers.begin();
-    while (h != headers.end()) {
+    QSet<QString>::ConstIterator h = headers.constBegin();
+    while (h != headers.constEnd()) {
         CodeParser *codeParser = CodeParser::parserForHeaderFile(*h);
         if (codeParser) {
             codeParser->parseHeaderFile(config.location(), *h, tree);
@@ -349,8 +349,8 @@ static void processQdocconfFile(const QString &fileName)
       Parse each source text file in the set using the appropriate parser and
       add it to the big tree.
      */
-    QSet<QString>::ConstIterator s = sources.begin();
-    while (s != sources.end()) {
+    QSet<QString>::ConstIterator s = sources.constBegin();
+    while (s != sources.constEnd()) {
         CodeParser *codeParser = CodeParser::parserForSourceFile(*s);
         if (codeParser) {
             codeParser->parseSourceFile(config.location(), *s, tree);
@@ -378,8 +378,8 @@ static void processQdocconfFile(const QString &fileName)
       documentation output. More than one output format can be
       requested. The tree is traversed for each one.
      */
-    QSet<QString>::ConstIterator of = outputFormats.begin();
-    while (of != outputFormats.end()) {
+    QSet<QString>::ConstIterator of = outputFormats.constBegin();
+    while (of != outputFormats.constEnd()) {
         Generator* generator = Generator::generatorForFormat(*of);
         if (generator == 0)
             outputFormatsLocation.fatal(tr("Unknown output format '%1'").arg(*of));
diff --git a/src/tools/qdoc/node.cpp b/src/tools/qdoc/node.cpp
index fc6dc4e..0e32863 100644
--- a/src/tools/qdoc/node.cpp
+++ b/src/tools/qdoc/node.cpp
@@ -775,15 +775,15 @@ FunctionNode *InnerNode::findFunctionNode(const QString& name)
  */
 FunctionNode *InnerNode::findFunctionNode(const FunctionNode *clone)
 {
-    QMap<QString,Node*>::ConstIterator c = primaryFunctionMap.find(clone->name());
-    if (c != primaryFunctionMap.end()) {
+    QMap<QString,Node*>::ConstIterator c = primaryFunctionMap.constFind(clone->name());
+    if (c != primaryFunctionMap.constEnd()) {
         if (isSameSignature(clone, (FunctionNode *) *c)) {
             return (FunctionNode *) *c;
         }
         else if (secondaryFunctionMap.contains(clone->name())) {
             const NodeList& secs = secondaryFunctionMap[clone->name()];
-            NodeList::ConstIterator s = secs.begin();
-            while (s != secs.end()) {
+            NodeList::ConstIterator s = secs.constBegin();
+            while (s != secs.constEnd()) {
                 if (isSameSignature(clone, (FunctionNode *) *s))
                     return (FunctionNode *) *s;
                 ++s;
@@ -896,8 +896,8 @@ void InnerNode::normalizeOverloads()
                  primaryFunc->access() == Private)) {
 
             NodeList& secs = secondaryFunctionMap[primaryFunc->name()];
-            NodeList::ConstIterator s = secs.begin();
-            while (s != secs.end()) {
+            NodeList::ConstIterator s = secs.constBegin();
+            while (s != secs.constEnd()) {
                 FunctionNode *secondaryFunc = (FunctionNode *) *s;
 
                 // Any non-obsolete, non-compatibility, non-private functions
@@ -918,15 +918,15 @@ void InnerNode::normalizeOverloads()
         ++p1;
     }
 
-    QMap<QString, Node *>::ConstIterator p = primaryFunctionMap.begin();
-    while (p != primaryFunctionMap.end()) {
+    QMap<QString, Node *>::ConstIterator p = primaryFunctionMap.constBegin();
+    while (p != primaryFunctionMap.constEnd()) {
         FunctionNode *primaryFunc = (FunctionNode *) *p;
         if (primaryFunc->isOverload())
             primaryFunc->ove = false;
         if (secondaryFunctionMap.contains(primaryFunc->name())) {
             NodeList& secs = secondaryFunctionMap[primaryFunc->name()];
-            NodeList::ConstIterator s = secs.begin();
-            while (s != secs.end()) {
+            NodeList::ConstIterator s = secs.constBegin();
+            while (s != secs.constEnd()) {
                 FunctionNode *secondaryFunc = (FunctionNode *) *s;
                 if (!secondaryFunc->isOverload())
                     secondaryFunc->ove = true;
@@ -936,8 +936,8 @@ void InnerNode::normalizeOverloads()
         ++p;
     }
 
-    NodeList::ConstIterator c = childNodes().begin();
-    while (c != childNodes().end()) {
+    NodeList::ConstIterator c = childNodes().constBegin();
+    while (c != childNodes().constEnd()) {
         if ((*c)->isInnerNode())
             ((InnerNode *) *c)->normalizeOverloads();
         ++c;
@@ -1105,9 +1105,9 @@ bool InnerNode::isSameSignature(const FunctionNode *f1, const FunctionNode *f2)
     if (f1->isConst() != f2->isConst())
         return false;
 
-    QList<Parameter>::ConstIterator p1 = f1->parameters().begin();
-    QList<Parameter>::ConstIterator p2 = f2->parameters().begin();
-    while (p2 != f2->parameters().end()) {
+    QList<Parameter>::ConstIterator p1 = f1->parameters().constBegin();
+    QList<Parameter>::ConstIterator p2 = f2->parameters().constBegin();
+    while (p2 != f2->parameters().constEnd()) {
         if ((*p1).hasType() && (*p2).hasType()) {
             if ((*p1).rightType() != (*p2).rightType())
                 return false;
@@ -1835,8 +1835,8 @@ void FunctionNode::addParameter(const Parameter& parameter)
 void FunctionNode::borrowParameterNames(const FunctionNode *source)
 {
     QList<Parameter>::Iterator t = params.begin();
-    QList<Parameter>::ConstIterator s = source->params.begin();
-    while (s != source->params.end() && t != params.end()) {
+    QList<Parameter>::ConstIterator s = source->params.constBegin();
+    while (s != source->params.constEnd() && t != params.end()) {
         if (!(*s).name().isEmpty())
             (*t).setName((*s).name());
         ++s;
@@ -1878,8 +1878,8 @@ int FunctionNode::overloadNumber() const
 QStringList FunctionNode::parameterNames() const
 {
     QStringList names;
-    QList<Parameter>::ConstIterator p = parameters().begin();
-    while (p != parameters().end()) {
+    QList<Parameter>::ConstIterator p = parameters().constBegin();
+    while (p != parameters().constEnd()) {
         names << (*p).name();
         ++p;
     }
@@ -1911,8 +1911,8 @@ QString FunctionNode::rawParameters(bool names, bool values) const
 QStringList FunctionNode::reconstructParams(bool values) const
 {
     QStringList params;
-    QList<Parameter>::ConstIterator p = parameters().begin();
-    while (p != parameters().end()) {
+    QList<Parameter>::ConstIterator p = parameters().constBegin();
+    while (p != parameters().constEnd()) {
         params << (*p).reconstruct(values);
         ++p;
     }
@@ -2109,7 +2109,7 @@ QString QmlClassNode::fileBase() const
  */
 void QmlClassNode::addInheritedBy(const QString& base, Node* sub)
 {
-    if (inheritedBy.find(base,sub) == inheritedBy.end()) {
+    if (inheritedBy.constFind(base,sub) == inheritedBy.constEnd()) {
         inheritedBy.insert(base,sub);
     }
 }
@@ -2525,8 +2525,8 @@ InnerNode* NameCollisionNode::findAny(Node::Type t, Node::SubType st)
             return current;
     }
     const NodeList& cn = childNodes();
-    NodeList::ConstIterator i = cn.begin();
-    while (i != cn.end()) {
+    NodeList::ConstIterator i = cn.constBegin();
+    while (i != cn.constEnd()) {
         if ((*i)->type() == t && (*i)->subType() == st)
             return static_cast<InnerNode*>(*i);
         ++i;
@@ -2544,8 +2544,8 @@ const Node* NameCollisionNode::applyModuleIdentifier(const Node* origin) const
 {
     if (origin && !origin->qmlModuleIdentifier().isEmpty()) {
         const NodeList& cn = childNodes();
-        NodeList::ConstIterator i = cn.begin();
-        while (i != cn.end()) {
+        NodeList::ConstIterator i = cn.constBegin();
+        while (i != cn.constEnd()) {
             if ((*i)->type() == Node::Fake && (*i)->subType() == Node::QmlClass) {
                 if (origin->qmlModuleIdentifier() == (*i)->qmlModuleIdentifier())
                     return (*i);
diff --git a/src/tools/qdoc/qmlcodemarker.cpp b/src/tools/qdoc/qmlcodemarker.cpp
index 9782e30..92f7923 100644
--- a/src/tools/qdoc/qmlcodemarker.cpp
+++ b/src/tools/qdoc/qmlcodemarker.cpp
@@ -177,8 +177,8 @@ QString QmlCodeMarker::markedUpIncludes(const QStringList& includes)
 {
     QString code;
 
-    QStringList::ConstIterator inc = includes.begin();
-    while (inc != includes.end()) {
+    QStringList::ConstIterator inc = includes.constBegin();
+    while (inc != includes.constEnd()) {
         code += "import " + *inc + QLatin1Char('\n');
         ++inc;
     }
diff --git a/src/tools/qdoc/qmlvisitor.cpp b/src/tools/qdoc/qmlvisitor.cpp
index 9fd92ed..f4ce6e5 100644
--- a/src/tools/qdoc/qmlvisitor.cpp
+++ b/src/tools/qdoc/qmlvisitor.cpp
@@ -345,8 +345,8 @@ void QmlDocVisitor::applyMetacommands(QQmlJS::AST::SourceLocation,
                 }
             }
             else if ((command == COMMAND_INGROUP) && !args.isEmpty()) {
-                ArgList::ConstIterator argsIter = args.begin();
-                while (argsIter != args.end()) {
+                ArgList::ConstIterator argsIter = args.constBegin();
+                while (argsIter != args.constEnd()) {
                     tree->addToGroup(node, argsIter->first);
                     ++argsIter;
                 }
@@ -530,8 +530,8 @@ bool QmlDocVisitor::visit(QQmlJS::AST::FunctionDeclaration* fd)
             QString name = fd->name.toString();
             FunctionNode* qmlMethod = new FunctionNode(Node::QmlMethod, current, name, false);
             int overloads = 0;
-            NodeList::ConstIterator overloadIterator = current->childNodes().begin();
-            while (overloadIterator != current->childNodes().end()) {
+            NodeList::ConstIterator overloadIterator = current->childNodes().constBegin();
+            while (overloadIterator != current->childNodes().constEnd()) {
                 if ((*overloadIterator)->name() == name)
                     overloads++;
                 overloadIterator++;
diff --git a/src/tools/qdoc/tree.cpp b/src/tools/qdoc/tree.cpp
index b600102..82d1327 100644
--- a/src/tools/qdoc/tree.cpp
+++ b/src/tools/qdoc/tree.cpp
@@ -436,15 +436,15 @@ static const char*  const suffixes[NumSuffixes] = { "", "s", "es" };
 const FakeNode* Tree::findFakeNodeByTitle(const QString& title, const Node* relative ) const
 {
     for (int pass = 0; pass < NumSuffixes; ++pass) {
-        FakeNodeHash::const_iterator i = priv->fakeNodesByTitle.find(Doc::canonicalTitle(title + suffixes[pass]));
+        FakeNodeHash::const_iterator i = priv->fakeNodesByTitle.constFind(Doc::canonicalTitle(title + suffixes[pass]));
         if (i != priv->fakeNodesByTitle.constEnd()) {
             if (relative && !relative->qmlModuleIdentifier().isEmpty()) {
                 const FakeNode* fn = i.value();
                 InnerNode* parent = fn->parent();
                 if (parent && parent->type() == Node::Fake && parent->subType() == Node::Collision) {
                     const NodeList& nl = parent->childNodes();
-                    NodeList::ConstIterator it = nl.begin();
-                    while (it != nl.end()) {
+                    NodeList::ConstIterator it = nl.constBegin();
+                    while (it != nl.constEnd()) {
                         if ((*it)->qmlModuleIdentifier() == relative->qmlModuleIdentifier()) {
                             /*
                               By returning here, we avoid printing all the duplicate
@@ -498,7 +498,7 @@ Tree::findUnambiguousTarget(const QString& target, Atom *&atom, const Node* rela
     QList<Target> bestTargetList;
 
     for (int pass = 0; pass < NumSuffixes; ++pass) {
-        TargetHash::const_iterator i = priv->targetHash.find(Doc::canonicalTitle(target + suffixes[pass]));
+        TargetHash::const_iterator i = priv->targetHash.constFind(Doc::canonicalTitle(target + suffixes[pass]));
         if (i != priv->targetHash.constEnd()) {
             TargetHash::const_iterator j = i;
             do {
@@ -545,7 +545,7 @@ Atom* Tree::findTarget(const QString& target, const Node* node) const
 {
     for (int pass = 0; pass < NumSuffixes; ++pass) {
         QString key = Doc::canonicalTitle(target + suffixes[pass]);
-        TargetHash::const_iterator i = priv->targetHash.find(key);
+        TargetHash::const_iterator i = priv->targetHash.constFind(key);
 
         if (i != priv->targetHash.constEnd()) {
             do {
@@ -625,8 +625,8 @@ void Tree::resolveInheritance(NamespaceNode* rootNode)
         rootNode = root();
 
     for (int pass = 0; pass < 2; pass++) {
-        NodeList::ConstIterator c = rootNode->childNodes().begin();
-        while (c != rootNode->childNodes().end()) {
+        NodeList::ConstIterator c = rootNode->childNodes().constBegin();
+        while (c != rootNode->childNodes().constEnd()) {
             if ((*c)->type() == Node::Class) {
                 resolveInheritance(pass, (ClassNode*)* c);
             }
@@ -647,8 +647,8 @@ void Tree::resolveProperties()
 {
     PropertyMap::ConstIterator propEntry;
 
-    propEntry = priv->unresolvedPropertyMap.begin();
-    while (propEntry != priv->unresolvedPropertyMap.end()) {
+    propEntry = priv->unresolvedPropertyMap.constBegin();
+    while (propEntry != priv->unresolvedPropertyMap.constEnd()) {
         PropertyNode* property = propEntry.key();
         InnerNode* parent = property->parent();
         QString getterName = (*propEntry)[PropertyNode::Getter];
@@ -656,8 +656,8 @@ void Tree::resolveProperties()
         QString resetterName = (*propEntry)[PropertyNode::Resetter];
         QString notifierName = (*propEntry)[PropertyNode::Notifier];
 
-        NodeList::ConstIterator c = parent->childNodes().begin();
-        while (c != parent->childNodes().end()) {
+        NodeList::ConstIterator c = parent->childNodes().constBegin();
+        while (c != parent->childNodes().constEnd()) {
             if ((*c)->type() == Node::Function) {
                 FunctionNode* function = static_cast<FunctionNode*>(*c);
                 if (function->access() == property->access() &&
@@ -682,8 +682,8 @@ void Tree::resolveProperties()
         ++propEntry;
     }
 
-    propEntry = priv->unresolvedPropertyMap.begin();
-    while (propEntry != priv->unresolvedPropertyMap.end()) {
+    propEntry = priv->unresolvedPropertyMap.constBegin();
+    while (propEntry != priv->unresolvedPropertyMap.constEnd()) {
         PropertyNode* property = propEntry.key();
         // redo it to set the property functions
         if (property->overriddenFrom())
@@ -700,8 +700,8 @@ void Tree::resolveInheritance(int pass, ClassNode* classe)
 {
     if (pass == 0) {
         QList<InheritanceBound> bounds = priv->unresolvedInheritanceMap[classe];
-        QList<InheritanceBound>::ConstIterator b = bounds.begin();
-        while (b != bounds.end()) {
+        QList<InheritanceBound>::ConstIterator b = bounds.constBegin();
+        while (b != bounds.constEnd()) {
             Node* n = findClassNode((*b).basePath);
             if (!n && (*b).parent) {
                 n = findClassNode((*b).basePath, (*b).parent);
@@ -713,8 +713,8 @@ void Tree::resolveInheritance(int pass, ClassNode* classe)
         }
     }
     else {
-        NodeList::ConstIterator c = classe->childNodes().begin();
-        while (c != classe->childNodes().end()) {
+        NodeList::ConstIterator c = classe->childNodes().constBegin();
+        while (c != classe->childNodes().constEnd()) {
             if ((*c)->type() == Node::Function) {
                 FunctionNode* func = (FunctionNode*)* c;
                 FunctionNode* from = findVirtualFunctionInBaseClasses(classe, func);
@@ -857,8 +857,8 @@ void Tree::fixInheritance(NamespaceNode* rootNode)
     if (!rootNode)
         rootNode = root();
 
-    NodeList::ConstIterator c = rootNode->childNodes().begin();
-    while (c != rootNode->childNodes().end()) {
+    NodeList::ConstIterator c = rootNode->childNodes().constBegin();
+    while (c != rootNode->childNodes().constEnd()) {
         if ((*c)->type() == Node::Class)
             static_cast<ClassNode*>(*c)->fixBaseClasses();
         else if ((*c)->type() == Node::Namespace) {
@@ -874,8 +874,8 @@ void Tree::fixInheritance(NamespaceNode* rootNode)
 FunctionNode* Tree::findVirtualFunctionInBaseClasses(ClassNode* classe,
                                                      FunctionNode* clone)
 {
-    QList<RelatedClass>::ConstIterator r = classe->baseClasses().begin();
-    while (r != classe->baseClasses().end()) {
+    QList<RelatedClass>::ConstIterator r = classe->baseClasses().constBegin();
+    while (r != classe->baseClasses().constEnd()) {
         FunctionNode* func;
         if (((func = findVirtualFunctionInBaseClasses((*r).node, clone)) != 0 ||
              (func = (*r).node->findFunctionNode(clone)) != 0)) {
@@ -891,8 +891,8 @@ FunctionNode* Tree::findVirtualFunctionInBaseClasses(ClassNode* classe,
  */
 void Tree::fixPropertyUsingBaseClasses(ClassNode* classe, PropertyNode* property)
 {
-    QList<RelatedClass>::const_iterator r = classe->baseClasses().begin();
-    while (r != classe->baseClasses().end()) {
+    QList<RelatedClass>::const_iterator r = classe->baseClasses().constBegin();
+    while (r != classe->baseClasses().constEnd()) {
         Node* n = r->node->findChildNodeByNameAndType(property->name(), Node::Property);
         if (n) {
             PropertyNode* baseProperty = static_cast<PropertyNode*>(n);
diff --git a/src/tools/qdoc/yyindent.cpp b/src/tools/qdoc/yyindent.cpp
index 3f21ca4..b3bfa34 100644
--- a/src/tools/qdoc/yyindent.cpp
+++ b/src/tools/qdoc/yyindent.cpp
@@ -340,7 +340,7 @@ static bool readLine()
             ( firstNonWhiteSpace(yyLinizerState->line) == QChar('{') );
 
     do {
-        if ( yyLinizerState->iter == yyProgram->begin() ) {
+        if ( yyLinizerState->iter == yyProgram->constBegin() ) {
             yyLinizerState->line.clear();
             return false;
         }
@@ -449,7 +449,7 @@ static void startLinizer()
     yyBraceDepth = &yyLinizerState->braceDepth;
     yyLeftBraceFollows = &yyLinizerState->leftBraceFollows;
 
-    yyLinizerState->iter = yyProgram->end();
+    yyLinizerState->iter = yyProgram->constEnd();
     --yyLinizerState->iter;
     yyLinizerState->line = *yyLinizerState->iter;
     readLine();
@@ -469,11 +469,11 @@ static bool bottomLineStartsInCComment()
         We could use the linizer here, but that would slow us down
         terribly. We are better to trim only the code lines we need.
     */
-    QStringList::ConstIterator p = yyProgram->end();
+    QStringList::ConstIterator p = yyProgram->constEnd();
     --p; // skip bottom line
 
     for ( int i = 0; i < BigRoof; i++ ) {
-        if ( p == yyProgram->begin() )
+        if ( p == yyProgram->constBegin() )
             return false;
         --p;
 
@@ -1162,8 +1162,8 @@ int main( int argc, char **argv )
     while ( !program.isEmpty() && program.last().trimmed().isEmpty() )
         program.remove( program.fromLast() );
 
-    QStringList::ConstIterator line = program.begin();
-    while ( line != program.end() ) {
+    QStringList::ConstIterator line = program.constBegin();
+    while ( line != program.constEnd() ) {
         p.push_back( *line );
         QChar typedIn = firstNonWhiteSpace( *line );
         if ( p.last().endsWith(QLatin1Char(':')) )