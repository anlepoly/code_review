diff --git a/doc/src/examples/svggenerator.qdoc b/doc/src/examples/svggenerator.qdoc
deleted file mode 100644
index a2f49f6..0000000
--- a/doc/src/examples/svggenerator.qdoc
+++ /dev/null
@@ -1,122 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/legal
-**
-** This file is part of the documentation of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:FDL$
-** Commercial License Usage
-** Licensees holding valid commercial Qt licenses may use this file in
-** accordance with the commercial license agreement provided with the
-** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
-** use the contact form at http://qt.digia.com/contact-us.
-**
-** GNU Free Documentation License Usage
-** Alternatively, this file may be used under the terms of the GNU Free
-** Documentation License version 1.3 as published by the Free Software
-** Foundation and appearing in the file included in the packaging of
-** this file.  Please review the following information to ensure
-** the GNU Free Documentation License version 1.3 requirements
-** will be met: http://www.gnu.org/copyleft/fdl.html.
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-/*!
-    \example painting/svggenerator
-    \title SVG Generator Example
-
-    The SVG Generator example shows how to add SVG file export to applications.
-
-    \image svggenerator-example.png
-
-    Scalable Vector Graphics (SVG) is an XML-based language for describing
-    two-dimensional vector graphics. Qt provides classes for rendering and
-    generating SVG drawings. This example allows the user to create a simple
-    picture and save it to an SVG file.
-
-    The example consists of two classes: \c Window and \c DisplayWidget.
-
-    The \c Window class contains the application logic and constructs the user
-    interface from a Qt Designer UI file as described in the
-    \l{Using a Designer UI File in Your Application#The Multiple Inheritance Approach}{Qt Designer manual}.
-    It also contains the code to write an SVG file.
-
-    The \c DisplayWidget class performs all the work of painting a picture on
-    screen. Since we want the SVG to resemble this picture as closely as
-    possible, we make this code available to the \c Window class so that it can
-    be used to generate SVG files.
-
-    \section1 The DisplayWidget Class
-
-    The \c DisplayWidget class displays a drawing consisting of a selection of
-    elements chosen by the user. These are defined using \c Shape and
-    \c Background enums that are included within the class definition:
-
-    \snippet examples/painting/svggenerator/displaywidget.h DisplayWidget class definition
-
-    Much of this class is used to configure the appearance of the drawing. The
-    \c paintEvent() and \c paint() functions are most relevant to the purpose
-    of this example, so we will describe these here and leave the reader to
-    look at the source code for the example to see how shapes and colors are
-    handled.
-
-    We reimplement the QWidget::paintEvent() function to display the drawing
-    on screen:
-
-    \snippet examples/painting/svggenerator/displaywidget.cpp paint event
-
-    Here, we only construct a QPainter object, begin painting on the device
-    and set a render hint for improved output quality before calling the
-    \c paint() function to perform the painting itself. When this returns,
-    we close the painter and return.
-
-    The \c paint() function is designed to be used for different painting
-    tasks. In this example, we use it to draw on a \c DisplayWidget instance
-    and on a QSvgGenerator object. We show how the painting is performed to
-    demonstrate that there is nothing device-specific about the process:
-
-    \snippet examples/painting/svggenerator/displaywidget.cpp paint function
-
-    \section1 The Window Class
-
-    The \c Window class represents the example's window, containing the user
-    interface, which has been created using Qt Designer:
-
-    \snippet examples/painting/svggenerator/window.h Window class definition
-
-    As with the \c DisplayWidget class, we concentrate on the parts of the code
-    which are concerned with painting and SVG generation. In the \c Window
-    class, the \c saveSvg() function is called whenever the \gui{Save As...}
-    button is clicked; this connection was defined in the \c{window.ui} file
-    using Qt Designer.
-
-    The start of the \c saveSvg() function performs the task of showing a file
-    dialog so that the user can specify a SVG file to save the drawing to.
-    
-    \snippet examples/painting/svggenerator/window.cpp save SVG
-
-    In the rest of the function, we set up the generator and configure it to
-    generate output with the appropriate dimensions and write to the
-    user-specified file. We paint on the QSvgGenerator object in the same way
-    that we paint on a widget, calling the \c DisplayWidget::paint() function
-    so that we use exactly the same code that we used to display the drawing.
-
-    The generation process itself begins with the call to the painter's
-    \l{QPainter::}{begin()} function and ends with call to its
-    \l{QPainter::}{end()} function. The QSvgGenerator paint device relies on
-    the explicit use of these functions to ensure that output is written to
-    the file.
-
-    \section1 Further Reading
-
-    The \l{SVG Viewer Example} shows how to display SVG drawings in an
-    application, and can be used to show the contents of SVG files created
-    by this example.
-
-    See the QtSvg module documentation for more information about SVG and Qt's
-    SVG classes.
-*/
diff --git a/doc/src/examples/svgviewer.qdoc b/doc/src/examples/svgviewer.qdoc
deleted file mode 100644
index ff83308..0000000
--- a/doc/src/examples/svgviewer.qdoc
+++ /dev/null
@@ -1,46 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/legal
-**
-** This file is part of the documentation of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:FDL$
-** Commercial License Usage
-** Licensees holding valid commercial Qt licenses may use this file in
-** accordance with the commercial license agreement provided with the
-** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
-** use the contact form at http://qt.digia.com/contact-us.
-**
-** GNU Free Documentation License Usage
-** Alternatively, this file may be used under the terms of the GNU Free
-** Documentation License version 1.3 as published by the Free Software
-** Foundation and appearing in the file included in the packaging of
-** this file.  Please review the following information to ensure
-** the GNU Free Documentation License version 1.3 requirements
-** will be met: http://www.gnu.org/copyleft/fdl.html.
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-/*!
-    \example painting/svgviewer
-    \title SVG Viewer Example
-
-    The SVG Viewer example shows how to add SVG viewing support to applications.
-
-    \image svgviewer-example.png
-
-    Scalable Vector Graphics (SVG) is an XML-based language for describing two-dimensional
-    vector graphics. Qt provides classes for rendering and displaying SVG drawings in
-    widgets and on other paint devices. This example allows the user to load SVG files
-    and view them in a QGraphicsView using a QGraphicsSvgItem. Based on the selected
-    renderer the QGraphicsView uses either a QWidget or QGLWidget as its viewport. A
-    third render mode is also provided, where the QGraphicsView draws indirectly though
-    a QImage. This allows testing of drawing accuracy and performance for both the 
-    native, raster, and OpenGL paint engines.
-
-    See the QtSvg module documentation for more information about SVG and Qt's SVG classes.
-*/
diff --git a/doc/src/images/svggenerator-example.png b/doc/src/images/svggenerator-example.png
deleted file mode 100644
index e7a8e53..0000000
Binary files a/doc/src/images/svggenerator-example.png and /dev/null differ
diff --git a/doc/src/images/svgviewer-example.png b/doc/src/images/svgviewer-example.png
deleted file mode 100644
index 14f1377..0000000
Binary files a/doc/src/images/svgviewer-example.png and /dev/null differ
diff --git a/doc/src/snippets/code/src_svg_qgraphicssvgitem.cpp b/doc/src/snippets/code/src_svg_qgraphicssvgitem.cpp
deleted file mode 100644
index af175cb..0000000
--- a/doc/src/snippets/code/src_svg_qgraphicssvgitem.cpp
+++ /dev/null
@@ -1,51 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/legal
-**
-** This file is part of the documentation of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:BSD$
-** You may use this file under the terms of the BSD license as follows:
-**
-** "Redistribution and use in source and binary forms, with or without
-** modification, are permitted provided that the following conditions are
-** met:
-**   * Redistributions of source code must retain the above copyright
-**     notice, this list of conditions and the following disclaimer.
-**   * Redistributions in binary form must reproduce the above copyright
-**     notice, this list of conditions and the following disclaimer in
-**     the documentation and/or other materials provided with the
-**     distribution.
-**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
-**     of its contributors may be used to endorse or promote products derived
-**     from this software without specific prior written permission.
-**
-**
-** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-//! [0]
-QSvgRenderer *renderer = new QSvgRenderer(QLatin1String("SvgCardDeck.svg"));
-QGraphicsSvgItem *black = new QGraphicsSvgItem();
-QGraphicsSvgItem *red   = new QGraphicsSvgItem();
-
-black->setSharedRenderer(renderer);
-black->setElementId(QLatin1String("black_joker"));
-
-red->setSharedRenderer(renderer);
-red->setElementId(QLatin1String("red_joker"));
-//! [0]
diff --git a/examples/embedded/embedded.pro b/examples/embedded/embedded.pro
index 911fd5a..09cbcd2 100644
--- a/examples/embedded/embedded.pro
+++ b/examples/embedded/embedded.pro
@@ -1,3 +1,3 @@
 TEMPLATE = subdirs
-!contains(QT_CONFIG, no-widgets): SUBDIRS += desktopservices embeddedsvgviewer fluidlauncher weatherinfo
+!contains(QT_CONFIG, no-widgets): SUBDIRS += desktopservices fluidlauncher weatherinfo
 QT+=widgets
diff --git a/examples/embedded/embeddedsvgviewer/embeddedsvgviewer.cpp b/examples/embedded/embeddedsvgviewer/embeddedsvgviewer.cpp
deleted file mode 100644
index a10910e..0000000
--- a/examples/embedded/embeddedsvgviewer/embeddedsvgviewer.cpp
+++ /dev/null
@@ -1,181 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/legal
-**
-** This file is part of the demonstration applications of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:LGPL$
-** Commercial License Usage
-** Licensees holding valid commercial Qt licenses may use this file in
-** accordance with the commercial license agreement provided with the
-** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
-** use the contact form at http://qt.digia.com/contact-us.
-**
-** GNU Lesser General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU Lesser
-** General Public License version 2.1 as published by the Free Software
-** Foundation and appearing in the file LICENSE.LGPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU Lesser General Public License version 2.1 requirements
-** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
-**
-** In addition, as a special exception, Digia gives you certain additional
-** rights.  These rights are described in the Digia Qt LGPL Exception
-** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
-**
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU
-** General Public License version 3.0 as published by the Free Software
-** Foundation and appearing in the file LICENSE.GPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU General Public License version 3.0 requirements will be
-** met: http://www.gnu.org/copyleft/gpl.html.
-**
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-#include <QPainter>
-#include <QApplication>
-
-#include "embeddedsvgviewer.h"
-
-
-
-EmbeddedSvgViewer::EmbeddedSvgViewer(const QString &filePath)
-{
-    qApp->setStyleSheet(" QSlider:vertical { width: 50px; } \
-                          QSlider::groove:vertical { border: 1px solid black; border-radius: 3px; width: 6px; } \
-                          QSlider::handle:vertical { height: 25px; margin: 0 -22px; image: url(':/files/v-slider-handle.svg'); } \
-                       ");
-
-    m_renderer = new QSvgRenderer(filePath);
-    m_imageSize = m_renderer->viewBox().size();
-
-    m_viewBoxCenter = (QPointF(m_imageSize.width() / qreal(2.0), m_imageSize.height() / qreal(2.0)));
-
-    m_zoomSlider = new QSlider(Qt::Vertical, this);
-    m_zoomSlider->setMaximum(150);
-    m_zoomSlider->setMinimum(1);
-
-    connect(m_zoomSlider, SIGNAL(valueChanged(int)), this, SLOT(setZoom(int)));
-    m_zoomSlider->setValue(100);
-
-    m_quitButton = new QPushButton("Quit", this);
-
-    connect(m_quitButton, SIGNAL(pressed()), QApplication::instance(), SLOT(quit()));
-
-    if (m_renderer->animated())
-        connect(m_renderer, SIGNAL(repaintNeeded()), this, SLOT(update()));
-
-}
-
-void EmbeddedSvgViewer::paintEvent(QPaintEvent *event)
-{
-    Q_UNUSED(event)
-    QPainter painter(this);
-    m_renderer->setViewBox(m_viewBox);
-    m_renderer->render(&painter);
-}
-
-
-void EmbeddedSvgViewer::mouseMoveEvent ( QMouseEvent * event )
-{
-    int incX = int((event->globalX() - m_mousePress.x()) * m_imageScale);
-    int incY = int((event->globalY() - m_mousePress.y()) * m_imageScale);
-
-    QPointF newCenter;
-    newCenter.setX(m_viewBoxCenterOnMousePress.x() - incX);
-    newCenter.setY(m_viewBoxCenterOnMousePress.y() - incY);
-  
-    QRectF newViewBox = getViewBox(newCenter);
-
-
-    // Do a bounded move on the horizontal:
-    if ( (newViewBox.left() >= m_viewBoxBounds.left()) &&
-         (newViewBox.right() <= m_viewBoxBounds.right()) ) 
-    {
-        m_viewBoxCenter.setX(newCenter.x());
-        m_viewBox.setLeft(newViewBox.left());
-        m_viewBox.setRight(newViewBox.right());
-    }
-
-    // do a bounded move on the vertical:
-    if (  (newViewBox.top() >= m_viewBoxBounds.top()) &&
-          (newViewBox.bottom() <= m_viewBoxBounds.bottom()) )
-    {
-        m_viewBoxCenter.setY(newCenter.y());
-        m_viewBox.setTop(newViewBox.top());
-        m_viewBox.setBottom(newViewBox.bottom());
-    }
-
-    update();
-}
-
-void EmbeddedSvgViewer::mousePressEvent ( QMouseEvent * event )
-{
-    m_viewBoxCenterOnMousePress = m_viewBoxCenter;
-    m_mousePress = event->globalPos();
-}
-
-
-QRectF EmbeddedSvgViewer::getViewBox(QPointF viewBoxCenter)
-{
-    QRectF result;
-    result.setLeft(viewBoxCenter.x() - (m_viewBoxSize.width() / 2));
-    result.setTop(viewBoxCenter.y() - (m_viewBoxSize.height() / 2));
-    result.setRight(viewBoxCenter.x() + (m_viewBoxSize.width() / 2));
-    result.setBottom(viewBoxCenter.y() + (m_viewBoxSize.height() / 2));
-    return result;
-}
-
-void EmbeddedSvgViewer::updateImageScale()
-{
-    m_imageScale = qMax( (qreal)m_imageSize.width() / (qreal)width(), 
-                               (qreal)m_imageSize.height() / (qreal)height())*m_zoomLevel;
-
-    m_viewBoxSize.setWidth((qreal)width() * m_imageScale);
-    m_viewBoxSize.setHeight((qreal)height() * m_imageScale);
-}
-
-
-void EmbeddedSvgViewer::resizeEvent ( QResizeEvent * /* event */ )
-{
-    qreal origZoom = m_zoomLevel;
-
-    // Get the new bounds:
-    m_zoomLevel = 1.0;
-    updateImageScale();
-    m_viewBoxBounds = getViewBox(QPointF(m_imageSize.width() / 2.0, m_imageSize.height() / 2.0));
-
-    m_zoomLevel = origZoom;
-    updateImageScale();
-    m_viewBox = getViewBox(m_viewBoxCenter);
-
-    QRect sliderRect;
-    sliderRect.setLeft(width() - m_zoomSlider->sizeHint().width());
-    sliderRect.setRight(width());
-    sliderRect.setTop(height()/4);
-    sliderRect.setBottom(height() - (height()/4));
-    m_zoomSlider->setGeometry(sliderRect);
-}
-
-
-void EmbeddedSvgViewer::setZoom(int newZoom)
-{
-    m_zoomLevel = qreal(newZoom) / qreal(100);
-    
-    updateImageScale();
-    m_viewBox = getViewBox(m_viewBoxCenter);
-
-    update();
-}
-
-
-
-
-
diff --git a/examples/embedded/embeddedsvgviewer/embeddedsvgviewer.h b/examples/embedded/embeddedsvgviewer/embeddedsvgviewer.h
deleted file mode 100644
index 18c5eaa..0000000
--- a/examples/embedded/embeddedsvgviewer/embeddedsvgviewer.h
+++ /dev/null
@@ -1,87 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/legal
-**
-** This file is part of the demonstration applications of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:LGPL$
-** Commercial License Usage
-** Licensees holding valid commercial Qt licenses may use this file in
-** accordance with the commercial license agreement provided with the
-** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
-** use the contact form at http://qt.digia.com/contact-us.
-**
-** GNU Lesser General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU Lesser
-** General Public License version 2.1 as published by the Free Software
-** Foundation and appearing in the file LICENSE.LGPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU Lesser General Public License version 2.1 requirements
-** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
-**
-** In addition, as a special exception, Digia gives you certain additional
-** rights.  These rights are described in the Digia Qt LGPL Exception
-** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
-**
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU
-** General Public License version 3.0 as published by the Free Software
-** Foundation and appearing in the file LICENSE.GPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU General Public License version 3.0 requirements will be
-** met: http://www.gnu.org/copyleft/gpl.html.
-**
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-#ifndef EMBEDDED_SVG_VIEWER_H
-#define EMBEDDED_SVG_VIEWER_H
-
-#include <QWidget>
-#include <QString>
-#include <QSvgRenderer>
-#include <QSize>
-#include <QMouseEvent>
-#include <QSlider>
-#include <QPushButton>
-
-class EmbeddedSvgViewer : public QWidget
-{
-    Q_OBJECT
-public:
-    EmbeddedSvgViewer(const QString& filePath);
-    virtual void paintEvent(QPaintEvent *event);
-    void mouseMoveEvent ( QMouseEvent * event );
-    void mousePressEvent ( QMouseEvent * event );
-    void resizeEvent ( QResizeEvent * event );
-
-public slots:
-    void setZoom(int); // 100 <= newZoom < 0
-
-private:
-    QSvgRenderer* m_renderer;
-    QSlider* m_zoomSlider;
-    QPushButton* m_quitButton;
-    QSize m_imageSize;
-    qreal m_zoomLevel;
-    qreal m_imageScale; // How many Image coords 1 widget pixel is worth
-
-    QRectF m_viewBox;
-    QRectF m_viewBoxBounds;
-    QSizeF m_viewBoxSize;
-    QPointF m_viewBoxCenter;
-    QPointF m_viewBoxCenterOnMousePress;
-    QPoint m_mousePress;
-
-    void updateImageScale();
-    QRectF getViewBox(QPointF viewBoxCenter);
-};
-
-
-
-#endif
diff --git a/examples/embedded/embeddedsvgviewer/embeddedsvgviewer.pro b/examples/embedded/embeddedsvgviewer/embeddedsvgviewer.pro
deleted file mode 100644
index c48a317..0000000
--- a/examples/embedded/embeddedsvgviewer/embeddedsvgviewer.pro
+++ /dev/null
@@ -1,16 +0,0 @@
-TEMPLATE = app
-QT += widgets svg
-
-HEADERS += embeddedsvgviewer.h
-SOURCES += embeddedsvgviewer.cpp main.cpp
-RESOURCES += embeddedsvgviewer.qrc
-
-target.path = $$[QT_INSTALL_EXAMPLES]/qtsvg/embedded/embeddedsvgviewer
-sources.files = $$SOURCES $$HEADERS $$RESOURCES *.pro *.html *.svg files
-sources.path = $$[QT_INSTALL_EXAMPLES]/qtsvg/embedded/embeddedsvgviewer
-INSTALLS += target sources
-
-wince* {
-   DEPLOYMENT_PLUGIN += qsvg
-}
-
diff --git a/examples/embedded/embeddedsvgviewer/embeddedsvgviewer.qrc b/examples/embedded/embeddedsvgviewer/embeddedsvgviewer.qrc
deleted file mode 100644
index bb02118..0000000
--- a/examples/embedded/embeddedsvgviewer/embeddedsvgviewer.qrc
+++ /dev/null
@@ -1,7 +0,0 @@
-<!DOCTYPE RCC><RCC version="1.0">
-<qresource prefix="/">
-    <file>files/v-slider-handle.svg</file>
-    <file>files/default.svg</file>
-</qresource>
-</RCC>
-
diff --git a/examples/embedded/embeddedsvgviewer/files/default.svg b/examples/embedded/embeddedsvgviewer/files/default.svg
deleted file mode 100644
index c28a711..0000000
--- a/examples/embedded/embeddedsvgviewer/files/default.svg
+++ /dev/null
@@ -1,86 +0,0 @@
-<?xml version="1.0" encoding="UTF-8" standalone="no"?>
-<svg
-   xmlns:dc="http://purl.org/dc/elements/1.1/"
-   xmlns:cc="http://web.resource.org/cc/"
-   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
-   xmlns:svg="http://www.w3.org/2000/svg"
-   xmlns="http://www.w3.org/2000/svg"
-   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
-   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
-   width="400px"
-   height="400px"
-   baseProfile="tiny"
-   id="svg8268"
-   sodipodi:version="0.32"
-   inkscape:version="0.45.1"
-   sodipodi:docname="simple2.svg"
-   sodipodi:docbase="/nfs/OpenMoko/SVGs"
-   inkscape:output_extension="org.inkscape.output.svg.inkscape">
-  <metadata
-     id="metadata8283">
-    <rdf:RDF>
-      <cc:Work
-         rdf:about="">
-        <dc:format>image/svg+xml</dc:format>
-        <dc:type
-           rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
-      </cc:Work>
-    </rdf:RDF>
-  </metadata>
-  <defs
-     id="defs8281" />
-  <sodipodi:namedview
-     inkscape:window-height="917"
-     inkscape:window-width="1324"
-     inkscape:pageshadow="2"
-     inkscape:pageopacity="0.0"
-     guidetolerance="10.0"
-     gridtolerance="10.0"
-     objecttolerance="10.0"
-     borderopacity="1.0"
-     bordercolor="#666666"
-     pagecolor="#ffffff"
-     id="base"
-     inkscape:zoom="2.1452345"
-     inkscape:cx="185.25"
-     inkscape:cy="214.75"
-     inkscape:window-x="0"
-     inkscape:window-y="30"
-     inkscape:current-layer="svg8268" />
-  <g
-     stroke="DarkBlue"
-     stroke-width="10"
-     id="g8270">
-    <rect
-       fill="blue"
-       fill-opacity="0.5"
-       x="25"
-       y="25"
-       width="175"
-       height="175"
-       id="rect8272" />
-  </g>
-  <circle
-     cx="200"
-     cy="200"
-     r="75"
-     id="circle8274"
-     sodipodi:cx="200"
-     sodipodi:cy="200"
-     sodipodi:rx="75"
-     sodipodi:ry="75"
-     transform="translate(-26.104372,21.909027)"
-     style="fill:#ffff00;fill-opacity:0.5;stroke:#000000" />
-  <polygon
-     fill="green"
-     stroke="black"
-     fill-opacity="0.5"
-     stroke-width="1"
-     points="200,225 350,225 275,350"
-     id="polygon8276" />
-  <path
-     style="fill:#000000;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;fill-opacity:0.50196081"
-     d="M 303.7037,50.705207 C 173.88522,56.588264 90.320951,92.710345 162.85059,120.82533 C 211.91719,139.84524 196.63811,214.12391 233.86243,192.59259 C 284.31755,163.4083 299.34345,193.75691 311.11111,187.30159 C 347.88407,167.12924 269.34382,134.85785 303.81608,114.5167 C 394.71183,60.881583 332.47907,46.043712 303.7037,50.705207 z "
-     id="path8289"
-     sodipodi:nodetypes="cssssc" />
-</svg>
diff --git a/examples/embedded/embeddedsvgviewer/files/v-slider-handle.svg b/examples/embedded/embeddedsvgviewer/files/v-slider-handle.svg
deleted file mode 100644
index 4ee87f8..0000000
--- a/examples/embedded/embeddedsvgviewer/files/v-slider-handle.svg
+++ /dev/null
@@ -1,100 +0,0 @@
-<?xml version="1.0" encoding="UTF-8" standalone="no"?>
-<!-- Created with Inkscape (http://www.inkscape.org/) -->
-<svg
-   xmlns:dc="http://purl.org/dc/elements/1.1/"
-   xmlns:cc="http://web.resource.org/cc/"
-   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
-   xmlns:svg="http://www.w3.org/2000/svg"
-   xmlns="http://www.w3.org/2000/svg"
-   xmlns:xlink="http://www.w3.org/1999/xlink"
-   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
-   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
-   width="50"
-   height="25"
-   id="svg2"
-   sodipodi:version="0.32"
-   inkscape:version="0.45.1"
-   version="1.0"
-   sodipodi:docbase="/home/tcooksey/Projects/qt-4.4/demos/embedded/embeddedsvgviewer/files"
-   sodipodi:docname="v-slider-handle.svg"
-   inkscape:output_extension="org.inkscape.output.svg.inkscape">
-  <defs
-     id="defs4">
-    <linearGradient
-       inkscape:collect="always"
-       id="linearGradient2158">
-      <stop
-         style="stop-color:#000000;stop-opacity:1;"
-         offset="0"
-         id="stop2160" />
-      <stop
-         style="stop-color:#000000;stop-opacity:0;"
-         offset="1"
-         id="stop2162" />
-    </linearGradient>
-    <linearGradient
-       inkscape:collect="always"
-       xlink:href="#linearGradient2158"
-       id="linearGradient2164"
-       x1="26.10779"
-       y1="9.1025448"
-       x2="26.10779"
-       y2="-0.01334004"
-       gradientUnits="userSpaceOnUse"
-       gradientTransform="matrix(0.9876687,0,0,2.5969342,0.3086332,-0.476397)" />
-  </defs>
-  <sodipodi:namedview
-     id="base"
-     pagecolor="#ffffff"
-     bordercolor="#666666"
-     borderopacity="1.0"
-     gridtolerance="10000"
-     guidetolerance="10"
-     objecttolerance="10"
-     inkscape:pageopacity="0.0"
-     inkscape:pageshadow="2"
-     inkscape:zoom="12.256878"
-     inkscape:cx="42.920885"
-     inkscape:cy="4.2252457"
-     inkscape:document-units="px"
-     inkscape:current-layer="layer1"
-     width="50px"
-     height="25px"
-     inkscape:window-width="1282"
-     inkscape:window-height="879"
-     inkscape:window-x="137"
-     inkscape:window-y="30" />
-  <metadata
-     id="metadata7">
-    <rdf:RDF>
-      <cc:Work
-         rdf:about="">
-        <dc:format>image/svg+xml</dc:format>
-        <dc:type
-           rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
-      </cc:Work>
-    </rdf:RDF>
-  </metadata>
-  <g
-     inkscape:label="Layer 1"
-     inkscape:groupmode="layer"
-     id="layer1">
-    <path
-       style="fill:url(#linearGradient2164);fill-opacity:1;fill-rule:evenodd;stroke:#000000;stroke-width:1.60153389px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
-       d="M 10.191803,24.254577 C 26.804559,24.254577 25.309299,24.303278 39.985656,24.303278 C 52.503796,24.303278 51.963217,0.91536797 40.722957,0.91536797 C 13.837108,0.91536797 16.298612,0.86901372 10.385089,0.86901372 C -2.0345215,0.86901372 -2.5249912,24.254577 10.191803,24.254577 z "
-       id="path2162"
-       sodipodi:nodetypes="csssc" />
-    <path
-       sodipodi:type="arc"
-       style="fill:#ff0000;fill-opacity:1;fill-rule:nonzero;stroke:#868686;stroke-linecap:round;stroke-linejoin:round;stroke-opacity:1"
-       id="path2166"
-       sodipodi:cx="9.4232807"
-       sodipodi:cy="13.169908"
-       sodipodi:rx="2.2436383"
-       sodipodi:ry="1.9580842"
-       d="M 9.4232808,15.127992 A 2.2436383,1.9580842 0 1 1 9.4232808,11.211823 L 9.4232807,13.169908 z"
-       sodipodi:start="1.5707963"
-       sodipodi:end="4.712389"
-       transform="matrix(4.3804554,0,0,2.228386,-25.247974,-16.463284)" />
-  </g>
-</svg>
diff --git a/examples/embedded/embeddedsvgviewer/main.cpp b/examples/embedded/embeddedsvgviewer/main.cpp
deleted file mode 100644
index 287e2a5..0000000
--- a/examples/embedded/embeddedsvgviewer/main.cpp
+++ /dev/null
@@ -1,71 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/legal
-**
-** This file is part of the demonstration applications of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:LGPL$
-** Commercial License Usage
-** Licensees holding valid commercial Qt licenses may use this file in
-** accordance with the commercial license agreement provided with the
-** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
-** use the contact form at http://qt.digia.com/contact-us.
-**
-** GNU Lesser General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU Lesser
-** General Public License version 2.1 as published by the Free Software
-** Foundation and appearing in the file LICENSE.LGPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU Lesser General Public License version 2.1 requirements
-** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
-**
-** In addition, as a special exception, Digia gives you certain additional
-** rights.  These rights are described in the Digia Qt LGPL Exception
-** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
-**
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU
-** General Public License version 3.0 as published by the Free Software
-** Foundation and appearing in the file LICENSE.GPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU General Public License version 3.0 requirements will be
-** met: http://www.gnu.org/copyleft/gpl.html.
-**
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-#include <QApplication>
-#include <QDebug>
-
-#include "embeddedsvgviewer.h"
-
-int main(int argc, char** argv)
-{
-    QApplication app(argc, argv);
-    Q_INIT_RESOURCE(embeddedsvgviewer);
-
-    QString filePath;
-
-    if (argc == 1)
-      filePath = QLatin1String(":/files/default.svg");
-    else if (argc == 2)
-      filePath = argv[1];
-    else {
-        qDebug() << QLatin1String("Please specify an svg file!");
-        return -1;
-    }
-
-    EmbeddedSvgViewer viewer(filePath);
-
-    viewer.showFullScreen();
-
-#ifdef QT_KEYPAD_NAVIGATION
-    QApplication::setNavigationMode(Qt::NavigationModeCursorAuto);
-#endif
-    return app.exec();
-} 
diff --git a/examples/embedded/embeddedsvgviewer/shapes.svg b/examples/embedded/embeddedsvgviewer/shapes.svg
deleted file mode 100644
index c28a711..0000000
--- a/examples/embedded/embeddedsvgviewer/shapes.svg
+++ /dev/null
@@ -1,86 +0,0 @@
-<?xml version="1.0" encoding="UTF-8" standalone="no"?>
-<svg
-   xmlns:dc="http://purl.org/dc/elements/1.1/"
-   xmlns:cc="http://web.resource.org/cc/"
-   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
-   xmlns:svg="http://www.w3.org/2000/svg"
-   xmlns="http://www.w3.org/2000/svg"
-   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
-   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
-   width="400px"
-   height="400px"
-   baseProfile="tiny"
-   id="svg8268"
-   sodipodi:version="0.32"
-   inkscape:version="0.45.1"
-   sodipodi:docname="simple2.svg"
-   sodipodi:docbase="/nfs/OpenMoko/SVGs"
-   inkscape:output_extension="org.inkscape.output.svg.inkscape">
-  <metadata
-     id="metadata8283">
-    <rdf:RDF>
-      <cc:Work
-         rdf:about="">
-        <dc:format>image/svg+xml</dc:format>
-        <dc:type
-           rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
-      </cc:Work>
-    </rdf:RDF>
-  </metadata>
-  <defs
-     id="defs8281" />
-  <sodipodi:namedview
-     inkscape:window-height="917"
-     inkscape:window-width="1324"
-     inkscape:pageshadow="2"
-     inkscape:pageopacity="0.0"
-     guidetolerance="10.0"
-     gridtolerance="10.0"
-     objecttolerance="10.0"
-     borderopacity="1.0"
-     bordercolor="#666666"
-     pagecolor="#ffffff"
-     id="base"
-     inkscape:zoom="2.1452345"
-     inkscape:cx="185.25"
-     inkscape:cy="214.75"
-     inkscape:window-x="0"
-     inkscape:window-y="30"
-     inkscape:current-layer="svg8268" />
-  <g
-     stroke="DarkBlue"
-     stroke-width="10"
-     id="g8270">
-    <rect
-       fill="blue"
-       fill-opacity="0.5"
-       x="25"
-       y="25"
-       width="175"
-       height="175"
-       id="rect8272" />
-  </g>
-  <circle
-     cx="200"
-     cy="200"
-     r="75"
-     id="circle8274"
-     sodipodi:cx="200"
-     sodipodi:cy="200"
-     sodipodi:rx="75"
-     sodipodi:ry="75"
-     transform="translate(-26.104372,21.909027)"
-     style="fill:#ffff00;fill-opacity:0.5;stroke:#000000" />
-  <polygon
-     fill="green"
-     stroke="black"
-     fill-opacity="0.5"
-     stroke-width="1"
-     points="200,225 350,225 275,350"
-     id="polygon8276" />
-  <path
-     style="fill:#000000;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;fill-opacity:0.50196081"
-     d="M 303.7037,50.705207 C 173.88522,56.588264 90.320951,92.710345 162.85059,120.82533 C 211.91719,139.84524 196.63811,214.12391 233.86243,192.59259 C 284.31755,163.4083 299.34345,193.75691 311.11111,187.30159 C 347.88407,167.12924 269.34382,134.85785 303.81608,114.5167 C 394.71183,60.881583 332.47907,46.043712 303.7037,50.705207 z "
-     id="path8289"
-     sodipodi:nodetypes="cssssc" />
-</svg>
diff --git a/examples/embedded/embeddedsvgviewer/spheres.svg b/examples/embedded/embeddedsvgviewer/spheres.svg
deleted file mode 100644
index e108777..0000000
--- a/examples/embedded/embeddedsvgviewer/spheres.svg
+++ /dev/null
@@ -1,81 +0,0 @@
-<?xml version="1.0" standalone="no"?>
-<svg width="8cm" height="8cm" viewBox="0 0 400 400"
-    xmlns="http://www.w3.org/2000/svg"
-    xmlns:xlink="http://www.w3.org/1999/xlink/"
-    baseProfile="tiny" version="1.2">
-  <title>Spheres</title>
-  <desc>Gradient filled spheres with different colors.</desc>
-    <defs>
-      <!-- Create radial gradients for each circle to make them look like
-           spheres. -->
-      <radialGradient id="blueSphere" gradientUnits="userSpaceOnUse"
-                      cx="0" cy="0" r="100" fx="-50" fy="-50">
-        <stop offset="0%" stop-color="white" />
-        <stop offset="75%" stop-color="blue" />
-        <stop offset="100%" stop-color="#222244" />
-      </radialGradient>
-      <radialGradient id="redSphere" gradientUnits="userSpaceOnUse"
-                      cx="0" cy="0" r="100" fx="-50" fy="-50">
-        <stop offset="0%" stop-color="white" />
-        <stop offset="75%" stop-color="red" />
-        <stop offset="100%" stop-color="#442222" />
-      </radialGradient>
-      <radialGradient id="greenSphere" gradientUnits="userSpaceOnUse"
-                      cx="0" cy="0" r="100" fx="-50" fy="-50">
-        <stop offset="0%" stop-color="white" />
-        <stop offset="75%" stop-color="green" />
-        <stop offset="100%" stop-color="#113311" />
-      </radialGradient>
-      <radialGradient id="yellowSphere" gradientUnits="userSpaceOnUse"
-                      cx="0" cy="0" r="100" fx="-50" fy="-50">
-        <stop offset="0%" stop-color="white" />
-        <stop offset="75%" stop-color="yellow" />
-        <stop offset="100%" stop-color="#444422" />
-      </radialGradient>
-      <radialGradient id="shadowGrad" gradientUnits="userSpaceOnUse"
-                      cx="0" cy="0" r="100" fx="-50" fy="50">
-        <stop offset="0%" stop-color="black" stop-opacity="1.0" />
-        <stop offset="100%" stop-color="white" stop-opacity="0.0" />
-      </radialGradient>
-
-      <!-- Define a shadow for each sphere. -->
-      <circle id="shadow" fill="url(#shadowGrad)" cx="0" cy="0" r="100" />
-    </defs>
-  <g fill="#ffee99" stroke="none" >
-    <rect x="0" y="0" width="400" height="400" />
-  </g>
-  <g fill="white" stroke="none" >
-    <rect x="0" y="175" width="400" height="225" />
-  </g>
-  <g transform="translate(200,290) scale(2.0,1.0) rotate(45)" >
-    <rect fill="#a6ce39" x="-69" y="-69" width="138" height="138" />
-    <circle fill="black" cx="0" cy="0" r="50" />
-    <circle fill="#a6ce39" cx="0" cy="0" r="33" />
-    <path fill="black" d="M 37,50 L 50,37 L 12,-1 L 22,-11 L 10,-24 L -24,10
-                          L -11,22 L -1,12 Z" />
-    <animateTransform attributeName="transform"  type="rotate" values="0; 360"
-	       begin="0s" dur="10s" fill="freeze" />
-  </g>
-  <g transform="translate(200,175)">
-    <use xlink:href="#shadow" transform="translate(25,55) scale(1.0,0.5)" />
-    <circle fill="url(#blueSphere)" cx="0" cy="0" r="100" />
-  </g>
-  <g transform="translate(315,240)">
-    <g transform="scale(0.5,0.5)">
-      <use xlink:href="#shadow" transform="translate(25,55) scale(1.0,0.5)" />
-      <circle fill="url(#redSphere)" cx="0" cy="0" r="100" />
-    </g>
-  </g>
-  <g transform="translate(80,275)">
-    <g transform="scale(0.65,0.65)">
-      <use xlink:href="#shadow" transform="translate(25,55) scale(1.0,0.5)" />
-      <circle fill="url(#greenSphere)" cx="0" cy="0" r="100" />
-    </g>
-  </g>
-  <g transform="translate(255,325)">
-    <g transform="scale(0.3,0.3)">
-      <use xlink:href="#shadow" transform="translate(25,55) scale(1.0,0.5)" />
-      <circle fill="url(#yellowSphere)" cx="0" cy="0" r="100" />
-    </g>
-  </g>
-</svg>
diff --git a/examples/examples.pro b/examples/examples.pro
index d96fdb9..30b113c 100644
--- a/examples/examples.pro
+++ b/examples/examples.pro
@@ -1,5 +1,5 @@
 TEMPLATE = subdirs
-SUBDIRS += embedded richtext draganddrop painting network
+SUBDIRS += embedded richtext draganddrop network svg
 
 contains(QT_CONFIG,opengl):!contains(QT_CONFIG,opengles2):SUBDIRS += opengl
 QT+=widgets
diff --git a/examples/painting/painting.pro b/examples/painting/painting.pro
deleted file mode 100644
index 9b7e2cd..0000000
--- a/examples/painting/painting.pro
+++ /dev/null
@@ -1,3 +0,0 @@
-TEMPLATE = subdirs
-!contains(QT_CONFIG, no-widgets): SUBDIRS += svgviewer svggenerator
-QT+=widgets
diff --git a/examples/painting/svggenerator/displaywidget.cpp b/examples/painting/svggenerator/displaywidget.cpp
deleted file mode 100644
index 4bb6459..0000000
--- a/examples/painting/svggenerator/displaywidget.cpp
+++ /dev/null
@@ -1,148 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/legal
-**
-** This file is part of the examples of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:BSD$
-** You may use this file under the terms of the BSD license as follows:
-**
-** "Redistribution and use in source and binary forms, with or without
-** modification, are permitted provided that the following conditions are
-** met:
-**   * Redistributions of source code must retain the above copyright
-**     notice, this list of conditions and the following disclaimer.
-**   * Redistributions in binary form must reproduce the above copyright
-**     notice, this list of conditions and the following disclaimer in
-**     the documentation and/or other materials provided with the
-**     distribution.
-**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
-**     of its contributors may be used to endorse or promote products derived
-**     from this software without specific prior written permission.
-**
-**
-** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-#include <QtWidgets>
-#include "displaywidget.h"
-
-DisplayWidget::DisplayWidget(QWidget *parent)
-    : QWidget(parent)
-{
-    QPainterPath car;
-    QPainterPath house;
-
-    QFile file(":resources/shapes.dat");
-    file.open(QFile::ReadOnly);
-    QDataStream stream(&file);
-    stream >> car >> house >> tree >> moon;
-    file.close();
-
-    shapeMap[Car] = car;
-    shapeMap[House] = house;
-
-    background = Sky;
-    shapeColor = Qt::darkYellow;
-    shape = House;
-}
-
-//! [paint event]
-void DisplayWidget::paintEvent(QPaintEvent * /* event */)
-{
-    QPainter painter;
-    painter.begin(this);
-    painter.setRenderHint(QPainter::Antialiasing);
-    paint(painter);
-    painter.end();
-}
-//! [paint event]
-
-//! [paint function]
-void DisplayWidget::paint(QPainter &painter)
-{
-//![paint picture]
-    painter.setClipRect(QRect(0, 0, 200, 200));
-    painter.setPen(Qt::NoPen);
-
-    switch (background) {
-    case Sky:
-    default:
-        painter.fillRect(QRect(0, 0, 200, 200), Qt::darkBlue);
-        painter.translate(145, 10);
-        painter.setBrush(Qt::white);
-        painter.drawPath(moon);
-        painter.translate(-145, -10);
-        break;
-    case Trees:
-    {
-        painter.fillRect(QRect(0, 0, 200, 200), Qt::darkGreen);
-        painter.setBrush(Qt::green);
-        painter.setPen(Qt::black);
-        for (int y = -55, row = 0; y < 200; y += 50, ++row) {
-            int xs;
-            if (row == 2 || row == 3)
-                xs = 150;
-            else
-                xs = 50;
-            for (int x = 0; x < 200; x += xs) {
-                painter.save();
-                painter.translate(x, y);
-                painter.drawPath(tree);
-                painter.restore();
-            }
-        }
-        break;
-    }
-    case Road:
-        painter.fillRect(QRect(0, 0, 200, 200), Qt::gray);
-        painter.setPen(QPen(Qt::white, 4, Qt::DashLine));
-        painter.drawLine(QLine(0, 35, 200, 35));
-        painter.drawLine(QLine(0, 165, 200, 165));
-        break;
-    }
-
-    painter.setBrush(shapeColor);
-    painter.setPen(Qt::black);
-    painter.translate(100, 100);
-    painter.drawPath(shapeMap[shape]);
-//![paint picture]
-}
-//! [paint function]
-
-QColor DisplayWidget::color() const
-{
-    return shapeColor;
-}
-
-void DisplayWidget::setBackground(Background background)
-{
-    this->background = background;
-    update();
-}
-
-void DisplayWidget::setColor(const QColor &color)
-{
-    this->shapeColor = color;
-    update();
-}
-
-void DisplayWidget::setShape(Shape shape)
-{
-    this->shape = shape;
-    update();
-}
diff --git a/examples/painting/svggenerator/displaywidget.h b/examples/painting/svggenerator/displaywidget.h
deleted file mode 100644
index eca7f5d..0000000
--- a/examples/painting/svggenerator/displaywidget.h
+++ /dev/null
@@ -1,79 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/legal
-**
-** This file is part of the examples of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:BSD$
-** You may use this file under the terms of the BSD license as follows:
-**
-** "Redistribution and use in source and binary forms, with or without
-** modification, are permitted provided that the following conditions are
-** met:
-**   * Redistributions of source code must retain the above copyright
-**     notice, this list of conditions and the following disclaimer.
-**   * Redistributions in binary form must reproduce the above copyright
-**     notice, this list of conditions and the following disclaimer in
-**     the documentation and/or other materials provided with the
-**     distribution.
-**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
-**     of its contributors may be used to endorse or promote products derived
-**     from this software without specific prior written permission.
-**
-**
-** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-#ifndef DISPLAYWIDGET_H
-#define DISPLAYWIDGET_H
-
-#include <QColor>
-#include <QHash>
-#include <QWidget>
-
-//! [DisplayWidget class definition]
-class DisplayWidget : public QWidget
-{
-    Q_OBJECT
-
-public:
-    enum Shape { House = 0, Car = 1 };
-    enum Background { Sky = 0, Trees = 1, Road = 2 };
-
-    DisplayWidget(QWidget *parent = 0);
-    QColor color() const;
-    void paint(QPainter &painter);
-
-public slots:
-    void setBackground(Background background);
-    void setColor(const QColor &color);
-    void setShape(Shape shape);
-
-protected:
-    void paintEvent(QPaintEvent *event);
-
-private:
-    Background background;
-    QColor shapeColor;
-    Shape shape;
-    QHash<Shape,QPainterPath> shapeMap;
-    QPainterPath moon;
-    QPainterPath tree;
-};
-//! [DisplayWidget class definition]
-
-#endif
diff --git a/examples/painting/svggenerator/forms/window.ui b/examples/painting/svggenerator/forms/window.ui
deleted file mode 100644
index bf11908..0000000
--- a/examples/painting/svggenerator/forms/window.ui
+++ /dev/null
@@ -1,249 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<ui version="4.0">
- <class>Window</class>
- <widget class="QWidget" name="Window">
-  <property name="geometry">
-   <rect>
-    <x>0</x>
-    <y>0</y>
-    <width>339</width>
-    <height>353</height>
-   </rect>
-  </property>
-  <property name="windowTitle">
-   <string>SVG Generator</string>
-  </property>
-  <layout class="QGridLayout" name="gridLayout_2">
-   <property name="sizeConstraint">
-    <enum>QLayout::SetFixedSize</enum>
-   </property>
-   <item row="0" column="0">
-    <spacer name="horizontalSpacer_2">
-     <property name="orientation">
-      <enum>Qt::Horizontal</enum>
-     </property>
-     <property name="sizeHint" stdset="0">
-      <size>
-       <width>40</width>
-       <height>20</height>
-      </size>
-     </property>
-    </spacer>
-   </item>
-   <item row="0" column="1">
-    <widget class="DisplayWidget" name="displayWidget" native="true">
-     <property name="sizePolicy">
-      <sizepolicy hsizetype="Fixed" vsizetype="Fixed">
-       <horstretch>200</horstretch>
-       <verstretch>200</verstretch>
-      </sizepolicy>
-     </property>
-     <property name="minimumSize">
-      <size>
-       <width>200</width>
-       <height>200</height>
-      </size>
-     </property>
-     <property name="maximumSize">
-      <size>
-       <width>200</width>
-       <height>200</height>
-      </size>
-     </property>
-    </widget>
-   </item>
-   <item row="0" column="2">
-    <spacer name="horizontalSpacer_3">
-     <property name="orientation">
-      <enum>Qt::Horizontal</enum>
-     </property>
-     <property name="sizeHint" stdset="0">
-      <size>
-       <width>40</width>
-       <height>20</height>
-      </size>
-     </property>
-    </spacer>
-   </item>
-   <item row="1" column="0" colspan="3">
-    <layout class="QGridLayout" name="gridLayout">
-     <item row="0" column="0">
-      <widget class="QLabel" name="label">
-       <property name="text">
-        <string>&amp;Shape:</string>
-       </property>
-       <property name="buddy">
-        <cstring>shapeComboBox</cstring>
-       </property>
-      </widget>
-     </item>
-     <item row="0" column="1">
-      <widget class="QComboBox" name="shapeComboBox">
-       <item>
-        <property name="text">
-         <string>House</string>
-        </property>
-       </item>
-       <item>
-        <property name="text">
-         <string>Car</string>
-        </property>
-       </item>
-      </widget>
-     </item>
-     <item row="1" column="0">
-      <widget class="QLabel" name="label_2">
-       <property name="text">
-        <string>&amp;Color:</string>
-       </property>
-       <property name="buddy">
-        <cstring>colorButton</cstring>
-       </property>
-      </widget>
-     </item>
-     <item row="1" column="1">
-      <widget class="QToolButton" name="colorButton">
-       <property name="text">
-        <string>Choose Color...</string>
-       </property>
-      </widget>
-     </item>
-     <item row="2" column="0">
-      <widget class="QLabel" name="label_3">
-       <property name="text">
-        <string>&amp;Background:</string>
-       </property>
-       <property name="buddy">
-        <cstring>shapeComboBox_2</cstring>
-       </property>
-      </widget>
-     </item>
-     <item row="2" column="1">
-      <widget class="QComboBox" name="shapeComboBox_2">
-       <item>
-        <property name="text">
-         <string>Sky</string>
-        </property>
-       </item>
-       <item>
-        <property name="text">
-         <string>Trees</string>
-        </property>
-       </item>
-       <item>
-        <property name="text">
-         <string>Road</string>
-        </property>
-       </item>
-      </widget>
-     </item>
-    </layout>
-   </item>
-   <item row="2" column="0" colspan="3">
-    <layout class="QHBoxLayout" name="horizontalLayout">
-     <item>
-      <spacer name="horizontalSpacer">
-       <property name="orientation">
-        <enum>Qt::Horizontal</enum>
-       </property>
-       <property name="sizeHint" stdset="0">
-        <size>
-         <width>40</width>
-         <height>20</height>
-        </size>
-       </property>
-      </spacer>
-     </item>
-     <item>
-      <widget class="QToolButton" name="toolButton_2">
-       <property name="text">
-        <string>Save &amp;As...</string>
-       </property>
-      </widget>
-     </item>
-    </layout>
-   </item>
-  </layout>
- </widget>
- <customwidgets>
-  <customwidget>
-   <class>DisplayWidget</class>
-   <extends>QWidget</extends>
-   <header>displaywidget.h</header>
-   <container>1</container>
-  </customwidget>
- </customwidgets>
- <resources/>
- <connections>
-  <connection>
-   <sender>shapeComboBox</sender>
-   <signal>currentIndexChanged(int)</signal>
-   <receiver>Window</receiver>
-   <slot>updateShape(int)</slot>
-   <hints>
-    <hint type="sourcelabel">
-     <x>288</x>
-     <y>232</y>
-    </hint>
-    <hint type="destinationlabel">
-     <x>336</x>
-     <y>234</y>
-    </hint>
-   </hints>
-  </connection>
-  <connection>
-   <sender>colorButton</sender>
-   <signal>clicked()</signal>
-   <receiver>Window</receiver>
-   <slot>updateColor()</slot>
-   <hints>
-    <hint type="sourcelabel">
-     <x>301</x>
-     <y>262</y>
-    </hint>
-    <hint type="destinationlabel">
-     <x>337</x>
-     <y>267</y>
-    </hint>
-   </hints>
-  </connection>
-  <connection>
-   <sender>shapeComboBox_2</sender>
-   <signal>currentIndexChanged(int)</signal>
-   <receiver>Window</receiver>
-   <slot>updateBackground(int)</slot>
-   <hints>
-    <hint type="sourcelabel">
-     <x>306</x>
-     <y>299</y>
-    </hint>
-    <hint type="destinationlabel">
-     <x>337</x>
-     <y>311</y>
-    </hint>
-   </hints>
-  </connection>
-  <connection>
-   <sender>toolButton_2</sender>
-   <signal>clicked()</signal>
-   <receiver>Window</receiver>
-   <slot>saveSvg()</slot>
-   <hints>
-    <hint type="sourcelabel">
-     <x>298</x>
-     <y>336</y>
-    </hint>
-    <hint type="destinationlabel">
-     <x>307</x>
-     <y>348</y>
-    </hint>
-   </hints>
-  </connection>
- </connections>
- <slots>
-  <slot>updateBackground(int)</slot>
-  <slot>updateColor()</slot>
-  <slot>updateShape(int)</slot>
-  <slot>saveSvg()</slot>
- </slots>
-</ui>
diff --git a/examples/painting/svggenerator/main.cpp b/examples/painting/svggenerator/main.cpp
deleted file mode 100644
index a244f67..0000000
--- a/examples/painting/svggenerator/main.cpp
+++ /dev/null
@@ -1,51 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/legal
-**
-** This file is part of the examples of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:BSD$
-** You may use this file under the terms of the BSD license as follows:
-**
-** "Redistribution and use in source and binary forms, with or without
-** modification, are permitted provided that the following conditions are
-** met:
-**   * Redistributions of source code must retain the above copyright
-**     notice, this list of conditions and the following disclaimer.
-**   * Redistributions in binary form must reproduce the above copyright
-**     notice, this list of conditions and the following disclaimer in
-**     the documentation and/or other materials provided with the
-**     distribution.
-**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
-**     of its contributors may be used to endorse or promote products derived
-**     from this software without specific prior written permission.
-**
-**
-** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-#include <QApplication>
-
-#include "window.h"
-
-int main(int argc, char *argv[])
-{
-    QApplication app(argc, argv);
-    Window window;
-    window.show();
-    return app.exec();
-}
diff --git a/examples/painting/svggenerator/resources/shapes.dat b/examples/painting/svggenerator/resources/shapes.dat
deleted file mode 100644
index d9b981e..0000000
Binary files a/examples/painting/svggenerator/resources/shapes.dat and /dev/null differ
diff --git a/examples/painting/svggenerator/svggenerator.desktop b/examples/painting/svggenerator/svggenerator.desktop
deleted file mode 100644
index 3ae32a4..0000000
--- a/examples/painting/svggenerator/svggenerator.desktop
+++ /dev/null
@@ -1,11 +0,0 @@
-[Desktop Entry]
-Encoding=UTF-8
-Version=1.0
-Type=Application
-Terminal=false
-Name=SVG Generator
-Exec=/opt/usr/bin/svggenerator
-Icon=svggenerator
-X-Window-Icon=
-X-HildonDesk-ShowInToolbar=true
-X-Osso-Type=application/x-executable
diff --git a/examples/painting/svggenerator/svggenerator.pro b/examples/painting/svggenerator/svggenerator.pro
deleted file mode 100644
index 4e62b22..0000000
--- a/examples/painting/svggenerator/svggenerator.pro
+++ /dev/null
@@ -1,19 +0,0 @@
-FORMS     = forms/window.ui
-HEADERS   = displaywidget.h \
-            window.h
-RESOURCES = svggenerator.qrc
-SOURCES   = displaywidget.cpp \
-            main.cpp \
-            window.cpp
-
-QT += svg
-
-INCLUDEPATH += $$PWD
-
-# install
-target.path = $$[QT_INSTALL_EXAMPLES]/qtsvg/painting/svggenerator
-sources.files = $$SOURCES $$HEADERS $$RESOURCES $$FORMS svggenerator.pro
-sources.path = $$[QT_INSTALL_EXAMPLES]/qtsvg/painting/svggenerator
-INSTALLS += target sources
-
-QT+=widgets
diff --git a/examples/painting/svggenerator/svggenerator.qrc b/examples/painting/svggenerator/svggenerator.qrc
deleted file mode 100644
index 061d1f6..0000000
--- a/examples/painting/svggenerator/svggenerator.qrc
+++ /dev/null
@@ -1,5 +0,0 @@
-<!DOCTYPE RCC><RCC version="1.0">
-<qresource>
-    <file>resources/shapes.dat</file>
-</qresource>
-</RCC>
diff --git a/examples/painting/svggenerator/window.cpp b/examples/painting/svggenerator/window.cpp
deleted file mode 100644
index 36c281e..0000000
--- a/examples/painting/svggenerator/window.cpp
+++ /dev/null
@@ -1,100 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/legal
-**
-** This file is part of the examples of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:BSD$
-** You may use this file under the terms of the BSD license as follows:
-**
-** "Redistribution and use in source and binary forms, with or without
-** modification, are permitted provided that the following conditions are
-** met:
-**   * Redistributions of source code must retain the above copyright
-**     notice, this list of conditions and the following disclaimer.
-**   * Redistributions in binary form must reproduce the above copyright
-**     notice, this list of conditions and the following disclaimer in
-**     the documentation and/or other materials provided with the
-**     distribution.
-**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
-**     of its contributors may be used to endorse or promote products derived
-**     from this software without specific prior written permission.
-**
-**
-** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-#include <QColorDialog>
-#include <QFileDialog>
-#include <QPainter>
-#include <QSvgGenerator>
-#include "window.h"
-#include "displaywidget.h"
-
-Window::Window(QWidget *parent)
-    : QWidget(parent)
-{
-    setupUi(this);
-}
-
-void Window::updateBackground(int background)
-{
-    displayWidget->setBackground(DisplayWidget::Background(background));
-}
-
-void Window::updateColor()
-{
-    QColor color = QColorDialog::getColor(displayWidget->color());
-    if (color.isValid())
-        displayWidget->setColor(color);
-}
-
-void Window::updateShape(int shape)
-{
-    displayWidget->setShape(DisplayWidget::Shape(shape));
-}
-
-//! [save SVG]
-void Window::saveSvg()
-{
-    QString newPath = QFileDialog::getSaveFileName(this, tr("Save SVG"),
-        path, tr("SVG files (*.svg)"));
-
-    if (newPath.isEmpty())
-        return;
-
-    path = newPath;
-
-//![configure SVG generator]
-    QSvgGenerator generator;
-    generator.setFileName(path);
-    generator.setSize(QSize(200, 200));
-    generator.setViewBox(QRect(0, 0, 200, 200));
-    generator.setTitle(tr("SVG Generator Example Drawing"));
-    generator.setDescription(tr("An SVG drawing created by the SVG Generator "
-                                "Example provided with Qt."));
-//![configure SVG generator]
-//![begin painting]
-    QPainter painter;
-    painter.begin(&generator);
-//![begin painting]
-    displayWidget->paint(painter);
-//![end painting]
-    painter.end();
-//![end painting]
-}
-//! [save SVG]
diff --git a/examples/painting/svggenerator/window.h b/examples/painting/svggenerator/window.h
deleted file mode 100644
index 6dd55c1..0000000
--- a/examples/painting/svggenerator/window.h
+++ /dev/null
@@ -1,65 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/legal
-**
-** This file is part of the examples of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:BSD$
-** You may use this file under the terms of the BSD license as follows:
-**
-** "Redistribution and use in source and binary forms, with or without
-** modification, are permitted provided that the following conditions are
-** met:
-**   * Redistributions of source code must retain the above copyright
-**     notice, this list of conditions and the following disclaimer.
-**   * Redistributions in binary form must reproduce the above copyright
-**     notice, this list of conditions and the following disclaimer in
-**     the documentation and/or other materials provided with the
-**     distribution.
-**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
-**     of its contributors may be used to endorse or promote products derived
-**     from this software without specific prior written permission.
-**
-**
-** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-#ifndef WINDOW_H
-#define WINDOW_H
-
-#include "ui_window.h"
-
-//! [Window class definition]
-class Window : public QWidget, private Ui::Window
-{
-    Q_OBJECT
-
-public:
-    Window(QWidget *parent = 0);
-
-public slots:
-    void saveSvg();
-    void updateBackground(int background);
-    void updateColor();
-    void updateShape(int shape);
-
-private:
-    QString path;
-};
-//! [Window class definition]
-
-#endif
diff --git a/examples/painting/svgviewer/files/bubbles.svg b/examples/painting/svgviewer/files/bubbles.svg
deleted file mode 100644
index 5173012..0000000
--- a/examples/painting/svgviewer/files/bubbles.svg
+++ /dev/null
@@ -1,215 +0,0 @@
-<?xml version="1.0" standalone="no"?>
-<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.0//EN" "http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd">
-<svg width="20cm" height="15cm" viewBox="0 0 800 600"
-    xmlns="http://www.w3.org/2000/svg"
-    xmlns:xlink="http://www.w3.org/1999/xlink/"
-    baseProfile="tiny" version="1.2">
-  <title>Spheres</title>
-  <desc>Semi-transparent bubbles on a colored background.</desc>
-    <defs>
-      <!-- Create radial gradients for each bubble. -->
-      <radialGradient id="blueBubble" gradientUnits="userSpaceOnUse"
-                      cx="0" cy="0" r="100" fx="-50" fy="-50">
-        <stop offset="0%" stop-color="white" stop-opacity="1" />
-        <stop offset="25%" stop-color="#cdcdff" stop-opacity=".65" />
-        <stop offset="100%" stop-color="#cdaacd" stop-opacity=".75" />
-      </radialGradient>
-      <radialGradient id="redBubble" gradientUnits="userSpaceOnUse"
-                      cx="0" cy="0" r="100" fx="-50" fy="-50">
-        <stop offset="0%" stop-color="white" stop-opacity="1" />
-        <stop offset="25%" stop-color="#ffcdcd" stop-opacity=".65" />
-        <stop offset="100%" stop-color="#bbbb99" stop-opacity=".75" />
-      </radialGradient>
-      <radialGradient id="greenBubble" gradientUnits="userSpaceOnUse"
-                      cx="0" cy="0" r="100" fx="-50" fy="-50">
-        <stop offset="0%" stop-color="white" stop-opacity="1" />
-        <stop offset="25%" stop-color="#cdffcd" stop-opacity=".65" />
-        <stop offset="100%" stop-color="#99aaaa" stop-opacity=".75" />
-      </radialGradient>
-      <radialGradient id="yellowBubble" gradientUnits="userSpaceOnUse"
-                      cx="0" cy="0" r="100" fx="-50" fy="-50">
-        <stop offset="0%" stop-color="white" stop-opacity="1" />
-        <stop offset="25%" stop-color="#ffffcd" stop-opacity=".65" />
-        <stop offset="100%" stop-color="#bbbbaa" stop-opacity=".75" />
-      </radialGradient>
-      <radialGradient id="background" gradientUnits="userSpaceOnUse"
-                      cx="0" cy="0" r="400" fx="250" fy="250">
-        <stop offset="0%" stop-color="#ffffee" />
-        <stop offset="100%" stop-color="#ccccaa" />
-      </radialGradient>
-      <linearGradient id="surface" gradientUnits="userSpaceOnUse"
-                      x1="-100" y1="200" x2="400" y2="200">
-        <stop offset="0%" stop-color="#ffffcc" />
-        <stop offset="100%" stop-color="#bbbb88" />
-      </linearGradient>
-
-      <!-- Create radial gradients for each circle to make them look like
-           spheres. -->
-      <radialGradient id="blueSphere" gradientUnits="userSpaceOnUse"
-                      cx="0" cy="0" r="100" fx="-50" fy="-50">
-        <stop offset="0%" stop-color="white" />
-        <stop offset="75%" stop-color="blue" />
-        <stop offset="100%" stop-color="#222244" />
-      </radialGradient>
-      <radialGradient id="redSphere" gradientUnits="userSpaceOnUse"
-                      cx="0" cy="0" r="100" fx="-50" fy="-50">
-        <stop offset="0%" stop-color="white" />
-        <stop offset="75%" stop-color="red" />
-        <stop offset="100%" stop-color="#442222" />
-      </radialGradient>
-      <radialGradient id="greenSphere" gradientUnits="userSpaceOnUse"
-                      cx="0" cy="0" r="100" fx="-50" fy="-50">
-        <stop offset="0%" stop-color="white" />
-        <stop offset="75%" stop-color="green" />
-        <stop offset="100%" stop-color="#113311" />
-      </radialGradient>
-      <radialGradient id="yellowSphere" gradientUnits="userSpaceOnUse"
-                      cx="0" cy="0" r="100" fx="-50" fy="-50">
-        <stop offset="0%" stop-color="white" />
-        <stop offset="75%" stop-color="yellow" />
-        <stop offset="100%" stop-color="#444422" />
-      </radialGradient>
-      <radialGradient id="shadowGrad" gradientUnits="userSpaceOnUse"
-                      cx="0" cy="0" r="100" fx="-50" fy="50">
-        <stop offset="0%" stop-color="black" stop-opacity="1.0" />
-        <stop offset="100%" stop-color="black" stop-opacity="0.0" />
-      </radialGradient>
-
-      <!-- Define a shadow for each sphere. -->
-      <circle id="shadow" fill="url(#shadowGrad)" cx="0" cy="0" r="100" />
-      <g id="bubble">
-        <circle fill="black" cx="0" cy="0" r="50" />
-        <circle fill="#a6ce39" cx="0" cy="0" r="33" />
-        <path fill="black" d="M 37,50 L 50,37 L 12,-1 L 22,-11 L 10,-24 L -24,10
-                              L -11,22 L -1,12 Z" />
-        <circle cx="0" cy="0" r="100" />
-      </g>
-    </defs>
-  <g>
-    <rect fill="url(#background)" x="0" y="0" width="800" height="600" />
-  </g>
-
-  <g transform="translate(200,700)">
-    <use xlink:href="#bubble" fill="url(#blueBubble)" />
-    <animateTransform attributeName="transform" type="translate" additive="sum"
-        values="0,0; 0,-800" begin="1s" dur="10s" fill="freeze" repeatCount="indefinite" />
-  </g>
-  <g transform="translate(315,700)">
-    <g transform="scale(0.5,0.5)">
-      <use xlink:href="#bubble" fill="url(#redBubble)" />
-    </g>
-    <animateTransform attributeName="transform" type="translate" additive="sum"
-        values="0,0; 0,-800" begin="3s" dur="7s" fill="freeze" repeatCount="indefinite" />
-  </g>
-  <g transform="translate(80,700)">
-    <g transform="scale(0.65,0.65)">
-      <use xlink:href="#bubble" fill="url(#greenBubble)" />
-    </g>
-    <animateTransform attributeName="transform" type="translate" additive="sum"
-        values="0,0; 0,-800" begin="5s" dur="9s" fill="freeze" repeatCount="indefinite" />
-  </g>
-  <g transform="translate(255,700)">
-    <g transform="scale(0.3,0.3)">
-      <use xlink:href="#bubble" fill="url(#yellowBubble)" />
-    </g>
-    <animateTransform attributeName="transform" type="translate" additive="sum"
-        values="0,0; 0,-800" begin="2s" dur="6s" fill="freeze" repeatCount="indefinite" />
-  </g>
-  <g transform="translate(565,700)">
-    <g transform="scale(0.4,0.4)">
-      <use xlink:href="#bubble" fill="url(#blueBubble)" />
-    </g>
-    <animateTransform attributeName="transform" type="translate" additive="sum"
-        values="0,0; 0,-800" begin="4s" dur="8s" fill="freeze" repeatCount="indefinite" />
-  </g>
-  <g transform="translate(715,700)">
-    <g transform="scale(0.6,0.6)">
-      <use xlink:href="#bubble" fill="url(#redBubble)" />
-    </g>
-    <animateTransform attributeName="transform" type="translate" additive="sum"
-        values="0,0; 0,-800" begin="1s" dur="4s" fill="freeze" repeatCount="indefinite" />
-  </g>
-  <g transform="translate(645,700)">
-    <g transform="scale(0.375,0.375)">
-      <use xlink:href="#bubble" fill="url(#greenBubble)" />
-    </g>
-    <animateTransform attributeName="transform" type="translate" additive="sum"
-        values="0,0; 0,-800" begin="0s" dur="11s" fill="freeze" repeatCount="indefinite" />
-  </g>
-  <g transform="translate(555,700)">
-    <g transform="scale(0.9,0.9)">
-      <use xlink:href="#bubble" fill="url(#yellowBubble)" />
-    </g>
-    <animateTransform attributeName="transform" type="translate" additive="sum"
-        values="0,0; 0,-800" begin="3s" dur="7.5s" fill="freeze" repeatCount="indefinite" />
-  </g>
-
-  <g transform="translate(360,700)">
-    <g transform="scale(0.5,0.5)">
-      <use xlink:href="#bubble" fill="url(#blueBubble)" />
-    </g>
-    <animateTransform attributeName="transform" type="translate" additive="sum"
-        values="0,0; 0,-800" begin="3s" dur="6s" fill="freeze" repeatCount="indefinite" />
-  </g>
-  <g transform="translate(215,700)">
-    <g transform="scale(0.45,0.45)">
-      <use xlink:href="#bubble" fill="url(#redBubble)" />
-    </g>
-    <animateTransform attributeName="transform" type="translate" additive="sum"
-        values="0,0; 0,-800" begin="5.5s" dur="7s" fill="freeze" repeatCount="indefinite" />
-  </g>
-  <g transform="translate(420,700)">
-    <g transform="scale(0.75,0.75)">
-      <use xlink:href="#bubble" fill="url(#greenBubble)" />
-    </g>
-    <animateTransform attributeName="transform" type="translate" additive="sum"
-        values="0,0; 0,-800" begin="1s" dur="9s" fill="freeze" repeatCount="indefinite" />
-  </g>
-  <g transform="translate(815,700)">
-    <g transform="scale(0.6,0.6)">
-      <use xlink:href="#bubble" fill="url(#yellowBubble)" />
-    </g>
-    <animateTransform attributeName="transform" type="translate" additive="sum"
-        values="0,0; 0,-800" begin="2s" dur="9.5s" fill="freeze" repeatCount="indefinite" />
-  </g>
-
-  <g transform="translate(225,375)" >
-    <g transform="scale(1.0,0.5)" >
-      <path d="M 0 0 L 350 0 L 450 450 L -100 450 z"
-            fill="url(#surface)" stroke="none" />
-    </g>
-  </g>
-    <g transform="translate(200,0)" >
-    <g transform="translate(200,490) scale(2.0,1.0) rotate(45)" >
-      <rect fill="#a6ce39" x="-69" y="-69" width="138" height="138" />
-      <circle fill="black" cx="0" cy="0" r="50" />
-      <circle fill="#a6ce39" cx="0" cy="0" r="33" />
-      <path fill="black" d="M 37,50 L 50,37 L 12,-1 L 22,-11 L 10,-24 L -24,10
-                            L -11,22 L -1,12 Z" />
-      <animateTransform attributeName="transform"  type="rotate" additive="sum" values="0; 360"
-	         begin="0s" dur="10s" fill="freeze" repeatCount="indefinite" />
-    </g>
-    <g transform="translate(200,375)">
-      <use xlink:href="#shadow" transform="translate(25,55) scale(1.0,0.5)" />
-      <circle fill="url(#blueSphere)" cx="0" cy="0" r="100" />
-    </g>
-    <g transform="translate(315,440)">
-      <g transform="scale(0.5,0.5)">
-        <use xlink:href="#shadow" transform="translate(25,55) scale(1.0,0.5)" />
-        <circle fill="url(#redSphere)" cx="0" cy="0" r="100" />
-      </g>
-    </g>
-    <g transform="translate(80,475)">
-      <g transform="scale(0.65,0.65)">
-        <use xlink:href="#shadow" transform="translate(25,55) scale(1.0,0.5)" />
-        <circle fill="url(#greenSphere)" cx="0" cy="0" r="100" />
-      </g>
-    </g>
-    <g transform="translate(255,525)">
-      <g transform="scale(0.3,0.3)">
-        <use xlink:href="#shadow" transform="translate(25,55) scale(1.0,0.5)" />
-        <circle fill="url(#yellowSphere)" cx="0" cy="0" r="100" />
-      </g>
-    </g>
-  </g>
-</svg>
diff --git a/examples/painting/svgviewer/files/cubic.svg b/examples/painting/svgviewer/files/cubic.svg
deleted file mode 100644
index 492bb72..0000000
--- a/examples/painting/svgviewer/files/cubic.svg
+++ /dev/null
@@ -1,77 +0,0 @@
-<?xml version="1.0" standalone="no"?>
-<svg width="10cm" height="10cm" viewBox="0 0 1000 1000"
-     xmlns="http://www.w3.org/2000/svg" version="1.2" baseProfile="tiny">
-  <title>Example cubic02 - cubic Bezier commands in path data</title>
-  <desc>Picture showing examples of "C" and "S" commands,
-        along with annotations showing the control points
-        and end points</desc>
-
-  <rect fill="none" stroke="blue" stroke-width="1" x="1" y="1" width="998" height="998" />
-
-  <!-- Path 1 -->
-  <polyline fill="none" stroke="#888888" stroke-width="2" points="100,200 100,100" />
-  <polyline fill="none" stroke="#888888" stroke-width="2" points="400,100 400,200" />
-  <path fill="none" stroke="red" stroke-width="5" d="M100,200 C100,100 400,100 400,200" />
-  <circle fill="none" stroke="#888888" stroke-width="2" cx="100" cy="200" r="10" />
-  <circle fill="none" stroke="#888888" stroke-width="2" cx="400" cy="200" r="10" />
-  <circle class="CtlPoint" cx="100" cy="100" r="10" />
-  <circle class="CtlPoint" cx="400" cy="100" r="10" />
-  <text text-anchor="middle" font-size="22" font-family="Verdana" x="250" y="275">M100,200 C100,100 400,100 400,200</text>
-
-  <!-- Path 2 -->
-  <polyline fill="none" stroke="#888888" stroke-width="2" points="100,500 25,400" />
-  <polyline fill="none" stroke="#888888" stroke-width="2" points="475,400 400,500" />
-  <path fill="none" stroke="red" stroke-width="5" d="M100,500 C25,400 475,400 400,500" />
-  <circle fill="none" stroke="#888888" stroke-width="2" cx="100" cy="500" r="10" />
-  <circle fill="none" stroke="#888888" stroke-width="2" cx="400" cy="500" r="10" />
-  <circle fill="#888888" stroke="none" cx="25" cy="400" r="10" />
-  <circle fill="#888888" stroke="none" cx="475" cy="400" r="10" />
-  <text text-anchor="middle" font-size="22" font-family="Verdana" x="250" y="575">M100,500 C25,400 475,400 400,500</text>
-
-  <!-- Path 3 -->
-  <polyline fill="none" stroke="#888888" stroke-width="2" points="100,800 175,700" />
-  <polyline fill="none" stroke="#888888" stroke-width="2" points="325,700 400,800" />
-  <path fill="none" stroke="red" stroke-width="5" d="M100,800 C175,700 325,700 400,800" />
-  <circle fill="none" stroke="#888888" stroke-width="2" cx="100" cy="800" r="10" />
-  <circle fill="none" stroke="#888888" stroke-width="2" cx="400" cy="800" r="10" />
-  <circle fill="#888888" stroke="none" cx="175" cy="700" r="10" />
-  <circle fill="#888888" stroke="none" cx="325" cy="700" r="10" />
-  <text text-anchor="middle" font-size="22" font-family="Verdana" x="250" y="875">M100,800 C175,700 325,700 400,800</text>
-
-  <!-- Path 4 -->
-  <polyline fill="none" stroke="#888888" stroke-width="2" points="600,200 675,100" />
-  <polyline fill="none" stroke="#888888" stroke-width="2" points="975,100 900,200" />
-  <path fill="none" stroke="red" stroke-width="5" d="M600,200 C675,100 975,100 900,200" />
-  <circle fill="none" stroke="#888888" stroke-width="2" cx="600" cy="200" r="10" />
-  <circle fill="none" stroke="#888888" stroke-width="2" cx="900" cy="200" r="10" />
-  <circle fill="#888888" stroke="none" cx="675" cy="100" r="10" />
-  <circle fill="#888888" stroke="none" cx="975" cy="100" r="10" />
-  <text text-anchor="middle" font-size="22" font-family="Verdana" x="750" y="275">M600,200 C675,100 975,100 900,200</text>
-
-  <!-- Path 5 -->
-  <polyline fill="none" stroke="#888888" stroke-width="2" points="600,500 600,350" />
-  <polyline fill="none" stroke="#888888" stroke-width="2" points="900,650 900,500" />
-  <path fill="none" stroke="red" stroke-width="5" d="M600,500 C600,350 900,650 900,500" />
-  <circle fill="none" stroke="#888888" stroke-width="2" cx="600" cy="500" r="10" />
-  <circle fill="none" stroke="#888888" stroke-width="2" cx="900" cy="500" r="10" />
-  <circle fill="#888888" stroke="none" cx="600" cy="350" r="10" />
-  <circle fill="#888888" stroke="none" cx="900" cy="650" r="10" />
-  <text text-anchor="middle" font-size="22" font-family="Verdana" x="750" y="575">M600,500 C600,350 900,650 900,500</text>
-
-  <!-- Path 6 (C and S command) -->
-  <polyline fill="none" stroke="#888888" stroke-width="2" points="600,800 625,700" />
-  <polyline fill="none" stroke="#888888" stroke-width="2" points="725,700 750,800" />
-  <polyline fill="none" stroke="#888888" stroke-width="2" points="750,800 775,900" />
-  <polyline fill="none" stroke="#888888" stroke-width="2" points="875,900 900,800" />
-  <path fill="none" stroke="red" stroke-width="5" d="M600,800 C625,700 725,700 750,800
-                                       S875,900 900,800" />
-  <circle fill="none" stroke="#888888" stroke-width="2" cx="600" cy="800" r="10" />
-  <circle fill="none" stroke="#888888" stroke-width="2" cx="750" cy="800" r="10" />
-  <circle fill="none" stroke="#888888" stroke-width="2" cx="900" cy="800" r="10" />
-  <circle fill="#888888" stroke="none" cx="625" cy="700" r="10" />
-  <circle fill="#888888" stroke="none" cx="725" cy="700" r="10" />
-  <circle fill="#888888" stroke="none" cx="875" cy="900" r="10" />
-  <circle fill="none" stroke="blue" stroke-width="4" cx="775" cy="900" r="9" />
-  <text text-anchor="middle" font-size="22" font-family="Verdana" x="750" y="945">M600,800 C625,700 725,700 750,800</text>
-  <text text-anchor="middle" font-size="22" font-family="Verdana" x="750" y="975">S875,900 900,800</text>
-</svg>
diff --git a/examples/painting/svgviewer/files/spheres.svg b/examples/painting/svgviewer/files/spheres.svg
deleted file mode 100644
index b23164b..0000000
--- a/examples/painting/svgviewer/files/spheres.svg
+++ /dev/null
@@ -1,72 +0,0 @@
-<?xml version="1.0" standalone="no"?>
-<svg width="8cm" height="8cm" viewBox="0 0 400 400"
-    xmlns="http://www.w3.org/2000/svg"
-    xmlns:xlink="http://www.w3.org/1999/xlink/"
-    baseProfile="tiny" version="1.2">
-  <title>Spheres</title>
-  <desc>Gradient filled spheres with different colors.</desc>
-    <defs>
-      <!-- Create radial gradients for each circle to make them look like
-           spheres. -->
-      <radialGradient id="blueSphere" gradientUnits="userSpaceOnUse"
-                      cx="0" cy="0" r="100" fx="-50" fy="-50">
-        <stop offset="0%" stop-color="white" />
-        <stop offset="75%" stop-color="blue" />
-        <stop offset="100%" stop-color="#222244" />
-      </radialGradient>
-      <radialGradient id="redSphere" gradientUnits="userSpaceOnUse"
-                      cx="0" cy="0" r="100" fx="-50" fy="-50">
-        <stop offset="0%" stop-color="white" />
-        <stop offset="75%" stop-color="red" />
-        <stop offset="100%" stop-color="#442222" />
-      </radialGradient>
-      <radialGradient id="greenSphere" gradientUnits="userSpaceOnUse"
-                      cx="0" cy="0" r="100" fx="-50" fy="-50">
-        <stop offset="0%" stop-color="white" />
-        <stop offset="75%" stop-color="green" />
-        <stop offset="100%" stop-color="#113311" />
-      </radialGradient>
-      <radialGradient id="yellowSphere" gradientUnits="userSpaceOnUse"
-                      cx="0" cy="0" r="100" fx="-50" fy="-50">
-        <stop offset="0%" stop-color="white" />
-        <stop offset="75%" stop-color="yellow" />
-        <stop offset="100%" stop-color="#444422" />
-      </radialGradient>
-      <radialGradient id="shadowGrad" gradientUnits="userSpaceOnUse"
-                      cx="0" cy="0" r="100" fx="-50" fy="50">
-        <stop offset="0%" stop-color="black" stop-opacity="1.0" />
-        <stop offset="100%" stop-color="white" stop-opacity="0.0" />
-      </radialGradient>
-
-      <!-- Define a shadow for each sphere. -->
-      <circle id="shadow" fill="url(#shadowGrad)" cx="0" cy="0" r="100" />
-    </defs>
-  <g fill="#ffee99" stroke="none" >
-    <rect x="0" y="0" width="400" height="400" />
-  </g>
-  <g fill="white" stroke="none" >
-    <rect x="0" y="175" width="400" height="225" />
-  </g>
-  <g transform="translate(200,175)">
-    <use xlink:href="#shadow" transform="translate(25,55) scale(1.0,0.5)" />
-    <circle fill="url(#blueSphere)" cx="0" cy="0" r="100" />
-  </g>
-  <g transform="translate(315,240)">
-    <g transform="scale(0.5,0.5)">
-      <use xlink:href="#shadow" transform="translate(25,55) scale(1.0,0.5)" />
-      <circle fill="url(#redSphere)" cx="0" cy="0" r="100" />
-    </g>
-  </g>
-  <g transform="translate(80,275)">
-    <g transform="scale(0.65,0.65)">
-      <use xlink:href="#shadow" transform="translate(25,55) scale(1.0,0.5)" />
-      <circle fill="url(#greenSphere)" cx="0" cy="0" r="100" />
-    </g>
-  </g>
-  <g transform="translate(255,325)">
-    <g transform="scale(0.3,0.3)">
-      <use xlink:href="#shadow" transform="translate(25,55) scale(1.0,0.5)" />
-      <circle fill="url(#yellowSphere)" cx="0" cy="0" r="100" />
-    </g>
-  </g>
-</svg>
diff --git a/examples/painting/svgviewer/main.cpp b/examples/painting/svgviewer/main.cpp
deleted file mode 100644
index c8376c5..0000000
--- a/examples/painting/svgviewer/main.cpp
+++ /dev/null
@@ -1,62 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/legal
-**
-** This file is part of the examples of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:BSD$
-** You may use this file under the terms of the BSD license as follows:
-**
-** "Redistribution and use in source and binary forms, with or without
-** modification, are permitted provided that the following conditions are
-** met:
-**   * Redistributions of source code must retain the above copyright
-**     notice, this list of conditions and the following disclaimer.
-**   * Redistributions in binary form must reproduce the above copyright
-**     notice, this list of conditions and the following disclaimer in
-**     the documentation and/or other materials provided with the
-**     distribution.
-**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
-**     of its contributors may be used to endorse or promote products derived
-**     from this software without specific prior written permission.
-**
-**
-** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-#include <QApplication>
-#include <QString>
-#ifndef QT_NO_OPENGL
-#include <QGLFormat>
-#endif
-
-#include "mainwindow.h"
-
-int main(int argc, char **argv)
-{
-    Q_INIT_RESOURCE(svgviewer);
-
-    QApplication app(argc, argv);
-
-    MainWindow window;
-    if (argc == 2)
-        window.openFile(argv[1]);
-    else
-        window.openFile(":/files/bubbles.svg");
-    window.show();
-    return app.exec();
-}
diff --git a/examples/painting/svgviewer/mainwindow.cpp b/examples/painting/svgviewer/mainwindow.cpp
deleted file mode 100644
index 71723ee..0000000
--- a/examples/painting/svgviewer/mainwindow.cpp
+++ /dev/null
@@ -1,163 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/legal
-**
-** This file is part of the examples of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:BSD$
-** You may use this file under the terms of the BSD license as follows:
-**
-** "Redistribution and use in source and binary forms, with or without
-** modification, are permitted provided that the following conditions are
-** met:
-**   * Redistributions of source code must retain the above copyright
-**     notice, this list of conditions and the following disclaimer.
-**   * Redistributions in binary form must reproduce the above copyright
-**     notice, this list of conditions and the following disclaimer in
-**     the documentation and/or other materials provided with the
-**     distribution.
-**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
-**     of its contributors may be used to endorse or promote products derived
-**     from this software without specific prior written permission.
-**
-**
-** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-#include "mainwindow.h"
-
-#include <QtWidgets>
-
-#include "svgview.h"
-
-MainWindow::MainWindow()
-    : QMainWindow()
-    , m_view(new SvgView)
-{
-    QMenu *fileMenu = new QMenu(tr("&File"), this);
-    QAction *openAction = fileMenu->addAction(tr("&Open..."));
-    openAction->setShortcut(QKeySequence(tr("Ctrl+O")));
-    QAction *quitAction = fileMenu->addAction(tr("E&xit"));
-    quitAction->setShortcuts(QKeySequence::Quit);
-
-    menuBar()->addMenu(fileMenu);
-
-    QMenu *viewMenu = new QMenu(tr("&View"), this);
-    m_backgroundAction = viewMenu->addAction(tr("&Background"));
-    m_backgroundAction->setEnabled(false);
-    m_backgroundAction->setCheckable(true);
-    m_backgroundAction->setChecked(false);
-    connect(m_backgroundAction, SIGNAL(toggled(bool)), m_view, SLOT(setViewBackground(bool)));
-
-    m_outlineAction = viewMenu->addAction(tr("&Outline"));
-    m_outlineAction->setEnabled(false);
-    m_outlineAction->setCheckable(true);
-    m_outlineAction->setChecked(true);
-    connect(m_outlineAction, SIGNAL(toggled(bool)), m_view, SLOT(setViewOutline(bool)));
-
-    menuBar()->addMenu(viewMenu);
-
-    QMenu *rendererMenu = new QMenu(tr("&Renderer"), this);
-    m_nativeAction = rendererMenu->addAction(tr("&Native"));
-    m_nativeAction->setCheckable(true);
-    m_nativeAction->setChecked(true);
-#ifndef QT_NO_OPENGL
-    m_glAction = rendererMenu->addAction(tr("&OpenGL"));
-    m_glAction->setCheckable(true);
-#endif
-    m_imageAction = rendererMenu->addAction(tr("&Image"));
-    m_imageAction->setCheckable(true);
-
-#ifndef QT_NO_OPENGL
-    rendererMenu->addSeparator();
-    m_highQualityAntialiasingAction = rendererMenu->addAction(tr("&High Quality Antialiasing"));
-    m_highQualityAntialiasingAction->setEnabled(false);
-    m_highQualityAntialiasingAction->setCheckable(true);
-    m_highQualityAntialiasingAction->setChecked(false);
-    connect(m_highQualityAntialiasingAction, SIGNAL(toggled(bool)), m_view, SLOT(setHighQualityAntialiasing(bool)));
-#endif
-
-    QActionGroup *rendererGroup = new QActionGroup(this);
-    rendererGroup->addAction(m_nativeAction);
-#ifndef QT_NO_OPENGL
-    rendererGroup->addAction(m_glAction);
-#endif
-    rendererGroup->addAction(m_imageAction);
-
-    menuBar()->addMenu(rendererMenu);
-
-    connect(openAction, SIGNAL(triggered()), this, SLOT(openFile()));
-    connect(quitAction, SIGNAL(triggered()), qApp, SLOT(quit()));
-    connect(rendererGroup, SIGNAL(triggered(QAction*)),
-            this, SLOT(setRenderer(QAction*)));
-
-    setCentralWidget(m_view);
-    setWindowTitle(tr("SVG Viewer"));
-}
-
-void MainWindow::openFile(const QString &path)
-{
-    QString fileName;
-    if (path.isNull())
-        fileName = QFileDialog::getOpenFileName(this, tr("Open SVG File"),
-                m_currentPath, "SVG files (*.svg *.svgz *.svg.gz)");
-    else
-        fileName = path;
-
-    if (!fileName.isEmpty()) {
-        QFile file(fileName);
-        if (!file.exists()) {
-            QMessageBox::critical(this, tr("Open SVG File"),
-                           QString("Could not open file '%1'.").arg(fileName));
-
-            m_outlineAction->setEnabled(false);
-            m_backgroundAction->setEnabled(false);
-            return;
-        }
-
-        m_view->openFile(file);
-
-        if (!fileName.startsWith(":/")) {
-            m_currentPath = fileName;
-            setWindowTitle(tr("%1 - SVGViewer").arg(m_currentPath));
-        }
-
-        m_outlineAction->setEnabled(true);
-        m_backgroundAction->setEnabled(true);
-
-        resize(m_view->sizeHint() + QSize(80, 80 + menuBar()->height()));
-    }
-}
-
-void MainWindow::setRenderer(QAction *action)
-{
-#ifndef QT_NO_OPENGL
-    m_highQualityAntialiasingAction->setEnabled(false);
-#endif
-
-    if (action == m_nativeAction)
-        m_view->setRenderer(SvgView::Native);
-#ifndef QT_NO_OPENGL
-    else if (action == m_glAction) {
-        m_highQualityAntialiasingAction->setEnabled(true);
-        m_view->setRenderer(SvgView::OpenGL);
-    }
-#endif
-    else if (action == m_imageAction) {
-        m_view->setRenderer(SvgView::Image);
-    }
-}
diff --git a/examples/painting/svgviewer/mainwindow.h b/examples/painting/svgviewer/mainwindow.h
deleted file mode 100644
index 09c4cea..0000000
--- a/examples/painting/svgviewer/mainwindow.h
+++ /dev/null
@@ -1,80 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/legal
-**
-** This file is part of the examples of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:BSD$
-** You may use this file under the terms of the BSD license as follows:
-**
-** "Redistribution and use in source and binary forms, with or without
-** modification, are permitted provided that the following conditions are
-** met:
-**   * Redistributions of source code must retain the above copyright
-**     notice, this list of conditions and the following disclaimer.
-**   * Redistributions in binary form must reproduce the above copyright
-**     notice, this list of conditions and the following disclaimer in
-**     the documentation and/or other materials provided with the
-**     distribution.
-**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
-**     of its contributors may be used to endorse or promote products derived
-**     from this software without specific prior written permission.
-**
-**
-** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-#ifndef MAINWINDOW_H
-#define MAINWINDOW_H
-
-#include <QMainWindow>
-#include <QString>
-
-class SvgView;
-
-QT_BEGIN_NAMESPACE
-class QAction;
-class QGraphicsView;
-class QGraphicsScene;
-class QGraphicsRectItem;
-QT_END_NAMESPACE
-
-class MainWindow : public QMainWindow
-{
-    Q_OBJECT
-
-public:
-    MainWindow();
-
-public slots:
-    void openFile(const QString &path = QString());
-    void setRenderer(QAction *action);
-
-private:
-    QAction *m_nativeAction;
-    QAction *m_glAction;
-    QAction *m_imageAction;
-    QAction *m_highQualityAntialiasingAction;
-    QAction *m_backgroundAction;
-    QAction *m_outlineAction;
-
-    SvgView *m_view;
-
-    QString m_currentPath;
-};
-
-#endif
diff --git a/examples/painting/svgviewer/svgview.cpp b/examples/painting/svgviewer/svgview.cpp
deleted file mode 100644
index 4c6f852..0000000
--- a/examples/painting/svgviewer/svgview.cpp
+++ /dev/null
@@ -1,188 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/legal
-**
-** This file is part of the examples of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:BSD$
-** You may use this file under the terms of the BSD license as follows:
-**
-** "Redistribution and use in source and binary forms, with or without
-** modification, are permitted provided that the following conditions are
-** met:
-**   * Redistributions of source code must retain the above copyright
-**     notice, this list of conditions and the following disclaimer.
-**   * Redistributions in binary form must reproduce the above copyright
-**     notice, this list of conditions and the following disclaimer in
-**     the documentation and/or other materials provided with the
-**     distribution.
-**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
-**     of its contributors may be used to endorse or promote products derived
-**     from this software without specific prior written permission.
-**
-**
-** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-#include "svgview.h"
-
-#include <QFile>
-#include <QWheelEvent>
-#include <QMouseEvent>
-#include <QGraphicsRectItem>
-#include <QGraphicsSvgItem>
-#include <QPaintEvent>
-#include <qmath.h>
-
-#ifndef QT_NO_OPENGL
-#include <QGLWidget>
-#endif
-
-SvgView::SvgView(QWidget *parent)
-    : QGraphicsView(parent)
-    , m_renderer(Native)
-    , m_svgItem(0)
-    , m_backgroundItem(0)
-    , m_outlineItem(0)
-{
-    setScene(new QGraphicsScene(this));
-    setTransformationAnchor(AnchorUnderMouse);
-    setDragMode(ScrollHandDrag);
-    setViewportUpdateMode(FullViewportUpdate);
-
-    // Prepare background check-board pattern
-    QPixmap tilePixmap(64, 64);
-    tilePixmap.fill(Qt::white);
-    QPainter tilePainter(&tilePixmap);
-    QColor color(220, 220, 220);
-    tilePainter.fillRect(0, 0, 32, 32, color);
-    tilePainter.fillRect(32, 32, 32, 32, color);
-    tilePainter.end();
-
-    setBackgroundBrush(tilePixmap);
-}
-
-void SvgView::drawBackground(QPainter *p, const QRectF &)
-{
-    p->save();
-    p->resetTransform();
-    p->drawTiledPixmap(viewport()->rect(), backgroundBrush().texture());
-    p->restore();
-}
-
-void SvgView::openFile(const QFile &file)
-{
-    if (!file.exists())
-        return;
-
-    QGraphicsScene *s = scene();
-
-    bool drawBackground = (m_backgroundItem ? m_backgroundItem->isVisible() : false);
-    bool drawOutline = (m_outlineItem ? m_outlineItem->isVisible() : true);
-
-    s->clear();
-    resetTransform();
-
-    m_svgItem = new QGraphicsSvgItem(file.fileName());
-    m_svgItem->setFlags(QGraphicsItem::ItemClipsToShape);
-    m_svgItem->setCacheMode(QGraphicsItem::NoCache);
-    m_svgItem->setZValue(0);
-
-    m_backgroundItem = new QGraphicsRectItem(m_svgItem->boundingRect());
-    m_backgroundItem->setBrush(Qt::white);
-    m_backgroundItem->setPen(Qt::NoPen);
-    m_backgroundItem->setVisible(drawBackground);
-    m_backgroundItem->setZValue(-1);
-
-    m_outlineItem = new QGraphicsRectItem(m_svgItem->boundingRect());
-    QPen outline(Qt::black, 2, Qt::DashLine);
-    outline.setCosmetic(true);
-    m_outlineItem->setPen(outline);
-    m_outlineItem->setBrush(Qt::NoBrush);
-    m_outlineItem->setVisible(drawOutline);
-    m_outlineItem->setZValue(1);
-
-    s->addItem(m_backgroundItem);
-    s->addItem(m_svgItem);
-    s->addItem(m_outlineItem);
-
-    s->setSceneRect(m_outlineItem->boundingRect().adjusted(-10, -10, 10, 10));
-}
-
-void SvgView::setRenderer(RendererType type)
-{
-    m_renderer = type;
-
-    if (m_renderer == OpenGL) {
-#ifndef QT_NO_OPENGL
-        setViewport(new QGLWidget(QGLFormat(QGL::SampleBuffers)));
-#endif
-    } else {
-        setViewport(new QWidget);
-    }
-}
-
-void SvgView::setHighQualityAntialiasing(bool highQualityAntialiasing)
-{
-#ifndef QT_NO_OPENGL
-    setRenderHint(QPainter::HighQualityAntialiasing, highQualityAntialiasing);
-#else
-    Q_UNUSED(highQualityAntialiasing);
-#endif
-}
-
-void SvgView::setViewBackground(bool enable)
-{
-    if (!m_backgroundItem)
-          return;
-
-    m_backgroundItem->setVisible(enable);
-}
-
-void SvgView::setViewOutline(bool enable)
-{
-    if (!m_outlineItem)
-        return;
-
-    m_outlineItem->setVisible(enable);
-}
-
-void SvgView::paintEvent(QPaintEvent *event)
-{
-    if (m_renderer == Image) {
-        if (m_image.size() != viewport()->size()) {
-            m_image = QImage(viewport()->size(), QImage::Format_ARGB32_Premultiplied);
-        }
-
-        QPainter imagePainter(&m_image);
-        QGraphicsView::render(&imagePainter);
-        imagePainter.end();
-
-        QPainter p(viewport());
-        p.drawImage(0, 0, m_image);
-
-    } else {
-        QGraphicsView::paintEvent(event);
-    }
-}
-
-void SvgView::wheelEvent(QWheelEvent *event)
-{
-    qreal factor = qPow(1.2, event->delta() / 240.0);
-    scale(factor, factor);
-    event->accept();
-}
-
diff --git a/examples/painting/svgviewer/svgview.h b/examples/painting/svgviewer/svgview.h
deleted file mode 100644
index e2635a0..0000000
--- a/examples/painting/svgviewer/svgview.h
+++ /dev/null
@@ -1,83 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/legal
-**
-** This file is part of the examples of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:BSD$
-** You may use this file under the terms of the BSD license as follows:
-**
-** "Redistribution and use in source and binary forms, with or without
-** modification, are permitted provided that the following conditions are
-** met:
-**   * Redistributions of source code must retain the above copyright
-**     notice, this list of conditions and the following disclaimer.
-**   * Redistributions in binary form must reproduce the above copyright
-**     notice, this list of conditions and the following disclaimer in
-**     the documentation and/or other materials provided with the
-**     distribution.
-**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
-**     of its contributors may be used to endorse or promote products derived
-**     from this software without specific prior written permission.
-**
-**
-** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-#ifndef SVGVIEW_H
-#define SVGVIEW_H
-
-#include <QGraphicsView>
-
-QT_BEGIN_NAMESPACE
-class QWheelEvent;
-class QPaintEvent;
-class QFile;
-QT_END_NAMESPACE
-
-class SvgView : public QGraphicsView
-{
-    Q_OBJECT
-
-public:
-    enum RendererType { Native, OpenGL, Image };
-
-    SvgView(QWidget *parent = 0);
-
-    void openFile(const QFile &file);
-    void setRenderer(RendererType type = Native);
-    void drawBackground(QPainter *p, const QRectF &rect);
-
-public slots:
-    void setHighQualityAntialiasing(bool highQualityAntialiasing);
-    void setViewBackground(bool enable);
-    void setViewOutline(bool enable);
-
-protected:
-    void wheelEvent(QWheelEvent *event);
-    void paintEvent(QPaintEvent *event);
-
-private:
-    RendererType m_renderer;
-
-    QGraphicsItem *m_svgItem;
-    QGraphicsRectItem *m_backgroundItem;
-    QGraphicsRectItem *m_outlineItem;
-
-    QImage m_image;
-};
-#endif // SVGVIEW_H
diff --git a/examples/painting/svgviewer/svgviewer.desktop b/examples/painting/svgviewer/svgviewer.desktop
deleted file mode 100644
index 477ef78..0000000
--- a/examples/painting/svgviewer/svgviewer.desktop
+++ /dev/null
@@ -1,11 +0,0 @@
-[Desktop Entry]
-Encoding=UTF-8
-Version=1.0
-Type=Application
-Terminal=false
-Name=SVG Viewer
-Exec=/opt/usr/bin/svgviewer
-Icon=svgviewer
-X-Window-Icon=
-X-HildonDesk-ShowInToolbar=true
-X-Osso-Type=application/x-executable
diff --git a/examples/painting/svgviewer/svgviewer.pro b/examples/painting/svgviewer/svgviewer.pro
deleted file mode 100644
index 94daed9..0000000
--- a/examples/painting/svgviewer/svgviewer.pro
+++ /dev/null
@@ -1,25 +0,0 @@
-HEADERS       = mainwindow.h \
-                svgview.h
-RESOURCES     = svgviewer.qrc
-SOURCES       = main.cpp \
-                mainwindow.cpp \
-                svgview.cpp
-QT           += svg xml
-
-contains(QT_CONFIG, opengl): QT += opengl
-
-CONFIG += console
-
-# install
-target.path = $$[QT_INSTALL_EXAMPLES]/qtsvg/painting/svgviewer
-sources.files = $$SOURCES $$HEADERS $$RESOURCES svgviewer.pro files
-sources.path = $$[QT_INSTALL_EXAMPLES]/qtsvg/painting/svgviewer
-INSTALLS += target sources
-
-wince*: {
-     addFiles.files = files\\*.svg
-     addFiles.path = "\\My Documents"
-     DEPLOYMENT += addFiles
-}
-
-QT+=widgets
diff --git a/examples/painting/svgviewer/svgviewer.qrc b/examples/painting/svgviewer/svgviewer.qrc
deleted file mode 100644
index db611f5..0000000
--- a/examples/painting/svgviewer/svgviewer.qrc
+++ /dev/null
@@ -1,6 +0,0 @@
-<!DOCTYPE RCC><RCC version="1.0">
-<qresource prefix="/">
-  <file>files/bubbles.svg</file>
-</qresource>
-</RCC>
-
diff --git a/examples/svg/embeddedsvgviewer/embeddedsvgviewer.cpp b/examples/svg/embeddedsvgviewer/embeddedsvgviewer.cpp
new file mode 100644
index 0000000..a10910e
--- /dev/null
+++ b/examples/svg/embeddedsvgviewer/embeddedsvgviewer.cpp
@@ -0,0 +1,181 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/legal
+**
+** This file is part of the demonstration applications of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and Digia.  For licensing terms and
+** conditions see http://qt.digia.com/licensing.  For further information
+** use the contact form at http://qt.digia.com/contact-us.
+**
+** GNU Lesser General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU Lesser
+** General Public License version 2.1 as published by the Free Software
+** Foundation and appearing in the file LICENSE.LGPL included in the
+** packaging of this file.  Please review the following information to
+** ensure the GNU Lesser General Public License version 2.1 requirements
+** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** In addition, as a special exception, Digia gives you certain additional
+** rights.  These rights are described in the Digia Qt LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU
+** General Public License version 3.0 as published by the Free Software
+** Foundation and appearing in the file LICENSE.GPL included in the
+** packaging of this file.  Please review the following information to
+** ensure the GNU General Public License version 3.0 requirements will be
+** met: http://www.gnu.org/copyleft/gpl.html.
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#include <QPainter>
+#include <QApplication>
+
+#include "embeddedsvgviewer.h"
+
+
+
+EmbeddedSvgViewer::EmbeddedSvgViewer(const QString &filePath)
+{
+    qApp->setStyleSheet(" QSlider:vertical { width: 50px; } \
+                          QSlider::groove:vertical { border: 1px solid black; border-radius: 3px; width: 6px; } \
+                          QSlider::handle:vertical { height: 25px; margin: 0 -22px; image: url(':/files/v-slider-handle.svg'); } \
+                       ");
+
+    m_renderer = new QSvgRenderer(filePath);
+    m_imageSize = m_renderer->viewBox().size();
+
+    m_viewBoxCenter = (QPointF(m_imageSize.width() / qreal(2.0), m_imageSize.height() / qreal(2.0)));
+
+    m_zoomSlider = new QSlider(Qt::Vertical, this);
+    m_zoomSlider->setMaximum(150);
+    m_zoomSlider->setMinimum(1);
+
+    connect(m_zoomSlider, SIGNAL(valueChanged(int)), this, SLOT(setZoom(int)));
+    m_zoomSlider->setValue(100);
+
+    m_quitButton = new QPushButton("Quit", this);
+
+    connect(m_quitButton, SIGNAL(pressed()), QApplication::instance(), SLOT(quit()));
+
+    if (m_renderer->animated())
+        connect(m_renderer, SIGNAL(repaintNeeded()), this, SLOT(update()));
+
+}
+
+void EmbeddedSvgViewer::paintEvent(QPaintEvent *event)
+{
+    Q_UNUSED(event)
+    QPainter painter(this);
+    m_renderer->setViewBox(m_viewBox);
+    m_renderer->render(&painter);
+}
+
+
+void EmbeddedSvgViewer::mouseMoveEvent ( QMouseEvent * event )
+{
+    int incX = int((event->globalX() - m_mousePress.x()) * m_imageScale);
+    int incY = int((event->globalY() - m_mousePress.y()) * m_imageScale);
+
+    QPointF newCenter;
+    newCenter.setX(m_viewBoxCenterOnMousePress.x() - incX);
+    newCenter.setY(m_viewBoxCenterOnMousePress.y() - incY);
+  
+    QRectF newViewBox = getViewBox(newCenter);
+
+
+    // Do a bounded move on the horizontal:
+    if ( (newViewBox.left() >= m_viewBoxBounds.left()) &&
+         (newViewBox.right() <= m_viewBoxBounds.right()) ) 
+    {
+        m_viewBoxCenter.setX(newCenter.x());
+        m_viewBox.setLeft(newViewBox.left());
+        m_viewBox.setRight(newViewBox.right());
+    }
+
+    // do a bounded move on the vertical:
+    if (  (newViewBox.top() >= m_viewBoxBounds.top()) &&
+          (newViewBox.bottom() <= m_viewBoxBounds.bottom()) )
+    {
+        m_viewBoxCenter.setY(newCenter.y());
+        m_viewBox.setTop(newViewBox.top());
+        m_viewBox.setBottom(newViewBox.bottom());
+    }
+
+    update();
+}
+
+void EmbeddedSvgViewer::mousePressEvent ( QMouseEvent * event )
+{
+    m_viewBoxCenterOnMousePress = m_viewBoxCenter;
+    m_mousePress = event->globalPos();
+}
+
+
+QRectF EmbeddedSvgViewer::getViewBox(QPointF viewBoxCenter)
+{
+    QRectF result;
+    result.setLeft(viewBoxCenter.x() - (m_viewBoxSize.width() / 2));
+    result.setTop(viewBoxCenter.y() - (m_viewBoxSize.height() / 2));
+    result.setRight(viewBoxCenter.x() + (m_viewBoxSize.width() / 2));
+    result.setBottom(viewBoxCenter.y() + (m_viewBoxSize.height() / 2));
+    return result;
+}
+
+void EmbeddedSvgViewer::updateImageScale()
+{
+    m_imageScale = qMax( (qreal)m_imageSize.width() / (qreal)width(), 
+                               (qreal)m_imageSize.height() / (qreal)height())*m_zoomLevel;
+
+    m_viewBoxSize.setWidth((qreal)width() * m_imageScale);
+    m_viewBoxSize.setHeight((qreal)height() * m_imageScale);
+}
+
+
+void EmbeddedSvgViewer::resizeEvent ( QResizeEvent * /* event */ )
+{
+    qreal origZoom = m_zoomLevel;
+
+    // Get the new bounds:
+    m_zoomLevel = 1.0;
+    updateImageScale();
+    m_viewBoxBounds = getViewBox(QPointF(m_imageSize.width() / 2.0, m_imageSize.height() / 2.0));
+
+    m_zoomLevel = origZoom;
+    updateImageScale();
+    m_viewBox = getViewBox(m_viewBoxCenter);
+
+    QRect sliderRect;
+    sliderRect.setLeft(width() - m_zoomSlider->sizeHint().width());
+    sliderRect.setRight(width());
+    sliderRect.setTop(height()/4);
+    sliderRect.setBottom(height() - (height()/4));
+    m_zoomSlider->setGeometry(sliderRect);
+}
+
+
+void EmbeddedSvgViewer::setZoom(int newZoom)
+{
+    m_zoomLevel = qreal(newZoom) / qreal(100);
+    
+    updateImageScale();
+    m_viewBox = getViewBox(m_viewBoxCenter);
+
+    update();
+}
+
+
+
+
+
diff --git a/examples/svg/embeddedsvgviewer/embeddedsvgviewer.h b/examples/svg/embeddedsvgviewer/embeddedsvgviewer.h
new file mode 100644
index 0000000..18c5eaa
--- /dev/null
+++ b/examples/svg/embeddedsvgviewer/embeddedsvgviewer.h
@@ -0,0 +1,87 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/legal
+**
+** This file is part of the demonstration applications of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and Digia.  For licensing terms and
+** conditions see http://qt.digia.com/licensing.  For further information
+** use the contact form at http://qt.digia.com/contact-us.
+**
+** GNU Lesser General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU Lesser
+** General Public License version 2.1 as published by the Free Software
+** Foundation and appearing in the file LICENSE.LGPL included in the
+** packaging of this file.  Please review the following information to
+** ensure the GNU Lesser General Public License version 2.1 requirements
+** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** In addition, as a special exception, Digia gives you certain additional
+** rights.  These rights are described in the Digia Qt LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU
+** General Public License version 3.0 as published by the Free Software
+** Foundation and appearing in the file LICENSE.GPL included in the
+** packaging of this file.  Please review the following information to
+** ensure the GNU General Public License version 3.0 requirements will be
+** met: http://www.gnu.org/copyleft/gpl.html.
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#ifndef EMBEDDED_SVG_VIEWER_H
+#define EMBEDDED_SVG_VIEWER_H
+
+#include <QWidget>
+#include <QString>
+#include <QSvgRenderer>
+#include <QSize>
+#include <QMouseEvent>
+#include <QSlider>
+#include <QPushButton>
+
+class EmbeddedSvgViewer : public QWidget
+{
+    Q_OBJECT
+public:
+    EmbeddedSvgViewer(const QString& filePath);
+    virtual void paintEvent(QPaintEvent *event);
+    void mouseMoveEvent ( QMouseEvent * event );
+    void mousePressEvent ( QMouseEvent * event );
+    void resizeEvent ( QResizeEvent * event );
+
+public slots:
+    void setZoom(int); // 100 <= newZoom < 0
+
+private:
+    QSvgRenderer* m_renderer;
+    QSlider* m_zoomSlider;
+    QPushButton* m_quitButton;
+    QSize m_imageSize;
+    qreal m_zoomLevel;
+    qreal m_imageScale; // How many Image coords 1 widget pixel is worth
+
+    QRectF m_viewBox;
+    QRectF m_viewBoxBounds;
+    QSizeF m_viewBoxSize;
+    QPointF m_viewBoxCenter;
+    QPointF m_viewBoxCenterOnMousePress;
+    QPoint m_mousePress;
+
+    void updateImageScale();
+    QRectF getViewBox(QPointF viewBoxCenter);
+};
+
+
+
+#endif
diff --git a/examples/svg/embeddedsvgviewer/embeddedsvgviewer.pro b/examples/svg/embeddedsvgviewer/embeddedsvgviewer.pro
new file mode 100644
index 0000000..c48a317
--- /dev/null
+++ b/examples/svg/embeddedsvgviewer/embeddedsvgviewer.pro
@@ -0,0 +1,16 @@
+TEMPLATE = app
+QT += widgets svg
+
+HEADERS += embeddedsvgviewer.h
+SOURCES += embeddedsvgviewer.cpp main.cpp
+RESOURCES += embeddedsvgviewer.qrc
+
+target.path = $$[QT_INSTALL_EXAMPLES]/qtsvg/embedded/embeddedsvgviewer
+sources.files = $$SOURCES $$HEADERS $$RESOURCES *.pro *.html *.svg files
+sources.path = $$[QT_INSTALL_EXAMPLES]/qtsvg/embedded/embeddedsvgviewer
+INSTALLS += target sources
+
+wince* {
+   DEPLOYMENT_PLUGIN += qsvg
+}
+
diff --git a/examples/svg/embeddedsvgviewer/embeddedsvgviewer.qrc b/examples/svg/embeddedsvgviewer/embeddedsvgviewer.qrc
new file mode 100644
index 0000000..bb02118
--- /dev/null
+++ b/examples/svg/embeddedsvgviewer/embeddedsvgviewer.qrc
@@ -0,0 +1,7 @@
+<!DOCTYPE RCC><RCC version="1.0">
+<qresource prefix="/">
+    <file>files/v-slider-handle.svg</file>
+    <file>files/default.svg</file>
+</qresource>
+</RCC>
+
diff --git a/examples/svg/embeddedsvgviewer/files/default.svg b/examples/svg/embeddedsvgviewer/files/default.svg
new file mode 100644
index 0000000..c28a711
--- /dev/null
+++ b/examples/svg/embeddedsvgviewer/files/default.svg
@@ -0,0 +1,86 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<svg
+   xmlns:dc="http://purl.org/dc/elements/1.1/"
+   xmlns:cc="http://web.resource.org/cc/"
+   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
+   xmlns:svg="http://www.w3.org/2000/svg"
+   xmlns="http://www.w3.org/2000/svg"
+   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
+   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
+   width="400px"
+   height="400px"
+   baseProfile="tiny"
+   id="svg8268"
+   sodipodi:version="0.32"
+   inkscape:version="0.45.1"
+   sodipodi:docname="simple2.svg"
+   sodipodi:docbase="/nfs/OpenMoko/SVGs"
+   inkscape:output_extension="org.inkscape.output.svg.inkscape">
+  <metadata
+     id="metadata8283">
+    <rdf:RDF>
+      <cc:Work
+         rdf:about="">
+        <dc:format>image/svg+xml</dc:format>
+        <dc:type
+           rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
+      </cc:Work>
+    </rdf:RDF>
+  </metadata>
+  <defs
+     id="defs8281" />
+  <sodipodi:namedview
+     inkscape:window-height="917"
+     inkscape:window-width="1324"
+     inkscape:pageshadow="2"
+     inkscape:pageopacity="0.0"
+     guidetolerance="10.0"
+     gridtolerance="10.0"
+     objecttolerance="10.0"
+     borderopacity="1.0"
+     bordercolor="#666666"
+     pagecolor="#ffffff"
+     id="base"
+     inkscape:zoom="2.1452345"
+     inkscape:cx="185.25"
+     inkscape:cy="214.75"
+     inkscape:window-x="0"
+     inkscape:window-y="30"
+     inkscape:current-layer="svg8268" />
+  <g
+     stroke="DarkBlue"
+     stroke-width="10"
+     id="g8270">
+    <rect
+       fill="blue"
+       fill-opacity="0.5"
+       x="25"
+       y="25"
+       width="175"
+       height="175"
+       id="rect8272" />
+  </g>
+  <circle
+     cx="200"
+     cy="200"
+     r="75"
+     id="circle8274"
+     sodipodi:cx="200"
+     sodipodi:cy="200"
+     sodipodi:rx="75"
+     sodipodi:ry="75"
+     transform="translate(-26.104372,21.909027)"
+     style="fill:#ffff00;fill-opacity:0.5;stroke:#000000" />
+  <polygon
+     fill="green"
+     stroke="black"
+     fill-opacity="0.5"
+     stroke-width="1"
+     points="200,225 350,225 275,350"
+     id="polygon8276" />
+  <path
+     style="fill:#000000;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;fill-opacity:0.50196081"
+     d="M 303.7037,50.705207 C 173.88522,56.588264 90.320951,92.710345 162.85059,120.82533 C 211.91719,139.84524 196.63811,214.12391 233.86243,192.59259 C 284.31755,163.4083 299.34345,193.75691 311.11111,187.30159 C 347.88407,167.12924 269.34382,134.85785 303.81608,114.5167 C 394.71183,60.881583 332.47907,46.043712 303.7037,50.705207 z "
+     id="path8289"
+     sodipodi:nodetypes="cssssc" />
+</svg>
diff --git a/examples/svg/embeddedsvgviewer/files/v-slider-handle.svg b/examples/svg/embeddedsvgviewer/files/v-slider-handle.svg
new file mode 100644
index 0000000..4ee87f8
--- /dev/null
+++ b/examples/svg/embeddedsvgviewer/files/v-slider-handle.svg
@@ -0,0 +1,100 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<!-- Created with Inkscape (http://www.inkscape.org/) -->
+<svg
+   xmlns:dc="http://purl.org/dc/elements/1.1/"
+   xmlns:cc="http://web.resource.org/cc/"
+   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
+   xmlns:svg="http://www.w3.org/2000/svg"
+   xmlns="http://www.w3.org/2000/svg"
+   xmlns:xlink="http://www.w3.org/1999/xlink"
+   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
+   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
+   width="50"
+   height="25"
+   id="svg2"
+   sodipodi:version="0.32"
+   inkscape:version="0.45.1"
+   version="1.0"
+   sodipodi:docbase="/home/tcooksey/Projects/qt-4.4/demos/embedded/embeddedsvgviewer/files"
+   sodipodi:docname="v-slider-handle.svg"
+   inkscape:output_extension="org.inkscape.output.svg.inkscape">
+  <defs
+     id="defs4">
+    <linearGradient
+       inkscape:collect="always"
+       id="linearGradient2158">
+      <stop
+         style="stop-color:#000000;stop-opacity:1;"
+         offset="0"
+         id="stop2160" />
+      <stop
+         style="stop-color:#000000;stop-opacity:0;"
+         offset="1"
+         id="stop2162" />
+    </linearGradient>
+    <linearGradient
+       inkscape:collect="always"
+       xlink:href="#linearGradient2158"
+       id="linearGradient2164"
+       x1="26.10779"
+       y1="9.1025448"
+       x2="26.10779"
+       y2="-0.01334004"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(0.9876687,0,0,2.5969342,0.3086332,-0.476397)" />
+  </defs>
+  <sodipodi:namedview
+     id="base"
+     pagecolor="#ffffff"
+     bordercolor="#666666"
+     borderopacity="1.0"
+     gridtolerance="10000"
+     guidetolerance="10"
+     objecttolerance="10"
+     inkscape:pageopacity="0.0"
+     inkscape:pageshadow="2"
+     inkscape:zoom="12.256878"
+     inkscape:cx="42.920885"
+     inkscape:cy="4.2252457"
+     inkscape:document-units="px"
+     inkscape:current-layer="layer1"
+     width="50px"
+     height="25px"
+     inkscape:window-width="1282"
+     inkscape:window-height="879"
+     inkscape:window-x="137"
+     inkscape:window-y="30" />
+  <metadata
+     id="metadata7">
+    <rdf:RDF>
+      <cc:Work
+         rdf:about="">
+        <dc:format>image/svg+xml</dc:format>
+        <dc:type
+           rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
+      </cc:Work>
+    </rdf:RDF>
+  </metadata>
+  <g
+     inkscape:label="Layer 1"
+     inkscape:groupmode="layer"
+     id="layer1">
+    <path
+       style="fill:url(#linearGradient2164);fill-opacity:1;fill-rule:evenodd;stroke:#000000;stroke-width:1.60153389px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
+       d="M 10.191803,24.254577 C 26.804559,24.254577 25.309299,24.303278 39.985656,24.303278 C 52.503796,24.303278 51.963217,0.91536797 40.722957,0.91536797 C 13.837108,0.91536797 16.298612,0.86901372 10.385089,0.86901372 C -2.0345215,0.86901372 -2.5249912,24.254577 10.191803,24.254577 z "
+       id="path2162"
+       sodipodi:nodetypes="csssc" />
+    <path
+       sodipodi:type="arc"
+       style="fill:#ff0000;fill-opacity:1;fill-rule:nonzero;stroke:#868686;stroke-linecap:round;stroke-linejoin:round;stroke-opacity:1"
+       id="path2166"
+       sodipodi:cx="9.4232807"
+       sodipodi:cy="13.169908"
+       sodipodi:rx="2.2436383"
+       sodipodi:ry="1.9580842"
+       d="M 9.4232808,15.127992 A 2.2436383,1.9580842 0 1 1 9.4232808,11.211823 L 9.4232807,13.169908 z"
+       sodipodi:start="1.5707963"
+       sodipodi:end="4.712389"
+       transform="matrix(4.3804554,0,0,2.228386,-25.247974,-16.463284)" />
+  </g>
+</svg>
diff --git a/examples/svg/embeddedsvgviewer/main.cpp b/examples/svg/embeddedsvgviewer/main.cpp
new file mode 100644
index 0000000..287e2a5
--- /dev/null
+++ b/examples/svg/embeddedsvgviewer/main.cpp
@@ -0,0 +1,71 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/legal
+**
+** This file is part of the demonstration applications of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and Digia.  For licensing terms and
+** conditions see http://qt.digia.com/licensing.  For further information
+** use the contact form at http://qt.digia.com/contact-us.
+**
+** GNU Lesser General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU Lesser
+** General Public License version 2.1 as published by the Free Software
+** Foundation and appearing in the file LICENSE.LGPL included in the
+** packaging of this file.  Please review the following information to
+** ensure the GNU Lesser General Public License version 2.1 requirements
+** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** In addition, as a special exception, Digia gives you certain additional
+** rights.  These rights are described in the Digia Qt LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU
+** General Public License version 3.0 as published by the Free Software
+** Foundation and appearing in the file LICENSE.GPL included in the
+** packaging of this file.  Please review the following information to
+** ensure the GNU General Public License version 3.0 requirements will be
+** met: http://www.gnu.org/copyleft/gpl.html.
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#include <QApplication>
+#include <QDebug>
+
+#include "embeddedsvgviewer.h"
+
+int main(int argc, char** argv)
+{
+    QApplication app(argc, argv);
+    Q_INIT_RESOURCE(embeddedsvgviewer);
+
+    QString filePath;
+
+    if (argc == 1)
+      filePath = QLatin1String(":/files/default.svg");
+    else if (argc == 2)
+      filePath = argv[1];
+    else {
+        qDebug() << QLatin1String("Please specify an svg file!");
+        return -1;
+    }
+
+    EmbeddedSvgViewer viewer(filePath);
+
+    viewer.showFullScreen();
+
+#ifdef QT_KEYPAD_NAVIGATION
+    QApplication::setNavigationMode(Qt::NavigationModeCursorAuto);
+#endif
+    return app.exec();
+} 
diff --git a/examples/svg/embeddedsvgviewer/shapes.svg b/examples/svg/embeddedsvgviewer/shapes.svg
new file mode 100644
index 0000000..c28a711
--- /dev/null
+++ b/examples/svg/embeddedsvgviewer/shapes.svg
@@ -0,0 +1,86 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<svg
+   xmlns:dc="http://purl.org/dc/elements/1.1/"
+   xmlns:cc="http://web.resource.org/cc/"
+   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
+   xmlns:svg="http://www.w3.org/2000/svg"
+   xmlns="http://www.w3.org/2000/svg"
+   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
+   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
+   width="400px"
+   height="400px"
+   baseProfile="tiny"
+   id="svg8268"
+   sodipodi:version="0.32"
+   inkscape:version="0.45.1"
+   sodipodi:docname="simple2.svg"
+   sodipodi:docbase="/nfs/OpenMoko/SVGs"
+   inkscape:output_extension="org.inkscape.output.svg.inkscape">
+  <metadata
+     id="metadata8283">
+    <rdf:RDF>
+      <cc:Work
+         rdf:about="">
+        <dc:format>image/svg+xml</dc:format>
+        <dc:type
+           rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
+      </cc:Work>
+    </rdf:RDF>
+  </metadata>
+  <defs
+     id="defs8281" />
+  <sodipodi:namedview
+     inkscape:window-height="917"
+     inkscape:window-width="1324"
+     inkscape:pageshadow="2"
+     inkscape:pageopacity="0.0"
+     guidetolerance="10.0"
+     gridtolerance="10.0"
+     objecttolerance="10.0"
+     borderopacity="1.0"
+     bordercolor="#666666"
+     pagecolor="#ffffff"
+     id="base"
+     inkscape:zoom="2.1452345"
+     inkscape:cx="185.25"
+     inkscape:cy="214.75"
+     inkscape:window-x="0"
+     inkscape:window-y="30"
+     inkscape:current-layer="svg8268" />
+  <g
+     stroke="DarkBlue"
+     stroke-width="10"
+     id="g8270">
+    <rect
+       fill="blue"
+       fill-opacity="0.5"
+       x="25"
+       y="25"
+       width="175"
+       height="175"
+       id="rect8272" />
+  </g>
+  <circle
+     cx="200"
+     cy="200"
+     r="75"
+     id="circle8274"
+     sodipodi:cx="200"
+     sodipodi:cy="200"
+     sodipodi:rx="75"
+     sodipodi:ry="75"
+     transform="translate(-26.104372,21.909027)"
+     style="fill:#ffff00;fill-opacity:0.5;stroke:#000000" />
+  <polygon
+     fill="green"
+     stroke="black"
+     fill-opacity="0.5"
+     stroke-width="1"
+     points="200,225 350,225 275,350"
+     id="polygon8276" />
+  <path
+     style="fill:#000000;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;fill-opacity:0.50196081"
+     d="M 303.7037,50.705207 C 173.88522,56.588264 90.320951,92.710345 162.85059,120.82533 C 211.91719,139.84524 196.63811,214.12391 233.86243,192.59259 C 284.31755,163.4083 299.34345,193.75691 311.11111,187.30159 C 347.88407,167.12924 269.34382,134.85785 303.81608,114.5167 C 394.71183,60.881583 332.47907,46.043712 303.7037,50.705207 z "
+     id="path8289"
+     sodipodi:nodetypes="cssssc" />
+</svg>
diff --git a/examples/svg/embeddedsvgviewer/spheres.svg b/examples/svg/embeddedsvgviewer/spheres.svg
new file mode 100644
index 0000000..e108777
--- /dev/null
+++ b/examples/svg/embeddedsvgviewer/spheres.svg
@@ -0,0 +1,81 @@
+<?xml version="1.0" standalone="no"?>
+<svg width="8cm" height="8cm" viewBox="0 0 400 400"
+    xmlns="http://www.w3.org/2000/svg"
+    xmlns:xlink="http://www.w3.org/1999/xlink/"
+    baseProfile="tiny" version="1.2">
+  <title>Spheres</title>
+  <desc>Gradient filled spheres with different colors.</desc>
+    <defs>
+      <!-- Create radial gradients for each circle to make them look like
+           spheres. -->
+      <radialGradient id="blueSphere" gradientUnits="userSpaceOnUse"
+                      cx="0" cy="0" r="100" fx="-50" fy="-50">
+        <stop offset="0%" stop-color="white" />
+        <stop offset="75%" stop-color="blue" />
+        <stop offset="100%" stop-color="#222244" />
+      </radialGradient>
+      <radialGradient id="redSphere" gradientUnits="userSpaceOnUse"
+                      cx="0" cy="0" r="100" fx="-50" fy="-50">
+        <stop offset="0%" stop-color="white" />
+        <stop offset="75%" stop-color="red" />
+        <stop offset="100%" stop-color="#442222" />
+      </radialGradient>
+      <radialGradient id="greenSphere" gradientUnits="userSpaceOnUse"
+                      cx="0" cy="0" r="100" fx="-50" fy="-50">
+        <stop offset="0%" stop-color="white" />
+        <stop offset="75%" stop-color="green" />
+        <stop offset="100%" stop-color="#113311" />
+      </radialGradient>
+      <radialGradient id="yellowSphere" gradientUnits="userSpaceOnUse"
+                      cx="0" cy="0" r="100" fx="-50" fy="-50">
+        <stop offset="0%" stop-color="white" />
+        <stop offset="75%" stop-color="yellow" />
+        <stop offset="100%" stop-color="#444422" />
+      </radialGradient>
+      <radialGradient id="shadowGrad" gradientUnits="userSpaceOnUse"
+                      cx="0" cy="0" r="100" fx="-50" fy="50">
+        <stop offset="0%" stop-color="black" stop-opacity="1.0" />
+        <stop offset="100%" stop-color="white" stop-opacity="0.0" />
+      </radialGradient>
+
+      <!-- Define a shadow for each sphere. -->
+      <circle id="shadow" fill="url(#shadowGrad)" cx="0" cy="0" r="100" />
+    </defs>
+  <g fill="#ffee99" stroke="none" >
+    <rect x="0" y="0" width="400" height="400" />
+  </g>
+  <g fill="white" stroke="none" >
+    <rect x="0" y="175" width="400" height="225" />
+  </g>
+  <g transform="translate(200,290) scale(2.0,1.0) rotate(45)" >
+    <rect fill="#a6ce39" x="-69" y="-69" width="138" height="138" />
+    <circle fill="black" cx="0" cy="0" r="50" />
+    <circle fill="#a6ce39" cx="0" cy="0" r="33" />
+    <path fill="black" d="M 37,50 L 50,37 L 12,-1 L 22,-11 L 10,-24 L -24,10
+                          L -11,22 L -1,12 Z" />
+    <animateTransform attributeName="transform"  type="rotate" values="0; 360"
+	       begin="0s" dur="10s" fill="freeze" />
+  </g>
+  <g transform="translate(200,175)">
+    <use xlink:href="#shadow" transform="translate(25,55) scale(1.0,0.5)" />
+    <circle fill="url(#blueSphere)" cx="0" cy="0" r="100" />
+  </g>
+  <g transform="translate(315,240)">
+    <g transform="scale(0.5,0.5)">
+      <use xlink:href="#shadow" transform="translate(25,55) scale(1.0,0.5)" />
+      <circle fill="url(#redSphere)" cx="0" cy="0" r="100" />
+    </g>
+  </g>
+  <g transform="translate(80,275)">
+    <g transform="scale(0.65,0.65)">
+      <use xlink:href="#shadow" transform="translate(25,55) scale(1.0,0.5)" />
+      <circle fill="url(#greenSphere)" cx="0" cy="0" r="100" />
+    </g>
+  </g>
+  <g transform="translate(255,325)">
+    <g transform="scale(0.3,0.3)">
+      <use xlink:href="#shadow" transform="translate(25,55) scale(1.0,0.5)" />
+      <circle fill="url(#yellowSphere)" cx="0" cy="0" r="100" />
+    </g>
+  </g>
+</svg>
diff --git a/examples/svg/svg.pro b/examples/svg/svg.pro
new file mode 100644
index 0000000..1652275
--- /dev/null
+++ b/examples/svg/svg.pro
@@ -0,0 +1,7 @@
+TEMPLATE = subdirs
+
+!contains(QT_CONFIG, no-widgets): SUBDIRS += embeddedsvgviewer  svggenerator  svgviewer
+
+QT+=widgets
+
+
diff --git a/examples/svg/svggenerator/displaywidget.cpp b/examples/svg/svggenerator/displaywidget.cpp
new file mode 100644
index 0000000..4bb6459
--- /dev/null
+++ b/examples/svg/svggenerator/displaywidget.cpp
@@ -0,0 +1,148 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/legal
+**
+** This file is part of the examples of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:BSD$
+** You may use this file under the terms of the BSD license as follows:
+**
+** "Redistribution and use in source and binary forms, with or without
+** modification, are permitted provided that the following conditions are
+** met:
+**   * Redistributions of source code must retain the above copyright
+**     notice, this list of conditions and the following disclaimer.
+**   * Redistributions in binary form must reproduce the above copyright
+**     notice, this list of conditions and the following disclaimer in
+**     the documentation and/or other materials provided with the
+**     distribution.
+**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
+**     of its contributors may be used to endorse or promote products derived
+**     from this software without specific prior written permission.
+**
+**
+** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#include <QtWidgets>
+#include "displaywidget.h"
+
+DisplayWidget::DisplayWidget(QWidget *parent)
+    : QWidget(parent)
+{
+    QPainterPath car;
+    QPainterPath house;
+
+    QFile file(":resources/shapes.dat");
+    file.open(QFile::ReadOnly);
+    QDataStream stream(&file);
+    stream >> car >> house >> tree >> moon;
+    file.close();
+
+    shapeMap[Car] = car;
+    shapeMap[House] = house;
+
+    background = Sky;
+    shapeColor = Qt::darkYellow;
+    shape = House;
+}
+
+//! [paint event]
+void DisplayWidget::paintEvent(QPaintEvent * /* event */)
+{
+    QPainter painter;
+    painter.begin(this);
+    painter.setRenderHint(QPainter::Antialiasing);
+    paint(painter);
+    painter.end();
+}
+//! [paint event]
+
+//! [paint function]
+void DisplayWidget::paint(QPainter &painter)
+{
+//![paint picture]
+    painter.setClipRect(QRect(0, 0, 200, 200));
+    painter.setPen(Qt::NoPen);
+
+    switch (background) {
+    case Sky:
+    default:
+        painter.fillRect(QRect(0, 0, 200, 200), Qt::darkBlue);
+        painter.translate(145, 10);
+        painter.setBrush(Qt::white);
+        painter.drawPath(moon);
+        painter.translate(-145, -10);
+        break;
+    case Trees:
+    {
+        painter.fillRect(QRect(0, 0, 200, 200), Qt::darkGreen);
+        painter.setBrush(Qt::green);
+        painter.setPen(Qt::black);
+        for (int y = -55, row = 0; y < 200; y += 50, ++row) {
+            int xs;
+            if (row == 2 || row == 3)
+                xs = 150;
+            else
+                xs = 50;
+            for (int x = 0; x < 200; x += xs) {
+                painter.save();
+                painter.translate(x, y);
+                painter.drawPath(tree);
+                painter.restore();
+            }
+        }
+        break;
+    }
+    case Road:
+        painter.fillRect(QRect(0, 0, 200, 200), Qt::gray);
+        painter.setPen(QPen(Qt::white, 4, Qt::DashLine));
+        painter.drawLine(QLine(0, 35, 200, 35));
+        painter.drawLine(QLine(0, 165, 200, 165));
+        break;
+    }
+
+    painter.setBrush(shapeColor);
+    painter.setPen(Qt::black);
+    painter.translate(100, 100);
+    painter.drawPath(shapeMap[shape]);
+//![paint picture]
+}
+//! [paint function]
+
+QColor DisplayWidget::color() const
+{
+    return shapeColor;
+}
+
+void DisplayWidget::setBackground(Background background)
+{
+    this->background = background;
+    update();
+}
+
+void DisplayWidget::setColor(const QColor &color)
+{
+    this->shapeColor = color;
+    update();
+}
+
+void DisplayWidget::setShape(Shape shape)
+{
+    this->shape = shape;
+    update();
+}
diff --git a/examples/svg/svggenerator/displaywidget.h b/examples/svg/svggenerator/displaywidget.h
new file mode 100644
index 0000000..eca7f5d
--- /dev/null
+++ b/examples/svg/svggenerator/displaywidget.h
@@ -0,0 +1,79 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/legal
+**
+** This file is part of the examples of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:BSD$
+** You may use this file under the terms of the BSD license as follows:
+**
+** "Redistribution and use in source and binary forms, with or without
+** modification, are permitted provided that the following conditions are
+** met:
+**   * Redistributions of source code must retain the above copyright
+**     notice, this list of conditions and the following disclaimer.
+**   * Redistributions in binary form must reproduce the above copyright
+**     notice, this list of conditions and the following disclaimer in
+**     the documentation and/or other materials provided with the
+**     distribution.
+**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
+**     of its contributors may be used to endorse or promote products derived
+**     from this software without specific prior written permission.
+**
+**
+** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#ifndef DISPLAYWIDGET_H
+#define DISPLAYWIDGET_H
+
+#include <QColor>
+#include <QHash>
+#include <QWidget>
+
+//! [DisplayWidget class definition]
+class DisplayWidget : public QWidget
+{
+    Q_OBJECT
+
+public:
+    enum Shape { House = 0, Car = 1 };
+    enum Background { Sky = 0, Trees = 1, Road = 2 };
+
+    DisplayWidget(QWidget *parent = 0);
+    QColor color() const;
+    void paint(QPainter &painter);
+
+public slots:
+    void setBackground(Background background);
+    void setColor(const QColor &color);
+    void setShape(Shape shape);
+
+protected:
+    void paintEvent(QPaintEvent *event);
+
+private:
+    Background background;
+    QColor shapeColor;
+    Shape shape;
+    QHash<Shape,QPainterPath> shapeMap;
+    QPainterPath moon;
+    QPainterPath tree;
+};
+//! [DisplayWidget class definition]
+
+#endif
diff --git a/examples/svg/svggenerator/doc/images/svggenerator-example.png b/examples/svg/svggenerator/doc/images/svggenerator-example.png
new file mode 100644
index 0000000..e7a8e53
Binary files /dev/null and b/examples/svg/svggenerator/doc/images/svggenerator-example.png differ
diff --git a/examples/svg/svggenerator/doc/src/svggenerator.qdoc b/examples/svg/svggenerator/doc/src/svggenerator.qdoc
new file mode 100644
index 0000000..f9ec684
--- /dev/null
+++ b/examples/svg/svggenerator/doc/src/svggenerator.qdoc
@@ -0,0 +1,122 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/legal
+**
+** This file is part of the documentation of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:FDL$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and Digia.  For licensing terms and
+** conditions see http://qt.digia.com/licensing.  For further information
+** use the contact form at http://qt.digia.com/contact-us.
+**
+** GNU Free Documentation License Usage
+** Alternatively, this file may be used under the terms of the GNU Free
+** Documentation License version 1.3 as published by the Free Software
+** Foundation and appearing in the file included in the packaging of
+** this file.  Please review the following information to ensure
+** the GNU Free Documentation License version 1.3 requirements
+** will be met: http://www.gnu.org/copyleft/fdl.html.
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+/*!
+    \example svggenerator
+    \title SVG Generator Example
+
+    The SVG Generator example shows how to add SVG file export to applications.
+
+    \image svggenerator-example.png
+
+    Scalable Vector Graphics (SVG) is an XML-based language for describing
+    two-dimensional vector graphics. Qt provides classes for rendering and
+    generating SVG drawings. This example allows the user to create a simple
+    picture and save it to an SVG file.
+
+    The example consists of two classes: \c Window and \c DisplayWidget.
+
+    The \c Window class contains the application logic and constructs the user
+    interface from a Qt Designer UI file as described in the
+    \l{Using a Designer UI File in Your Application#The Multiple Inheritance Approach}{Qt Designer manual}.
+    It also contains the code to write an SVG file.
+
+    The \c DisplayWidget class performs all the work of painting a picture on
+    screen. Since we want the SVG to resemble this picture as closely as
+    possible, we make this code available to the \c Window class so that it can
+    be used to generate SVG files.
+
+    \section1 The DisplayWidget Class
+
+    The \c DisplayWidget class displays a drawing consisting of a selection of
+    elements chosen by the user. These are defined using \c Shape and
+    \c Background enums that are included within the class definition:
+
+    \snippet svggenerator/displaywidget.h DisplayWidget class definition
+
+    Much of this class is used to configure the appearance of the drawing. The
+    \c paintEvent() and \c paint() functions are most relevant to the purpose
+    of this example, so we will describe these here and leave the reader to
+    look at the source code for the example to see how shapes and colors are
+    handled.
+
+    We reimplement the QWidget::paintEvent() function to display the drawing
+    on screen:
+
+    \snippet svggenerator/displaywidget.cpp paint event
+
+    Here, we only construct a QPainter object, begin painting on the device
+    and set a render hint for improved output quality before calling the
+    \c paint() function to perform the painting itself. When this returns,
+    we close the painter and return.
+
+    The \c paint() function is designed to be used for different painting
+    tasks. In this example, we use it to draw on a \c DisplayWidget instance
+    and on a QSvgGenerator object. We show how the painting is performed to
+    demonstrate that there is nothing device-specific about the process:
+
+    \snippet svggenerator/displaywidget.cpp paint function
+
+    \section1 The Window Class
+
+    The \c Window class represents the example's window, containing the user
+    interface, which has been created using Qt Designer:
+
+    \snippet svggenerator/window.h Window class definition
+
+    As with the \c DisplayWidget class, we concentrate on the parts of the code
+    which are concerned with painting and SVG generation. In the \c Window
+    class, the \c saveSvg() function is called whenever the \b{Save As...}
+    button is clicked; this connection was defined in the \c{window.ui} file
+    using Qt Designer.
+
+    The start of the \c saveSvg() function performs the task of showing a file
+    dialog so that the user can specify a SVG file to save the drawing to.
+    
+    \snippet svggenerator/window.cpp save SVG
+
+    In the rest of the function, we set up the generator and configure it to
+    generate output with the appropriate dimensions and write to the
+    user-specified file. We paint on the QSvgGenerator object in the same way
+    that we paint on a widget, calling the \c DisplayWidget::paint() function
+    so that we use exactly the same code that we used to display the drawing.
+
+    The generation process itself begins with the call to the painter's
+    \l{QPainter::}{begin()} function and ends with call to its
+    \l{QPainter::}{end()} function. The QSvgGenerator paint device relies on
+    the explicit use of these functions to ensure that output is written to
+    the file.
+
+    \section1 Further Reading
+
+    The \l{SVG Viewer Example} shows how to display SVG drawings in an
+    application, and can be used to show the contents of SVG files created
+    by this example.
+
+    See the QtSvg module documentation for more information about SVG and Qt's
+    SVG classes.
+*/
diff --git a/examples/svg/svggenerator/forms/window.ui b/examples/svg/svggenerator/forms/window.ui
new file mode 100644
index 0000000..bf11908
--- /dev/null
+++ b/examples/svg/svggenerator/forms/window.ui
@@ -0,0 +1,249 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<ui version="4.0">
+ <class>Window</class>
+ <widget class="QWidget" name="Window">
+  <property name="geometry">
+   <rect>
+    <x>0</x>
+    <y>0</y>
+    <width>339</width>
+    <height>353</height>
+   </rect>
+  </property>
+  <property name="windowTitle">
+   <string>SVG Generator</string>
+  </property>
+  <layout class="QGridLayout" name="gridLayout_2">
+   <property name="sizeConstraint">
+    <enum>QLayout::SetFixedSize</enum>
+   </property>
+   <item row="0" column="0">
+    <spacer name="horizontalSpacer_2">
+     <property name="orientation">
+      <enum>Qt::Horizontal</enum>
+     </property>
+     <property name="sizeHint" stdset="0">
+      <size>
+       <width>40</width>
+       <height>20</height>
+      </size>
+     </property>
+    </spacer>
+   </item>
+   <item row="0" column="1">
+    <widget class="DisplayWidget" name="displayWidget" native="true">
+     <property name="sizePolicy">
+      <sizepolicy hsizetype="Fixed" vsizetype="Fixed">
+       <horstretch>200</horstretch>
+       <verstretch>200</verstretch>
+      </sizepolicy>
+     </property>
+     <property name="minimumSize">
+      <size>
+       <width>200</width>
+       <height>200</height>
+      </size>
+     </property>
+     <property name="maximumSize">
+      <size>
+       <width>200</width>
+       <height>200</height>
+      </size>
+     </property>
+    </widget>
+   </item>
+   <item row="0" column="2">
+    <spacer name="horizontalSpacer_3">
+     <property name="orientation">
+      <enum>Qt::Horizontal</enum>
+     </property>
+     <property name="sizeHint" stdset="0">
+      <size>
+       <width>40</width>
+       <height>20</height>
+      </size>
+     </property>
+    </spacer>
+   </item>
+   <item row="1" column="0" colspan="3">
+    <layout class="QGridLayout" name="gridLayout">
+     <item row="0" column="0">
+      <widget class="QLabel" name="label">
+       <property name="text">
+        <string>&amp;Shape:</string>
+       </property>
+       <property name="buddy">
+        <cstring>shapeComboBox</cstring>
+       </property>
+      </widget>
+     </item>
+     <item row="0" column="1">
+      <widget class="QComboBox" name="shapeComboBox">
+       <item>
+        <property name="text">
+         <string>House</string>
+        </property>
+       </item>
+       <item>
+        <property name="text">
+         <string>Car</string>
+        </property>
+       </item>
+      </widget>
+     </item>
+     <item row="1" column="0">
+      <widget class="QLabel" name="label_2">
+       <property name="text">
+        <string>&amp;Color:</string>
+       </property>
+       <property name="buddy">
+        <cstring>colorButton</cstring>
+       </property>
+      </widget>
+     </item>
+     <item row="1" column="1">
+      <widget class="QToolButton" name="colorButton">
+       <property name="text">
+        <string>Choose Color...</string>
+       </property>
+      </widget>
+     </item>
+     <item row="2" column="0">
+      <widget class="QLabel" name="label_3">
+       <property name="text">
+        <string>&amp;Background:</string>
+       </property>
+       <property name="buddy">
+        <cstring>shapeComboBox_2</cstring>
+       </property>
+      </widget>
+     </item>
+     <item row="2" column="1">
+      <widget class="QComboBox" name="shapeComboBox_2">
+       <item>
+        <property name="text">
+         <string>Sky</string>
+        </property>
+       </item>
+       <item>
+        <property name="text">
+         <string>Trees</string>
+        </property>
+       </item>
+       <item>
+        <property name="text">
+         <string>Road</string>
+        </property>
+       </item>
+      </widget>
+     </item>
+    </layout>
+   </item>
+   <item row="2" column="0" colspan="3">
+    <layout class="QHBoxLayout" name="horizontalLayout">
+     <item>
+      <spacer name="horizontalSpacer">
+       <property name="orientation">
+        <enum>Qt::Horizontal</enum>
+       </property>
+       <property name="sizeHint" stdset="0">
+        <size>
+         <width>40</width>
+         <height>20</height>
+        </size>
+       </property>
+      </spacer>
+     </item>
+     <item>
+      <widget class="QToolButton" name="toolButton_2">
+       <property name="text">
+        <string>Save &amp;As...</string>
+       </property>
+      </widget>
+     </item>
+    </layout>
+   </item>
+  </layout>
+ </widget>
+ <customwidgets>
+  <customwidget>
+   <class>DisplayWidget</class>
+   <extends>QWidget</extends>
+   <header>displaywidget.h</header>
+   <container>1</container>
+  </customwidget>
+ </customwidgets>
+ <resources/>
+ <connections>
+  <connection>
+   <sender>shapeComboBox</sender>
+   <signal>currentIndexChanged(int)</signal>
+   <receiver>Window</receiver>
+   <slot>updateShape(int)</slot>
+   <hints>
+    <hint type="sourcelabel">
+     <x>288</x>
+     <y>232</y>
+    </hint>
+    <hint type="destinationlabel">
+     <x>336</x>
+     <y>234</y>
+    </hint>
+   </hints>
+  </connection>
+  <connection>
+   <sender>colorButton</sender>
+   <signal>clicked()</signal>
+   <receiver>Window</receiver>
+   <slot>updateColor()</slot>
+   <hints>
+    <hint type="sourcelabel">
+     <x>301</x>
+     <y>262</y>
+    </hint>
+    <hint type="destinationlabel">
+     <x>337</x>
+     <y>267</y>
+    </hint>
+   </hints>
+  </connection>
+  <connection>
+   <sender>shapeComboBox_2</sender>
+   <signal>currentIndexChanged(int)</signal>
+   <receiver>Window</receiver>
+   <slot>updateBackground(int)</slot>
+   <hints>
+    <hint type="sourcelabel">
+     <x>306</x>
+     <y>299</y>
+    </hint>
+    <hint type="destinationlabel">
+     <x>337</x>
+     <y>311</y>
+    </hint>
+   </hints>
+  </connection>
+  <connection>
+   <sender>toolButton_2</sender>
+   <signal>clicked()</signal>
+   <receiver>Window</receiver>
+   <slot>saveSvg()</slot>
+   <hints>
+    <hint type="sourcelabel">
+     <x>298</x>
+     <y>336</y>
+    </hint>
+    <hint type="destinationlabel">
+     <x>307</x>
+     <y>348</y>
+    </hint>
+   </hints>
+  </connection>
+ </connections>
+ <slots>
+  <slot>updateBackground(int)</slot>
+  <slot>updateColor()</slot>
+  <slot>updateShape(int)</slot>
+  <slot>saveSvg()</slot>
+ </slots>
+</ui>
diff --git a/examples/svg/svggenerator/main.cpp b/examples/svg/svggenerator/main.cpp
new file mode 100644
index 0000000..a244f67
--- /dev/null
+++ b/examples/svg/svggenerator/main.cpp
@@ -0,0 +1,51 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/legal
+**
+** This file is part of the examples of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:BSD$
+** You may use this file under the terms of the BSD license as follows:
+**
+** "Redistribution and use in source and binary forms, with or without
+** modification, are permitted provided that the following conditions are
+** met:
+**   * Redistributions of source code must retain the above copyright
+**     notice, this list of conditions and the following disclaimer.
+**   * Redistributions in binary form must reproduce the above copyright
+**     notice, this list of conditions and the following disclaimer in
+**     the documentation and/or other materials provided with the
+**     distribution.
+**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
+**     of its contributors may be used to endorse or promote products derived
+**     from this software without specific prior written permission.
+**
+**
+** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#include <QApplication>
+
+#include "window.h"
+
+int main(int argc, char *argv[])
+{
+    QApplication app(argc, argv);
+    Window window;
+    window.show();
+    return app.exec();
+}
diff --git a/examples/svg/svggenerator/resources/shapes.dat b/examples/svg/svggenerator/resources/shapes.dat
new file mode 100644
index 0000000..d9b981e
Binary files /dev/null and b/examples/svg/svggenerator/resources/shapes.dat differ
diff --git a/examples/svg/svggenerator/svggenerator.desktop b/examples/svg/svggenerator/svggenerator.desktop
new file mode 100644
index 0000000..3ae32a4
--- /dev/null
+++ b/examples/svg/svggenerator/svggenerator.desktop
@@ -0,0 +1,11 @@
+[Desktop Entry]
+Encoding=UTF-8
+Version=1.0
+Type=Application
+Terminal=false
+Name=SVG Generator
+Exec=/opt/usr/bin/svggenerator
+Icon=svggenerator
+X-Window-Icon=
+X-HildonDesk-ShowInToolbar=true
+X-Osso-Type=application/x-executable
diff --git a/examples/svg/svggenerator/svggenerator.pro b/examples/svg/svggenerator/svggenerator.pro
new file mode 100644
index 0000000..4e62b22
--- /dev/null
+++ b/examples/svg/svggenerator/svggenerator.pro
@@ -0,0 +1,19 @@
+FORMS     = forms/window.ui
+HEADERS   = displaywidget.h \
+            window.h
+RESOURCES = svggenerator.qrc
+SOURCES   = displaywidget.cpp \
+            main.cpp \
+            window.cpp
+
+QT += svg
+
+INCLUDEPATH += $$PWD
+
+# install
+target.path = $$[QT_INSTALL_EXAMPLES]/qtsvg/painting/svggenerator
+sources.files = $$SOURCES $$HEADERS $$RESOURCES $$FORMS svggenerator.pro
+sources.path = $$[QT_INSTALL_EXAMPLES]/qtsvg/painting/svggenerator
+INSTALLS += target sources
+
+QT+=widgets
diff --git a/examples/svg/svggenerator/svggenerator.qrc b/examples/svg/svggenerator/svggenerator.qrc
new file mode 100644
index 0000000..061d1f6
--- /dev/null
+++ b/examples/svg/svggenerator/svggenerator.qrc
@@ -0,0 +1,5 @@
+<!DOCTYPE RCC><RCC version="1.0">
+<qresource>
+    <file>resources/shapes.dat</file>
+</qresource>
+</RCC>
diff --git a/examples/svg/svggenerator/window.cpp b/examples/svg/svggenerator/window.cpp
new file mode 100644
index 0000000..36c281e
--- /dev/null
+++ b/examples/svg/svggenerator/window.cpp
@@ -0,0 +1,100 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/legal
+**
+** This file is part of the examples of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:BSD$
+** You may use this file under the terms of the BSD license as follows:
+**
+** "Redistribution and use in source and binary forms, with or without
+** modification, are permitted provided that the following conditions are
+** met:
+**   * Redistributions of source code must retain the above copyright
+**     notice, this list of conditions and the following disclaimer.
+**   * Redistributions in binary form must reproduce the above copyright
+**     notice, this list of conditions and the following disclaimer in
+**     the documentation and/or other materials provided with the
+**     distribution.
+**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
+**     of its contributors may be used to endorse or promote products derived
+**     from this software without specific prior written permission.
+**
+**
+** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#include <QColorDialog>
+#include <QFileDialog>
+#include <QPainter>
+#include <QSvgGenerator>
+#include "window.h"
+#include "displaywidget.h"
+
+Window::Window(QWidget *parent)
+    : QWidget(parent)
+{
+    setupUi(this);
+}
+
+void Window::updateBackground(int background)
+{
+    displayWidget->setBackground(DisplayWidget::Background(background));
+}
+
+void Window::updateColor()
+{
+    QColor color = QColorDialog::getColor(displayWidget->color());
+    if (color.isValid())
+        displayWidget->setColor(color);
+}
+
+void Window::updateShape(int shape)
+{
+    displayWidget->setShape(DisplayWidget::Shape(shape));
+}
+
+//! [save SVG]
+void Window::saveSvg()
+{
+    QString newPath = QFileDialog::getSaveFileName(this, tr("Save SVG"),
+        path, tr("SVG files (*.svg)"));
+
+    if (newPath.isEmpty())
+        return;
+
+    path = newPath;
+
+//![configure SVG generator]
+    QSvgGenerator generator;
+    generator.setFileName(path);
+    generator.setSize(QSize(200, 200));
+    generator.setViewBox(QRect(0, 0, 200, 200));
+    generator.setTitle(tr("SVG Generator Example Drawing"));
+    generator.setDescription(tr("An SVG drawing created by the SVG Generator "
+                                "Example provided with Qt."));
+//![configure SVG generator]
+//![begin painting]
+    QPainter painter;
+    painter.begin(&generator);
+//![begin painting]
+    displayWidget->paint(painter);
+//![end painting]
+    painter.end();
+//![end painting]
+}
+//! [save SVG]
diff --git a/examples/svg/svggenerator/window.h b/examples/svg/svggenerator/window.h
new file mode 100644
index 0000000..6dd55c1
--- /dev/null
+++ b/examples/svg/svggenerator/window.h
@@ -0,0 +1,65 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/legal
+**
+** This file is part of the examples of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:BSD$
+** You may use this file under the terms of the BSD license as follows:
+**
+** "Redistribution and use in source and binary forms, with or without
+** modification, are permitted provided that the following conditions are
+** met:
+**   * Redistributions of source code must retain the above copyright
+**     notice, this list of conditions and the following disclaimer.
+**   * Redistributions in binary form must reproduce the above copyright
+**     notice, this list of conditions and the following disclaimer in
+**     the documentation and/or other materials provided with the
+**     distribution.
+**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
+**     of its contributors may be used to endorse or promote products derived
+**     from this software without specific prior written permission.
+**
+**
+** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#ifndef WINDOW_H
+#define WINDOW_H
+
+#include "ui_window.h"
+
+//! [Window class definition]
+class Window : public QWidget, private Ui::Window
+{
+    Q_OBJECT
+
+public:
+    Window(QWidget *parent = 0);
+
+public slots:
+    void saveSvg();
+    void updateBackground(int background);
+    void updateColor();
+    void updateShape(int shape);
+
+private:
+    QString path;
+};
+//! [Window class definition]
+
+#endif
diff --git a/examples/svg/svgviewer/doc/images/svgviewer-example.png b/examples/svg/svgviewer/doc/images/svgviewer-example.png
new file mode 100644
index 0000000..14f1377
Binary files /dev/null and b/examples/svg/svgviewer/doc/images/svgviewer-example.png differ
diff --git a/examples/svg/svgviewer/doc/src/svgviewer.qdoc b/examples/svg/svgviewer/doc/src/svgviewer.qdoc
new file mode 100644
index 0000000..0b04792
--- /dev/null
+++ b/examples/svg/svgviewer/doc/src/svgviewer.qdoc
@@ -0,0 +1,46 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/legal
+**
+** This file is part of the documentation of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:FDL$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and Digia.  For licensing terms and
+** conditions see http://qt.digia.com/licensing.  For further information
+** use the contact form at http://qt.digia.com/contact-us.
+**
+** GNU Free Documentation License Usage
+** Alternatively, this file may be used under the terms of the GNU Free
+** Documentation License version 1.3 as published by the Free Software
+** Foundation and appearing in the file included in the packaging of
+** this file.  Please review the following information to ensure
+** the GNU Free Documentation License version 1.3 requirements
+** will be met: http://www.gnu.org/copyleft/fdl.html.
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+/*!
+    \example svgviewer
+    \title SVG Viewer Example
+
+    The SVG Viewer example shows how to add SVG viewing support to applications.
+
+    \image svgviewer-example.png
+
+    Scalable Vector Graphics (SVG) is an XML-based language for describing two-dimensional
+    vector graphics. Qt provides classes for rendering and displaying SVG drawings in
+    widgets and on other paint devices. This example allows the user to load SVG files
+    and view them in a QGraphicsView using a QGraphicsSvgItem. Based on the selected
+    renderer the QGraphicsView uses either a QWidget or QGLWidget as its viewport. A
+    third render mode is also provided, where the QGraphicsView draws indirectly though
+    a QImage. This allows testing of drawing accuracy and performance for both the 
+    native, raster, and OpenGL paint engines.
+
+    See the QtSvg module documentation for more information about SVG and Qt's SVG classes.
+*/
diff --git a/examples/svg/svgviewer/files/bubbles.svg b/examples/svg/svgviewer/files/bubbles.svg
new file mode 100644
index 0000000..5173012
--- /dev/null
+++ b/examples/svg/svgviewer/files/bubbles.svg
@@ -0,0 +1,215 @@
+<?xml version="1.0" standalone="no"?>
+<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.0//EN" "http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd">
+<svg width="20cm" height="15cm" viewBox="0 0 800 600"
+    xmlns="http://www.w3.org/2000/svg"
+    xmlns:xlink="http://www.w3.org/1999/xlink/"
+    baseProfile="tiny" version="1.2">
+  <title>Spheres</title>
+  <desc>Semi-transparent bubbles on a colored background.</desc>
+    <defs>
+      <!-- Create radial gradients for each bubble. -->
+      <radialGradient id="blueBubble" gradientUnits="userSpaceOnUse"
+                      cx="0" cy="0" r="100" fx="-50" fy="-50">
+        <stop offset="0%" stop-color="white" stop-opacity="1" />
+        <stop offset="25%" stop-color="#cdcdff" stop-opacity=".65" />
+        <stop offset="100%" stop-color="#cdaacd" stop-opacity=".75" />
+      </radialGradient>
+      <radialGradient id="redBubble" gradientUnits="userSpaceOnUse"
+                      cx="0" cy="0" r="100" fx="-50" fy="-50">
+        <stop offset="0%" stop-color="white" stop-opacity="1" />
+        <stop offset="25%" stop-color="#ffcdcd" stop-opacity=".65" />
+        <stop offset="100%" stop-color="#bbbb99" stop-opacity=".75" />
+      </radialGradient>
+      <radialGradient id="greenBubble" gradientUnits="userSpaceOnUse"
+                      cx="0" cy="0" r="100" fx="-50" fy="-50">
+        <stop offset="0%" stop-color="white" stop-opacity="1" />
+        <stop offset="25%" stop-color="#cdffcd" stop-opacity=".65" />
+        <stop offset="100%" stop-color="#99aaaa" stop-opacity=".75" />
+      </radialGradient>
+      <radialGradient id="yellowBubble" gradientUnits="userSpaceOnUse"
+                      cx="0" cy="0" r="100" fx="-50" fy="-50">
+        <stop offset="0%" stop-color="white" stop-opacity="1" />
+        <stop offset="25%" stop-color="#ffffcd" stop-opacity=".65" />
+        <stop offset="100%" stop-color="#bbbbaa" stop-opacity=".75" />
+      </radialGradient>
+      <radialGradient id="background" gradientUnits="userSpaceOnUse"
+                      cx="0" cy="0" r="400" fx="250" fy="250">
+        <stop offset="0%" stop-color="#ffffee" />
+        <stop offset="100%" stop-color="#ccccaa" />
+      </radialGradient>
+      <linearGradient id="surface" gradientUnits="userSpaceOnUse"
+                      x1="-100" y1="200" x2="400" y2="200">
+        <stop offset="0%" stop-color="#ffffcc" />
+        <stop offset="100%" stop-color="#bbbb88" />
+      </linearGradient>
+
+      <!-- Create radial gradients for each circle to make them look like
+           spheres. -->
+      <radialGradient id="blueSphere" gradientUnits="userSpaceOnUse"
+                      cx="0" cy="0" r="100" fx="-50" fy="-50">
+        <stop offset="0%" stop-color="white" />
+        <stop offset="75%" stop-color="blue" />
+        <stop offset="100%" stop-color="#222244" />
+      </radialGradient>
+      <radialGradient id="redSphere" gradientUnits="userSpaceOnUse"
+                      cx="0" cy="0" r="100" fx="-50" fy="-50">
+        <stop offset="0%" stop-color="white" />
+        <stop offset="75%" stop-color="red" />
+        <stop offset="100%" stop-color="#442222" />
+      </radialGradient>
+      <radialGradient id="greenSphere" gradientUnits="userSpaceOnUse"
+                      cx="0" cy="0" r="100" fx="-50" fy="-50">
+        <stop offset="0%" stop-color="white" />
+        <stop offset="75%" stop-color="green" />
+        <stop offset="100%" stop-color="#113311" />
+      </radialGradient>
+      <radialGradient id="yellowSphere" gradientUnits="userSpaceOnUse"
+                      cx="0" cy="0" r="100" fx="-50" fy="-50">
+        <stop offset="0%" stop-color="white" />
+        <stop offset="75%" stop-color="yellow" />
+        <stop offset="100%" stop-color="#444422" />
+      </radialGradient>
+      <radialGradient id="shadowGrad" gradientUnits="userSpaceOnUse"
+                      cx="0" cy="0" r="100" fx="-50" fy="50">
+        <stop offset="0%" stop-color="black" stop-opacity="1.0" />
+        <stop offset="100%" stop-color="black" stop-opacity="0.0" />
+      </radialGradient>
+
+      <!-- Define a shadow for each sphere. -->
+      <circle id="shadow" fill="url(#shadowGrad)" cx="0" cy="0" r="100" />
+      <g id="bubble">
+        <circle fill="black" cx="0" cy="0" r="50" />
+        <circle fill="#a6ce39" cx="0" cy="0" r="33" />
+        <path fill="black" d="M 37,50 L 50,37 L 12,-1 L 22,-11 L 10,-24 L -24,10
+                              L -11,22 L -1,12 Z" />
+        <circle cx="0" cy="0" r="100" />
+      </g>
+    </defs>
+  <g>
+    <rect fill="url(#background)" x="0" y="0" width="800" height="600" />
+  </g>
+
+  <g transform="translate(200,700)">
+    <use xlink:href="#bubble" fill="url(#blueBubble)" />
+    <animateTransform attributeName="transform" type="translate" additive="sum"
+        values="0,0; 0,-800" begin="1s" dur="10s" fill="freeze" repeatCount="indefinite" />
+  </g>
+  <g transform="translate(315,700)">
+    <g transform="scale(0.5,0.5)">
+      <use xlink:href="#bubble" fill="url(#redBubble)" />
+    </g>
+    <animateTransform attributeName="transform" type="translate" additive="sum"
+        values="0,0; 0,-800" begin="3s" dur="7s" fill="freeze" repeatCount="indefinite" />
+  </g>
+  <g transform="translate(80,700)">
+    <g transform="scale(0.65,0.65)">
+      <use xlink:href="#bubble" fill="url(#greenBubble)" />
+    </g>
+    <animateTransform attributeName="transform" type="translate" additive="sum"
+        values="0,0; 0,-800" begin="5s" dur="9s" fill="freeze" repeatCount="indefinite" />
+  </g>
+  <g transform="translate(255,700)">
+    <g transform="scale(0.3,0.3)">
+      <use xlink:href="#bubble" fill="url(#yellowBubble)" />
+    </g>
+    <animateTransform attributeName="transform" type="translate" additive="sum"
+        values="0,0; 0,-800" begin="2s" dur="6s" fill="freeze" repeatCount="indefinite" />
+  </g>
+  <g transform="translate(565,700)">
+    <g transform="scale(0.4,0.4)">
+      <use xlink:href="#bubble" fill="url(#blueBubble)" />
+    </g>
+    <animateTransform attributeName="transform" type="translate" additive="sum"
+        values="0,0; 0,-800" begin="4s" dur="8s" fill="freeze" repeatCount="indefinite" />
+  </g>
+  <g transform="translate(715,700)">
+    <g transform="scale(0.6,0.6)">
+      <use xlink:href="#bubble" fill="url(#redBubble)" />
+    </g>
+    <animateTransform attributeName="transform" type="translate" additive="sum"
+        values="0,0; 0,-800" begin="1s" dur="4s" fill="freeze" repeatCount="indefinite" />
+  </g>
+  <g transform="translate(645,700)">
+    <g transform="scale(0.375,0.375)">
+      <use xlink:href="#bubble" fill="url(#greenBubble)" />
+    </g>
+    <animateTransform attributeName="transform" type="translate" additive="sum"
+        values="0,0; 0,-800" begin="0s" dur="11s" fill="freeze" repeatCount="indefinite" />
+  </g>
+  <g transform="translate(555,700)">
+    <g transform="scale(0.9,0.9)">
+      <use xlink:href="#bubble" fill="url(#yellowBubble)" />
+    </g>
+    <animateTransform attributeName="transform" type="translate" additive="sum"
+        values="0,0; 0,-800" begin="3s" dur="7.5s" fill="freeze" repeatCount="indefinite" />
+  </g>
+
+  <g transform="translate(360,700)">
+    <g transform="scale(0.5,0.5)">
+      <use xlink:href="#bubble" fill="url(#blueBubble)" />
+    </g>
+    <animateTransform attributeName="transform" type="translate" additive="sum"
+        values="0,0; 0,-800" begin="3s" dur="6s" fill="freeze" repeatCount="indefinite" />
+  </g>
+  <g transform="translate(215,700)">
+    <g transform="scale(0.45,0.45)">
+      <use xlink:href="#bubble" fill="url(#redBubble)" />
+    </g>
+    <animateTransform attributeName="transform" type="translate" additive="sum"
+        values="0,0; 0,-800" begin="5.5s" dur="7s" fill="freeze" repeatCount="indefinite" />
+  </g>
+  <g transform="translate(420,700)">
+    <g transform="scale(0.75,0.75)">
+      <use xlink:href="#bubble" fill="url(#greenBubble)" />
+    </g>
+    <animateTransform attributeName="transform" type="translate" additive="sum"
+        values="0,0; 0,-800" begin="1s" dur="9s" fill="freeze" repeatCount="indefinite" />
+  </g>
+  <g transform="translate(815,700)">
+    <g transform="scale(0.6,0.6)">
+      <use xlink:href="#bubble" fill="url(#yellowBubble)" />
+    </g>
+    <animateTransform attributeName="transform" type="translate" additive="sum"
+        values="0,0; 0,-800" begin="2s" dur="9.5s" fill="freeze" repeatCount="indefinite" />
+  </g>
+
+  <g transform="translate(225,375)" >
+    <g transform="scale(1.0,0.5)" >
+      <path d="M 0 0 L 350 0 L 450 450 L -100 450 z"
+            fill="url(#surface)" stroke="none" />
+    </g>
+  </g>
+    <g transform="translate(200,0)" >
+    <g transform="translate(200,490) scale(2.0,1.0) rotate(45)" >
+      <rect fill="#a6ce39" x="-69" y="-69" width="138" height="138" />
+      <circle fill="black" cx="0" cy="0" r="50" />
+      <circle fill="#a6ce39" cx="0" cy="0" r="33" />
+      <path fill="black" d="M 37,50 L 50,37 L 12,-1 L 22,-11 L 10,-24 L -24,10
+                            L -11,22 L -1,12 Z" />
+      <animateTransform attributeName="transform"  type="rotate" additive="sum" values="0; 360"
+	         begin="0s" dur="10s" fill="freeze" repeatCount="indefinite" />
+    </g>
+    <g transform="translate(200,375)">
+      <use xlink:href="#shadow" transform="translate(25,55) scale(1.0,0.5)" />
+      <circle fill="url(#blueSphere)" cx="0" cy="0" r="100" />
+    </g>
+    <g transform="translate(315,440)">
+      <g transform="scale(0.5,0.5)">
+        <use xlink:href="#shadow" transform="translate(25,55) scale(1.0,0.5)" />
+        <circle fill="url(#redSphere)" cx="0" cy="0" r="100" />
+      </g>
+    </g>
+    <g transform="translate(80,475)">
+      <g transform="scale(0.65,0.65)">
+        <use xlink:href="#shadow" transform="translate(25,55) scale(1.0,0.5)" />
+        <circle fill="url(#greenSphere)" cx="0" cy="0" r="100" />
+      </g>
+    </g>
+    <g transform="translate(255,525)">
+      <g transform="scale(0.3,0.3)">
+        <use xlink:href="#shadow" transform="translate(25,55) scale(1.0,0.5)" />
+        <circle fill="url(#yellowSphere)" cx="0" cy="0" r="100" />
+      </g>
+    </g>
+  </g>
+</svg>
diff --git a/examples/svg/svgviewer/files/cubic.svg b/examples/svg/svgviewer/files/cubic.svg
new file mode 100644
index 0000000..492bb72
--- /dev/null
+++ b/examples/svg/svgviewer/files/cubic.svg
@@ -0,0 +1,77 @@
+<?xml version="1.0" standalone="no"?>
+<svg width="10cm" height="10cm" viewBox="0 0 1000 1000"
+     xmlns="http://www.w3.org/2000/svg" version="1.2" baseProfile="tiny">
+  <title>Example cubic02 - cubic Bezier commands in path data</title>
+  <desc>Picture showing examples of "C" and "S" commands,
+        along with annotations showing the control points
+        and end points</desc>
+
+  <rect fill="none" stroke="blue" stroke-width="1" x="1" y="1" width="998" height="998" />
+
+  <!-- Path 1 -->
+  <polyline fill="none" stroke="#888888" stroke-width="2" points="100,200 100,100" />
+  <polyline fill="none" stroke="#888888" stroke-width="2" points="400,100 400,200" />
+  <path fill="none" stroke="red" stroke-width="5" d="M100,200 C100,100 400,100 400,200" />
+  <circle fill="none" stroke="#888888" stroke-width="2" cx="100" cy="200" r="10" />
+  <circle fill="none" stroke="#888888" stroke-width="2" cx="400" cy="200" r="10" />
+  <circle class="CtlPoint" cx="100" cy="100" r="10" />
+  <circle class="CtlPoint" cx="400" cy="100" r="10" />
+  <text text-anchor="middle" font-size="22" font-family="Verdana" x="250" y="275">M100,200 C100,100 400,100 400,200</text>
+
+  <!-- Path 2 -->
+  <polyline fill="none" stroke="#888888" stroke-width="2" points="100,500 25,400" />
+  <polyline fill="none" stroke="#888888" stroke-width="2" points="475,400 400,500" />
+  <path fill="none" stroke="red" stroke-width="5" d="M100,500 C25,400 475,400 400,500" />
+  <circle fill="none" stroke="#888888" stroke-width="2" cx="100" cy="500" r="10" />
+  <circle fill="none" stroke="#888888" stroke-width="2" cx="400" cy="500" r="10" />
+  <circle fill="#888888" stroke="none" cx="25" cy="400" r="10" />
+  <circle fill="#888888" stroke="none" cx="475" cy="400" r="10" />
+  <text text-anchor="middle" font-size="22" font-family="Verdana" x="250" y="575">M100,500 C25,400 475,400 400,500</text>
+
+  <!-- Path 3 -->
+  <polyline fill="none" stroke="#888888" stroke-width="2" points="100,800 175,700" />
+  <polyline fill="none" stroke="#888888" stroke-width="2" points="325,700 400,800" />
+  <path fill="none" stroke="red" stroke-width="5" d="M100,800 C175,700 325,700 400,800" />
+  <circle fill="none" stroke="#888888" stroke-width="2" cx="100" cy="800" r="10" />
+  <circle fill="none" stroke="#888888" stroke-width="2" cx="400" cy="800" r="10" />
+  <circle fill="#888888" stroke="none" cx="175" cy="700" r="10" />
+  <circle fill="#888888" stroke="none" cx="325" cy="700" r="10" />
+  <text text-anchor="middle" font-size="22" font-family="Verdana" x="250" y="875">M100,800 C175,700 325,700 400,800</text>
+
+  <!-- Path 4 -->
+  <polyline fill="none" stroke="#888888" stroke-width="2" points="600,200 675,100" />
+  <polyline fill="none" stroke="#888888" stroke-width="2" points="975,100 900,200" />
+  <path fill="none" stroke="red" stroke-width="5" d="M600,200 C675,100 975,100 900,200" />
+  <circle fill="none" stroke="#888888" stroke-width="2" cx="600" cy="200" r="10" />
+  <circle fill="none" stroke="#888888" stroke-width="2" cx="900" cy="200" r="10" />
+  <circle fill="#888888" stroke="none" cx="675" cy="100" r="10" />
+  <circle fill="#888888" stroke="none" cx="975" cy="100" r="10" />
+  <text text-anchor="middle" font-size="22" font-family="Verdana" x="750" y="275">M600,200 C675,100 975,100 900,200</text>
+
+  <!-- Path 5 -->
+  <polyline fill="none" stroke="#888888" stroke-width="2" points="600,500 600,350" />
+  <polyline fill="none" stroke="#888888" stroke-width="2" points="900,650 900,500" />
+  <path fill="none" stroke="red" stroke-width="5" d="M600,500 C600,350 900,650 900,500" />
+  <circle fill="none" stroke="#888888" stroke-width="2" cx="600" cy="500" r="10" />
+  <circle fill="none" stroke="#888888" stroke-width="2" cx="900" cy="500" r="10" />
+  <circle fill="#888888" stroke="none" cx="600" cy="350" r="10" />
+  <circle fill="#888888" stroke="none" cx="900" cy="650" r="10" />
+  <text text-anchor="middle" font-size="22" font-family="Verdana" x="750" y="575">M600,500 C600,350 900,650 900,500</text>
+
+  <!-- Path 6 (C and S command) -->
+  <polyline fill="none" stroke="#888888" stroke-width="2" points="600,800 625,700" />
+  <polyline fill="none" stroke="#888888" stroke-width="2" points="725,700 750,800" />
+  <polyline fill="none" stroke="#888888" stroke-width="2" points="750,800 775,900" />
+  <polyline fill="none" stroke="#888888" stroke-width="2" points="875,900 900,800" />
+  <path fill="none" stroke="red" stroke-width="5" d="M600,800 C625,700 725,700 750,800
+                                       S875,900 900,800" />
+  <circle fill="none" stroke="#888888" stroke-width="2" cx="600" cy="800" r="10" />
+  <circle fill="none" stroke="#888888" stroke-width="2" cx="750" cy="800" r="10" />
+  <circle fill="none" stroke="#888888" stroke-width="2" cx="900" cy="800" r="10" />
+  <circle fill="#888888" stroke="none" cx="625" cy="700" r="10" />
+  <circle fill="#888888" stroke="none" cx="725" cy="700" r="10" />
+  <circle fill="#888888" stroke="none" cx="875" cy="900" r="10" />
+  <circle fill="none" stroke="blue" stroke-width="4" cx="775" cy="900" r="9" />
+  <text text-anchor="middle" font-size="22" font-family="Verdana" x="750" y="945">M600,800 C625,700 725,700 750,800</text>
+  <text text-anchor="middle" font-size="22" font-family="Verdana" x="750" y="975">S875,900 900,800</text>
+</svg>
diff --git a/examples/svg/svgviewer/files/spheres.svg b/examples/svg/svgviewer/files/spheres.svg
new file mode 100644
index 0000000..b23164b
--- /dev/null
+++ b/examples/svg/svgviewer/files/spheres.svg
@@ -0,0 +1,72 @@
+<?xml version="1.0" standalone="no"?>
+<svg width="8cm" height="8cm" viewBox="0 0 400 400"
+    xmlns="http://www.w3.org/2000/svg"
+    xmlns:xlink="http://www.w3.org/1999/xlink/"
+    baseProfile="tiny" version="1.2">
+  <title>Spheres</title>
+  <desc>Gradient filled spheres with different colors.</desc>
+    <defs>
+      <!-- Create radial gradients for each circle to make them look like
+           spheres. -->
+      <radialGradient id="blueSphere" gradientUnits="userSpaceOnUse"
+                      cx="0" cy="0" r="100" fx="-50" fy="-50">
+        <stop offset="0%" stop-color="white" />
+        <stop offset="75%" stop-color="blue" />
+        <stop offset="100%" stop-color="#222244" />
+      </radialGradient>
+      <radialGradient id="redSphere" gradientUnits="userSpaceOnUse"
+                      cx="0" cy="0" r="100" fx="-50" fy="-50">
+        <stop offset="0%" stop-color="white" />
+        <stop offset="75%" stop-color="red" />
+        <stop offset="100%" stop-color="#442222" />
+      </radialGradient>
+      <radialGradient id="greenSphere" gradientUnits="userSpaceOnUse"
+                      cx="0" cy="0" r="100" fx="-50" fy="-50">
+        <stop offset="0%" stop-color="white" />
+        <stop offset="75%" stop-color="green" />
+        <stop offset="100%" stop-color="#113311" />
+      </radialGradient>
+      <radialGradient id="yellowSphere" gradientUnits="userSpaceOnUse"
+                      cx="0" cy="0" r="100" fx="-50" fy="-50">
+        <stop offset="0%" stop-color="white" />
+        <stop offset="75%" stop-color="yellow" />
+        <stop offset="100%" stop-color="#444422" />
+      </radialGradient>
+      <radialGradient id="shadowGrad" gradientUnits="userSpaceOnUse"
+                      cx="0" cy="0" r="100" fx="-50" fy="50">
+        <stop offset="0%" stop-color="black" stop-opacity="1.0" />
+        <stop offset="100%" stop-color="white" stop-opacity="0.0" />
+      </radialGradient>
+
+      <!-- Define a shadow for each sphere. -->
+      <circle id="shadow" fill="url(#shadowGrad)" cx="0" cy="0" r="100" />
+    </defs>
+  <g fill="#ffee99" stroke="none" >
+    <rect x="0" y="0" width="400" height="400" />
+  </g>
+  <g fill="white" stroke="none" >
+    <rect x="0" y="175" width="400" height="225" />
+  </g>
+  <g transform="translate(200,175)">
+    <use xlink:href="#shadow" transform="translate(25,55) scale(1.0,0.5)" />
+    <circle fill="url(#blueSphere)" cx="0" cy="0" r="100" />
+  </g>
+  <g transform="translate(315,240)">
+    <g transform="scale(0.5,0.5)">
+      <use xlink:href="#shadow" transform="translate(25,55) scale(1.0,0.5)" />
+      <circle fill="url(#redSphere)" cx="0" cy="0" r="100" />
+    </g>
+  </g>
+  <g transform="translate(80,275)">
+    <g transform="scale(0.65,0.65)">
+      <use xlink:href="#shadow" transform="translate(25,55) scale(1.0,0.5)" />
+      <circle fill="url(#greenSphere)" cx="0" cy="0" r="100" />
+    </g>
+  </g>
+  <g transform="translate(255,325)">
+    <g transform="scale(0.3,0.3)">
+      <use xlink:href="#shadow" transform="translate(25,55) scale(1.0,0.5)" />
+      <circle fill="url(#yellowSphere)" cx="0" cy="0" r="100" />
+    </g>
+  </g>
+</svg>
diff --git a/examples/svg/svgviewer/main.cpp b/examples/svg/svgviewer/main.cpp
new file mode 100644
index 0000000..c8376c5
--- /dev/null
+++ b/examples/svg/svgviewer/main.cpp
@@ -0,0 +1,62 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/legal
+**
+** This file is part of the examples of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:BSD$
+** You may use this file under the terms of the BSD license as follows:
+**
+** "Redistribution and use in source and binary forms, with or without
+** modification, are permitted provided that the following conditions are
+** met:
+**   * Redistributions of source code must retain the above copyright
+**     notice, this list of conditions and the following disclaimer.
+**   * Redistributions in binary form must reproduce the above copyright
+**     notice, this list of conditions and the following disclaimer in
+**     the documentation and/or other materials provided with the
+**     distribution.
+**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
+**     of its contributors may be used to endorse or promote products derived
+**     from this software without specific prior written permission.
+**
+**
+** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#include <QApplication>
+#include <QString>
+#ifndef QT_NO_OPENGL
+#include <QGLFormat>
+#endif
+
+#include "mainwindow.h"
+
+int main(int argc, char **argv)
+{
+    Q_INIT_RESOURCE(svgviewer);
+
+    QApplication app(argc, argv);
+
+    MainWindow window;
+    if (argc == 2)
+        window.openFile(argv[1]);
+    else
+        window.openFile(":/files/bubbles.svg");
+    window.show();
+    return app.exec();
+}
diff --git a/examples/svg/svgviewer/mainwindow.cpp b/examples/svg/svgviewer/mainwindow.cpp
new file mode 100644
index 0000000..71723ee
--- /dev/null
+++ b/examples/svg/svgviewer/mainwindow.cpp
@@ -0,0 +1,163 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/legal
+**
+** This file is part of the examples of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:BSD$
+** You may use this file under the terms of the BSD license as follows:
+**
+** "Redistribution and use in source and binary forms, with or without
+** modification, are permitted provided that the following conditions are
+** met:
+**   * Redistributions of source code must retain the above copyright
+**     notice, this list of conditions and the following disclaimer.
+**   * Redistributions in binary form must reproduce the above copyright
+**     notice, this list of conditions and the following disclaimer in
+**     the documentation and/or other materials provided with the
+**     distribution.
+**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
+**     of its contributors may be used to endorse or promote products derived
+**     from this software without specific prior written permission.
+**
+**
+** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#include "mainwindow.h"
+
+#include <QtWidgets>
+
+#include "svgview.h"
+
+MainWindow::MainWindow()
+    : QMainWindow()
+    , m_view(new SvgView)
+{
+    QMenu *fileMenu = new QMenu(tr("&File"), this);
+    QAction *openAction = fileMenu->addAction(tr("&Open..."));
+    openAction->setShortcut(QKeySequence(tr("Ctrl+O")));
+    QAction *quitAction = fileMenu->addAction(tr("E&xit"));
+    quitAction->setShortcuts(QKeySequence::Quit);
+
+    menuBar()->addMenu(fileMenu);
+
+    QMenu *viewMenu = new QMenu(tr("&View"), this);
+    m_backgroundAction = viewMenu->addAction(tr("&Background"));
+    m_backgroundAction->setEnabled(false);
+    m_backgroundAction->setCheckable(true);
+    m_backgroundAction->setChecked(false);
+    connect(m_backgroundAction, SIGNAL(toggled(bool)), m_view, SLOT(setViewBackground(bool)));
+
+    m_outlineAction = viewMenu->addAction(tr("&Outline"));
+    m_outlineAction->setEnabled(false);
+    m_outlineAction->setCheckable(true);
+    m_outlineAction->setChecked(true);
+    connect(m_outlineAction, SIGNAL(toggled(bool)), m_view, SLOT(setViewOutline(bool)));
+
+    menuBar()->addMenu(viewMenu);
+
+    QMenu *rendererMenu = new QMenu(tr("&Renderer"), this);
+    m_nativeAction = rendererMenu->addAction(tr("&Native"));
+    m_nativeAction->setCheckable(true);
+    m_nativeAction->setChecked(true);
+#ifndef QT_NO_OPENGL
+    m_glAction = rendererMenu->addAction(tr("&OpenGL"));
+    m_glAction->setCheckable(true);
+#endif
+    m_imageAction = rendererMenu->addAction(tr("&Image"));
+    m_imageAction->setCheckable(true);
+
+#ifndef QT_NO_OPENGL
+    rendererMenu->addSeparator();
+    m_highQualityAntialiasingAction = rendererMenu->addAction(tr("&High Quality Antialiasing"));
+    m_highQualityAntialiasingAction->setEnabled(false);
+    m_highQualityAntialiasingAction->setCheckable(true);
+    m_highQualityAntialiasingAction->setChecked(false);
+    connect(m_highQualityAntialiasingAction, SIGNAL(toggled(bool)), m_view, SLOT(setHighQualityAntialiasing(bool)));
+#endif
+
+    QActionGroup *rendererGroup = new QActionGroup(this);
+    rendererGroup->addAction(m_nativeAction);
+#ifndef QT_NO_OPENGL
+    rendererGroup->addAction(m_glAction);
+#endif
+    rendererGroup->addAction(m_imageAction);
+
+    menuBar()->addMenu(rendererMenu);
+
+    connect(openAction, SIGNAL(triggered()), this, SLOT(openFile()));
+    connect(quitAction, SIGNAL(triggered()), qApp, SLOT(quit()));
+    connect(rendererGroup, SIGNAL(triggered(QAction*)),
+            this, SLOT(setRenderer(QAction*)));
+
+    setCentralWidget(m_view);
+    setWindowTitle(tr("SVG Viewer"));
+}
+
+void MainWindow::openFile(const QString &path)
+{
+    QString fileName;
+    if (path.isNull())
+        fileName = QFileDialog::getOpenFileName(this, tr("Open SVG File"),
+                m_currentPath, "SVG files (*.svg *.svgz *.svg.gz)");
+    else
+        fileName = path;
+
+    if (!fileName.isEmpty()) {
+        QFile file(fileName);
+        if (!file.exists()) {
+            QMessageBox::critical(this, tr("Open SVG File"),
+                           QString("Could not open file '%1'.").arg(fileName));
+
+            m_outlineAction->setEnabled(false);
+            m_backgroundAction->setEnabled(false);
+            return;
+        }
+
+        m_view->openFile(file);
+
+        if (!fileName.startsWith(":/")) {
+            m_currentPath = fileName;
+            setWindowTitle(tr("%1 - SVGViewer").arg(m_currentPath));
+        }
+
+        m_outlineAction->setEnabled(true);
+        m_backgroundAction->setEnabled(true);
+
+        resize(m_view->sizeHint() + QSize(80, 80 + menuBar()->height()));
+    }
+}
+
+void MainWindow::setRenderer(QAction *action)
+{
+#ifndef QT_NO_OPENGL
+    m_highQualityAntialiasingAction->setEnabled(false);
+#endif
+
+    if (action == m_nativeAction)
+        m_view->setRenderer(SvgView::Native);
+#ifndef QT_NO_OPENGL
+    else if (action == m_glAction) {
+        m_highQualityAntialiasingAction->setEnabled(true);
+        m_view->setRenderer(SvgView::OpenGL);
+    }
+#endif
+    else if (action == m_imageAction) {
+        m_view->setRenderer(SvgView::Image);
+    }
+}
diff --git a/examples/svg/svgviewer/mainwindow.h b/examples/svg/svgviewer/mainwindow.h
new file mode 100644
index 0000000..09c4cea
--- /dev/null
+++ b/examples/svg/svgviewer/mainwindow.h
@@ -0,0 +1,80 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/legal
+**
+** This file is part of the examples of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:BSD$
+** You may use this file under the terms of the BSD license as follows:
+**
+** "Redistribution and use in source and binary forms, with or without
+** modification, are permitted provided that the following conditions are
+** met:
+**   * Redistributions of source code must retain the above copyright
+**     notice, this list of conditions and the following disclaimer.
+**   * Redistributions in binary form must reproduce the above copyright
+**     notice, this list of conditions and the following disclaimer in
+**     the documentation and/or other materials provided with the
+**     distribution.
+**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
+**     of its contributors may be used to endorse or promote products derived
+**     from this software without specific prior written permission.
+**
+**
+** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#ifndef MAINWINDOW_H
+#define MAINWINDOW_H
+
+#include <QMainWindow>
+#include <QString>
+
+class SvgView;
+
+QT_BEGIN_NAMESPACE
+class QAction;
+class QGraphicsView;
+class QGraphicsScene;
+class QGraphicsRectItem;
+QT_END_NAMESPACE
+
+class MainWindow : public QMainWindow
+{
+    Q_OBJECT
+
+public:
+    MainWindow();
+
+public slots:
+    void openFile(const QString &path = QString());
+    void setRenderer(QAction *action);
+
+private:
+    QAction *m_nativeAction;
+    QAction *m_glAction;
+    QAction *m_imageAction;
+    QAction *m_highQualityAntialiasingAction;
+    QAction *m_backgroundAction;
+    QAction *m_outlineAction;
+
+    SvgView *m_view;
+
+    QString m_currentPath;
+};
+
+#endif
diff --git a/examples/svg/svgviewer/svgview.cpp b/examples/svg/svgviewer/svgview.cpp
new file mode 100644
index 0000000..4c6f852
--- /dev/null
+++ b/examples/svg/svgviewer/svgview.cpp
@@ -0,0 +1,188 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/legal
+**
+** This file is part of the examples of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:BSD$
+** You may use this file under the terms of the BSD license as follows:
+**
+** "Redistribution and use in source and binary forms, with or without
+** modification, are permitted provided that the following conditions are
+** met:
+**   * Redistributions of source code must retain the above copyright
+**     notice, this list of conditions and the following disclaimer.
+**   * Redistributions in binary form must reproduce the above copyright
+**     notice, this list of conditions and the following disclaimer in
+**     the documentation and/or other materials provided with the
+**     distribution.
+**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
+**     of its contributors may be used to endorse or promote products derived
+**     from this software without specific prior written permission.
+**
+**
+** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+#include "svgview.h"
+
+#include <QFile>
+#include <QWheelEvent>
+#include <QMouseEvent>
+#include <QGraphicsRectItem>
+#include <QGraphicsSvgItem>
+#include <QPaintEvent>
+#include <qmath.h>
+
+#ifndef QT_NO_OPENGL
+#include <QGLWidget>
+#endif
+
+SvgView::SvgView(QWidget *parent)
+    : QGraphicsView(parent)
+    , m_renderer(Native)
+    , m_svgItem(0)
+    , m_backgroundItem(0)
+    , m_outlineItem(0)
+{
+    setScene(new QGraphicsScene(this));
+    setTransformationAnchor(AnchorUnderMouse);
+    setDragMode(ScrollHandDrag);
+    setViewportUpdateMode(FullViewportUpdate);
+
+    // Prepare background check-board pattern
+    QPixmap tilePixmap(64, 64);
+    tilePixmap.fill(Qt::white);
+    QPainter tilePainter(&tilePixmap);
+    QColor color(220, 220, 220);
+    tilePainter.fillRect(0, 0, 32, 32, color);
+    tilePainter.fillRect(32, 32, 32, 32, color);
+    tilePainter.end();
+
+    setBackgroundBrush(tilePixmap);
+}
+
+void SvgView::drawBackground(QPainter *p, const QRectF &)
+{
+    p->save();
+    p->resetTransform();
+    p->drawTiledPixmap(viewport()->rect(), backgroundBrush().texture());
+    p->restore();
+}
+
+void SvgView::openFile(const QFile &file)
+{
+    if (!file.exists())
+        return;
+
+    QGraphicsScene *s = scene();
+
+    bool drawBackground = (m_backgroundItem ? m_backgroundItem->isVisible() : false);
+    bool drawOutline = (m_outlineItem ? m_outlineItem->isVisible() : true);
+
+    s->clear();
+    resetTransform();
+
+    m_svgItem = new QGraphicsSvgItem(file.fileName());
+    m_svgItem->setFlags(QGraphicsItem::ItemClipsToShape);
+    m_svgItem->setCacheMode(QGraphicsItem::NoCache);
+    m_svgItem->setZValue(0);
+
+    m_backgroundItem = new QGraphicsRectItem(m_svgItem->boundingRect());
+    m_backgroundItem->setBrush(Qt::white);
+    m_backgroundItem->setPen(Qt::NoPen);
+    m_backgroundItem->setVisible(drawBackground);
+    m_backgroundItem->setZValue(-1);
+
+    m_outlineItem = new QGraphicsRectItem(m_svgItem->boundingRect());
+    QPen outline(Qt::black, 2, Qt::DashLine);
+    outline.setCosmetic(true);
+    m_outlineItem->setPen(outline);
+    m_outlineItem->setBrush(Qt::NoBrush);
+    m_outlineItem->setVisible(drawOutline);
+    m_outlineItem->setZValue(1);
+
+    s->addItem(m_backgroundItem);
+    s->addItem(m_svgItem);
+    s->addItem(m_outlineItem);
+
+    s->setSceneRect(m_outlineItem->boundingRect().adjusted(-10, -10, 10, 10));
+}
+
+void SvgView::setRenderer(RendererType type)
+{
+    m_renderer = type;
+
+    if (m_renderer == OpenGL) {
+#ifndef QT_NO_OPENGL
+        setViewport(new QGLWidget(QGLFormat(QGL::SampleBuffers)));
+#endif
+    } else {
+        setViewport(new QWidget);
+    }
+}
+
+void SvgView::setHighQualityAntialiasing(bool highQualityAntialiasing)
+{
+#ifndef QT_NO_OPENGL
+    setRenderHint(QPainter::HighQualityAntialiasing, highQualityAntialiasing);
+#else
+    Q_UNUSED(highQualityAntialiasing);
+#endif
+}
+
+void SvgView::setViewBackground(bool enable)
+{
+    if (!m_backgroundItem)
+          return;
+
+    m_backgroundItem->setVisible(enable);
+}
+
+void SvgView::setViewOutline(bool enable)
+{
+    if (!m_outlineItem)
+        return;
+
+    m_outlineItem->setVisible(enable);
+}
+
+void SvgView::paintEvent(QPaintEvent *event)
+{
+    if (m_renderer == Image) {
+        if (m_image.size() != viewport()->size()) {
+            m_image = QImage(viewport()->size(), QImage::Format_ARGB32_Premultiplied);
+        }
+
+        QPainter imagePainter(&m_image);
+        QGraphicsView::render(&imagePainter);
+        imagePainter.end();
+
+        QPainter p(viewport());
+        p.drawImage(0, 0, m_image);
+
+    } else {
+        QGraphicsView::paintEvent(event);
+    }
+}
+
+void SvgView::wheelEvent(QWheelEvent *event)
+{
+    qreal factor = qPow(1.2, event->delta() / 240.0);
+    scale(factor, factor);
+    event->accept();
+}
+
diff --git a/examples/svg/svgviewer/svgview.h b/examples/svg/svgviewer/svgview.h
new file mode 100644
index 0000000..e2635a0
--- /dev/null
+++ b/examples/svg/svgviewer/svgview.h
@@ -0,0 +1,83 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/legal
+**
+** This file is part of the examples of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:BSD$
+** You may use this file under the terms of the BSD license as follows:
+**
+** "Redistribution and use in source and binary forms, with or without
+** modification, are permitted provided that the following conditions are
+** met:
+**   * Redistributions of source code must retain the above copyright
+**     notice, this list of conditions and the following disclaimer.
+**   * Redistributions in binary form must reproduce the above copyright
+**     notice, this list of conditions and the following disclaimer in
+**     the documentation and/or other materials provided with the
+**     distribution.
+**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
+**     of its contributors may be used to endorse or promote products derived
+**     from this software without specific prior written permission.
+**
+**
+** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#ifndef SVGVIEW_H
+#define SVGVIEW_H
+
+#include <QGraphicsView>
+
+QT_BEGIN_NAMESPACE
+class QWheelEvent;
+class QPaintEvent;
+class QFile;
+QT_END_NAMESPACE
+
+class SvgView : public QGraphicsView
+{
+    Q_OBJECT
+
+public:
+    enum RendererType { Native, OpenGL, Image };
+
+    SvgView(QWidget *parent = 0);
+
+    void openFile(const QFile &file);
+    void setRenderer(RendererType type = Native);
+    void drawBackground(QPainter *p, const QRectF &rect);
+
+public slots:
+    void setHighQualityAntialiasing(bool highQualityAntialiasing);
+    void setViewBackground(bool enable);
+    void setViewOutline(bool enable);
+
+protected:
+    void wheelEvent(QWheelEvent *event);
+    void paintEvent(QPaintEvent *event);
+
+private:
+    RendererType m_renderer;
+
+    QGraphicsItem *m_svgItem;
+    QGraphicsRectItem *m_backgroundItem;
+    QGraphicsRectItem *m_outlineItem;
+
+    QImage m_image;
+};
+#endif // SVGVIEW_H
diff --git a/examples/svg/svgviewer/svgviewer.desktop b/examples/svg/svgviewer/svgviewer.desktop
new file mode 100644
index 0000000..477ef78
--- /dev/null
+++ b/examples/svg/svgviewer/svgviewer.desktop
@@ -0,0 +1,11 @@
+[Desktop Entry]
+Encoding=UTF-8
+Version=1.0
+Type=Application
+Terminal=false
+Name=SVG Viewer
+Exec=/opt/usr/bin/svgviewer
+Icon=svgviewer
+X-Window-Icon=
+X-HildonDesk-ShowInToolbar=true
+X-Osso-Type=application/x-executable
diff --git a/examples/svg/svgviewer/svgviewer.pro b/examples/svg/svgviewer/svgviewer.pro
new file mode 100644
index 0000000..94daed9
--- /dev/null
+++ b/examples/svg/svgviewer/svgviewer.pro
@@ -0,0 +1,25 @@
+HEADERS       = mainwindow.h \
+                svgview.h
+RESOURCES     = svgviewer.qrc
+SOURCES       = main.cpp \
+                mainwindow.cpp \
+                svgview.cpp
+QT           += svg xml
+
+contains(QT_CONFIG, opengl): QT += opengl
+
+CONFIG += console
+
+# install
+target.path = $$[QT_INSTALL_EXAMPLES]/qtsvg/painting/svgviewer
+sources.files = $$SOURCES $$HEADERS $$RESOURCES svgviewer.pro files
+sources.path = $$[QT_INSTALL_EXAMPLES]/qtsvg/painting/svgviewer
+INSTALLS += target sources
+
+wince*: {
+     addFiles.files = files\\*.svg
+     addFiles.path = "\\My Documents"
+     DEPLOYMENT += addFiles
+}
+
+QT+=widgets
diff --git a/examples/svg/svgviewer/svgviewer.qrc b/examples/svg/svgviewer/svgviewer.qrc
new file mode 100644
index 0000000..db611f5
--- /dev/null
+++ b/examples/svg/svgviewer/svgviewer.qrc
@@ -0,0 +1,6 @@
+<!DOCTYPE RCC><RCC version="1.0">
+<qresource prefix="/">
+  <file>files/bubbles.svg</file>
+</qresource>
+</RCC>
+
diff --git a/src/svg/doc/qtsvg.qdocconf b/src/svg/doc/qtsvg.qdocconf
new file mode 100644
index 0000000..99903a2
--- /dev/null
+++ b/src/svg/doc/qtsvg.qdocconf
@@ -0,0 +1,50 @@
+include(../../../doc/global/qt-html-templates-offline.qdocconf)
+include(../../../doc/global/qt-module-defaults.qdocconf)
+
+project                 = QtSvg
+description             = Qt Svg Reference Documentation
+url                     = http://qt-project.org/doc/qt-5.0/qtsvg-index.html
+version                 = 5.0.0
+
+qhp.projects            = QtSvg
+
+qhp.QtSvg.file                = qtsvg.qhp
+qhp.QtSvg.namespace           = org.qt-project.qtsvg.500
+qhp.QtSvg.virtualFolder       = qdoc
+qhp.QtSvg.indexTitle          = Qt Svg Reference Documentation
+qhp.QtSvg.indexRoot           =
+
+qhp.QtSvg.filterAttributes    = qtsvg 5.0.0 qtrefdoc
+qhp.QtSvg.customFilters.Qt.name = QtSvg 5.0.0
+qhp.QtSvg.customFilters.Qt.filterAttributes = qtsvg 5.0.0
+qhp.QtSvg.subprojects         = classes overviews examples
+qhp.QtSvg.subprojects.classes.title = Classes
+qhp.QtSvg.subprojects.classes.indexTitle = Qt Svg's Classes
+qhp.QtSvg.subprojects.classes.selectors = class fake:headerfile
+qhp.QtSvg.subprojects.classes.sortPages = true
+qhp.QtSvg.subprojects.overviews.title = Overviews
+qhp.QtSvg.subprojects.overviews.indexTitle = All Overviews and HOWTOs
+qhp.QtSvg.subprojects.overviews.selectors = fake:page,group,module
+qhp.QtSvg.subprojects.examples.title = Qt Svg Examples
+qhp.QtSvg.subprojects.examples.indexTitle = Qt Svg Examples
+qhp.QtSvg.subprojects.examples.selectors = fake:example
+
+depends += qtcore \
+           qtwidgets \
+           qtgui
+
+outputdir               = ../../../doc/qtsvg
+tagfile                 = ../../../doc/qtsvg/qtsvg.tags
+
+headerdirs  += .. \
+                ../../plugins/svg
+
+sourcedirs  += .. \
+                ../../plugins/svg
+
+exampledirs += ../../../examples/svg \
+               snippets/
+
+
+imagedirs   += images
+
diff --git a/src/svg/doc/snippets/src_svg_qgraphicssvgitem.cpp b/src/svg/doc/snippets/src_svg_qgraphicssvgitem.cpp
new file mode 100644
index 0000000..af175cb
--- /dev/null
+++ b/src/svg/doc/snippets/src_svg_qgraphicssvgitem.cpp
@@ -0,0 +1,51 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/legal
+**
+** This file is part of the documentation of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:BSD$
+** You may use this file under the terms of the BSD license as follows:
+**
+** "Redistribution and use in source and binary forms, with or without
+** modification, are permitted provided that the following conditions are
+** met:
+**   * Redistributions of source code must retain the above copyright
+**     notice, this list of conditions and the following disclaimer.
+**   * Redistributions in binary form must reproduce the above copyright
+**     notice, this list of conditions and the following disclaimer in
+**     the documentation and/or other materials provided with the
+**     distribution.
+**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
+**     of its contributors may be used to endorse or promote products derived
+**     from this software without specific prior written permission.
+**
+**
+** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+//! [0]
+QSvgRenderer *renderer = new QSvgRenderer(QLatin1String("SvgCardDeck.svg"));
+QGraphicsSvgItem *black = new QGraphicsSvgItem();
+QGraphicsSvgItem *red   = new QGraphicsSvgItem();
+
+black->setSharedRenderer(renderer);
+black->setElementId(QLatin1String("black_joker"));
+
+red->setSharedRenderer(renderer);
+red->setElementId(QLatin1String("red_joker"));
+//! [0]
diff --git a/src/svg/doc/src/qtsvg-index.qdoc b/src/svg/doc/src/qtsvg-index.qdoc
new file mode 100644
index 0000000..10b39be
--- /dev/null
+++ b/src/svg/doc/src/qtsvg-index.qdoc
@@ -0,0 +1,49 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/legal
+**
+** This file is part of the documentation of the Qt Svg Module.
+**
+** $QT_BEGIN_LICENSE:FDL$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and Digia.  For licensing terms and
+** conditions see http://qt.digia.com/licensing.  For further information
+** use the contact form at http://qt.digia.com/contact-us.
+**
+** GNU Free Documentation License Usage
+** Alternatively, this file may be used under the terms of the GNU Free
+** Documentation License version 1.3 as published by the Free Software
+** Foundation and appearing in the file included in the packaging of
+** this file.  Please review the following information to ensure
+** the GNU Free Documentation License version 1.3 requirements
+** will be met: http://www.gnu.org/copyleft/fdl.html.
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+/*!
+    \title Qt SVG
+    \page qtsvg-index.html
+    \brief Qt Svg provides functionality for handling SVG images.
+
+    Scalable Vector Graphics (SVG) is an XML-based language for
+    describing two-dimensional vector graphics. Qt provides classes
+    for rendering and displaying SVG drawings in widgets and on other
+    paint devices.
+
+    \list
+        \li \l{Qt Svg C++ Classes}
+    \endlist
+
+    Qt Svg comes with the following examples:
+
+    \list
+        \li \l{SVG Generator Example}
+        \li \l{SVG Viewer Example}
+    \endlist
+*/
+
diff --git a/src/svg/doc/src/qtsvg.qdoc b/src/svg/doc/src/qtsvg.qdoc
new file mode 100644
index 0000000..ffdc15e
--- /dev/null
+++ b/src/svg/doc/src/qtsvg.qdoc
@@ -0,0 +1,41 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/legal
+**
+** This file is part of the documentation of the Qt Svg Module.
+**
+** $QT_BEGIN_LICENSE:FDL$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and Digia.  For licensing terms and
+** conditions see http://qt.digia.com/licensing.  For further information
+** use the contact form at http://qt.digia.com/contact-us.
+**
+** GNU Free Documentation License Usage
+** Alternatively, this file may be used under the terms of the GNU Free
+** Documentation License version 1.3 as published by the Free Software
+** Foundation and appearing in the file included in the packaging of
+** this file.  Please review the following information to ensure
+** the GNU Free Documentation License version 1.3 requirements
+** will be met: http://www.gnu.org/copyleft/fdl.html.
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+/*!
+    \module QtSvg
+    \title Qt Svg C++ Classes
+    \ingroup modules
+
+    \brief The Qt Svg module provides functionality for handling SVG images.
+
+    Scalable Vector Graphics (SVG) is an XML-based language for
+    describing two-dimensional vector graphics. Qt provides classes
+    for rendering and displaying SVG drawings in widgets and on other
+    paint devices. See the class descriptions for further details.
+
+*/
+
diff --git a/src/svg/qgraphicssvgitem.cpp b/src/svg/qgraphicssvgitem.cpp
index 4296af7..ec9bb17 100644
--- a/src/svg/qgraphicssvgitem.cpp
+++ b/src/svg/qgraphicssvgitem.cpp
@@ -100,6 +100,7 @@ public:
 
 /*!
     \class QGraphicsSvgItem
+    \inmodule QtSvg
     \ingroup graphicsview-api
     \brief The QGraphicsSvgItem class is a QGraphicsItem that can be used to render
            the contents of SVG files.
@@ -122,7 +123,7 @@ public:
     elements. For example the following code renders only jokers from a SVG file
     containing a whole card deck:
 
-    \snippet doc/src/snippets/code/src_svg_qgraphicssvgitem.cpp 0
+    \snippet src_svg_qgraphicssvgitem.cpp 0
 
     Size of the item can be set via the \l{QRectF::setSize()}
     {setSize()} method of the \l{QGraphicsSvgItem::boundingRect()}
@@ -133,7 +134,7 @@ public:
     mode to speedup the display of items. Caching can be disabled by passing
     QGraphicsItem::NoCache to the QGraphicsItem::setCacheMode() method.
 
-    \sa QSvgWidget, {QtSvg Module}, QGraphicsItem, QGraphicsView
+    \sa QSvgWidget, {Qt Svg C++ Classes}, QGraphicsItem, QGraphicsView
 */
 
 /*!
diff --git a/src/svg/qsvggenerator.cpp b/src/svg/qsvggenerator.cpp
index ef35a21..47f760b 100644
--- a/src/svg/qsvggenerator.cpp
+++ b/src/svg/qsvggenerator.cpp
@@ -508,6 +508,7 @@ public:
 /*!
     \class QSvgGenerator
     \ingroup painting
+    \inmodule QtSvg
     \since 4.3
     \brief The QSvgGenerator class provides a paint device that is used to create SVG drawings.
     \reentrant
@@ -520,7 +521,7 @@ public:
     by setting the \l size property, and in some cases where the drawing will be included in
     another, the \l viewBox property also needs to be set.
 
-    \snippet examples/painting/svggenerator/window.cpp configure SVG generator
+    \snippet svggenerator/window.cpp configure SVG generator
 
     Other meta-data can be specified by setting the \a title, \a description and \a resolution
     properties.
@@ -528,9 +529,9 @@ public:
     As with other QPaintDevice subclasses, a QPainter object is used to paint onto an instance
     of this class:
 
-    \snippet examples/painting/svggenerator/window.cpp begin painting
+    \snippet svggenerator/window.cpp begin painting
     \dots
-    \snippet examples/painting/svggenerator/window.cpp end painting
+    \snippet svggenerator/window.cpp end painting
 
     Painting is performed in the same way as for any other paint device. However,
     it is necessary to use the QPainter::begin() and \l{QPainter::}{end()} to
@@ -539,7 +540,7 @@ public:
     The \l{SVG Generator Example} shows how the same painting commands can be used
     for painting a widget and writing an SVG file.
 
-    \sa QSvgRenderer, QSvgWidget, {About SVG}
+    \sa QSvgRenderer, QSvgWidget, {Qt Svg C++ Classes}
 */
 
 /*!
diff --git a/src/svg/qsvgrenderer.cpp b/src/svg/qsvgrenderer.cpp
index 5e054dc..68a97bf 100644
--- a/src/svg/qsvgrenderer.cpp
+++ b/src/svg/qsvgrenderer.cpp
@@ -55,6 +55,7 @@ QT_BEGIN_NAMESPACE
 
 /*!
     \class QSvgRenderer
+    \inmodule QtSvg
     \ingroup painting
 
     \brief The QSvgRenderer class is used to draw the contents of SVG files onto paint devices.
@@ -98,7 +99,7 @@ QT_BEGIN_NAMESPACE
     Finally, the QSvgRenderer class provides the repaintNeeded() signal which is emitted
     whenever the rendering of the document needs to be updated.
 
-    \sa QSvgWidget, {QtSvg Module}, {SVG Viewer Example}, QPicture
+    \sa QSvgWidget, {Qt Svg C++ Classes}, {SVG Viewer Example}, QPicture
 */
 
 class QSvgRendererPrivate : public QObjectPrivate
diff --git a/src/svg/qsvgwidget.cpp b/src/svg/qsvgwidget.cpp
index 2050339..698d9d6 100644
--- a/src/svg/qsvgwidget.cpp
+++ b/src/svg/qsvgwidget.cpp
@@ -52,6 +52,7 @@ QT_BEGIN_NAMESPACE
 
 /*!
     \class QSvgWidget
+    \inmodule QtSvg
     \ingroup painting
 
     \brief The QSvgWidget class provides a widget that is used to display the contents of
@@ -76,7 +77,7 @@ QT_BEGIN_NAMESPACE
     displays. If no data has been loaded, the widget provides the default QWidget size hint.
     Subclass this class and reimplement sizeHint() if you need to customize this behavior.
 
-    \sa QSvgRenderer, {QtSvg Module}, QPicture
+    \sa QSvgRenderer, {Qt Svg C++ Classes}, QPicture
 */
 
 class QSvgWidgetPrivate : public QWidgetPrivate