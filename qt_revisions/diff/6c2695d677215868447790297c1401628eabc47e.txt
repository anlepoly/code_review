diff --git a/src/dbus/qdbusabstractadaptor.h b/src/dbus/qdbusabstractadaptor.h
index 75a3876..bb12c74 100644
--- a/src/dbus/qdbusabstractadaptor.h
+++ b/src/dbus/qdbusabstractadaptor.h
@@ -57,7 +57,7 @@ class Q_DBUS_EXPORT QDBusAbstractAdaptor: public QObject
 {
     Q_OBJECT
 protected:
-    QDBusAbstractAdaptor(QObject *parent);
+    explicit QDBusAbstractAdaptor(QObject *parent);
 
 public:
     ~QDBusAbstractAdaptor();
diff --git a/src/dbus/qdbusabstractinterface.cpp b/src/dbus/qdbusabstractinterface.cpp
index cb9f2e7..941f322 100644
--- a/src/dbus/qdbusabstractinterface.cpp
+++ b/src/dbus/qdbusabstractinterface.cpp
@@ -148,7 +148,7 @@ void QDBusAbstractInterfacePrivate::property(const QMetaProperty &mp, QVariant &
     QDBusMessage reply = connection.call(msg, QDBus::Block, timeout);
 
     if (reply.type() != QDBusMessage::ReplyMessage) {
-        lastError = reply;
+        lastError = QDBusError(reply);
         where.clear();
         return;
     }
@@ -214,7 +214,7 @@ bool QDBusAbstractInterfacePrivate::setProperty(const QMetaProperty &mp, const Q
     QDBusMessage reply = connection.call(msg, QDBus::Block, timeout);
 
     if (reply.type() != QDBusMessage::ReplyMessage) {
-        lastError = reply;
+        lastError = QDBusError(reply);
         return false;
     }
     return true;
@@ -467,7 +467,7 @@ QDBusMessage QDBusAbstractInterface::callWithArgumentList(QDBus::CallMode mode,
 
     QDBusMessage reply = d->connection.call(msg, mode, d->timeout);
     if (thread() == QThread::currentThread())
-        d->lastError = reply;       // will clear if reply isn't an error
+        d->lastError = QDBusError(reply);       // will clear if reply isn't an error
 
     // ensure that there is at least one element
     if (reply.arguments().isEmpty())
@@ -540,7 +540,7 @@ bool QDBusAbstractInterface::callWithCallback(const QString &method,
     QDBusMessagePrivate::setParametersValidated(msg, true);
     msg.setArguments(args);
 
-    d->lastError = 0;
+    d->lastError = QDBusError();
     return d->connection.callWithCallback(msg,
                                           receiver,
                                           returnMethod,
diff --git a/src/dbus/qdbusconnection.h b/src/dbus/qdbusconnection.h
index ad620fd..8dd2622 100644
--- a/src/dbus/qdbusconnection.h
+++ b/src/dbus/qdbusconnection.h
@@ -127,7 +127,7 @@ public:
     };
     Q_DECLARE_FLAGS(ConnectionCapabilities, ConnectionCapability)
 
-    QDBusConnection(const QString &name);
+    explicit QDBusConnection(const QString &name);
     QDBusConnection(const QDBusConnection &other);
     ~QDBusConnection();
 
diff --git a/src/dbus/qdbuserror.h b/src/dbus/qdbuserror.h
index 0cea8e2..ed0bfaa 100644
--- a/src/dbus/qdbuserror.h
+++ b/src/dbus/qdbuserror.h
@@ -93,8 +93,8 @@ public:
 #endif
     };
 
-    QDBusError(const DBusError *error = 0);
-    QDBusError(const QDBusMessage& msg);
+    explicit QDBusError(const DBusError *error = 0);
+    /*implicit*/ QDBusError(const QDBusMessage& msg);
     QDBusError(ErrorType error, const QString &message);
     QDBusError(const QDBusError &other);
     QDBusError &operator=(const QDBusError &other);
diff --git a/src/dbus/qdbusintegrator.cpp b/src/dbus/qdbusintegrator.cpp
index 8d46ee4..acb83e2 100644
--- a/src/dbus/qdbusintegrator.cpp
+++ b/src/dbus/qdbusintegrator.cpp
@@ -1928,7 +1928,7 @@ QDBusMessage QDBusConnectionPrivate::sendWithReply(const QDBusMessage &message,
         }
 
         QDBusMessage reply = pcall->replyMessage;
-        lastError = reply;      // set or clear error
+        lastError = QDBusError(reply);      // set or clear error
 
         delete pcall;
         return reply;
@@ -2368,7 +2368,7 @@ QDBusConnectionPrivate::findMetaObject(const QString &service, const QString &pa
             // fetch the XML description
             xml = reply.arguments().at(0).toString();
     } else {
-        error = reply;
+        error = QDBusError(reply);
         lastError = error;
         if (reply.type() != QDBusMessage::ErrorMessage || error.type() != QDBusError::UnknownMethod)
             return 0; // error
diff --git a/src/dbus/qdbusinterface.cpp b/src/dbus/qdbusinterface.cpp
index b76dd73..b336396 100644
--- a/src/dbus/qdbusinterface.cpp
+++ b/src/dbus/qdbusinterface.cpp
@@ -316,7 +316,7 @@ int QDBusInterfacePrivate::metacall(QMetaObject::Call c, int id, void **argv)
             }
 
             // done
-            lastError = reply;
+            lastError = QDBusError(reply);
             return -1;
         }
     }
diff --git a/src/dbus/qdbuspendingcall.cpp b/src/dbus/qdbuspendingcall.cpp
index 65d4b55..bb1bb76 100644
--- a/src/dbus/qdbuspendingcall.cpp
+++ b/src/dbus/qdbuspendingcall.cpp
@@ -377,7 +377,7 @@ QDBusError QDBusPendingCall::error() const
 {
     if (d) {
         QMutexLocker locker(&d->mutex);
-        return d->replyMessage;
+        return QDBusError(d->replyMessage);
     }
 
     // not connected, return an error
diff --git a/src/dbus/qdbuspendingcall.h b/src/dbus/qdbuspendingcall.h
index 6dfdef5..8655435 100644
--- a/src/dbus/qdbuspendingcall.h
+++ b/src/dbus/qdbuspendingcall.h
@@ -99,7 +99,7 @@ class Q_DBUS_EXPORT QDBusPendingCallWatcher: public QObject, public QDBusPending
 {
     Q_OBJECT
 public:
-    QDBusPendingCallWatcher(const QDBusPendingCall &call, QObject *parent = 0);
+    explicit QDBusPendingCallWatcher(const QDBusPendingCall &call, QObject *parent = 0);
     ~QDBusPendingCallWatcher();
 
 #ifdef Q_QDOC
diff --git a/src/dbus/qdbuspendingcall_p.h b/src/dbus/qdbuspendingcall_p.h
index 2aaae7b..eb0d9b6 100644
--- a/src/dbus/qdbuspendingcall_p.h
+++ b/src/dbus/qdbuspendingcall_p.h
@@ -125,7 +125,7 @@ public:
         if (replyMessage.type() == QDBusMessage::ReplyMessage)
             emit reply(replyMessage);
         else
-            emit error(replyMessage, sentMessage);
+            emit error(QDBusError(replyMessage), sentMessage);
         emit finished();
     }
 
diff --git a/src/dbus/qdbuspendingreply.h b/src/dbus/qdbuspendingreply.h
index ce8354d..0cdec73 100644
--- a/src/dbus/qdbuspendingreply.h
+++ b/src/dbus/qdbuspendingreply.h
@@ -132,9 +132,9 @@ public:
     inline QDBusPendingReply(const QDBusPendingReply &other)
         : QDBusPendingReplyData(other)
     { }
-    inline QDBusPendingReply(const QDBusPendingCall &call)
+    inline /*implicit*/ QDBusPendingReply(const QDBusPendingCall &call) // required by qdbusxml2cpp-generated code
     { *this = call; }
-    inline QDBusPendingReply(const QDBusMessage &message)
+    inline /*implicit*/ QDBusPendingReply(const QDBusMessage &message)
     { *this = message; }
     inline QDBusPendingReply &operator=(const QDBusPendingReply &other)
     { assign(other); return *this; }
diff --git a/src/dbus/qdbusreply.cpp b/src/dbus/qdbusreply.cpp
index 098fe7f..c891874 100644
--- a/src/dbus/qdbusreply.cpp
+++ b/src/dbus/qdbusreply.cpp
@@ -186,7 +186,7 @@ QT_BEGIN_NAMESPACE
 */
 void qDBusReplyFill(const QDBusMessage &reply, QDBusError &error, QVariant &data)
 {
-    error = reply;
+    error = QDBusError(reply);
 
     if (error.isValid()) {
         data = QVariant();      // clear it
diff --git a/src/dbus/qdbusreply.h b/src/dbus/qdbusreply.h
index a3170f7..8d40dd4 100644
--- a/src/dbus/qdbusreply.h
+++ b/src/dbus/qdbusreply.h
@@ -152,7 +152,7 @@ public:
     }
     inline QDBusReply& operator=(const QDBusMessage &reply)
     {
-        m_error = reply;
+        m_error = QDBusError(reply);
         return *this;
     }
     inline QDBusReply(const QDBusError &dbusError = QDBusError())
diff --git a/src/plugins/bearer/networkmanager/qnetworkmanagerengine.cpp b/src/plugins/bearer/networkmanager/qnetworkmanagerengine.cpp
index a71a241..7979e5d 100644
--- a/src/plugins/bearer/networkmanager/qnetworkmanagerengine.cpp
+++ b/src/plugins/bearer/networkmanager/qnetworkmanagerengine.cpp
@@ -516,7 +516,7 @@ void QNetworkManagerEngine::activationFinished(QDBusPendingCallWatcher *watcher)
 {
     QMutexLocker locker(&mutex);
 
-    QDBusPendingReply<QDBusObjectPath> reply = *watcher;
+    QDBusPendingReply<QDBusObjectPath> reply(*watcher);
     if (!reply.isError()) {
         QDBusObjectPath result = reply.value();
 
diff --git a/tests/auto/dbus/qdbuspendingreply/tst_qdbuspendingreply.cpp b/tests/auto/dbus/qdbuspendingreply/tst_qdbuspendingreply.cpp
index 5836945..865c9a8 100644
--- a/tests/auto/dbus/qdbuspendingreply/tst_qdbuspendingreply.cpp
+++ b/tests/auto/dbus/qdbuspendingreply/tst_qdbuspendingreply.cpp
@@ -474,77 +474,77 @@ void tst_QDBusPendingReply::multipleTypes()
 
 void tst_QDBusPendingReply::synchronousSimpleTypes()
 {
-    QDBusPendingReply<bool> rbool = iface->call("retrieveBool");
+    QDBusPendingReply<bool> rbool(iface->call("retrieveBool"));
     rbool.waitForFinished();
     QVERIFY(rbool.isFinished());
     QCOMPARE(rbool.argumentAt<0>(), adaptor->retrieveBool());
 
-    QDBusPendingReply<uchar> ruchar = iface->call("retrieveUChar");
+    QDBusPendingReply<uchar> ruchar(iface->call("retrieveUChar"));
     ruchar.waitForFinished();
     QVERIFY(ruchar.isFinished());
     QCOMPARE(ruchar.argumentAt<0>(), adaptor->retrieveUChar());
 
-    QDBusPendingReply<short> rshort = iface->call("retrieveShort");
+    QDBusPendingReply<short> rshort(iface->call("retrieveShort"));
     rshort.waitForFinished();
     QVERIFY(rshort.isFinished());
     QCOMPARE(rshort.argumentAt<0>(), adaptor->retrieveShort());
 
-    QDBusPendingReply<ushort> rushort = iface->call("retrieveUShort");
+    QDBusPendingReply<ushort> rushort(iface->call("retrieveUShort"));
     rushort.waitForFinished();
     QVERIFY(rushort.isFinished());
     QCOMPARE(rushort.argumentAt<0>(), adaptor->retrieveUShort());
 
-    QDBusPendingReply<int> rint = iface->call("retrieveInt");
+    QDBusPendingReply<int> rint(iface->call("retrieveInt"));
     rint.waitForFinished();
     QVERIFY(rint.isFinished());
     QCOMPARE(rint.argumentAt<0>(), adaptor->retrieveInt());
 
-    QDBusPendingReply<uint> ruint = iface->call("retrieveUInt");
+    QDBusPendingReply<uint> ruint(iface->call("retrieveUInt"));
     ruint.waitForFinished();
     QVERIFY(ruint.isFinished());
     QCOMPARE(ruint.argumentAt<0>(), adaptor->retrieveUInt());
 
-    QDBusPendingReply<qlonglong> rqlonglong = iface->call("retrieveLongLong");
+    QDBusPendingReply<qlonglong> rqlonglong(iface->call("retrieveLongLong"));
     rqlonglong.waitForFinished();
     QVERIFY(rqlonglong.isFinished());
     QCOMPARE(rqlonglong.argumentAt<0>(), adaptor->retrieveLongLong());
 
-    QDBusPendingReply<qulonglong> rqulonglong = iface->call("retrieveULongLong");
+    QDBusPendingReply<qulonglong> rqulonglong(iface->call("retrieveULongLong"));
     rqulonglong.waitForFinished();
     QVERIFY(rqulonglong.isFinished());
     QCOMPARE(rqulonglong.argumentAt<0>(), adaptor->retrieveULongLong());
 
-    QDBusPendingReply<double> rdouble = iface->call("retrieveDouble");
+    QDBusPendingReply<double> rdouble(iface->call("retrieveDouble"));
     rdouble.waitForFinished();
     QVERIFY(rdouble.isFinished());
     QCOMPARE(rdouble.argumentAt<0>(), adaptor->retrieveDouble());
 
-    QDBusPendingReply<QString> rstring = iface->call("retrieveString");
+    QDBusPendingReply<QString> rstring(iface->call("retrieveString"));
     rstring.waitForFinished();
     QVERIFY(rstring.isFinished());
     QCOMPARE(rstring.argumentAt<0>(), adaptor->retrieveString());
 
-    QDBusPendingReply<QDBusObjectPath> robjectpath = iface->call("retrieveObjectPath");
+    QDBusPendingReply<QDBusObjectPath> robjectpath(iface->call("retrieveObjectPath"));
     robjectpath.waitForFinished();
     QVERIFY(robjectpath.isFinished());
     QCOMPARE(robjectpath.argumentAt<0>().path(), adaptor->retrieveObjectPath().path());
 
-    QDBusPendingReply<QDBusSignature> rsignature = iface->call("retrieveSignature");
+    QDBusPendingReply<QDBusSignature> rsignature(iface->call("retrieveSignature"));
     rsignature.waitForFinished();
     QVERIFY(rsignature.isFinished());
     QCOMPARE(rsignature.argumentAt<0>().signature(), adaptor->retrieveSignature().signature());
 
-    QDBusPendingReply<QDBusVariant> rdbusvariant = iface->call("retrieveVariant");
+    QDBusPendingReply<QDBusVariant> rdbusvariant(iface->call("retrieveVariant"));
     rdbusvariant.waitForFinished();
     QVERIFY(rdbusvariant.isFinished());
     QCOMPARE(rdbusvariant.argumentAt<0>().variant(), adaptor->retrieveVariant().variant());
 
-    QDBusPendingReply<QByteArray> rbytearray = iface->call("retrieveByteArray");
+    QDBusPendingReply<QByteArray> rbytearray(iface->call("retrieveByteArray"));
     rbytearray.waitForFinished();
     QVERIFY(rbytearray.isFinished());
     QCOMPARE(rbytearray.argumentAt<0>(), adaptor->retrieveByteArray());
 
-    QDBusPendingReply<QStringList> rstringlist = iface->call("retrieveStringList");
+    QDBusPendingReply<QStringList> rstringlist(iface->call("retrieveStringList"));
     rstringlist.waitForFinished();
     QVERIFY(rstringlist.isFinished());
     QCOMPARE(rstringlist.argumentAt<0>(), adaptor->retrieveStringList());
@@ -559,28 +559,28 @@ void tst_QDBusPendingReply::errors()
 {
     QDBusError error;
 
-    QDBusPendingReply<> rvoid = iface->asyncCall("sendError");
+    QDBusPendingReply<> rvoid(iface->asyncCall("sendError"));
     rvoid.waitForFinished();
     QVERIFY(rvoid.isFinished());
     QVERIFY(rvoid.isError());
     error = rvoid.error();
     VERIFY_ERROR(error);
 
-    QDBusPendingReply<int> rint = iface->asyncCall("sendError");
+    QDBusPendingReply<int> rint(iface->asyncCall("sendError"));
     rint.waitForFinished();
     QVERIFY(rint.isFinished());
     QVERIFY(rint.isError());
     error = rint.error();
     VERIFY_ERROR(error);
 
-    QDBusPendingReply<int,int> rintint = iface->asyncCall("sendError");
+    QDBusPendingReply<int,int> rintint(iface->asyncCall("sendError"));
     rintint.waitForFinished();
     QVERIFY(rintint.isFinished());
     QVERIFY(rintint.isError());
     error = rintint.error();
     VERIFY_ERROR(error);
 
-    QDBusPendingReply<QString> rstring = iface->asyncCall("sendError");
+    QDBusPendingReply<QString> rstring(iface->asyncCall("sendError"));
     rstring.waitForFinished();
     QVERIFY(rstring.isFinished());
     QVERIFY(rstring.isError());