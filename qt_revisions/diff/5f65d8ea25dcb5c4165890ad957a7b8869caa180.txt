diff --git a/src/gui/painting/qfixed_p.h b/src/gui/painting/qfixed_p.h
index 95fb689..44772a4 100644
--- a/src/gui/painting/qfixed_p.h
+++ b/src/gui/painting/qfixed_p.h
@@ -61,49 +61,49 @@ QT_BEGIN_NAMESPACE
 
 struct QFixed {
 private:
-    QFixed(int val, int) : val(val) {} // 2nd int is just a dummy for disambiguation
+    Q_DECL_CONSTEXPR QFixed(int val, int) : val(val) {} // 2nd int is just a dummy for disambiguation
 public:
-    QFixed() : val(0) {}
-    QFixed(int i) : val(i<<6) {}
-    QFixed(long i) : val(i<<6) {}
+    Q_DECL_CONSTEXPR QFixed() : val(0) {}
+    Q_DECL_CONSTEXPR QFixed(int i) : val(i<<6) {}
+    Q_DECL_CONSTEXPR QFixed(long i) : val(i<<6) {}
     QFixed &operator=(int i) { val = (i<<6); return *this; }
     QFixed &operator=(long i) { val = (i<<6); return *this; }
 
-    static QFixed fromReal(qreal r) { return fromFixed((int)(r*qreal(64))); }
-    static QFixed fromFixed(int fixed) { return QFixed(fixed,0); } // uses private ctor
+    Q_DECL_CONSTEXPR static QFixed fromReal(qreal r) { return fromFixed((int)(r*qreal(64))); }
+    Q_DECL_CONSTEXPR static QFixed fromFixed(int fixed) { return QFixed(fixed,0); } // uses private ctor
 
-    inline int value() const { return val; }
+    Q_DECL_CONSTEXPR inline int value() const { return val; }
     inline void setValue(int value) { val = value; }
 
-    inline int toInt() const { return (((val)+32) & -64)>>6; }
-    inline qreal toReal() const { return ((qreal)val)/(qreal)64; }
+    Q_DECL_CONSTEXPR inline int toInt() const { return (((val)+32) & -64)>>6; }
+    Q_DECL_CONSTEXPR inline qreal toReal() const { return ((qreal)val)/(qreal)64; }
 
-    inline int truncate() const { return val>>6; }
-    inline QFixed round() const { return fromFixed(((val)+32) & -64); }
-    inline QFixed floor() const { return fromFixed((val) & -64); }
-    inline QFixed ceil() const { return fromFixed((val+63) & -64); }
+    Q_DECL_CONSTEXPR inline int truncate() const { return val>>6; }
+    Q_DECL_CONSTEXPR inline QFixed round() const { return fromFixed(((val)+32) & -64); }
+    Q_DECL_CONSTEXPR inline QFixed floor() const { return fromFixed((val) & -64); }
+    Q_DECL_CONSTEXPR inline QFixed ceil() const { return fromFixed((val+63) & -64); }
 
-    inline QFixed operator+(int i) const { return fromFixed((val + (i<<6))); }
-    inline QFixed operator+(uint i) const { return fromFixed((val + (i<<6))); }
-    inline QFixed operator+(const QFixed &other) const { return fromFixed((val + other.val)); }
+    Q_DECL_CONSTEXPR inline QFixed operator+(int i) const { return fromFixed((val + (i<<6))); }
+    Q_DECL_CONSTEXPR inline QFixed operator+(uint i) const { return fromFixed((val + (i<<6))); }
+    Q_DECL_CONSTEXPR inline QFixed operator+(const QFixed &other) const { return fromFixed((val + other.val)); }
     inline QFixed &operator+=(int i) { val += (i<<6); return *this; }
     inline QFixed &operator+=(uint i) { val += (i<<6); return *this; }
     inline QFixed &operator+=(const QFixed &other) { val += other.val; return *this; }
-    inline QFixed operator-(int i) const { return fromFixed((val - (i<<6))); }
-    inline QFixed operator-(uint i) const { return fromFixed((val - (i<<6))); }
-    inline QFixed operator-(const QFixed &other) const { return fromFixed((val - other.val)); }
+    Q_DECL_CONSTEXPR inline QFixed operator-(int i) const { return fromFixed((val - (i<<6))); }
+    Q_DECL_CONSTEXPR inline QFixed operator-(uint i) const { return fromFixed((val - (i<<6))); }
+    Q_DECL_CONSTEXPR inline QFixed operator-(const QFixed &other) const { return fromFixed((val - other.val)); }
     inline QFixed &operator-=(int i) { val -= (i<<6); return *this; }
     inline QFixed &operator-=(uint i) { val -= (i<<6); return *this; }
     inline QFixed &operator-=(const QFixed &other) { val -= other.val; return *this; }
-    inline QFixed operator-() const { return fromFixed(-val); }
+    Q_DECL_CONSTEXPR inline QFixed operator-() const { return fromFixed(-val); }
 
-    inline bool operator==(const QFixed &other) const { return val == other.val; }
-    inline bool operator!=(const QFixed &other) const { return val != other.val; }
-    inline bool operator<(const QFixed &other) const { return val < other.val; }
-    inline bool operator>(const QFixed &other) const { return val > other.val; }
-    inline bool operator<=(const QFixed &other) const { return val <= other.val; }
-    inline bool operator>=(const QFixed &other) const { return val >= other.val; }
-    inline bool operator!() const { return !val; }
+    Q_DECL_CONSTEXPR inline bool operator==(const QFixed &other) const { return val == other.val; }
+    Q_DECL_CONSTEXPR inline bool operator!=(const QFixed &other) const { return val != other.val; }
+    Q_DECL_CONSTEXPR inline bool operator<(const QFixed &other) const { return val < other.val; }
+    Q_DECL_CONSTEXPR inline bool operator>(const QFixed &other) const { return val > other.val; }
+    Q_DECL_CONSTEXPR inline bool operator<=(const QFixed &other) const { return val <= other.val; }
+    Q_DECL_CONSTEXPR inline bool operator>=(const QFixed &other) const { return val >= other.val; }
+    Q_DECL_CONSTEXPR inline bool operator!() const { return !val; }
 
     inline QFixed &operator/=(int x) { val /= x; return *this; }
     inline QFixed &operator/=(const QFixed &o) {
@@ -122,7 +122,7 @@ public:
         }
         return *this;
     }
-    inline QFixed operator/(int d) const { return fromFixed(val/d); }
+    Q_DECL_CONSTEXPR inline QFixed operator/(int d) const { return fromFixed(val/d); }
     inline QFixed operator/(QFixed b) const { QFixed f = *this; return (f /= b); }
     inline QFixed operator>>(int d) const { QFixed f = *this; f.val >>= d; return f; }
     inline QFixed &operator*=(int i) { val *= i; return *this; }
@@ -138,50 +138,50 @@ public:
         val = neg ? -res : res;
         return *this;
     }
-    inline QFixed operator*(int i) const { return fromFixed(val * i); }
-    inline QFixed operator*(uint i) const { return fromFixed(val * i); }
+    Q_DECL_CONSTEXPR inline QFixed operator*(int i) const { return fromFixed(val * i); }
+    Q_DECL_CONSTEXPR inline QFixed operator*(uint i) const { return fromFixed(val * i); }
     inline QFixed operator*(const QFixed &o) const { QFixed f = *this; return (f *= o); }
 
 private:
-    QFixed(qreal i) : val((int)(i*qreal(64))) {}
+    Q_DECL_CONSTEXPR QFixed(qreal i) : val((int)(i*qreal(64))) {}
     QFixed &operator=(qreal i) { val = (int)(i*qreal(64)); return *this; }
-    inline QFixed operator+(qreal i) const { return fromFixed((val + (int)(i*qreal(64)))); }
+    Q_DECL_CONSTEXPR inline QFixed operator+(qreal i) const { return fromFixed((val + (int)(i*qreal(64)))); }
     inline QFixed &operator+=(qreal i) { val += (int)(i*64); return *this; }
-    inline QFixed operator-(qreal i) const { return fromFixed((val - (int)(i*qreal(64)))); }
+    Q_DECL_CONSTEXPR inline QFixed operator-(qreal i) const { return fromFixed((val - (int)(i*qreal(64)))); }
     inline QFixed &operator-=(qreal i) { val -= (int)(i*64); return *this; }
     inline QFixed &operator/=(qreal r) { val = (int)(val/r); return *this; }
-    inline QFixed operator/(qreal d) const { return fromFixed((int)(val/d)); }
+    Q_DECL_CONSTEXPR inline QFixed operator/(qreal d) const { return fromFixed((int)(val/d)); }
     inline QFixed &operator*=(qreal d) { val = (int) (val*d); return *this; }
-    inline QFixed operator*(qreal d) const { return fromFixed((int) (val*d)); }
+    Q_DECL_CONSTEXPR inline QFixed operator*(qreal d) const { return fromFixed((int) (val*d)); }
     int val;
 };
 Q_DECLARE_TYPEINFO(QFixed, Q_PRIMITIVE_TYPE);
 
 #define QFIXED_MAX (INT_MAX/256)
 
-inline int qRound(const QFixed &f) { return f.toInt(); }
-inline int qFloor(const QFixed &f) { return f.floor().truncate(); }
-
-inline QFixed operator*(int i, const QFixed &d) { return d*i; }
-inline QFixed operator+(int i, const QFixed &d) { return d+i; }
-inline QFixed operator-(int i, const QFixed &d) { return -(d-i); }
-inline QFixed operator*(uint i, const QFixed &d) { return d*i; }
-inline QFixed operator+(uint i, const QFixed &d) { return d+i; }
-inline QFixed operator-(uint i, const QFixed &d) { return -(d-i); }
-// inline QFixed operator*(qreal d, const QFixed &d2) { return d2*d; }
-
-inline bool operator==(const QFixed &f, int i) { return f.value() == (i<<6); }
-inline bool operator==(int i, const QFixed &f) { return f.value() == (i<<6); }
-inline bool operator!=(const QFixed &f, int i) { return f.value() != (i<<6); }
-inline bool operator!=(int i, const QFixed &f) { return f.value() != (i<<6); }
-inline bool operator<=(const QFixed &f, int i) { return f.value() <= (i<<6); }
-inline bool operator<=(int i, const QFixed &f) { return (i<<6) <= f.value(); }
-inline bool operator>=(const QFixed &f, int i) { return f.value() >= (i<<6); }
-inline bool operator>=(int i, const QFixed &f) { return (i<<6) >= f.value(); }
-inline bool operator<(const QFixed &f, int i) { return f.value() < (i<<6); }
-inline bool operator<(int i, const QFixed &f) { return (i<<6) < f.value(); }
-inline bool operator>(const QFixed &f, int i) { return f.value() > (i<<6); }
-inline bool operator>(int i, const QFixed &f) { return (i<<6) > f.value(); }
+Q_DECL_CONSTEXPR inline int qRound(const QFixed &f) { return f.toInt(); }
+Q_DECL_CONSTEXPR inline int qFloor(const QFixed &f) { return f.floor().truncate(); }
+
+Q_DECL_CONSTEXPR inline QFixed operator*(int i, const QFixed &d) { return d*i; }
+Q_DECL_CONSTEXPR inline QFixed operator+(int i, const QFixed &d) { return d+i; }
+Q_DECL_CONSTEXPR inline QFixed operator-(int i, const QFixed &d) { return -(d-i); }
+Q_DECL_CONSTEXPR inline QFixed operator*(uint i, const QFixed &d) { return d*i; }
+Q_DECL_CONSTEXPR inline QFixed operator+(uint i, const QFixed &d) { return d+i; }
+Q_DECL_CONSTEXPR inline QFixed operator-(uint i, const QFixed &d) { return -(d-i); }
+// Q_DECL_CONSTEXPR inline QFixed operator*(qreal d, const QFixed &d2) { return d2*d; }
+
+Q_DECL_CONSTEXPR inline bool operator==(const QFixed &f, int i) { return f.value() == (i<<6); }
+Q_DECL_CONSTEXPR inline bool operator==(int i, const QFixed &f) { return f.value() == (i<<6); }
+Q_DECL_CONSTEXPR inline bool operator!=(const QFixed &f, int i) { return f.value() != (i<<6); }
+Q_DECL_CONSTEXPR inline bool operator!=(int i, const QFixed &f) { return f.value() != (i<<6); }
+Q_DECL_CONSTEXPR inline bool operator<=(const QFixed &f, int i) { return f.value() <= (i<<6); }
+Q_DECL_CONSTEXPR inline bool operator<=(int i, const QFixed &f) { return (i<<6) <= f.value(); }
+Q_DECL_CONSTEXPR inline bool operator>=(const QFixed &f, int i) { return f.value() >= (i<<6); }
+Q_DECL_CONSTEXPR inline bool operator>=(int i, const QFixed &f) { return (i<<6) >= f.value(); }
+Q_DECL_CONSTEXPR inline bool operator<(const QFixed &f, int i) { return f.value() < (i<<6); }
+Q_DECL_CONSTEXPR inline bool operator<(int i, const QFixed &f) { return (i<<6) < f.value(); }
+Q_DECL_CONSTEXPR inline bool operator>(const QFixed &f, int i) { return f.value() > (i<<6); }
+Q_DECL_CONSTEXPR inline bool operator>(int i, const QFixed &f) { return (i<<6) > f.value(); }
 
 #ifndef QT_NO_DEBUG_STREAM
 inline QDebug &operator<<(QDebug &dbg, const QFixed &f)
@@ -191,27 +191,27 @@ inline QDebug &operator<<(QDebug &dbg, const QFixed &f)
 struct QFixedPoint {
     QFixed x;
     QFixed y;
-    inline QFixedPoint() {}
-    inline QFixedPoint(const QFixed &_x, const QFixed &_y) : x(_x), y(_y) {}
-    QPointF toPointF() const { return QPointF(x.toReal(), y.toReal()); }
-    static QFixedPoint fromPointF(const QPointF &p) {
+    Q_DECL_CONSTEXPR inline QFixedPoint() {}
+    Q_DECL_CONSTEXPR inline QFixedPoint(const QFixed &_x, const QFixed &_y) : x(_x), y(_y) {}
+    Q_DECL_CONSTEXPR QPointF toPointF() const { return QPointF(x.toReal(), y.toReal()); }
+    Q_DECL_CONSTEXPR static QFixedPoint fromPointF(const QPointF &p) {
         return QFixedPoint(QFixed::fromReal(p.x()), QFixed::fromReal(p.y()));
     }
 };
 Q_DECLARE_TYPEINFO(QFixedPoint, Q_PRIMITIVE_TYPE);
 
-inline QFixedPoint operator-(const QFixedPoint &p1, const QFixedPoint &p2)
+Q_DECL_CONSTEXPR inline QFixedPoint operator-(const QFixedPoint &p1, const QFixedPoint &p2)
 { return QFixedPoint(p1.x - p2.x, p1.y - p2.y); }
-inline QFixedPoint operator+(const QFixedPoint &p1, const QFixedPoint &p2)
+Q_DECL_CONSTEXPR inline QFixedPoint operator+(const QFixedPoint &p1, const QFixedPoint &p2)
 { return QFixedPoint(p1.x + p2.x, p1.y + p2.y); }
 
 struct QFixedSize {
     QFixed width;
     QFixed height;
-    QFixedSize() {}
-    QFixedSize(QFixed _width, QFixed _height) : width(_width), height(_height) {}
-    QSizeF toSizeF() const { return QSizeF(width.toReal(), height.toReal()); }
-    static QFixedSize fromSizeF(const QSizeF &s) {
+    Q_DECL_CONSTEXPR QFixedSize() {}
+    Q_DECL_CONSTEXPR QFixedSize(QFixed _width, QFixed _height) : width(_width), height(_height) {}
+    Q_DECL_CONSTEXPR QSizeF toSizeF() const { return QSizeF(width.toReal(), height.toReal()); }
+    Q_DECL_CONSTEXPR static QFixedSize fromSizeF(const QSizeF &s) {
         return QFixedSize(QFixed::fromReal(s.width()), QFixed::fromReal(s.height()));
     }
 };