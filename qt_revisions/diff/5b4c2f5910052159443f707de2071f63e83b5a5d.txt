diff --git a/examples/particles/imageparticle/imageparticle.qml b/examples/particles/imageparticle/imageparticle.qml
index c6c9ace..0635fd7 100644
--- a/examples/particles/imageparticle/imageparticle.qml
+++ b/examples/particles/imageparticle/imageparticle.qml
@@ -72,7 +72,7 @@ import "../../shared" as Examples
     \snippet examples/particles/imageparticle/content/sharing.qml 1
     Note that because it sets the color and alpha in this ImageParticle, it renders the particles in a different color.
     Since it doesn't specify anything about the rotation, it shares the rotation with the other ImageParticle so that the flowers are rotated the same way in both.
-    Note that you can undo rotation in another ImageParticle, you just need to explicity set rotationVariation to 0.
+    Note that you can undo rotation in another ImageParticle, you just need to explicitly set rotationVariation to 0.
 
     Sprites demonstrates using an image particle to render animated sprites instead of static images for each particle.
 */
diff --git a/src/qml/qml/qqmlengine_p.h b/src/qml/qml/qqmlengine_p.h
index e014cff..9598b96 100644
--- a/src/qml/qml/qqmlengine_p.h
+++ b/src/qml/qml/qqmlengine_p.h
@@ -275,7 +275,7 @@ private:
     // either idle, or is running with the main thread blocked, no locking is necessary.  This way
     // we only pay for locking when we have to.
     // Consequently, this class should only be used to protect simple accesses or modifications of the 
-    // QQmlEnginePrivate structures or operations that can be guarenteed not to start activity
+    // QQmlEnginePrivate structures or operations that can be guaranteed not to start activity
     // on the loader thread.
     // The Locker API is identical to QMutexLocker.  Locker reuses the QQmlEnginePrivate::mutex 
     // QMutex instance and multiple Lockers are recursive in the same thread.
diff --git a/src/qml/qml/qqmlscript_p.h b/src/qml/qml/qqmlscript_p.h
index f2e108e..834abd7 100644
--- a/src/qml/qml/qqmlscript_p.h
+++ b/src/qml/qml/qqmlscript_p.h
@@ -328,7 +328,7 @@ public:
     QQmlPropertyCache *synthCache; // Generated by compiler
 
     Property *getDefaultProperty();
-    // name ptr must be guarenteed to remain valid
+    // name ptr must be guaranteed to remain valid
     Property *getProperty(const QHashedStringRef &name, bool create=true);
     Property *getProperty(const QStringRef &name, bool create=true);
     Property *getProperty(const QString &name, bool create=true);
diff --git a/src/qml/qml/v8/qjsvalue_impl_p.h b/src/qml/qml/v8/qjsvalue_impl_p.h
index d9f78c2..fd97342 100644
--- a/src/qml/qml/v8/qjsvalue_impl_p.h
+++ b/src/qml/qml/v8/qjsvalue_impl_p.h
@@ -605,7 +605,7 @@ inline void QJSValuePrivate::setProperty(quint32 index, QJSValuePrivate* value,
         return;
 
     if (attribs) {
-        // FIXME we dont need to convert index to a string.
+        // FIXME we don't need to convert index to a string.
         //Object::Set(int,value) do not take attributes.
         setProperty(QString::number(index), value, attribs);
         return;
diff --git a/src/quick/items/qquickwindow.cpp b/src/quick/items/qquickwindow.cpp
index 88aff07..3b97750 100644
--- a/src/quick/items/qquickwindow.cpp
+++ b/src/quick/items/qquickwindow.cpp
@@ -1468,7 +1468,7 @@ void QQuickWindow::wheelEvent(QWheelEvent *event)
     qWarning() << "QQuickWindow::wheelEvent()" << event->pixelDelta() << event->angleDelta();
 #endif
 
-    //if the actual wheel event was accepted, accept the compatability wheel event and return early
+    //if the actual wheel event was accepted, accept the compatibility wheel event and return early
     if (d->lastWheelEventAccepted && event->angleDelta().isNull())
         return;
 
diff --git a/src/quick/scenegraph/coreapi/qsgmaterial.cpp b/src/quick/scenegraph/coreapi/qsgmaterial.cpp
index 8d37992..78c9c80 100644
--- a/src/quick/scenegraph/coreapi/qsgmaterial.cpp
+++ b/src/quick/scenegraph/coreapi/qsgmaterial.cpp
@@ -85,7 +85,7 @@ QT_BEGIN_NAMESPACE
 
     The attributeNames() returns the name of the attributes used in the
     vertexShader(). These are used in the default implementation of
-    activate() and deactive() to decide whice vertex registers are enabled.
+    activate() and deactivate() to decide whice vertex registers are enabled.
 
     The initialize() function is called during program creation to allow
     subclasses to prepare for use, such as resolve uniform names in the
diff --git a/src/quick/util/qquicklistcompositor.cpp b/src/quick/util/qquicklistcompositor.cpp
index b728874..4266ddd 100644
--- a/src/quick/util/qquicklistcompositor.cpp
+++ b/src/quick/util/qquicklistcompositor.cpp
@@ -75,7 +75,7 @@ QT_BEGIN_NAMESPACE
     membership can be changed with the setFlags() and clearFlags() functions, and the position
     of items in the compositor can be changed with the move() function.  Each of these functions
     optionally returns a list of the changes made to indexes within each group which can then
-    be propogated to view so that it can correctly refresh its contents; e.g. 3 items
+    be propagated to view so that it can correctly refresh its contents; e.g. 3 items
     removed at index 6, and 5 items inserted at index 1.  The notification changes are always
     ordered from the start of the list to the end and accumulate, so if 5 items are removed at
     index 4, one is skipped and then 3 move are removed, the changes returned are 5 items removed
diff --git a/tests/benchmarks/qml/js/qjsvalue/tst_qjsvalue.cpp b/tests/benchmarks/qml/js/qjsvalue/tst_qjsvalue.cpp
index 6c760f3..0234a7b 100644
--- a/tests/benchmarks/qml/js/qjsvalue/tst_qjsvalue.cpp
+++ b/tests/benchmarks/qml/js/qjsvalue/tst_qjsvalue.cpp
@@ -963,7 +963,7 @@ void tst_QJSValue::defineStandardTestValues()
     QTest::newRow("qmetaobject") << m_engine->newQMetaObject(&QJSEngine::staticMetaObject);
 #endif
     QTest::newRow("variant") << m_engine->toScriptValue(QPoint(10, 20));
-#if 0 // no classess
+#if 0 // no classes
     QTest::newRow("qscriptclassobject") << m_engine->newObject(new QJSClass(m_engine));
 #endif
 
diff --git a/tools/qmlplugindump/main.cpp b/tools/qmlplugindump/main.cpp
index 762b7dd..faedf4e 100644
--- a/tools/qmlplugindump/main.cpp
+++ b/tools/qmlplugindump/main.cpp
@@ -203,7 +203,7 @@ QSet<const QMetaObject *> collectReachableMetaObjects(QQmlEngine *engine, const
             const QSet<const QQmlType *> extensionExports = qmlTypesByCppName.value(extensionCppName);
 
             // remove extension exports from base imports
-            // unfortunately the QQmlType pointers don't match, so can't use QSet::substract
+            // unfortunately the QQmlType pointers don't match, so can't use QSet::subtract
             QSet<const QQmlType *> newBaseExports;
             foreach (const QQmlType *baseExport, baseExports) {
                 bool match = false;