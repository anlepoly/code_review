diff --git a/src/corelib/io/qdataurl.cpp b/src/corelib/io/qdataurl.cpp
index 600f650..84b6dd4 100644
--- a/src/corelib/io/qdataurl.cpp
+++ b/src/corelib/io/qdataurl.cpp
@@ -61,8 +61,8 @@ Q_CORE_EXPORT bool qDecodeDataUrl(const QUrl &uri, QString &mimeType, QByteArray
     // the following would have been the correct thing, but
     // reality often differs from the specification. People have
     // data: URIs with ? and #
-    //QByteArray data = QByteArray::fromPercentEncoding(uri.path(QUrl::PrettyDecoded).toLatin1());
-    QByteArray data = QByteArray::fromPercentEncoding(uri.url(QUrl::PrettyDecoded | QUrl::RemoveScheme).toLatin1());
+    //QByteArray data = QByteArray::fromPercentEncoding(uri.path(QUrl::FullyEncoded).toLatin1());
+    QByteArray data = QByteArray::fromPercentEncoding(uri.url(QUrl::FullyEncoded | QUrl::RemoveScheme).toLatin1());
 
     // parse it:
     int pos = data.indexOf(',');
diff --git a/tests/auto/corelib/io/io.pro b/tests/auto/corelib/io/io.pro
index 7e0cb5e..641db20 100644
--- a/tests/auto/corelib/io/io.pro
+++ b/tests/auto/corelib/io/io.pro
@@ -3,6 +3,7 @@ SUBDIRS=\
     qabstractfileengine \
     qbuffer \
     qdatastream \
+    qdataurl \
     qdebug \
     qdir \
     qdiriterator \
diff --git a/tests/auto/corelib/io/qdataurl/qdataurl.pro b/tests/auto/corelib/io/qdataurl/qdataurl.pro
new file mode 100644
index 0000000..564c345
--- /dev/null
+++ b/tests/auto/corelib/io/qdataurl/qdataurl.pro
@@ -0,0 +1,4 @@
+CONFIG += testcase parallel_test
+TARGET = tst_qdataurl
+QT = core core-private testlib
+SOURCES = tst_qdataurl.cpp
diff --git a/tests/auto/corelib/io/qdataurl/tst_qdataurl.cpp b/tests/auto/corelib/io/qdataurl/tst_qdataurl.cpp
new file mode 100644
index 0000000..55dcffd
--- /dev/null
+++ b/tests/auto/corelib/io/qdataurl/tst_qdataurl.cpp
@@ -0,0 +1,93 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/
+**
+** This file is part of the test suite of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** GNU Lesser General Public License Usage
+** This file may be used under the terms of the GNU Lesser General Public
+** License version 2.1 as published by the Free Software Foundation and
+** appearing in the file LICENSE.LGPL included in the packaging of this
+** file. Please review the following information to ensure the GNU Lesser
+** General Public License version 2.1 requirements will be met:
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** In addition, as a special exception, Nokia gives you certain additional
+** rights. These rights are described in the Nokia Qt LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU General
+** Public License version 3.0 as published by the Free Software Foundation
+** and appearing in the file LICENSE.GPL included in the packaging of this
+** file. Please review the following information to ensure the GNU General
+** Public License version 3.0 requirements will be met:
+** http://www.gnu.org/copyleft/gpl.html.
+**
+** Other Usage
+** Alternatively, this file may be used in accordance with the terms and
+** conditions contained in a signed written agreement between you and Nokia.
+**
+**
+**
+**
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#define QT_DEPRECATED
+#define QT_DISABLE_DEPRECATED_BEFORE 0
+#include "private/qdataurl_p.h"
+#include <QtTest/QtTest>
+#include <QtCore/QDebug>
+
+class tst_QDataUrl : public QObject
+{
+    Q_OBJECT
+
+private slots:
+    void nonData();
+    void emptyData();
+    void alreadyPercentageEncoded();
+};
+
+void tst_QDataUrl::nonData()
+{
+    QLatin1String data("http://test.com");
+    QUrl url(data);
+    QString mimeType;
+    QByteArray payload;
+    bool result = qDecodeDataUrl(url, mimeType, payload);
+    QVERIFY(!result);
+}
+
+void tst_QDataUrl::emptyData()
+{
+    QLatin1String data("data:text/plain");
+    QUrl url(data);
+    QString mimeType;
+    QByteArray payload;
+    bool result = qDecodeDataUrl(url, mimeType, payload);
+    QVERIFY(result);
+    QCOMPARE(mimeType, QLatin1String("text/plain;charset=US-ASCII"));
+    QVERIFY(payload.isNull());
+}
+
+void tst_QDataUrl::alreadyPercentageEncoded()
+{
+    QLatin1String data("data:text/plain,%E2%88%9A");
+    QUrl url(data);
+    QString mimeType;
+    QByteArray payload;
+    bool result = qDecodeDataUrl(url, mimeType, payload);
+    QVERIFY(result);
+    QCOMPARE(mimeType, QLatin1String("text/plain"));
+    QCOMPARE(payload, QByteArray::fromPercentEncoding("%E2%88%9A"));
+}
+
+QTEST_MAIN(tst_QDataUrl)
+#include "tst_qdataurl.moc"