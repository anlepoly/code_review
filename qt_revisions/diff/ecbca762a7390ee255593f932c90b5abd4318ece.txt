diff --git a/src/imports/sensors2/qsensor2tilt.cpp b/src/imports/sensors2/qsensor2tilt.cpp
index 8a6f26d..a265216 100644
--- a/src/imports/sensors2/qsensor2tilt.cpp
+++ b/src/imports/sensors2/qsensor2tilt.cpp
@@ -106,6 +106,11 @@ int searchDataRate(const QList<int>& datarates, int value)
     return datarates[m];
 }
 
+QMap<QSensor2Tilt::Speed, int> QSensor2Tilt::dataRate()
+{
+    return _dataRate;
+}
+
 void QSensor2Tilt::createRunModeDataRateMap()
 {
     _dataRate.clear();
diff --git a/src/imports/sensors2/qsensor2tilt.h b/src/imports/sensors2/qsensor2tilt.h
index 79a953f..f65304f 100644
--- a/src/imports/sensors2/qsensor2tilt.h
+++ b/src/imports/sensors2/qsensor2tilt.h
@@ -85,9 +85,8 @@ Q_SIGNALS:
     void tiltChanged(qreal deltaX, qreal deltaY);
     void accuracyChanged();
 
-private:
+public:
     // Override of QAcclerometerFilter::filter(QAccelerometerReading*)
-    bool filter(QAccelerometerReading* reading);
     qreal yRotation();
     qreal xRotation();
     Unit unit();
@@ -100,6 +99,10 @@ private:
     QByteArray settings() const;
     void setSettings(const QByteArray val);
     void createRunModeDataRateMap();
+    QMap<Speed, int> dataRate();
+
+private:
+    bool filter(QAccelerometerReading* reading);
 
     QSensor *sensor() { return _accel; }
     QAccelerometer* _accel;
@@ -113,8 +116,6 @@ private:
     qreal _calibratedRoll;
     QMap<Speed, int> _dataRate;
     Speed _speed;
-
-    friend class tst_Sensors2QMLAPI;
 };
 
 QT_END_NAMESPACE
diff --git a/tests/auto/sensors2qmlapi/tst_sensors2qmlapi.cpp b/tests/auto/sensors2qmlapi/tst_sensors2qmlapi.cpp
index 00ee95e..4983b67 100644
--- a/tests/auto/sensors2qmlapi/tst_sensors2qmlapi.cpp
+++ b/tests/auto/sensors2qmlapi/tst_sensors2qmlapi.cpp
@@ -428,48 +428,48 @@ void tst_Sensors2QMLAPI::testTiltRunningMode()
     if (!_tilt)
         _tilt = new QSensor2Tilt(this);
     QDeclAccelerometer* accel = _plugin.stAccel;
-    QCOMPARE(_tilt->_dataRate.count(), 0);
+    QCOMPARE(_tilt->dataRate().count(), 0);
     accel->addDataRate(13, 15);
     _tilt->createRunModeDataRateMap();
-    QCOMPARE(_tilt->_dataRate.value(QSensor2Tilt::Slow), 13);
-    QCOMPARE(_tilt->_dataRate.value(QSensor2Tilt::Medium), 13);
-    QCOMPARE(_tilt->_dataRate.value(QSensor2Tilt::Fast), 15);
+    QCOMPARE(_tilt->dataRate().value(QSensor2Tilt::Slow), 13);
+    QCOMPARE(_tilt->dataRate().value(QSensor2Tilt::Medium), 13);
+    QCOMPARE(_tilt->dataRate().value(QSensor2Tilt::Fast), 15);
 
     accel->addDataRate(1, 8);
     _tilt->createRunModeDataRateMap();
-    QCOMPARE(_tilt->_dataRate.value(QSensor2Tilt::Slow), 2);
-    QCOMPARE(_tilt->_dataRate.value(QSensor2Tilt::Medium), 8);
-    QCOMPARE(_tilt->_dataRate.value(QSensor2Tilt::Fast), 15);
+    QCOMPARE(_tilt->dataRate().value(QSensor2Tilt::Slow), 2);
+    QCOMPARE(_tilt->dataRate().value(QSensor2Tilt::Medium), 8);
+    QCOMPARE(_tilt->dataRate().value(QSensor2Tilt::Fast), 15);
 
     accel->addDataRate(11, 12);
     _tilt->createRunModeDataRateMap();
-    QCOMPARE(_tilt->_dataRate.value(QSensor2Tilt::Slow), 2);
-    QCOMPARE(_tilt->_dataRate.value(QSensor2Tilt::Medium), 11);
-    QCOMPARE(_tilt->_dataRate.value(QSensor2Tilt::Fast), 15);
+    QCOMPARE(_tilt->dataRate().value(QSensor2Tilt::Slow), 2);
+    QCOMPARE(_tilt->dataRate().value(QSensor2Tilt::Medium), 11);
+    QCOMPARE(_tilt->dataRate().value(QSensor2Tilt::Fast), 15);
 
     accel->addDataRate(13, 18);
     _tilt->createRunModeDataRateMap();
-    QCOMPARE(_tilt->_dataRate.value(QSensor2Tilt::Slow), 2);
-    QCOMPARE(_tilt->_dataRate.value(QSensor2Tilt::Medium), 11);
-    QCOMPARE(_tilt->_dataRate.value(QSensor2Tilt::Fast), 18);
+    QCOMPARE(_tilt->dataRate().value(QSensor2Tilt::Slow), 2);
+    QCOMPARE(_tilt->dataRate().value(QSensor2Tilt::Medium), 11);
+    QCOMPARE(_tilt->dataRate().value(QSensor2Tilt::Fast), 18);
 
     accel->addDataRate(21, 31);
     _tilt->createRunModeDataRateMap();
-    QCOMPARE(_tilt->_dataRate.value(QSensor2Tilt::Slow), 2);
-    QCOMPARE(_tilt->_dataRate.value(QSensor2Tilt::Medium), 11);
-    QCOMPARE(_tilt->_dataRate.value(QSensor2Tilt::Fast), 21);
+    QCOMPARE(_tilt->dataRate().value(QSensor2Tilt::Slow), 2);
+    QCOMPARE(_tilt->dataRate().value(QSensor2Tilt::Medium), 11);
+    QCOMPARE(_tilt->dataRate().value(QSensor2Tilt::Fast), 21);
 
     accel->addDataRate(19, 20);
     _tilt->createRunModeDataRateMap();
-    QCOMPARE(_tilt->_dataRate.value(QSensor2Tilt::Slow), 2);
-    QCOMPARE(_tilt->_dataRate.value(QSensor2Tilt::Medium), 11);
-    QCOMPARE(_tilt->_dataRate.value(QSensor2Tilt::Fast), 20);
+    QCOMPARE(_tilt->dataRate().value(QSensor2Tilt::Slow), 2);
+    QCOMPARE(_tilt->dataRate().value(QSensor2Tilt::Medium), 11);
+    QCOMPARE(_tilt->dataRate().value(QSensor2Tilt::Fast), 20);
 
     accel->addDataRate(9, 10);
     _tilt->createRunModeDataRateMap();
-    QCOMPARE(_tilt->_dataRate.value(QSensor2Tilt::Slow), 2);
-    QCOMPARE(_tilt->_dataRate.value(QSensor2Tilt::Medium), 10);
-    QCOMPARE(_tilt->_dataRate.value(QSensor2Tilt::Fast), 20);
+    QCOMPARE(_tilt->dataRate().value(QSensor2Tilt::Slow), 2);
+    QCOMPARE(_tilt->dataRate().value(QSensor2Tilt::Medium), 10);
+    QCOMPARE(_tilt->dataRate().value(QSensor2Tilt::Fast), 20);
 
     QSensor2Tilt::Speed speed = static_cast<QSensor2Tilt::Speed>(_tilt->property("speed").toInt());
     QCOMPARE(speed, QSensor2Tilt::Slow);