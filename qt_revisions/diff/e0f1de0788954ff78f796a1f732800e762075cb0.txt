diff --git a/qmake/project.cpp b/qmake/project.cpp
index a5ed2be..30b2cd2 100644
--- a/qmake/project.cpp
+++ b/qmake/project.cpp
@@ -3780,7 +3780,7 @@ QStringList &QMakeProject::values(const QString &_var, QHash<QString, QStringLis
 
 bool QMakeProject::isEmpty(const QString &v)
 {
-    QHash<QString, QStringList>::ConstIterator it = vars.constFind(varMap(v));
+    QHash<QString, QStringList>::ConstIterator it = vars.constFind(v);
     return it == vars.constEnd() || it->isEmpty();
 }
 
diff --git a/qmake/project.h b/qmake/project.h
index 8dc863a..34ca8ec 100644
--- a/qmake/project.h
+++ b/qmake/project.h
@@ -164,12 +164,12 @@ public:
     bool isActiveConfig(const QString &x, bool regex=false,
                         QHash<QString, QStringList> *place=NULL);
 
-    bool isSet(const QString &v); // No compat mapping, no magic variables
-    bool isEmpty(const QString &v); // With compat mapping, but no magic variables
-    QStringList &values(const QString &v); // With compat mapping and magic variables
-    QString first(const QString &v); // ditto
-    int intValue(const QString &v, int defaultValue = 0); // ditto
-    QHash<QString, QStringList> &variables(); // No compat mapping and magic, obviously
+    bool isSet(const QString &v) { return vars.contains(v); }
+    bool isEmpty(const QString &v);
+    QStringList &values(const QString &v) { return vars[v]; }
+    QString first(const QString &v);
+    int intValue(const QString &v, int defaultValue = 0);
+    QHash<QString, QStringList> &variables() { return vars; }
 
     bool isRecursive() const { return recursive; }
     bool isHostBuild() const { return host_build; }
@@ -189,12 +189,6 @@ inline QString QMakeProject::projectFile()
     return pfile;
 }
 
-inline QStringList &QMakeProject::values(const QString &v)
-{ return values(v, vars); }
-
-inline bool QMakeProject::isSet(const QString &v)
-{ return vars.contains(v); }
-
 inline QString QMakeProject::first(const QString &v)
 {
     const QStringList vals = values(v);
@@ -215,9 +209,6 @@ inline int QMakeProject::intValue(const QString &v, int defaultValue)
     return defaultValue;
 }
 
-inline QHash<QString, QStringList> &QMakeProject::variables()
-{ return vars; }
-
 QT_END_NAMESPACE
 
 #endif // PROJECT_H