diff --git a/tests/auto/declarative/examples/tst_examples.cpp b/tests/auto/declarative/examples/tst_examples.cpp
index 863dcd1..0607052 100644
--- a/tests/auto/declarative/examples/tst_examples.cpp
+++ b/tests/auto/declarative/examples/tst_examples.cpp
@@ -207,7 +207,7 @@ void tst_examples::examples()
     QCOMPARE(viewer.view()->status(), QDeclarativeView::Ready);
     viewer.show();
 
-    QTest::qWaitForWindowShown(&viewer);
+    QVERIFY(QTest::qWaitForWindowActive(&viewer));
 }
 
 QTEST_MAIN(tst_examples)
diff --git a/tests/auto/declarative/qdeclarativeapplication/tst_qdeclarativeapplication.cpp b/tests/auto/declarative/qdeclarativeapplication/tst_qdeclarativeapplication.cpp
index 018d1c5..78a1f13 100644
--- a/tests/auto/declarative/qdeclarativeapplication/tst_qdeclarativeapplication.cpp
+++ b/tests/auto/declarative/qdeclarativeapplication/tst_qdeclarativeapplication.cpp
@@ -82,8 +82,8 @@ void tst_qdeclarativeapplication::active()
     // active
     view.show();
     QApplication::setActiveWindow(&view);
-    QTest::qWaitForWindowShown(&view);
-    QTRY_COMPARE(QApplication::activeWindow(), static_cast<QWidget *>(&view));
+    QVERIFY(QTest::qWaitForWindowActive(&view));
+    QCOMPARE(QApplication::activeWindow(), static_cast<QWidget *>(&view));
     QCOMPARE(item->property("active").toBool(), QApplication::activeWindow() != 0);
 
     // not active again
diff --git a/tests/auto/declarative/qdeclarativefocusscope/tst_qdeclarativefocusscope.cpp b/tests/auto/declarative/qdeclarativefocusscope/tst_qdeclarativefocusscope.cpp
index 5abf38f..a081490 100644
--- a/tests/auto/declarative/qdeclarativefocusscope/tst_qdeclarativefocusscope.cpp
+++ b/tests/auto/declarative/qdeclarativefocusscope/tst_qdeclarativefocusscope.cpp
@@ -113,12 +113,7 @@ void tst_qdeclarativefocusscope::basic()
 
     view->show();
     qApp->setActiveWindow(view);
-    qApp->processEvents();
-
-#ifdef Q_WS_X11
-    // to be safe and avoid failing setFocus with window managers
-    qt_x11_wait_for_window_manager(view);
-#endif
+    QVERIFY(QTest::qWaitForWindowActive(view));
 
     QVERIFY(view->hasFocus());
     QVERIFY(view->scene()->hasFocus());
@@ -160,13 +155,7 @@ void tst_qdeclarativefocusscope::nested()
 
     view->show();
     qApp->setActiveWindow(view);
-    qApp->processEvents();
-
-#ifdef Q_WS_X11
-    // to be safe and avoid failing setFocus with window managers
-    qt_x11_wait_for_window_manager(view);
-#endif
-
+    QVERIFY(QTest::qWaitForWindowActive(view));
     QVERIFY(view->hasFocus());
     QVERIFY(view->scene()->hasFocus());
 
@@ -194,12 +183,7 @@ void tst_qdeclarativefocusscope::noFocus()
 
     view->show();
     qApp->setActiveWindow(view);
-    qApp->processEvents();
-
-#ifdef Q_WS_X11
-    // to be safe and avoid failing setFocus with window managers
-    qt_x11_wait_for_window_manager(view);
-#endif
+    QVERIFY(QTest::qWaitForWindowActive(view));
 
     QVERIFY(view->hasFocus());
     QVERIFY(view->scene()->hasFocus());
@@ -239,12 +223,7 @@ void tst_qdeclarativefocusscope::textEdit()
 
     view->show();
     qApp->setActiveWindow(view);
-    qApp->processEvents();
-
-#ifdef Q_WS_X11
-    // to be safe and avoid failing setFocus with window managers
-    qt_x11_wait_for_window_manager(view);
-#endif
+    QVERIFY(QTest::qWaitForWindowActive(view));
 
     QVERIFY(view->hasFocus());
     QVERIFY(view->scene()->hasFocus());
@@ -298,12 +277,7 @@ void tst_qdeclarativefocusscope::forceFocus()
 
     view->show();
     qApp->setActiveWindow(view);
-    qApp->processEvents();
-
-#ifdef Q_WS_X11
-    // to be safe and avoid failing setFocus with window managers
-    qt_x11_wait_for_window_manager(view);
-#endif
+    QVERIFY(QTest::qWaitForWindowActive(view));
 
     QVERIFY(view->hasFocus());
     QVERIFY(view->scene()->hasFocus());
@@ -364,12 +338,7 @@ void tst_qdeclarativefocusscope::signalEmission()
 
     view->show();
     qApp->setActiveWindow(view);
-    qApp->processEvents();
-
-#ifdef Q_WS_X11
-    // to be safe and avoid failing setFocus with window managers
-    qt_x11_wait_for_window_manager(view);
-#endif
+    QVERIFY(QTest::qWaitForWindowActive(view));
 
     QVariant blue(QColor("blue"));
     QVariant red(QColor("red"));
@@ -417,13 +386,7 @@ void tst_qdeclarativefocusscope::qtBug13380()
     view->show();
     QVERIFY(view->rootObject());
     qApp->setActiveWindow(view);
-    qApp->processEvents();
-
-#ifdef Q_WS_X11
-    // to be safe and avoid failing setFocus with window managers
-    qt_x11_wait_for_window_manager(view);
-#endif
-
+    QVERIFY(QTest::qWaitForWindowActive(view));
     QVERIFY(view->hasFocus());
     QVERIFY(view->scene()->hasFocus());
     QVERIFY(view->rootObject()->property("noFocus").toBool());
diff --git a/tests/auto/declarative/qdeclarativegridview/tst_qdeclarativegridview.cpp b/tests/auto/declarative/qdeclarativegridview/tst_qdeclarativegridview.cpp
index 2d912ce..023df90 100644
--- a/tests/auto/declarative/qdeclarativegridview/tst_qdeclarativegridview.cpp
+++ b/tests/auto/declarative/qdeclarativegridview/tst_qdeclarativegridview.cpp
@@ -716,10 +716,7 @@ void tst_QDeclarativeGridView::currentIndex()
     // Test keys
     canvas->show();
     qApp->setActiveWindow(canvas);
-#ifdef Q_WS_X11
-    // to be safe and avoid failing setFocus with window managers
-    qt_x11_wait_for_window_manager(canvas);
-#endif
+    QVERIFY(QTest::qWaitForWindowActive(canvas));
     QTRY_VERIFY(canvas->hasFocus());
     QTRY_VERIFY(canvas->scene()->hasFocus());
     qApp->processEvents();
@@ -733,10 +730,7 @@ void tst_QDeclarativeGridView::currentIndex()
     gridview->setFlow(QDeclarativeGridView::TopToBottom);
 
     qApp->setActiveWindow(canvas);
-#ifdef Q_WS_X11
-    // to be safe and avoid failing setFocus with window managers
-    qt_x11_wait_for_window_manager(canvas);
-#endif
+    QVERIFY(QTest::qWaitForWindowActive(canvas));
     QTRY_VERIFY(canvas->hasFocus());
     QTRY_VERIFY(canvas->scene()->hasFocus());
     qApp->processEvents();
@@ -783,10 +777,7 @@ void tst_QDeclarativeGridView::currentIndex()
     gridview->setLayoutDirection(Qt::RightToLeft);
 
     qApp->setActiveWindow(canvas);
-#ifdef Q_WS_X11
-    // to be safe and avoid failing setFocus with window managers
-    qt_x11_wait_for_window_manager(canvas);
-#endif
+    QVERIFY(QTest::qWaitForWindowActive(canvas));
     QTRY_VERIFY(canvas->hasFocus());
     QTRY_VERIFY(canvas->scene()->hasFocus());
     qApp->processEvents();
diff --git a/tests/auto/declarative/qdeclarativeitem/tst_qdeclarativeitem.cpp b/tests/auto/declarative/qdeclarativeitem/tst_qdeclarativeitem.cpp
index 6359ca8..66534df 100644
--- a/tests/auto/declarative/qdeclarativeitem/tst_qdeclarativeitem.cpp
+++ b/tests/auto/declarative/qdeclarativeitem/tst_qdeclarativeitem.cpp
@@ -957,8 +957,8 @@ void tst_QDeclarativeItem::mouseFocus()
     canvas->show();
     QVERIFY(canvas->rootObject());
     QApplication::setActiveWindow(canvas);
-    QTest::qWaitForWindowShown(canvas);
-    QTRY_COMPARE(QApplication::activeWindow(), static_cast<QWidget *>(canvas));
+    QVERIFY(QTest::qWaitForWindowActive(canvas));
+    QCOMPARE(QApplication::activeWindow(), static_cast<QWidget *>(canvas));
 
     QDeclarativeItem *item = findItem<QDeclarativeItem>(canvas->rootObject(), "declarativeItem");
     QVERIFY(item);
diff --git a/tests/auto/declarative/qdeclarativelistview/tst_qdeclarativelistview.cpp b/tests/auto/declarative/qdeclarativelistview/tst_qdeclarativelistview.cpp
index daecf50..bdf092e 100644
--- a/tests/auto/declarative/qdeclarativelistview/tst_qdeclarativelistview.cpp
+++ b/tests/auto/declarative/qdeclarativelistview/tst_qdeclarativelistview.cpp
@@ -1227,11 +1227,8 @@ void tst_QDeclarativeListView::currentIndex()
     // Test keys
     canvas->show();
     qApp->setActiveWindow(canvas);
-#ifdef Q_WS_X11
-    // to be safe and avoid failing setFocus with window managers
-    qt_x11_wait_for_window_manager(canvas);
-#endif
-    QTRY_VERIFY(canvas->hasFocus());
+    QVERIFY(QTest::qWaitForWindowActive(canvas));
+    QVERIFY(canvas->hasFocus());
     QTRY_VERIFY(canvas->scene()->hasFocus());
     qApp->processEvents();
 
diff --git a/tests/auto/declarative/qdeclarativepathview/tst_qdeclarativepathview.cpp b/tests/auto/declarative/qdeclarativepathview/tst_qdeclarativepathview.cpp
index e29462c..52ce97d 100644
--- a/tests/auto/declarative/qdeclarativepathview/tst_qdeclarativepathview.cpp
+++ b/tests/auto/declarative/qdeclarativepathview/tst_qdeclarativepathview.cpp
@@ -908,8 +908,8 @@ void tst_QDeclarativePathView::mouseDrag()
     canvas->setSource(QUrl::fromLocalFile(SRCDIR "/data/dragpath.qml"));
     canvas->show();
     QApplication::setActiveWindow(canvas);
-    QTest::qWaitForWindowShown(canvas);
-    QTRY_COMPARE(QApplication::activeWindow(), static_cast<QWidget *>(canvas));
+    QVERIFY(QTest::qWaitForWindowActive(canvas));
+    QCOMPARE(QApplication::activeWindow(), static_cast<QWidget *>(canvas));
 
     QDeclarativePathView *pathview = qobject_cast<QDeclarativePathView*>(canvas->rootObject());
     QVERIFY(pathview != 0);
@@ -968,8 +968,8 @@ void tst_QDeclarativePathView::changePreferredHighlight()
     canvas->setSource(QUrl::fromLocalFile(SRCDIR "/data/dragpath.qml"));
     canvas->show();
     QApplication::setActiveWindow(canvas);
-    QTest::qWaitForWindowShown(canvas);
-    QTRY_COMPARE(QApplication::activeWindow(), static_cast<QWidget *>(canvas));
+    QVERIFY(QTest::qWaitForWindowActive(canvas));
+    QCOMPARE(QApplication::activeWindow(), static_cast<QWidget *>(canvas));
 
     QDeclarativePathView *pathview = qobject_cast<QDeclarativePathView*>(canvas->rootObject());
     QVERIFY(pathview != 0);
diff --git a/tests/auto/declarative/qdeclarativepincharea/tst_qdeclarativepincharea.cpp b/tests/auto/declarative/qdeclarativepincharea/tst_qdeclarativepincharea.cpp
index df22648..b1c7de2 100644
--- a/tests/auto/declarative/qdeclarativepincharea/tst_qdeclarativepincharea.cpp
+++ b/tests/auto/declarative/qdeclarativepincharea/tst_qdeclarativepincharea.cpp
@@ -208,7 +208,7 @@ void tst_QDeclarativePinchArea::scale()
     canvas->setSource(QUrl::fromLocalFile(SRCDIR "/data/pinchproperties.qml"));
     canvas->show();
     canvas->setFocus();
-    QTest::qWaitForWindowShown(canvas);
+    QVERIFY(QTest::qWaitForWindowExposed(canvas));
     QVERIFY(canvas->rootObject() != 0);
     qApp->processEvents();
 
@@ -263,7 +263,7 @@ void tst_QDeclarativePinchArea::pan()
     canvas->setSource(QUrl::fromLocalFile(SRCDIR "/data/pinchproperties.qml"));
     canvas->show();
     canvas->setFocus();
-    QTest::qWaitForWindowShown(canvas);
+    QVERIFY(QTest::qWaitForWindowExposed(canvas));
     QVERIFY(canvas->rootObject() != 0);
     qApp->processEvents();
 
@@ -320,7 +320,7 @@ void tst_QDeclarativePinchArea::flickable()
     canvas->setSource(QUrl::fromLocalFile(SRCDIR "/data/flickresize.qml"));
     canvas->show();
     canvas->setFocus();
-    QTest::qWaitForWindowShown(canvas);
+    QVERIFY(QTest::qWaitForWindowExposed(canvas));
     QVERIFY(canvas->rootObject() != 0);
     qApp->processEvents();
 
diff --git a/tests/auto/declarative/qdeclarativetext/tst_qdeclarativetext.cpp b/tests/auto/declarative/qdeclarativetext/tst_qdeclarativetext.cpp
index 8320a03..e1ee214 100644
--- a/tests/auto/declarative/qdeclarativetext/tst_qdeclarativetext.cpp
+++ b/tests/auto/declarative/qdeclarativetext/tst_qdeclarativetext.cpp
@@ -456,8 +456,8 @@ void tst_qdeclarativetext::alignments()
 
     canvas->show();
     QApplication::setActiveWindow(canvas);
-    QTest::qWaitForWindowShown(canvas);
-    QTRY_COMPARE_WITH_TIMEOUT(QApplication::activeWindow(), static_cast<QWidget *>(canvas), 10000);
+    QVERIFY(QTest::qWaitForWindowActive(canvas, 10000));
+    QCOMPARE(QApplication::activeWindow(), static_cast<QWidget *>(canvas));
 
     QObject *ob = canvas->rootObject();
     QVERIFY(ob != 0);
@@ -1072,8 +1072,8 @@ void tst_qdeclarativetext::QTBUG_12291()
 
     canvas->show();
     QApplication::setActiveWindow(canvas);
-    QTest::qWaitForWindowShown(canvas);
-    QTRY_COMPARE(QApplication::activeWindow(), static_cast<QWidget *>(canvas));
+    QVERIFY(QTest::qWaitForWindowActive(canvas));
+    QCOMPARE(QApplication::activeWindow(), static_cast<QWidget *>(canvas));
 
     QObject *ob = canvas->rootObject();
     QVERIFY(ob != 0);
@@ -1327,8 +1327,8 @@ void tst_qdeclarativetext::qtbug_14734()
 
     canvas->show();
     QApplication::setActiveWindow(canvas);
-    QTest::qWaitForWindowShown(canvas);
-    QTRY_COMPARE(QApplication::activeWindow(), static_cast<QWidget *>(canvas));
+    QVERIFY(QTest::qWaitForWindowActive(canvas));
+    QCOMPARE(QApplication::activeWindow(), static_cast<QWidget *>(canvas));
 
     delete canvas;
 }
diff --git a/tests/auto/declarative/qdeclarativetextedit/tst_qdeclarativetextedit.cpp b/tests/auto/declarative/qdeclarativetextedit/tst_qdeclarativetextedit.cpp
index b67b710..1be84e5 100644
--- a/tests/auto/declarative/qdeclarativetextedit/tst_qdeclarativetextedit.cpp
+++ b/tests/auto/declarative/qdeclarativetextedit/tst_qdeclarativetextedit.cpp
@@ -410,8 +410,8 @@ void tst_qdeclarativetextedit::alignments()
 
     canvas->show();
     QApplication::setActiveWindow(canvas);
-    QTest::qWaitForWindowShown(canvas);
-    QTRY_COMPARE(QApplication::activeWindow(), static_cast<QWidget *>(canvas));
+    QVERIFY(QTest::qWaitForWindowActive(canvas));
+    QCOMPARE(QApplication::activeWindow(), static_cast<QWidget *>(canvas));
 
     QObject *ob = canvas->rootObject();
     QVERIFY(ob != 0);
@@ -554,8 +554,8 @@ void tst_qdeclarativetextedit::hAlign_RightToLeft()
     QVERIFY(textEdit->positionToRectangle(0).x() < canvas->width()/2);
 
     QApplication::setActiveWindow(canvas);
-    QTest::qWaitForWindowShown(canvas);
-    QTRY_COMPARE(QApplication::activeWindow(), static_cast<QWidget *>(canvas));
+    QVERIFY(QTest::qWaitForWindowActive(canvas));
+    QCOMPARE(QApplication::activeWindow(), static_cast<QWidget *>(canvas));
 
     textEdit->setText(QString());
     { QInputMethodEvent ev(rtlText, QList<QInputMethodEvent::Attribute>()); QApplication::sendEvent(canvas, &ev); }
@@ -964,8 +964,8 @@ void tst_qdeclarativetextedit::keySelection()
     QDeclarativeView *canvas = createView(SRCDIR "/data/navigation.qml");
     canvas->show();
     QApplication::setActiveWindow(canvas);
-    QTest::qWaitForWindowShown(canvas);
-    QTRY_COMPARE(QApplication::activeWindow(), static_cast<QWidget *>(canvas));
+    QVERIFY(QTest::qWaitForWindowActive(canvas));
+    QCOMPARE(QApplication::activeWindow(), static_cast<QWidget *>(canvas));
     canvas->setFocus();
 
     QVERIFY(canvas->rootObject() != 0);
@@ -1379,8 +1379,8 @@ void tst_qdeclarativetextedit::mouseSelection()
 
     canvas->show();
     QApplication::setActiveWindow(canvas);
-    QTest::qWaitForWindowShown(canvas);
-    QTRY_COMPARE(QApplication::activeWindow(), static_cast<QWidget *>(canvas));
+    QVERIFY(QTest::qWaitForWindowActive(canvas));
+    QCOMPARE(QApplication::activeWindow(), static_cast<QWidget *>(canvas));
 
     QVERIFY(canvas->rootObject() != 0);
     QDeclarativeTextEdit *textEditObject = qobject_cast<QDeclarativeTextEdit *>(canvas->rootObject());
@@ -1411,8 +1411,8 @@ void tst_qdeclarativetextedit::multilineMouseSelection()
 
     canvas->show();
     QApplication::setActiveWindow(canvas);
-    QTest::qWaitForWindowShown(canvas);
-    QTRY_COMPARE(QApplication::activeWindow(), static_cast<QWidget *>(canvas));
+    QVERIFY(QTest::qWaitForWindowActive(canvas));
+    QCOMPARE(QApplication::activeWindow(), static_cast<QWidget *>(canvas));
 
     QVERIFY(canvas->rootObject() != 0);
     QDeclarativeTextEdit *textEditObject = qobject_cast<QDeclarativeTextEdit *>(canvas->rootObject());
@@ -1457,8 +1457,8 @@ void tst_qdeclarativetextedit::deferEnableSelectByMouse()
 
     canvas->show();
     QApplication::setActiveWindow(canvas);
-    QTest::qWaitForWindowShown(canvas);
-    QTRY_COMPARE(QApplication::activeWindow(), static_cast<QWidget *>(canvas));
+    QVERIFY(QTest::qWaitForWindowActive(canvas));
+    QCOMPARE(QApplication::activeWindow(), static_cast<QWidget *>(canvas));
 
     QVERIFY(canvas->rootObject() != 0);
     QDeclarativeTextEdit *textEditObject = qobject_cast<QDeclarativeTextEdit *>(canvas->rootObject());
@@ -1497,8 +1497,8 @@ void tst_qdeclarativetextedit::deferDisableSelectByMouse()
 
     canvas->show();
     QApplication::setActiveWindow(canvas);
-    QTest::qWaitForWindowShown(canvas);
-    QTRY_COMPARE(QApplication::activeWindow(), static_cast<QWidget *>(canvas));
+    QVERIFY(QTest::qWaitForWindowActive(canvas));
+    QCOMPARE(QApplication::activeWindow(), static_cast<QWidget *>(canvas));
 
     QVERIFY(canvas->rootObject() != 0);
     QDeclarativeTextEdit *textEditObject = qobject_cast<QDeclarativeTextEdit *>(canvas->rootObject());
@@ -1528,8 +1528,8 @@ void tst_qdeclarativetextedit::dragMouseSelection()
 
     canvas->show();
     QApplication::setActiveWindow(canvas);
-    QTest::qWaitForWindowShown(canvas);
-    QTRY_COMPARE(QApplication::activeWindow(), static_cast<QWidget *>(canvas));
+    QVERIFY(QTest::qWaitForWindowActive(canvas));
+    QCOMPARE(QApplication::activeWindow(), static_cast<QWidget *>(canvas));
 
     QVERIFY(canvas->rootObject() != 0);
     QDeclarativeTextEdit *textEditObject = qobject_cast<QDeclarativeTextEdit *>(canvas->rootObject());
@@ -1589,8 +1589,8 @@ void tst_qdeclarativetextedit::mouseSelectionMode()
 
     canvas->show();
     QApplication::setActiveWindow(canvas);
-    QTest::qWaitForWindowShown(canvas);
-    QTRY_COMPARE(QApplication::activeWindow(), static_cast<QWidget *>(canvas));
+    QVERIFY(QTest::qWaitForWindowActive(canvas));
+    QCOMPARE(QApplication::activeWindow(), static_cast<QWidget *>(canvas));
 
     QVERIFY(canvas->rootObject() != 0);
     QDeclarativeTextEdit *textEditObject = qobject_cast<QDeclarativeTextEdit *>(canvas->rootObject());
@@ -1645,7 +1645,7 @@ void tst_qdeclarativetextedit::positionAt()
     canvas->show();
     canvas->setFocus();
     QApplication::setActiveWindow(canvas);
-    QTest::qWaitForWindowShown(canvas);
+    QVERIFY(QTest::qWaitForWindowActive(canvas));
 
     QDeclarativeTextEdit *texteditObject = qobject_cast<QDeclarativeTextEdit *>(canvas->rootObject());
     QVERIFY(texteditObject != 0);
@@ -1800,8 +1800,8 @@ void tst_qdeclarativetextedit::cursorVisible()
     QGraphicsView view(&scene);
     view.show();
     QApplication::setActiveWindow(&view);
-    QTest::qWaitForWindowShown(&view);
-    QTRY_COMPARE(QApplication::activeWindow(), static_cast<QWidget *>(&view));
+    QVERIFY(QTest::qWaitForWindowActive(&view));
+    QCOMPARE(QApplication::activeWindow(), static_cast<QWidget *>(&view));
     view.setFocus();
 
     QDeclarativeTextEdit edit;
@@ -2108,8 +2108,8 @@ void tst_qdeclarativetextedit::textInput()
     scene.addItem(&edit);
     view.show();
     QApplication::setActiveWindow(&view);
-    QTest::qWaitForWindowShown(&view);
-    QTRY_COMPARE(QApplication::activeWindow(), static_cast<QWidget *>(&view));
+    QVERIFY(QTest::qWaitForWindowActive(&view));
+    QCOMPARE(QApplication::activeWindow(), static_cast<QWidget *>(&view));
     edit.setFocus(true);
     QVERIFY(edit.hasActiveFocus() == true);
 
@@ -2138,8 +2138,8 @@ void tst_qdeclarativetextedit::openInputPanelOnClick()
     view.show();
     qApp->setAutoSipEnabled(true);
     QApplication::setActiveWindow(&view);
-    QTest::qWaitForWindowShown(&view);
-    QTRY_COMPARE(QApplication::activeWindow(), static_cast<QWidget *>(&view));
+    QVERIFY(QTest::qWaitForWindowActive(&view));
+    QCOMPARE(QApplication::activeWindow(), static_cast<QWidget *>(&view));
 
     QDeclarativeItemPrivate* pri = QDeclarativeItemPrivate::get(&edit);
     QDeclarativeTextEditPrivate *editPrivate = static_cast<QDeclarativeTextEditPrivate*>(pri);
@@ -2186,8 +2186,8 @@ void tst_qdeclarativetextedit::openInputPanelOnFocus()
     view.show();
     qApp->setAutoSipEnabled(true);
     QApplication::setActiveWindow(&view);
-    QTest::qWaitForWindowShown(&view);
-    QTRY_COMPARE(QApplication::activeWindow(), static_cast<QWidget *>(&view));
+    QVERIFY(QTest::qWaitForWindowActive(&view));
+    QCOMPARE(QApplication::activeWindow(), static_cast<QWidget *>(&view));
 
     QDeclarativeItemPrivate* pri = QDeclarativeItemPrivate::get(&edit);
     QDeclarativeTextEditPrivate *editPrivate = static_cast<QDeclarativeTextEditPrivate*>(pri);
@@ -2383,8 +2383,8 @@ void tst_qdeclarativetextedit::implicitSizePreedit()
     scene.addItem(textObject);
     view.show();
     QApplication::setActiveWindow(&view);
-    QTest::qWaitForWindowShown(&view);
-    QTRY_COMPARE(QApplication::activeWindow(), static_cast<QWidget *>(&view));
+    QVERIFY(QTest::qWaitForWindowActive(&view));
+    QCOMPARE(QApplication::activeWindow(), static_cast<QWidget *>(&view));
 
     QInputMethodEvent event(text, QList<QInputMethodEvent::Attribute>());
     QCoreApplication::sendEvent(&view, &event);
@@ -2461,8 +2461,8 @@ void tst_qdeclarativetextedit::preeditMicroFocus()
     scene.addItem(&edit);
     view.show();
     QApplication::setActiveWindow(&view);
-    QTest::qWaitForWindowShown(&view);
-    QTRY_COMPARE(QApplication::activeWindow(), static_cast<QWidget *>(&view));
+    QVERIFY(QTest::qWaitForWindowActive(&view));
+    QCOMPARE(QApplication::activeWindow(), static_cast<QWidget *>(&view));
 
     QSignalSpy cursorRectangleSpy(&edit, SIGNAL(cursorRectangleChanged()));
 
@@ -2528,8 +2528,8 @@ void tst_qdeclarativetextedit::inputContextMouseHandler()
     scene.addItem(&edit);
     view.show();
     QApplication::setActiveWindow(&view);
-    QTest::qWaitForWindowShown(&view);
-    QTRY_COMPARE(QApplication::activeWindow(), static_cast<QWidget *>(&view));
+    QVERIFY(QTest::qWaitForWindowActive(&view));
+    QCOMPARE(QApplication::activeWindow(), static_cast<QWidget *>(&view));
     view.setFocus();
 
     QFontMetricsF fm(edit.font());
@@ -2564,8 +2564,8 @@ void tst_qdeclarativetextedit::inputMethodComposing()
     scene.addItem(&edit);
     view.show();
     QApplication::setActiveWindow(&view);
-    QTest::qWaitForWindowShown(&view);
-    QTRY_COMPARE(QApplication::activeWindow(), static_cast<QWidget *>(&view));
+    QVERIFY(QTest::qWaitForWindowActive(&view));
+    QCOMPARE(QApplication::activeWindow(), static_cast<QWidget *>(&view));
 
     QSignalSpy spy(&edit, SIGNAL(inputMethodComposingChanged()));
 
@@ -2600,7 +2600,7 @@ void tst_qdeclarativetextedit::cursorRectangleSize()
     canvas->show();
     canvas->setFocus();
     QApplication::setActiveWindow(canvas);
-    QTest::qWaitForWindowShown(canvas);
+    QVERIFY(QTest::qWaitForWindowActive(canvas));
 
     QDeclarativeTextEdit *textEdit = qobject_cast<QDeclarativeTextEdit *>(canvas->rootObject());
     QVERIFY(textEdit != 0);
@@ -2620,7 +2620,7 @@ void tst_qdeclarativetextedit::deselect()
     canvas->show();
     canvas->setFocus();
     QApplication::setActiveWindow(canvas);
-    QTest::qWaitForWindowShown(canvas);
+    QVERIFY(QTest::qWaitForWindowActive(canvas));
 
     QDeclarativeTextEdit *textEdit = qobject_cast<QDeclarativeTextEdit *>(canvas->rootObject());
     QVERIFY(textEdit != 0);
diff --git a/tests/auto/declarative/qdeclarativetextinput/tst_qdeclarativetextinput.cpp b/tests/auto/declarative/qdeclarativetextinput/tst_qdeclarativetextinput.cpp
index cdeb606..e1132b6 100644
--- a/tests/auto/declarative/qdeclarativetextinput/tst_qdeclarativetextinput.cpp
+++ b/tests/auto/declarative/qdeclarativetextinput/tst_qdeclarativetextinput.cpp
@@ -958,8 +958,8 @@ void tst_qdeclarativetextinput::mouseSelection()
 
     canvas->show();
     QApplication::setActiveWindow(canvas);
-    QTest::qWaitForWindowShown(canvas);
-    QTRY_COMPARE(QApplication::activeWindow(), static_cast<QWidget *>(canvas));
+    QVERIFY(QTest::qWaitForWindowActive(canvas));
+    QCOMPARE(QApplication::activeWindow(), static_cast<QWidget *>(canvas));
 
     QVERIFY(canvas->rootObject() != 0);
     QDeclarativeTextInput *textInputObject = qobject_cast<QDeclarativeTextInput *>(canvas->rootObject());
@@ -1006,8 +1006,8 @@ void tst_qdeclarativetextinput::deferEnableSelectByMouse()
 
     canvas->show();
     QApplication::setActiveWindow(canvas);
-    QTest::qWaitForWindowShown(canvas);
-    QTRY_COMPARE(QApplication::activeWindow(), static_cast<QWidget *>(canvas));
+    QVERIFY(QTest::qWaitForWindowActive(canvas));
+    QCOMPARE(QApplication::activeWindow(), static_cast<QWidget *>(canvas));
 
     QVERIFY(canvas->rootObject() != 0);
     QDeclarativeTextInput *textInputObject = qobject_cast<QDeclarativeTextInput *>(canvas->rootObject());
@@ -1046,8 +1046,8 @@ void tst_qdeclarativetextinput::deferDisableSelectByMouse()
 
     canvas->show();
     QApplication::setActiveWindow(canvas);
-    QTest::qWaitForWindowShown(canvas);
-    QTRY_COMPARE(QApplication::activeWindow(), static_cast<QWidget *>(canvas));
+    QVERIFY(QTest::qWaitForWindowActive(canvas));
+    QCOMPARE(QApplication::activeWindow(), static_cast<QWidget *>(canvas));
 
     QVERIFY(canvas->rootObject() != 0);
     QDeclarativeTextInput *textInputObject = qobject_cast<QDeclarativeTextInput *>(canvas->rootObject());
@@ -1077,8 +1077,8 @@ void tst_qdeclarativetextinput::dragMouseSelection()
 
     canvas->show();
     QApplication::setActiveWindow(canvas);
-    QTest::qWaitForWindowShown(canvas);
-    QTRY_COMPARE(QApplication::activeWindow(), static_cast<QWidget *>(canvas));
+    QVERIFY(QTest::qWaitForWindowActive(canvas));
+    QCOMPARE(QApplication::activeWindow(), static_cast<QWidget *>(canvas));
 
     QVERIFY(canvas->rootObject() != 0);
     QDeclarativeTextInput *textInputObject = qobject_cast<QDeclarativeTextInput *>(canvas->rootObject());
@@ -1136,8 +1136,8 @@ void tst_qdeclarativetextinput::mouseSelectionMode()
 
     canvas->show();
     QApplication::setActiveWindow(canvas);
-    QTest::qWaitForWindowShown(canvas);
-    QTRY_COMPARE(QApplication::activeWindow(), static_cast<QWidget *>(canvas));
+    QVERIFY(QTest::qWaitForWindowActive(canvas));
+    QCOMPARE(QApplication::activeWindow(), static_cast<QWidget *>(canvas));
 
     QVERIFY(canvas->rootObject() != 0);
     QDeclarativeTextInput *textInputObject = qobject_cast<QDeclarativeTextInput *>(canvas->rootObject());
@@ -1182,8 +1182,8 @@ void tst_qdeclarativetextinput::horizontalAlignment()
 
     canvas->show();
     QApplication::setActiveWindow(canvas);
-    QTest::qWaitForWindowShown(canvas);
-    QTRY_COMPARE(QApplication::activeWindow(), static_cast<QWidget *>(canvas));
+    QVERIFY(QTest::qWaitForWindowActive(canvas));
+    QCOMPARE(QApplication::activeWindow(), static_cast<QWidget *>(canvas));
     QObject *ob = canvas->rootObject();
     QVERIFY(ob != 0);
     ob->setProperty("horizontalAlignment",hAlign);
@@ -1277,8 +1277,8 @@ void tst_qdeclarativetextinput::horizontalAlignment_RightToLeft()
     QVERIFY(-textInputPrivate->hscroll < canvas->width()/2);
 
     QApplication::setActiveWindow(canvas);
-    QTest::qWaitForWindowShown(canvas);
-    QTRY_COMPARE(QApplication::activeWindow(), static_cast<QWidget *>(canvas));
+    QVERIFY(QTest::qWaitForWindowActive(canvas));
+    QCOMPARE(QApplication::activeWindow(), static_cast<QWidget *>(canvas));
 
     // If there is no committed text, the preedit text should determine the alignment.
     textInput->setText(QString());
@@ -1325,7 +1325,7 @@ void tst_qdeclarativetextinput::positionAt()
     canvas->show();
     canvas->setFocus();
     QApplication::setActiveWindow(canvas);
-    QTest::qWaitForWindowShown(canvas);
+    QVERIFY(QTest::qWaitForWindowActive(canvas));
 
     QDeclarativeTextInput *textinputObject = qobject_cast<QDeclarativeTextInput *>(canvas->rootObject());
     QVERIFY(textinputObject != 0);
@@ -1383,7 +1383,7 @@ void tst_qdeclarativetextinput::maxLength()
     canvas->show();
     canvas->setFocus();
     QApplication::setActiveWindow(canvas);
-    QTest::qWaitForWindowShown(canvas);
+    QVERIFY(QTest::qWaitForWindowActive(canvas));
 
     QDeclarativeTextInput *textinputObject = qobject_cast<QDeclarativeTextInput *>(canvas->rootObject());
     QVERIFY(textinputObject != 0);
@@ -1531,7 +1531,7 @@ void tst_qdeclarativetextinput::inputMethods()
     canvas->show();
     canvas->setFocus();
     QApplication::setActiveWindow(canvas);
-    QTest::qWaitForWindowShown(canvas);
+    QVERIFY(QTest::qWaitForWindowActive(canvas));
 
     // test input method hints
     QVERIFY(canvas->rootObject() != 0);
@@ -1844,8 +1844,8 @@ void tst_qdeclarativetextinput::cursorVisible()
     QGraphicsView view(&scene);
     view.show();
     QApplication::setActiveWindow(&view);
-    QTest::qWaitForWindowShown(&view);
-    QTRY_COMPARE(QApplication::activeWindow(), static_cast<QWidget *>(&view));
+    QVERIFY(QTest::qWaitForWindowActive(&view));
+    QCOMPARE(QApplication::activeWindow(), static_cast<QWidget *>(&view));
 
     QDeclarativeTextInput input;
     QSignalSpy spy(&input, SIGNAL(cursorVisibleChanged(bool)));
@@ -1983,8 +1983,8 @@ void tst_qdeclarativetextinput::echoMode()
     canvas->show();
     canvas->setFocus();
     QApplication::setActiveWindow(canvas);
-    QTest::qWaitForWindowShown(canvas);
-    QTRY_COMPARE(QApplication::activeWindow(), static_cast<QWidget *>(canvas));
+    QVERIFY(QTest::qWaitForWindowActive(canvas));
+    QCOMPARE(QApplication::activeWindow(), static_cast<QWidget *>(canvas));
 
     QVERIFY(canvas->rootObject() != 0);
 
@@ -2094,8 +2094,8 @@ void tst_qdeclarativetextinput::passwordEchoDelay()
     canvas->show();
     canvas->setFocus();
     QApplication::setActiveWindow(canvas);
-    QTest::qWaitForWindowShown(canvas);
-    QTRY_COMPARE(QApplication::activeWindow(), static_cast<QWidget *>(canvas));
+    QVERIFY(QTest::qWaitForWindowActive(canvas));
+    QCOMPARE(QApplication::activeWindow(), static_cast<QWidget *>(canvas));
 
     QVERIFY(canvas->rootObject() != 0);
 
@@ -2175,8 +2175,8 @@ void tst_qdeclarativetextinput::openInputPanelOnClick()
     view.show();
     qApp->setAutoSipEnabled(true);
     QApplication::setActiveWindow(&view);
-    QTest::qWaitForWindowShown(&view);
-    QTRY_COMPARE(QApplication::activeWindow(), static_cast<QWidget *>(&view));
+    QVERIFY(QTest::qWaitForWindowActive(&view));
+    QCOMPARE(QApplication::activeWindow(), static_cast<QWidget *>(&view));
 
     QDeclarativeItemPrivate* pri = QDeclarativeItemPrivate::get(&input);
     QDeclarativeTextInputPrivate *inputPrivate = static_cast<QDeclarativeTextInputPrivate*>(pri);
@@ -2228,8 +2228,8 @@ void tst_qdeclarativetextinput::openInputPanelOnFocus()
     view.show();
     qApp->setAutoSipEnabled(true);
     QApplication::setActiveWindow(&view);
-    QTest::qWaitForWindowShown(&view);
-    QTRY_COMPARE(QApplication::activeWindow(), static_cast<QWidget *>(&view));
+    QVERIFY(QTest::qWaitForWindowActive(&view));
+    QCOMPARE(QApplication::activeWindow(), static_cast<QWidget *>(&view));
 
     QDeclarativeItemPrivate* pri = QDeclarativeItemPrivate::get(&input);
     QDeclarativeTextInputPrivate *inputPrivate = static_cast<QDeclarativeTextInputPrivate*>(pri);
@@ -2366,7 +2366,7 @@ void tst_qdeclarativetextinput::setHAlignClearCache()
     scene.addItem(&input);
     view.show();
     QApplication::setActiveWindow(&view);
-    QTest::qWaitForWindowShown(&view);
+    QVERIFY(QTest::qWaitForWindowActive(&view));
     QTRY_VERIFY(input.nbPaint >= 1);
     int paintEvents = input.nbPaint;
     input.setHAlign(QDeclarativeTextInput::AlignRight);
@@ -2387,7 +2387,7 @@ void tst_qdeclarativetextinput::focusOutClearSelection()
     scene.addItem(&input);
     view.show();
     QApplication::setActiveWindow(&view);
-    QTest::qWaitForWindowShown(&view);
+    QVERIFY(QTest::qWaitForWindowActive(&view));
     input.select(2,5);
     //The selection should work
     QTRY_COMPARE(input.selectedText(), QLatin1String("llo"));
@@ -2466,8 +2466,8 @@ void tst_qdeclarativetextinput::preeditAutoScroll()
     scene.addItem(&input);
     view.show();
     QApplication::setActiveWindow(&view);
-    QTest::qWaitForWindowShown(&view);
-    QTRY_COMPARE(QApplication::activeWindow(), static_cast<QWidget *>(&view));
+    QVERIFY(QTest::qWaitForWindowActive(&view));
+    QCOMPARE(QApplication::activeWindow(), static_cast<QWidget *>(&view));
 
     QSignalSpy cursorRectangleSpy(&input, SIGNAL(cursorRectangleChanged()));
     int cursorRectangleChanges = 0;
@@ -2570,8 +2570,8 @@ void tst_qdeclarativetextinput::preeditMicroFocus()
     scene.addItem(&input);
     view.show();
     QApplication::setActiveWindow(&view);
-    QTest::qWaitForWindowShown(&view);
-    QTRY_COMPARE(QApplication::activeWindow(), static_cast<QWidget *>(&view));
+    QVERIFY(QTest::qWaitForWindowActive(&view));
+    QCOMPARE(QApplication::activeWindow(), static_cast<QWidget *>(&view));
 
     QRect currentRect;
     QRect previousRect = input.inputMethodQuery(Qt::ImMicroFocus).toRect();
@@ -2628,8 +2628,8 @@ void tst_qdeclarativetextinput::inputContextMouseHandler()
     scene.addItem(&input);
     view.show();
     QApplication::setActiveWindow(&view);
-    QTest::qWaitForWindowShown(&view);
-    QTRY_COMPARE(QApplication::activeWindow(), static_cast<QWidget *>(&view));
+    QVERIFY(QTest::qWaitForWindowActive(&view));
+    QCOMPARE(QApplication::activeWindow(), static_cast<QWidget *>(&view));
 
     QFontMetricsF fm(input.font());
     const qreal y = fm.height() / 2;
@@ -2663,8 +2663,8 @@ void tst_qdeclarativetextinput::inputMethodComposing()
     scene.addItem(&input);
     view.show();
     QApplication::setActiveWindow(&view);
-    QTest::qWaitForWindowShown(&view);
-    QTRY_COMPARE(QApplication::activeWindow(), static_cast<QWidget *>(&view));
+    QVERIFY(QTest::qWaitForWindowActive(&view));
+    QCOMPARE(QApplication::activeWindow(), static_cast<QWidget *>(&view));
 
     QSignalSpy spy(&input, SIGNAL(inputMethodComposingChanged()));
 
@@ -2701,7 +2701,7 @@ void tst_qdeclarativetextinput::cursorRectangleSize()
     canvas->show();
     canvas->setFocus();
     QApplication::setActiveWindow(canvas);
-    QTest::qWaitForWindowShown(canvas);
+    QVERIFY(QTest::qWaitForWindowActive(canvas));
 
     QDeclarativeTextInput *textInput = qobject_cast<QDeclarativeTextInput *>(canvas->rootObject());
     QVERIFY(textInput != 0);
@@ -2721,7 +2721,7 @@ void tst_qdeclarativetextinput::deselect()
     canvas->show();
     canvas->setFocus();
     QApplication::setActiveWindow(canvas);
-    QTest::qWaitForWindowShown(canvas);
+    QVERIFY(QTest::qWaitForWindowActive(canvas));
 
     QDeclarativeTextInput *textInput = qobject_cast<QDeclarativeTextInput *>(canvas->rootObject());
     QVERIFY(textInput != 0);
diff --git a/tests/auto/declarative/qdeclarativeviewer/tst_qdeclarativeviewer.cpp b/tests/auto/declarative/qdeclarativeviewer/tst_qdeclarativeviewer.cpp
index 9fb07ee..35d2a24 100644
--- a/tests/auto/declarative/qdeclarativeviewer/tst_qdeclarativeviewer.cpp
+++ b/tests/auto/declarative/qdeclarativeviewer/tst_qdeclarativeviewer.cpp
@@ -113,8 +113,8 @@ void tst_QDeclarativeViewer::runtimeContextProperty()
     viewer->show();
     QApplication::setActiveWindow(viewer);
     //viewer->requestActivateWindow();
-    QTest::qWaitForWindowShown(viewer);
-    QTRY_COMPARE(QApplication::activeWindow(), static_cast<QWidget *>(viewer));
+    QVERIFY(QTest::qWaitForWindowActive(viewer));
+    QCOMPARE(QApplication::activeWindow(), static_cast<QWidget *>(viewer));
     //QTRY_VERIFY(viewer == qGuiApp->focusWindow());
 
     QVERIFY(runtimeObject->property("isActiveWindow").toBool());
@@ -178,8 +178,8 @@ void tst_QDeclarativeViewer::loading()
     viewer->show();
 
     QApplication::setActiveWindow(viewer);
-    QTest::qWaitForWindowShown(viewer);
-    QTRY_COMPARE(QApplication::activeWindow(), static_cast<QWidget *>(viewer));
+    QVERIFY(QTest::qWaitForWindowActive(viewer));
+    QCOMPARE(QApplication::activeWindow(), static_cast<QWidget *>(viewer));
 
     TEST_INITIAL_SIZES(viewer);
 
@@ -259,8 +259,8 @@ void tst_QDeclarativeViewer::fileBrowser()
     QVERIFY(numberOfWarnings == 0);
 
     QApplication::setActiveWindow(viewer);
-    QTest::qWaitForWindowShown(viewer);
-    QTRY_COMPARE(QApplication::activeWindow(), static_cast<QWidget *>(viewer));
+    QVERIFY(QTest::qWaitForWindowActive(viewer));
+    QCOMPARE(QApplication::activeWindow(), static_cast<QWidget *>(viewer));
 
     // Browser.qml successfully loaded
     QDeclarativeItem* browserItem = qobject_cast<QDeclarativeItem*>(viewer->view()->rootObject());
@@ -298,8 +298,8 @@ void tst_QDeclarativeViewer::resizing()
     viewer->show();
 
     QApplication::setActiveWindow(viewer);
-    QTest::qWaitForWindowShown(viewer);
-    QTRY_COMPARE(QApplication::activeWindow(), static_cast<QWidget *>(viewer));
+    QVERIFY(QTest::qWaitForWindowActive(viewer));
+    QCOMPARE(QApplication::activeWindow(), static_cast<QWidget *>(viewer));
 
     TEST_INITIAL_SIZES(viewer);