diff --git a/src/linguist/shared/qm.cpp b/src/linguist/shared/qm.cpp
index 789e053..566dd36 100644
--- a/src/linguist/shared/qm.cpp
+++ b/src/linguist/shared/qm.cpp
@@ -748,11 +748,11 @@ bool saveQM(const Translator &translator, QIODevice &dev, ConversionData &cd)
     if (missingIds)
         cd.appendError(QCoreApplication::translate("LRelease",
             "Dropped %n message(s) which had no ID.", 0,
-            QCoreApplication::CodecForTr, missingIds));
+            QCoreApplication::DefaultCodec, missingIds));
     if (droppedData)
         cd.appendError(QCoreApplication::translate("LRelease",
             "Excess context/disambiguation dropped from %n message(s).", 0,
-            QCoreApplication::CodecForTr, droppedData));
+            QCoreApplication::DefaultCodec, droppedData));
 
     releaser.squeeze(cd.m_saveMode);
     bool saved = releaser.save(&dev);
@@ -760,11 +760,11 @@ bool saveQM(const Translator &translator, QIODevice &dev, ConversionData &cd)
         int generatedCount = finished + unfinished;
         cd.appendError(QCoreApplication::translate("LRelease",
             "    Generated %n translation(s) (%1 finished and %2 unfinished)", 0,
-            QCoreApplication::CodecForTr, generatedCount).arg(finished).arg(unfinished));
+            QCoreApplication::DefaultCodec, generatedCount).arg(finished).arg(unfinished));
         if (untranslated)
             cd.appendError(QCoreApplication::translate("LRelease",
                 "    Ignored %n untranslated source text(s)", 0,
-                QCoreApplication::CodecForTr, untranslated));
+                QCoreApplication::DefaultCodec, untranslated));
     }
     return saved;
 }
diff --git a/src/linguist/shared/translator.h b/src/linguist/shared/translator.h
index 8310dfd..5721500 100644
--- a/src/linguist/shared/translator.h
+++ b/src/linguist/shared/translator.h
@@ -61,9 +61,9 @@ public:
 };
 class QCoreApplication : public QObject {
 public:
-    enum Encoding { CodecForTr };
+    enum Encoding { UnicodeUTF8, Latin1, DefaultCodec = Latin1 };
     static QString translate(const char *, const char *sourceText, const char * = 0,
-                             Encoding = CodecForTr, int n = -1)
+                             Encoding = DefaultCodec, int n = -1)
         { return tr(sourceText, 0, n); }
 };
 #endif