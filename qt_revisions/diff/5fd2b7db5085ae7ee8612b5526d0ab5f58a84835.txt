diff --git a/components/ApplicationWindow.qml b/components/ApplicationWindow.qml
deleted file mode 100644
index 365798c..0000000
--- a/components/ApplicationWindow.qml
+++ /dev/null
@@ -1,81 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** All rights reserved.
-** Contact: Nokia Corporation (qt-info@nokia.com)
-**
-** This file is part of the Qt Components project.
-**
-** $QT_BEGIN_LICENSE:BSD$
-** You may use this file under the terms of the BSD license as follows:
-**
-** "Redistribution and use in source and binary forms, with or without
-** modification, are permitted provided that the following conditions are
-** met:
-**   * Redistributions of source code must retain the above copyright
-**     notice, this list of conditions and the following disclaimer.
-**   * Redistributions in binary form must reproduce the above copyright
-**     notice, this list of conditions and the following disclaimer in
-**     the documentation and/or other materials provided with the
-**     distribution.
-**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
-**     the names of its contributors may be used to endorse or promote
-**     products derived from this software without specific prior written
-**     permission.
-**
-** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-import QtQuick 1.1
-
-Window {
-    width: 320
-    height: 240
-
-    property alias toolBar: toolBarArea.data
-    property alias statusBar: statusBarArea.data
-    default property alias data: contentArea.data
-
-    SystemPalette {id: syspal}
-
-
-    Rectangle {
-        anchors.fill: parent
-        color: syspal.button
-    }
-
-
-    Column {
-        id: toolBarArea
-        anchors.top: parent.top
-        anchors.left: parent.left
-        anchors.right: parent.right
-    }
-
-    Item {
-        id: contentArea
-        anchors.top: toolBarArea.bottom
-        anchors.left: parent.left
-        anchors.right: parent.right
-        anchors.bottom: statusBarArea.top
-    }
-
-    Column {
-        id: statusBarArea
-        anchors.bottom: parent.bottom
-        anchors.left: parent.left
-        anchors.right: parent.right
-    }
-}
diff --git a/components/Button.qml b/components/Button.qml
deleted file mode 100644
index 4978e0b..0000000
--- a/components/Button.qml
+++ /dev/null
@@ -1,100 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** All rights reserved.
-** Contact: Nokia Corporation (qt-info@nokia.com)
-**
-** This file is part of the Qt Components project.
-**
-** $QT_BEGIN_LICENSE:BSD$
-** You may use this file under the terms of the BSD license as follows:
-**
-** "Redistribution and use in source and binary forms, with or without
-** modification, are permitted provided that the following conditions are
-** met:
-**   * Redistributions of source code must retain the above copyright
-**     notice, this list of conditions and the following disclaimer.
-**   * Redistributions in binary form must reproduce the above copyright
-**     notice, this list of conditions and the following disclaimer in
-**     the documentation and/or other materials provided with the
-**     distribution.
-**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
-**     the names of its contributors may be used to endorse or promote
-**     products derived from this software without specific prior written
-**     permission.
-**
-** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-import QtQuick 1.1
-import "custom" as Components
-
-Components.Button {
-    id: button
-
-    implicitWidth: Math.max(72, backgroundItem.implicitWidth)
-    implicitHeight: Math.max(22, backgroundItem.implicitHeight)
-
-    property alias containsMouse: tooltip.containsMouse
-    property bool defaultbutton: false
-    property string styleHint
-
-    TooltipArea {
-        // Note this will eat hover events
-        id: tooltip
-        anchors.fill: parent
-        text: button.tooltip
-    }
-
-    background: StyleItem {
-        id: styleitem
-        anchors.fill: parent
-        elementType: "button"
-        sunken: pressed || checked
-        raised: !(pressed || checked)
-        hover: containsMouse
-        text: iconSource === "" ? "" : button.text
-        hasFocus: button.focus
-        hint: button.styleHint
-
-        // If no icon, let the style do the drawing
-        activeControl: defaultbutton ? "default" : "f"
-    }
-
-    label: Item {
-        // Used as a fallback since I can't pass the imageURL
-        // directly to the style object
-        visible: button.iconSource === ""
-        Row {
-            id: row
-            anchors.centerIn: parent
-            spacing: 4
-            Image {
-                source: iconSource
-                anchors.verticalCenter: parent.verticalCenter
-                fillMode: Image.Stretch //mm Image should shrink if button is too small, depends on QTBUG-14957
-            }
-            Text {
-                id:text
-                color: textColor
-                anchors.verticalCenter: parent.verticalCenter
-                text: button.text
-                horizontalAlignment: Text.Center
-            }
-        }
-    }
-    Keys.onSpacePressed:animateClick()
-}
-
diff --git a/components/ButtonColumn.qml b/components/ButtonColumn.qml
deleted file mode 100644
index 3e27f9a..0000000
--- a/components/ButtonColumn.qml
+++ /dev/null
@@ -1,45 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** All rights reserved.
-** Contact: Nokia Corporation (qt-info@nokia.com)
-**
-** This file is part of the Qt Components project.
-**
-** $QT_BEGIN_LICENSE:BSD$
-** You may use this file under the terms of the BSD license as follows:
-**
-** "Redistribution and use in source and binary forms, with or without
-** modification, are permitted provided that the following conditions are
-** met:
-**   * Redistributions of source code must retain the above copyright
-**     notice, this list of conditions and the following disclaimer.
-**   * Redistributions in binary form must reproduce the above copyright
-**     notice, this list of conditions and the following disclaimer in
-**     the documentation and/or other materials provided with the
-**     distribution.
-**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
-**     the names of its contributors may be used to endorse or promote
-**     products derived from this software without specific prior written
-**     permission.
-**
-** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-import QtQuick 1.1
-import "custom" as Components
-
-Components.ButtonColumn {
-}
diff --git a/components/ButtonRow.qml b/components/ButtonRow.qml
deleted file mode 100644
index bba9603..0000000
--- a/components/ButtonRow.qml
+++ /dev/null
@@ -1,45 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** All rights reserved.
-** Contact: Nokia Corporation (qt-info@nokia.com)
-**
-** This file is part of the Qt Components project.
-**
-** $QT_BEGIN_LICENSE:BSD$
-** You may use this file under the terms of the BSD license as follows:
-**
-** "Redistribution and use in source and binary forms, with or without
-** modification, are permitted provided that the following conditions are
-** met:
-**   * Redistributions of source code must retain the above copyright
-**     notice, this list of conditions and the following disclaimer.
-**   * Redistributions in binary form must reproduce the above copyright
-**     notice, this list of conditions and the following disclaimer in
-**     the documentation and/or other materials provided with the
-**     distribution.
-**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
-**     the names of its contributors may be used to endorse or promote
-**     products derived from this software without specific prior written
-**     permission.
-**
-** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-import QtQuick 1.1
-import "custom" as Components
-
-Components.ButtonRow {
-}
diff --git a/components/CheckBox.qml b/components/CheckBox.qml
deleted file mode 100644
index baaa395..0000000
--- a/components/CheckBox.qml
+++ /dev/null
@@ -1,76 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** All rights reserved.
-** Contact: Nokia Corporation (qt-info@nokia.com)
-**
-** This file is part of the Qt Components project.
-**
-** $QT_BEGIN_LICENSE:BSD$
-** You may use this file under the terms of the BSD license as follows:
-**
-** "Redistribution and use in source and binary forms, with or without
-** modification, are permitted provided that the following conditions are
-** met:
-**   * Redistributions of source code must retain the above copyright
-**     notice, this list of conditions and the following disclaimer.
-**   * Redistributions in binary form must reproduce the above copyright
-**     notice, this list of conditions and the following disclaimer in
-**     the documentation and/or other materials provided with the
-**     distribution.
-**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
-**     the names of its contributors may be used to endorse or promote
-**     products derived from this software without specific prior written
-**     permission.
-**
-** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-import QtQuick 1.1
-import "custom" as Components
-
-// jb : Size should not depend on background, we should make it consistent
-
-Components.CheckBox {
-    id: checkbox
-    property string text
-    property string styleHint
-
-    implicitWidth: Math.max(120, backgroundItem.implicitWidth)
-    implicitHeight: backgroundItem.implicitHeight
-
-    background: StyleItem {
-        elementType: "checkbox"
-        sunken: pressed
-        on: checked || pressed
-        hover: containsMouse
-        enabled: checkbox.enabled
-        hasFocus: checkbox.activeFocus
-        hint: checkbox.styleHint
-        contentHeight: textitem.implicitHeight
-        contentWidth: textitem.implicitWidth + indicatorWidth
-        property int indicatorWidth: pixelMetric("indicatorwidth") + 2
-        Text {
-            id: textitem
-            text: checkbox.text
-            anchors.left: parent.left
-            anchors.leftMargin: parent.indicatorWidth
-            anchors.verticalCenter: parent.verticalCenter
-            anchors.right: parent.right
-            elide: Text.ElideRight
-        }
-    }
-}
-
diff --git a/components/ComboBox.qml b/components/ComboBox.qml
deleted file mode 100644
index d3f42c1..0000000
--- a/components/ComboBox.qml
+++ /dev/null
@@ -1,147 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** All rights reserved.
-** Contact: Nokia Corporation (qt-info@nokia.com)
-**
-** This file is part of the Qt Components project.
-**
-** $QT_BEGIN_LICENSE:BSD$
-** You may use this file under the terms of the BSD license as follows:
-**
-** "Redistribution and use in source and binary forms, with or without
-** modification, are permitted provided that the following conditions are
-** met:
-**   * Redistributions of source code must retain the above copyright
-**     notice, this list of conditions and the following disclaimer.
-**   * Redistributions in binary form must reproduce the above copyright
-**     notice, this list of conditions and the following disclaimer in
-**     the documentation and/or other materials provided with the
-**     distribution.
-**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
-**     the names of its contributors may be used to endorse or promote
-**     products derived from this software without specific prior written
-**     permission.
-**
-** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-import QtQuick 1.1
-import "custom" as Custom
-
-/*
-*
-* ComboBox (inherits BasicButton)
-*
-* The ComboBox component is a combined button and popup list. The popup menu itself is platform
-* native, and cannot by styled from QML code.
-* Add menu items to the comboBox by either adding MenuItem children inside the popup, or
-* assign it a ListModel (or both).
-*
-* The ComboBox contains the following API (in addition to the BasicButton API):
-*
-* ListModel model - this model will be used, in addition to MenuItem children, to
-*   create items inside the popup menu
-* bool popupOpen - setting this property to 'true' will open the popup.
-* int selectedIndex - the index of the selected item in the popup menu.
-* int hoveredIndex - the index of the highlighted item in the popup menu.
-* string selectedText - the text of the selected menu item.
-* string hoveredText - the text of the highlighted menu item.
-*
-* Example 1:
-*
-*    ListModel {
-*        id: menuItems
-*        ListElement { text: "Banana"; color: "Yellow" }
-*        ListElement { text: "Apple"; color: "Green" }
-*        ListElement { text: "Coconut"; color: "Brown" }
-*    }
-*    ComboBox {
-*        model: menuItems
-*        width: 200
-*        onSelectedIndexChanged: console.debug(selectedText + ", " + menuItems.get(selectedIndex).color)
-*    }
-*
-* Example 2:
-*
-*    ComboBox {
-*        width: 200
-*        MenuItem {
-*            text: "Pineapple"
-*            onTriggered: console.debug(text)
-*
-*        }
-*        MenuItem {
-*            text: "Grape"
-*            onTriggered: console.debug(text)
-*        }
-*    }
-*
-*/
-
-Custom.BasicButton {
-    id: comboBox
-
-    default property alias menuItems: popup.menuItems
-    property alias model: popup.model
-    property alias popupOpen: popup.visible
-
-    property alias selectedIndex: popup.selectedIndex
-    property alias hoveredIndex: popup.hoveredIndex
-    property alias selectedText: popup.selectedText
-    property alias hoveredText: popup.hoveredText
-    property string styleHint
-
-    background: StyleItem {
-        anchors.fill: parent
-        elementType: "combobox"
-        sunken: comboBox.pressed
-        raised: !sunken
-        hover: comboBox.containsMouse
-        enabled: comboBox.enabled
-        text: comboBox.selectedText
-        hasFocus: comboBox.focus
-        contentHeight: 18
-    }
-
-//  ToDo: adjust margins so that selected popup label
-//    centers directly above button label when
-//    popup.centerOnSelectedText === true
-
-
-    width: implicitWidth
-    height: implicitHeight
-
-    implicitWidth: Math.max(80, backgroundItem.implicitWidth)
-    implicitHeight: backgroundItem.implicitHeight
-
-    onWidthChanged: popup.setMinimumWidth(width)
-    checkable: false
-
-    onPressedChanged: if (pressed) popup.visible = true
-
-    ContextMenu {
-        id: popup
-        property bool center: backgroundItem.styleHint("comboboxpopup")
-        centerSelectedText: center
-        y: center ? 0 : comboBox.height
-    }
-
-    // The key bindings below will only be in use when popup is
-    // not visible. Otherwise, native popup key handling will take place:
-    Keys.onSpacePressed: { comboBox.popupOpen = !comboBox.popupOpen }
-    Keys.onUpPressed: { if (selectedIndex < model.count - 1) selectedIndex++ }
-    Keys.onDownPressed: { if (selectedIndex > 0) selectedIndex-- }
-}
diff --git a/components/ContextMenu.qml b/components/ContextMenu.qml
deleted file mode 100644
index 2433c52..0000000
--- a/components/ContextMenu.qml
+++ /dev/null
@@ -1,126 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** All rights reserved.
-** Contact: Nokia Corporation (qt-info@nokia.com)
-**
-** This file is part of the Qt Components project.
-**
-** $QT_BEGIN_LICENSE:BSD$
-** You may use this file under the terms of the BSD license as follows:
-**
-** "Redistribution and use in source and binary forms, with or without
-** modification, are permitted provided that the following conditions are
-** met:
-**   * Redistributions of source code must retain the above copyright
-**     notice, this list of conditions and the following disclaimer.
-**   * Redistributions in binary form must reproduce the above copyright
-**     notice, this list of conditions and the following disclaimer in
-**     the documentation and/or other materials provided with the
-**     distribution.
-**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
-**     the names of its contributors may be used to endorse or promote
-**     products derived from this software without specific prior written
-**     permission.
-**
-** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-import QtQuick 1.1
-
-Menu {
-    id: root
-    property string selectedText: itemTextAt(selectedIndex)
-    property string hoveredText: itemTextAt(hoveredIndex)
-    property int x
-    property int y
-    property bool visible
-    property string textRole
-
-    // 'centerSelectedText' means that the menu will be positioned
-    //  so that the selected text' top left corner will be at x, y.
-    property bool centerSelectedText: true
-
-    visible: false
-    onMenuClosed: visible = false
-    onModelChanged: if (Component.status === Component.Ready && model != undefined) rebuildMenu()
-
-    Component.onCompleted: if (model !== undefined) rebuildMenu()
-
-    onHoveredIndexChanged: {
-        if (hoveredIndex < menuItems.length)
-            menuItems[hoveredIndex].hovered()
-    }
-
-    onSelectedIndexChanged: {
-        if (hoveredIndex < menuItems.length)
-            menuItems[hoveredIndex].selected()
-    }
-
-    onVisibleChanged: {
-        if (visible) {
-            var globalPos = mapToItem(null, x, y)
-            showPopup(globalPos.x, globalPos.y, centerSelectedText ? selectedIndex : 0)
-        } else {
-            hidePopup()
-        }
-    }
-
-    function rebuildMenu()
-    {
-        clearMenuItems();
-
-        for (var i=0; i<menuItems.length; ++i)
-            addMenuItem(menuItems[i].text)
-
-        var nativeModel = root.hasNativeModel()
-
-        if (model !== undefined) {
-            var modelCount = nativeModel ? root.modelCount() : model.count;
-            for (var j = 0 ; j < modelCount; ++j) {
-                var textValue
-                if (nativeModel) {
-                    textValue = root.modelTextAt(j);
-                } else {
-                    if (textRole !== "")
-                        textValue = model.get(j)[textRole]
-                    else if (model.count > 0 && root.model.get && root.model.get(0)) {
-                        // ListModel with one role
-                        var listElement = root.model.get(0)
-                        var oneRole = true
-                        var roleName = ""
-                        var roleCount = 0
-                        for (var role in listElement) {
-                            if (!roleName || role === "text")
-                                roleName = role
-                            ++roleCount
-                        }
-                        if (roleCount > 1 && roleName !== "text") {
-                            oneRole = false
-                            console.log("Warning: No textRole set for ComboBox.")
-                            break
-                        }
-
-                        if (oneRole) {
-                            root.textRole = roleName
-                            textValue = root.model.get(j)[textRole]
-                        }
-                    }
-                }
-                addMenuItem(textValue)
-            }
-        }
-    }
-}
diff --git a/components/Dial.qml b/components/Dial.qml
deleted file mode 100644
index 6364520..0000000
--- a/components/Dial.qml
+++ /dev/null
@@ -1,158 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** All rights reserved.
-** Contact: Nokia Corporation (qt-info@nokia.com)
-**
-** This file is part of the Qt Components project.
-**
-** $QT_BEGIN_LICENSE:BSD$
-** You may use this file under the terms of the BSD license as follows:
-**
-** "Redistribution and use in source and binary forms, with or without
-** modification, are permitted provided that the following conditions are
-** met:
-**   * Redistributions of source code must retain the above copyright
-**     notice, this list of conditions and the following disclaimer.
-**   * Redistributions in binary form must reproduce the above copyright
-**     notice, this list of conditions and the following disclaimer in
-**     the documentation and/or other materials provided with the
-**     distribution.
-**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
-**     the names of its contributors may be used to endorse or promote
-**     products derived from this software without specific prior written
-**     permission.
-**
-** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-import QtQuick 1.1
-import "custom" as Components
-
-// jens: ContainsMouse breaks drag functionality
-
-Item {
-    id: dial
-
-    width: 100
-    height: 100
-
-    property alias maximumValue: range.maximumValue
-    property alias minimumValue: range.minimumValue
-    property alias containsMouse: mouseArea.containsMouse
-    property alias value: range.value
-    property alias stepSize: range.stepSize
-
-    property bool wrapping: false
-    property bool tickmarksEnabled: false
-    property bool activeFocusOnPress: false
-
-    RangeModel {
-        id: range
-        minimumValue: 0.0
-        maximumValue: 1.0
-        stepSize: 0.0
-        value: 0
-    }
-
-    MouseArea {
-        id: mouseArea
-        anchors.fill:parent
-        property bool inDrag
-        hoverEnabled:true
-
-        onPositionChanged: {
-            if (pressed) {
-                value = valueFromPoint(mouseX, mouseY)
-                inDrag = true
-            }
-        }
-        onPressed: {
-            value = valueFromPoint(mouseX, mouseY)
-             if (activeFocusOnPress) dial.focus = true
-        }
-
-        onReleased:inDrag = false;
-        function bound(val) { return Math.max(minimumValue, Math.min(maximumValue, val)); }
-
-        function valueFromPoint(x, y)
-        {
-            var yy = height/2.0 - y;
-            var xx = x - width/2.0;
-            var a = (xx || yy) ? Math.atan2(yy, xx) : 0;
-
-            if (a < Math.PI/ -2)
-                a = a + Math.PI * 2;
-
-            var dist = 0;
-            var minv = minimumValue*100, maxv = maximumValue*100;
-
-            if (minimumValue < 0) {
-                dist = -minimumValue;
-                minv = 0;
-                maxv = maximumValue + dist;
-            }
-
-            var r = maxv - minv;
-            var v;
-            if (wrapping)
-                v =  (0.5 + minv + r * (Math.PI * 3 / 2 - a) / (2 * Math.PI));
-            else
-                v =  (0.5 + minv + r* (Math.PI * 4 / 3 - a) / (Math.PI * 10 / 6));
-
-            if (dist > 0)
-                v -= dist;
-            return maximumValue - bound(v/100)
-        }
-    }
-    StyleItem {
-        anchors.fill: parent
-        elementType: "dial"
-        hasFocus: dial.focus
-        sunken: mouseArea.pressed
-        maximum: range.maximumValue * 100
-        minimum: range.minimumValue * 100
-        value: visualPos * 100
-        enabled: dial.enabled
-        step: range.stepSize * 100
-        activeControl: tickmarksEnabled ? "tick" : ""
-        property double visualPos : range.value
-
-        Behavior on visualPos {
-            enabled: !mouseArea.inDrag
-            NumberAnimation {
-                duration: 300
-                easing.type: Easing.OutSine
-            }
-        }
-    }
-    WheelArea {
-        id: wheelarea
-        anchors.fill: parent
-        horizontalMinimumValue: dial.minimumValue
-        horizontalMaximumValue: dial.maximumValue
-        verticalMinimumValue: dial.minimumValue
-        verticalMaximumValue: dial.maximumValue
-        property double step: (dial.maximumValue - dial.minimumValue)/100
-
-        onVerticalWheelMoved: {
-            value += verticalDelta/4*step
-        }
-
-        onHorizontalWheelMoved: {
-            value += horizontalDelta/4*step
-        }
-    }
-}
diff --git a/components/Dialog.qml b/components/Dialog.qml
deleted file mode 100644
index 6aa1932..0000000
--- a/components/Dialog.qml
+++ /dev/null
@@ -1,163 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** All rights reserved.
-** Contact: Nokia Corporation (qt-info@nokia.com)
-**
-** This file is part of the Qt Components project.
-**
-** $QT_BEGIN_LICENSE:BSD$
-** You may use this file under the terms of the BSD license as follows:
-**
-** "Redistribution and use in source and binary forms, with or without
-** modification, are permitted provided that the following conditions are
-** met:
-**   * Redistributions of source code must retain the above copyright
-**     notice, this list of conditions and the following disclaimer.
-**   * Redistributions in binary form must reproduce the above copyright
-**     notice, this list of conditions and the following disclaimer in
-**     the documentation and/or other materials provided with the
-**     distribution.
-**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
-**     the names of its contributors may be used to endorse or promote
-**     products derived from this software without specific prior written
-**     permission.
-**
-** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-import QtQuick 1.1
-
-Window {
-    id: dialog
-
-    width: 400
-    height: 200
-
-    signal closed
-    signal accepted
-    signal rejected
-    signal buttonClicked
-
-    property QtObject clickedButton: null
-
-    property int noRole: 0
-    property int acceptRole: 1
-    property int rejectRole: 2
-    property int helpRole: 3
-
-    property int ok: 0x00000400
-    property int cancel: 0x00400000
-    property int close: 0x00200000
-    property int help: 0x02000000
-
-    property int buttons: ok | cancel
-
-    modal: false
-
-    default property alias data: content.data
-
-    Item {
-        id: content
-        anchors.topMargin:16
-        anchors.margins: 16
-        anchors.top: parent.top
-        anchors.right: parent.right
-        anchors.left: parent.left
-        anchors.bottom: buttonrow.top
-    }
-
-    // Dialogs should center on parent
-    onVisibleChanged: center()
-
-    Row {
-        property bool mac: (style.style == "mac")
-        anchors.bottom: parent.bottom
-        anchors.left: parent.left
-        anchors.margins: 16
-        anchors.topMargin:0
-        anchors.bottomMargin: style.isMac ? 12 : 8
-        spacing: 6
-
-        Button {
-            id: helpbutton
-            property int role: helpRole
-            visible: buttons & help
-            text: "Help"
-            focus: false
-            Component.onCompleted: if (style.isMac) width = 22
-            background: style.isMac ? machelpdelegate : cancelbutton.background
-            onClicked: {
-                clickedButton = helpbutton
-                buttonClicked()
-            }
-            Component {
-                id: machelpdelegate
-                StyleItem {
-                    anchors.fill: parent
-                    elementType: "machelpbutton"
-                    width: 22
-                    height: 22
-                    sunken: helpbutton.pressed
-                    anchors.centerIn: parent
-                }
-            }
-        }
-    }
-    Row {
-        id: buttonrow
-        spacing: 6
-        anchors.right: parent.right
-        anchors.bottom: parent.bottom
-        anchors.margins: 16
-        anchors.topMargin: 0
-        anchors.bottomMargin: 8
-        layoutDirection: style.isMac ? Qt.LeftToRight : Qt.RightToLeft
-
-        Button {
-            id: cancelbutton
-            visible: buttons & cancel
-            property int role: rejectRole
-            text: "Cancel"
-            onClicked: {
-                visible: dialog.visible = false
-                clickedButton = cancelbutton
-                rejected()
-                closed()
-                buttonClicked(role)
-            }
-        }
-        Button {
-            id: okbutton
-            property int role: acceptRole
-            visible: buttons & ok
-            text: "OK"
-            defaultbutton: true
-            onClicked: {
-                visible: dialog.visible = false
-                clickedButton = okbutton
-                accepted()
-                closed()
-                buttonClicked()
-            }
-        }
-    }
-    StyleItem {
-        id: style
-        visible: false
-        property bool isMac: (style.style == "mac")
-
-    }
-}
diff --git a/components/Frame.qml b/components/Frame.qml
deleted file mode 100644
index 1a67931..0000000
--- a/components/Frame.qml
+++ /dev/null
@@ -1,62 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** All rights reserved.
-** Contact: Nokia Corporation (qt-info@nokia.com)
-**
-** This file is part of the Qt Components project.
-**
-** $QT_BEGIN_LICENSE:BSD$
-** You may use this file under the terms of the BSD license as follows:
-**
-** "Redistribution and use in source and binary forms, with or without
-** modification, are permitted provided that the following conditions are
-** met:
-**   * Redistributions of source code must retain the above copyright
-**     notice, this list of conditions and the following disclaimer.
-**   * Redistributions in binary form must reproduce the above copyright
-**     notice, this list of conditions and the following disclaimer in
-**     the documentation and/or other materials provided with the
-**     distribution.
-**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
-**     the names of its contributors may be used to endorse or promote
-**     products derived from this software without specific prior written
-**     permission.
-**
-** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-import QtQuick 1.1
-import "custom" as Components
-Item {
-    default property alias data: content.data
-    implicitWidth: adjustToContentSize ? content.childrenRect.width + 2 * content.frameWidth : 30
-    implicitHeight: adjustToContentSize ? content.childrenRect.height + 2 * content.frameWidth : 30
-    property alias raised: style.raised
-    property alias sunken: style.sunken
-    property bool adjustToContentSize: false
-    StyleItem {
-        id: style
-        anchors.fill: parent
-        elementType: "frame"
-        Item {
-            id: content
-            anchors.fill: parent
-            anchors.margins: frameWidth
-            property int frameWidth: styleitem.pixelMetric("defaultframewidth");
-        }
-    }
-}
-
diff --git a/components/GroupBox.qml b/components/GroupBox.qml
deleted file mode 100644
index 862d4e3..0000000
--- a/components/GroupBox.qml
+++ /dev/null
@@ -1,61 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** All rights reserved.
-** Contact: Nokia Corporation (qt-info@nokia.com)
-**
-** This file is part of the Qt Components project.
-**
-** $QT_BEGIN_LICENSE:BSD$
-** You may use this file under the terms of the BSD license as follows:
-**
-** "Redistribution and use in source and binary forms, with or without
-** modification, are permitted provided that the following conditions are
-** met:
-**   * Redistributions of source code must retain the above copyright
-**     notice, this list of conditions and the following disclaimer.
-**   * Redistributions in binary form must reproduce the above copyright
-**     notice, this list of conditions and the following disclaimer in
-**     the documentation and/or other materials provided with the
-**     distribution.
-**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
-**     the names of its contributors may be used to endorse or promote
-**     products derived from this software without specific prior written
-**     permission.
-**
-** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-import QtQuick 1.1
-import "custom" as Components
-
-Components.GroupBox {
-    id: groupbox
-    implicitWidth: Math.max(200, contentWidth + backgroundItem.implicitWidth)
-    implicitHeight: contentHeight + backgroundItem.implicitHeight + 4
-    property bool flat: false
-    background : StyleItem {
-        id: styleitem
-        elementType: "groupbox"
-        anchors.fill: parent
-        text: groupbox.title
-        hover: checkbox.containsMouse
-        on: checkbox.checked
-        hasFocus: checkbox.activeFocus
-        activeControl: checkable ? "checkbox" : ""
-        sunken: !flat
-        contentHeight:  (title.length > 0 || checkable) ? 24 : 4
-    }
-}
diff --git a/components/Label.qml b/components/Label.qml
deleted file mode 100644
index 29a9e5b..0000000
--- a/components/Label.qml
+++ /dev/null
@@ -1,48 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** All rights reserved.
-** Contact: Nokia Corporation (qt-info@nokia.com)
-**
-** This file is part of the Qt Components project.
-**
-** $QT_BEGIN_LICENSE:BSD$
-** You may use this file under the terms of the BSD license as follows:
-**
-** "Redistribution and use in source and binary forms, with or without
-** modification, are permitted provided that the following conditions are
-** met:
-**   * Redistributions of source code must retain the above copyright
-**     notice, this list of conditions and the following disclaimer.
-**   * Redistributions in binary form must reproduce the above copyright
-**     notice, this list of conditions and the following disclaimer in
-**     the documentation and/or other materials provided with the
-**     distribution.
-**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
-**     the names of its contributors may be used to endorse or promote
-**     products derived from this software without specific prior written
-**     permission.
-**
-** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-import QtQuick 1.1
-
-Text {
-    id: label
-    font.pixelSize: 11
-    color: pal.text
-    SystemPalette {id:pal}
-}
diff --git a/components/MenuItem.qml b/components/MenuItem.qml
deleted file mode 100644
index 580d697..0000000
--- a/components/MenuItem.qml
+++ /dev/null
@@ -1,48 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** All rights reserved.
-** Contact: Nokia Corporation (qt-info@nokia.com)
-**
-** This file is part of the Qt Components project.
-**
-** $QT_BEGIN_LICENSE:BSD$
-** You may use this file under the terms of the BSD license as follows:
-**
-** "Redistribution and use in source and binary forms, with or without
-** modification, are permitted provided that the following conditions are
-** met:
-**   * Redistributions of source code must retain the above copyright
-**     notice, this list of conditions and the following disclaimer.
-**   * Redistributions in binary form must reproduce the above copyright
-**     notice, this list of conditions and the following disclaimer in
-**     the documentation and/or other materials provided with the
-**     distribution.
-**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
-**     the names of its contributors may be used to endorse or promote
-**     products derived from this software without specific prior written
-**     permission.
-**
-** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-import QtQuick 1.1
-
-Item {
-    property string text
-    property string iconName
-    signal hovered
-    signal selected
-}
diff --git a/components/ProgressBar.qml b/components/ProgressBar.qml
deleted file mode 100644
index f86f59f..0000000
--- a/components/ProgressBar.qml
+++ /dev/null
@@ -1,72 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** All rights reserved.
-** Contact: Nokia Corporation (qt-info@nokia.com)
-**
-** This file is part of the Qt Components project.
-**
-** $QT_BEGIN_LICENSE:BSD$
-** You may use this file under the terms of the BSD license as follows:
-**
-** "Redistribution and use in source and binary forms, with or without
-** modification, are permitted provided that the following conditions are
-** met:
-**   * Redistributions of source code must retain the above copyright
-**     notice, this list of conditions and the following disclaimer.
-**   * Redistributions in binary form must reproduce the above copyright
-**     notice, this list of conditions and the following disclaimer in
-**     the documentation and/or other materials provided with the
-**     distribution.
-**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
-**     the names of its contributors may be used to endorse or promote
-**     products derived from this software without specific prior written
-**     permission.
-**
-** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-import QtQuick 1.1
-import "custom" as Components
-
-Components.ProgressBar {
-    id:progressbar
-
-    property int orientation: Qt.Horizontal
-    property string styleHint
-
-    implicitWidth: orientation === Qt.Horizontal ? 200 : backgroundItem.implicitHeight
-    implicitHeight: orientation === Qt.Horizontal ? backgroundItem.implicitHeight : 200
-
-
-    SystemPalette {id: syspal}
-
-    background: StyleItem {
-        anchors.fill: parent
-        elementType: "progressbar"
-        // XXX: since desktop uses int instead of real, the progressbar
-        // range [0..1] must be stretched to a good precision
-        property int factor : 1000
-        value:   indeterminate ? 0 : progressbar.value * factor // does indeterminate value need to be 1 on windows?
-        minimum: indeterminate ? 0 : progressbar.minimumValue * factor
-        maximum: indeterminate ? 0 : progressbar.maximumValue * factor
-        enabled: progressbar.enabled
-        horizontal: progressbar.orientation == Qt.Horizontal
-        hint: progressbar.styleHint
-        contentWidth: 23
-        contentHeight: 23
-    }
-}
-
diff --git a/components/RadioButton.qml b/components/RadioButton.qml
deleted file mode 100644
index f8d0fdc..0000000
--- a/components/RadioButton.qml
+++ /dev/null
@@ -1,77 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** All rights reserved.
-** Contact: Nokia Corporation (qt-info@nokia.com)
-**
-** This file is part of the Qt Components project.
-**
-** $QT_BEGIN_LICENSE:BSD$
-** You may use this file under the terms of the BSD license as follows:
-**
-** "Redistribution and use in source and binary forms, with or without
-** modification, are permitted provided that the following conditions are
-** met:
-**   * Redistributions of source code must retain the above copyright
-**     notice, this list of conditions and the following disclaimer.
-**   * Redistributions in binary form must reproduce the above copyright
-**     notice, this list of conditions and the following disclaimer in
-**     the documentation and/or other materials provided with the
-**     distribution.
-**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
-**     the names of its contributors may be used to endorse or promote
-**     products derived from this software without specific prior written
-**     permission.
-**
-** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-import QtQuick 1.1
-import "custom" as Components
-
-// jb : Size should not depend on background, we should make it consistent
-
-Components.CheckBox {
-    id: radiobutton
-    property string text
-    property string styleHint
-
-    implicitWidth: Math.max(120, backgroundItem.implicitWidth)
-    implicitHeight: backgroundItem.implicitHeight
-
-    background: StyleItem {
-        elementType: "radiobutton"
-        sunken: pressed
-        on: checked || pressed
-        hover: containsMouse
-        enabled: radiobutton.enabled
-        hasFocus: radiobutton.activeFocus
-        hint: radiobutton.styleHint
-        contentHeight: textitem.implicitHeight
-        contentWidth: textitem.implicitWidth + indicatorWidth
-        property int indicatorWidth: pixelMetric("indicatorwidth") + 2
-        Text {
-            id: textitem
-            text: radiobutton.text
-            anchors.left: parent.left
-            anchors.leftMargin: parent.indicatorWidth
-            anchors.verticalCenter: parent.verticalCenter
-            anchors.right: parent.right
-            elide: Text.ElideRight
-        }
-    }
-    Keys.onSpacePressed: {clicked(); checked = !checked; }
-}
-
diff --git a/components/ScrollArea.qml b/components/ScrollArea.qml
deleted file mode 100644
index 05d7bc1..0000000
--- a/components/ScrollArea.qml
+++ /dev/null
@@ -1,136 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** All rights reserved.
-** Contact: Nokia Corporation (qt-info@nokia.com)
-**
-** This file is part of the Qt Components project.
-**
-** $QT_BEGIN_LICENSE:BSD$
-** You may use this file under the terms of the BSD license as follows:
-**
-** "Redistribution and use in source and binary forms, with or without
-** modification, are permitted provided that the following conditions are
-** met:
-**   * Redistributions of source code must retain the above copyright
-**     notice, this list of conditions and the following disclaimer.
-**   * Redistributions in binary form must reproduce the above copyright
-**     notice, this list of conditions and the following disclaimer in
-**     the documentation and/or other materials provided with the
-**     distribution.
-**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
-**     the names of its contributors may be used to endorse or promote
-**     products derived from this software without specific prior written
-**     permission.
-**
-** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-import QtQuick 1.1
-import "custom" as Components
-import "private" as Private
-
-FocusScope {
-    id: root
-    width: 100
-    height: 100
-
-    // Cosmetic propeties
-    property bool frame: true
-    property bool frameAroundContents: styleitem.styleHint("framearoundcontents")
-    property bool highlightOnFocus: false
-    property alias color: colorRect.color // background color
-    property int frameWidth: frame ? styleitem.frameWidth : 0
-
-    // Item properties
-    property alias horizontalScrollBar: scroller.horizontalScrollBar
-    property alias verticalScrollBar: scroller.verticalScrollBar
-
-    // Viewport properties
-    property int contentX
-    property int contentY
-    property int contentHeight : content.childrenRect.height
-    property int contentWidth: content.childrenRect.width
-    property int viewportHeight: height - (horizontalScrollBar.visible ? horizontalScrollBar.height : 0) - 2 * frameWidth
-    property int viewportWidth: width - (verticalScrollBar.visible ? verticalScrollBar.width : 0) - 2 * frameWidth
-    default property alias data: content.data
-
-    Rectangle {
-        id: colorRect
-        color: "transparent"
-        anchors.fill:styleitem
-        anchors.margins: frameWidth
-    }
-
-    StyleItem {
-        id: styleitem
-        elementType: "frame"
-        sunken: true
-        visible: frame
-        anchors.fill: parent
-        anchors.rightMargin: frame ? (frameAroundContents ? (verticalScrollBar.visible ? verticalScrollBar.width + 2 * frameMargins : 0) : 0) : 0
-        anchors.bottomMargin: frame ? (frameAroundContents ? (horizontalScrollBar.visible ? horizontalScrollBar.height + 2 * frameMargins : 0) : 0) : 0
-        anchors.topMargin: frame ? (frameAroundContents ? 0 : 0) : 0
-        property int frameWidth
-        property int scrollbarspacing: styleitem.pixelMetric("scrollbarspacing");
-        property int frameMargins : frame ? scrollbarspacing : 0
-        Component.onCompleted: frameWidth = styleitem.pixelMetric("defaultframewidth");
-    }
-
-    onContentYChanged: {
-        scroller.blockUpdates = true
-        verticalScrollBar.value = contentY
-        scroller.verticalValue = contentY
-        scroller.blockUpdates = false
-    }
-
-    onContentXChanged: {
-        scroller.blockUpdates = true
-        horizontalScrollBar.value = contentX
-        scroller.horizontalValue = contentX
-        scroller.blockUpdates = false
-    }
-
-    Item {
-        id: clipper
-        anchors.fill: styleitem
-        anchors.margins: frameWidth
-        clip: true
-        Item {
-            id: content
-            x: -root.contentX
-            y: -root.contentY
-        }
-    }
-
-
-    Private.ScrollAreaHelper {
-        id: scroller
-        anchors.fill: parent
-    }
-
-    StyleItem {
-        z: 2
-        anchors.fill: parent
-
-        anchors.topMargin: -3
-        anchors.leftMargin: -3
-        anchors.rightMargin: -5
-        anchors.bottomMargin: -5
-
-        visible: highlightOnFocus && parent.activeFocus && styleitem.styleHint("focuswidget")
-        elementType: "focusframe"
-    }
-}
diff --git a/components/ScrollBar.qml b/components/ScrollBar.qml
deleted file mode 100644
index eb3cbb5..0000000
--- a/components/ScrollBar.qml
+++ /dev/null
@@ -1,206 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** All rights reserved.
-** Contact: Nokia Corporation (qt-info@nokia.com)
-**
-** This file is part of the Qt Components project.
-**
-** $QT_BEGIN_LICENSE:BSD$
-** You may use this file under the terms of the BSD license as follows:
-**
-** "Redistribution and use in source and binary forms, with or without
-** modification, are permitted provided that the following conditions are
-** met:
-**   * Redistributions of source code must retain the above copyright
-**     notice, this list of conditions and the following disclaimer.
-**   * Redistributions in binary form must reproduce the above copyright
-**     notice, this list of conditions and the following disclaimer in
-**     the documentation and/or other materials provided with the
-**     distribution.
-**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
-**     the names of its contributors may be used to endorse or promote
-**     products derived from this software without specific prior written
-**     permission.
-**
-** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-import QtQuick 1.1
-import "custom" as Components
-
-Item {
-    id: scrollbar
-
-    property int orientation : Qt.Horizontal
-    property alias minimumValue: slider.minimumValue
-    property alias maximumValue: slider.maximumValue
-    property int pageStep: styleitem.horizontal ? width : height
-    property int singleStep: 20
-    property alias value: slider.value
-    property bool scrollToClickposition: styleitem.styleHint("scrollToClickPosition")
-
-    implicitWidth: orientation == Qt.Horizontal ? 200 : internal.scrollbarExtent
-    implicitHeight: orientation == Qt.Horizontal ? internal.scrollbarExtent : 200
-
-    onValueChanged: internal.updateHandle()
-
-    MouseArea {
-        id: internal
-
-        anchors.fill: parent
-        property bool upPressed
-        property bool downPressed
-        property bool pageUpPressed
-        property bool pageDownPressed
-
-        property bool autoincrement: false
-        property int scrollbarExtent : styleitem.pixelMetric("scrollbarExtent");
-        property bool handlePressed
-
-        // Update hover item
-        onEntered: styleitem.activeControl = styleitem.hitTest(mouseX, mouseY)
-        onExited: styleitem.activeControl = "none"
-        onMouseXChanged: styleitem.activeControl = styleitem.hitTest(mouseX, mouseY)
-        hoverEnabled: true
-
-        property variant control
-        property variant pressedX
-        property variant pressedY
-        property int oldPosition
-        property int grooveSize
-
-        Timer {
-            running: internal.upPressed || internal.downPressed || internal.pageUpPressed || internal.pageDownPressed
-            interval: 350
-            onTriggered: internal.autoincrement = true
-        }
-
-        Timer {
-            running: internal.autoincrement
-            interval: 60
-            repeat: true
-            onTriggered: internal.upPressed ? internal.decrement() : internal.downPressed ? internal.increment() :
-                                                                     internal.pageUpPressed ? internal.decrementPage() :
-                                                                                              internal.incrementPage()
-        }
-
-        onMousePositionChanged: {
-            if (pressed && control === "handle") {
-                //slider.positionAtMaximum = grooveSize
-                if (!styleitem.horizontal)
-                    slider.position = oldPosition + (mouseY - pressedY)
-                else
-                    slider.position = oldPosition + (mouseX - pressedX)
-            }
-        }
-
-        onPressed: {
-            control = styleitem.hitTest(mouseX,mouseY)
-            scrollToClickposition = styleitem.styleHint("scrollToClickPosition")
-            grooveSize =  styleitem.horizontal? styleitem.subControlRect("groove").width -
-                                                styleitem.subControlRect("handle").width:
-                                                    styleitem.subControlRect("groove").height -
-                                                    styleitem.subControlRect("handle").height;
-            if (control == "handle") {
-                pressedX = mouseX
-                pressedY = mouseY
-                oldPosition = slider.position
-            } else if (control == "up") {
-                decrement();
-                upPressed = true
-            } else if (control == "down") {
-                increment();
-                downPressed = true
-            } else if (!scrollToClickposition){
-                if (control == "upPage") {
-                    decrementPage();
-                    pageUpPressed = true
-                } else if (control == "downPage") {
-                    incrementPage();
-                    pageDownPressed = true
-                }
-            } else {
-                slider.position = styleitem.horizontal ? mouseX - handleRect.width/2
-                                                       : mouseY - handleRect.height/2
-            }
-        }
-
-        onReleased: {
-            autoincrement = false;
-            upPressed = false;
-            downPressed = false;
-            pageUpPressed = false
-            pageDownPressed = false
-            control = ""
-        }
-
-        function incrementPage() {
-            value += pageStep
-            if (value > maximumValue)
-                value = maximumValue
-        }
-
-        function decrementPage() {
-            value -= pageStep
-            if (value < minimumValue)
-                value = minimumValue
-        }
-
-        function increment() {
-            value += singleStep
-            if (value > maximumValue)
-                value = maximumValue
-        }
-
-        function decrement() {
-            value -= singleStep
-            if (value < minimumValue)
-                value = minimumValue
-        }
-
-        StyleItem {
-            id: styleitem
-            anchors.fill:parent
-            elementType: "scrollbar"
-            hover: activeControl != "none"
-            activeControl: "none"
-            sunken: internal.upPressed | internal.downPressed
-            minimum: slider.minimumValue
-            maximum: slider.maximumValue
-            value: slider.value
-            horizontal: orientation == Qt.Horizontal
-            enabled: parent.enabled
-        }
-
-        property variant handleRect: Qt.rect(0,0,0,0)
-        property variant grooveRect: Qt.rect(0,0,0,0)
-        function updateHandle() {
-            internal.handleRect = styleitem.subControlRect("handle")
-            grooveRect = styleitem.subControlRect("groove");
-        }
-
-        RangeModel {
-            id: slider
-            minimumValue: 0.0
-            maximumValue: 1.0
-            value: 0
-            stepSize: 0.0
-            inverted: false
-            positionAtMaximum: internal.grooveSize
-        }
-    }
-
-}
diff --git a/components/Slider.qml b/components/Slider.qml
deleted file mode 100644
index 0ad0492..0000000
--- a/components/Slider.qml
+++ /dev/null
@@ -1,106 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** All rights reserved.
-** Contact: Nokia Corporation (qt-info@nokia.com)
-**
-** This file is part of the Qt Components project.
-**
-** $QT_BEGIN_LICENSE:BSD$
-** You may use this file under the terms of the BSD license as follows:
-**
-** "Redistribution and use in source and binary forms, with or without
-** modification, are permitted provided that the following conditions are
-** met:
-**   * Redistributions of source code must retain the above copyright
-**     notice, this list of conditions and the following disclaimer.
-**   * Redistributions in binary form must reproduce the above copyright
-**     notice, this list of conditions and the following disclaimer in
-**     the documentation and/or other materials provided with the
-**     distribution.
-**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
-**     the names of its contributors may be used to endorse or promote
-**     products derived from this software without specific prior written
-**     permission.
-**
-** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-import QtQuick 1.1
-import "custom" as Components
-
-// jens: ContainsMouse breaks drag functionality
-
-Components.Slider{
-    id: slider
-
-    property bool tickmarksEnabled: false
-    property string tickPosition: "Below" // "Above", "Below", "BothSides"
-
-    StyleItem {
-        id:buttonitem
-        elementType: "slider"
-        contentWidth:23
-        contentHeight:23
-        visible: false
-    }
-
-    property int orientation: Qt.Horizontal
-
-    implicitWidth: orientation === Qt.Horizontal ? 200 : buttonitem.implicitHeight
-    implicitHeight: orientation === Qt.Horizontal ? buttonitem.implicitHeight : 200
-
-    property string styleHint;
-
-    groove: StyleItem {
-        anchors.fill:parent
-        elementType: "slider"
-        sunken: pressed
-        maximum: slider.maximumValue*100
-        minimum: slider.minimumValue*100
-        step: slider.stepSize*100
-        value: slider.value*100
-        horizontal: slider.orientation == Qt.Horizontal
-        enabled: slider.enabled
-        hasFocus: slider.focus
-        hint: slider.styleHint
-        activeControl: tickmarksEnabled ? tickPosition.toLowerCase() : ""
-    }
-
-    handle: null
-    valueIndicator: null
-
-    Keys.onRightPressed: value += (maximumValue - minimumValue)/10.0
-    Keys.onLeftPressed: value -= (maximumValue - minimumValue)/10.0
-
-    WheelArea {
-        id: wheelarea
-        anchors.fill: parent
-        horizontalMinimumValue: slider.minimumValue
-        horizontalMaximumValue: slider.maximumValue
-        verticalMinimumValue: slider.minimumValue
-        verticalMaximumValue: slider.maximumValue
-        property double step: (slider.maximumValue - slider.minimumValue)/100
-
-        onVerticalWheelMoved: {
-            value += verticalDelta/4*step
-        }
-
-        onHorizontalWheelMoved: {
-            value += horizontalDelta/4*step
-        }
-    }
-
-}
diff --git a/components/SpinBox.qml b/components/SpinBox.qml
deleted file mode 100644
index 212499d..0000000
--- a/components/SpinBox.qml
+++ /dev/null
@@ -1,140 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** All rights reserved.
-** Contact: Nokia Corporation (qt-info@nokia.com)
-**
-** This file is part of the Qt Components project.
-**
-** $QT_BEGIN_LICENSE:BSD$
-** You may use this file under the terms of the BSD license as follows:
-**
-** "Redistribution and use in source and binary forms, with or without
-** modification, are permitted provided that the following conditions are
-** met:
-**   * Redistributions of source code must retain the above copyright
-**     notice, this list of conditions and the following disclaimer.
-**   * Redistributions in binary form must reproduce the above copyright
-**     notice, this list of conditions and the following disclaimer in
-**     the documentation and/or other materials provided with the
-**     distribution.
-**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
-**     the names of its contributors may be used to endorse or promote
-**     products derived from this software without specific prior written
-**     permission.
-**
-** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-import QtQuick 1.1
-import "custom" as Components
-
-Components.SpinBox {
-    id:spinbox
-
-    property variant __upRect;
-    property variant __downRect;
-    property int __margin: (height -16)/2
-    property string styleHint
-
-    // Align height with button
-    topMargin: __margin
-    bottomMargin: __margin
-
-    leftMargin:6
-    rightMargin:6
-
-    StyleItem {
-        id:edititem
-        elementType: "edit"
-        visible: false
-        contentWidth: 70
-        contentHeight: 20
-    }
-
-    implicitWidth: edititem.implicitWidth
-    implicitHeight: edititem.implicitHeight
-
-    clip:false
-
-    background: Item {
-        anchors.fill: parent
-        property variant __editRect
-
-        Rectangle {
-            id: editBackground
-            x: __editRect.x - 1
-            y: __editRect.y
-            width: __editRect.width + 1
-            height: __editRect.height
-        }
-
-        Item {
-            id: focusFrame
-            anchors.fill: editBackground
-            visible: frameitem.styleHint("focuswidget")
-            StyleItem {
-                id: frameitem
-                anchors.margins: -6
-                anchors.leftMargin: -5
-                anchors.rightMargin: -6
-                anchors.fill: parent
-                visible: spinbox.activeFocus
-                elementType: "focusframe"
-            }
-        }
-
-        function updateRect() {
-            __upRect = styleitem.subControlRect("up");
-            __downRect = styleitem.subControlRect("down");
-            __editRect = styleitem.subControlRect("edit");
-            spinbox.leftMargin = __editRect.x + 2
-            spinbox.rightMargin = spinbox.width -__editRect.width - __editRect.x
-        }
-
-        Component.onCompleted: updateRect()
-        onWidthChanged: updateRect()
-        onHeightChanged: updateRect()
-
-        StyleItem {
-            id: styleitem
-            anchors.fill: parent
-            elementType: "spinbox"
-            sunken: (downEnabled && downPressed) | (upEnabled && upPressed)
-            hover: containsMouse
-            hasFocus: spinbox.focus
-            enabled: spinbox.enabled
-            value: (upPressed ? 1 : 0)           |
-                   (downPressed == 1 ? 1<<1 : 0) |
-                   (upEnabled ? (1<<2) : 0)      |
-                   (downEnabled == 1 ? (1<<3) : 0)
-            hint: spinbox.styleHint
-        }
-    }
-
-    up: Item {
-        x: __upRect.x
-        y: __upRect.y
-        width: __upRect.width
-        height: __upRect.height
-    }
-
-    down: Item {
-        x: __downRect.x
-        y: __downRect.y
-        width: __downRect.width
-        height: __downRect.height
-    }
-}
diff --git a/components/SplitterColumn.qml b/components/SplitterColumn.qml
deleted file mode 100644
index 7bffc9f..0000000
--- a/components/SplitterColumn.qml
+++ /dev/null
@@ -1,163 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** All rights reserved.
-** Contact: Nokia Corporation (qt-info@nokia.com)
-**
-** This file is part of the Qt Components project.
-**
-** $QT_BEGIN_LICENSE:BSD$
-** You may use this file under the terms of the BSD license as follows:
-**
-** "Redistribution and use in source and binary forms, with or without
-** modification, are permitted provided that the following conditions are
-** met:
-**   * Redistributions of source code must retain the above copyright
-**     notice, this list of conditions and the following disclaimer.
-**   * Redistributions in binary form must reproduce the above copyright
-**     notice, this list of conditions and the following disclaimer in
-**     the documentation and/or other materials provided with the
-**     distribution.
-**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
-**     the names of its contributors may be used to endorse or promote
-**     products derived from this software without specific prior written
-**     permission.
-**
-** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-import QtQuick 1.1
-import "custom" as Components
-
-/*
-*
-* SplitterColumn
-*
-* SplitterColumn is a component that provides a way to layout items horisontally with
-* a draggable splitter added in-between each item.
-*
-* Add items to the SplitterColumn by inserting them as child items. The splitter handle
-* is outsourced as a delegate (handleBackground). To enable the user to drag the handle,
-* it will need to contain a mouse area that communicates with the SplitterColumn by binding
-* 'drag.target: handle'. The 'handle' property points to the handle item that embedds
-* the delegate. To change handle positions, either change 'y; (or 'height') of 'handle', or
-* change the height of the child items inside the SplitterColumn. If you set the visibility
-* of a child item to false, the corresponding handle will also be hidden, and the
-* SplitterColumn will perform a layout update to fill up available space.
-*
-* There will always be one (and only one) item in the SplitterColumn that is 'expanding'.
-* The expanding item is the child that will get all the remaining space in the SplitterColumn
-* (down to its own mimimumHeight/Height) when all other items have been layed out.
-* This means that that 'height', 'percentageHeight' and 'maximumHeight' will be ignored for this item.
-* By default, the last visible child item of the SplitterColumn will be 'expanding'.
-*
-* A handle can belong to the item on the left side, or the right side, of the handle. Which one depends
-* on the expaning item. If the expanding item is to the right of the handle, the
-* handle will belong to the item on the left. If it is to the left, it will belong to the item on the
-* right. This will again control which item that gets resized when the user drags a handle, and which
-* handle that gets hidden when an item is told to hide.
-*
-* NB: Since SplitterColumn might modify geometry properties like 'height' and 'y; of child items
-* to e.g. ensure they stay within minimumHeight/maximumHeight, explicit expression bindings
-* to such properties can easily be broken up by the SplitterColumn, and is not recommended.
-*
-* The SplitterColumn contains the following API:
-*
-* Component handleBackground - delegate that will be instanciated between each
-*   child item. Inside the delegate, the following properties are available:
-*   int handleIndex - specifies the index of the splitter handle. The handle
-*       between the first and the second item will get index 0, the next handle index 1 etc.
-*   Item handle - convenience property that points to the item where the handle background is
-*       instanciated as a child. Identical to splitterColumn.handles[handleIndex]. The handle
-*       background iteself can be accessed through handle.item.
-*       Modify 'handle[d.offset]' to move the handle (or change 'height' of SplitterColumn child items).
-*   Item splitterItem - convenience property that points to the child item that the handle controls.
-*       Also refer to information about the expanding item above.
-*   Item splitterColumn - points to the SplitterColumn that the handle is in.
-* List<Item> items - contains the list of child items in the SplitterColumn. Currently read-only.
-* List<Item> handles - contains the list of splitter handles in the SplitterColumn. Note that this list will
-*   be populated after all child items has completed, so accessing it from Component.onCompleted
-*   inside a SplitterColumn child item will not work.  To get to the handle background, access the
-*   'background' property of the handle, e.g. handles[0].background. Read-only.
-* real preferredHeight/Height - contains the accumulated with of all child items and handles, except
-*   the expanding item. If the expanding item has a minimum height, the minimum height will
-*   be included.
-*
-* The following attached properties can be used for each child item of SplitterColumn:
-*
-* real Splitter.minimumSize - ensures that the item cannot be resized below the
-*   given pixelvalue. A value of -1 will disable it.
-* real Splitter.maximumSize - ensures that the item cannot be resized above the
-*   given pixelvalue. A value of -1 will disable it.
-* real percentageHeight - This value specifies a percentage (0 - 100) of the height of the
-*   SplitterColumn height. If the height of the SplitterColumn change, the height of the item will
-*   change as well. 'percentageHeight' have precedence over 'height', which means that
-*   SplitterColumn will ignore any assignments to 'height'. A value of -1 disables it.
-* bool Splitter.expanding - See explanation of 'expanding' above. If set to true, the current item
-*   will be the expanding item in the SplitterColumn. If set to false, the SplitterColumn will
-*   autmatically choose the last visible child of the SplitterColumn as expanding instead.
-* int Splitter.itemIndex - will be assigned a read-only value with the item index. Can be used to e.g. look-up
-*   the handles sourrounding the item (parent.handles[itemIndex])
-*
-* Example:
-*
-* To create a SplitterColumn with three items, and let
-* the center item be the one that should be expanding, one
-* could do the following:
-*
-*    SplitterColumn {
-*        anchors.fill: parent
-*
-*        Rectangle {
-*            Splitter.maximumSize: 400
-*            color: "gray"
-*            height: 200
-*        }
-*        Rectangle {
-*            Splitter.minimumSize: 50
-*            Splitter.expanding: true
-*            color: "darkgray"
-*        }
-*        Rectangle {
-*            color: "gray"
-*            height: 200
-*        }
-*    }
-*/
-
-Components.Splitter {
-    orientation: Qt.Vertical
-    handleBackground: StyleItem {
-        id: styleitem
-        elementType: "splitter"
-        height: handleWidth !== -1 ?  handleWidth : pixelMetric("splitterwidth")
-        horizontal: false
-        property alias pressed: mouseArea.pressed
-        property bool dragged: mouseArea.drag.active
-
-        MouseArea {
-            id: mouseArea
-            anchors.fill: parent
-            anchors.topMargin: (parent.height <= 1) ? -2 : 0
-            anchors.bottomMargin: (parent.height <= 1) ? -2 : 0
-            drag.axis: Drag.XandYAxis // Why doesn't X-axis work?
-            drag.target: handle
-            CursorArea {
-                anchors.fill: parent
-                cursor: CursorArea.SplitVCursor
-            }
-        }
-    }
-}
diff --git a/components/SplitterRow.qml b/components/SplitterRow.qml
deleted file mode 100644
index 71dd970..0000000
--- a/components/SplitterRow.qml
+++ /dev/null
@@ -1,164 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** All rights reserved.
-** Contact: Nokia Corporation (qt-info@nokia.com)
-**
-** This file is part of the Qt Components project.
-**
-** $QT_BEGIN_LICENSE:BSD$
-** You may use this file under the terms of the BSD license as follows:
-**
-** "Redistribution and use in source and binary forms, with or without
-** modification, are permitted provided that the following conditions are
-** met:
-**   * Redistributions of source code must retain the above copyright
-**     notice, this list of conditions and the following disclaimer.
-**   * Redistributions in binary form must reproduce the above copyright
-**     notice, this list of conditions and the following disclaimer in
-**     the documentation and/or other materials provided with the
-**     distribution.
-**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
-**     the names of its contributors may be used to endorse or promote
-**     products derived from this software without specific prior written
-**     permission.
-**
-** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-import QtQuick 1.1
-import "custom" as Components
-
-/*
-*
-* SplitterRow
-*
-* SplitterRow is a component that provides a way to layout items horisontally with
-* a draggable splitter added in-between each item.
-*
-* Add items to the SplitterRow by inserting them as child items. The splitter handle
-* is outsourced as a delegate (handleBackground). To enable the user to drag the handle,
-* it will need to contain a mouse area that communicates with the SplitterRow by binding
-* 'drag.target: handle'. The 'handle' property points to the handle item that embedds
-* the delegate. To change handle positions, either change 'x' (or 'width') of 'handle', or
-* change the width of the child items inside the SplitterRow. If you set the visibility
-* of a child item to false, the corresponding handle will also be hidden, and the
-* SplitterRow will perform a layout update to fill up available space.
-*
-* There will always be one (and only one) item in the SplitterRow that is 'expanding'.
-* The expanding item is the child that will get all the remaining space in the SplitterRow
-* (down to its own mimimumWidth/Height) when all other items have been layed out.
-* This means that that 'width', 'percentageWidth' and 'maximumWidth' will be ignored for this item.
-* By default, the last visible child item of the SplitterRow will be 'expanding'.
-*
-* A handle can belong to the item on the left side, or the right side, of the handle. Which one depends
-* on the expaning item. If the expanding item is to the right of the handle, the
-* handle will belong to the item on the left. If it is to the left, it will belong to the item on the
-* right. This will again control which item that gets resized when the user drags a handle, and which
-* handle that gets hidden when an item is told to hide.
-*
-* NB: Since SplitterRow might modify geometry properties like 'width' and 'x' of child items
-* to e.g. ensure they stay within minimumWidth/maximumWidth, explicit expression bindings
-* to such properties can easily be broken up by the SplitterRow, and is not recommended.
-*
-* The SplitterRow contains the following API:
-*
-* Component handleBackground - delegate that will be instanciated between each
-*   child item. Inside the delegate, the following properties are available:
-*   int handleIndex - specifies the index of the splitter handle. The handle
-*       between the first and the second item will get index 0, the next handle index 1 etc.
-*   Item handle - convenience property that points to the item where the handle background is
-*       instanciated as a child. Identical to splitterRow.handles[handleIndex]. The handle
-*       background iteself can be accessed through handle.item.
-*       Modify 'handle[d.offset]' to move the handle (or change 'width' of SplitterRow child items).
-*   Item splitterItem - convenience property that points to the child item that the handle controls.
-*       Also refer to information about the expanding item above.
-*   Item splitterRow - points to the SplitterRow that the handle is in.
-* List<Item> items - contains the list of child items in the SplitterRow. Currently read-only.
-* List<Item> handles - contains the list of splitter handles in the SplitterRow. Note that this list will
-*   be populated after all child items has completed, so accessing it from Component.onCompleted
-*   inside a SplitterRow child item will not work.  To get to the handle background, access the
-*   'background' property of the handle, e.g. handles[0].background. Read-only.
-* real preferredWidth/Height - contains the accumulated with of all child items and handles, except
-*   the expanding item. If the expanding item has a minimum width, the minimum width will
-*   be included.
-*
-* The following attached properties can optionally be used for each child item of SplitterRow:
-*
-* real Splitter.minimumSize - ensures that the item cannot be resized below the
-*   given pixelvalue. A value of -1 will disable it.
-* real Splitter.maximumSixe - ensures that the item cannot be resized above the
-*   given value. A value of -1 will disable it.
-* real Splitter.percentageSize - This value specifies a percentage (0 - 100) of the width of the
-*   SplitterRow width. If the width of the SplitterRow change, the width of the item will
-*   change as well. 'percentageWidth' have precedence over 'width', which means that
-*   SplitterRow will ignore any assignments to 'width'. A value of -1 disables it.
-* bool Splitter.expanding - See explanation of 'expanding' above. If set to true, the current item
-*   will be the expanding item in the SplitterRow. If set to false, the SplitterRow will
-*   autmatically choose the last visible child of the SplitterRow as expanding instead.
-* int Splitter.itemIndex - will be assigned a read-only value with the item index. Can be used to e.g. look-up
-*   the handles sourrounding the item (parent.handles[itemIndex])
-*
-* Example:
-*
-* To create a SplitterRow with three items, and let
-* the center item be the one that should be expanding, one
-* could do the following:
-*
-*    SplitterRow {
-*        anchors.fill: parent
-*
-*        Rectangle {
-*            Splitter.maximumWidth: 400
-*            color: "gray"
-*            width: 200
-*        }
-*        Rectangle {
-*            Splitter.minimumWidth: 50
-*            Splitter.expanding: true
-*            color: "darkgray"
-*        }
-*        Rectangle {
-*            color: "gray"
-*            width: 200
-*        }
-*    }
-*/
-
-
-Components.Splitter {
-    orientation: Qt.Horizontal
-    handleBackground: StyleItem {
-        id: styleitem
-        elementType: "splitter"
-        width: handleWidth !== -1 ?  handleWidth : pixelMetric("splitterwidth")
-        property alias pressed: mouseArea.pressed
-        property bool dragged: mouseArea.drag.active
-
-        MouseArea {
-            id: mouseArea
-            anchors.fill: parent
-            anchors.leftMargin: (parent.width <= 1) ? -2 : 0
-            anchors.rightMargin: (parent.width <= 1) ? -2 : 0
-            drag.axis: Qt.YAxis
-            drag.target: handle
-
-            CursorArea {
-                anchors.fill: parent
-                cursor: CursorArea.SplitHCursor
-            }
-        }
-    }
-}
diff --git a/components/StatusBar.qml b/components/StatusBar.qml
deleted file mode 100644
index b24d354..0000000
--- a/components/StatusBar.qml
+++ /dev/null
@@ -1,52 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** All rights reserved.
-** Contact: Nokia Corporation (qt-info@nokia.com)
-**
-** This file is part of the Qt Components project.
-**
-** $QT_BEGIN_LICENSE:BSD$
-** You may use this file under the terms of the BSD license as follows:
-**
-** "Redistribution and use in source and binary forms, with or without
-** modification, are permitted provided that the following conditions are
-** met:
-**   * Redistributions of source code must retain the above copyright
-**     notice, this list of conditions and the following disclaimer.
-**   * Redistributions in binary form must reproduce the above copyright
-**     notice, this list of conditions and the following disclaimer in
-**     the documentation and/or other materials provided with the
-**     distribution.
-**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
-**     the names of its contributors may be used to endorse or promote
-**     products derived from this software without specific prior written
-**     permission.
-**
-** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-import QtQuick 1.1
-import "."
-import "custom" as Components
-
-Item {
-    width: parent ? parent.width : 200
-    height: 24
-    StyleItem {
-        anchors.fill: parent
-        elementType: "statusbar"
-    }
-}
diff --git a/components/Tab.qml b/components/Tab.qml
deleted file mode 100644
index a0b3450..0000000
--- a/components/Tab.qml
+++ /dev/null
@@ -1,48 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** All rights reserved.
-** Contact: Nokia Corporation (qt-info@nokia.com)
-**
-** This file is part of the Qt Components project.
-**
-** $QT_BEGIN_LICENSE:BSD$
-** You may use this file under the terms of the BSD license as follows:
-**
-** "Redistribution and use in source and binary forms, with or without
-** modification, are permitted provided that the following conditions are
-** met:
-**   * Redistributions of source code must retain the above copyright
-**     notice, this list of conditions and the following disclaimer.
-**   * Redistributions in binary form must reproduce the above copyright
-**     notice, this list of conditions and the following disclaimer in
-**     the documentation and/or other materials provided with the
-**     distribution.
-**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
-**     the names of its contributors may be used to endorse or promote
-**     products derived from this software without specific prior written
-**     permission.
-**
-** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-import QtQuick 1.1
-
-Item {
-    id:tab
-    anchors.fill: parent
-    property string title
-    property int contentMargin
-}
diff --git a/components/TabBar.qml b/components/TabBar.qml
deleted file mode 100644
index bcfcee2..0000000
--- a/components/TabBar.qml
+++ /dev/null
@@ -1,148 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** All rights reserved.
-** Contact: Nokia Corporation (qt-info@nokia.com)
-**
-** This file is part of the Qt Components project.
-**
-** $QT_BEGIN_LICENSE:BSD$
-** You may use this file under the terms of the BSD license as follows:
-**
-** "Redistribution and use in source and binary forms, with or without
-** modification, are permitted provided that the following conditions are
-** met:
-**   * Redistributions of source code must retain the above copyright
-**     notice, this list of conditions and the following disclaimer.
-**   * Redistributions in binary form must reproduce the above copyright
-**     notice, this list of conditions and the following disclaimer in
-**     the documentation and/or other materials provided with the
-**     distribution.
-**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
-**     the names of its contributors may be used to endorse or promote
-**     products derived from this software without specific prior written
-**     permission.
-**
-** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-import QtQuick 1.1
-import "custom" as Components
-
-
-Item {
-    id: tabbar
-    property int tabHeight: tabrow.height
-    property int tabWidth: tabrow.width
-
-    Keys.onRightPressed: {
-        if (tabFrame && tabFrame.current < tabFrame.count - 1)
-            tabFrame.current = tabFrame.current + 1
-    }
-    Keys.onLeftPressed: {
-        if (tabFrame && tabFrame.current > 0)
-            tabFrame.current = tabFrame.current - 1
-    }
-
-    height: tabHeight
-
-    property Item tabFrame
-    onTabFrameChanged:parent = tabFrame
-    visible: tabFrame ? tabFrame.tabsVisible : true
-    property int __overlap : styleitem.pixelMetric("tabvshift");
-    property string position: tabFrame ? tabFrame.position : "North"
-    property string tabBarAlignment: styleitem.styleHint("tabbaralignment");
-    property int tabOverlap: styleitem.pixelMetric("taboverlap");
-    property int tabBaseOverlap: styleitem.pixelMetric("tabbaseoverlap");
-    property int tabHSpace: styleitem.pixelMetric("tabhspace");
-    property int tabVSpace: styleitem.pixelMetric("tabvspace");
-
-    function tab(index) {
-        for (var i = 0; i < tabrow.children.length; ++i) {
-            if (tabrow.children[i].tabindex == index) {
-                return tabrow.children[i]
-            }
-        }
-        return null;
-    }
-
-    StyleItem {
-        visible:false
-        id:styleitem
-        elementType: "tab"
-        text: "generic"
-    }
-
-    Row {
-        id: tabrow
-        property int paintMargins: 1
-        states:
-                State {
-            when: tabBarAlignment == "center"
-            name: "centered"
-            AnchorChanges {
-                target:tabrow
-                anchors.horizontalCenter: tabbar.horizontalCenter
-            }
-        }
-
-        Repeater {
-            id:repeater
-            focus:true
-            model: tabFrame ? tabFrame.tabs.length : null
-            delegate: Item {
-                id:tab
-                focus:true
-                property int tabindex: index
-                property bool selected : tabFrame.current == index
-                z: selected ? 1 : -1
-                width: Math.min(implicitWidth, tabbar.width/tabs.length)
-
-                implicitWidth: Math.max(textitem.paintedWidth, style.implicitWidth)
-                implicitHeight: Math.max(textitem.paintedHeight, style.implicitHeight)
-
-                StyleItem {
-                    id: style
-                    elementType: "tab"
-                    selected: tab.selected
-                    info: tabbar.position
-                    text:  tabFrame.tabs[index].title
-                    hover: mousearea.containsMouse
-                    hasFocus: tabbar.focus && selected
-                    property bool first: index === 0
-                    paintMargins: tabrow.paintMargins
-                    activeControl: tabFrame.count === 1 ? "only" : index === 0 ? "beginning" :
-                            index === tabFrame.count-1 ? "end" : "middle"
-                    anchors.fill: parent
-                    anchors.margins: -paintMargins
-                    contentWidth: textitem.width + tabHSpace + 2
-                    contentHeight: Math.max(style.fontHeight + tabVSpace + 6, 0)
-                    Text {
-                        id: textitem
-                        // Used for size hint
-                        visible: false
-                        text:  tabFrame.tabs[index].title
-                    }
-                }
-                MouseArea {
-                    id: mousearea
-                    anchors.fill: parent
-                    hoverEnabled: true
-                    onPressed: tabFrame.current = index
-                }
-            }
-        }
-    }
-}
diff --git a/components/TabFrame.qml b/components/TabFrame.qml
deleted file mode 100644
index 51b3487..0000000
--- a/components/TabFrame.qml
+++ /dev/null
@@ -1,137 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** All rights reserved.
-** Contact: Nokia Corporation (qt-info@nokia.com)
-**
-** This file is part of the Qt Components project.
-**
-** $QT_BEGIN_LICENSE:BSD$
-** You may use this file under the terms of the BSD license as follows:
-**
-** "Redistribution and use in source and binary forms, with or without
-** modification, are permitted provided that the following conditions are
-** met:
-**   * Redistributions of source code must retain the above copyright
-**     notice, this list of conditions and the following disclaimer.
-**   * Redistributions in binary form must reproduce the above copyright
-**     notice, this list of conditions and the following disclaimer in
-**     the documentation and/or other materials provided with the
-**     distribution.
-**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
-**     the names of its contributors may be used to endorse or promote
-**     products derived from this software without specific prior written
-**     permission.
-**
-** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-import QtQuick 1.1
-import "custom" as Components
-
-Item {
-    id: tabWidget
-    width: 100
-    height: 100
-    property int current: 0
-    property int count: stack.children.length
-    property bool frame: true
-    property bool tabsVisible: true
-    property string position: "North"
-    default property alias tabs : stack.children
-    property Item tabBar: tabbarItem
-
-    onCurrentChanged: __setOpacities()
-    Component.onCompleted: __setOpacities()
-
-    property int __baseOverlap : frameitem.pixelMetric("tabbaseoverlap")// add paintmargins;
-    function __setOpacities() {
-        for (var i = 0; i < stack.children.length; ++i) {
-            stack.children[i].visible = (i == current ? true : false)
-        }
-    }
-
-    Component {
-        id: tabcomp
-        Tab {}
-    }
-
-    function addTab(component, title) {
-        var tab = tabcomp.createObject(this);
-        component.createObject(tab)
-        tab.parent = stack
-        tab.title = title
-        __setOpacities()
-        return tab
-    }
-
-    function removeTab(id) {
-        var tab = tabs[id]
-        tab.destroy()
-        if (current > 0)
-            current-=1
-    }
-
-    StyleItem {
-        id: frameitem
-        z: style == "oxygen" ? 1 : 0
-        elementType: "tabframe"
-        info: position
-        value: tabbarItem && tabsVisible && tabbarItem.tab(current) ? tabbarItem.tab(current).x : 0
-        minimum: tabbarItem && tabsVisible && tabbarItem.tab(current) ? tabbarItem.tab(current).width : 0
-        maximum: tabbarItem && tabsVisible ? tabbarItem.tabWidth : width
-        anchors.fill: parent
-
-        property int frameWidth: pixelMetric("defaultframewidth")
-
-        Item {
-            id: stack
-            anchors.fill: parent
-            anchors.margins: (frame ? frameitem.frameWidth : 0)
-            anchors.topMargin: anchors.margins + (frameitem.style =="mac" ? 6 : 0)
-            anchors.bottomMargin: anchors.margins + (frameitem.style =="mac" ? 6 : 0)
-        }
-
-        anchors.topMargin: tabbarItem && tabsVisible && position == "North" ? Math.max(0, tabbarItem.height - __baseOverlap) : 0
-
-        states: [
-            State {
-                name: "South"
-                when: position == "South" && tabbarItem!= undefined
-                PropertyChanges {
-                    target: frameitem
-                    anchors.topMargin: 0
-                    anchors.bottomMargin: tabbarItem ? tabbarItem.height - __baseOverlap: 0
-                }
-                PropertyChanges {
-                    target: tabbarItem
-                    anchors.topMargin: -__baseOverlap
-                }
-                AnchorChanges {
-                    target: tabbarItem
-                    anchors.top: frameitem.bottom
-                    anchors.bottom: undefined
-                }
-            }
-        ]
-    }
-    TabBar {
-        id: tabbarItem
-        tabFrame: tabWidget
-        anchors.top: tabWidget.top
-        anchors.left: tabWidget.left
-        anchors.right: tabWidget.right
-    }
-}
diff --git a/components/TableColumn.qml b/components/TableColumn.qml
deleted file mode 100644
index 4ebf9eb..0000000
--- a/components/TableColumn.qml
+++ /dev/null
@@ -1,52 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** All rights reserved.
-** Contact: Nokia Corporation (qt-info@nokia.com)
-**
-** This file is part of the Qt Components project.
-**
-** $QT_BEGIN_LICENSE:BSD$
-** You may use this file under the terms of the BSD license as follows:
-**
-** "Redistribution and use in source and binary forms, with or without
-** modification, are permitted provided that the following conditions are
-** met:
-**   * Redistributions of source code must retain the above copyright
-**     notice, this list of conditions and the following disclaimer.
-**   * Redistributions in binary form must reproduce the above copyright
-**     notice, this list of conditions and the following disclaimer in
-**     the documentation and/or other materials provided with the
-**     distribution.
-**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
-**     the names of its contributors may be used to endorse or promote
-**     products derived from this software without specific prior written
-**     permission.
-**
-** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-import QtQuick 1.1
-
-QtObject {
-    property string title
-    property string role
-    property int width: 160
-    property int x
-    property bool visible: true
-    property int elideMode: Text.ElideRight
-    property int textAlignment: Text.AlignLeft
-    property Component delegate
-}
diff --git a/components/TableView.qml b/components/TableView.qml
deleted file mode 100644
index f880e38..0000000
--- a/components/TableView.qml
+++ /dev/null
@@ -1,635 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** All rights reserved.
-** Contact: Nokia Corporation (qt-info@nokia.com)
-**
-** This file is part of the Qt Components project.
-**
-** $QT_BEGIN_LICENSE:BSD$
-** You may use this file under the terms of the BSD license as follows:
-**
-** "Redistribution and use in source and binary forms, with or without
-** modification, are permitted provided that the following conditions are
-** met:
-**   * Redistributions of source code must retain the above copyright
-**     notice, this list of conditions and the following disclaimer.
-**   * Redistributions in binary form must reproduce the above copyright
-**     notice, this list of conditions and the following disclaimer in
-**     the documentation and/or other materials provided with the
-**     distribution.
-**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
-**     the names of its contributors may be used to endorse or promote
-**     products derived from this software without specific prior written
-**     permission.
-**
-** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-import QtQuick 1.1
-import "private" as Private
-
-/*
-*
-* TableView
-*
-* This component provides an item-view with resizable
-* header sections.
-*
-* You can style the drawn delegate by overriding the itemDelegate
-* property. The following properties are supported for custom
-* delegates:
-*
-* Note: Currently only row selection is available for this component
-*
-* itemheight - default platform size of item
-* itemwidth - default platform width of item
-* itemselected - if the row is currently selected
-* itemvalue - The text for this item
-* itemforeground - The default text color for an item
-*
-* For example:
-*   itemDelegate: Item {
-*       Text {
-*           anchors.verticalCenter: parent.verticalCenter
-*           color: itemForeground
-*           elide: Text.ElideRight
-*           text: itemValue
-*        }
-*    }
-*
-* Data for each row is provided through a model:
-*
-* ListModel {
-*    ListElement{ column1: "value 1"; column2: "value 2"}
-*    ListElement{ column1: "value 3"; column2: "value 4"}
-* }
-*
-* You provide title and size properties on TableColumns
-* by setting the default header property :
-*
-* TableView {
-*    TableColumn{ role: "column1" ; title: "Column 1" ; width:100}
-*    TableColumn{ role: "column2" ; title: "Column 2" ; width:200}
-*    model: datamodel
-* }
-*
-* The header sections are attached to values in the datamodel by defining
-* the listmodel property they attach to. Each property in the model, will
-* then be shown in each column section.
-*
-* The view itself does not provide sorting. This has to
-* be done on the model itself. However you can provide sorting
-* on the model and enable sort indicators on headers.
-*
-* sortColumn - The index of the currently selected sort header
-* sortIndicatorVisible - If sort indicators should be enabled
-* sortIndicatorDirection - "up" or "down" depending on state
-*
-*/
-
-FocusScope{
-    id: root
-
-    property variant model
-
-    // Framewidth seems to be 1 regardless of style
-    property int frameWidth: frame ? frameitem.frameWidth : 0;
-    width: 200
-    height: 200
-
-    // Cosmetic properties
-    property bool frame: true
-    property bool frameAroundContents: styleitem.styleHint("framearoundcontents")
-    property bool highlightOnFocus: false
-    property bool alternateRowColor: true
-    property bool headerVisible: true
-
-    // Styling properties
-    property Component itemDelegate: standardDelegate
-    property Component rowDelegate: rowDelegate
-    property Component headerDelegate: headerDelegate
-    property color backgroundColor: "white"
-
-    // Sort properties
-    property int sortColumn // Index of currently selected sort column
-    property bool sortIndicatorVisible: false // enables or disables sort indicator
-    property string sortIndicatorDirection: "down" // "up" or "down" depending on current state
-
-    // Item properties
-    default property alias header: tree.header
-    property alias horizontalScrollBar: scroller.horizontalScrollBar
-    property alias verticalScrollBar: scroller.verticalScrollBar
-
-    // Viewport properties
-    property alias contentX: tree.contentX
-    property alias contentY: tree.contentY
-    property alias contentHeight : tree.contentHeight
-    property alias contentWidth: tree.contentWidth
-    property alias viewportWidth: scroller.availableWidth
-    property alias viewportHeight: scroller.availableHeight
-    property alias count: tree.count
-
-    property alias cacheBuffer: tree.cacheBuffer
-    property alias currentIndex: tree.currentIndex // Should this be currentRowIndex?
-
-    // Signals
-    signal activated
-
-
-    Rectangle {
-        id: colorRect
-        color: backgroundColor
-        anchors.fill: frameitem
-        anchors.margins: frameWidth
-    }
-
-    Component {
-        id: standardDelegate
-        Item {
-            height: Math.max(16, styleitem.implicitHeight)
-            property int implicitWidth: sizehint.paintedWidth + 4
-            Text {
-                id: label
-                width: parent.width
-                anchors.margins: 6
-                font.pointSize: itemstyle.fontPointSize
-                anchors.left: parent.left
-                anchors.right: parent.right
-                horizontalAlignment: itemTextAlignment
-                anchors.verticalCenter: parent.verticalCenter
-                elide: itemElideMode
-                text: itemValue ? itemValue : ""
-                color: itemForeground
-            }
-            Text {
-                id: sizehint
-                font: label.font
-                text: itemValue ? itemValue : ""
-                visible: false
-            }
-        }
-    }
-
-    StyleItem {
-        id: itemstyle
-        elementType: "item"
-        visible:false
-    }
-
-    Component {
-        id: nativeDelegate
-        // This gives more native styling, but might be less performant
-        StyleItem {
-            elementType: "item"
-            text:   itemValue
-            selected: itemSelected
-        }
-    }
-
-    Component {
-        id: headerDelegate
-        StyleItem {
-            elementType: "header"
-            activeControl: itemSort
-            raised: true
-            sunken: itemPressed
-            text: itemValue
-            hover: itemContainsMouse
-            info: itemPosition
-        }
-    }
-
-    Component {
-        id: rowDelegate
-        StyleItem {
-            id: rowstyle
-            elementType: "itemrow"
-            activeControl: itemAlternateBackground ? "alternate" : ""
-            selected: itemSelected ? "true" : "false"
-        }
-    }
-
-
-    StyleItem {
-        id: frameitem
-        elementType: "frame"
-        Component.onCompleted: frameWidth = styleitem.pixelMetric("defaultframewidth");
-        sunken: true
-        visible: frame
-        anchors.fill: parent
-        anchors.rightMargin: frame ? (frameAroundContents ? (verticalScrollBar.visible ? verticalScrollBar.width + 2 * frameMargins : 0) : 0) : 0
-        anchors.bottomMargin: frame ? (frameAroundContents ? (horizontalScrollBar.visible ? horizontalScrollBar.height + 2 * frameMargins : 0) : 0) : 0
-        anchors.topMargin: frame ? frameAroundContents : 0
-        anchors.leftMargin: frame ? frameAroundContents : 0
-        property int frameWidth
-        property int scrollbarspacing: styleitem.pixelMetric("scrollbarspacing");
-        property int frameMargins : frame ? scrollbarspacing : 0
-    }
-    MouseArea {
-        id: mousearea
-
-        anchors.fill: tree
-
-        property bool autoincrement: false
-        property bool autodecrement: false
-
-        onReleased: {
-            autoincrement = false
-            autodecrement = false
-        }
-
-        // Handle vertical scrolling whem dragging mouse outside boundraries
-        Timer { running: mousearea.autoincrement && verticalScrollBar.visible; repeat: true; interval: 20 ; onTriggered: incrementCurrentIndex()}
-        Timer { running: mousearea.autodecrement && verticalScrollBar.visible; repeat: true; interval: 20 ; onTriggered: decrementCurrentIndex()}
-
-        onMousePositionChanged: {
-            if (mouseY > tree.height && pressed) {
-                if (autoincrement) return;
-                autodecrement = false;
-                autoincrement = true;
-            } else if (mouseY < 0 && pressed) {
-                if (autodecrement) return;
-                autoincrement = false;
-                autodecrement = true;
-            } else  {
-                autoincrement = false;
-                autodecrement = false;
-            }
-            var y = Math.min(contentY + tree.height - 5, Math.max(mouseY + contentY, contentY));
-            var newIndex = tree.indexAt(0, y);
-            if (newIndex >= 0)
-                tree.currentIndex = tree.indexAt(0, y);
-        }
-
-        onPressed:  {
-            tree.forceActiveFocus()
-            var x = Math.min(contentWidth - 5, Math.max(mouseX + contentX, 0))
-            var y = Math.min(contentHeight - 5, Math.max(mouseY + contentY, 0))
-            tree.currentIndex = tree.indexAt(x, y)
-        }
-
-        onDoubleClicked: {
-            parent.activated()
-        }
-    }
-
-    function decrementCurrentIndex() {
-        scroller.blockUpdates = true;
-        tree.decrementCurrentIndex();
-        scroller.verticalValue = contentY;
-        scroller.blockUpdates = false;
-    }
-
-    function incrementCurrentIndex() {
-        scroller.blockUpdates = true;
-        tree.incrementCurrentIndex();
-        scroller.verticalValue = contentY;
-        scroller.blockUpdates = false;
-    }
-
-    ListView {
-        id: tree
-
-        property list<TableColumn> header
-        highlightFollowsCurrentItem: true
-        model: root.model
-        interactive: false
-
-        anchors.top: tableColumn.bottom
-        anchors.left: frameitem.left
-        anchors.right: frameitem.right
-        anchors.bottom: frameitem.bottom
-        anchors.margins: frameWidth
-        anchors.topMargin: -frameWidth
-        anchors.rightMargin: (!frameAroundContents && verticalScrollBar.visible ? verticalScrollBar.width: 0) + frameWidth
-        anchors.bottomMargin: (!frameAroundContents && horizontalScrollBar.visible ? horizontalScrollBar.height : 0)  + frameWidth
-
-        focus: true
-        clip: true
-
-        // Fills extra rows with alternate color
-        Column {
-            id: rowfiller
-            property variant rowHeight: Math.max(1, contentHeight / count)
-            property int rowCount: height/rowHeight
-            y: contentHeight
-            width: parent.width
-            visible: contentHeight > 0 && alternateRowColor && !verticalScrollBar.visible
-            height: parent.height - contentHeight
-            Repeater {
-                model: visible ? rowfiller.rowCount : 0
-                StyleItem {
-                    id: rowfill
-                    elementType: "itemrow"
-                    width: rowfiller.width
-                    height: rowfiller.rowHeight
-                    activeControl: (index + count) % 2 === 1 ? "alternate" : ""
-                }
-            }
-        }
-
-        Keys.onUpPressed: root.decrementCurrentIndex()
-        Keys.onDownPressed: root.incrementCurrentIndex()
-
-        Keys.onPressed: {
-            if (event.key == Qt.Key_PageUp) {
-                verticalScrollBar.value = verticalScrollBar.value - tree.height
-            } else if (event.key == Qt.Key_PageDown)
-                verticalScrollBar.value = verticalScrollBar.value + tree.height
-        }
-
-        onContentYChanged:  {
-            scroller.blockUpdates = true
-            scroller.verticalValue = tree.contentY
-            verticalScrollBar.value = tree.contentY
-            scroller.blockUpdates = false
-        }
-
-        onContentXChanged:  {
-            scroller.blockUpdates = true
-            scroller.horizontalValue = tree.contentX
-            horizontalScrollBar.value = tree.contentX
-            scroller.blockUpdates = false
-        }
-
-        delegate: Item {
-            id: rowitem
-            width: row.width
-            height: row.height
-            anchors.margins: frameWidth
-            property int rowIndex: model.index
-            property bool itemAlternateBackground: alternateRowColor && rowIndex % 2 == 1
-            property variant itemModelData: hasOwnProperty("modelData") ? modelData : null
-            Loader {
-                id: rowstyle
-                // row delegate
-                sourceComponent: itemAlternateBackground || itemSelected ? root.rowDelegate : null
-                // Row fills the tree width regardless of item size
-                // But scrollbar should not adjust to it
-                width: frameitem.width
-                height: row.height
-                x: contentX
-
-                property bool itemAlternateBackground: rowitem.itemAlternateBackground
-                property bool itemSelected: rowitem.ListView.isCurrentItem
-            }
-            Row {
-                id: row
-                anchors.left: parent.left
-
-                Repeater {
-                    id: repeater
-                    model: root.header.length
-                    Loader {
-                        id: itemDelegateLoader
-                        visible: header[index].visible
-                        sourceComponent: header[index].delegate ? header[index].delegate : itemDelegate
-                        property variant model: tree.model
-                        property variant role: header[index].role
-                        property variant modelData: itemModelData
-
-                        width: header[index].width
-                        height: item !== undefined ? item.height : Math.max(16, styleitem.implicitHeight)
-
-                        function getValue() {
-                            if (header[index].role.length && hasOwnProperty(header[index].role))
-                                return this[header[index].role]
-                            else if (modelData && modelData.hasOwnProperty(header[index].role))
-                                return modelData[header[index].role]
-                            else if (modelData)
-                                return modelData
-                            return ""
-                        }
-                        property variant itemValue: getValue()
-                        property bool itemSelected: rowitem.ListView.isCurrentItem
-                        property color itemForeground: itemSelected ? rowstyleitem.highlightedTextColor : rowstyleitem.textColor
-                        property int rowIndex: rowitem.rowIndex
-                        property int columnIndex: index
-                        property int itemElideMode: header[index].elideMode
-                        property int itemTextAlignment: header[index].textAlignment
-                    }
-                }
-                onWidthChanged: tree.contentWidth = width
-            }
-        }
-    }
-
-
-    Text{ id:text }
-
-    Item {
-        id: tableColumn
-
-        anchors.top: frameitem.top
-        anchors.left: frameitem.left
-        anchors.right: frameitem.right
-        anchors.margins: frameWidth
-
-        clip: true
-        visible: headerVisible
-        height: headerVisible ? styleitem.implicitHeight : frameWidth
-
-        Behavior on height { NumberAnimation{ duration: 80 } }
-
-        Row {
-            id: headerrow
-            anchors.top: parent.top
-            height:parent.height
-            x: -tree.contentX
-
-            Repeater {
-                id: repeater
-
-                property int targetIndex: -1
-                property int dragIndex: -1
-
-                model: header.length
-
-                delegate: Item {
-                    z:-index
-                    width: header[index].width
-                    visible: header[index].visible
-                    height: headerrow.height
-
-                    Loader {
-                        sourceComponent: root.headerDelegate
-                        anchors.fill: parent
-                        property string itemValue: header[index].title
-                        property string itemSort:  (sortIndicatorVisible && index == sortColumn) ? (sortIndicatorDirection == "up" ? "up" : "down") : "";
-                        property bool itemPressed: headerClickArea.pressed
-                        property bool itemContainsMouse: headerClickArea.containsMouse
-                        property string itemPosition: header.length === 1 ? "only" :
-                                                      index===header.length-1 ? "end" :
-                                                      index===0 ? "beginning" : ""
-                    }
-                    Rectangle{
-                        id: targetmark
-                        width: parent.width
-                        height:parent.height
-                        opacity: (index == repeater.targetIndex && repeater.targetIndex != repeater.dragIndex) ? 0.5 : 0
-                        Behavior on opacity { NumberAnimation{duration:160}}
-                        color: palette.highlight
-                        SystemPalette{id:palette}
-                    }
-
-                    MouseArea{
-                        id: headerClickArea
-                        drag.axis: Qt.YAxis
-                        hoverEnabled: true
-                        anchors.fill: parent
-                        onClicked: {
-                            if (sortColumn == index)
-                                sortIndicatorDirection = sortIndicatorDirection === "up" ? "down" : "up"
-                            sortColumn = index
-                        }
-                        // Here we handle moving header sections
-                        onMousePositionChanged: {
-                            if (pressed) { // only do this while dragging
-                                for (var h = 0 ; h < header.length ; ++h) {
-                                    if (drag.target.x > headerrow.children[h].x - 10) {
-                                        repeater.targetIndex = header.length - h - 1
-                                        break
-                                    }
-                                }
-                            }
-                        }
-
-                        onPressed: {
-                            repeater.dragIndex = index
-                            draghandle.x = parent.x
-                        }
-
-                        onReleased: {
-                            if (repeater.targetIndex >= 0 && repeater.targetIndex != index ) {
-                                // Rearrange the header sections
-                                var items = new Array
-                                for (var i = 0 ; i< header.length ; ++i)
-                                    items.push(header[i])
-                                items.splice(index, 1);
-                                items.splice(repeater.targetIndex, 0, header[index]);
-                                header = items
-                                if (sortColumn == index)
-                                    sortColumn = repeater.targetIndex
-                            }
-                            repeater.targetIndex = -1
-                        }
-                        drag.maximumX: 1000
-                        drag.minimumX: -1000
-                        drag.target: draghandle
-                    }
-
-                    Loader {
-                        id: draghandle
-                        property string itemValue: header[index].title
-                        property string itemSort:  (sortIndicatorVisible && index == sortColumn) ? (sortIndicatorDirection == "up" ? "up" : "down") : "";
-                        property bool itemPressed: headerClickArea.pressed
-                        property bool itemContainsMouse: headerClickArea.containsMouse
-                        property string itemPosition
-
-                        parent: tableColumn
-                        width: header[index].width
-                        height: parent.height
-                        sourceComponent: root.headerDelegate
-                        visible: headerClickArea.pressed
-                        opacity: 0.5
-                    }
-
-
-                    MouseArea {
-                        id: headerResizeHandle
-                        property int offset: 0
-                        property int minimumSize: 20
-                        anchors.rightMargin: -width/2
-                        width: 16 ; height: parent.height
-                        anchors.right: parent.right
-                        onPositionChanged:  {
-                            var newHeaderWidth = header[index].width + (mouseX - offset)
-                            header[index].width = Math.max(minimumSize, newHeaderWidth)
-                        }
-                        property bool found:false
-
-                        onDoubleClicked: {
-                            var row
-                            var minWidth =  0
-                            var listdata = tree.children[0]
-                            for (row = 0 ; row < listdata.children.length ; ++row){
-                                var item = listdata.children[row+1]
-                                if (item && item.children[1] && item.children[1].children[index] &&
-                                        item.children[1].children[index].children[0].hasOwnProperty("implicitWidth"))
-                                    minWidth = Math.max(minWidth, item.children[1].children[index].children[0].implicitWidth)
-                            }
-                            if (minWidth)
-                                header[index].width = minWidth
-                        }
-                        onPressedChanged: if(pressed)offset=mouseX
-                        CursorArea {
-                            anchors.fill: parent
-                            cursor: CursorArea.SplitHCursor
-                        }
-                    }
-                }
-            }
-        }
-        Loader {
-            id: loader
-            property string itemValue
-            property string itemSort
-            property bool itemPressed
-            property bool itemContainsMouse
-            property string itemPosition
-
-            anchors.top: parent.top
-            anchors.right: parent.right
-            anchors.bottom: headerrow.bottom
-            anchors.rightMargin: -2
-            sourceComponent: root.headerDelegate
-            width: root.width - headerrow.width + 2
-            visible: root.header.length
-            z:-1
-        }
-    }
-
-    Private.ScrollAreaHelper {
-        id: scroller
-        anchors.fill: parent
-        anchors.topMargin: styleitem.style == "mac" ? tableColumn.height + frameWidth: 0
-        scrollSpeed: 2
-    }
-
-    StyleItem {
-        z: 2
-        anchors.fill: parent
-        anchors.margins: -4
-        visible: highlightOnFocus && parent.activeFocus && styleitem.styleHint("focuswidget")
-        elementType: "focusframe"
-    }
-
-    StyleItem {
-        id: styleitem
-        elementType: "header"
-        visible:false
-        contentWidth: 16
-        contentHeight: fontHeight
-    }
-
-    StyleItem {
-        id: rowstyleitem
-        property color textColor: styleHint("textColor")
-        property color highlightedTextColor: styleHint("highlightedTextColor")
-        elementType: "item"
-        visible: false
-    }
-}
diff --git a/components/TextArea.qml b/components/TextArea.qml
deleted file mode 100644
index c7115ed..0000000
--- a/components/TextArea.qml
+++ /dev/null
@@ -1,123 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** All rights reserved.
-** Contact: Nokia Corporation (qt-info@nokia.com)
-**
-** This file is part of the Qt Components project.
-**
-** $QT_BEGIN_LICENSE:BSD$
-** You may use this file under the terms of the BSD license as follows:
-**
-** "Redistribution and use in source and binary forms, with or without
-** modification, are permitted provided that the following conditions are
-** met:
-**   * Redistributions of source code must retain the above copyright
-**     notice, this list of conditions and the following disclaimer.
-**   * Redistributions in binary form must reproduce the above copyright
-**     notice, this list of conditions and the following disclaimer in
-**     the documentation and/or other materials provided with the
-**     distribution.
-**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
-**     the names of its contributors may be used to endorse or promote
-**     products derived from this software without specific prior written
-**     permission.
-**
-** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-import QtQuick 1.1
-import "custom" as Components
-
-ScrollArea {
-    id:area
-    color: "white"
-    width: 280
-    height: 120
-    contentWidth: edit.paintedWidth + (2 * documentMargins)
-
-    property alias text: edit.text
-    property alias wrapMode: edit.wrapMode
-    property alias readOnly: edit.readOnly
-    property bool tabChangesFocus: false
-    property alias font: edit.font
-    property alias activeFocusOnPress: edit.activeFocusOnPress
-
-    highlightOnFocus: true
-    property int documentMargins: 4
-    frame: true
-
-    function append (string) {
-        text += "\n" + string
-        verticalScrollBar.value = verticalScrollBar.maximumValue
-    }
-
-    Item {
-        anchors.left: parent.left
-        anchors.top: parent.top
-        height: edit.paintedHeight + area.height - viewportHeight + 2 * documentMargins + 4
-        anchors.margins: documentMargins
-
-        TextEdit {
-            id: edit
-            wrapMode: TextEdit.WordWrap;
-            width: area.width
-            height: area.height
-            selectByMouse: true
-            readOnly: false
-            color: syspal.text
-
-            SystemPalette {
-                id: syspal
-                colorGroup: enabled ? SystemPalette.Active : SystemPalette.Disabled
-            }
-
-            CursorArea {
-                anchors.fill: parent
-                cursor: CursorArea.IBeamCursor
-            }
-
-            KeyNavigation.priority: KeyNavigation.BeforeItem
-            KeyNavigation.tab: area.tabChangesFocus ? area.KeyNavigation.tab : null
-            KeyNavigation.backtab: area.tabChangesFocus ? area.KeyNavigation.backtab : null
-
-            onPaintedSizeChanged: {
-                area.contentWidth = paintedWidth + (2 * documentMargins)
-            }
-
-            // keep textcursor within scrollarea
-            onCursorPositionChanged: {
-                if (cursorRectangle.y >= area.contentY + area.viewportHeight - 1.5*cursorRectangle.height - documentMargins)
-                    area.contentY = cursorRectangle.y - area.viewportHeight + 1.5*cursorRectangle.height + documentMargins
-                else if (cursorRectangle.y < area.contentY)
-                    area.contentY = cursorRectangle.y
-
-                if (cursorRectangle.x >= area.contentX + area.viewportWidth - documentMargins) {
-                    area.contentX = cursorRectangle.x - area.viewportWidth + documentMargins
-                } else if (cursorRectangle.x < area.contentX)
-                    area.contentX = cursorRectangle.x
-            }
-        }
-    }
-
-    Keys.onPressed: {
-        if (event.key == Qt.Key_PageUp) {
-            verticalValue = verticalValue - area.height
-        } else if (event.key == Qt.Key_PageDown)
-            verticalValue = verticalValue + area.height
-    }
-
-    Component.onCompleted: edit.width = area.viewportWidth - (2 * documentMargins)
-}
diff --git a/components/TextField.qml b/components/TextField.qml
deleted file mode 100644
index f81f2a7..0000000
--- a/components/TextField.qml
+++ /dev/null
@@ -1,88 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** All rights reserved.
-** Contact: Nokia Corporation (qt-info@nokia.com)
-**
-** This file is part of the Qt Components project.
-**
-** $QT_BEGIN_LICENSE:BSD$
-** You may use this file under the terms of the BSD license as follows:
-**
-** "Redistribution and use in source and binary forms, with or without
-** modification, are permitted provided that the following conditions are
-** met:
-**   * Redistributions of source code must retain the above copyright
-**     notice, this list of conditions and the following disclaimer.
-**   * Redistributions in binary form must reproduce the above copyright
-**     notice, this list of conditions and the following disclaimer in
-**     the documentation and/or other materials provided with the
-**     distribution.
-**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
-**     the names of its contributors may be used to endorse or promote
-**     products derived from this software without specific prior written
-**     permission.
-**
-** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-import QtQuick 1.1
-import "custom" as Components
-
-Components.TextField {
-    id: textfield
-    minimumWidth: 200
-
-    placeholderText: ""
-    topMargin: 2
-    bottomMargin: 2
-    leftMargin: 8
-    rightMargin: 8
-
-    implicitWidth: backgroundItem.implicitWidth
-    implicitHeight: backgroundItem.implicitHeight
-
-    clip: false
-
-    property string styleHint
-
-    background: StyleItem {
-        anchors.fill: parent
-        elementType: "edit"
-        sunken: true
-        hasFocus: textfield.activeFocus
-        hover: containsMouse
-        hint: textfield.styleHint
-        contentWidth: 200
-        contentHeight: 25
-    }
-
-    Item {
-        id: focusFrame
-        anchors.fill: textfield
-        parent: textfield
-        visible: framestyle.styleHint("focuswidget") && styleHint !== "rounded"
-        StyleItem {
-            id: framestyle
-            anchors.margins: -2
-            anchors.rightMargin:-4
-            anchors.bottomMargin:-4
-            anchors.fill: parent
-            visible: textfield.activeFocus
-            hint: textfield.styleHint
-            elementType: "focusframe"
-        }
-    }
-}
diff --git a/components/ToolBar.qml b/components/ToolBar.qml
deleted file mode 100644
index 7e09359..0000000
--- a/components/ToolBar.qml
+++ /dev/null
@@ -1,50 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** All rights reserved.
-** Contact: Nokia Corporation (qt-info@nokia.com)
-**
-** This file is part of the Qt Components project.
-**
-** $QT_BEGIN_LICENSE:BSD$
-** You may use this file under the terms of the BSD license as follows:
-**
-** "Redistribution and use in source and binary forms, with or without
-** modification, are permitted provided that the following conditions are
-** met:
-**   * Redistributions of source code must retain the above copyright
-**     notice, this list of conditions and the following disclaimer.
-**   * Redistributions in binary form must reproduce the above copyright
-**     notice, this list of conditions and the following disclaimer in
-**     the documentation and/or other materials provided with the
-**     distribution.
-**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
-**     the names of its contributors may be used to endorse or promote
-**     products derived from this software without specific prior written
-**     permission.
-**
-** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-import QtQuick 1.1
-import "."
-import "custom" as Components
-
-StyleItem {
-    id: toolbar
-    width: parent ? parent.width : 200
-    height: implicitHeight
-    elementType: "toolbar"
-}
diff --git a/components/ToolButton.qml b/components/ToolButton.qml
deleted file mode 100644
index 8cf4209..0000000
--- a/components/ToolButton.qml
+++ /dev/null
@@ -1,98 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** All rights reserved.
-** Contact: Nokia Corporation (qt-info@nokia.com)
-**
-** This file is part of the Qt Components project.
-**
-** $QT_BEGIN_LICENSE:BSD$
-** You may use this file under the terms of the BSD license as follows:
-**
-** "Redistribution and use in source and binary forms, with or without
-** modification, are permitted provided that the following conditions are
-** met:
-**   * Redistributions of source code must retain the above copyright
-**     notice, this list of conditions and the following disclaimer.
-**   * Redistributions in binary form must reproduce the above copyright
-**     notice, this list of conditions and the following disclaimer in
-**     the documentation and/or other materials provided with the
-**     distribution.
-**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
-**     the names of its contributors may be used to endorse or promote
-**     products derived from this software without specific prior written
-**     permission.
-**
-** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-import QtQuick 1.1
-import "custom" as Components
-
-Components.Button {
-    id:button
-
-    property alias containsMouse: tooltip.containsMouse
-    property string iconName
-    property string styleHint
-    property int iconSize: (backgroundItem && backgroundItem.style === "mac" && button.styleHint.indexOf("segmented") !== -1) ? 16 : 24
-
-    implicitWidth: backgroundItem.implicitWidth
-    implicitHeight: backgroundItem.implicitHeight
-
-    TooltipArea {
-        // Note this will eat hover events
-        id: tooltip
-        anchors.fill: parent
-        text: button.tooltip
-    }
-
-    background: StyleItem {
-        id: styleitem
-        anchors.fill: parent
-        elementType: "toolbutton"
-        on: pressed | checked
-        sunken: pressed
-        raised: containsMouse
-        hover: containsMouse
-        info: __position
-        hint: button.styleHint
-        contentWidth: Math.max(textitem.paintedWidth, 32)
-        contentHeight: 32
-        Text {
-            id: textitem
-            text: button.text
-            anchors.centerIn: parent
-            visible: button.iconSource == ""
-        }
-    }
-    Image {
-        id: themeIcon
-        anchors.centerIn: parent
-        opacity: enabled ? 1 : 0.5
-        smooth: true
-        sourceSize.width: iconSize
-        property string iconPath: "image://desktoptheme/" + button.iconName
-        source: backgroundItem && backgroundItem.hasThemeIcon(iconName) ? iconPath : ""
-        fillMode: Image.PreserveAspectFit
-        Image {
-            // Use fallback icon
-            anchors.centerIn: parent
-            sourceSize: parent.sourceSize
-            visible: (themeIcon.status != Image.Ready)
-            source: visible ? button.iconSource : ""
-        }
-    }
-}
diff --git a/components/components.pro b/components/components.pro
deleted file mode 100644
index 51423a9..0000000
--- a/components/components.pro
+++ /dev/null
@@ -1,62 +0,0 @@
-    TEMPLATE = subdirs # XXX: Avoid call the linker
-TARGETPATH = QtDesktop
-
-symbian {
-    INSTALL_IMPORTS = /resource/qt/imports
-} else {
-    isEmpty(INSTALL_IMPORTS):INSTALL_IMPORTS = $$[QT_INSTALL_IMPORTS]
-}
-
-QML_FILES = \
-            qmldir \
-            Label.qml \
-            Button.qml \
-            ComboBox.qml \
-            Dial.qml \
-            Dialog.qml \
-            ProgressBar.qml \
-            ScrollBar.qml \
-            Switch.qml \
-            TableView.qml \
-            ToolBar.qml \
-            ButtonRow.qml \
-            ButtonColumn.qml \
-            Frame.qml \
-            MenuItem.qml   \
-            Slider.qml \
-            TabBar.qml \
-            Tab.qml \
-            ToolButton.qml \
-            CheckBox.qml \
-            ContextMenu.qml \
-            GroupBox.qml \
-            RadioButton.qml \
-            SpinBox.qml \
-            TabFrame.qml \
-            TextArea.qml \
-            ScrollArea.qml \
-            SplitterRow.qml \
-            SplitterColumn.qml \
-            StatusBar.qml \
-            TableColumn.qml \
-            TextField.qml \
-            ApplicationWindow.qml
-
-QML_DIRS = \
-        custom \
-	private \
-        images 
-
-qmlfiles.files = $$QML_FILES
-qmlfiles.sources = $$QML_FILES
-qmlfiles.path = $$INSTALL_IMPORTS/$$TARGETPATH
-
-qmldirs.files = $$QML_DIRS
-qmldirs.sources = $$QML_DIRS
-qmldirs.path = $$INSTALL_IMPORTS/$$TARGETPATH
-
-INSTALLS += qmlfiles qmldirs
-
-symbian {
-    DEPLOYMENT += qmlfiles qmldirs
-}
diff --git a/components/custom/BasicButton.qml b/components/custom/BasicButton.qml
deleted file mode 100644
index 593d9c9..0000000
--- a/components/custom/BasicButton.qml
+++ /dev/null
@@ -1,103 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** All rights reserved.
-** Contact: Nokia Corporation (qt-info@nokia.com)
-**
-** This file is part of the Qt Components project.
-**
-** $QT_BEGIN_LICENSE:BSD$
-** You may use this file under the terms of the BSD license as follows:
-**
-** "Redistribution and use in source and binary forms, with or without
-** modification, are permitted provided that the following conditions are
-** met:
-**   * Redistributions of source code must retain the above copyright
-**     notice, this list of conditions and the following disclaimer.
-**   * Redistributions in binary form must reproduce the above copyright
-**     notice, this list of conditions and the following disclaimer in
-**     the documentation and/or other materials provided with the
-**     distribution.
-**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
-**     the names of its contributors may be used to endorse or promote
-**     products derived from this software without specific prior written
-**     permission.
-**
-** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-import QtQuick 1.1
-import "./behaviors"    // ButtonBehavior
-
-Item {
-    id: button
-
-    signal clicked
-    property alias pressed: behavior.pressed
-    property alias containsMouse: behavior.containsMouse
-    property alias checkable: behavior.checkable  // button toggles between checked and !checked
-    property alias checked: behavior.checked
-    property bool activeFocusOnPress: false
-
-    property Component background: null
-    property Item backgroundItem: backgroundLoader.item
-
-    property color textColor: syspal.text;
-    property string tooltip
-
-    signal toolTipTriggered
-
-    // implementation
-
-    property string __position: "only"
-    implicitWidth: backgroundLoader.item.width
-    implicitHeight: backgroundLoader.item.height
-
-    function animateClick() {
-        behavior.pressed = true
-        behavior.clicked()
-        animateClickTimer.start()
-    }
-
-    Timer {
-        id: animateClickTimer
-        interval: 250
-        onTriggered: behavior.pressed = false
-    }
-
-    Loader {
-        id: backgroundLoader
-        anchors.fill: parent
-        sourceComponent: background
-        property alias styledItem: button
-        property alias position: button.__position
-    }
-
-    ButtonBehavior {
-        id: behavior
-        anchors.fill: parent
-        onClicked: button.clicked()
-        onPressedChanged: if (activeFocusOnPress) button.focus = true
-        onMouseMoved: {tiptimer.restart()}
-        Timer{
-            id: tiptimer
-            interval:1000
-            running:containsMouse && tooltip.length
-            onTriggered: button.toolTipTriggered()
-        }
-    }
-
-    SystemPalette { id: syspal }
-}
diff --git a/components/custom/Button.qml b/components/custom/Button.qml
deleted file mode 100644
index 3246fcc..0000000
--- a/components/custom/Button.qml
+++ /dev/null
@@ -1,61 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** All rights reserved.
-** Contact: Nokia Corporation (qt-info@nokia.com)
-**
-** This file is part of the Qt Components project.
-**
-** $QT_BEGIN_LICENSE:BSD$
-** You may use this file under the terms of the BSD license as follows:
-**
-** "Redistribution and use in source and binary forms, with or without
-** modification, are permitted provided that the following conditions are
-** met:
-**   * Redistributions of source code must retain the above copyright
-**     notice, this list of conditions and the following disclaimer.
-**   * Redistributions in binary form must reproduce the above copyright
-**     notice, this list of conditions and the following disclaimer in
-**     the documentation and/or other materials provided with the
-**     distribution.
-**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
-**     the names of its contributors may be used to endorse or promote
-**     products derived from this software without specific prior written
-**     permission.
-**
-** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-import QtQuick 1.1
-
-BasicButton {
-    id: button
-
-    property string text
-    property url iconSource
-    property Component label: null
-
-    // implementation
-
-    background: defaultStyle.background
-    property Item labelItem: labelLoader.item
-
-    Loader {
-        id: labelLoader
-        anchors.fill: parent
-        property alias styledItem: button
-        sourceComponent: label
-    }
-}
diff --git a/components/custom/ButtonColumn.qml b/components/custom/ButtonColumn.qml
deleted file mode 100644
index a94cbba..0000000
--- a/components/custom/ButtonColumn.qml
+++ /dev/null
@@ -1,50 +0,0 @@
-import Qt 4.7
-import "ButtonGroup.js" as Behavior
-
-/*
-   Class: ButtonColumn
-   A ButtonColumn allows you to group Buttons in a column. It provides a selection-behavior as well.
-
-   Note: This component don't support the enabled property.
-   If you need to disable it you should disable all the buttons inside it.
-
-   <code>
-       ButtonColumn {
-           Button { text: "Top" }
-           Button { text: "Bottom" }
-       }
-   </code>
-*/
-Column {
-    id: root
-
-    /*
-     * Property: exclusive
-     * [bool=true] Specifies the grouping behavior. If enabled, the checked property on buttons contained
-     * in the group will be exclusive.
-     *
-     * Note that a button in an exclusive group will allways be checkable
-     */
-    property bool exclusive: true
-
-    /*
-     * Property: styleHint
-     * [string] Used to indicate special OS specific button types
-     */
-    property string styleHint
-
-    /*
-     * Property: checkedButton
-     * [string] Contains the last checked Button.
-     */
-    property Item checkedButton;
-
-    Component.onCompleted: {
-        Behavior.create(root, {direction: Qt.Vertical});
-    }
-
-    Component.onDestruction: {
-        Behavior.destroy();
-    }
-
-}
diff --git a/components/custom/ButtonGroup.js b/components/custom/ButtonGroup.js
deleted file mode 100644
index 5b0d9ad..0000000
--- a/components/custom/ButtonGroup.js
+++ /dev/null
@@ -1,141 +0,0 @@
-var self;
-var checkHandlers = [];
-var visibleButtons = [];
-var nonVisibleButtons = [];
-var direction;
-
-function create(that, options) {
-    self = that;
-    direction = options.direction || Qt.Horizontal;
-    self.childrenChanged.connect(rebuild);
-//    self.widthChanged.connect(resizeChildren);
-    build();
-}
-
-function isButton(item) {
-    if (item && item.hasOwnProperty("__position"))
-        return true;
-    return false;
-}
-
-function hasChecked(item) {
-    return (item && item.hasOwnProperty("checked"));
-}
-
-function destroy() {
-    self.childrenChanged.disconnect(rebuild);
-//    self.widthChanged.disconnect(resizeChildren);
-    cleanup();
-}
-
-function build() {
-    visibleButtons = [];
-    nonVisibleButtons = [];
-
-    for (var i = 0, item; (item = self.children[i]); i++) {
-
-        if (item.hasOwnProperty("styleHint"))
-            item.styleHint = styleHint;
-
-        if (!hasChecked(item))
-            continue;
-
-        item.visibleChanged.connect(rebuild); // Not optimal, but hardly a bottleneck in your app
-        if (!item.visible) {
-            nonVisibleButtons.push(item);
-            continue;
-        }
-        visibleButtons.push(item);
-
-        if (self.exclusive && item.hasOwnProperty("checkable"))
-            item.checkable = true;
-
-        if (self.exclusive) {
-            item.checked = false;
-            checkHandlers.push(checkExclusive(item));
-            item.checkedChanged.connect(checkHandlers[checkHandlers.length - 1]);
-        }
-    }
-
-    var nrButtons = visibleButtons.length;
-    if (nrButtons == 0)
-        return;
-
-    if (self.checkedButton)
-        self.checkedButton.checked = true;
-    else if (self.exclusive) {
-        self.checkedButton = visibleButtons[0];
-        self.checkedButton.checked = true;
-    }
-
-    if (nrButtons == 1) {
-        finishButton(visibleButtons[0], "only");
-    } else {
-        finishButton(visibleButtons[0], direction == Qt.Horizontal ? "leftmost" : "top");
-        for (var i = 1; i < nrButtons - 1; i++)
-            finishButton(visibleButtons[i], direction == Qt.Horizontal ? "h_middle": "v_middle");
-        finishButton(visibleButtons[nrButtons - 1], direction == Qt.Horizontal ? "rightmost" : "bottom");
-    }
-}
-
-function finishButton(button, position) {
-    if (isButton(button)) {
-        button.__position = position;
-        if (direction == Qt.Vertical) {
-            button.anchors.left = self.left     //mm How to make this not cause binding loops? see QTBUG-17162
-            button.anchors.right = self.right
-        }
-    }
-}
-
-function cleanup() {
-    visibleButtons.forEach(function(item, i) {
-        if (checkHandlers[i])
-            item.checkedChanged.disconnect(checkHandlers[i]);
-        item.visibleChanged.disconnect(rebuild);
-    });
-    checkHandlers = [];
-
-    nonVisibleButtons.forEach(function(item, i) {
-        item.visibleChanged.disconnect(rebuild);
-    });
-}
-
-function rebuild() {
-    if (self == undefined)
-        return;
-
-    cleanup();
-    build();
-}
-
-function resizeChildren() {
-    if (direction != Qt.Horizontal)
-        return;
-
-    var extraPixels = self.width % visibleButtons;
-    var buttonSize = (self.width - extraPixels) / visibleButtons;
-    visibleButtons.forEach(function(item, i) {
-        if (!item || !item.visible)
-            return;
-        item.width = buttonSize + (extraPixels > 0 ? 1 : 0);
-        if (extraPixels > 0)
-            extraPixels--;
-    });
-}
-
-function checkExclusive(item) {
-    var button = item;
-    return function() {
-        for (var i = 0, ref; (ref = visibleButtons[i]); i++) {
-            if (ref.checked == (button === ref))
-                continue;
-
-            // Disconnect the signal to avoid recursive calls
-            ref.checkedChanged.disconnect(checkHandlers[i]);
-            ref.checked = !ref.checked;
-            ref.checkedChanged.connect(checkHandlers[i]);
-        }
-        self.checkedButton = button;
-    }
-}
diff --git a/components/custom/ButtonRow.qml b/components/custom/ButtonRow.qml
deleted file mode 100644
index c17c9eb..0000000
--- a/components/custom/ButtonRow.qml
+++ /dev/null
@@ -1,48 +0,0 @@
-import Qt 4.7
-import "ButtonGroup.js" as Behavior
-
-/*
-   Class: ButtonRow
-   A ButtonRow allows you to group Buttons in a row. It provides a selection-behavior as well.
-
-   Note: This component don't support the enabled property.
-   If you need to disable it you should disable all the buttons inside it.
-
-   <code>
-       ButtonRow {
-           Button { text: "Left" }
-           Button { text: "Right" }
-       }
-   </code>
-*/
-Row {
-    id: root
-
-    /*
-     * Property: exclusive
-     * [bool=false] Specifies the grouping behavior. If enabled, the checked property on buttons contained
-     * in the group will be exclusive.
-     *
-     * Note that a button in an exclusive group will allways be checkable
-     */
-    property bool exclusive: false
-
-    /*
-     * Property: styleHint
-     * [string] Used to indicate special OS specific button types
-     */
-    property string styleHint
-    /*
-     * Property: checkedButton
-     * [string] Contains the last checked Button.
-     */
-    property Item checkedButton;
-
-    Component.onCompleted: {
-        Behavior.create(root, {direction: Qt.Horizontal});
-    }
-
-    Component.onDestruction: {
-        Behavior.destroy();
-    }
-}
diff --git a/components/custom/CheckBox.qml b/components/custom/CheckBox.qml
deleted file mode 100644
index 3197253..0000000
--- a/components/custom/CheckBox.qml
+++ /dev/null
@@ -1,76 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** All rights reserved.
-** Contact: Nokia Corporation (qt-info@nokia.com)
-**
-** This file is part of the Qt Components project.
-**
-** $QT_BEGIN_LICENSE:BSD$
-** You may use this file under the terms of the BSD license as follows:
-**
-** "Redistribution and use in source and binary forms, with or without
-** modification, are permitted provided that the following conditions are
-** met:
-**   * Redistributions of source code must retain the above copyright
-**     notice, this list of conditions and the following disclaimer.
-**   * Redistributions in binary form must reproduce the above copyright
-**     notice, this list of conditions and the following disclaimer in
-**     the documentation and/or other materials provided with the
-**     distribution.
-**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
-**     the names of its contributors may be used to endorse or promote
-**     products derived from this software without specific prior written
-**     permission.
-**
-** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-import QtQuick 1.1
-import "./behaviors"
-
-FocusScope {
-    id: checkBox
-
-    signal clicked
-    property alias pressed: behavior.pressed
-    property alias checked: behavior.checked
-    property alias containsMouse: behavior.containsMouse
-
-    property Component background: null
-    property Item backgroundItem: backgroundLoader.item
-
-    // implementation
-
-    Loader {
-        id: backgroundLoader
-        anchors.fill: parent
-        property alias styledItem: checkBox
-        sourceComponent: background
-    }
-
-    ButtonBehavior {
-        id: behavior
-        focus: true
-        anchors.fill: parent
-        checkable: true
-        onClicked: {
-            if (checkBox.activeFocusOnPress)
-                checkBox.forceActiveFocus();
-            checkBox.clicked();
-        }
-    }
-    Keys.onSpacePressed: {clicked(); checked = !checked; }
-}
diff --git a/components/custom/GroupBox.qml b/components/custom/GroupBox.qml
deleted file mode 100644
index e791008..0000000
--- a/components/custom/GroupBox.qml
+++ /dev/null
@@ -1,94 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** All rights reserved.
-** Contact: Nokia Corporation (qt-info@nokia.com)
-**
-** This file is part of the Qt Components project.
-**
-** $QT_BEGIN_LICENSE:BSD$
-** You may use this file under the terms of the BSD license as follows:
-**
-** "Redistribution and use in source and binary forms, with or without
-** modification, are permitted provided that the following conditions are
-** met:
-**   * Redistributions of source code must retain the above copyright
-**     notice, this list of conditions and the following disclaimer.
-**   * Redistributions in binary form must reproduce the above copyright
-**     notice, this list of conditions and the following disclaimer in
-**     the documentation and/or other materials provided with the
-**     distribution.
-**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
-**     the names of its contributors may be used to endorse or promote
-**     products derived from this software without specific prior written
-**     permission.
-**
-** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-import QtQuick 1.1
-
-Item {
-    id: groupbox
-
-    implicitWidth: adjustToContentSize ? Math.max(200, contentWidth + loader.leftMargin + loader.rightMargin) : 100
-    implicitHeight: adjustToContentSize ? contentHeight + loader.topMargin + loader.bottomMargin : 100
-
-    default property alias data: content.data
-
-    property string title
-    property bool checkable: false
-    property int contentWidth: content.childrenRect.width
-    property int contentHeight: content.childrenRect.height
-    property double contentOpacity: 1
-
-    property Component background: null
-    property Item backgroundItem: loader.item
-
-    property Item checkbox: check
-    property alias checked: check.checked
-    property bool adjustToContentSize: false // Resizes groupbox to fit contents.
-                                             // Note when using this, you cannot anchor children
-    Loader {
-        id: loader
-        anchors.fill: parent
-        property int topMargin: title.length > 0 || checkable ? 22 : 4
-        property int bottomMargin: 4
-        property int leftMargin: 4
-        property int rightMargin: 4
-        property alias styledItem: groupbox
-        sourceComponent: background
-    }
-    CheckBox {
-        id: check
-        checked: true
-        anchors.top: parent.top
-        anchors.left: parent.left
-        anchors.right: parent.right
-        height: loader.topMargin
-    }
-    Item {
-        id:content
-        z: 1
-        focus: true
-        opacity: contentOpacity
-        anchors.topMargin: loader.topMargin
-        anchors.leftMargin: 8
-        anchors.rightMargin: 8
-        anchors.bottomMargin: 8
-        anchors.fill: parent
-        enabled: (!checkable || checkbox.checked)
-    }
-}
diff --git a/components/custom/ProgressBar.qml b/components/custom/ProgressBar.qml
deleted file mode 100644
index 915ff60..0000000
--- a/components/custom/ProgressBar.qml
+++ /dev/null
@@ -1,90 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** All rights reserved.
-** Contact: Nokia Corporation (qt-info@nokia.com)
-**
-** This file is part of the Qt Components project.
-**
-** $QT_BEGIN_LICENSE:BSD$
-** You may use this file under the terms of the BSD license as follows:
-**
-** "Redistribution and use in source and binary forms, with or without
-** modification, are permitted provided that the following conditions are
-** met:
-**   * Redistributions of source code must retain the above copyright
-**     notice, this list of conditions and the following disclaimer.
-**   * Redistributions in binary form must reproduce the above copyright
-**     notice, this list of conditions and the following disclaimer in
-**     the documentation and/or other materials provided with the
-**     distribution.
-**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
-**     the names of its contributors may be used to endorse or promote
-**     products derived from this software without specific prior written
-**     permission.
-**
-** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-import QtQuick 1.1
-
-Item {
-    id: progressBar
-
-    property real value: 0
-    property real minimumValue: 0
-    property real maximumValue: 1
-    property bool indeterminate: false
-    property bool containsMouse: mouseArea.containsMouse
-
-    property int leftMargin: 0
-    property int topMargin: 0
-    property int rightMargin: 0
-    property int bottomMargin: 0
-
-    property int minimumWidth: 0
-    property int minimumHeight: 0
-
-    property Component background: null
-    property Item backgroundItem: groove.item
-
-    property color backgroundColor: syspal.base
-    property color progressColor: syspal.highlight
-
-    Loader {
-        id: groove
-        property alias indeterminate:progressBar.indeterminate
-        property alias value:progressBar.value
-        property alias maximumValue:progressBar.maximumValue
-        property alias minimumValue:progressBar.minimumValue
-
-        sourceComponent: background
-        anchors.fill: parent
-    }
-
-    Item {
-        anchors.fill: parent
-        anchors.leftMargin: leftMargin
-        anchors.rightMargin: rightMargin
-        anchors.topMargin: topMargin
-        anchors.bottomMargin: bottomMargin
-    }
-
-    MouseArea {
-        id: mouseArea
-        anchors.fill: parent
-        hoverEnabled: true
-    }
-}
diff --git a/components/custom/Slider.qml b/components/custom/Slider.qml
deleted file mode 100644
index 6d47d61..0000000
--- a/components/custom/Slider.qml
+++ /dev/null
@@ -1,300 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** All rights reserved.
-** Contact: Nokia Corporation (qt-info@nokia.com)
-**
-** This file is part of the Qt Components project.
-**
-** $QT_BEGIN_LICENSE:BSD$
-** You may use this file under the terms of the BSD license as follows:
-**
-** "Redistribution and use in source and binary forms, with or without
-** modification, are permitted provided that the following conditions are
-** met:
-**   * Redistributions of source code must retain the above copyright
-**     notice, this list of conditions and the following disclaimer.
-**   * Redistributions in binary form must reproduce the above copyright
-**     notice, this list of conditions and the following disclaimer in
-**     the documentation and/or other materials provided with the
-**     distribution.
-**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
-**     the names of its contributors may be used to endorse or promote
-**     products derived from this software without specific prior written
-**     permission.
-**
-** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-import QtQuick 1.1
-import "../"
-
-Item {
-    id: slider
-
-    // COMMON API
-    property int orientation: Qt.Horizontal
-    property alias minimumValue: range.minimumValue
-    property alias maximumValue: range.maximumValue
-    property alias inverted: range.inverted
-    property bool updateValueWhileDragging: true
-    property alias pressed: mouseArea.pressed
-    property alias stepSize: range.stepSize
-    property alias hoverEnabled: mouseArea.hoverEnabled
-
-    // NOTE: this property is in/out, the user can set it, create bindings to it, and
-    // at the same time the slider wants to update. There's no way in QML to do this kind
-    // of updates AND allow the user bind it (without a Binding object). That's the
-    // reason this is an alias to a C++ property in range model.
-    property alias value: range.value
-    property bool containsMouse: mouseArea.containsMouse
-
-    // CONVENIENCE TO BE USED BY STYLES
-
-    property int leftMargin: 0
-    property int rightMargin: 0
-
-    // EXTENSIONS
-    // Indicate that we want animations in the Slider, people customizing should
-    // look at it to decide whether or not active animations.
-    property bool animated: true
-    property bool activeFocusOnPress: false
-
-    // Value indicator displays the current value near the slider
-    property bool valueIndicatorVisible: true
-    property int valueIndicatorMargin: 10
-    property string valueIndicatorPosition: _isVertical ? "Left" : "Top"
-
-    // Reimplement this function to control how the value is shown in the
-    // indicator.
-    function formatValue(v) {
-        return Math.round(v);
-    }
-
-    // Hooks for customizing the pieces of the slider
-    property Component groove: null
-    property Component handle: null
-    property Component valueIndicator: null
-
-    // PRIVATE/CONVENIENCE
-    property bool _isVertical: orientation == Qt.Vertical
-
-    // This is a template slider, so every piece can be modified by passing a
-    // different Component. The main elements in the implementation are
-    //
-    // - the 'range' does the calculations to map position to/from value,
-    //   it also serves as a data storage for both properties;
-    //
-    // - the 'fakeHandle' is what the mouse area drags on the screen, it feeds
-    //   the 'range' position and also reads it when convenient;
-    //
-    // - the real 'handle' it is the visual representation of the handle, that
-    //   just follows the 'fakeHandle' position.
-    //
-    // When the 'updateValueWhileDragging' is false and we are dragging, we stop
-    // feeding the range with position information, delaying until the next
-    // mouse release.
-    //
-    // Everything is encapsulated in a contents Item, so for the
-    // vertical slider, we just swap the height/width, make it
-    // horizontal, and then use rotation to make it vertical again.
-
-    Item {
-        id: contents
-
-        width: _isVertical ? slider.height : slider.width
-        height: _isVertical ? slider.width : slider.height
-        rotation: _isVertical ? -90 : 0
-
-        anchors.centerIn: slider
-
-        RangeModel {
-            id: range
-            minimumValue: 0.0
-            maximumValue: 1.0
-            value: 0
-            stepSize: 0.0
-            inverted: false
-
-            positionAtMinimum: leftMargin
-            positionAtMaximum: contents.width - rightMargin
-        }
-
-        Loader {
-            id: grooveLoader
-            anchors.fill: parent
-            sourceComponent: groove
-
-            property real handlePosition : handleLoader.x
-            function positionForValue(value) {
-                return range.positionForValue(value) - leftMargin;
-            }
-        }
-
-        Loader {
-            id: handleLoader
-            transform: Translate { x: - handleLoader.width / 2 }
-
-            anchors.verticalCenter: grooveLoader.verticalCenter
-
-            sourceComponent: handle
-
-            x: fakeHandle.x
-            Behavior on x {
-                id: behavior
-                enabled: !mouseArea.drag.active && slider.animated
-
-                PropertyAnimation {
-                    duration: behavior.enabled ? 150 : 0
-                    easing.type: Easing.OutSine
-                }
-            }
-        }
-
-        Item {
-            id: fakeHandle
-            width: handleLoader.width
-            height: handleLoader.height
-            transform: Translate { x: - handleLoader.width / 2 }
-        }
-
-        MouseArea {
-            id: mouseArea
-            hoverEnabled: true
-            anchors.centerIn: parent
-            anchors.horizontalCenterOffset: (slider.leftMargin - slider.rightMargin) / 2
-
-            width: parent.width + handleLoader.width - slider.rightMargin - slider.leftMargin
-            height: parent.height
-
-            drag.target: fakeHandle
-            drag.axis: Drag.XAxis
-            drag.minimumX: range.positionAtMinimum
-            drag.maximumX: range.positionAtMaximum
-
-            onPressed: {
-
-                if (activeFocusOnPress)
-                    slider.focus = true;
-
-                // Clamp the value
-                var newX = Math.max(mouse.x, drag.minimumX);
-                newX = Math.min(newX, drag.maximumX);
-
-                // Debounce the press: a press event inside the handler will not
-                // change its position, the user needs to drag it.
-
-                // Note this really messes up things for scrollbar
-                // if (Math.abs(newX - fakeHandle.x) > handleLoader.width / 2)
-                    range.position = newX;
-            }
-
-            onReleased: {
-                // If we don't update while dragging, this is the only
-                // moment that the range is updated.
-                if (!slider.updateValueWhileDragging)
-                    range.position = fakeHandle.x;
-            }
-        }
-
-        Loader {
-            id: valueIndicatorLoader
-
-            transform: Translate { x: - handleLoader.width / 2 }
-            rotation: _isVertical ? 90 : 0
-            visible: valueIndicatorVisible
-
-            // Properties available for the delegate component. Note that the indicatorText
-            // shows the value for the position the handle is, which is not necessarily the
-            // available as the current slider.value, since updateValueWhileDragging can
-            // be set to 'false'.
-            property string indicatorText: slider.formatValue(range.valueForPosition(handleLoader.x))
-            property bool dragging: mouseArea.drag.active
-
-            sourceComponent: valueIndicator
-
-            state: {
-                if (!_isVertical)
-                    return slider.valueIndicatorPosition;
-
-                if (valueIndicatorPosition == "Right")
-                    return "Bottom";
-                if (valueIndicatorPosition == "Top")
-                    return "Right";
-                if (valueIndicatorPosition == "Bottom")
-                    return "Left";
-
-                return "Top";
-            }
-
-            anchors.margins: valueIndicatorMargin
-
-            states: [
-                State {
-                    name: "Top"
-                    AnchorChanges {
-                        target: valueIndicatorLoader
-                        anchors.bottom: handleLoader.top
-                        anchors.horizontalCenter: handleLoader.horizontalCenter
-                    }
-                },
-                State {
-                    name: "Bottom"
-                    AnchorChanges {
-                        target: valueIndicatorLoader
-                        anchors.top: handleLoader.bottom
-                        anchors.horizontalCenter: handleLoader.horizontalCenter
-                    }
-                },
-                State {
-                    name: "Right"
-                    AnchorChanges {
-                        target: valueIndicatorLoader
-                        anchors.left: handleLoader.right
-                        anchors.verticalCenter: handleLoader.verticalCenter
-                    }
-                },
-                State {
-                    name: "Left"
-                    AnchorChanges {
-                        target: valueIndicatorLoader
-                        anchors.right: handleLoader.left
-                        anchors.verticalCenter: handleLoader.verticalCenter
-                    }
-                }
-            ]
-        }
-    }
-
-    // Range position normally follow fakeHandle, except when
-    // 'updateValueWhileDragging' is false. In this case it will only follow
-    // if the user is not pressing the handle.
-    Binding {
-        when: updateValueWhileDragging || !mouseArea.pressed
-        target: range
-        property: "position"
-        value: fakeHandle.x
-    }
-
-    // During the drag, we simply ignore position set from the range, this
-    // means that setting a value while dragging will not "interrupt" the
-    // dragging activity.
-    Binding {
-        when: !mouseArea.drag.active
-        target: fakeHandle
-        property: "x"
-        value: range.position
-    }
-}
diff --git a/components/custom/SpinBox.qml b/components/custom/SpinBox.qml
deleted file mode 100644
index 0b264d4..0000000
--- a/components/custom/SpinBox.qml
+++ /dev/null
@@ -1,206 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** All rights reserved.
-** Contact: Nokia Corporation (qt-info@nokia.com)
-**
-** This file is part of the Qt Components project.
-**
-** $QT_BEGIN_LICENSE:BSD$
-** You may use this file under the terms of the BSD license as follows:
-**
-** "Redistribution and use in source and binary forms, with or without
-** modification, are permitted provided that the following conditions are
-** met:
-**   * Redistributions of source code must retain the above copyright
-**     notice, this list of conditions and the following disclaimer.
-**   * Redistributions in binary form must reproduce the above copyright
-**     notice, this list of conditions and the following disclaimer in
-**     the documentation and/or other materials provided with the
-**     distribution.
-**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
-**     the names of its contributors may be used to endorse or promote
-**     products derived from this software without specific prior written
-**     permission.
-**
-** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-import QtQuick 1.1
-import ".."
-
-FocusScope {
-    id: spinbox
-
-    SystemPalette {
-        id: syspal
-        colorGroup: enabled ? SystemPalette.Active : SystemPalette.Disabled
-    }
-
-    property int minimumWidth: 0
-    property int minimumHeight: 0
-
-    property int leftMargin: 0
-    property int topMargin: 0
-    property int rightMargin: 0
-    property int bottomMargin: 0
-
-    property real value: 0.0
-    property real maximumValue: 99
-    property real minimumValue: 0
-    property real singleStep: 1
-    property string postfix
-
-    property bool upEnabled: value != maximumValue;
-    property bool downEnabled: value != minimumValue;
-    property alias upPressed: mouseUp.pressed
-    property alias downPressed: mouseDown.pressed
-    property alias upHovered: mouseUp.containsMouse
-    property alias downHovered: mouseDown.containsMouse
-    property alias containsMouse: mouseArea.containsMouse
-    property alias textColor: syspal.text
-    property alias font: input.font
-
-    property Component background: null
-    property Item backgroundItem: backgroundComponent.item
-    property Component up: null
-    property Component down: null
-
-    QtObject {
-        id: componentPrivate
-        property bool valueUpdate: false
-    }
-
-    function increment() {
-        setValue(input.text)
-        value += singleStep
-        if (value > maximumValue)
-            value = maximumValue
-        input.text = value
-    }
-
-    function decrement() {
-        setValue(input.text)
-        value -= singleStep
-        if (value < minimumValue)
-            value = minimumValue
-        input.text = value
-    }
-
-    function setValue(v) {
-        var newval = parseFloat(v)
-        if (newval > maximumValue)
-            newval = maximumValue
-        else if (v < minimumValue)
-            newval = minimumValue
-        value = newval
-        input.text = value
-    }
-
-    Component.onCompleted: setValue(value)
-
-    onValueChanged: {
-        componentPrivate.valueUpdate = true
-        input.text = value
-        componentPrivate.valueUpdate = false
-    }
-
-    // background
-    Loader {
-        id: backgroundComponent
-        anchors.fill: parent
-        sourceComponent: background
-    }
-
-    MouseArea {
-        id: mouseArea
-        anchors.fill: parent
-        hoverEnabled: true
-    }
-
-    TextInput {
-        id: input
-
-        anchors.margins: 5
-        anchors.leftMargin: leftMargin
-        anchors.topMargin: topMargin
-        anchors.rightMargin: rightMargin
-        anchors.bottomMargin: bottomMargin
-        anchors.fill: parent
-        selectByMouse: true
-
-        // validator: DoubleValidator { bottom: minimumValue; top: maximumValue; }
-        onAccepted: {setValue(input.text)}
-        onActiveFocusChanged: setValue(input.text)
-        color: textColor
-        opacity: parent.enabled ? 1 : 0.5
-        Text {
-            text: postfix
-            anchors.rightMargin: 4
-            anchors.right: parent.right
-            anchors.verticalCenter: parent.verticalCenter
-        }
-        CursorArea {
-            anchors.fill: parent
-            cursor: CursorArea.IBeamCursor
-        }
-    }
-
-    Loader {
-        id: upButton
-        property alias pressed : spinbox.upPressed
-        property alias hover : spinbox.upHovered
-        property alias enabled : spinbox.upEnabled
-        sourceComponent: up
-        MouseArea {
-            id: mouseUp
-            anchors.fill: upButton.item
-            onClicked: increment()
-
-            property bool autoincrement: false;
-            onReleased: autoincrement = false
-            Timer { running: mouseUp.pressed; interval: 350 ; onTriggered: mouseUp.autoincrement = true }
-            Timer { running: mouseUp.autoincrement; interval: 60 ; repeat: true ; onTriggered: increment() }
-        }
-        onLoaded: {
-            item.parent = spinbox
-            mouseUp.parent = item
-        }
-    }
-
-    Loader {
-        id: downButton
-        property alias pressed : spinbox.downPressed
-        property alias hover : spinbox.downHovered
-        property alias enabled : spinbox.downEnabled
-        sourceComponent: down
-        MouseArea {
-            id: mouseDown
-            anchors.fill: downButton.item
-            onClicked: decrement()
-
-            property bool autoincrement: false;
-            onReleased: autoincrement = false
-            Timer { running: mouseDown.pressed; interval: 350 ; onTriggered: mouseDown.autoincrement = true }
-            Timer { running: mouseDown.autoincrement; interval: 60 ; repeat: true ; onTriggered: decrement() }
-        }
-        onLoaded: {
-            item.parent = spinbox
-            mouseDown.parent = item
-        }
-    }
-    Keys.onUpPressed: increment()
-    Keys.onDownPressed: decrement()
-}
diff --git a/components/custom/Splitter.qml b/components/custom/Splitter.qml
deleted file mode 100644
index 905c984..0000000
--- a/components/custom/Splitter.qml
+++ /dev/null
@@ -1,450 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** All rights reserved.
-** Contact: Nokia Corporation (qt-info@nokia.com)
-**
-** This file is part of the Qt Components project.
-**
-** $QT_BEGIN_LICENSE:BSD$
-** You may use this file under the terms of the BSD license as follows:
-**
-** "Redistribution and use in source and binary forms, with or without
-** modification, are permitted provided that the following conditions are
-** met:
-**   * Redistributions of source code must retain the above copyright
-**     notice, this list of conditions and the following disclaimer.
-**   * Redistributions in binary form must reproduce the above copyright
-**     notice, this list of conditions and the following disclaimer in
-**     the documentation and/or other materials provided with the
-**     distribution.
-**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
-**     the names of its contributors may be used to endorse or promote
-**     products derived from this software without specific prior written
-**     permission.
-**
-** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-import QtQuick 1.1
-import QtDesktop 0.1
-
-Splitter {
-    id: root
-    default property alias items: splitterItems.children
-    property alias handles: splitterHandles.children
-    property Component handleBackground: Rectangle { width:3; color: "black" }
-    property int handleWidth: -1
-    property real preferredSize: 0
-    property int orientation: Qt.Horizontal
-
-    clip: true
-    Component.onCompleted: d.init();
-    onWidthChanged: d.updateLayout();
-    onHeightChanged: d.updateLayout();
-
-    QtObject {
-        id: d
-
-        property bool horizontal: orientation == Qt.Horizontal
-        property string size: horizontal ? "width" : "height"
-        property string minimum: horizontal ? "minimumWidth" : "minimumHeight"
-        property string maximum: horizontal ? "maximumWidth" : "maximumHeight"
-
-        property string offset: horizontal ? "x" : "y"
-        property int expandingIndex: -1
-        property bool updateLayoutGuard: true
-        property bool itemWidthGuard: false
-        property bool itemExpandingGuard: true
-
-        function init()
-        {
-            for (var i=0; i<items.length; ++i) {
-                var item = items[i];
-
-                item.Splitter.itemIndex = i
-                // Assign one, and only one, item to be expanding:
-                if (item.Splitter.expanding === true) {
-                    if (d.expandingIndex === -1 && item.visible === true)
-                        d.expandingIndex = i
-                    else
-                        item.Splitter.expanding = false
-                }
-
-                // Anchor each item to fill out all space vertically:
-                if (d.horizontal) {
-                    item.anchors.top = splitterItems.top
-                    item.anchors.bottom = splitterItems.bottom
-                } else  {
-                    item.anchors.left = splitterItems.left
-                    item.anchors.right = splitterItems.right
-
-                }
-
-                // Listen for changes to width and expanding:
-                propertyChangeListener.createObject(item, {"itemIndex":i});
-                if (i < items.length-1) {
-                    // Create a handle for the item, unless its the last:
-                    var handle = handleBackgroundLoader.createObject(splitterHandles, {"handleIndex":i});
-
-                    if (d.horizontal) {
-                        handle.anchors.top = splitterHandles.top
-                        handle.anchors.bottom = splitterHandles.bottom
-                    } else {
-                        handle.anchors.left = splitterHandles.left
-                        handle.anchors.right = splitterHandles.right
-                    }
-                }
-            }
-
-            if (d.expandingIndex === -1) {
-                // INVARIANT: No item was set as expanding.
-                // We then choose the last visible item instead:
-                d.expandingIndex = items.length - 1
-                for (i=items.length-1; i>=0; --i) {
-                    var item = items[i]
-                    if (item.visible === true) {
-                        d.expandingIndex = i
-                        item = items[i]
-                        break
-                    }
-                }
-                item.Splitter.expanding = true
-            }
-
-            d.itemExpandingGuard = false
-            d.updateLayoutGuard = false
-            d.updateLayout()
-        }
-
-        function accumulatedSize(firstIndex, lastIndex, includeExpandingMinimum)
-        {
-            // Go through items and handles, and
-            // calculate their acummulated width.
-            var w = 0
-            for (var i=firstIndex; i<lastIndex; ++i) {
-                var item = items[i]
-                if (item.visible) {
-                    if (i !== d.expandingIndex)
-                        w += item[d.size];
-                    else if (includeExpandingMinimum && item.Splitter[minimum] != -1)
-                        w += item[minimum]
-                }
-
-                var handle = handles[i]
-                if (handle && items[i + ((d.expandingIndex > i) ? 0 : 1)].visible)
-                    w += handle[d.size]
-            }
-            return w
-        }
-
-        function updateLayout()
-        {
-            // This function will reposition both handles and
-            // items according to the _width of the each item_
-            if (items.length === 0)
-                return;
-            if (d.updateLayoutGuard === true)
-                return
-            d.updateLayoutGuard = true
-
-            // Use a temporary variable to store values to avoid breaking
-            // property bindings when the value does not actually change:
-            var newValue
-
-            // Ensure all items within min/max:
-            for (var i=0; i<items.length; ++i) {
-                if (i !== d.expandingIndex) {
-                    item = items[i];
-                    // If the item is using percentage width, convert
-                    // that number to real width now:
-                    if (item.Splitter.percentageSize !== -1) {
-                        newValue = item.Splitter.percentageSize * (root[d.size] / 100)
-                        if (newValue !== item[d.size])
-                            item[d.size] = newValue
-                    }
-                    // Ensure item width is not more than maximumSize:
-                    if (item.Splitter[maximum] !== -1) {
-                        newValue = Math.min(item[d.size], item.Splitter[maximum])
-                        if (newValue !== item[d.size])
-                            item[d.size] = newValue
-                    }
-                    // Ensure item width is not more less minimumWidth:
-                    if (item.Splitter[minimum] !== -1) {
-                        newValue = Math.max(item[d.size], item.Splitter[minimum])
-                        if (newValue !== item[d.size])
-                            item[d.size] = newValue
-                    }
-                }
-            }
-
-            // Special case: set width of expanding item to available space:
-            newValue = root[d.size] - d.accumulatedSize(0, items.length, false);
-            var expandingItem = items[d.expandingIndex]
-            var expandingMinimum = 0
-            if (expandingItem.Splitter[minimum] !== -1)
-                expandingMinimum = expandingItem.Splitter[minimum]
-            newValue = Math.max(newValue, expandingMinimum)
-            if (expandingItem[d.size] !== 0 && expandingItem.Splitter.percentageSize !== -1)
-                expandingItem.Splitter.percentageSize = newValue * (100 / root[d.size])
-            if (expandingItem[d.size] !== newValue)
-                expandingItem[d.size] = newValue
-
-            // Then, position items and handles according to their width:
-            var item, lastVisibleItem
-            var handle, lastVisibleHandle
-            var newpreferredSize = expandingMinimum - expandingItem[d.size]
-
-            for (i=0; i<items.length; ++i) {
-                // Position item to the right of the previous visible handle:
-                item = items[i];
-                if (item.visible) {
-                    if (lastVisibleHandle) {
-                        newValue = lastVisibleHandle[d.offset] + lastVisibleHandle[d.size]
-                        if (newValue !== item[d.offset])
-                            item[d.offset] = newValue
-                    } else {
-                        newValue = 0
-                        if (newValue !== item[d.offset])
-                            item[d.offset] = newValue
-                    }
-                    newpreferredSize += item[d.size]
-                    lastVisibleItem = item
-                }
-
-                // Position handle to the right of the previous visible item. We use an alterative way of
-                // checking handle visibility because that property might not have updated correctly yet:
-                handle = handles[i]
-                if (handle && items[i + ((d.expandingIndex > i) ? 0 : 1)].visible) {
-                    newValue = lastVisibleItem[d.offset] + Math.max(0, lastVisibleItem[d.size])
-                    if (newValue !== handle[d.offset])
-                        handle[d.offset] = newValue
-                    newpreferredSize += handle[d.size]
-                    lastVisibleHandle = handle
-                }
-            }
-
-            root.preferredSize = newpreferredSize
-            d.updateLayoutGuard = false
-        }
-    }
-
-    Component {
-        id: handleBackgroundLoader
-        Loader {
-            id: myHandle
-            property int handleIndex: 0
-            property Item handle: myHandle
-            property Item splitterItem: items[handleIndex + ((d.expandingIndex > handleIndex) ? 0 : 1)]
-
-             // 'splitterRow' should be an alias, but that fails to resolve runtime:
-            property Item splitterRow: root
-            property Item background: item
-
-            visible: splitterItem.visible
-            sourceComponent: handleBackground
-            onWidthChanged: d.updateLayout()
-
-            onXChanged: {
-                // Moving the handle means resizing an item. Which one,
-                // left or right, depends on where the expanding item is.
-                // 'updateLayout' will override in case new width violates max/min.
-                // And 'updateLayout will be triggered when an item changes width.
-                if (d.updateLayoutGuard)
-                    return
-
-                var leftHandle, leftItem, rightItem, rightHandle
-                var leftEdge, rightEdge, newWidth, leftStopX, rightStopX
-                var i
-
-                if (d.expandingIndex > handleIndex) {
-                    // Resize item to the left.
-                    // Ensure that the handle is not crossing other handles. So
-                    // find the first visible handle to the left to determine the left edge:
-                    leftEdge = 0
-                    for (i=handleIndex-1; i>=0; --i) {
-                        leftHandle = handles[i]
-                        if (leftHandle.visible) {
-                            leftEdge = leftHandle[d.offset] + leftHandle[d.size]
-                            break;
-                        }
-                    }
-
-                    // Ensure: leftStopX >= myHandle[d.offset] >= rightStopX
-                    var min = d.accumulatedSize(handleIndex+1, items.length, true)
-                    rightStopX = root[d.size] - min - myHandle[d.size]
-                    leftStopX = Math.max(leftEdge, myHandle[d.offset])
-                    myHandle[d.offset] = Math.min(rightStopX, Math.max(leftStopX, myHandle[d.offset]))
-
-                    newWidth = myHandle[d.offset] - leftEdge
-                    leftItem = items[handleIndex]
-                    if (root[d.size] != 0 && leftItem.Splitter.percentageSize !== -1)
-                        leftItem.Splitter.percentageSize = newWidth * (100 / root[d.size])
-                    // The next line will trigger 'updateLayout' inside 'propertyChangeListener':
-                    leftItem[d.size] = newWidth
-                } else {
-                    // Resize item to the right.
-                    // Ensure that the handle is not crossing other handles. So
-                    // find the first visible handle to the right to determine the right edge:
-                    rightEdge = root[d.size]
-                    for (i=handleIndex+1; i<handles.length; ++i) {
-                        rightHandle = handles[i]
-                        if (rightHandle.visible) {
-                            rightEdge = rightHandle[d.offset]
-                            break;
-                        }
-                    }
-
-                    // Ensure: leftStopX <= myHandle[d.offset] <= rightStopX
-                    var min = d.accumulatedSize(0, handleIndex+1, true)
-                    leftStopX = min - myHandle[d.size]
-                    rightStopX = Math.min((rightEdge - myHandle[d.size]), myHandle[d.offset])
-                    myHandle[d.offset] = Math.max(leftStopX, Math.min(myHandle[d.offset], rightStopX))
-
-                    newWidth = rightEdge - (myHandle[d.offset] + myHandle[d.size])
-                    rightItem = items[handleIndex+1]
-                    if (root[d.size] !== 0 && rightItem[d.percentageSize] !== -1)
-                        rightItem.Splitter.percentageSize = newWidth * (100 / root[d.size])
-                    // The next line will trigger 'updateLayout' inside 'propertyChangeListener':
-                    rightItem[d.size] = newWidth
-                }
-            }
-        }
-    }
-
-    Item {
-        id: splitterItems
-        anchors.fill: parent
-    }
-    Item {
-        id: splitterHandles
-        anchors.fill: parent
-    }
-
-    Component {
-        // This dummy item becomes a child of all
-        // items it the splitter, just to provide a way
-        // to listen for changes to their width, expanding etc.
-        id: propertyChangeListener
-        Item {
-            id: target
-            width: (d.horizontal ? parent[d.size] : 0)
-            height: (!d.horizontal ? parent[d.size] : 0)
-            property bool expanding: parent.Splitter.expanding
-            property real percentageSize: parent.Splitter.percentageSize
-            property real minimumWidth: parent.Splitter[d.minimum]
-            property real maximumSize: parent.Splitter[d.maximum]
-            property int itemIndex: parent.Splitter.itemIndex
-
-            onPercentageSizeChanged: d.updateLayout();
-            onMinimumWidthChanged: d.updateLayout();
-            onMaximumSizeChanged: d.updateLayout();
-            onExpandingChanged: updateExpandingIndex()
-
-            function updateExpandingIndex()
-            {
-                // The following code is needed to avoid a binding
-                // loop, since we might change 'expanding' again to a different item:
-                if (d.itemExpandingGuard === true)
-                    return
-                d.itemExpandingGuard = true
-                // break binding:
-                expanding = false
-
-                // 'expanding' follows radio button behavior:
-                // First, find the new expanding item:
-                var newIndex = items.length-1
-                for (var i=0; i<items.length; ++i) {
-                    var item = items[i]
-                    if (i !== d.expandingIndex && item.Splitter.expanding === true && item.visible === true) {
-                        newIndex = i
-                        break
-                    }
-                }
-                item = items[newIndex]
-                if (item.visible === false) {
-                    // So now we ended up with the last item in the splitter to be
-                    // expanding, but it turns out to not be visible. So we need to
-                    // traverse backwards again to find one that is visible...
-                    for (i=items.length-2; i>=0; --i) {
-                        var item = items[i]
-                        if (item.visible === true) {
-                            newIndex = i
-                            item = items[newIndex]
-                           break
-                        }
-                    }
-                }
-
-                // Tell the found item that it is expanding:
-                if (item.Splitter.expanding !== true)
-                    item.Splitter.expanding = true
-                // ...and the old one that it is not:
-                if (newIndex !== d.expandingIndex) {
-                    item = items[d.expandingIndex]
-                    if (item.Splitter.expanding !== false)
-                        item.Splitter.expanding = false
-                }
-                // update index:
-                d.expandingIndex = newIndex
-                d.updateLayout();
-                // recreate binding:
-                expanding = function() { return parent.Splitter.expanding }
-                d.itemExpandingGuard = false
-            }
-
-            function handleSizeChanged() {
-                // We need to update the layout.
-                // The following code is needed to avoid a binding
-                // loop, since we might change 'width' again to a different value:
-                if (d.itemWidthGuard === true)
-                    return
-                d.itemWidthGuard = true
-                // Break binding:
-                this[d.size] = 0
-
-                d.updateLayout()
-
-                // Restablish binding:
-                if (d.horizontal) {
-                    width = function() { return parent[d.size]; }
-                } else {
-                    height = function() { return parent[d.size]; }
-                }
-                d.itemWidthGuard = false
-            }
-
-            onWidthChanged:  handleSizeChanged()
-            onHeightChanged: handleSizeChanged()
-            onVisibleChanged: {
-                // Hiding the expanding item forces us to
-                // select a new one (and therefore not recommended):
-                if (d.expandingIndex === itemIndex) {
-                    updateExpandingIndex()
-                } else {
-                    if (visible) {
-                        // Try to keep all items within the SplitterRow. When an item
-                        // has been hidden, the expanding item might no longer be large enough
-                        // to give away space to the new items width. So we need to resize:
-                        var overflow = d.accumulatedSize(0, items.length, true) - root[d.size];
-                        if (overflow > 0)
-                            parent[d.size] -= overflow
-                    }
-                    d.updateLayout()
-                }
-            }
-        }
-    }
-}
diff --git a/components/custom/TextField.qml b/components/custom/TextField.qml
deleted file mode 100644
index 9d6677a..0000000
--- a/components/custom/TextField.qml
+++ /dev/null
@@ -1,175 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** All rights reserved.
-** Contact: Nokia Corporation (qt-info@nokia.com)
-**
-** This file is part of the Qt Components project.
-**
-** $QT_BEGIN_LICENSE:BSD$
-** You may use this file under the terms of the BSD license as follows:
-**
-** "Redistribution and use in source and binary forms, with or without
-** modification, are permitted provided that the following conditions are
-** met:
-**   * Redistributions of source code must retain the above copyright
-**     notice, this list of conditions and the following disclaimer.
-**   * Redistributions in binary form must reproduce the above copyright
-**     notice, this list of conditions and the following disclaimer in
-**     the documentation and/or other materials provided with the
-**     distribution.
-**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
-**     the names of its contributors may be used to endorse or promote
-**     products derived from this software without specific prior written
-**     permission.
-**
-** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-import QtQuick 1.1
-import "./behaviors"    // TextEditMouseBehavior
-import ".."
-
-// KNOWN ISSUES
-// 1) TextField does not loose focus when !enabled if it is a FocusScope (see QTBUG-16161)
-
-FocusScope {
-    id: textField
-
-    property alias text: textInput.text
-    property alias font: textInput.font
-
-    property int inputHint // values tbd
-    property bool acceptableInput: textInput.acceptableInput // read only
-    property alias readOnly: textInput.readOnly // read only
-    property alias placeholderText: placeholderTextComponent.text
-    property bool  passwordMode: false
-    property alias selectedText: textInput.selectedText
-    property alias selectionEnd: textInput.selectionEnd
-    property alias selectionStart: textInput.selectionStart
-    property alias validator: textInput.validator
-    property alias inputMask: textInput.inputMask
-    property alias horizontalalignment: textInput.horizontalAlignment
-    property alias echoMode: textInput.echoMode
-    property alias cursorPosition: textInput.cursorPosition
-    property alias inputMethodHints: textInput.inputMethodHints
-    property alias activeFocusOnPress: textInput.activeFocusOnPress
-
-    property color textColor: syspal.text
-    property color backgroundColor: syspal.base
-    property alias containsMouse: mouseArea.containsMouse
-
-    property Component background: null
-    property Component hints: null
-    property Item backgroundItem: backgroundLoader.item
-
-    property int minimumWidth: 0
-    property int minimumHeight: 0
-
-    property int leftMargin: 0
-    property int topMargin: 0
-    property int rightMargin: 0
-    property int bottomMargin: 0
-
-    function copy() {
-        textInput.copy()
-    }
-
-    function paste() {
-        textInput.paste()
-    }
-
-    function cut() {
-        textInput.cut()
-    }
-
-    function select(start, end) {
-        textInput.select(start, end)
-    }
-
-    function selectAll() {
-        textInput.selectAll()
-    }
-
-    function selectWord() {
-        textInput.selectWord()
-    }
-
-    function positionAt(x) {
-        var p = mapToItem(textInput, x, 0);
-        return textInput.positionAt(p.x);
-    }
-
-    function positionToRectangle(pos) {
-        var p = mapToItem(textInput, pos.x, pos.y);
-        return textInput.positionToRectangle(p);
-    }
-
-    // Implementation
-    clip: true
-
-    SystemPalette {
-        id: syspal
-        colorGroup: enabled ? SystemPalette.Active : SystemPalette.Disabled
-    }
-    Loader { id: hintsLoader; sourceComponent: hints }
-    Loader { id: backgroundLoader; sourceComponent: background; anchors.fill:parent}
-
-    MouseArea {
-        id: mouseArea
-        anchors.fill: parent
-        hoverEnabled: true
-        onClicked: textfield.forceActiveFocus()
-        CursorArea {
-            anchors.fill: parent
-            cursor: CursorArea.IBeamCursor
-        }
-    }
-
-    onFocusChanged: {
-        if (textField.activeFocus)
-            textInput.forceActiveFocus();
-    }
-
-    TextInput { // see QTBUG-14936
-        id: textInput
-        selectByMouse:true
-
-        anchors.leftMargin: leftMargin
-        anchors.topMargin: topMargin
-        anchors.rightMargin: rightMargin
-        anchors.bottomMargin: bottomMargin
-
-        anchors.left: parent.left
-        anchors.right: parent.right
-        anchors.verticalCenter: parent.verticalCenter
-
-        color: syspal.text
-        echoMode: passwordMode ? TextInput.Password : TextInput.Normal
-
-    }
-
-    Text {
-        id: placeholderTextComponent
-        anchors.fill: textInput
-        font: textInput.font
-        opacity: !textInput.text.length && !textInput.activeFocus ? 1 : 0
-        color: "darkgray"
-        text: "Enter text"
-        clip: true
-        elide: Text.ElideRight
-        Behavior on opacity { NumberAnimation { duration: 90 } }
-    }
-}
diff --git a/components/custom/behaviors/ButtonBehavior.qml b/components/custom/behaviors/ButtonBehavior.qml
deleted file mode 100644
index e6e6571..0000000
--- a/components/custom/behaviors/ButtonBehavior.qml
+++ /dev/null
@@ -1,73 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** All rights reserved.
-** Contact: Nokia Corporation (qt-info@nokia.com)
-**
-** This file is part of the Qt Components project.
-**
-** $QT_BEGIN_LICENSE:BSD$
-** You may use this file under the terms of the BSD license as follows:
-**
-** "Redistribution and use in source and binary forms, with or without
-** modification, are permitted provided that the following conditions are
-** met:
-**   * Redistributions of source code must retain the above copyright
-**     notice, this list of conditions and the following disclaimer.
-**   * Redistributions in binary form must reproduce the above copyright
-**     notice, this list of conditions and the following disclaimer in
-**     the documentation and/or other materials provided with the
-**     distribution.
-**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
-**     the names of its contributors may be used to endorse or promote
-**     products derived from this software without specific prior written
-**     permission.
-**
-** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-import QtQuick 1.1
-
-Item {
-    id: behavior
-
-    signal clicked
-    property bool pressed: false    // Can't be alias of mouseArea.pressed because the latter is read-only
-    property alias containsMouse: mouseArea.containsMouse
-    property bool checkable: false
-    property bool checked: false
-    property bool triState: false
-    signal mouseMoved
-
-    onCheckableChanged: { if(!checkable) checked = false }
-    MouseArea {
-        id: mouseArea
-        anchors.fill: parent
-        hoverEnabled: true
-        onPositionChanged: behavior.mouseMoved()
-        onPressed: behavior.pressed = true  // needed when hover is enabled
-        onEntered: if(pressed && enabled) behavior.pressed = true
-        onExited: behavior.pressed = false
-        onCanceled: behavior.pressed = false    // mouse stolen e.g. by Flickable
-        onReleased: {
-            if(behavior.pressed && behavior.enabled) { // No click if release outside area
-                behavior.pressed = false
-                if(behavior.checkable)
-                    behavior.checked = !behavior.checked;
-                behavior.clicked()
-            }
-        }
-    }
-}
diff --git a/components/custom/behaviors/ModalPopupBehavior.qml b/components/custom/behaviors/ModalPopupBehavior.qml
deleted file mode 100644
index 62b3837..0000000
--- a/components/custom/behaviors/ModalPopupBehavior.qml
+++ /dev/null
@@ -1,130 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** All rights reserved.
-** Contact: Nokia Corporation (qt-info@nokia.com)
-**
-** This file is part of the Qt Components project.
-**
-** $QT_BEGIN_LICENSE:BSD$
-** You may use this file under the terms of the BSD license as follows:
-**
-** "Redistribution and use in source and binary forms, with or without
-** modification, are permitted provided that the following conditions are
-** met:
-**   * Redistributions of source code must retain the above copyright
-**     notice, this list of conditions and the following disclaimer.
-**   * Redistributions in binary form must reproduce the above copyright
-**     notice, this list of conditions and the following disclaimer in
-**     the documentation and/or other materials provided with the
-**     distribution.
-**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
-**     the names of its contributors may be used to endorse or promote
-**     products derived from this software without specific prior written
-**     permission.
-**
-** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-import QtQuick 1.1
-
-// KNOWN ISSUES
-// none
-
-Item {
-    id: popupBehavior
-
-    property bool showing: false
-    property bool whenAlso: true            // modifier to the "showing" property
-    property bool consumeCancelClick: true
-    property int delay: 0                   // delay before popout becomes visible
-    property int deallocationDelay: 3000    // 3 seconds
-
-    property Component popupComponent
-
-    property alias popup: popupLoader.item  // read-only
-    property alias window: popupBehavior.root // read-only
-
-    signal prepareToShow
-    signal prepareToHide
-    signal cancelledByClick
-
-    // implementation
-
-    anchors.fill: parent
-
-    onShowingChanged: notifyChange()
-    onWhenAlsoChanged: notifyChange()
-    function notifyChange() {
-        if(showing && whenAlso) {
-            if(popupLoader.sourceComponent == undefined) {
-                popupLoader.sourceComponent = popupComponent;
-            }
-        } else {
-            mouseArea.enabled = false; // disable before opacity is changed in case it has fading behavior
-            if(Qt.isQtObject(popupLoader.item)) {
-                popupBehavior.prepareToHide();
-                popupLoader.item.opacity = 0;
-            }
-        }
-    }
-
-    property Item root: findRoot()
-    function findRoot() {
-        var p = parent;
-        while(p.parent != undefined)
-            p = p.parent;
-
-        return p;
-    }
-
-    MouseArea {
-        id: mouseArea
-        anchors.fill: parent
-        enabled: false  // enabled only when popout is showing
-        onPressed: {
-            popupBehavior.showing = false;
-            mouse.accepted = consumeCancelClick;
-            cancelledByClick();
-        }
-    }
-
-    Loader {
-        id: popupLoader
-    }
-
-    Timer { // visibility timer
-        running: Qt.isQtObject(popupLoader.item) && showing && whenAlso
-        interval: delay
-        onTriggered: {
-            popupBehavior.prepareToShow();
-            mouseArea.enabled = true;
-            popup.opacity = 1;
-        }
-    }
-
-    Timer { // deallocation timer
-        running: Qt.isQtObject(popupLoader.item) && popupLoader.item.opacity == 0
-        interval: deallocationDelay
-        onTriggered: popupLoader.sourceComponent = undefined
-    }
-
-    states: State {
-        name: "active"
-        when: Qt.isQtObject(popupLoader.item) && popupLoader.item.opacity > 0
-        ParentChange { target: popupBehavior; parent: root }
-    }
- }
-
diff --git a/components/custom/components.pro b/components/custom/components.pro
deleted file mode 100644
index e063d91..0000000
--- a/components/custom/components.pro
+++ /dev/null
@@ -1,49 +0,0 @@
-TEMPLATE = subdirs # XXX: Avoid call the linker
-TARGETPATH = Qt/labs/components/custom
-
-symbian {
-    INSTALL_IMPORTS = /resource/qt/imports
-} else {
-    INSTALL_IMPORTS = $$[QT_INSTALL_IMPORTS]
-}
-
-QML_FILES = \
-        qmldir \
-        BasicButton.qml \
-        BusyIndicator.qml \
-        ButtonBlock.qml \
-        ButtonColumn.qml \
-        ButtonRow.qml \
-        ButtonGroup.js \
-        Button.qml \
-        CheckBox.qml \
-        Splitter.qml \
-        ProgressBar.qml \
-        RadioButton.qml \
-        ScrollDecorator.qml \
-        ScrollIndicator.qml \
-        Slider.qml \
-        SpinBox.qml \
-        Switch.qml \
-        TextArea.qml \
-        TextField.qml
-
-QML_DIRS = \
-        behaviors \
-        private \
-        styles \
-        visuals
-
-qmlfiles.files = $$QML_FILES
-qmlfiles.sources = $$QML_FILES
-qmlfiles.path = $$INSTALL_IMPORTS/$$TARGETPATH
-
-qmldirs.files = $$QML_DIRS
-qmldirs.sources = $$QML_DIRS
-qmldirs.path = $$INSTALL_IMPORTS/$$TARGETPATH
-
-INSTALLS += qmlfiles qmldirs
-
-symbian {
-    DEPLOYMENT += qmlfiles qmldirs
-}
diff --git a/components/custom/qmldir b/components/custom/qmldir
deleted file mode 100644
index 716e44f..0000000
--- a/components/custom/qmldir
+++ /dev/null
@@ -1,14 +0,0 @@
-RangeModel 1.0 RangeModel.qml
-BasicButton 1.0 BasicButton.qml
-BusyIndicator 1.0 BusyIndicator.qml
-ButtonBlock 1.0 ButtonBlock.qml
-Button 1.0 Button.qml
-ButtonColumn 1.0 ButtonColumn.qml
-ButtonRow 1.0 ButtonRow.qml
-CheckBox 1.0 CheckBox.qml
-ProgressBar 1.0 ProgressBar.qml
-Slider 1.0 Slider.qml
-SpinBox 1.0 SpinBox.qml
-TextField 1.0 TextField.qml
-GroupBox 1.0 GroupBox.qml
-Splitter 1.0 Splitter.qml
diff --git a/components/images/folder_new.png b/components/images/folder_new.png
deleted file mode 100644
index 8d8bb9b..0000000
Binary files a/components/images/folder_new.png and /dev/null differ
diff --git a/components/private/ScrollAreaHelper.qml b/components/private/ScrollAreaHelper.qml
deleted file mode 100644
index 0a3ace1..0000000
--- a/components/private/ScrollAreaHelper.qml
+++ /dev/null
@@ -1,123 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
-** All rights reserved.
-** Contact: Nokia Corporation (qt-info@nokia.com)
-**
-** This file is part of the Qt Components project.
-**
-** $QT_BEGIN_LICENSE:BSD$
-** You may use this file under the terms of the BSD license as follows:
-**
-** "Redistribution and use in source and binary forms, with or without
-** modification, are permitted provided that the following conditions are
-** met:
-**   * Redistributions of source code must retain the above copyright
-**     notice, this list of conditions and the following disclaimer.
-**   * Redistributions in binary form must reproduce the above copyright
-**     notice, this list of conditions and the following disclaimer in
-**     the documentation and/or other materials provided with the
-**     distribution.
-**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
-**     the names of its contributors may be used to endorse or promote
-**     products derived from this software without specific prior written
-**     permission.
-**
-** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-import QtQuick 1.1
-import "../"
-
-WheelArea {
-    id: wheelarea
-
-    property alias horizontalScrollBar: hscrollbar
-    property alias verticalScrollBar: vscrollbar
-    property int macOffset: frame && styleitem.style === "mac" ? 1 : 0
-    property bool blockUpdates: false
-    property int availableHeight : root.height - (hscrollbar.visible ? hscrollbar.height : 0)
-    property int availableWidth: root.width - vscrollbar.width
-
-    anchors.fill: parent
-    anchors.margins: frameWidth
-    horizontalMinimumValue: hscrollbar.minimumValue
-    horizontalMaximumValue: hscrollbar.maximumValue
-    verticalMinimumValue: vscrollbar.minimumValue
-    verticalMaximumValue: vscrollbar.maximumValue
-
-    onVerticalValueChanged: {
-        if (!blockUpdates)
-            verticalScrollBar.value = verticalValue
-    }
-
-    onHorizontalValueChanged: {
-        if (!blockUpdates)
-            horizontalScrollBar.value = horizontalValue
-    }
-
-    StyleItem {
-        // This is the filled corner between scrollbars
-        id: cornerFill
-        elementType: "scrollareacorner"
-        width: vscrollbar.width
-        anchors.right: parent.right
-        height: hscrollbar.height
-        anchors.bottom: parent.bottom
-        visible: hscrollbar.visible && vscrollbar.visible
-    }
-
-    ScrollBar {
-        id: hscrollbar
-        orientation: Qt.Horizontal
-        visible: contentWidth > availableWidth
-        maximumValue: contentWidth > availableWidth ? root.contentWidth - availableWidth : 0
-        minimumValue: 0
-        anchors.bottom: parent.bottom
-        anchors.leftMargin: parent.macOffset
-        anchors.bottomMargin: -parent.macOffset
-        anchors.left: parent.left
-        anchors.right: parent.right
-        anchors.rightMargin: vscrollbar.visible ? vscrollbar.width -parent.macOffset: 0
-        onValueChanged: {
-            if (!blockUpdates) {
-                contentX = value
-                horizontalValue = value
-            }
-        }
-    }
-
-    ScrollBar {
-        id: vscrollbar
-        orientation: Qt.Vertical
-        // We cannot bind directly to tree.height due to binding loops so we have to redo the calculation here
-        visible: contentHeight > availableHeight
-        maximumValue: contentHeight > availableHeight ? root.contentHeight - availableHeight : 0
-        minimumValue: 0
-        anchors.right: parent.right
-        anchors.top: parent.top
-        anchors.bottom: parent.bottom
-        anchors.topMargin: parent.macOffset
-        anchors.rightMargin: -parent.macOffset
-        anchors.bottomMargin: hscrollbar.visible ? hscrollbar.height - parent.macOffset :  0
-
-        onValueChanged: {
-            if (!blockUpdates) {
-                contentY = value
-                verticalValue = value
-            }
-        }
-    }
-}
diff --git a/components/qmldir b/components/qmldir
deleted file mode 100644
index 000c021..0000000
--- a/components/qmldir
+++ /dev/null
@@ -1,32 +0,0 @@
-Slider 0.1 Slider.qml
-SpinBox 0.1 SpinBox.qml
-GroupBox 0.1 GroupBox.qml
-Button 0.1 Button.qml
-Label 0.1 Label.qml
-ToolBar 0.1 ToolBar.qml
-TabFrame 0.1 TabFrame.qml
-TabBar 0.1 TabBar.qml
-Tab 0.1 Tab.qml
-Frame 0.1 Frame.qml
-ScrollArea 0.1 ScrollArea.qml
-ScrollBar 0.1 ScrollBar.qml
-ComboBox 0.1 ComboBox.qml
-ToolButton 0.1 ToolButton.qml
-TextArea 0.1 TextArea.qml
-TextField 0.1 TextField.qml
-ProgressBar 0.1 ProgressBar.qml
-ButtonRow 0.1 ButtonRow.qml
-ButtonColumn 0.1 ButtonColumn.qml
-SplitterRow 0.1 SplitterRow.qml
-SplitterColumn 0.1 SplitterColumn.qml
-Dial 0.1 Dial.qml
-TableView 0.1 TableView.qml
-CheckBox 0.1 CheckBox.qml
-RadioButton 0.1 RadioButton.qml
-plugin styleplugin plugin
-TableColumn 0.1 TableColumn.qml
-ContextMenu 0.1 ContextMenu.qml
-MenuItem 0.1 MenuItem.qml
-Dialog 0.1 Dialog.qml
-StatusBar 0.1 StatusBar.qml
-ApplicationWindow 0.1 ApplicationWindow.qml
diff --git a/desktop.pro b/desktop.pro
index 34fcd3f..56f60e8 100644
--- a/desktop.pro
+++ b/desktop.pro
@@ -1,2 +1,2 @@
 TEMPLATE = subdirs
-SUBDIRS = components src qmldesktopviewer
+SUBDIRS = imports/QtDesktop/components.pro src qmldesktopviewer
diff --git a/imports/QtDesktop/ApplicationWindow.qml b/imports/QtDesktop/ApplicationWindow.qml
new file mode 100644
index 0000000..365798c
--- /dev/null
+++ b/imports/QtDesktop/ApplicationWindow.qml
@@ -0,0 +1,81 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** All rights reserved.
+** Contact: Nokia Corporation (qt-info@nokia.com)
+**
+** This file is part of the Qt Components project.
+**
+** $QT_BEGIN_LICENSE:BSD$
+** You may use this file under the terms of the BSD license as follows:
+**
+** "Redistribution and use in source and binary forms, with or without
+** modification, are permitted provided that the following conditions are
+** met:
+**   * Redistributions of source code must retain the above copyright
+**     notice, this list of conditions and the following disclaimer.
+**   * Redistributions in binary form must reproduce the above copyright
+**     notice, this list of conditions and the following disclaimer in
+**     the documentation and/or other materials provided with the
+**     distribution.
+**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
+**     the names of its contributors may be used to endorse or promote
+**     products derived from this software without specific prior written
+**     permission.
+**
+** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+import QtQuick 1.1
+
+Window {
+    width: 320
+    height: 240
+
+    property alias toolBar: toolBarArea.data
+    property alias statusBar: statusBarArea.data
+    default property alias data: contentArea.data
+
+    SystemPalette {id: syspal}
+
+
+    Rectangle {
+        anchors.fill: parent
+        color: syspal.button
+    }
+
+
+    Column {
+        id: toolBarArea
+        anchors.top: parent.top
+        anchors.left: parent.left
+        anchors.right: parent.right
+    }
+
+    Item {
+        id: contentArea
+        anchors.top: toolBarArea.bottom
+        anchors.left: parent.left
+        anchors.right: parent.right
+        anchors.bottom: statusBarArea.top
+    }
+
+    Column {
+        id: statusBarArea
+        anchors.bottom: parent.bottom
+        anchors.left: parent.left
+        anchors.right: parent.right
+    }
+}
diff --git a/imports/QtDesktop/Button.qml b/imports/QtDesktop/Button.qml
new file mode 100644
index 0000000..4978e0b
--- /dev/null
+++ b/imports/QtDesktop/Button.qml
@@ -0,0 +1,100 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** All rights reserved.
+** Contact: Nokia Corporation (qt-info@nokia.com)
+**
+** This file is part of the Qt Components project.
+**
+** $QT_BEGIN_LICENSE:BSD$
+** You may use this file under the terms of the BSD license as follows:
+**
+** "Redistribution and use in source and binary forms, with or without
+** modification, are permitted provided that the following conditions are
+** met:
+**   * Redistributions of source code must retain the above copyright
+**     notice, this list of conditions and the following disclaimer.
+**   * Redistributions in binary form must reproduce the above copyright
+**     notice, this list of conditions and the following disclaimer in
+**     the documentation and/or other materials provided with the
+**     distribution.
+**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
+**     the names of its contributors may be used to endorse or promote
+**     products derived from this software without specific prior written
+**     permission.
+**
+** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+import QtQuick 1.1
+import "custom" as Components
+
+Components.Button {
+    id: button
+
+    implicitWidth: Math.max(72, backgroundItem.implicitWidth)
+    implicitHeight: Math.max(22, backgroundItem.implicitHeight)
+
+    property alias containsMouse: tooltip.containsMouse
+    property bool defaultbutton: false
+    property string styleHint
+
+    TooltipArea {
+        // Note this will eat hover events
+        id: tooltip
+        anchors.fill: parent
+        text: button.tooltip
+    }
+
+    background: StyleItem {
+        id: styleitem
+        anchors.fill: parent
+        elementType: "button"
+        sunken: pressed || checked
+        raised: !(pressed || checked)
+        hover: containsMouse
+        text: iconSource === "" ? "" : button.text
+        hasFocus: button.focus
+        hint: button.styleHint
+
+        // If no icon, let the style do the drawing
+        activeControl: defaultbutton ? "default" : "f"
+    }
+
+    label: Item {
+        // Used as a fallback since I can't pass the imageURL
+        // directly to the style object
+        visible: button.iconSource === ""
+        Row {
+            id: row
+            anchors.centerIn: parent
+            spacing: 4
+            Image {
+                source: iconSource
+                anchors.verticalCenter: parent.verticalCenter
+                fillMode: Image.Stretch //mm Image should shrink if button is too small, depends on QTBUG-14957
+            }
+            Text {
+                id:text
+                color: textColor
+                anchors.verticalCenter: parent.verticalCenter
+                text: button.text
+                horizontalAlignment: Text.Center
+            }
+        }
+    }
+    Keys.onSpacePressed:animateClick()
+}
+
diff --git a/imports/QtDesktop/ButtonColumn.qml b/imports/QtDesktop/ButtonColumn.qml
new file mode 100644
index 0000000..3e27f9a
--- /dev/null
+++ b/imports/QtDesktop/ButtonColumn.qml
@@ -0,0 +1,45 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** All rights reserved.
+** Contact: Nokia Corporation (qt-info@nokia.com)
+**
+** This file is part of the Qt Components project.
+**
+** $QT_BEGIN_LICENSE:BSD$
+** You may use this file under the terms of the BSD license as follows:
+**
+** "Redistribution and use in source and binary forms, with or without
+** modification, are permitted provided that the following conditions are
+** met:
+**   * Redistributions of source code must retain the above copyright
+**     notice, this list of conditions and the following disclaimer.
+**   * Redistributions in binary form must reproduce the above copyright
+**     notice, this list of conditions and the following disclaimer in
+**     the documentation and/or other materials provided with the
+**     distribution.
+**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
+**     the names of its contributors may be used to endorse or promote
+**     products derived from this software without specific prior written
+**     permission.
+**
+** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+import QtQuick 1.1
+import "custom" as Components
+
+Components.ButtonColumn {
+}
diff --git a/imports/QtDesktop/ButtonRow.qml b/imports/QtDesktop/ButtonRow.qml
new file mode 100644
index 0000000..bba9603
--- /dev/null
+++ b/imports/QtDesktop/ButtonRow.qml
@@ -0,0 +1,45 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** All rights reserved.
+** Contact: Nokia Corporation (qt-info@nokia.com)
+**
+** This file is part of the Qt Components project.
+**
+** $QT_BEGIN_LICENSE:BSD$
+** You may use this file under the terms of the BSD license as follows:
+**
+** "Redistribution and use in source and binary forms, with or without
+** modification, are permitted provided that the following conditions are
+** met:
+**   * Redistributions of source code must retain the above copyright
+**     notice, this list of conditions and the following disclaimer.
+**   * Redistributions in binary form must reproduce the above copyright
+**     notice, this list of conditions and the following disclaimer in
+**     the documentation and/or other materials provided with the
+**     distribution.
+**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
+**     the names of its contributors may be used to endorse or promote
+**     products derived from this software without specific prior written
+**     permission.
+**
+** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+import QtQuick 1.1
+import "custom" as Components
+
+Components.ButtonRow {
+}
diff --git a/imports/QtDesktop/CheckBox.qml b/imports/QtDesktop/CheckBox.qml
new file mode 100644
index 0000000..baaa395
--- /dev/null
+++ b/imports/QtDesktop/CheckBox.qml
@@ -0,0 +1,76 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** All rights reserved.
+** Contact: Nokia Corporation (qt-info@nokia.com)
+**
+** This file is part of the Qt Components project.
+**
+** $QT_BEGIN_LICENSE:BSD$
+** You may use this file under the terms of the BSD license as follows:
+**
+** "Redistribution and use in source and binary forms, with or without
+** modification, are permitted provided that the following conditions are
+** met:
+**   * Redistributions of source code must retain the above copyright
+**     notice, this list of conditions and the following disclaimer.
+**   * Redistributions in binary form must reproduce the above copyright
+**     notice, this list of conditions and the following disclaimer in
+**     the documentation and/or other materials provided with the
+**     distribution.
+**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
+**     the names of its contributors may be used to endorse or promote
+**     products derived from this software without specific prior written
+**     permission.
+**
+** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+import QtQuick 1.1
+import "custom" as Components
+
+// jb : Size should not depend on background, we should make it consistent
+
+Components.CheckBox {
+    id: checkbox
+    property string text
+    property string styleHint
+
+    implicitWidth: Math.max(120, backgroundItem.implicitWidth)
+    implicitHeight: backgroundItem.implicitHeight
+
+    background: StyleItem {
+        elementType: "checkbox"
+        sunken: pressed
+        on: checked || pressed
+        hover: containsMouse
+        enabled: checkbox.enabled
+        hasFocus: checkbox.activeFocus
+        hint: checkbox.styleHint
+        contentHeight: textitem.implicitHeight
+        contentWidth: textitem.implicitWidth + indicatorWidth
+        property int indicatorWidth: pixelMetric("indicatorwidth") + 2
+        Text {
+            id: textitem
+            text: checkbox.text
+            anchors.left: parent.left
+            anchors.leftMargin: parent.indicatorWidth
+            anchors.verticalCenter: parent.verticalCenter
+            anchors.right: parent.right
+            elide: Text.ElideRight
+        }
+    }
+}
+
diff --git a/imports/QtDesktop/ComboBox.qml b/imports/QtDesktop/ComboBox.qml
new file mode 100644
index 0000000..d3f42c1
--- /dev/null
+++ b/imports/QtDesktop/ComboBox.qml
@@ -0,0 +1,147 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** All rights reserved.
+** Contact: Nokia Corporation (qt-info@nokia.com)
+**
+** This file is part of the Qt Components project.
+**
+** $QT_BEGIN_LICENSE:BSD$
+** You may use this file under the terms of the BSD license as follows:
+**
+** "Redistribution and use in source and binary forms, with or without
+** modification, are permitted provided that the following conditions are
+** met:
+**   * Redistributions of source code must retain the above copyright
+**     notice, this list of conditions and the following disclaimer.
+**   * Redistributions in binary form must reproduce the above copyright
+**     notice, this list of conditions and the following disclaimer in
+**     the documentation and/or other materials provided with the
+**     distribution.
+**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
+**     the names of its contributors may be used to endorse or promote
+**     products derived from this software without specific prior written
+**     permission.
+**
+** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+import QtQuick 1.1
+import "custom" as Custom
+
+/*
+*
+* ComboBox (inherits BasicButton)
+*
+* The ComboBox component is a combined button and popup list. The popup menu itself is platform
+* native, and cannot by styled from QML code.
+* Add menu items to the comboBox by either adding MenuItem children inside the popup, or
+* assign it a ListModel (or both).
+*
+* The ComboBox contains the following API (in addition to the BasicButton API):
+*
+* ListModel model - this model will be used, in addition to MenuItem children, to
+*   create items inside the popup menu
+* bool popupOpen - setting this property to 'true' will open the popup.
+* int selectedIndex - the index of the selected item in the popup menu.
+* int hoveredIndex - the index of the highlighted item in the popup menu.
+* string selectedText - the text of the selected menu item.
+* string hoveredText - the text of the highlighted menu item.
+*
+* Example 1:
+*
+*    ListModel {
+*        id: menuItems
+*        ListElement { text: "Banana"; color: "Yellow" }
+*        ListElement { text: "Apple"; color: "Green" }
+*        ListElement { text: "Coconut"; color: "Brown" }
+*    }
+*    ComboBox {
+*        model: menuItems
+*        width: 200
+*        onSelectedIndexChanged: console.debug(selectedText + ", " + menuItems.get(selectedIndex).color)
+*    }
+*
+* Example 2:
+*
+*    ComboBox {
+*        width: 200
+*        MenuItem {
+*            text: "Pineapple"
+*            onTriggered: console.debug(text)
+*
+*        }
+*        MenuItem {
+*            text: "Grape"
+*            onTriggered: console.debug(text)
+*        }
+*    }
+*
+*/
+
+Custom.BasicButton {
+    id: comboBox
+
+    default property alias menuItems: popup.menuItems
+    property alias model: popup.model
+    property alias popupOpen: popup.visible
+
+    property alias selectedIndex: popup.selectedIndex
+    property alias hoveredIndex: popup.hoveredIndex
+    property alias selectedText: popup.selectedText
+    property alias hoveredText: popup.hoveredText
+    property string styleHint
+
+    background: StyleItem {
+        anchors.fill: parent
+        elementType: "combobox"
+        sunken: comboBox.pressed
+        raised: !sunken
+        hover: comboBox.containsMouse
+        enabled: comboBox.enabled
+        text: comboBox.selectedText
+        hasFocus: comboBox.focus
+        contentHeight: 18
+    }
+
+//  ToDo: adjust margins so that selected popup label
+//    centers directly above button label when
+//    popup.centerOnSelectedText === true
+
+
+    width: implicitWidth
+    height: implicitHeight
+
+    implicitWidth: Math.max(80, backgroundItem.implicitWidth)
+    implicitHeight: backgroundItem.implicitHeight
+
+    onWidthChanged: popup.setMinimumWidth(width)
+    checkable: false
+
+    onPressedChanged: if (pressed) popup.visible = true
+
+    ContextMenu {
+        id: popup
+        property bool center: backgroundItem.styleHint("comboboxpopup")
+        centerSelectedText: center
+        y: center ? 0 : comboBox.height
+    }
+
+    // The key bindings below will only be in use when popup is
+    // not visible. Otherwise, native popup key handling will take place:
+    Keys.onSpacePressed: { comboBox.popupOpen = !comboBox.popupOpen }
+    Keys.onUpPressed: { if (selectedIndex < model.count - 1) selectedIndex++ }
+    Keys.onDownPressed: { if (selectedIndex > 0) selectedIndex-- }
+}
diff --git a/imports/QtDesktop/ContextMenu.qml b/imports/QtDesktop/ContextMenu.qml
new file mode 100644
index 0000000..2433c52
--- /dev/null
+++ b/imports/QtDesktop/ContextMenu.qml
@@ -0,0 +1,126 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** All rights reserved.
+** Contact: Nokia Corporation (qt-info@nokia.com)
+**
+** This file is part of the Qt Components project.
+**
+** $QT_BEGIN_LICENSE:BSD$
+** You may use this file under the terms of the BSD license as follows:
+**
+** "Redistribution and use in source and binary forms, with or without
+** modification, are permitted provided that the following conditions are
+** met:
+**   * Redistributions of source code must retain the above copyright
+**     notice, this list of conditions and the following disclaimer.
+**   * Redistributions in binary form must reproduce the above copyright
+**     notice, this list of conditions and the following disclaimer in
+**     the documentation and/or other materials provided with the
+**     distribution.
+**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
+**     the names of its contributors may be used to endorse or promote
+**     products derived from this software without specific prior written
+**     permission.
+**
+** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+import QtQuick 1.1
+
+Menu {
+    id: root
+    property string selectedText: itemTextAt(selectedIndex)
+    property string hoveredText: itemTextAt(hoveredIndex)
+    property int x
+    property int y
+    property bool visible
+    property string textRole
+
+    // 'centerSelectedText' means that the menu will be positioned
+    //  so that the selected text' top left corner will be at x, y.
+    property bool centerSelectedText: true
+
+    visible: false
+    onMenuClosed: visible = false
+    onModelChanged: if (Component.status === Component.Ready && model != undefined) rebuildMenu()
+
+    Component.onCompleted: if (model !== undefined) rebuildMenu()
+
+    onHoveredIndexChanged: {
+        if (hoveredIndex < menuItems.length)
+            menuItems[hoveredIndex].hovered()
+    }
+
+    onSelectedIndexChanged: {
+        if (hoveredIndex < menuItems.length)
+            menuItems[hoveredIndex].selected()
+    }
+
+    onVisibleChanged: {
+        if (visible) {
+            var globalPos = mapToItem(null, x, y)
+            showPopup(globalPos.x, globalPos.y, centerSelectedText ? selectedIndex : 0)
+        } else {
+            hidePopup()
+        }
+    }
+
+    function rebuildMenu()
+    {
+        clearMenuItems();
+
+        for (var i=0; i<menuItems.length; ++i)
+            addMenuItem(menuItems[i].text)
+
+        var nativeModel = root.hasNativeModel()
+
+        if (model !== undefined) {
+            var modelCount = nativeModel ? root.modelCount() : model.count;
+            for (var j = 0 ; j < modelCount; ++j) {
+                var textValue
+                if (nativeModel) {
+                    textValue = root.modelTextAt(j);
+                } else {
+                    if (textRole !== "")
+                        textValue = model.get(j)[textRole]
+                    else if (model.count > 0 && root.model.get && root.model.get(0)) {
+                        // ListModel with one role
+                        var listElement = root.model.get(0)
+                        var oneRole = true
+                        var roleName = ""
+                        var roleCount = 0
+                        for (var role in listElement) {
+                            if (!roleName || role === "text")
+                                roleName = role
+                            ++roleCount
+                        }
+                        if (roleCount > 1 && roleName !== "text") {
+                            oneRole = false
+                            console.log("Warning: No textRole set for ComboBox.")
+                            break
+                        }
+
+                        if (oneRole) {
+                            root.textRole = roleName
+                            textValue = root.model.get(j)[textRole]
+                        }
+                    }
+                }
+                addMenuItem(textValue)
+            }
+        }
+    }
+}
diff --git a/imports/QtDesktop/Dial.qml b/imports/QtDesktop/Dial.qml
new file mode 100644
index 0000000..6364520
--- /dev/null
+++ b/imports/QtDesktop/Dial.qml
@@ -0,0 +1,158 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** All rights reserved.
+** Contact: Nokia Corporation (qt-info@nokia.com)
+**
+** This file is part of the Qt Components project.
+**
+** $QT_BEGIN_LICENSE:BSD$
+** You may use this file under the terms of the BSD license as follows:
+**
+** "Redistribution and use in source and binary forms, with or without
+** modification, are permitted provided that the following conditions are
+** met:
+**   * Redistributions of source code must retain the above copyright
+**     notice, this list of conditions and the following disclaimer.
+**   * Redistributions in binary form must reproduce the above copyright
+**     notice, this list of conditions and the following disclaimer in
+**     the documentation and/or other materials provided with the
+**     distribution.
+**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
+**     the names of its contributors may be used to endorse or promote
+**     products derived from this software without specific prior written
+**     permission.
+**
+** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+import QtQuick 1.1
+import "custom" as Components
+
+// jens: ContainsMouse breaks drag functionality
+
+Item {
+    id: dial
+
+    width: 100
+    height: 100
+
+    property alias maximumValue: range.maximumValue
+    property alias minimumValue: range.minimumValue
+    property alias containsMouse: mouseArea.containsMouse
+    property alias value: range.value
+    property alias stepSize: range.stepSize
+
+    property bool wrapping: false
+    property bool tickmarksEnabled: false
+    property bool activeFocusOnPress: false
+
+    RangeModel {
+        id: range
+        minimumValue: 0.0
+        maximumValue: 1.0
+        stepSize: 0.0
+        value: 0
+    }
+
+    MouseArea {
+        id: mouseArea
+        anchors.fill:parent
+        property bool inDrag
+        hoverEnabled:true
+
+        onPositionChanged: {
+            if (pressed) {
+                value = valueFromPoint(mouseX, mouseY)
+                inDrag = true
+            }
+        }
+        onPressed: {
+            value = valueFromPoint(mouseX, mouseY)
+             if (activeFocusOnPress) dial.focus = true
+        }
+
+        onReleased:inDrag = false;
+        function bound(val) { return Math.max(minimumValue, Math.min(maximumValue, val)); }
+
+        function valueFromPoint(x, y)
+        {
+            var yy = height/2.0 - y;
+            var xx = x - width/2.0;
+            var a = (xx || yy) ? Math.atan2(yy, xx) : 0;
+
+            if (a < Math.PI/ -2)
+                a = a + Math.PI * 2;
+
+            var dist = 0;
+            var minv = minimumValue*100, maxv = maximumValue*100;
+
+            if (minimumValue < 0) {
+                dist = -minimumValue;
+                minv = 0;
+                maxv = maximumValue + dist;
+            }
+
+            var r = maxv - minv;
+            var v;
+            if (wrapping)
+                v =  (0.5 + minv + r * (Math.PI * 3 / 2 - a) / (2 * Math.PI));
+            else
+                v =  (0.5 + minv + r* (Math.PI * 4 / 3 - a) / (Math.PI * 10 / 6));
+
+            if (dist > 0)
+                v -= dist;
+            return maximumValue - bound(v/100)
+        }
+    }
+    StyleItem {
+        anchors.fill: parent
+        elementType: "dial"
+        hasFocus: dial.focus
+        sunken: mouseArea.pressed
+        maximum: range.maximumValue * 100
+        minimum: range.minimumValue * 100
+        value: visualPos * 100
+        enabled: dial.enabled
+        step: range.stepSize * 100
+        activeControl: tickmarksEnabled ? "tick" : ""
+        property double visualPos : range.value
+
+        Behavior on visualPos {
+            enabled: !mouseArea.inDrag
+            NumberAnimation {
+                duration: 300
+                easing.type: Easing.OutSine
+            }
+        }
+    }
+    WheelArea {
+        id: wheelarea
+        anchors.fill: parent
+        horizontalMinimumValue: dial.minimumValue
+        horizontalMaximumValue: dial.maximumValue
+        verticalMinimumValue: dial.minimumValue
+        verticalMaximumValue: dial.maximumValue
+        property double step: (dial.maximumValue - dial.minimumValue)/100
+
+        onVerticalWheelMoved: {
+            value += verticalDelta/4*step
+        }
+
+        onHorizontalWheelMoved: {
+            value += horizontalDelta/4*step
+        }
+    }
+}
diff --git a/imports/QtDesktop/Dialog.qml b/imports/QtDesktop/Dialog.qml
new file mode 100644
index 0000000..6aa1932
--- /dev/null
+++ b/imports/QtDesktop/Dialog.qml
@@ -0,0 +1,163 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** All rights reserved.
+** Contact: Nokia Corporation (qt-info@nokia.com)
+**
+** This file is part of the Qt Components project.
+**
+** $QT_BEGIN_LICENSE:BSD$
+** You may use this file under the terms of the BSD license as follows:
+**
+** "Redistribution and use in source and binary forms, with or without
+** modification, are permitted provided that the following conditions are
+** met:
+**   * Redistributions of source code must retain the above copyright
+**     notice, this list of conditions and the following disclaimer.
+**   * Redistributions in binary form must reproduce the above copyright
+**     notice, this list of conditions and the following disclaimer in
+**     the documentation and/or other materials provided with the
+**     distribution.
+**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
+**     the names of its contributors may be used to endorse or promote
+**     products derived from this software without specific prior written
+**     permission.
+**
+** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+import QtQuick 1.1
+
+Window {
+    id: dialog
+
+    width: 400
+    height: 200
+
+    signal closed
+    signal accepted
+    signal rejected
+    signal buttonClicked
+
+    property QtObject clickedButton: null
+
+    property int noRole: 0
+    property int acceptRole: 1
+    property int rejectRole: 2
+    property int helpRole: 3
+
+    property int ok: 0x00000400
+    property int cancel: 0x00400000
+    property int close: 0x00200000
+    property int help: 0x02000000
+
+    property int buttons: ok | cancel
+
+    modal: false
+
+    default property alias data: content.data
+
+    Item {
+        id: content
+        anchors.topMargin:16
+        anchors.margins: 16
+        anchors.top: parent.top
+        anchors.right: parent.right
+        anchors.left: parent.left
+        anchors.bottom: buttonrow.top
+    }
+
+    // Dialogs should center on parent
+    onVisibleChanged: center()
+
+    Row {
+        property bool mac: (style.style == "mac")
+        anchors.bottom: parent.bottom
+        anchors.left: parent.left
+        anchors.margins: 16
+        anchors.topMargin:0
+        anchors.bottomMargin: style.isMac ? 12 : 8
+        spacing: 6
+
+        Button {
+            id: helpbutton
+            property int role: helpRole
+            visible: buttons & help
+            text: "Help"
+            focus: false
+            Component.onCompleted: if (style.isMac) width = 22
+            background: style.isMac ? machelpdelegate : cancelbutton.background
+            onClicked: {
+                clickedButton = helpbutton
+                buttonClicked()
+            }
+            Component {
+                id: machelpdelegate
+                StyleItem {
+                    anchors.fill: parent
+                    elementType: "machelpbutton"
+                    width: 22
+                    height: 22
+                    sunken: helpbutton.pressed
+                    anchors.centerIn: parent
+                }
+            }
+        }
+    }
+    Row {
+        id: buttonrow
+        spacing: 6
+        anchors.right: parent.right
+        anchors.bottom: parent.bottom
+        anchors.margins: 16
+        anchors.topMargin: 0
+        anchors.bottomMargin: 8
+        layoutDirection: style.isMac ? Qt.LeftToRight : Qt.RightToLeft
+
+        Button {
+            id: cancelbutton
+            visible: buttons & cancel
+            property int role: rejectRole
+            text: "Cancel"
+            onClicked: {
+                visible: dialog.visible = false
+                clickedButton = cancelbutton
+                rejected()
+                closed()
+                buttonClicked(role)
+            }
+        }
+        Button {
+            id: okbutton
+            property int role: acceptRole
+            visible: buttons & ok
+            text: "OK"
+            defaultbutton: true
+            onClicked: {
+                visible: dialog.visible = false
+                clickedButton = okbutton
+                accepted()
+                closed()
+                buttonClicked()
+            }
+        }
+    }
+    StyleItem {
+        id: style
+        visible: false
+        property bool isMac: (style.style == "mac")
+
+    }
+}
diff --git a/imports/QtDesktop/Frame.qml b/imports/QtDesktop/Frame.qml
new file mode 100644
index 0000000..1a67931
--- /dev/null
+++ b/imports/QtDesktop/Frame.qml
@@ -0,0 +1,62 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** All rights reserved.
+** Contact: Nokia Corporation (qt-info@nokia.com)
+**
+** This file is part of the Qt Components project.
+**
+** $QT_BEGIN_LICENSE:BSD$
+** You may use this file under the terms of the BSD license as follows:
+**
+** "Redistribution and use in source and binary forms, with or without
+** modification, are permitted provided that the following conditions are
+** met:
+**   * Redistributions of source code must retain the above copyright
+**     notice, this list of conditions and the following disclaimer.
+**   * Redistributions in binary form must reproduce the above copyright
+**     notice, this list of conditions and the following disclaimer in
+**     the documentation and/or other materials provided with the
+**     distribution.
+**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
+**     the names of its contributors may be used to endorse or promote
+**     products derived from this software without specific prior written
+**     permission.
+**
+** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+import QtQuick 1.1
+import "custom" as Components
+Item {
+    default property alias data: content.data
+    implicitWidth: adjustToContentSize ? content.childrenRect.width + 2 * content.frameWidth : 30
+    implicitHeight: adjustToContentSize ? content.childrenRect.height + 2 * content.frameWidth : 30
+    property alias raised: style.raised
+    property alias sunken: style.sunken
+    property bool adjustToContentSize: false
+    StyleItem {
+        id: style
+        anchors.fill: parent
+        elementType: "frame"
+        Item {
+            id: content
+            anchors.fill: parent
+            anchors.margins: frameWidth
+            property int frameWidth: styleitem.pixelMetric("defaultframewidth");
+        }
+    }
+}
+
diff --git a/imports/QtDesktop/GroupBox.qml b/imports/QtDesktop/GroupBox.qml
new file mode 100644
index 0000000..862d4e3
--- /dev/null
+++ b/imports/QtDesktop/GroupBox.qml
@@ -0,0 +1,61 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** All rights reserved.
+** Contact: Nokia Corporation (qt-info@nokia.com)
+**
+** This file is part of the Qt Components project.
+**
+** $QT_BEGIN_LICENSE:BSD$
+** You may use this file under the terms of the BSD license as follows:
+**
+** "Redistribution and use in source and binary forms, with or without
+** modification, are permitted provided that the following conditions are
+** met:
+**   * Redistributions of source code must retain the above copyright
+**     notice, this list of conditions and the following disclaimer.
+**   * Redistributions in binary form must reproduce the above copyright
+**     notice, this list of conditions and the following disclaimer in
+**     the documentation and/or other materials provided with the
+**     distribution.
+**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
+**     the names of its contributors may be used to endorse or promote
+**     products derived from this software without specific prior written
+**     permission.
+**
+** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+import QtQuick 1.1
+import "custom" as Components
+
+Components.GroupBox {
+    id: groupbox
+    implicitWidth: Math.max(200, contentWidth + backgroundItem.implicitWidth)
+    implicitHeight: contentHeight + backgroundItem.implicitHeight + 4
+    property bool flat: false
+    background : StyleItem {
+        id: styleitem
+        elementType: "groupbox"
+        anchors.fill: parent
+        text: groupbox.title
+        hover: checkbox.containsMouse
+        on: checkbox.checked
+        hasFocus: checkbox.activeFocus
+        activeControl: checkable ? "checkbox" : ""
+        sunken: !flat
+        contentHeight:  (title.length > 0 || checkable) ? 24 : 4
+    }
+}
diff --git a/imports/QtDesktop/Label.qml b/imports/QtDesktop/Label.qml
new file mode 100644
index 0000000..29a9e5b
--- /dev/null
+++ b/imports/QtDesktop/Label.qml
@@ -0,0 +1,48 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** All rights reserved.
+** Contact: Nokia Corporation (qt-info@nokia.com)
+**
+** This file is part of the Qt Components project.
+**
+** $QT_BEGIN_LICENSE:BSD$
+** You may use this file under the terms of the BSD license as follows:
+**
+** "Redistribution and use in source and binary forms, with or without
+** modification, are permitted provided that the following conditions are
+** met:
+**   * Redistributions of source code must retain the above copyright
+**     notice, this list of conditions and the following disclaimer.
+**   * Redistributions in binary form must reproduce the above copyright
+**     notice, this list of conditions and the following disclaimer in
+**     the documentation and/or other materials provided with the
+**     distribution.
+**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
+**     the names of its contributors may be used to endorse or promote
+**     products derived from this software without specific prior written
+**     permission.
+**
+** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+import QtQuick 1.1
+
+Text {
+    id: label
+    font.pixelSize: 11
+    color: pal.text
+    SystemPalette {id:pal}
+}
diff --git a/imports/QtDesktop/MenuItem.qml b/imports/QtDesktop/MenuItem.qml
new file mode 100644
index 0000000..580d697
--- /dev/null
+++ b/imports/QtDesktop/MenuItem.qml
@@ -0,0 +1,48 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** All rights reserved.
+** Contact: Nokia Corporation (qt-info@nokia.com)
+**
+** This file is part of the Qt Components project.
+**
+** $QT_BEGIN_LICENSE:BSD$
+** You may use this file under the terms of the BSD license as follows:
+**
+** "Redistribution and use in source and binary forms, with or without
+** modification, are permitted provided that the following conditions are
+** met:
+**   * Redistributions of source code must retain the above copyright
+**     notice, this list of conditions and the following disclaimer.
+**   * Redistributions in binary form must reproduce the above copyright
+**     notice, this list of conditions and the following disclaimer in
+**     the documentation and/or other materials provided with the
+**     distribution.
+**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
+**     the names of its contributors may be used to endorse or promote
+**     products derived from this software without specific prior written
+**     permission.
+**
+** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+import QtQuick 1.1
+
+Item {
+    property string text
+    property string iconName
+    signal hovered
+    signal selected
+}
diff --git a/imports/QtDesktop/ProgressBar.qml b/imports/QtDesktop/ProgressBar.qml
new file mode 100644
index 0000000..f86f59f
--- /dev/null
+++ b/imports/QtDesktop/ProgressBar.qml
@@ -0,0 +1,72 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** All rights reserved.
+** Contact: Nokia Corporation (qt-info@nokia.com)
+**
+** This file is part of the Qt Components project.
+**
+** $QT_BEGIN_LICENSE:BSD$
+** You may use this file under the terms of the BSD license as follows:
+**
+** "Redistribution and use in source and binary forms, with or without
+** modification, are permitted provided that the following conditions are
+** met:
+**   * Redistributions of source code must retain the above copyright
+**     notice, this list of conditions and the following disclaimer.
+**   * Redistributions in binary form must reproduce the above copyright
+**     notice, this list of conditions and the following disclaimer in
+**     the documentation and/or other materials provided with the
+**     distribution.
+**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
+**     the names of its contributors may be used to endorse or promote
+**     products derived from this software without specific prior written
+**     permission.
+**
+** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+import QtQuick 1.1
+import "custom" as Components
+
+Components.ProgressBar {
+    id:progressbar
+
+    property int orientation: Qt.Horizontal
+    property string styleHint
+
+    implicitWidth: orientation === Qt.Horizontal ? 200 : backgroundItem.implicitHeight
+    implicitHeight: orientation === Qt.Horizontal ? backgroundItem.implicitHeight : 200
+
+
+    SystemPalette {id: syspal}
+
+    background: StyleItem {
+        anchors.fill: parent
+        elementType: "progressbar"
+        // XXX: since desktop uses int instead of real, the progressbar
+        // range [0..1] must be stretched to a good precision
+        property int factor : 1000
+        value:   indeterminate ? 0 : progressbar.value * factor // does indeterminate value need to be 1 on windows?
+        minimum: indeterminate ? 0 : progressbar.minimumValue * factor
+        maximum: indeterminate ? 0 : progressbar.maximumValue * factor
+        enabled: progressbar.enabled
+        horizontal: progressbar.orientation == Qt.Horizontal
+        hint: progressbar.styleHint
+        contentWidth: 23
+        contentHeight: 23
+    }
+}
+
diff --git a/imports/QtDesktop/RadioButton.qml b/imports/QtDesktop/RadioButton.qml
new file mode 100644
index 0000000..f8d0fdc
--- /dev/null
+++ b/imports/QtDesktop/RadioButton.qml
@@ -0,0 +1,77 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** All rights reserved.
+** Contact: Nokia Corporation (qt-info@nokia.com)
+**
+** This file is part of the Qt Components project.
+**
+** $QT_BEGIN_LICENSE:BSD$
+** You may use this file under the terms of the BSD license as follows:
+**
+** "Redistribution and use in source and binary forms, with or without
+** modification, are permitted provided that the following conditions are
+** met:
+**   * Redistributions of source code must retain the above copyright
+**     notice, this list of conditions and the following disclaimer.
+**   * Redistributions in binary form must reproduce the above copyright
+**     notice, this list of conditions and the following disclaimer in
+**     the documentation and/or other materials provided with the
+**     distribution.
+**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
+**     the names of its contributors may be used to endorse or promote
+**     products derived from this software without specific prior written
+**     permission.
+**
+** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+import QtQuick 1.1
+import "custom" as Components
+
+// jb : Size should not depend on background, we should make it consistent
+
+Components.CheckBox {
+    id: radiobutton
+    property string text
+    property string styleHint
+
+    implicitWidth: Math.max(120, backgroundItem.implicitWidth)
+    implicitHeight: backgroundItem.implicitHeight
+
+    background: StyleItem {
+        elementType: "radiobutton"
+        sunken: pressed
+        on: checked || pressed
+        hover: containsMouse
+        enabled: radiobutton.enabled
+        hasFocus: radiobutton.activeFocus
+        hint: radiobutton.styleHint
+        contentHeight: textitem.implicitHeight
+        contentWidth: textitem.implicitWidth + indicatorWidth
+        property int indicatorWidth: pixelMetric("indicatorwidth") + 2
+        Text {
+            id: textitem
+            text: radiobutton.text
+            anchors.left: parent.left
+            anchors.leftMargin: parent.indicatorWidth
+            anchors.verticalCenter: parent.verticalCenter
+            anchors.right: parent.right
+            elide: Text.ElideRight
+        }
+    }
+    Keys.onSpacePressed: {clicked(); checked = !checked; }
+}
+
diff --git a/imports/QtDesktop/ScrollArea.qml b/imports/QtDesktop/ScrollArea.qml
new file mode 100644
index 0000000..05d7bc1
--- /dev/null
+++ b/imports/QtDesktop/ScrollArea.qml
@@ -0,0 +1,136 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** All rights reserved.
+** Contact: Nokia Corporation (qt-info@nokia.com)
+**
+** This file is part of the Qt Components project.
+**
+** $QT_BEGIN_LICENSE:BSD$
+** You may use this file under the terms of the BSD license as follows:
+**
+** "Redistribution and use in source and binary forms, with or without
+** modification, are permitted provided that the following conditions are
+** met:
+**   * Redistributions of source code must retain the above copyright
+**     notice, this list of conditions and the following disclaimer.
+**   * Redistributions in binary form must reproduce the above copyright
+**     notice, this list of conditions and the following disclaimer in
+**     the documentation and/or other materials provided with the
+**     distribution.
+**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
+**     the names of its contributors may be used to endorse or promote
+**     products derived from this software without specific prior written
+**     permission.
+**
+** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+import QtQuick 1.1
+import "custom" as Components
+import "private" as Private
+
+FocusScope {
+    id: root
+    width: 100
+    height: 100
+
+    // Cosmetic propeties
+    property bool frame: true
+    property bool frameAroundContents: styleitem.styleHint("framearoundcontents")
+    property bool highlightOnFocus: false
+    property alias color: colorRect.color // background color
+    property int frameWidth: frame ? styleitem.frameWidth : 0
+
+    // Item properties
+    property alias horizontalScrollBar: scroller.horizontalScrollBar
+    property alias verticalScrollBar: scroller.verticalScrollBar
+
+    // Viewport properties
+    property int contentX
+    property int contentY
+    property int contentHeight : content.childrenRect.height
+    property int contentWidth: content.childrenRect.width
+    property int viewportHeight: height - (horizontalScrollBar.visible ? horizontalScrollBar.height : 0) - 2 * frameWidth
+    property int viewportWidth: width - (verticalScrollBar.visible ? verticalScrollBar.width : 0) - 2 * frameWidth
+    default property alias data: content.data
+
+    Rectangle {
+        id: colorRect
+        color: "transparent"
+        anchors.fill:styleitem
+        anchors.margins: frameWidth
+    }
+
+    StyleItem {
+        id: styleitem
+        elementType: "frame"
+        sunken: true
+        visible: frame
+        anchors.fill: parent
+        anchors.rightMargin: frame ? (frameAroundContents ? (verticalScrollBar.visible ? verticalScrollBar.width + 2 * frameMargins : 0) : 0) : 0
+        anchors.bottomMargin: frame ? (frameAroundContents ? (horizontalScrollBar.visible ? horizontalScrollBar.height + 2 * frameMargins : 0) : 0) : 0
+        anchors.topMargin: frame ? (frameAroundContents ? 0 : 0) : 0
+        property int frameWidth
+        property int scrollbarspacing: styleitem.pixelMetric("scrollbarspacing");
+        property int frameMargins : frame ? scrollbarspacing : 0
+        Component.onCompleted: frameWidth = styleitem.pixelMetric("defaultframewidth");
+    }
+
+    onContentYChanged: {
+        scroller.blockUpdates = true
+        verticalScrollBar.value = contentY
+        scroller.verticalValue = contentY
+        scroller.blockUpdates = false
+    }
+
+    onContentXChanged: {
+        scroller.blockUpdates = true
+        horizontalScrollBar.value = contentX
+        scroller.horizontalValue = contentX
+        scroller.blockUpdates = false
+    }
+
+    Item {
+        id: clipper
+        anchors.fill: styleitem
+        anchors.margins: frameWidth
+        clip: true
+        Item {
+            id: content
+            x: -root.contentX
+            y: -root.contentY
+        }
+    }
+
+
+    Private.ScrollAreaHelper {
+        id: scroller
+        anchors.fill: parent
+    }
+
+    StyleItem {
+        z: 2
+        anchors.fill: parent
+
+        anchors.topMargin: -3
+        anchors.leftMargin: -3
+        anchors.rightMargin: -5
+        anchors.bottomMargin: -5
+
+        visible: highlightOnFocus && parent.activeFocus && styleitem.styleHint("focuswidget")
+        elementType: "focusframe"
+    }
+}
diff --git a/imports/QtDesktop/ScrollBar.qml b/imports/QtDesktop/ScrollBar.qml
new file mode 100644
index 0000000..eb3cbb5
--- /dev/null
+++ b/imports/QtDesktop/ScrollBar.qml
@@ -0,0 +1,206 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** All rights reserved.
+** Contact: Nokia Corporation (qt-info@nokia.com)
+**
+** This file is part of the Qt Components project.
+**
+** $QT_BEGIN_LICENSE:BSD$
+** You may use this file under the terms of the BSD license as follows:
+**
+** "Redistribution and use in source and binary forms, with or without
+** modification, are permitted provided that the following conditions are
+** met:
+**   * Redistributions of source code must retain the above copyright
+**     notice, this list of conditions and the following disclaimer.
+**   * Redistributions in binary form must reproduce the above copyright
+**     notice, this list of conditions and the following disclaimer in
+**     the documentation and/or other materials provided with the
+**     distribution.
+**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
+**     the names of its contributors may be used to endorse or promote
+**     products derived from this software without specific prior written
+**     permission.
+**
+** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+import QtQuick 1.1
+import "custom" as Components
+
+Item {
+    id: scrollbar
+
+    property int orientation : Qt.Horizontal
+    property alias minimumValue: slider.minimumValue
+    property alias maximumValue: slider.maximumValue
+    property int pageStep: styleitem.horizontal ? width : height
+    property int singleStep: 20
+    property alias value: slider.value
+    property bool scrollToClickposition: styleitem.styleHint("scrollToClickPosition")
+
+    implicitWidth: orientation == Qt.Horizontal ? 200 : internal.scrollbarExtent
+    implicitHeight: orientation == Qt.Horizontal ? internal.scrollbarExtent : 200
+
+    onValueChanged: internal.updateHandle()
+
+    MouseArea {
+        id: internal
+
+        anchors.fill: parent
+        property bool upPressed
+        property bool downPressed
+        property bool pageUpPressed
+        property bool pageDownPressed
+
+        property bool autoincrement: false
+        property int scrollbarExtent : styleitem.pixelMetric("scrollbarExtent");
+        property bool handlePressed
+
+        // Update hover item
+        onEntered: styleitem.activeControl = styleitem.hitTest(mouseX, mouseY)
+        onExited: styleitem.activeControl = "none"
+        onMouseXChanged: styleitem.activeControl = styleitem.hitTest(mouseX, mouseY)
+        hoverEnabled: true
+
+        property variant control
+        property variant pressedX
+        property variant pressedY
+        property int oldPosition
+        property int grooveSize
+
+        Timer {
+            running: internal.upPressed || internal.downPressed || internal.pageUpPressed || internal.pageDownPressed
+            interval: 350
+            onTriggered: internal.autoincrement = true
+        }
+
+        Timer {
+            running: internal.autoincrement
+            interval: 60
+            repeat: true
+            onTriggered: internal.upPressed ? internal.decrement() : internal.downPressed ? internal.increment() :
+                                                                     internal.pageUpPressed ? internal.decrementPage() :
+                                                                                              internal.incrementPage()
+        }
+
+        onMousePositionChanged: {
+            if (pressed && control === "handle") {
+                //slider.positionAtMaximum = grooveSize
+                if (!styleitem.horizontal)
+                    slider.position = oldPosition + (mouseY - pressedY)
+                else
+                    slider.position = oldPosition + (mouseX - pressedX)
+            }
+        }
+
+        onPressed: {
+            control = styleitem.hitTest(mouseX,mouseY)
+            scrollToClickposition = styleitem.styleHint("scrollToClickPosition")
+            grooveSize =  styleitem.horizontal? styleitem.subControlRect("groove").width -
+                                                styleitem.subControlRect("handle").width:
+                                                    styleitem.subControlRect("groove").height -
+                                                    styleitem.subControlRect("handle").height;
+            if (control == "handle") {
+                pressedX = mouseX
+                pressedY = mouseY
+                oldPosition = slider.position
+            } else if (control == "up") {
+                decrement();
+                upPressed = true
+            } else if (control == "down") {
+                increment();
+                downPressed = true
+            } else if (!scrollToClickposition){
+                if (control == "upPage") {
+                    decrementPage();
+                    pageUpPressed = true
+                } else if (control == "downPage") {
+                    incrementPage();
+                    pageDownPressed = true
+                }
+            } else {
+                slider.position = styleitem.horizontal ? mouseX - handleRect.width/2
+                                                       : mouseY - handleRect.height/2
+            }
+        }
+
+        onReleased: {
+            autoincrement = false;
+            upPressed = false;
+            downPressed = false;
+            pageUpPressed = false
+            pageDownPressed = false
+            control = ""
+        }
+
+        function incrementPage() {
+            value += pageStep
+            if (value > maximumValue)
+                value = maximumValue
+        }
+
+        function decrementPage() {
+            value -= pageStep
+            if (value < minimumValue)
+                value = minimumValue
+        }
+
+        function increment() {
+            value += singleStep
+            if (value > maximumValue)
+                value = maximumValue
+        }
+
+        function decrement() {
+            value -= singleStep
+            if (value < minimumValue)
+                value = minimumValue
+        }
+
+        StyleItem {
+            id: styleitem
+            anchors.fill:parent
+            elementType: "scrollbar"
+            hover: activeControl != "none"
+            activeControl: "none"
+            sunken: internal.upPressed | internal.downPressed
+            minimum: slider.minimumValue
+            maximum: slider.maximumValue
+            value: slider.value
+            horizontal: orientation == Qt.Horizontal
+            enabled: parent.enabled
+        }
+
+        property variant handleRect: Qt.rect(0,0,0,0)
+        property variant grooveRect: Qt.rect(0,0,0,0)
+        function updateHandle() {
+            internal.handleRect = styleitem.subControlRect("handle")
+            grooveRect = styleitem.subControlRect("groove");
+        }
+
+        RangeModel {
+            id: slider
+            minimumValue: 0.0
+            maximumValue: 1.0
+            value: 0
+            stepSize: 0.0
+            inverted: false
+            positionAtMaximum: internal.grooveSize
+        }
+    }
+
+}
diff --git a/imports/QtDesktop/Slider.qml b/imports/QtDesktop/Slider.qml
new file mode 100644
index 0000000..0ad0492
--- /dev/null
+++ b/imports/QtDesktop/Slider.qml
@@ -0,0 +1,106 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** All rights reserved.
+** Contact: Nokia Corporation (qt-info@nokia.com)
+**
+** This file is part of the Qt Components project.
+**
+** $QT_BEGIN_LICENSE:BSD$
+** You may use this file under the terms of the BSD license as follows:
+**
+** "Redistribution and use in source and binary forms, with or without
+** modification, are permitted provided that the following conditions are
+** met:
+**   * Redistributions of source code must retain the above copyright
+**     notice, this list of conditions and the following disclaimer.
+**   * Redistributions in binary form must reproduce the above copyright
+**     notice, this list of conditions and the following disclaimer in
+**     the documentation and/or other materials provided with the
+**     distribution.
+**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
+**     the names of its contributors may be used to endorse or promote
+**     products derived from this software without specific prior written
+**     permission.
+**
+** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+import QtQuick 1.1
+import "custom" as Components
+
+// jens: ContainsMouse breaks drag functionality
+
+Components.Slider{
+    id: slider
+
+    property bool tickmarksEnabled: false
+    property string tickPosition: "Below" // "Above", "Below", "BothSides"
+
+    StyleItem {
+        id:buttonitem
+        elementType: "slider"
+        contentWidth:23
+        contentHeight:23
+        visible: false
+    }
+
+    property int orientation: Qt.Horizontal
+
+    implicitWidth: orientation === Qt.Horizontal ? 200 : buttonitem.implicitHeight
+    implicitHeight: orientation === Qt.Horizontal ? buttonitem.implicitHeight : 200
+
+    property string styleHint;
+
+    groove: StyleItem {
+        anchors.fill:parent
+        elementType: "slider"
+        sunken: pressed
+        maximum: slider.maximumValue*100
+        minimum: slider.minimumValue*100
+        step: slider.stepSize*100
+        value: slider.value*100
+        horizontal: slider.orientation == Qt.Horizontal
+        enabled: slider.enabled
+        hasFocus: slider.focus
+        hint: slider.styleHint
+        activeControl: tickmarksEnabled ? tickPosition.toLowerCase() : ""
+    }
+
+    handle: null
+    valueIndicator: null
+
+    Keys.onRightPressed: value += (maximumValue - minimumValue)/10.0
+    Keys.onLeftPressed: value -= (maximumValue - minimumValue)/10.0
+
+    WheelArea {
+        id: wheelarea
+        anchors.fill: parent
+        horizontalMinimumValue: slider.minimumValue
+        horizontalMaximumValue: slider.maximumValue
+        verticalMinimumValue: slider.minimumValue
+        verticalMaximumValue: slider.maximumValue
+        property double step: (slider.maximumValue - slider.minimumValue)/100
+
+        onVerticalWheelMoved: {
+            value += verticalDelta/4*step
+        }
+
+        onHorizontalWheelMoved: {
+            value += horizontalDelta/4*step
+        }
+    }
+
+}
diff --git a/imports/QtDesktop/SpinBox.qml b/imports/QtDesktop/SpinBox.qml
new file mode 100644
index 0000000..212499d
--- /dev/null
+++ b/imports/QtDesktop/SpinBox.qml
@@ -0,0 +1,140 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** All rights reserved.
+** Contact: Nokia Corporation (qt-info@nokia.com)
+**
+** This file is part of the Qt Components project.
+**
+** $QT_BEGIN_LICENSE:BSD$
+** You may use this file under the terms of the BSD license as follows:
+**
+** "Redistribution and use in source and binary forms, with or without
+** modification, are permitted provided that the following conditions are
+** met:
+**   * Redistributions of source code must retain the above copyright
+**     notice, this list of conditions and the following disclaimer.
+**   * Redistributions in binary form must reproduce the above copyright
+**     notice, this list of conditions and the following disclaimer in
+**     the documentation and/or other materials provided with the
+**     distribution.
+**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
+**     the names of its contributors may be used to endorse or promote
+**     products derived from this software without specific prior written
+**     permission.
+**
+** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+import QtQuick 1.1
+import "custom" as Components
+
+Components.SpinBox {
+    id:spinbox
+
+    property variant __upRect;
+    property variant __downRect;
+    property int __margin: (height -16)/2
+    property string styleHint
+
+    // Align height with button
+    topMargin: __margin
+    bottomMargin: __margin
+
+    leftMargin:6
+    rightMargin:6
+
+    StyleItem {
+        id:edititem
+        elementType: "edit"
+        visible: false
+        contentWidth: 70
+        contentHeight: 20
+    }
+
+    implicitWidth: edititem.implicitWidth
+    implicitHeight: edititem.implicitHeight
+
+    clip:false
+
+    background: Item {
+        anchors.fill: parent
+        property variant __editRect
+
+        Rectangle {
+            id: editBackground
+            x: __editRect.x - 1
+            y: __editRect.y
+            width: __editRect.width + 1
+            height: __editRect.height
+        }
+
+        Item {
+            id: focusFrame
+            anchors.fill: editBackground
+            visible: frameitem.styleHint("focuswidget")
+            StyleItem {
+                id: frameitem
+                anchors.margins: -6
+                anchors.leftMargin: -5
+                anchors.rightMargin: -6
+                anchors.fill: parent
+                visible: spinbox.activeFocus
+                elementType: "focusframe"
+            }
+        }
+
+        function updateRect() {
+            __upRect = styleitem.subControlRect("up");
+            __downRect = styleitem.subControlRect("down");
+            __editRect = styleitem.subControlRect("edit");
+            spinbox.leftMargin = __editRect.x + 2
+            spinbox.rightMargin = spinbox.width -__editRect.width - __editRect.x
+        }
+
+        Component.onCompleted: updateRect()
+        onWidthChanged: updateRect()
+        onHeightChanged: updateRect()
+
+        StyleItem {
+            id: styleitem
+            anchors.fill: parent
+            elementType: "spinbox"
+            sunken: (downEnabled && downPressed) | (upEnabled && upPressed)
+            hover: containsMouse
+            hasFocus: spinbox.focus
+            enabled: spinbox.enabled
+            value: (upPressed ? 1 : 0)           |
+                   (downPressed == 1 ? 1<<1 : 0) |
+                   (upEnabled ? (1<<2) : 0)      |
+                   (downEnabled == 1 ? (1<<3) : 0)
+            hint: spinbox.styleHint
+        }
+    }
+
+    up: Item {
+        x: __upRect.x
+        y: __upRect.y
+        width: __upRect.width
+        height: __upRect.height
+    }
+
+    down: Item {
+        x: __downRect.x
+        y: __downRect.y
+        width: __downRect.width
+        height: __downRect.height
+    }
+}
diff --git a/imports/QtDesktop/SplitterColumn.qml b/imports/QtDesktop/SplitterColumn.qml
new file mode 100644
index 0000000..7bffc9f
--- /dev/null
+++ b/imports/QtDesktop/SplitterColumn.qml
@@ -0,0 +1,163 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** All rights reserved.
+** Contact: Nokia Corporation (qt-info@nokia.com)
+**
+** This file is part of the Qt Components project.
+**
+** $QT_BEGIN_LICENSE:BSD$
+** You may use this file under the terms of the BSD license as follows:
+**
+** "Redistribution and use in source and binary forms, with or without
+** modification, are permitted provided that the following conditions are
+** met:
+**   * Redistributions of source code must retain the above copyright
+**     notice, this list of conditions and the following disclaimer.
+**   * Redistributions in binary form must reproduce the above copyright
+**     notice, this list of conditions and the following disclaimer in
+**     the documentation and/or other materials provided with the
+**     distribution.
+**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
+**     the names of its contributors may be used to endorse or promote
+**     products derived from this software without specific prior written
+**     permission.
+**
+** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+import QtQuick 1.1
+import "custom" as Components
+
+/*
+*
+* SplitterColumn
+*
+* SplitterColumn is a component that provides a way to layout items horisontally with
+* a draggable splitter added in-between each item.
+*
+* Add items to the SplitterColumn by inserting them as child items. The splitter handle
+* is outsourced as a delegate (handleBackground). To enable the user to drag the handle,
+* it will need to contain a mouse area that communicates with the SplitterColumn by binding
+* 'drag.target: handle'. The 'handle' property points to the handle item that embedds
+* the delegate. To change handle positions, either change 'y; (or 'height') of 'handle', or
+* change the height of the child items inside the SplitterColumn. If you set the visibility
+* of a child item to false, the corresponding handle will also be hidden, and the
+* SplitterColumn will perform a layout update to fill up available space.
+*
+* There will always be one (and only one) item in the SplitterColumn that is 'expanding'.
+* The expanding item is the child that will get all the remaining space in the SplitterColumn
+* (down to its own mimimumHeight/Height) when all other items have been layed out.
+* This means that that 'height', 'percentageHeight' and 'maximumHeight' will be ignored for this item.
+* By default, the last visible child item of the SplitterColumn will be 'expanding'.
+*
+* A handle can belong to the item on the left side, or the right side, of the handle. Which one depends
+* on the expaning item. If the expanding item is to the right of the handle, the
+* handle will belong to the item on the left. If it is to the left, it will belong to the item on the
+* right. This will again control which item that gets resized when the user drags a handle, and which
+* handle that gets hidden when an item is told to hide.
+*
+* NB: Since SplitterColumn might modify geometry properties like 'height' and 'y; of child items
+* to e.g. ensure they stay within minimumHeight/maximumHeight, explicit expression bindings
+* to such properties can easily be broken up by the SplitterColumn, and is not recommended.
+*
+* The SplitterColumn contains the following API:
+*
+* Component handleBackground - delegate that will be instanciated between each
+*   child item. Inside the delegate, the following properties are available:
+*   int handleIndex - specifies the index of the splitter handle. The handle
+*       between the first and the second item will get index 0, the next handle index 1 etc.
+*   Item handle - convenience property that points to the item where the handle background is
+*       instanciated as a child. Identical to splitterColumn.handles[handleIndex]. The handle
+*       background iteself can be accessed through handle.item.
+*       Modify 'handle[d.offset]' to move the handle (or change 'height' of SplitterColumn child items).
+*   Item splitterItem - convenience property that points to the child item that the handle controls.
+*       Also refer to information about the expanding item above.
+*   Item splitterColumn - points to the SplitterColumn that the handle is in.
+* List<Item> items - contains the list of child items in the SplitterColumn. Currently read-only.
+* List<Item> handles - contains the list of splitter handles in the SplitterColumn. Note that this list will
+*   be populated after all child items has completed, so accessing it from Component.onCompleted
+*   inside a SplitterColumn child item will not work.  To get to the handle background, access the
+*   'background' property of the handle, e.g. handles[0].background. Read-only.
+* real preferredHeight/Height - contains the accumulated with of all child items and handles, except
+*   the expanding item. If the expanding item has a minimum height, the minimum height will
+*   be included.
+*
+* The following attached properties can be used for each child item of SplitterColumn:
+*
+* real Splitter.minimumSize - ensures that the item cannot be resized below the
+*   given pixelvalue. A value of -1 will disable it.
+* real Splitter.maximumSize - ensures that the item cannot be resized above the
+*   given pixelvalue. A value of -1 will disable it.
+* real percentageHeight - This value specifies a percentage (0 - 100) of the height of the
+*   SplitterColumn height. If the height of the SplitterColumn change, the height of the item will
+*   change as well. 'percentageHeight' have precedence over 'height', which means that
+*   SplitterColumn will ignore any assignments to 'height'. A value of -1 disables it.
+* bool Splitter.expanding - See explanation of 'expanding' above. If set to true, the current item
+*   will be the expanding item in the SplitterColumn. If set to false, the SplitterColumn will
+*   autmatically choose the last visible child of the SplitterColumn as expanding instead.
+* int Splitter.itemIndex - will be assigned a read-only value with the item index. Can be used to e.g. look-up
+*   the handles sourrounding the item (parent.handles[itemIndex])
+*
+* Example:
+*
+* To create a SplitterColumn with three items, and let
+* the center item be the one that should be expanding, one
+* could do the following:
+*
+*    SplitterColumn {
+*        anchors.fill: parent
+*
+*        Rectangle {
+*            Splitter.maximumSize: 400
+*            color: "gray"
+*            height: 200
+*        }
+*        Rectangle {
+*            Splitter.minimumSize: 50
+*            Splitter.expanding: true
+*            color: "darkgray"
+*        }
+*        Rectangle {
+*            color: "gray"
+*            height: 200
+*        }
+*    }
+*/
+
+Components.Splitter {
+    orientation: Qt.Vertical
+    handleBackground: StyleItem {
+        id: styleitem
+        elementType: "splitter"
+        height: handleWidth !== -1 ?  handleWidth : pixelMetric("splitterwidth")
+        horizontal: false
+        property alias pressed: mouseArea.pressed
+        property bool dragged: mouseArea.drag.active
+
+        MouseArea {
+            id: mouseArea
+            anchors.fill: parent
+            anchors.topMargin: (parent.height <= 1) ? -2 : 0
+            anchors.bottomMargin: (parent.height <= 1) ? -2 : 0
+            drag.axis: Drag.XandYAxis // Why doesn't X-axis work?
+            drag.target: handle
+            CursorArea {
+                anchors.fill: parent
+                cursor: CursorArea.SplitVCursor
+            }
+        }
+    }
+}
diff --git a/imports/QtDesktop/SplitterRow.qml b/imports/QtDesktop/SplitterRow.qml
new file mode 100644
index 0000000..71dd970
--- /dev/null
+++ b/imports/QtDesktop/SplitterRow.qml
@@ -0,0 +1,164 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** All rights reserved.
+** Contact: Nokia Corporation (qt-info@nokia.com)
+**
+** This file is part of the Qt Components project.
+**
+** $QT_BEGIN_LICENSE:BSD$
+** You may use this file under the terms of the BSD license as follows:
+**
+** "Redistribution and use in source and binary forms, with or without
+** modification, are permitted provided that the following conditions are
+** met:
+**   * Redistributions of source code must retain the above copyright
+**     notice, this list of conditions and the following disclaimer.
+**   * Redistributions in binary form must reproduce the above copyright
+**     notice, this list of conditions and the following disclaimer in
+**     the documentation and/or other materials provided with the
+**     distribution.
+**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
+**     the names of its contributors may be used to endorse or promote
+**     products derived from this software without specific prior written
+**     permission.
+**
+** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+import QtQuick 1.1
+import "custom" as Components
+
+/*
+*
+* SplitterRow
+*
+* SplitterRow is a component that provides a way to layout items horisontally with
+* a draggable splitter added in-between each item.
+*
+* Add items to the SplitterRow by inserting them as child items. The splitter handle
+* is outsourced as a delegate (handleBackground). To enable the user to drag the handle,
+* it will need to contain a mouse area that communicates with the SplitterRow by binding
+* 'drag.target: handle'. The 'handle' property points to the handle item that embedds
+* the delegate. To change handle positions, either change 'x' (or 'width') of 'handle', or
+* change the width of the child items inside the SplitterRow. If you set the visibility
+* of a child item to false, the corresponding handle will also be hidden, and the
+* SplitterRow will perform a layout update to fill up available space.
+*
+* There will always be one (and only one) item in the SplitterRow that is 'expanding'.
+* The expanding item is the child that will get all the remaining space in the SplitterRow
+* (down to its own mimimumWidth/Height) when all other items have been layed out.
+* This means that that 'width', 'percentageWidth' and 'maximumWidth' will be ignored for this item.
+* By default, the last visible child item of the SplitterRow will be 'expanding'.
+*
+* A handle can belong to the item on the left side, or the right side, of the handle. Which one depends
+* on the expaning item. If the expanding item is to the right of the handle, the
+* handle will belong to the item on the left. If it is to the left, it will belong to the item on the
+* right. This will again control which item that gets resized when the user drags a handle, and which
+* handle that gets hidden when an item is told to hide.
+*
+* NB: Since SplitterRow might modify geometry properties like 'width' and 'x' of child items
+* to e.g. ensure they stay within minimumWidth/maximumWidth, explicit expression bindings
+* to such properties can easily be broken up by the SplitterRow, and is not recommended.
+*
+* The SplitterRow contains the following API:
+*
+* Component handleBackground - delegate that will be instanciated between each
+*   child item. Inside the delegate, the following properties are available:
+*   int handleIndex - specifies the index of the splitter handle. The handle
+*       between the first and the second item will get index 0, the next handle index 1 etc.
+*   Item handle - convenience property that points to the item where the handle background is
+*       instanciated as a child. Identical to splitterRow.handles[handleIndex]. The handle
+*       background iteself can be accessed through handle.item.
+*       Modify 'handle[d.offset]' to move the handle (or change 'width' of SplitterRow child items).
+*   Item splitterItem - convenience property that points to the child item that the handle controls.
+*       Also refer to information about the expanding item above.
+*   Item splitterRow - points to the SplitterRow that the handle is in.
+* List<Item> items - contains the list of child items in the SplitterRow. Currently read-only.
+* List<Item> handles - contains the list of splitter handles in the SplitterRow. Note that this list will
+*   be populated after all child items has completed, so accessing it from Component.onCompleted
+*   inside a SplitterRow child item will not work.  To get to the handle background, access the
+*   'background' property of the handle, e.g. handles[0].background. Read-only.
+* real preferredWidth/Height - contains the accumulated with of all child items and handles, except
+*   the expanding item. If the expanding item has a minimum width, the minimum width will
+*   be included.
+*
+* The following attached properties can optionally be used for each child item of SplitterRow:
+*
+* real Splitter.minimumSize - ensures that the item cannot be resized below the
+*   given pixelvalue. A value of -1 will disable it.
+* real Splitter.maximumSixe - ensures that the item cannot be resized above the
+*   given value. A value of -1 will disable it.
+* real Splitter.percentageSize - This value specifies a percentage (0 - 100) of the width of the
+*   SplitterRow width. If the width of the SplitterRow change, the width of the item will
+*   change as well. 'percentageWidth' have precedence over 'width', which means that
+*   SplitterRow will ignore any assignments to 'width'. A value of -1 disables it.
+* bool Splitter.expanding - See explanation of 'expanding' above. If set to true, the current item
+*   will be the expanding item in the SplitterRow. If set to false, the SplitterRow will
+*   autmatically choose the last visible child of the SplitterRow as expanding instead.
+* int Splitter.itemIndex - will be assigned a read-only value with the item index. Can be used to e.g. look-up
+*   the handles sourrounding the item (parent.handles[itemIndex])
+*
+* Example:
+*
+* To create a SplitterRow with three items, and let
+* the center item be the one that should be expanding, one
+* could do the following:
+*
+*    SplitterRow {
+*        anchors.fill: parent
+*
+*        Rectangle {
+*            Splitter.maximumWidth: 400
+*            color: "gray"
+*            width: 200
+*        }
+*        Rectangle {
+*            Splitter.minimumWidth: 50
+*            Splitter.expanding: true
+*            color: "darkgray"
+*        }
+*        Rectangle {
+*            color: "gray"
+*            width: 200
+*        }
+*    }
+*/
+
+
+Components.Splitter {
+    orientation: Qt.Horizontal
+    handleBackground: StyleItem {
+        id: styleitem
+        elementType: "splitter"
+        width: handleWidth !== -1 ?  handleWidth : pixelMetric("splitterwidth")
+        property alias pressed: mouseArea.pressed
+        property bool dragged: mouseArea.drag.active
+
+        MouseArea {
+            id: mouseArea
+            anchors.fill: parent
+            anchors.leftMargin: (parent.width <= 1) ? -2 : 0
+            anchors.rightMargin: (parent.width <= 1) ? -2 : 0
+            drag.axis: Qt.YAxis
+            drag.target: handle
+
+            CursorArea {
+                anchors.fill: parent
+                cursor: CursorArea.SplitHCursor
+            }
+        }
+    }
+}
diff --git a/imports/QtDesktop/StatusBar.qml b/imports/QtDesktop/StatusBar.qml
new file mode 100644
index 0000000..b24d354
--- /dev/null
+++ b/imports/QtDesktop/StatusBar.qml
@@ -0,0 +1,52 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** All rights reserved.
+** Contact: Nokia Corporation (qt-info@nokia.com)
+**
+** This file is part of the Qt Components project.
+**
+** $QT_BEGIN_LICENSE:BSD$
+** You may use this file under the terms of the BSD license as follows:
+**
+** "Redistribution and use in source and binary forms, with or without
+** modification, are permitted provided that the following conditions are
+** met:
+**   * Redistributions of source code must retain the above copyright
+**     notice, this list of conditions and the following disclaimer.
+**   * Redistributions in binary form must reproduce the above copyright
+**     notice, this list of conditions and the following disclaimer in
+**     the documentation and/or other materials provided with the
+**     distribution.
+**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
+**     the names of its contributors may be used to endorse or promote
+**     products derived from this software without specific prior written
+**     permission.
+**
+** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+import QtQuick 1.1
+import "."
+import "custom" as Components
+
+Item {
+    width: parent ? parent.width : 200
+    height: 24
+    StyleItem {
+        anchors.fill: parent
+        elementType: "statusbar"
+    }
+}
diff --git a/imports/QtDesktop/Tab.qml b/imports/QtDesktop/Tab.qml
new file mode 100644
index 0000000..a0b3450
--- /dev/null
+++ b/imports/QtDesktop/Tab.qml
@@ -0,0 +1,48 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** All rights reserved.
+** Contact: Nokia Corporation (qt-info@nokia.com)
+**
+** This file is part of the Qt Components project.
+**
+** $QT_BEGIN_LICENSE:BSD$
+** You may use this file under the terms of the BSD license as follows:
+**
+** "Redistribution and use in source and binary forms, with or without
+** modification, are permitted provided that the following conditions are
+** met:
+**   * Redistributions of source code must retain the above copyright
+**     notice, this list of conditions and the following disclaimer.
+**   * Redistributions in binary form must reproduce the above copyright
+**     notice, this list of conditions and the following disclaimer in
+**     the documentation and/or other materials provided with the
+**     distribution.
+**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
+**     the names of its contributors may be used to endorse or promote
+**     products derived from this software without specific prior written
+**     permission.
+**
+** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+import QtQuick 1.1
+
+Item {
+    id:tab
+    anchors.fill: parent
+    property string title
+    property int contentMargin
+}
diff --git a/imports/QtDesktop/TabBar.qml b/imports/QtDesktop/TabBar.qml
new file mode 100644
index 0000000..bcfcee2
--- /dev/null
+++ b/imports/QtDesktop/TabBar.qml
@@ -0,0 +1,148 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** All rights reserved.
+** Contact: Nokia Corporation (qt-info@nokia.com)
+**
+** This file is part of the Qt Components project.
+**
+** $QT_BEGIN_LICENSE:BSD$
+** You may use this file under the terms of the BSD license as follows:
+**
+** "Redistribution and use in source and binary forms, with or without
+** modification, are permitted provided that the following conditions are
+** met:
+**   * Redistributions of source code must retain the above copyright
+**     notice, this list of conditions and the following disclaimer.
+**   * Redistributions in binary form must reproduce the above copyright
+**     notice, this list of conditions and the following disclaimer in
+**     the documentation and/or other materials provided with the
+**     distribution.
+**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
+**     the names of its contributors may be used to endorse or promote
+**     products derived from this software without specific prior written
+**     permission.
+**
+** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+import QtQuick 1.1
+import "custom" as Components
+
+
+Item {
+    id: tabbar
+    property int tabHeight: tabrow.height
+    property int tabWidth: tabrow.width
+
+    Keys.onRightPressed: {
+        if (tabFrame && tabFrame.current < tabFrame.count - 1)
+            tabFrame.current = tabFrame.current + 1
+    }
+    Keys.onLeftPressed: {
+        if (tabFrame && tabFrame.current > 0)
+            tabFrame.current = tabFrame.current - 1
+    }
+
+    height: tabHeight
+
+    property Item tabFrame
+    onTabFrameChanged:parent = tabFrame
+    visible: tabFrame ? tabFrame.tabsVisible : true
+    property int __overlap : styleitem.pixelMetric("tabvshift");
+    property string position: tabFrame ? tabFrame.position : "North"
+    property string tabBarAlignment: styleitem.styleHint("tabbaralignment");
+    property int tabOverlap: styleitem.pixelMetric("taboverlap");
+    property int tabBaseOverlap: styleitem.pixelMetric("tabbaseoverlap");
+    property int tabHSpace: styleitem.pixelMetric("tabhspace");
+    property int tabVSpace: styleitem.pixelMetric("tabvspace");
+
+    function tab(index) {
+        for (var i = 0; i < tabrow.children.length; ++i) {
+            if (tabrow.children[i].tabindex == index) {
+                return tabrow.children[i]
+            }
+        }
+        return null;
+    }
+
+    StyleItem {
+        visible:false
+        id:styleitem
+        elementType: "tab"
+        text: "generic"
+    }
+
+    Row {
+        id: tabrow
+        property int paintMargins: 1
+        states:
+                State {
+            when: tabBarAlignment == "center"
+            name: "centered"
+            AnchorChanges {
+                target:tabrow
+                anchors.horizontalCenter: tabbar.horizontalCenter
+            }
+        }
+
+        Repeater {
+            id:repeater
+            focus:true
+            model: tabFrame ? tabFrame.tabs.length : null
+            delegate: Item {
+                id:tab
+                focus:true
+                property int tabindex: index
+                property bool selected : tabFrame.current == index
+                z: selected ? 1 : -1
+                width: Math.min(implicitWidth, tabbar.width/tabs.length)
+
+                implicitWidth: Math.max(textitem.paintedWidth, style.implicitWidth)
+                implicitHeight: Math.max(textitem.paintedHeight, style.implicitHeight)
+
+                StyleItem {
+                    id: style
+                    elementType: "tab"
+                    selected: tab.selected
+                    info: tabbar.position
+                    text:  tabFrame.tabs[index].title
+                    hover: mousearea.containsMouse
+                    hasFocus: tabbar.focus && selected
+                    property bool first: index === 0
+                    paintMargins: tabrow.paintMargins
+                    activeControl: tabFrame.count === 1 ? "only" : index === 0 ? "beginning" :
+                            index === tabFrame.count-1 ? "end" : "middle"
+                    anchors.fill: parent
+                    anchors.margins: -paintMargins
+                    contentWidth: textitem.width + tabHSpace + 2
+                    contentHeight: Math.max(style.fontHeight + tabVSpace + 6, 0)
+                    Text {
+                        id: textitem
+                        // Used for size hint
+                        visible: false
+                        text:  tabFrame.tabs[index].title
+                    }
+                }
+                MouseArea {
+                    id: mousearea
+                    anchors.fill: parent
+                    hoverEnabled: true
+                    onPressed: tabFrame.current = index
+                }
+            }
+        }
+    }
+}
diff --git a/imports/QtDesktop/TabFrame.qml b/imports/QtDesktop/TabFrame.qml
new file mode 100644
index 0000000..51b3487
--- /dev/null
+++ b/imports/QtDesktop/TabFrame.qml
@@ -0,0 +1,137 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** All rights reserved.
+** Contact: Nokia Corporation (qt-info@nokia.com)
+**
+** This file is part of the Qt Components project.
+**
+** $QT_BEGIN_LICENSE:BSD$
+** You may use this file under the terms of the BSD license as follows:
+**
+** "Redistribution and use in source and binary forms, with or without
+** modification, are permitted provided that the following conditions are
+** met:
+**   * Redistributions of source code must retain the above copyright
+**     notice, this list of conditions and the following disclaimer.
+**   * Redistributions in binary form must reproduce the above copyright
+**     notice, this list of conditions and the following disclaimer in
+**     the documentation and/or other materials provided with the
+**     distribution.
+**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
+**     the names of its contributors may be used to endorse or promote
+**     products derived from this software without specific prior written
+**     permission.
+**
+** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+import QtQuick 1.1
+import "custom" as Components
+
+Item {
+    id: tabWidget
+    width: 100
+    height: 100
+    property int current: 0
+    property int count: stack.children.length
+    property bool frame: true
+    property bool tabsVisible: true
+    property string position: "North"
+    default property alias tabs : stack.children
+    property Item tabBar: tabbarItem
+
+    onCurrentChanged: __setOpacities()
+    Component.onCompleted: __setOpacities()
+
+    property int __baseOverlap : frameitem.pixelMetric("tabbaseoverlap")// add paintmargins;
+    function __setOpacities() {
+        for (var i = 0; i < stack.children.length; ++i) {
+            stack.children[i].visible = (i == current ? true : false)
+        }
+    }
+
+    Component {
+        id: tabcomp
+        Tab {}
+    }
+
+    function addTab(component, title) {
+        var tab = tabcomp.createObject(this);
+        component.createObject(tab)
+        tab.parent = stack
+        tab.title = title
+        __setOpacities()
+        return tab
+    }
+
+    function removeTab(id) {
+        var tab = tabs[id]
+        tab.destroy()
+        if (current > 0)
+            current-=1
+    }
+
+    StyleItem {
+        id: frameitem
+        z: style == "oxygen" ? 1 : 0
+        elementType: "tabframe"
+        info: position
+        value: tabbarItem && tabsVisible && tabbarItem.tab(current) ? tabbarItem.tab(current).x : 0
+        minimum: tabbarItem && tabsVisible && tabbarItem.tab(current) ? tabbarItem.tab(current).width : 0
+        maximum: tabbarItem && tabsVisible ? tabbarItem.tabWidth : width
+        anchors.fill: parent
+
+        property int frameWidth: pixelMetric("defaultframewidth")
+
+        Item {
+            id: stack
+            anchors.fill: parent
+            anchors.margins: (frame ? frameitem.frameWidth : 0)
+            anchors.topMargin: anchors.margins + (frameitem.style =="mac" ? 6 : 0)
+            anchors.bottomMargin: anchors.margins + (frameitem.style =="mac" ? 6 : 0)
+        }
+
+        anchors.topMargin: tabbarItem && tabsVisible && position == "North" ? Math.max(0, tabbarItem.height - __baseOverlap) : 0
+
+        states: [
+            State {
+                name: "South"
+                when: position == "South" && tabbarItem!= undefined
+                PropertyChanges {
+                    target: frameitem
+                    anchors.topMargin: 0
+                    anchors.bottomMargin: tabbarItem ? tabbarItem.height - __baseOverlap: 0
+                }
+                PropertyChanges {
+                    target: tabbarItem
+                    anchors.topMargin: -__baseOverlap
+                }
+                AnchorChanges {
+                    target: tabbarItem
+                    anchors.top: frameitem.bottom
+                    anchors.bottom: undefined
+                }
+            }
+        ]
+    }
+    TabBar {
+        id: tabbarItem
+        tabFrame: tabWidget
+        anchors.top: tabWidget.top
+        anchors.left: tabWidget.left
+        anchors.right: tabWidget.right
+    }
+}
diff --git a/imports/QtDesktop/TableColumn.qml b/imports/QtDesktop/TableColumn.qml
new file mode 100644
index 0000000..4ebf9eb
--- /dev/null
+++ b/imports/QtDesktop/TableColumn.qml
@@ -0,0 +1,52 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** All rights reserved.
+** Contact: Nokia Corporation (qt-info@nokia.com)
+**
+** This file is part of the Qt Components project.
+**
+** $QT_BEGIN_LICENSE:BSD$
+** You may use this file under the terms of the BSD license as follows:
+**
+** "Redistribution and use in source and binary forms, with or without
+** modification, are permitted provided that the following conditions are
+** met:
+**   * Redistributions of source code must retain the above copyright
+**     notice, this list of conditions and the following disclaimer.
+**   * Redistributions in binary form must reproduce the above copyright
+**     notice, this list of conditions and the following disclaimer in
+**     the documentation and/or other materials provided with the
+**     distribution.
+**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
+**     the names of its contributors may be used to endorse or promote
+**     products derived from this software without specific prior written
+**     permission.
+**
+** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+import QtQuick 1.1
+
+QtObject {
+    property string title
+    property string role
+    property int width: 160
+    property int x
+    property bool visible: true
+    property int elideMode: Text.ElideRight
+    property int textAlignment: Text.AlignLeft
+    property Component delegate
+}
diff --git a/imports/QtDesktop/TableView.qml b/imports/QtDesktop/TableView.qml
new file mode 100644
index 0000000..f880e38
--- /dev/null
+++ b/imports/QtDesktop/TableView.qml
@@ -0,0 +1,635 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** All rights reserved.
+** Contact: Nokia Corporation (qt-info@nokia.com)
+**
+** This file is part of the Qt Components project.
+**
+** $QT_BEGIN_LICENSE:BSD$
+** You may use this file under the terms of the BSD license as follows:
+**
+** "Redistribution and use in source and binary forms, with or without
+** modification, are permitted provided that the following conditions are
+** met:
+**   * Redistributions of source code must retain the above copyright
+**     notice, this list of conditions and the following disclaimer.
+**   * Redistributions in binary form must reproduce the above copyright
+**     notice, this list of conditions and the following disclaimer in
+**     the documentation and/or other materials provided with the
+**     distribution.
+**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
+**     the names of its contributors may be used to endorse or promote
+**     products derived from this software without specific prior written
+**     permission.
+**
+** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+import QtQuick 1.1
+import "private" as Private
+
+/*
+*
+* TableView
+*
+* This component provides an item-view with resizable
+* header sections.
+*
+* You can style the drawn delegate by overriding the itemDelegate
+* property. The following properties are supported for custom
+* delegates:
+*
+* Note: Currently only row selection is available for this component
+*
+* itemheight - default platform size of item
+* itemwidth - default platform width of item
+* itemselected - if the row is currently selected
+* itemvalue - The text for this item
+* itemforeground - The default text color for an item
+*
+* For example:
+*   itemDelegate: Item {
+*       Text {
+*           anchors.verticalCenter: parent.verticalCenter
+*           color: itemForeground
+*           elide: Text.ElideRight
+*           text: itemValue
+*        }
+*    }
+*
+* Data for each row is provided through a model:
+*
+* ListModel {
+*    ListElement{ column1: "value 1"; column2: "value 2"}
+*    ListElement{ column1: "value 3"; column2: "value 4"}
+* }
+*
+* You provide title and size properties on TableColumns
+* by setting the default header property :
+*
+* TableView {
+*    TableColumn{ role: "column1" ; title: "Column 1" ; width:100}
+*    TableColumn{ role: "column2" ; title: "Column 2" ; width:200}
+*    model: datamodel
+* }
+*
+* The header sections are attached to values in the datamodel by defining
+* the listmodel property they attach to. Each property in the model, will
+* then be shown in each column section.
+*
+* The view itself does not provide sorting. This has to
+* be done on the model itself. However you can provide sorting
+* on the model and enable sort indicators on headers.
+*
+* sortColumn - The index of the currently selected sort header
+* sortIndicatorVisible - If sort indicators should be enabled
+* sortIndicatorDirection - "up" or "down" depending on state
+*
+*/
+
+FocusScope{
+    id: root
+
+    property variant model
+
+    // Framewidth seems to be 1 regardless of style
+    property int frameWidth: frame ? frameitem.frameWidth : 0;
+    width: 200
+    height: 200
+
+    // Cosmetic properties
+    property bool frame: true
+    property bool frameAroundContents: styleitem.styleHint("framearoundcontents")
+    property bool highlightOnFocus: false
+    property bool alternateRowColor: true
+    property bool headerVisible: true
+
+    // Styling properties
+    property Component itemDelegate: standardDelegate
+    property Component rowDelegate: rowDelegate
+    property Component headerDelegate: headerDelegate
+    property color backgroundColor: "white"
+
+    // Sort properties
+    property int sortColumn // Index of currently selected sort column
+    property bool sortIndicatorVisible: false // enables or disables sort indicator
+    property string sortIndicatorDirection: "down" // "up" or "down" depending on current state
+
+    // Item properties
+    default property alias header: tree.header
+    property alias horizontalScrollBar: scroller.horizontalScrollBar
+    property alias verticalScrollBar: scroller.verticalScrollBar
+
+    // Viewport properties
+    property alias contentX: tree.contentX
+    property alias contentY: tree.contentY
+    property alias contentHeight : tree.contentHeight
+    property alias contentWidth: tree.contentWidth
+    property alias viewportWidth: scroller.availableWidth
+    property alias viewportHeight: scroller.availableHeight
+    property alias count: tree.count
+
+    property alias cacheBuffer: tree.cacheBuffer
+    property alias currentIndex: tree.currentIndex // Should this be currentRowIndex?
+
+    // Signals
+    signal activated
+
+
+    Rectangle {
+        id: colorRect
+        color: backgroundColor
+        anchors.fill: frameitem
+        anchors.margins: frameWidth
+    }
+
+    Component {
+        id: standardDelegate
+        Item {
+            height: Math.max(16, styleitem.implicitHeight)
+            property int implicitWidth: sizehint.paintedWidth + 4
+            Text {
+                id: label
+                width: parent.width
+                anchors.margins: 6
+                font.pointSize: itemstyle.fontPointSize
+                anchors.left: parent.left
+                anchors.right: parent.right
+                horizontalAlignment: itemTextAlignment
+                anchors.verticalCenter: parent.verticalCenter
+                elide: itemElideMode
+                text: itemValue ? itemValue : ""
+                color: itemForeground
+            }
+            Text {
+                id: sizehint
+                font: label.font
+                text: itemValue ? itemValue : ""
+                visible: false
+            }
+        }
+    }
+
+    StyleItem {
+        id: itemstyle
+        elementType: "item"
+        visible:false
+    }
+
+    Component {
+        id: nativeDelegate
+        // This gives more native styling, but might be less performant
+        StyleItem {
+            elementType: "item"
+            text:   itemValue
+            selected: itemSelected
+        }
+    }
+
+    Component {
+        id: headerDelegate
+        StyleItem {
+            elementType: "header"
+            activeControl: itemSort
+            raised: true
+            sunken: itemPressed
+            text: itemValue
+            hover: itemContainsMouse
+            info: itemPosition
+        }
+    }
+
+    Component {
+        id: rowDelegate
+        StyleItem {
+            id: rowstyle
+            elementType: "itemrow"
+            activeControl: itemAlternateBackground ? "alternate" : ""
+            selected: itemSelected ? "true" : "false"
+        }
+    }
+
+
+    StyleItem {
+        id: frameitem
+        elementType: "frame"
+        Component.onCompleted: frameWidth = styleitem.pixelMetric("defaultframewidth");
+        sunken: true
+        visible: frame
+        anchors.fill: parent
+        anchors.rightMargin: frame ? (frameAroundContents ? (verticalScrollBar.visible ? verticalScrollBar.width + 2 * frameMargins : 0) : 0) : 0
+        anchors.bottomMargin: frame ? (frameAroundContents ? (horizontalScrollBar.visible ? horizontalScrollBar.height + 2 * frameMargins : 0) : 0) : 0
+        anchors.topMargin: frame ? frameAroundContents : 0
+        anchors.leftMargin: frame ? frameAroundContents : 0
+        property int frameWidth
+        property int scrollbarspacing: styleitem.pixelMetric("scrollbarspacing");
+        property int frameMargins : frame ? scrollbarspacing : 0
+    }
+    MouseArea {
+        id: mousearea
+
+        anchors.fill: tree
+
+        property bool autoincrement: false
+        property bool autodecrement: false
+
+        onReleased: {
+            autoincrement = false
+            autodecrement = false
+        }
+
+        // Handle vertical scrolling whem dragging mouse outside boundraries
+        Timer { running: mousearea.autoincrement && verticalScrollBar.visible; repeat: true; interval: 20 ; onTriggered: incrementCurrentIndex()}
+        Timer { running: mousearea.autodecrement && verticalScrollBar.visible; repeat: true; interval: 20 ; onTriggered: decrementCurrentIndex()}
+
+        onMousePositionChanged: {
+            if (mouseY > tree.height && pressed) {
+                if (autoincrement) return;
+                autodecrement = false;
+                autoincrement = true;
+            } else if (mouseY < 0 && pressed) {
+                if (autodecrement) return;
+                autoincrement = false;
+                autodecrement = true;
+            } else  {
+                autoincrement = false;
+                autodecrement = false;
+            }
+            var y = Math.min(contentY + tree.height - 5, Math.max(mouseY + contentY, contentY));
+            var newIndex = tree.indexAt(0, y);
+            if (newIndex >= 0)
+                tree.currentIndex = tree.indexAt(0, y);
+        }
+
+        onPressed:  {
+            tree.forceActiveFocus()
+            var x = Math.min(contentWidth - 5, Math.max(mouseX + contentX, 0))
+            var y = Math.min(contentHeight - 5, Math.max(mouseY + contentY, 0))
+            tree.currentIndex = tree.indexAt(x, y)
+        }
+
+        onDoubleClicked: {
+            parent.activated()
+        }
+    }
+
+    function decrementCurrentIndex() {
+        scroller.blockUpdates = true;
+        tree.decrementCurrentIndex();
+        scroller.verticalValue = contentY;
+        scroller.blockUpdates = false;
+    }
+
+    function incrementCurrentIndex() {
+        scroller.blockUpdates = true;
+        tree.incrementCurrentIndex();
+        scroller.verticalValue = contentY;
+        scroller.blockUpdates = false;
+    }
+
+    ListView {
+        id: tree
+
+        property list<TableColumn> header
+        highlightFollowsCurrentItem: true
+        model: root.model
+        interactive: false
+
+        anchors.top: tableColumn.bottom
+        anchors.left: frameitem.left
+        anchors.right: frameitem.right
+        anchors.bottom: frameitem.bottom
+        anchors.margins: frameWidth
+        anchors.topMargin: -frameWidth
+        anchors.rightMargin: (!frameAroundContents && verticalScrollBar.visible ? verticalScrollBar.width: 0) + frameWidth
+        anchors.bottomMargin: (!frameAroundContents && horizontalScrollBar.visible ? horizontalScrollBar.height : 0)  + frameWidth
+
+        focus: true
+        clip: true
+
+        // Fills extra rows with alternate color
+        Column {
+            id: rowfiller
+            property variant rowHeight: Math.max(1, contentHeight / count)
+            property int rowCount: height/rowHeight
+            y: contentHeight
+            width: parent.width
+            visible: contentHeight > 0 && alternateRowColor && !verticalScrollBar.visible
+            height: parent.height - contentHeight
+            Repeater {
+                model: visible ? rowfiller.rowCount : 0
+                StyleItem {
+                    id: rowfill
+                    elementType: "itemrow"
+                    width: rowfiller.width
+                    height: rowfiller.rowHeight
+                    activeControl: (index + count) % 2 === 1 ? "alternate" : ""
+                }
+            }
+        }
+
+        Keys.onUpPressed: root.decrementCurrentIndex()
+        Keys.onDownPressed: root.incrementCurrentIndex()
+
+        Keys.onPressed: {
+            if (event.key == Qt.Key_PageUp) {
+                verticalScrollBar.value = verticalScrollBar.value - tree.height
+            } else if (event.key == Qt.Key_PageDown)
+                verticalScrollBar.value = verticalScrollBar.value + tree.height
+        }
+
+        onContentYChanged:  {
+            scroller.blockUpdates = true
+            scroller.verticalValue = tree.contentY
+            verticalScrollBar.value = tree.contentY
+            scroller.blockUpdates = false
+        }
+
+        onContentXChanged:  {
+            scroller.blockUpdates = true
+            scroller.horizontalValue = tree.contentX
+            horizontalScrollBar.value = tree.contentX
+            scroller.blockUpdates = false
+        }
+
+        delegate: Item {
+            id: rowitem
+            width: row.width
+            height: row.height
+            anchors.margins: frameWidth
+            property int rowIndex: model.index
+            property bool itemAlternateBackground: alternateRowColor && rowIndex % 2 == 1
+            property variant itemModelData: hasOwnProperty("modelData") ? modelData : null
+            Loader {
+                id: rowstyle
+                // row delegate
+                sourceComponent: itemAlternateBackground || itemSelected ? root.rowDelegate : null
+                // Row fills the tree width regardless of item size
+                // But scrollbar should not adjust to it
+                width: frameitem.width
+                height: row.height
+                x: contentX
+
+                property bool itemAlternateBackground: rowitem.itemAlternateBackground
+                property bool itemSelected: rowitem.ListView.isCurrentItem
+            }
+            Row {
+                id: row
+                anchors.left: parent.left
+
+                Repeater {
+                    id: repeater
+                    model: root.header.length
+                    Loader {
+                        id: itemDelegateLoader
+                        visible: header[index].visible
+                        sourceComponent: header[index].delegate ? header[index].delegate : itemDelegate
+                        property variant model: tree.model
+                        property variant role: header[index].role
+                        property variant modelData: itemModelData
+
+                        width: header[index].width
+                        height: item !== undefined ? item.height : Math.max(16, styleitem.implicitHeight)
+
+                        function getValue() {
+                            if (header[index].role.length && hasOwnProperty(header[index].role))
+                                return this[header[index].role]
+                            else if (modelData && modelData.hasOwnProperty(header[index].role))
+                                return modelData[header[index].role]
+                            else if (modelData)
+                                return modelData
+                            return ""
+                        }
+                        property variant itemValue: getValue()
+                        property bool itemSelected: rowitem.ListView.isCurrentItem
+                        property color itemForeground: itemSelected ? rowstyleitem.highlightedTextColor : rowstyleitem.textColor
+                        property int rowIndex: rowitem.rowIndex
+                        property int columnIndex: index
+                        property int itemElideMode: header[index].elideMode
+                        property int itemTextAlignment: header[index].textAlignment
+                    }
+                }
+                onWidthChanged: tree.contentWidth = width
+            }
+        }
+    }
+
+
+    Text{ id:text }
+
+    Item {
+        id: tableColumn
+
+        anchors.top: frameitem.top
+        anchors.left: frameitem.left
+        anchors.right: frameitem.right
+        anchors.margins: frameWidth
+
+        clip: true
+        visible: headerVisible
+        height: headerVisible ? styleitem.implicitHeight : frameWidth
+
+        Behavior on height { NumberAnimation{ duration: 80 } }
+
+        Row {
+            id: headerrow
+            anchors.top: parent.top
+            height:parent.height
+            x: -tree.contentX
+
+            Repeater {
+                id: repeater
+
+                property int targetIndex: -1
+                property int dragIndex: -1
+
+                model: header.length
+
+                delegate: Item {
+                    z:-index
+                    width: header[index].width
+                    visible: header[index].visible
+                    height: headerrow.height
+
+                    Loader {
+                        sourceComponent: root.headerDelegate
+                        anchors.fill: parent
+                        property string itemValue: header[index].title
+                        property string itemSort:  (sortIndicatorVisible && index == sortColumn) ? (sortIndicatorDirection == "up" ? "up" : "down") : "";
+                        property bool itemPressed: headerClickArea.pressed
+                        property bool itemContainsMouse: headerClickArea.containsMouse
+                        property string itemPosition: header.length === 1 ? "only" :
+                                                      index===header.length-1 ? "end" :
+                                                      index===0 ? "beginning" : ""
+                    }
+                    Rectangle{
+                        id: targetmark
+                        width: parent.width
+                        height:parent.height
+                        opacity: (index == repeater.targetIndex && repeater.targetIndex != repeater.dragIndex) ? 0.5 : 0
+                        Behavior on opacity { NumberAnimation{duration:160}}
+                        color: palette.highlight
+                        SystemPalette{id:palette}
+                    }
+
+                    MouseArea{
+                        id: headerClickArea
+                        drag.axis: Qt.YAxis
+                        hoverEnabled: true
+                        anchors.fill: parent
+                        onClicked: {
+                            if (sortColumn == index)
+                                sortIndicatorDirection = sortIndicatorDirection === "up" ? "down" : "up"
+                            sortColumn = index
+                        }
+                        // Here we handle moving header sections
+                        onMousePositionChanged: {
+                            if (pressed) { // only do this while dragging
+                                for (var h = 0 ; h < header.length ; ++h) {
+                                    if (drag.target.x > headerrow.children[h].x - 10) {
+                                        repeater.targetIndex = header.length - h - 1
+                                        break
+                                    }
+                                }
+                            }
+                        }
+
+                        onPressed: {
+                            repeater.dragIndex = index
+                            draghandle.x = parent.x
+                        }
+
+                        onReleased: {
+                            if (repeater.targetIndex >= 0 && repeater.targetIndex != index ) {
+                                // Rearrange the header sections
+                                var items = new Array
+                                for (var i = 0 ; i< header.length ; ++i)
+                                    items.push(header[i])
+                                items.splice(index, 1);
+                                items.splice(repeater.targetIndex, 0, header[index]);
+                                header = items
+                                if (sortColumn == index)
+                                    sortColumn = repeater.targetIndex
+                            }
+                            repeater.targetIndex = -1
+                        }
+                        drag.maximumX: 1000
+                        drag.minimumX: -1000
+                        drag.target: draghandle
+                    }
+
+                    Loader {
+                        id: draghandle
+                        property string itemValue: header[index].title
+                        property string itemSort:  (sortIndicatorVisible && index == sortColumn) ? (sortIndicatorDirection == "up" ? "up" : "down") : "";
+                        property bool itemPressed: headerClickArea.pressed
+                        property bool itemContainsMouse: headerClickArea.containsMouse
+                        property string itemPosition
+
+                        parent: tableColumn
+                        width: header[index].width
+                        height: parent.height
+                        sourceComponent: root.headerDelegate
+                        visible: headerClickArea.pressed
+                        opacity: 0.5
+                    }
+
+
+                    MouseArea {
+                        id: headerResizeHandle
+                        property int offset: 0
+                        property int minimumSize: 20
+                        anchors.rightMargin: -width/2
+                        width: 16 ; height: parent.height
+                        anchors.right: parent.right
+                        onPositionChanged:  {
+                            var newHeaderWidth = header[index].width + (mouseX - offset)
+                            header[index].width = Math.max(minimumSize, newHeaderWidth)
+                        }
+                        property bool found:false
+
+                        onDoubleClicked: {
+                            var row
+                            var minWidth =  0
+                            var listdata = tree.children[0]
+                            for (row = 0 ; row < listdata.children.length ; ++row){
+                                var item = listdata.children[row+1]
+                                if (item && item.children[1] && item.children[1].children[index] &&
+                                        item.children[1].children[index].children[0].hasOwnProperty("implicitWidth"))
+                                    minWidth = Math.max(minWidth, item.children[1].children[index].children[0].implicitWidth)
+                            }
+                            if (minWidth)
+                                header[index].width = minWidth
+                        }
+                        onPressedChanged: if(pressed)offset=mouseX
+                        CursorArea {
+                            anchors.fill: parent
+                            cursor: CursorArea.SplitHCursor
+                        }
+                    }
+                }
+            }
+        }
+        Loader {
+            id: loader
+            property string itemValue
+            property string itemSort
+            property bool itemPressed
+            property bool itemContainsMouse
+            property string itemPosition
+
+            anchors.top: parent.top
+            anchors.right: parent.right
+            anchors.bottom: headerrow.bottom
+            anchors.rightMargin: -2
+            sourceComponent: root.headerDelegate
+            width: root.width - headerrow.width + 2
+            visible: root.header.length
+            z:-1
+        }
+    }
+
+    Private.ScrollAreaHelper {
+        id: scroller
+        anchors.fill: parent
+        anchors.topMargin: styleitem.style == "mac" ? tableColumn.height + frameWidth: 0
+        scrollSpeed: 2
+    }
+
+    StyleItem {
+        z: 2
+        anchors.fill: parent
+        anchors.margins: -4
+        visible: highlightOnFocus && parent.activeFocus && styleitem.styleHint("focuswidget")
+        elementType: "focusframe"
+    }
+
+    StyleItem {
+        id: styleitem
+        elementType: "header"
+        visible:false
+        contentWidth: 16
+        contentHeight: fontHeight
+    }
+
+    StyleItem {
+        id: rowstyleitem
+        property color textColor: styleHint("textColor")
+        property color highlightedTextColor: styleHint("highlightedTextColor")
+        elementType: "item"
+        visible: false
+    }
+}
diff --git a/imports/QtDesktop/TextArea.qml b/imports/QtDesktop/TextArea.qml
new file mode 100644
index 0000000..c7115ed
--- /dev/null
+++ b/imports/QtDesktop/TextArea.qml
@@ -0,0 +1,123 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** All rights reserved.
+** Contact: Nokia Corporation (qt-info@nokia.com)
+**
+** This file is part of the Qt Components project.
+**
+** $QT_BEGIN_LICENSE:BSD$
+** You may use this file under the terms of the BSD license as follows:
+**
+** "Redistribution and use in source and binary forms, with or without
+** modification, are permitted provided that the following conditions are
+** met:
+**   * Redistributions of source code must retain the above copyright
+**     notice, this list of conditions and the following disclaimer.
+**   * Redistributions in binary form must reproduce the above copyright
+**     notice, this list of conditions and the following disclaimer in
+**     the documentation and/or other materials provided with the
+**     distribution.
+**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
+**     the names of its contributors may be used to endorse or promote
+**     products derived from this software without specific prior written
+**     permission.
+**
+** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+import QtQuick 1.1
+import "custom" as Components
+
+ScrollArea {
+    id:area
+    color: "white"
+    width: 280
+    height: 120
+    contentWidth: edit.paintedWidth + (2 * documentMargins)
+
+    property alias text: edit.text
+    property alias wrapMode: edit.wrapMode
+    property alias readOnly: edit.readOnly
+    property bool tabChangesFocus: false
+    property alias font: edit.font
+    property alias activeFocusOnPress: edit.activeFocusOnPress
+
+    highlightOnFocus: true
+    property int documentMargins: 4
+    frame: true
+
+    function append (string) {
+        text += "\n" + string
+        verticalScrollBar.value = verticalScrollBar.maximumValue
+    }
+
+    Item {
+        anchors.left: parent.left
+        anchors.top: parent.top
+        height: edit.paintedHeight + area.height - viewportHeight + 2 * documentMargins + 4
+        anchors.margins: documentMargins
+
+        TextEdit {
+            id: edit
+            wrapMode: TextEdit.WordWrap;
+            width: area.width
+            height: area.height
+            selectByMouse: true
+            readOnly: false
+            color: syspal.text
+
+            SystemPalette {
+                id: syspal
+                colorGroup: enabled ? SystemPalette.Active : SystemPalette.Disabled
+            }
+
+            CursorArea {
+                anchors.fill: parent
+                cursor: CursorArea.IBeamCursor
+            }
+
+            KeyNavigation.priority: KeyNavigation.BeforeItem
+            KeyNavigation.tab: area.tabChangesFocus ? area.KeyNavigation.tab : null
+            KeyNavigation.backtab: area.tabChangesFocus ? area.KeyNavigation.backtab : null
+
+            onPaintedSizeChanged: {
+                area.contentWidth = paintedWidth + (2 * documentMargins)
+            }
+
+            // keep textcursor within scrollarea
+            onCursorPositionChanged: {
+                if (cursorRectangle.y >= area.contentY + area.viewportHeight - 1.5*cursorRectangle.height - documentMargins)
+                    area.contentY = cursorRectangle.y - area.viewportHeight + 1.5*cursorRectangle.height + documentMargins
+                else if (cursorRectangle.y < area.contentY)
+                    area.contentY = cursorRectangle.y
+
+                if (cursorRectangle.x >= area.contentX + area.viewportWidth - documentMargins) {
+                    area.contentX = cursorRectangle.x - area.viewportWidth + documentMargins
+                } else if (cursorRectangle.x < area.contentX)
+                    area.contentX = cursorRectangle.x
+            }
+        }
+    }
+
+    Keys.onPressed: {
+        if (event.key == Qt.Key_PageUp) {
+            verticalValue = verticalValue - area.height
+        } else if (event.key == Qt.Key_PageDown)
+            verticalValue = verticalValue + area.height
+    }
+
+    Component.onCompleted: edit.width = area.viewportWidth - (2 * documentMargins)
+}
diff --git a/imports/QtDesktop/TextField.qml b/imports/QtDesktop/TextField.qml
new file mode 100644
index 0000000..f81f2a7
--- /dev/null
+++ b/imports/QtDesktop/TextField.qml
@@ -0,0 +1,88 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** All rights reserved.
+** Contact: Nokia Corporation (qt-info@nokia.com)
+**
+** This file is part of the Qt Components project.
+**
+** $QT_BEGIN_LICENSE:BSD$
+** You may use this file under the terms of the BSD license as follows:
+**
+** "Redistribution and use in source and binary forms, with or without
+** modification, are permitted provided that the following conditions are
+** met:
+**   * Redistributions of source code must retain the above copyright
+**     notice, this list of conditions and the following disclaimer.
+**   * Redistributions in binary form must reproduce the above copyright
+**     notice, this list of conditions and the following disclaimer in
+**     the documentation and/or other materials provided with the
+**     distribution.
+**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
+**     the names of its contributors may be used to endorse or promote
+**     products derived from this software without specific prior written
+**     permission.
+**
+** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+import QtQuick 1.1
+import "custom" as Components
+
+Components.TextField {
+    id: textfield
+    minimumWidth: 200
+
+    placeholderText: ""
+    topMargin: 2
+    bottomMargin: 2
+    leftMargin: 8
+    rightMargin: 8
+
+    implicitWidth: backgroundItem.implicitWidth
+    implicitHeight: backgroundItem.implicitHeight
+
+    clip: false
+
+    property string styleHint
+
+    background: StyleItem {
+        anchors.fill: parent
+        elementType: "edit"
+        sunken: true
+        hasFocus: textfield.activeFocus
+        hover: containsMouse
+        hint: textfield.styleHint
+        contentWidth: 200
+        contentHeight: 25
+    }
+
+    Item {
+        id: focusFrame
+        anchors.fill: textfield
+        parent: textfield
+        visible: framestyle.styleHint("focuswidget") && styleHint !== "rounded"
+        StyleItem {
+            id: framestyle
+            anchors.margins: -2
+            anchors.rightMargin:-4
+            anchors.bottomMargin:-4
+            anchors.fill: parent
+            visible: textfield.activeFocus
+            hint: textfield.styleHint
+            elementType: "focusframe"
+        }
+    }
+}
diff --git a/imports/QtDesktop/ToolBar.qml b/imports/QtDesktop/ToolBar.qml
new file mode 100644
index 0000000..7e09359
--- /dev/null
+++ b/imports/QtDesktop/ToolBar.qml
@@ -0,0 +1,50 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** All rights reserved.
+** Contact: Nokia Corporation (qt-info@nokia.com)
+**
+** This file is part of the Qt Components project.
+**
+** $QT_BEGIN_LICENSE:BSD$
+** You may use this file under the terms of the BSD license as follows:
+**
+** "Redistribution and use in source and binary forms, with or without
+** modification, are permitted provided that the following conditions are
+** met:
+**   * Redistributions of source code must retain the above copyright
+**     notice, this list of conditions and the following disclaimer.
+**   * Redistributions in binary form must reproduce the above copyright
+**     notice, this list of conditions and the following disclaimer in
+**     the documentation and/or other materials provided with the
+**     distribution.
+**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
+**     the names of its contributors may be used to endorse or promote
+**     products derived from this software without specific prior written
+**     permission.
+**
+** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+import QtQuick 1.1
+import "."
+import "custom" as Components
+
+StyleItem {
+    id: toolbar
+    width: parent ? parent.width : 200
+    height: implicitHeight
+    elementType: "toolbar"
+}
diff --git a/imports/QtDesktop/ToolButton.qml b/imports/QtDesktop/ToolButton.qml
new file mode 100644
index 0000000..8cf4209
--- /dev/null
+++ b/imports/QtDesktop/ToolButton.qml
@@ -0,0 +1,98 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** All rights reserved.
+** Contact: Nokia Corporation (qt-info@nokia.com)
+**
+** This file is part of the Qt Components project.
+**
+** $QT_BEGIN_LICENSE:BSD$
+** You may use this file under the terms of the BSD license as follows:
+**
+** "Redistribution and use in source and binary forms, with or without
+** modification, are permitted provided that the following conditions are
+** met:
+**   * Redistributions of source code must retain the above copyright
+**     notice, this list of conditions and the following disclaimer.
+**   * Redistributions in binary form must reproduce the above copyright
+**     notice, this list of conditions and the following disclaimer in
+**     the documentation and/or other materials provided with the
+**     distribution.
+**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
+**     the names of its contributors may be used to endorse or promote
+**     products derived from this software without specific prior written
+**     permission.
+**
+** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+import QtQuick 1.1
+import "custom" as Components
+
+Components.Button {
+    id:button
+
+    property alias containsMouse: tooltip.containsMouse
+    property string iconName
+    property string styleHint
+    property int iconSize: (backgroundItem && backgroundItem.style === "mac" && button.styleHint.indexOf("segmented") !== -1) ? 16 : 24
+
+    implicitWidth: backgroundItem.implicitWidth
+    implicitHeight: backgroundItem.implicitHeight
+
+    TooltipArea {
+        // Note this will eat hover events
+        id: tooltip
+        anchors.fill: parent
+        text: button.tooltip
+    }
+
+    background: StyleItem {
+        id: styleitem
+        anchors.fill: parent
+        elementType: "toolbutton"
+        on: pressed | checked
+        sunken: pressed
+        raised: containsMouse
+        hover: containsMouse
+        info: __position
+        hint: button.styleHint
+        contentWidth: Math.max(textitem.paintedWidth, 32)
+        contentHeight: 32
+        Text {
+            id: textitem
+            text: button.text
+            anchors.centerIn: parent
+            visible: button.iconSource == ""
+        }
+    }
+    Image {
+        id: themeIcon
+        anchors.centerIn: parent
+        opacity: enabled ? 1 : 0.5
+        smooth: true
+        sourceSize.width: iconSize
+        property string iconPath: "image://desktoptheme/" + button.iconName
+        source: backgroundItem && backgroundItem.hasThemeIcon(iconName) ? iconPath : ""
+        fillMode: Image.PreserveAspectFit
+        Image {
+            // Use fallback icon
+            anchors.centerIn: parent
+            sourceSize: parent.sourceSize
+            visible: (themeIcon.status != Image.Ready)
+            source: visible ? button.iconSource : ""
+        }
+    }
+}
diff --git a/imports/QtDesktop/components.pro b/imports/QtDesktop/components.pro
new file mode 100644
index 0000000..51423a9
--- /dev/null
+++ b/imports/QtDesktop/components.pro
@@ -0,0 +1,62 @@
+    TEMPLATE = subdirs # XXX: Avoid call the linker
+TARGETPATH = QtDesktop
+
+symbian {
+    INSTALL_IMPORTS = /resource/qt/imports
+} else {
+    isEmpty(INSTALL_IMPORTS):INSTALL_IMPORTS = $$[QT_INSTALL_IMPORTS]
+}
+
+QML_FILES = \
+            qmldir \
+            Label.qml \
+            Button.qml \
+            ComboBox.qml \
+            Dial.qml \
+            Dialog.qml \
+            ProgressBar.qml \
+            ScrollBar.qml \
+            Switch.qml \
+            TableView.qml \
+            ToolBar.qml \
+            ButtonRow.qml \
+            ButtonColumn.qml \
+            Frame.qml \
+            MenuItem.qml   \
+            Slider.qml \
+            TabBar.qml \
+            Tab.qml \
+            ToolButton.qml \
+            CheckBox.qml \
+            ContextMenu.qml \
+            GroupBox.qml \
+            RadioButton.qml \
+            SpinBox.qml \
+            TabFrame.qml \
+            TextArea.qml \
+            ScrollArea.qml \
+            SplitterRow.qml \
+            SplitterColumn.qml \
+            StatusBar.qml \
+            TableColumn.qml \
+            TextField.qml \
+            ApplicationWindow.qml
+
+QML_DIRS = \
+        custom \
+	private \
+        images 
+
+qmlfiles.files = $$QML_FILES
+qmlfiles.sources = $$QML_FILES
+qmlfiles.path = $$INSTALL_IMPORTS/$$TARGETPATH
+
+qmldirs.files = $$QML_DIRS
+qmldirs.sources = $$QML_DIRS
+qmldirs.path = $$INSTALL_IMPORTS/$$TARGETPATH
+
+INSTALLS += qmlfiles qmldirs
+
+symbian {
+    DEPLOYMENT += qmlfiles qmldirs
+}
diff --git a/imports/QtDesktop/custom/BasicButton.qml b/imports/QtDesktop/custom/BasicButton.qml
new file mode 100644
index 0000000..593d9c9
--- /dev/null
+++ b/imports/QtDesktop/custom/BasicButton.qml
@@ -0,0 +1,103 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** All rights reserved.
+** Contact: Nokia Corporation (qt-info@nokia.com)
+**
+** This file is part of the Qt Components project.
+**
+** $QT_BEGIN_LICENSE:BSD$
+** You may use this file under the terms of the BSD license as follows:
+**
+** "Redistribution and use in source and binary forms, with or without
+** modification, are permitted provided that the following conditions are
+** met:
+**   * Redistributions of source code must retain the above copyright
+**     notice, this list of conditions and the following disclaimer.
+**   * Redistributions in binary form must reproduce the above copyright
+**     notice, this list of conditions and the following disclaimer in
+**     the documentation and/or other materials provided with the
+**     distribution.
+**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
+**     the names of its contributors may be used to endorse or promote
+**     products derived from this software without specific prior written
+**     permission.
+**
+** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+import QtQuick 1.1
+import "./behaviors"    // ButtonBehavior
+
+Item {
+    id: button
+
+    signal clicked
+    property alias pressed: behavior.pressed
+    property alias containsMouse: behavior.containsMouse
+    property alias checkable: behavior.checkable  // button toggles between checked and !checked
+    property alias checked: behavior.checked
+    property bool activeFocusOnPress: false
+
+    property Component background: null
+    property Item backgroundItem: backgroundLoader.item
+
+    property color textColor: syspal.text;
+    property string tooltip
+
+    signal toolTipTriggered
+
+    // implementation
+
+    property string __position: "only"
+    implicitWidth: backgroundLoader.item.width
+    implicitHeight: backgroundLoader.item.height
+
+    function animateClick() {
+        behavior.pressed = true
+        behavior.clicked()
+        animateClickTimer.start()
+    }
+
+    Timer {
+        id: animateClickTimer
+        interval: 250
+        onTriggered: behavior.pressed = false
+    }
+
+    Loader {
+        id: backgroundLoader
+        anchors.fill: parent
+        sourceComponent: background
+        property alias styledItem: button
+        property alias position: button.__position
+    }
+
+    ButtonBehavior {
+        id: behavior
+        anchors.fill: parent
+        onClicked: button.clicked()
+        onPressedChanged: if (activeFocusOnPress) button.focus = true
+        onMouseMoved: {tiptimer.restart()}
+        Timer{
+            id: tiptimer
+            interval:1000
+            running:containsMouse && tooltip.length
+            onTriggered: button.toolTipTriggered()
+        }
+    }
+
+    SystemPalette { id: syspal }
+}
diff --git a/imports/QtDesktop/custom/Button.qml b/imports/QtDesktop/custom/Button.qml
new file mode 100644
index 0000000..3246fcc
--- /dev/null
+++ b/imports/QtDesktop/custom/Button.qml
@@ -0,0 +1,61 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** All rights reserved.
+** Contact: Nokia Corporation (qt-info@nokia.com)
+**
+** This file is part of the Qt Components project.
+**
+** $QT_BEGIN_LICENSE:BSD$
+** You may use this file under the terms of the BSD license as follows:
+**
+** "Redistribution and use in source and binary forms, with or without
+** modification, are permitted provided that the following conditions are
+** met:
+**   * Redistributions of source code must retain the above copyright
+**     notice, this list of conditions and the following disclaimer.
+**   * Redistributions in binary form must reproduce the above copyright
+**     notice, this list of conditions and the following disclaimer in
+**     the documentation and/or other materials provided with the
+**     distribution.
+**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
+**     the names of its contributors may be used to endorse or promote
+**     products derived from this software without specific prior written
+**     permission.
+**
+** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+import QtQuick 1.1
+
+BasicButton {
+    id: button
+
+    property string text
+    property url iconSource
+    property Component label: null
+
+    // implementation
+
+    background: defaultStyle.background
+    property Item labelItem: labelLoader.item
+
+    Loader {
+        id: labelLoader
+        anchors.fill: parent
+        property alias styledItem: button
+        sourceComponent: label
+    }
+}
diff --git a/imports/QtDesktop/custom/ButtonColumn.qml b/imports/QtDesktop/custom/ButtonColumn.qml
new file mode 100644
index 0000000..a94cbba
--- /dev/null
+++ b/imports/QtDesktop/custom/ButtonColumn.qml
@@ -0,0 +1,50 @@
+import Qt 4.7
+import "ButtonGroup.js" as Behavior
+
+/*
+   Class: ButtonColumn
+   A ButtonColumn allows you to group Buttons in a column. It provides a selection-behavior as well.
+
+   Note: This component don't support the enabled property.
+   If you need to disable it you should disable all the buttons inside it.
+
+   <code>
+       ButtonColumn {
+           Button { text: "Top" }
+           Button { text: "Bottom" }
+       }
+   </code>
+*/
+Column {
+    id: root
+
+    /*
+     * Property: exclusive
+     * [bool=true] Specifies the grouping behavior. If enabled, the checked property on buttons contained
+     * in the group will be exclusive.
+     *
+     * Note that a button in an exclusive group will allways be checkable
+     */
+    property bool exclusive: true
+
+    /*
+     * Property: styleHint
+     * [string] Used to indicate special OS specific button types
+     */
+    property string styleHint
+
+    /*
+     * Property: checkedButton
+     * [string] Contains the last checked Button.
+     */
+    property Item checkedButton;
+
+    Component.onCompleted: {
+        Behavior.create(root, {direction: Qt.Vertical});
+    }
+
+    Component.onDestruction: {
+        Behavior.destroy();
+    }
+
+}
diff --git a/imports/QtDesktop/custom/ButtonGroup.js b/imports/QtDesktop/custom/ButtonGroup.js
new file mode 100644
index 0000000..5b0d9ad
--- /dev/null
+++ b/imports/QtDesktop/custom/ButtonGroup.js
@@ -0,0 +1,141 @@
+var self;
+var checkHandlers = [];
+var visibleButtons = [];
+var nonVisibleButtons = [];
+var direction;
+
+function create(that, options) {
+    self = that;
+    direction = options.direction || Qt.Horizontal;
+    self.childrenChanged.connect(rebuild);
+//    self.widthChanged.connect(resizeChildren);
+    build();
+}
+
+function isButton(item) {
+    if (item && item.hasOwnProperty("__position"))
+        return true;
+    return false;
+}
+
+function hasChecked(item) {
+    return (item && item.hasOwnProperty("checked"));
+}
+
+function destroy() {
+    self.childrenChanged.disconnect(rebuild);
+//    self.widthChanged.disconnect(resizeChildren);
+    cleanup();
+}
+
+function build() {
+    visibleButtons = [];
+    nonVisibleButtons = [];
+
+    for (var i = 0, item; (item = self.children[i]); i++) {
+
+        if (item.hasOwnProperty("styleHint"))
+            item.styleHint = styleHint;
+
+        if (!hasChecked(item))
+            continue;
+
+        item.visibleChanged.connect(rebuild); // Not optimal, but hardly a bottleneck in your app
+        if (!item.visible) {
+            nonVisibleButtons.push(item);
+            continue;
+        }
+        visibleButtons.push(item);
+
+        if (self.exclusive && item.hasOwnProperty("checkable"))
+            item.checkable = true;
+
+        if (self.exclusive) {
+            item.checked = false;
+            checkHandlers.push(checkExclusive(item));
+            item.checkedChanged.connect(checkHandlers[checkHandlers.length - 1]);
+        }
+    }
+
+    var nrButtons = visibleButtons.length;
+    if (nrButtons == 0)
+        return;
+
+    if (self.checkedButton)
+        self.checkedButton.checked = true;
+    else if (self.exclusive) {
+        self.checkedButton = visibleButtons[0];
+        self.checkedButton.checked = true;
+    }
+
+    if (nrButtons == 1) {
+        finishButton(visibleButtons[0], "only");
+    } else {
+        finishButton(visibleButtons[0], direction == Qt.Horizontal ? "leftmost" : "top");
+        for (var i = 1; i < nrButtons - 1; i++)
+            finishButton(visibleButtons[i], direction == Qt.Horizontal ? "h_middle": "v_middle");
+        finishButton(visibleButtons[nrButtons - 1], direction == Qt.Horizontal ? "rightmost" : "bottom");
+    }
+}
+
+function finishButton(button, position) {
+    if (isButton(button)) {
+        button.__position = position;
+        if (direction == Qt.Vertical) {
+            button.anchors.left = self.left     //mm How to make this not cause binding loops? see QTBUG-17162
+            button.anchors.right = self.right
+        }
+    }
+}
+
+function cleanup() {
+    visibleButtons.forEach(function(item, i) {
+        if (checkHandlers[i])
+            item.checkedChanged.disconnect(checkHandlers[i]);
+        item.visibleChanged.disconnect(rebuild);
+    });
+    checkHandlers = [];
+
+    nonVisibleButtons.forEach(function(item, i) {
+        item.visibleChanged.disconnect(rebuild);
+    });
+}
+
+function rebuild() {
+    if (self == undefined)
+        return;
+
+    cleanup();
+    build();
+}
+
+function resizeChildren() {
+    if (direction != Qt.Horizontal)
+        return;
+
+    var extraPixels = self.width % visibleButtons;
+    var buttonSize = (self.width - extraPixels) / visibleButtons;
+    visibleButtons.forEach(function(item, i) {
+        if (!item || !item.visible)
+            return;
+        item.width = buttonSize + (extraPixels > 0 ? 1 : 0);
+        if (extraPixels > 0)
+            extraPixels--;
+    });
+}
+
+function checkExclusive(item) {
+    var button = item;
+    return function() {
+        for (var i = 0, ref; (ref = visibleButtons[i]); i++) {
+            if (ref.checked == (button === ref))
+                continue;
+
+            // Disconnect the signal to avoid recursive calls
+            ref.checkedChanged.disconnect(checkHandlers[i]);
+            ref.checked = !ref.checked;
+            ref.checkedChanged.connect(checkHandlers[i]);
+        }
+        self.checkedButton = button;
+    }
+}
diff --git a/imports/QtDesktop/custom/ButtonRow.qml b/imports/QtDesktop/custom/ButtonRow.qml
new file mode 100644
index 0000000..c17c9eb
--- /dev/null
+++ b/imports/QtDesktop/custom/ButtonRow.qml
@@ -0,0 +1,48 @@
+import Qt 4.7
+import "ButtonGroup.js" as Behavior
+
+/*
+   Class: ButtonRow
+   A ButtonRow allows you to group Buttons in a row. It provides a selection-behavior as well.
+
+   Note: This component don't support the enabled property.
+   If you need to disable it you should disable all the buttons inside it.
+
+   <code>
+       ButtonRow {
+           Button { text: "Left" }
+           Button { text: "Right" }
+       }
+   </code>
+*/
+Row {
+    id: root
+
+    /*
+     * Property: exclusive
+     * [bool=false] Specifies the grouping behavior. If enabled, the checked property on buttons contained
+     * in the group will be exclusive.
+     *
+     * Note that a button in an exclusive group will allways be checkable
+     */
+    property bool exclusive: false
+
+    /*
+     * Property: styleHint
+     * [string] Used to indicate special OS specific button types
+     */
+    property string styleHint
+    /*
+     * Property: checkedButton
+     * [string] Contains the last checked Button.
+     */
+    property Item checkedButton;
+
+    Component.onCompleted: {
+        Behavior.create(root, {direction: Qt.Horizontal});
+    }
+
+    Component.onDestruction: {
+        Behavior.destroy();
+    }
+}
diff --git a/imports/QtDesktop/custom/CheckBox.qml b/imports/QtDesktop/custom/CheckBox.qml
new file mode 100644
index 0000000..3197253
--- /dev/null
+++ b/imports/QtDesktop/custom/CheckBox.qml
@@ -0,0 +1,76 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** All rights reserved.
+** Contact: Nokia Corporation (qt-info@nokia.com)
+**
+** This file is part of the Qt Components project.
+**
+** $QT_BEGIN_LICENSE:BSD$
+** You may use this file under the terms of the BSD license as follows:
+**
+** "Redistribution and use in source and binary forms, with or without
+** modification, are permitted provided that the following conditions are
+** met:
+**   * Redistributions of source code must retain the above copyright
+**     notice, this list of conditions and the following disclaimer.
+**   * Redistributions in binary form must reproduce the above copyright
+**     notice, this list of conditions and the following disclaimer in
+**     the documentation and/or other materials provided with the
+**     distribution.
+**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
+**     the names of its contributors may be used to endorse or promote
+**     products derived from this software without specific prior written
+**     permission.
+**
+** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+import QtQuick 1.1
+import "./behaviors"
+
+FocusScope {
+    id: checkBox
+
+    signal clicked
+    property alias pressed: behavior.pressed
+    property alias checked: behavior.checked
+    property alias containsMouse: behavior.containsMouse
+
+    property Component background: null
+    property Item backgroundItem: backgroundLoader.item
+
+    // implementation
+
+    Loader {
+        id: backgroundLoader
+        anchors.fill: parent
+        property alias styledItem: checkBox
+        sourceComponent: background
+    }
+
+    ButtonBehavior {
+        id: behavior
+        focus: true
+        anchors.fill: parent
+        checkable: true
+        onClicked: {
+            if (checkBox.activeFocusOnPress)
+                checkBox.forceActiveFocus();
+            checkBox.clicked();
+        }
+    }
+    Keys.onSpacePressed: {clicked(); checked = !checked; }
+}
diff --git a/imports/QtDesktop/custom/GroupBox.qml b/imports/QtDesktop/custom/GroupBox.qml
new file mode 100644
index 0000000..e791008
--- /dev/null
+++ b/imports/QtDesktop/custom/GroupBox.qml
@@ -0,0 +1,94 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** All rights reserved.
+** Contact: Nokia Corporation (qt-info@nokia.com)
+**
+** This file is part of the Qt Components project.
+**
+** $QT_BEGIN_LICENSE:BSD$
+** You may use this file under the terms of the BSD license as follows:
+**
+** "Redistribution and use in source and binary forms, with or without
+** modification, are permitted provided that the following conditions are
+** met:
+**   * Redistributions of source code must retain the above copyright
+**     notice, this list of conditions and the following disclaimer.
+**   * Redistributions in binary form must reproduce the above copyright
+**     notice, this list of conditions and the following disclaimer in
+**     the documentation and/or other materials provided with the
+**     distribution.
+**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
+**     the names of its contributors may be used to endorse or promote
+**     products derived from this software without specific prior written
+**     permission.
+**
+** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+import QtQuick 1.1
+
+Item {
+    id: groupbox
+
+    implicitWidth: adjustToContentSize ? Math.max(200, contentWidth + loader.leftMargin + loader.rightMargin) : 100
+    implicitHeight: adjustToContentSize ? contentHeight + loader.topMargin + loader.bottomMargin : 100
+
+    default property alias data: content.data
+
+    property string title
+    property bool checkable: false
+    property int contentWidth: content.childrenRect.width
+    property int contentHeight: content.childrenRect.height
+    property double contentOpacity: 1
+
+    property Component background: null
+    property Item backgroundItem: loader.item
+
+    property Item checkbox: check
+    property alias checked: check.checked
+    property bool adjustToContentSize: false // Resizes groupbox to fit contents.
+                                             // Note when using this, you cannot anchor children
+    Loader {
+        id: loader
+        anchors.fill: parent
+        property int topMargin: title.length > 0 || checkable ? 22 : 4
+        property int bottomMargin: 4
+        property int leftMargin: 4
+        property int rightMargin: 4
+        property alias styledItem: groupbox
+        sourceComponent: background
+    }
+    CheckBox {
+        id: check
+        checked: true
+        anchors.top: parent.top
+        anchors.left: parent.left
+        anchors.right: parent.right
+        height: loader.topMargin
+    }
+    Item {
+        id:content
+        z: 1
+        focus: true
+        opacity: contentOpacity
+        anchors.topMargin: loader.topMargin
+        anchors.leftMargin: 8
+        anchors.rightMargin: 8
+        anchors.bottomMargin: 8
+        anchors.fill: parent
+        enabled: (!checkable || checkbox.checked)
+    }
+}
diff --git a/imports/QtDesktop/custom/ProgressBar.qml b/imports/QtDesktop/custom/ProgressBar.qml
new file mode 100644
index 0000000..915ff60
--- /dev/null
+++ b/imports/QtDesktop/custom/ProgressBar.qml
@@ -0,0 +1,90 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** All rights reserved.
+** Contact: Nokia Corporation (qt-info@nokia.com)
+**
+** This file is part of the Qt Components project.
+**
+** $QT_BEGIN_LICENSE:BSD$
+** You may use this file under the terms of the BSD license as follows:
+**
+** "Redistribution and use in source and binary forms, with or without
+** modification, are permitted provided that the following conditions are
+** met:
+**   * Redistributions of source code must retain the above copyright
+**     notice, this list of conditions and the following disclaimer.
+**   * Redistributions in binary form must reproduce the above copyright
+**     notice, this list of conditions and the following disclaimer in
+**     the documentation and/or other materials provided with the
+**     distribution.
+**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
+**     the names of its contributors may be used to endorse or promote
+**     products derived from this software without specific prior written
+**     permission.
+**
+** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+import QtQuick 1.1
+
+Item {
+    id: progressBar
+
+    property real value: 0
+    property real minimumValue: 0
+    property real maximumValue: 1
+    property bool indeterminate: false
+    property bool containsMouse: mouseArea.containsMouse
+
+    property int leftMargin: 0
+    property int topMargin: 0
+    property int rightMargin: 0
+    property int bottomMargin: 0
+
+    property int minimumWidth: 0
+    property int minimumHeight: 0
+
+    property Component background: null
+    property Item backgroundItem: groove.item
+
+    property color backgroundColor: syspal.base
+    property color progressColor: syspal.highlight
+
+    Loader {
+        id: groove
+        property alias indeterminate:progressBar.indeterminate
+        property alias value:progressBar.value
+        property alias maximumValue:progressBar.maximumValue
+        property alias minimumValue:progressBar.minimumValue
+
+        sourceComponent: background
+        anchors.fill: parent
+    }
+
+    Item {
+        anchors.fill: parent
+        anchors.leftMargin: leftMargin
+        anchors.rightMargin: rightMargin
+        anchors.topMargin: topMargin
+        anchors.bottomMargin: bottomMargin
+    }
+
+    MouseArea {
+        id: mouseArea
+        anchors.fill: parent
+        hoverEnabled: true
+    }
+}
diff --git a/imports/QtDesktop/custom/Slider.qml b/imports/QtDesktop/custom/Slider.qml
new file mode 100644
index 0000000..6d47d61
--- /dev/null
+++ b/imports/QtDesktop/custom/Slider.qml
@@ -0,0 +1,300 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** All rights reserved.
+** Contact: Nokia Corporation (qt-info@nokia.com)
+**
+** This file is part of the Qt Components project.
+**
+** $QT_BEGIN_LICENSE:BSD$
+** You may use this file under the terms of the BSD license as follows:
+**
+** "Redistribution and use in source and binary forms, with or without
+** modification, are permitted provided that the following conditions are
+** met:
+**   * Redistributions of source code must retain the above copyright
+**     notice, this list of conditions and the following disclaimer.
+**   * Redistributions in binary form must reproduce the above copyright
+**     notice, this list of conditions and the following disclaimer in
+**     the documentation and/or other materials provided with the
+**     distribution.
+**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
+**     the names of its contributors may be used to endorse or promote
+**     products derived from this software without specific prior written
+**     permission.
+**
+** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+import QtQuick 1.1
+import "../"
+
+Item {
+    id: slider
+
+    // COMMON API
+    property int orientation: Qt.Horizontal
+    property alias minimumValue: range.minimumValue
+    property alias maximumValue: range.maximumValue
+    property alias inverted: range.inverted
+    property bool updateValueWhileDragging: true
+    property alias pressed: mouseArea.pressed
+    property alias stepSize: range.stepSize
+    property alias hoverEnabled: mouseArea.hoverEnabled
+
+    // NOTE: this property is in/out, the user can set it, create bindings to it, and
+    // at the same time the slider wants to update. There's no way in QML to do this kind
+    // of updates AND allow the user bind it (without a Binding object). That's the
+    // reason this is an alias to a C++ property in range model.
+    property alias value: range.value
+    property bool containsMouse: mouseArea.containsMouse
+
+    // CONVENIENCE TO BE USED BY STYLES
+
+    property int leftMargin: 0
+    property int rightMargin: 0
+
+    // EXTENSIONS
+    // Indicate that we want animations in the Slider, people customizing should
+    // look at it to decide whether or not active animations.
+    property bool animated: true
+    property bool activeFocusOnPress: false
+
+    // Value indicator displays the current value near the slider
+    property bool valueIndicatorVisible: true
+    property int valueIndicatorMargin: 10
+    property string valueIndicatorPosition: _isVertical ? "Left" : "Top"
+
+    // Reimplement this function to control how the value is shown in the
+    // indicator.
+    function formatValue(v) {
+        return Math.round(v);
+    }
+
+    // Hooks for customizing the pieces of the slider
+    property Component groove: null
+    property Component handle: null
+    property Component valueIndicator: null
+
+    // PRIVATE/CONVENIENCE
+    property bool _isVertical: orientation == Qt.Vertical
+
+    // This is a template slider, so every piece can be modified by passing a
+    // different Component. The main elements in the implementation are
+    //
+    // - the 'range' does the calculations to map position to/from value,
+    //   it also serves as a data storage for both properties;
+    //
+    // - the 'fakeHandle' is what the mouse area drags on the screen, it feeds
+    //   the 'range' position and also reads it when convenient;
+    //
+    // - the real 'handle' it is the visual representation of the handle, that
+    //   just follows the 'fakeHandle' position.
+    //
+    // When the 'updateValueWhileDragging' is false and we are dragging, we stop
+    // feeding the range with position information, delaying until the next
+    // mouse release.
+    //
+    // Everything is encapsulated in a contents Item, so for the
+    // vertical slider, we just swap the height/width, make it
+    // horizontal, and then use rotation to make it vertical again.
+
+    Item {
+        id: contents
+
+        width: _isVertical ? slider.height : slider.width
+        height: _isVertical ? slider.width : slider.height
+        rotation: _isVertical ? -90 : 0
+
+        anchors.centerIn: slider
+
+        RangeModel {
+            id: range
+            minimumValue: 0.0
+            maximumValue: 1.0
+            value: 0
+            stepSize: 0.0
+            inverted: false
+
+            positionAtMinimum: leftMargin
+            positionAtMaximum: contents.width - rightMargin
+        }
+
+        Loader {
+            id: grooveLoader
+            anchors.fill: parent
+            sourceComponent: groove
+
+            property real handlePosition : handleLoader.x
+            function positionForValue(value) {
+                return range.positionForValue(value) - leftMargin;
+            }
+        }
+
+        Loader {
+            id: handleLoader
+            transform: Translate { x: - handleLoader.width / 2 }
+
+            anchors.verticalCenter: grooveLoader.verticalCenter
+
+            sourceComponent: handle
+
+            x: fakeHandle.x
+            Behavior on x {
+                id: behavior
+                enabled: !mouseArea.drag.active && slider.animated
+
+                PropertyAnimation {
+                    duration: behavior.enabled ? 150 : 0
+                    easing.type: Easing.OutSine
+                }
+            }
+        }
+
+        Item {
+            id: fakeHandle
+            width: handleLoader.width
+            height: handleLoader.height
+            transform: Translate { x: - handleLoader.width / 2 }
+        }
+
+        MouseArea {
+            id: mouseArea
+            hoverEnabled: true
+            anchors.centerIn: parent
+            anchors.horizontalCenterOffset: (slider.leftMargin - slider.rightMargin) / 2
+
+            width: parent.width + handleLoader.width - slider.rightMargin - slider.leftMargin
+            height: parent.height
+
+            drag.target: fakeHandle
+            drag.axis: Drag.XAxis
+            drag.minimumX: range.positionAtMinimum
+            drag.maximumX: range.positionAtMaximum
+
+            onPressed: {
+
+                if (activeFocusOnPress)
+                    slider.focus = true;
+
+                // Clamp the value
+                var newX = Math.max(mouse.x, drag.minimumX);
+                newX = Math.min(newX, drag.maximumX);
+
+                // Debounce the press: a press event inside the handler will not
+                // change its position, the user needs to drag it.
+
+                // Note this really messes up things for scrollbar
+                // if (Math.abs(newX - fakeHandle.x) > handleLoader.width / 2)
+                    range.position = newX;
+            }
+
+            onReleased: {
+                // If we don't update while dragging, this is the only
+                // moment that the range is updated.
+                if (!slider.updateValueWhileDragging)
+                    range.position = fakeHandle.x;
+            }
+        }
+
+        Loader {
+            id: valueIndicatorLoader
+
+            transform: Translate { x: - handleLoader.width / 2 }
+            rotation: _isVertical ? 90 : 0
+            visible: valueIndicatorVisible
+
+            // Properties available for the delegate component. Note that the indicatorText
+            // shows the value for the position the handle is, which is not necessarily the
+            // available as the current slider.value, since updateValueWhileDragging can
+            // be set to 'false'.
+            property string indicatorText: slider.formatValue(range.valueForPosition(handleLoader.x))
+            property bool dragging: mouseArea.drag.active
+
+            sourceComponent: valueIndicator
+
+            state: {
+                if (!_isVertical)
+                    return slider.valueIndicatorPosition;
+
+                if (valueIndicatorPosition == "Right")
+                    return "Bottom";
+                if (valueIndicatorPosition == "Top")
+                    return "Right";
+                if (valueIndicatorPosition == "Bottom")
+                    return "Left";
+
+                return "Top";
+            }
+
+            anchors.margins: valueIndicatorMargin
+
+            states: [
+                State {
+                    name: "Top"
+                    AnchorChanges {
+                        target: valueIndicatorLoader
+                        anchors.bottom: handleLoader.top
+                        anchors.horizontalCenter: handleLoader.horizontalCenter
+                    }
+                },
+                State {
+                    name: "Bottom"
+                    AnchorChanges {
+                        target: valueIndicatorLoader
+                        anchors.top: handleLoader.bottom
+                        anchors.horizontalCenter: handleLoader.horizontalCenter
+                    }
+                },
+                State {
+                    name: "Right"
+                    AnchorChanges {
+                        target: valueIndicatorLoader
+                        anchors.left: handleLoader.right
+                        anchors.verticalCenter: handleLoader.verticalCenter
+                    }
+                },
+                State {
+                    name: "Left"
+                    AnchorChanges {
+                        target: valueIndicatorLoader
+                        anchors.right: handleLoader.left
+                        anchors.verticalCenter: handleLoader.verticalCenter
+                    }
+                }
+            ]
+        }
+    }
+
+    // Range position normally follow fakeHandle, except when
+    // 'updateValueWhileDragging' is false. In this case it will only follow
+    // if the user is not pressing the handle.
+    Binding {
+        when: updateValueWhileDragging || !mouseArea.pressed
+        target: range
+        property: "position"
+        value: fakeHandle.x
+    }
+
+    // During the drag, we simply ignore position set from the range, this
+    // means that setting a value while dragging will not "interrupt" the
+    // dragging activity.
+    Binding {
+        when: !mouseArea.drag.active
+        target: fakeHandle
+        property: "x"
+        value: range.position
+    }
+}
diff --git a/imports/QtDesktop/custom/SpinBox.qml b/imports/QtDesktop/custom/SpinBox.qml
new file mode 100644
index 0000000..0b264d4
--- /dev/null
+++ b/imports/QtDesktop/custom/SpinBox.qml
@@ -0,0 +1,206 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** All rights reserved.
+** Contact: Nokia Corporation (qt-info@nokia.com)
+**
+** This file is part of the Qt Components project.
+**
+** $QT_BEGIN_LICENSE:BSD$
+** You may use this file under the terms of the BSD license as follows:
+**
+** "Redistribution and use in source and binary forms, with or without
+** modification, are permitted provided that the following conditions are
+** met:
+**   * Redistributions of source code must retain the above copyright
+**     notice, this list of conditions and the following disclaimer.
+**   * Redistributions in binary form must reproduce the above copyright
+**     notice, this list of conditions and the following disclaimer in
+**     the documentation and/or other materials provided with the
+**     distribution.
+**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
+**     the names of its contributors may be used to endorse or promote
+**     products derived from this software without specific prior written
+**     permission.
+**
+** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+import QtQuick 1.1
+import ".."
+
+FocusScope {
+    id: spinbox
+
+    SystemPalette {
+        id: syspal
+        colorGroup: enabled ? SystemPalette.Active : SystemPalette.Disabled
+    }
+
+    property int minimumWidth: 0
+    property int minimumHeight: 0
+
+    property int leftMargin: 0
+    property int topMargin: 0
+    property int rightMargin: 0
+    property int bottomMargin: 0
+
+    property real value: 0.0
+    property real maximumValue: 99
+    property real minimumValue: 0
+    property real singleStep: 1
+    property string postfix
+
+    property bool upEnabled: value != maximumValue;
+    property bool downEnabled: value != minimumValue;
+    property alias upPressed: mouseUp.pressed
+    property alias downPressed: mouseDown.pressed
+    property alias upHovered: mouseUp.containsMouse
+    property alias downHovered: mouseDown.containsMouse
+    property alias containsMouse: mouseArea.containsMouse
+    property alias textColor: syspal.text
+    property alias font: input.font
+
+    property Component background: null
+    property Item backgroundItem: backgroundComponent.item
+    property Component up: null
+    property Component down: null
+
+    QtObject {
+        id: componentPrivate
+        property bool valueUpdate: false
+    }
+
+    function increment() {
+        setValue(input.text)
+        value += singleStep
+        if (value > maximumValue)
+            value = maximumValue
+        input.text = value
+    }
+
+    function decrement() {
+        setValue(input.text)
+        value -= singleStep
+        if (value < minimumValue)
+            value = minimumValue
+        input.text = value
+    }
+
+    function setValue(v) {
+        var newval = parseFloat(v)
+        if (newval > maximumValue)
+            newval = maximumValue
+        else if (v < minimumValue)
+            newval = minimumValue
+        value = newval
+        input.text = value
+    }
+
+    Component.onCompleted: setValue(value)
+
+    onValueChanged: {
+        componentPrivate.valueUpdate = true
+        input.text = value
+        componentPrivate.valueUpdate = false
+    }
+
+    // background
+    Loader {
+        id: backgroundComponent
+        anchors.fill: parent
+        sourceComponent: background
+    }
+
+    MouseArea {
+        id: mouseArea
+        anchors.fill: parent
+        hoverEnabled: true
+    }
+
+    TextInput {
+        id: input
+
+        anchors.margins: 5
+        anchors.leftMargin: leftMargin
+        anchors.topMargin: topMargin
+        anchors.rightMargin: rightMargin
+        anchors.bottomMargin: bottomMargin
+        anchors.fill: parent
+        selectByMouse: true
+
+        // validator: DoubleValidator { bottom: minimumValue; top: maximumValue; }
+        onAccepted: {setValue(input.text)}
+        onActiveFocusChanged: setValue(input.text)
+        color: textColor
+        opacity: parent.enabled ? 1 : 0.5
+        Text {
+            text: postfix
+            anchors.rightMargin: 4
+            anchors.right: parent.right
+            anchors.verticalCenter: parent.verticalCenter
+        }
+        CursorArea {
+            anchors.fill: parent
+            cursor: CursorArea.IBeamCursor
+        }
+    }
+
+    Loader {
+        id: upButton
+        property alias pressed : spinbox.upPressed
+        property alias hover : spinbox.upHovered
+        property alias enabled : spinbox.upEnabled
+        sourceComponent: up
+        MouseArea {
+            id: mouseUp
+            anchors.fill: upButton.item
+            onClicked: increment()
+
+            property bool autoincrement: false;
+            onReleased: autoincrement = false
+            Timer { running: mouseUp.pressed; interval: 350 ; onTriggered: mouseUp.autoincrement = true }
+            Timer { running: mouseUp.autoincrement; interval: 60 ; repeat: true ; onTriggered: increment() }
+        }
+        onLoaded: {
+            item.parent = spinbox
+            mouseUp.parent = item
+        }
+    }
+
+    Loader {
+        id: downButton
+        property alias pressed : spinbox.downPressed
+        property alias hover : spinbox.downHovered
+        property alias enabled : spinbox.downEnabled
+        sourceComponent: down
+        MouseArea {
+            id: mouseDown
+            anchors.fill: downButton.item
+            onClicked: decrement()
+
+            property bool autoincrement: false;
+            onReleased: autoincrement = false
+            Timer { running: mouseDown.pressed; interval: 350 ; onTriggered: mouseDown.autoincrement = true }
+            Timer { running: mouseDown.autoincrement; interval: 60 ; repeat: true ; onTriggered: decrement() }
+        }
+        onLoaded: {
+            item.parent = spinbox
+            mouseDown.parent = item
+        }
+    }
+    Keys.onUpPressed: increment()
+    Keys.onDownPressed: decrement()
+}
diff --git a/imports/QtDesktop/custom/Splitter.qml b/imports/QtDesktop/custom/Splitter.qml
new file mode 100644
index 0000000..905c984
--- /dev/null
+++ b/imports/QtDesktop/custom/Splitter.qml
@@ -0,0 +1,450 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** All rights reserved.
+** Contact: Nokia Corporation (qt-info@nokia.com)
+**
+** This file is part of the Qt Components project.
+**
+** $QT_BEGIN_LICENSE:BSD$
+** You may use this file under the terms of the BSD license as follows:
+**
+** "Redistribution and use in source and binary forms, with or without
+** modification, are permitted provided that the following conditions are
+** met:
+**   * Redistributions of source code must retain the above copyright
+**     notice, this list of conditions and the following disclaimer.
+**   * Redistributions in binary form must reproduce the above copyright
+**     notice, this list of conditions and the following disclaimer in
+**     the documentation and/or other materials provided with the
+**     distribution.
+**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
+**     the names of its contributors may be used to endorse or promote
+**     products derived from this software without specific prior written
+**     permission.
+**
+** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+import QtQuick 1.1
+import QtDesktop 0.1
+
+Splitter {
+    id: root
+    default property alias items: splitterItems.children
+    property alias handles: splitterHandles.children
+    property Component handleBackground: Rectangle { width:3; color: "black" }
+    property int handleWidth: -1
+    property real preferredSize: 0
+    property int orientation: Qt.Horizontal
+
+    clip: true
+    Component.onCompleted: d.init();
+    onWidthChanged: d.updateLayout();
+    onHeightChanged: d.updateLayout();
+
+    QtObject {
+        id: d
+
+        property bool horizontal: orientation == Qt.Horizontal
+        property string size: horizontal ? "width" : "height"
+        property string minimum: horizontal ? "minimumWidth" : "minimumHeight"
+        property string maximum: horizontal ? "maximumWidth" : "maximumHeight"
+
+        property string offset: horizontal ? "x" : "y"
+        property int expandingIndex: -1
+        property bool updateLayoutGuard: true
+        property bool itemWidthGuard: false
+        property bool itemExpandingGuard: true
+
+        function init()
+        {
+            for (var i=0; i<items.length; ++i) {
+                var item = items[i];
+
+                item.Splitter.itemIndex = i
+                // Assign one, and only one, item to be expanding:
+                if (item.Splitter.expanding === true) {
+                    if (d.expandingIndex === -1 && item.visible === true)
+                        d.expandingIndex = i
+                    else
+                        item.Splitter.expanding = false
+                }
+
+                // Anchor each item to fill out all space vertically:
+                if (d.horizontal) {
+                    item.anchors.top = splitterItems.top
+                    item.anchors.bottom = splitterItems.bottom
+                } else  {
+                    item.anchors.left = splitterItems.left
+                    item.anchors.right = splitterItems.right
+
+                }
+
+                // Listen for changes to width and expanding:
+                propertyChangeListener.createObject(item, {"itemIndex":i});
+                if (i < items.length-1) {
+                    // Create a handle for the item, unless its the last:
+                    var handle = handleBackgroundLoader.createObject(splitterHandles, {"handleIndex":i});
+
+                    if (d.horizontal) {
+                        handle.anchors.top = splitterHandles.top
+                        handle.anchors.bottom = splitterHandles.bottom
+                    } else {
+                        handle.anchors.left = splitterHandles.left
+                        handle.anchors.right = splitterHandles.right
+                    }
+                }
+            }
+
+            if (d.expandingIndex === -1) {
+                // INVARIANT: No item was set as expanding.
+                // We then choose the last visible item instead:
+                d.expandingIndex = items.length - 1
+                for (i=items.length-1; i>=0; --i) {
+                    var item = items[i]
+                    if (item.visible === true) {
+                        d.expandingIndex = i
+                        item = items[i]
+                        break
+                    }
+                }
+                item.Splitter.expanding = true
+            }
+
+            d.itemExpandingGuard = false
+            d.updateLayoutGuard = false
+            d.updateLayout()
+        }
+
+        function accumulatedSize(firstIndex, lastIndex, includeExpandingMinimum)
+        {
+            // Go through items and handles, and
+            // calculate their acummulated width.
+            var w = 0
+            for (var i=firstIndex; i<lastIndex; ++i) {
+                var item = items[i]
+                if (item.visible) {
+                    if (i !== d.expandingIndex)
+                        w += item[d.size];
+                    else if (includeExpandingMinimum && item.Splitter[minimum] != -1)
+                        w += item[minimum]
+                }
+
+                var handle = handles[i]
+                if (handle && items[i + ((d.expandingIndex > i) ? 0 : 1)].visible)
+                    w += handle[d.size]
+            }
+            return w
+        }
+
+        function updateLayout()
+        {
+            // This function will reposition both handles and
+            // items according to the _width of the each item_
+            if (items.length === 0)
+                return;
+            if (d.updateLayoutGuard === true)
+                return
+            d.updateLayoutGuard = true
+
+            // Use a temporary variable to store values to avoid breaking
+            // property bindings when the value does not actually change:
+            var newValue
+
+            // Ensure all items within min/max:
+            for (var i=0; i<items.length; ++i) {
+                if (i !== d.expandingIndex) {
+                    item = items[i];
+                    // If the item is using percentage width, convert
+                    // that number to real width now:
+                    if (item.Splitter.percentageSize !== -1) {
+                        newValue = item.Splitter.percentageSize * (root[d.size] / 100)
+                        if (newValue !== item[d.size])
+                            item[d.size] = newValue
+                    }
+                    // Ensure item width is not more than maximumSize:
+                    if (item.Splitter[maximum] !== -1) {
+                        newValue = Math.min(item[d.size], item.Splitter[maximum])
+                        if (newValue !== item[d.size])
+                            item[d.size] = newValue
+                    }
+                    // Ensure item width is not more less minimumWidth:
+                    if (item.Splitter[minimum] !== -1) {
+                        newValue = Math.max(item[d.size], item.Splitter[minimum])
+                        if (newValue !== item[d.size])
+                            item[d.size] = newValue
+                    }
+                }
+            }
+
+            // Special case: set width of expanding item to available space:
+            newValue = root[d.size] - d.accumulatedSize(0, items.length, false);
+            var expandingItem = items[d.expandingIndex]
+            var expandingMinimum = 0
+            if (expandingItem.Splitter[minimum] !== -1)
+                expandingMinimum = expandingItem.Splitter[minimum]
+            newValue = Math.max(newValue, expandingMinimum)
+            if (expandingItem[d.size] !== 0 && expandingItem.Splitter.percentageSize !== -1)
+                expandingItem.Splitter.percentageSize = newValue * (100 / root[d.size])
+            if (expandingItem[d.size] !== newValue)
+                expandingItem[d.size] = newValue
+
+            // Then, position items and handles according to their width:
+            var item, lastVisibleItem
+            var handle, lastVisibleHandle
+            var newpreferredSize = expandingMinimum - expandingItem[d.size]
+
+            for (i=0; i<items.length; ++i) {
+                // Position item to the right of the previous visible handle:
+                item = items[i];
+                if (item.visible) {
+                    if (lastVisibleHandle) {
+                        newValue = lastVisibleHandle[d.offset] + lastVisibleHandle[d.size]
+                        if (newValue !== item[d.offset])
+                            item[d.offset] = newValue
+                    } else {
+                        newValue = 0
+                        if (newValue !== item[d.offset])
+                            item[d.offset] = newValue
+                    }
+                    newpreferredSize += item[d.size]
+                    lastVisibleItem = item
+                }
+
+                // Position handle to the right of the previous visible item. We use an alterative way of
+                // checking handle visibility because that property might not have updated correctly yet:
+                handle = handles[i]
+                if (handle && items[i + ((d.expandingIndex > i) ? 0 : 1)].visible) {
+                    newValue = lastVisibleItem[d.offset] + Math.max(0, lastVisibleItem[d.size])
+                    if (newValue !== handle[d.offset])
+                        handle[d.offset] = newValue
+                    newpreferredSize += handle[d.size]
+                    lastVisibleHandle = handle
+                }
+            }
+
+            root.preferredSize = newpreferredSize
+            d.updateLayoutGuard = false
+        }
+    }
+
+    Component {
+        id: handleBackgroundLoader
+        Loader {
+            id: myHandle
+            property int handleIndex: 0
+            property Item handle: myHandle
+            property Item splitterItem: items[handleIndex + ((d.expandingIndex > handleIndex) ? 0 : 1)]
+
+             // 'splitterRow' should be an alias, but that fails to resolve runtime:
+            property Item splitterRow: root
+            property Item background: item
+
+            visible: splitterItem.visible
+            sourceComponent: handleBackground
+            onWidthChanged: d.updateLayout()
+
+            onXChanged: {
+                // Moving the handle means resizing an item. Which one,
+                // left or right, depends on where the expanding item is.
+                // 'updateLayout' will override in case new width violates max/min.
+                // And 'updateLayout will be triggered when an item changes width.
+                if (d.updateLayoutGuard)
+                    return
+
+                var leftHandle, leftItem, rightItem, rightHandle
+                var leftEdge, rightEdge, newWidth, leftStopX, rightStopX
+                var i
+
+                if (d.expandingIndex > handleIndex) {
+                    // Resize item to the left.
+                    // Ensure that the handle is not crossing other handles. So
+                    // find the first visible handle to the left to determine the left edge:
+                    leftEdge = 0
+                    for (i=handleIndex-1; i>=0; --i) {
+                        leftHandle = handles[i]
+                        if (leftHandle.visible) {
+                            leftEdge = leftHandle[d.offset] + leftHandle[d.size]
+                            break;
+                        }
+                    }
+
+                    // Ensure: leftStopX >= myHandle[d.offset] >= rightStopX
+                    var min = d.accumulatedSize(handleIndex+1, items.length, true)
+                    rightStopX = root[d.size] - min - myHandle[d.size]
+                    leftStopX = Math.max(leftEdge, myHandle[d.offset])
+                    myHandle[d.offset] = Math.min(rightStopX, Math.max(leftStopX, myHandle[d.offset]))
+
+                    newWidth = myHandle[d.offset] - leftEdge
+                    leftItem = items[handleIndex]
+                    if (root[d.size] != 0 && leftItem.Splitter.percentageSize !== -1)
+                        leftItem.Splitter.percentageSize = newWidth * (100 / root[d.size])
+                    // The next line will trigger 'updateLayout' inside 'propertyChangeListener':
+                    leftItem[d.size] = newWidth
+                } else {
+                    // Resize item to the right.
+                    // Ensure that the handle is not crossing other handles. So
+                    // find the first visible handle to the right to determine the right edge:
+                    rightEdge = root[d.size]
+                    for (i=handleIndex+1; i<handles.length; ++i) {
+                        rightHandle = handles[i]
+                        if (rightHandle.visible) {
+                            rightEdge = rightHandle[d.offset]
+                            break;
+                        }
+                    }
+
+                    // Ensure: leftStopX <= myHandle[d.offset] <= rightStopX
+                    var min = d.accumulatedSize(0, handleIndex+1, true)
+                    leftStopX = min - myHandle[d.size]
+                    rightStopX = Math.min((rightEdge - myHandle[d.size]), myHandle[d.offset])
+                    myHandle[d.offset] = Math.max(leftStopX, Math.min(myHandle[d.offset], rightStopX))
+
+                    newWidth = rightEdge - (myHandle[d.offset] + myHandle[d.size])
+                    rightItem = items[handleIndex+1]
+                    if (root[d.size] !== 0 && rightItem[d.percentageSize] !== -1)
+                        rightItem.Splitter.percentageSize = newWidth * (100 / root[d.size])
+                    // The next line will trigger 'updateLayout' inside 'propertyChangeListener':
+                    rightItem[d.size] = newWidth
+                }
+            }
+        }
+    }
+
+    Item {
+        id: splitterItems
+        anchors.fill: parent
+    }
+    Item {
+        id: splitterHandles
+        anchors.fill: parent
+    }
+
+    Component {
+        // This dummy item becomes a child of all
+        // items it the splitter, just to provide a way
+        // to listen for changes to their width, expanding etc.
+        id: propertyChangeListener
+        Item {
+            id: target
+            width: (d.horizontal ? parent[d.size] : 0)
+            height: (!d.horizontal ? parent[d.size] : 0)
+            property bool expanding: parent.Splitter.expanding
+            property real percentageSize: parent.Splitter.percentageSize
+            property real minimumWidth: parent.Splitter[d.minimum]
+            property real maximumSize: parent.Splitter[d.maximum]
+            property int itemIndex: parent.Splitter.itemIndex
+
+            onPercentageSizeChanged: d.updateLayout();
+            onMinimumWidthChanged: d.updateLayout();
+            onMaximumSizeChanged: d.updateLayout();
+            onExpandingChanged: updateExpandingIndex()
+
+            function updateExpandingIndex()
+            {
+                // The following code is needed to avoid a binding
+                // loop, since we might change 'expanding' again to a different item:
+                if (d.itemExpandingGuard === true)
+                    return
+                d.itemExpandingGuard = true
+                // break binding:
+                expanding = false
+
+                // 'expanding' follows radio button behavior:
+                // First, find the new expanding item:
+                var newIndex = items.length-1
+                for (var i=0; i<items.length; ++i) {
+                    var item = items[i]
+                    if (i !== d.expandingIndex && item.Splitter.expanding === true && item.visible === true) {
+                        newIndex = i
+                        break
+                    }
+                }
+                item = items[newIndex]
+                if (item.visible === false) {
+                    // So now we ended up with the last item in the splitter to be
+                    // expanding, but it turns out to not be visible. So we need to
+                    // traverse backwards again to find one that is visible...
+                    for (i=items.length-2; i>=0; --i) {
+                        var item = items[i]
+                        if (item.visible === true) {
+                            newIndex = i
+                            item = items[newIndex]
+                           break
+                        }
+                    }
+                }
+
+                // Tell the found item that it is expanding:
+                if (item.Splitter.expanding !== true)
+                    item.Splitter.expanding = true
+                // ...and the old one that it is not:
+                if (newIndex !== d.expandingIndex) {
+                    item = items[d.expandingIndex]
+                    if (item.Splitter.expanding !== false)
+                        item.Splitter.expanding = false
+                }
+                // update index:
+                d.expandingIndex = newIndex
+                d.updateLayout();
+                // recreate binding:
+                expanding = function() { return parent.Splitter.expanding }
+                d.itemExpandingGuard = false
+            }
+
+            function handleSizeChanged() {
+                // We need to update the layout.
+                // The following code is needed to avoid a binding
+                // loop, since we might change 'width' again to a different value:
+                if (d.itemWidthGuard === true)
+                    return
+                d.itemWidthGuard = true
+                // Break binding:
+                this[d.size] = 0
+
+                d.updateLayout()
+
+                // Restablish binding:
+                if (d.horizontal) {
+                    width = function() { return parent[d.size]; }
+                } else {
+                    height = function() { return parent[d.size]; }
+                }
+                d.itemWidthGuard = false
+            }
+
+            onWidthChanged:  handleSizeChanged()
+            onHeightChanged: handleSizeChanged()
+            onVisibleChanged: {
+                // Hiding the expanding item forces us to
+                // select a new one (and therefore not recommended):
+                if (d.expandingIndex === itemIndex) {
+                    updateExpandingIndex()
+                } else {
+                    if (visible) {
+                        // Try to keep all items within the SplitterRow. When an item
+                        // has been hidden, the expanding item might no longer be large enough
+                        // to give away space to the new items width. So we need to resize:
+                        var overflow = d.accumulatedSize(0, items.length, true) - root[d.size];
+                        if (overflow > 0)
+                            parent[d.size] -= overflow
+                    }
+                    d.updateLayout()
+                }
+            }
+        }
+    }
+}
diff --git a/imports/QtDesktop/custom/TextField.qml b/imports/QtDesktop/custom/TextField.qml
new file mode 100644
index 0000000..9d6677a
--- /dev/null
+++ b/imports/QtDesktop/custom/TextField.qml
@@ -0,0 +1,175 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** All rights reserved.
+** Contact: Nokia Corporation (qt-info@nokia.com)
+**
+** This file is part of the Qt Components project.
+**
+** $QT_BEGIN_LICENSE:BSD$
+** You may use this file under the terms of the BSD license as follows:
+**
+** "Redistribution and use in source and binary forms, with or without
+** modification, are permitted provided that the following conditions are
+** met:
+**   * Redistributions of source code must retain the above copyright
+**     notice, this list of conditions and the following disclaimer.
+**   * Redistributions in binary form must reproduce the above copyright
+**     notice, this list of conditions and the following disclaimer in
+**     the documentation and/or other materials provided with the
+**     distribution.
+**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
+**     the names of its contributors may be used to endorse or promote
+**     products derived from this software without specific prior written
+**     permission.
+**
+** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+import QtQuick 1.1
+import "./behaviors"    // TextEditMouseBehavior
+import ".."
+
+// KNOWN ISSUES
+// 1) TextField does not loose focus when !enabled if it is a FocusScope (see QTBUG-16161)
+
+FocusScope {
+    id: textField
+
+    property alias text: textInput.text
+    property alias font: textInput.font
+
+    property int inputHint // values tbd
+    property bool acceptableInput: textInput.acceptableInput // read only
+    property alias readOnly: textInput.readOnly // read only
+    property alias placeholderText: placeholderTextComponent.text
+    property bool  passwordMode: false
+    property alias selectedText: textInput.selectedText
+    property alias selectionEnd: textInput.selectionEnd
+    property alias selectionStart: textInput.selectionStart
+    property alias validator: textInput.validator
+    property alias inputMask: textInput.inputMask
+    property alias horizontalalignment: textInput.horizontalAlignment
+    property alias echoMode: textInput.echoMode
+    property alias cursorPosition: textInput.cursorPosition
+    property alias inputMethodHints: textInput.inputMethodHints
+    property alias activeFocusOnPress: textInput.activeFocusOnPress
+
+    property color textColor: syspal.text
+    property color backgroundColor: syspal.base
+    property alias containsMouse: mouseArea.containsMouse
+
+    property Component background: null
+    property Component hints: null
+    property Item backgroundItem: backgroundLoader.item
+
+    property int minimumWidth: 0
+    property int minimumHeight: 0
+
+    property int leftMargin: 0
+    property int topMargin: 0
+    property int rightMargin: 0
+    property int bottomMargin: 0
+
+    function copy() {
+        textInput.copy()
+    }
+
+    function paste() {
+        textInput.paste()
+    }
+
+    function cut() {
+        textInput.cut()
+    }
+
+    function select(start, end) {
+        textInput.select(start, end)
+    }
+
+    function selectAll() {
+        textInput.selectAll()
+    }
+
+    function selectWord() {
+        textInput.selectWord()
+    }
+
+    function positionAt(x) {
+        var p = mapToItem(textInput, x, 0);
+        return textInput.positionAt(p.x);
+    }
+
+    function positionToRectangle(pos) {
+        var p = mapToItem(textInput, pos.x, pos.y);
+        return textInput.positionToRectangle(p);
+    }
+
+    // Implementation
+    clip: true
+
+    SystemPalette {
+        id: syspal
+        colorGroup: enabled ? SystemPalette.Active : SystemPalette.Disabled
+    }
+    Loader { id: hintsLoader; sourceComponent: hints }
+    Loader { id: backgroundLoader; sourceComponent: background; anchors.fill:parent}
+
+    MouseArea {
+        id: mouseArea
+        anchors.fill: parent
+        hoverEnabled: true
+        onClicked: textfield.forceActiveFocus()
+        CursorArea {
+            anchors.fill: parent
+            cursor: CursorArea.IBeamCursor
+        }
+    }
+
+    onFocusChanged: {
+        if (textField.activeFocus)
+            textInput.forceActiveFocus();
+    }
+
+    TextInput { // see QTBUG-14936
+        id: textInput
+        selectByMouse:true
+
+        anchors.leftMargin: leftMargin
+        anchors.topMargin: topMargin
+        anchors.rightMargin: rightMargin
+        anchors.bottomMargin: bottomMargin
+
+        anchors.left: parent.left
+        anchors.right: parent.right
+        anchors.verticalCenter: parent.verticalCenter
+
+        color: syspal.text
+        echoMode: passwordMode ? TextInput.Password : TextInput.Normal
+
+    }
+
+    Text {
+        id: placeholderTextComponent
+        anchors.fill: textInput
+        font: textInput.font
+        opacity: !textInput.text.length && !textInput.activeFocus ? 1 : 0
+        color: "darkgray"
+        text: "Enter text"
+        clip: true
+        elide: Text.ElideRight
+        Behavior on opacity { NumberAnimation { duration: 90 } }
+    }
+}
diff --git a/imports/QtDesktop/custom/behaviors/ButtonBehavior.qml b/imports/QtDesktop/custom/behaviors/ButtonBehavior.qml
new file mode 100644
index 0000000..e6e6571
--- /dev/null
+++ b/imports/QtDesktop/custom/behaviors/ButtonBehavior.qml
@@ -0,0 +1,73 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** All rights reserved.
+** Contact: Nokia Corporation (qt-info@nokia.com)
+**
+** This file is part of the Qt Components project.
+**
+** $QT_BEGIN_LICENSE:BSD$
+** You may use this file under the terms of the BSD license as follows:
+**
+** "Redistribution and use in source and binary forms, with or without
+** modification, are permitted provided that the following conditions are
+** met:
+**   * Redistributions of source code must retain the above copyright
+**     notice, this list of conditions and the following disclaimer.
+**   * Redistributions in binary form must reproduce the above copyright
+**     notice, this list of conditions and the following disclaimer in
+**     the documentation and/or other materials provided with the
+**     distribution.
+**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
+**     the names of its contributors may be used to endorse or promote
+**     products derived from this software without specific prior written
+**     permission.
+**
+** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+import QtQuick 1.1
+
+Item {
+    id: behavior
+
+    signal clicked
+    property bool pressed: false    // Can't be alias of mouseArea.pressed because the latter is read-only
+    property alias containsMouse: mouseArea.containsMouse
+    property bool checkable: false
+    property bool checked: false
+    property bool triState: false
+    signal mouseMoved
+
+    onCheckableChanged: { if(!checkable) checked = false }
+    MouseArea {
+        id: mouseArea
+        anchors.fill: parent
+        hoverEnabled: true
+        onPositionChanged: behavior.mouseMoved()
+        onPressed: behavior.pressed = true  // needed when hover is enabled
+        onEntered: if(pressed && enabled) behavior.pressed = true
+        onExited: behavior.pressed = false
+        onCanceled: behavior.pressed = false    // mouse stolen e.g. by Flickable
+        onReleased: {
+            if(behavior.pressed && behavior.enabled) { // No click if release outside area
+                behavior.pressed = false
+                if(behavior.checkable)
+                    behavior.checked = !behavior.checked;
+                behavior.clicked()
+            }
+        }
+    }
+}
diff --git a/imports/QtDesktop/custom/behaviors/ModalPopupBehavior.qml b/imports/QtDesktop/custom/behaviors/ModalPopupBehavior.qml
new file mode 100644
index 0000000..62b3837
--- /dev/null
+++ b/imports/QtDesktop/custom/behaviors/ModalPopupBehavior.qml
@@ -0,0 +1,130 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** All rights reserved.
+** Contact: Nokia Corporation (qt-info@nokia.com)
+**
+** This file is part of the Qt Components project.
+**
+** $QT_BEGIN_LICENSE:BSD$
+** You may use this file under the terms of the BSD license as follows:
+**
+** "Redistribution and use in source and binary forms, with or without
+** modification, are permitted provided that the following conditions are
+** met:
+**   * Redistributions of source code must retain the above copyright
+**     notice, this list of conditions and the following disclaimer.
+**   * Redistributions in binary form must reproduce the above copyright
+**     notice, this list of conditions and the following disclaimer in
+**     the documentation and/or other materials provided with the
+**     distribution.
+**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
+**     the names of its contributors may be used to endorse or promote
+**     products derived from this software without specific prior written
+**     permission.
+**
+** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+import QtQuick 1.1
+
+// KNOWN ISSUES
+// none
+
+Item {
+    id: popupBehavior
+
+    property bool showing: false
+    property bool whenAlso: true            // modifier to the "showing" property
+    property bool consumeCancelClick: true
+    property int delay: 0                   // delay before popout becomes visible
+    property int deallocationDelay: 3000    // 3 seconds
+
+    property Component popupComponent
+
+    property alias popup: popupLoader.item  // read-only
+    property alias window: popupBehavior.root // read-only
+
+    signal prepareToShow
+    signal prepareToHide
+    signal cancelledByClick
+
+    // implementation
+
+    anchors.fill: parent
+
+    onShowingChanged: notifyChange()
+    onWhenAlsoChanged: notifyChange()
+    function notifyChange() {
+        if(showing && whenAlso) {
+            if(popupLoader.sourceComponent == undefined) {
+                popupLoader.sourceComponent = popupComponent;
+            }
+        } else {
+            mouseArea.enabled = false; // disable before opacity is changed in case it has fading behavior
+            if(Qt.isQtObject(popupLoader.item)) {
+                popupBehavior.prepareToHide();
+                popupLoader.item.opacity = 0;
+            }
+        }
+    }
+
+    property Item root: findRoot()
+    function findRoot() {
+        var p = parent;
+        while(p.parent != undefined)
+            p = p.parent;
+
+        return p;
+    }
+
+    MouseArea {
+        id: mouseArea
+        anchors.fill: parent
+        enabled: false  // enabled only when popout is showing
+        onPressed: {
+            popupBehavior.showing = false;
+            mouse.accepted = consumeCancelClick;
+            cancelledByClick();
+        }
+    }
+
+    Loader {
+        id: popupLoader
+    }
+
+    Timer { // visibility timer
+        running: Qt.isQtObject(popupLoader.item) && showing && whenAlso
+        interval: delay
+        onTriggered: {
+            popupBehavior.prepareToShow();
+            mouseArea.enabled = true;
+            popup.opacity = 1;
+        }
+    }
+
+    Timer { // deallocation timer
+        running: Qt.isQtObject(popupLoader.item) && popupLoader.item.opacity == 0
+        interval: deallocationDelay
+        onTriggered: popupLoader.sourceComponent = undefined
+    }
+
+    states: State {
+        name: "active"
+        when: Qt.isQtObject(popupLoader.item) && popupLoader.item.opacity > 0
+        ParentChange { target: popupBehavior; parent: root }
+    }
+ }
+
diff --git a/imports/QtDesktop/custom/components.pro b/imports/QtDesktop/custom/components.pro
new file mode 100644
index 0000000..e063d91
--- /dev/null
+++ b/imports/QtDesktop/custom/components.pro
@@ -0,0 +1,49 @@
+TEMPLATE = subdirs # XXX: Avoid call the linker
+TARGETPATH = Qt/labs/components/custom
+
+symbian {
+    INSTALL_IMPORTS = /resource/qt/imports
+} else {
+    INSTALL_IMPORTS = $$[QT_INSTALL_IMPORTS]
+}
+
+QML_FILES = \
+        qmldir \
+        BasicButton.qml \
+        BusyIndicator.qml \
+        ButtonBlock.qml \
+        ButtonColumn.qml \
+        ButtonRow.qml \
+        ButtonGroup.js \
+        Button.qml \
+        CheckBox.qml \
+        Splitter.qml \
+        ProgressBar.qml \
+        RadioButton.qml \
+        ScrollDecorator.qml \
+        ScrollIndicator.qml \
+        Slider.qml \
+        SpinBox.qml \
+        Switch.qml \
+        TextArea.qml \
+        TextField.qml
+
+QML_DIRS = \
+        behaviors \
+        private \
+        styles \
+        visuals
+
+qmlfiles.files = $$QML_FILES
+qmlfiles.sources = $$QML_FILES
+qmlfiles.path = $$INSTALL_IMPORTS/$$TARGETPATH
+
+qmldirs.files = $$QML_DIRS
+qmldirs.sources = $$QML_DIRS
+qmldirs.path = $$INSTALL_IMPORTS/$$TARGETPATH
+
+INSTALLS += qmlfiles qmldirs
+
+symbian {
+    DEPLOYMENT += qmlfiles qmldirs
+}
diff --git a/imports/QtDesktop/custom/qmldir b/imports/QtDesktop/custom/qmldir
new file mode 100644
index 0000000..716e44f
--- /dev/null
+++ b/imports/QtDesktop/custom/qmldir
@@ -0,0 +1,14 @@
+RangeModel 1.0 RangeModel.qml
+BasicButton 1.0 BasicButton.qml
+BusyIndicator 1.0 BusyIndicator.qml
+ButtonBlock 1.0 ButtonBlock.qml
+Button 1.0 Button.qml
+ButtonColumn 1.0 ButtonColumn.qml
+ButtonRow 1.0 ButtonRow.qml
+CheckBox 1.0 CheckBox.qml
+ProgressBar 1.0 ProgressBar.qml
+Slider 1.0 Slider.qml
+SpinBox 1.0 SpinBox.qml
+TextField 1.0 TextField.qml
+GroupBox 1.0 GroupBox.qml
+Splitter 1.0 Splitter.qml
diff --git a/imports/QtDesktop/images/folder_new.png b/imports/QtDesktop/images/folder_new.png
new file mode 100644
index 0000000..8d8bb9b
Binary files /dev/null and b/imports/QtDesktop/images/folder_new.png differ
diff --git a/imports/QtDesktop/private/ScrollAreaHelper.qml b/imports/QtDesktop/private/ScrollAreaHelper.qml
new file mode 100644
index 0000000..0a3ace1
--- /dev/null
+++ b/imports/QtDesktop/private/ScrollAreaHelper.qml
@@ -0,0 +1,123 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
+** All rights reserved.
+** Contact: Nokia Corporation (qt-info@nokia.com)
+**
+** This file is part of the Qt Components project.
+**
+** $QT_BEGIN_LICENSE:BSD$
+** You may use this file under the terms of the BSD license as follows:
+**
+** "Redistribution and use in source and binary forms, with or without
+** modification, are permitted provided that the following conditions are
+** met:
+**   * Redistributions of source code must retain the above copyright
+**     notice, this list of conditions and the following disclaimer.
+**   * Redistributions in binary form must reproduce the above copyright
+**     notice, this list of conditions and the following disclaimer in
+**     the documentation and/or other materials provided with the
+**     distribution.
+**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
+**     the names of its contributors may be used to endorse or promote
+**     products derived from this software without specific prior written
+**     permission.
+**
+** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+import QtQuick 1.1
+import "../"
+
+WheelArea {
+    id: wheelarea
+
+    property alias horizontalScrollBar: hscrollbar
+    property alias verticalScrollBar: vscrollbar
+    property int macOffset: frame && styleitem.style === "mac" ? 1 : 0
+    property bool blockUpdates: false
+    property int availableHeight : root.height - (hscrollbar.visible ? hscrollbar.height : 0)
+    property int availableWidth: root.width - vscrollbar.width
+
+    anchors.fill: parent
+    anchors.margins: frameWidth
+    horizontalMinimumValue: hscrollbar.minimumValue
+    horizontalMaximumValue: hscrollbar.maximumValue
+    verticalMinimumValue: vscrollbar.minimumValue
+    verticalMaximumValue: vscrollbar.maximumValue
+
+    onVerticalValueChanged: {
+        if (!blockUpdates)
+            verticalScrollBar.value = verticalValue
+    }
+
+    onHorizontalValueChanged: {
+        if (!blockUpdates)
+            horizontalScrollBar.value = horizontalValue
+    }
+
+    StyleItem {
+        // This is the filled corner between scrollbars
+        id: cornerFill
+        elementType: "scrollareacorner"
+        width: vscrollbar.width
+        anchors.right: parent.right
+        height: hscrollbar.height
+        anchors.bottom: parent.bottom
+        visible: hscrollbar.visible && vscrollbar.visible
+    }
+
+    ScrollBar {
+        id: hscrollbar
+        orientation: Qt.Horizontal
+        visible: contentWidth > availableWidth
+        maximumValue: contentWidth > availableWidth ? root.contentWidth - availableWidth : 0
+        minimumValue: 0
+        anchors.bottom: parent.bottom
+        anchors.leftMargin: parent.macOffset
+        anchors.bottomMargin: -parent.macOffset
+        anchors.left: parent.left
+        anchors.right: parent.right
+        anchors.rightMargin: vscrollbar.visible ? vscrollbar.width -parent.macOffset: 0
+        onValueChanged: {
+            if (!blockUpdates) {
+                contentX = value
+                horizontalValue = value
+            }
+        }
+    }
+
+    ScrollBar {
+        id: vscrollbar
+        orientation: Qt.Vertical
+        // We cannot bind directly to tree.height due to binding loops so we have to redo the calculation here
+        visible: contentHeight > availableHeight
+        maximumValue: contentHeight > availableHeight ? root.contentHeight - availableHeight : 0
+        minimumValue: 0
+        anchors.right: parent.right
+        anchors.top: parent.top
+        anchors.bottom: parent.bottom
+        anchors.topMargin: parent.macOffset
+        anchors.rightMargin: -parent.macOffset
+        anchors.bottomMargin: hscrollbar.visible ? hscrollbar.height - parent.macOffset :  0
+
+        onValueChanged: {
+            if (!blockUpdates) {
+                contentY = value
+                verticalValue = value
+            }
+        }
+    }
+}
diff --git a/imports/QtDesktop/qmldir b/imports/QtDesktop/qmldir
new file mode 100644
index 0000000..000c021
--- /dev/null
+++ b/imports/QtDesktop/qmldir
@@ -0,0 +1,32 @@
+Slider 0.1 Slider.qml
+SpinBox 0.1 SpinBox.qml
+GroupBox 0.1 GroupBox.qml
+Button 0.1 Button.qml
+Label 0.1 Label.qml
+ToolBar 0.1 ToolBar.qml
+TabFrame 0.1 TabFrame.qml
+TabBar 0.1 TabBar.qml
+Tab 0.1 Tab.qml
+Frame 0.1 Frame.qml
+ScrollArea 0.1 ScrollArea.qml
+ScrollBar 0.1 ScrollBar.qml
+ComboBox 0.1 ComboBox.qml
+ToolButton 0.1 ToolButton.qml
+TextArea 0.1 TextArea.qml
+TextField 0.1 TextField.qml
+ProgressBar 0.1 ProgressBar.qml
+ButtonRow 0.1 ButtonRow.qml
+ButtonColumn 0.1 ButtonColumn.qml
+SplitterRow 0.1 SplitterRow.qml
+SplitterColumn 0.1 SplitterColumn.qml
+Dial 0.1 Dial.qml
+TableView 0.1 TableView.qml
+CheckBox 0.1 CheckBox.qml
+RadioButton 0.1 RadioButton.qml
+plugin styleplugin plugin
+TableColumn 0.1 TableColumn.qml
+ContextMenu 0.1 ContextMenu.qml
+MenuItem 0.1 MenuItem.qml
+Dialog 0.1 Dialog.qml
+StatusBar 0.1 StatusBar.qml
+ApplicationWindow 0.1 ApplicationWindow.qml
diff --git a/src/src.pro b/src/src.pro
index ad26cff..3390c98 100644
--- a/src/src.pro
+++ b/src/src.pro
@@ -5,7 +5,7 @@ QT += script
 
 TARGET  = styleplugin
 
-DESTDIR = ../components/plugin
+DESTDIR = ../imports/QtDesktop/plugin
 OBJECTS_DIR = obj
 MOC_DIR = moc