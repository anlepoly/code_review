diff --git a/src/designer/src/lib/sdk/abstractformwindow.cpp b/src/designer/src/lib/sdk/abstractformwindow.cpp
index 61616a5..409ccc5 100644
--- a/src/designer/src/lib/sdk/abstractformwindow.cpp
+++ b/src/designer/src/lib/sdk/abstractformwindow.cpp
@@ -767,7 +767,7 @@ void QDesignerFormWindowInterface::activateResourceFilePaths(const QStringList &
 
     Switches the form window into editing mode.
 
-    \sa \l {Qt Designer's Form Editing Mode}
+    \sa {Qt Designer's Form Editing Mode}
 
     \internal
 */
diff --git a/src/designer/src/lib/uilib/abstractformbuilder.cpp b/src/designer/src/lib/uilib/abstractformbuilder.cpp
index 91c71bb..e406b27 100644
--- a/src/designer/src/lib/uilib/abstractformbuilder.cpp
+++ b/src/designer/src/lib/uilib/abstractformbuilder.cpp
@@ -1249,7 +1249,8 @@ QActionGroup *QAbstractFormBuilder::createActionGroup(QObject *parent, const QSt
     Saves an XML representation of the given \a widget to the
     specified \a device in the standard UI file format.
 
-    \sa load()*/
+    \sa load()
+*/
 void QAbstractFormBuilder::save(QIODevice *dev, QWidget *widget)
 {
     DomWidget *ui_widget = createDom(widget, 0);
@@ -2788,7 +2789,8 @@ void QAbstractFormBuilder::loadExtraInfo(DomWidget *ui_widget, QWidget *widget,
 /*!
     Returns the current working directory of the form builder.
 
-    \sa setWorkingDirectory() */
+    \sa setWorkingDirectory()
+*/
 QDir QAbstractFormBuilder::workingDirectory() const
 {
     return d->m_workingDirectory;
@@ -2798,7 +2800,8 @@ QDir QAbstractFormBuilder::workingDirectory() const
     Sets the current working directory of the form builder to the
     specified \a directory.
 
-    \sa workingDirectory()*/
+    \sa workingDirectory()
+*/
 void QAbstractFormBuilder::setWorkingDirectory(const QDir &directory)
 {
     d->m_workingDirectory = directory;
diff --git a/src/designer/src/lib/uilib/customwidget.qdoc b/src/designer/src/lib/uilib/customwidget.qdoc
index 6ef2d4e..4be8265 100644
--- a/src/designer/src/lib/uilib/customwidget.qdoc
+++ b/src/designer/src/lib/uilib/customwidget.qdoc
@@ -110,8 +110,7 @@
     Example}. The example shows how to create a custom widget plugin
     for \QD.
 
-    \sa QDesignerCustomWidgetCollectionInterface {Creating Custom
-    Widgets for Qt Designer}
+    \sa QDesignerCustomWidgetCollectionInterface, {Creating Custom Widgets for Qt Designer}
 */
 
 /*!
diff --git a/src/shared/qtpropertybrowser/qtpropertybrowser.cpp b/src/shared/qtpropertybrowser/qtpropertybrowser.cpp
index 76a6e45..5b31db0 100644
--- a/src/shared/qtpropertybrowser/qtpropertybrowser.cpp
+++ b/src/shared/qtpropertybrowser/qtpropertybrowser.cpp
@@ -778,7 +778,7 @@ QtProperty *QtAbstractPropertyManager::createProperty()
     property is being destroyed so that it can remove the property's
     additional attributes.
 
-    \sa clear(),  propertyDestroyed()
+    \sa clear(), propertyDestroyed()
 */
 void QtAbstractPropertyManager::uninitializeProperty(QtProperty *property)
 {
@@ -842,7 +842,7 @@ void QtAbstractPropertyManager::uninitializeProperty(QtProperty *property)
     which also provides a pure virtual convenience overload of this
     function enabling access to the property's manager.
 
-    \sa  QtAbstractEditorFactory::createEditor()
+    \sa QtAbstractEditorFactory::createEditor()
 */
 
 /*!
diff --git a/src/shared/qtpropertybrowser/qtpropertymanager.cpp b/src/shared/qtpropertybrowser/qtpropertymanager.cpp
index 222c5ab..1ccd191 100644
--- a/src/shared/qtpropertybrowser/qtpropertymanager.cpp
+++ b/src/shared/qtpropertybrowser/qtpropertymanager.cpp
@@ -3281,7 +3281,7 @@ void QtSizePropertyManager::setMaximum(QtProperty *property, const QSize &maxVal
     When setting a new range, the current value is adjusted if
     necessary (ensuring that the value remains within the range).
 
-    \sa  setMinimum(), setMaximum(), rangeChanged()
+    \sa setMinimum(), setMaximum(), rangeChanged()
 */
 void QtSizePropertyManager::setRange(QtProperty *property, const QSize &minVal, const QSize &maxVal)
 {
@@ -3680,7 +3680,7 @@ void QtSizeFPropertyManager::setMaximum(QtProperty *property, const QSizeF &maxV
     When setting a new range, the current value is adjusted if
     necessary (ensuring that the value remains within the range).
 
-    \sa  setMinimum(), setMaximum(), rangeChanged()
+    \sa setMinimum(), setMaximum(), rangeChanged()
 */
 void QtSizeFPropertyManager::setRange(QtProperty *property, const QSizeF &minVal, const QSizeF &maxVal)
 {