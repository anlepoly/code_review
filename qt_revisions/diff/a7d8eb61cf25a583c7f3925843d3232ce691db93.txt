diff --git a/examples/sensors/sensor_explorer/import/explorer.cpp b/examples/sensors/sensor_explorer/import/explorer.cpp
index 2fd9501..370e8f5 100644
--- a/examples/sensors/sensor_explorer/import/explorer.cpp
+++ b/examples/sensors/sensor_explorer/import/explorer.cpp
@@ -47,12 +47,12 @@
 
 QT_BEGIN_NAMESPACE
 
-/*!
+/*
     \class QSensorExplorer
     \brief The QSensorExplorer element provides an easy access for reading all avalaible sensors installed on the system.
 */
 
-/*!
+/*
     Construct a QSensorExplorer object with parent \a parent
 */
 QSensorExplorer::QSensorExplorer(QObject* parent)
@@ -62,14 +62,14 @@ QSensorExplorer::QSensorExplorer(QObject* parent)
     loadSensors();
 }
 
-/*!
+/*
     Destructor of a QSensorExplorer
 */
 QSensorExplorer::~QSensorExplorer()
 {
 }
 
-/*!
+/*
     Load all available sensors and store it in a list.
 */
 void QSensorExplorer::loadSensors()
@@ -97,12 +97,12 @@ void QSensorExplorer::loadSensors()
     //! [0]
 }
 
-/*!
+/*
     \fn QSensorExplorer::availableSensorsChanged()
     Notifies the client if the list of the available sensors was changed
 */
 
-/*!
+/*
     \property QSensorExplorer::availableSensors
     Returns a list of all available sensor.
 */
@@ -111,11 +111,12 @@ QDeclarativeListProperty<QSensorItem> QSensorExplorer::availableSensors()
     return QDeclarativeListProperty<QSensorItem>(this,_availableSensors);
 }
 
-/*!
+/*
     \fn QSensorExplorer::selectedSensorItemChanged()
     Notifies the client if the selected sensor has been changed
 */
-/*!
+
+/*
     \property QSensorExplorer::selectedSensorItem
     Returns the current selected sensor item.
 */
@@ -124,7 +125,7 @@ QSensorItem* QSensorExplorer::selectedSensorItem()
     return _selectedSensorItem;
 }
 
-/*!
+/*
     \fn QSensorExplorer::setSelectedSensorItem(QSensorItem* selitem)
     Sets the QSensorItem \a selitem as the current selected QSensorItem.
 */
diff --git a/examples/sensors/sensor_explorer/import/propertyinfo.cpp b/examples/sensors/sensor_explorer/import/propertyinfo.cpp
index 6ddcd3f..6a8be4c 100644
--- a/examples/sensors/sensor_explorer/import/propertyinfo.cpp
+++ b/examples/sensors/sensor_explorer/import/propertyinfo.cpp
@@ -45,12 +45,12 @@
 
 QT_BEGIN_NAMESPACE
 
-/*!
+/*
     \class QPropertyInfo
     \brief The QPropertyInfo element provides an easy access for reading and writing the property values.
 */
 
-/*!
+/*
     Construct a QPropertyInfo object with parent \a parent
 */
 QPropertyInfo::QPropertyInfo(QObject* parent)
@@ -62,7 +62,7 @@ QPropertyInfo::QPropertyInfo(QObject* parent)
     , _value("")
 {}
 
-/*!
+/*
     Construct a QPropertyInfo object with parent \a parent, property name \a name, property index \a index,
     property write access \a writeable, property type \a typeName and property value \a value
 */
@@ -75,7 +75,7 @@ QPropertyInfo::QPropertyInfo(const QString& name, int index, bool writeable, con
     , _value(value)
 {}
 
-/*!
+/*
     \property QPropertyInfo::name
     Returns the name of the property
 */
@@ -84,7 +84,7 @@ QString QPropertyInfo::name()
     return _name;
 }
 
-/*!
+/*
     \property QPropertyInfo::typeName
     Returns the type of the property
 */
@@ -93,7 +93,7 @@ QString QPropertyInfo::typeName()
     return _typeName;
 }
 
-/*!
+/*
     \property QPropertyInfo::value
     Returns the current value of the property
 */
@@ -102,12 +102,12 @@ QString QPropertyInfo::value()
     return _value;
 }
 
-/*!
+/*
     \fn void QPropertyInfo::valueChanged()
     Signal that notifies the client if the property value was changed.
 */
 
-/*!
+/*
     \fn QPropertyInfo::setValue(const QString& value)
     Sets the value \a value of the property
 */
@@ -119,7 +119,7 @@ void QPropertyInfo::setValue(const QString& value)
     }
 }
 
-/*!
+/*
     \fn QPropertyInfo::index()
     Returns the meta-data index of the property
 */
@@ -128,7 +128,7 @@ int QPropertyInfo::index()
     return _index;
 }
 
-/*!
+/*
     \property QPropertyInfo::isWriteable
     Returns true if the property is writeable false if property is read only
 */
diff --git a/examples/sensors/sensor_explorer/import/sensoritem.cpp b/examples/sensors/sensor_explorer/import/sensoritem.cpp
index 82e2596..f0d886f 100644
--- a/examples/sensors/sensor_explorer/import/sensoritem.cpp
+++ b/examples/sensors/sensor_explorer/import/sensoritem.cpp
@@ -45,12 +45,12 @@
 
 QT_BEGIN_NAMESPACE
 
-/*!
+/*
     \class QSensorItem
     \brief The QSensorItem element provides information about the meta-datas from a sensors installed on the system.
 */
 
-/*!
+/*
     Construct a QSensorItem object with parent \a parent
 */
 QSensorItem::QSensorItem(QObject* parent)
@@ -59,7 +59,7 @@ QSensorItem::QSensorItem(QObject* parent)
 {
 }
 
-/*!
+/*
     Construct a QSensorItem object with QSensor \a sensor and parent \a parent
 */
 QSensorItem::QSensorItem(QSensor* sensor, QObject* parent)
@@ -68,18 +68,19 @@ QSensorItem::QSensorItem(QSensor* sensor, QObject* parent)
 {
 }
 
-/*!
+/*
     Destructor of a QSensorItem
 */
 QSensorItem::~QSensorItem()
 {
 }
 
-/*!
+/*
     \fn QSensorItem::startChanged()
     Notifies the client if the sensors has changed its start active status
 */
-/*!
+
+/*
     \property QSensorItem::start
     This property starts or stops the sensor
 */
@@ -94,7 +95,7 @@ void QSensorItem::setStart(bool run)
         _qsensor->setActive(run);
 }
 
-/*!
+/*
     \property QSensorItem::id
     Returns the sensor id of the sensor item
 */
@@ -103,7 +104,7 @@ QString QSensorItem::id()
     return (_qsensor ? _qsensor->identifier() : "");
 }
 
-/*!
+/*
     Set the new value \a val to the QPropertyInfo object \a property
 */
 void QSensorItem::changePropertyValue(QPropertyInfo* property, const QString& val)
@@ -116,7 +117,7 @@ void QSensorItem::changePropertyValue(QPropertyInfo* property, const QString& va
     }
 }
 
-/*!
+/*
     Reading the meta-datas and activates the sensor.
 */
 void QSensorItem::select()
@@ -171,7 +172,7 @@ void QSensorItem::select()
     connect(_qsensor, SIGNAL(activeChanged()), SIGNAL(startChanged()));
 }
 
-/*!
+/*
     Unselect the sensor by stopping the sensor.
 */
 void QSensorItem::unSelect()
@@ -180,7 +181,7 @@ void QSensorItem::unSelect()
     disconnect(_qsensor, SIGNAL(activeChanged()), this , SIGNAL(startChanged()));
 }
 
-/*!
+/*
     Updates the property values from QSensor
 */
 void QSensorItem::updateSensorPropertyValues()
@@ -194,12 +195,12 @@ void QSensorItem::updateSensorPropertyValues()
     }
 }
 
-/*!
+/*
     \fn QSensorItem::propertiesChanged()
     Notifies the client if the list of the properties was changed
 */
 
-/*!
+/*
     Updates the property values from the QSensorReader
 */
 void QSensorItem::sensorReadingChanged()
@@ -212,7 +213,7 @@ void QSensorItem::sensorReadingChanged()
     }
 }
 
-/*!
+/*
     Returns true if the property with the name \a propertyname should be ignored
 */
 bool QSensorItem::ignoreProperty(const QString& propertyname)
@@ -227,7 +228,7 @@ bool QSensorItem::ignoreProperty(const QString& propertyname)
     return false;
 }
 
-/*!
+/*
     Returns true if the property with the name \a propertyname is writeable
 */
 bool QSensorItem::isWriteable(const QString& propertyname)
@@ -253,7 +254,7 @@ bool QSensorItem::isWriteable(const QString& propertyname)
     return false;
 }
 
-/*!
+/*
     Convert the variant \a val dependend on the type \a type and returns the converted value as a QString
 */
 QString QSensorItem::convertValue(const QString& type, const QVariant& val)
@@ -306,7 +307,7 @@ QString QSensorItem::convertValue(const QString& type, const QVariant& val)
     return val.toString();
 }
 
-/*!
+/*
     \property QSensorItem::properties
     Returns a list of all properties from the sensor
 */