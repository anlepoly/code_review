diff --git a/src/corelib/kernel/qvariant.h b/src/corelib/kernel/qvariant.h
index 67cec68..8ba27d2 100644
--- a/src/corelib/kernel/qvariant.h
+++ b/src/corelib/kernel/qvariant.h
@@ -251,6 +251,8 @@ class Q_CORE_EXPORT QVariant
 
     QVariant& operator=(const QVariant &other);
 #ifdef Q_COMPILER_RVALUE_REFS
+    inline QVariant(QVariant &&other) : d(other.d)
+    { other.d = Private(); }
     inline QVariant &operator=(QVariant &&other)
     { qSwap(d, other.d); return *this; }
 #endif
diff --git a/src/corelib/tools/qbytearray.h b/src/corelib/tools/qbytearray.h
index 79a7377..1e2a93d 100644
--- a/src/corelib/tools/qbytearray.h
+++ b/src/corelib/tools/qbytearray.h
@@ -201,6 +201,7 @@ public:
     QByteArray &operator=(const QByteArray &);
     QByteArray &operator=(const char *str);
 #ifdef Q_COMPILER_RVALUE_REFS
+    inline QByteArray(QByteArray && other) : d(other.d) { other.d = Data::sharedNull(); }
     inline QByteArray &operator=(QByteArray &&other)
     { qSwap(d, other.d); return *this; }
 #endif
diff --git a/src/corelib/tools/qhash.h b/src/corelib/tools/qhash.h
index d196e6e..3936e36 100644
--- a/src/corelib/tools/qhash.h
+++ b/src/corelib/tools/qhash.h
@@ -287,6 +287,7 @@ public:
 
     QHash<Key, T> &operator=(const QHash<Key, T> &other);
 #ifdef Q_COMPILER_RVALUE_REFS
+    inline QHash(QHash<Key, T> &&other) : d(other.d) { other.d = const_cast<QHashData *>(&QHashData::shared_null); }
     inline QHash<Key, T> &operator=(QHash<Key, T> &&other)
     { qSwap(d, other.d); return *this; }
 #endif
diff --git a/src/corelib/tools/qlinkedlist.h b/src/corelib/tools/qlinkedlist.h
index a8a97b3..1caf21f 100644
--- a/src/corelib/tools/qlinkedlist.h
+++ b/src/corelib/tools/qlinkedlist.h
@@ -83,6 +83,7 @@ public:
     ~QLinkedList();
     QLinkedList<T> &operator=(const QLinkedList<T> &);
 #ifdef Q_COMPILER_RVALUE_REFS
+    inline QLinkedList(QLinkedList<T> &&other) : d(other.d) { other.d = const_cast<QLinkedListData *>(&QLinkedListData::shared_null); }
     inline QLinkedList<T> &operator=(QLinkedList<T> &&other)
     { qSwap(d, other.d); return *this; }
 #endif
diff --git a/src/corelib/tools/qlist.h b/src/corelib/tools/qlist.h
index 0d5b109..ad94781 100644
--- a/src/corelib/tools/qlist.h
+++ b/src/corelib/tools/qlist.h
@@ -115,7 +115,8 @@ public:
     ~QList();
     QList<T> &operator=(const QList<T> &l);
 #ifdef Q_COMPILER_RVALUE_REFS
-    inline QList &operator=(QList &&other)
+    inline QList(QList<T> &&other) : d(other.d) { other.d = const_cast<QListData::Data *>(&QListData::shared_null); }
+    inline QList &operator=(QList<T> &&other)
     { qSwap(d, other.d); return *this; }
 #endif
     inline void swap(QList<T> &other) { qSwap(d, other.d); }
diff --git a/src/corelib/tools/qstring.h b/src/corelib/tools/qstring.h
index 61b7264..7b6d784 100644
--- a/src/corelib/tools/qstring.h
+++ b/src/corelib/tools/qstring.h
@@ -198,6 +198,7 @@ public:
     QString &operator=(const QString &);
     inline QString &operator=(const QLatin1String &);
 #ifdef Q_COMPILER_RVALUE_REFS
+    inline QString(QString && other) : d(other.d) { other.d = Data::sharedNull(); }
     inline QString &operator=(QString &&other)
     { qSwap(d, other.d); return *this; }
 #endif
diff --git a/src/corelib/tools/qvector.h b/src/corelib/tools/qvector.h
index b36b832..60cf12e 100644
--- a/src/corelib/tools/qvector.h
+++ b/src/corelib/tools/qvector.h
@@ -115,6 +115,7 @@ public:
     inline ~QVector() { if (!d->ref.deref()) free(d); }
     QVector<T> &operator=(const QVector<T> &v);
 #ifdef Q_COMPILER_RVALUE_REFS
+    inline QVector(QVector<T> &&other) : d(other.d) { other.d = Data::sharedNull(); }
     inline QVector<T> operator=(QVector<T> &&other)
     { qSwap(d, other.d); return *this; }
 #endif
diff --git a/tests/auto/other/collections/tst_collections.cpp b/tests/auto/other/collections/tst_collections.cpp
index 472dd50..26e3ccf 100644
--- a/tests/auto/other/collections/tst_collections.cpp
+++ b/tests/auto/other/collections/tst_collections.cpp
@@ -2419,6 +2419,14 @@ bool isSharable(const Container &container)
     return !container.isDetached();
 }
 
+template <class Container> Container newInstance() {
+    Container container;
+    populate(container);
+    if (!container.isEmpty())
+        return container;
+    return Container();
+}
+
 template <class Container, class ContainerMutableIterator>
 void testContainer()
 {
@@ -2539,10 +2547,20 @@ void testContainer()
         QVERIFY(!c2.isDetached());
         QVERIFY(!c3.isDetached());
     }
+
+    /* test that the move operators work properly */
+    {
+        Container c1 = Container(newInstance<Container>());
+        QVERIFY(c1.size() == 4);
+        QVERIFY(c1 == newInstance<Container>());
+        c1 = newInstance<Container>();
+        QVERIFY(c1.size() == 4);
+        QVERIFY(c1 == newInstance<Container>());
+    }
 }
 
 #define TEST_SEQUENTIAL_CONTAINER(Container) \
-    testContainer<Q##Container<int>, QMutable##Container##Iterator<int> >()
+    testContainer<Q##Container<int>, QMutable##Container##Iterator<int> >() \
 
 #define TEST_ASSOCIATIVE_CONTAINER(Container) \
     testContainer<Q##Container<int, int>, QMutable##Container##Iterator<int, int> >()