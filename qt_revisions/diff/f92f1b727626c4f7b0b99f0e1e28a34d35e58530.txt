diff --git a/qmldesktopviewer/qmldesktopviewer.pro b/qmldesktopviewer/qmldesktopviewer.pro
index 88ad3f1..3b7a2ff 100644
--- a/qmldesktopviewer/qmldesktopviewer.pro
+++ b/qmldesktopviewer/qmldesktopviewer.pro
@@ -10,3 +10,4 @@ HEADERS +=  qmldesktopviewer.h \
 SOURCES +=  main.cpp \
             qmldesktopviewer.cpp \
             loggerwidget.cpp
+CONFIG -=app_bundle
\ No newline at end of file
diff --git a/qmlwidget/main.cpp b/qmlwidget/main.cpp
new file mode 100644
index 0000000..374d5f1
--- /dev/null
+++ b/qmlwidget/main.cpp
@@ -0,0 +1,71 @@
+/****************************************************************************
+**
+** Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
+** All rights reserved.
+** Contact: Nokia Corporation (qt-info@nokia.com)
+**
+** This file is part of the examples of the Qt Toolkit.
+**
+** You may use this file under the terms of the BSD license as follows:
+**
+** "Redistribution and use in source and binary forms, with or without
+** modification, are permitted provided that the following conditions are
+** met:
+**   * Redistributions of source code must retain the above copyright
+**     notice, this list of conditions and the following disclaimer.
+**   * Redistributions in binary form must reproduce the above copyright
+**     notice, this list of conditions and the following disclaimer in
+**     the documentation and/or other materials provided with the
+**     distribution.
+**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
+**     the names of its contributors may be used to endorse or promote
+**     products derived from this software without specific prior written
+**     permission.
+**
+** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOTgall
+** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#include <QtCore>
+#include <QtQml>
+#include <QtQuick>
+#include <QtWidgets>
+
+#include "qwindowwidget.h"
+
+QT_USE_NAMESPACE
+
+int main(int argc, char ** argv)
+{
+    QApplication app(argc, argv);
+
+    QQuickView quickView;
+    quickView.setObjectName("quick view");
+    quickView.setSource(QUrl::fromLocalFile("../examples/Gallery.qml"));
+
+    QWindowWidget windowWidget;
+    windowWidget.setObjectName("window widget");
+    windowWidget.setEmbeddedWindow(&quickView);
+
+    QMainWindow main;
+    main.setObjectName("main window");
+    main.setCentralWidget(&windowWidget);
+    main.setStatusBar(new QStatusBar());
+    main.setMenuBar(new QMenuBar());
+    main.show();
+
+    return app.exec();
+}
+
+
diff --git a/qmlwidget/qmlwidget.pro b/qmlwidget/qmlwidget.pro
new file mode 100644
index 0000000..890ce76
--- /dev/null
+++ b/qmlwidget/qmlwidget.pro
@@ -0,0 +1,11 @@
+TEMPLATE = app
+TARGET = qmlwidget
+DEPENDPATH += . ../src/
+INCLUDEPATH += . ../src/
+QT += qml widgets quick
+
+HEADERS += ../src/qwindowwidget.h
+SOURCES += ../src/qwindowwidget.cpp
+
+SOURCES += main.cpp
+CONFIG -= app_bundle
diff --git a/src/qstyleplugin.cpp b/src/qstyleplugin.cpp
index d60ec24..3263e51 100644
--- a/src/qstyleplugin.cpp
+++ b/src/qstyleplugin.cpp
@@ -41,6 +41,7 @@
 #include "qstyleplugin.h"
 #include "qstyleitem.h"
 #include "qrangemodel.h"
+#include "qwindowitem.h"
 #include "qdesktopitem.h"
 #include "qwheelarea.h"
 #include "qcursorarea.h"
@@ -84,6 +85,7 @@ void StylePlugin::registerTypes(const char *uri)
 
     qmlRegisterType<QFileSystemModel>(uri, 0, 2, "FileSystemModel");
     qmlRegisterType<QtSplitterBase>(uri, 0, 2, "Splitter");
+    qmlRegisterType<QWindowItem>("QtQuick", 2, 0, "Window");
 
     qmlRegisterUncreatableType<QDesktopItem>(uri, 0,2,"Desktop", QLatin1String("Do not create objects of type Desktop"));
 }
diff --git a/src/qtoplevelwindow.cpp b/src/qtoplevelwindow.cpp
new file mode 100644
index 0000000..042cc28
--- /dev/null
+++ b/src/qtoplevelwindow.cpp
@@ -0,0 +1,107 @@
+#include "qtoplevelwindow.h"
+
+#include <QDesktopWidget>
+
+QTopLevelWindow::QTopLevelWindow()
+#if QT_VERSION < 0x050000
+    : QMainWindow(), _view(new QDeclarativeView), _positionIsDefined(false) {
+#else
+    : QMainWindow(), _windowWidget(new QWindowWidget), _view(new QQuickView), _positionIsDefined(false) {
+#endif
+
+    setVisible(false);
+    // Ensure that we have a default size, otherwise an empty window statement will
+    // result in no window
+//    resize(QSize(100, 100));
+#if QT_VERSION < 0x050000
+    _view->setBackgroundBrush(palette().window());
+    setCentralWidget(_view);
+#else
+    _windowWidget->setEmbeddedWindow(_view);
+    setCentralWidget(_windowWidget);
+#endif
+}
+
+QTopLevelWindow::~QTopLevelWindow()
+{
+    foreach (QTopLevelWindow* child, findChildren<QTopLevelWindow*>())
+        child->setParent(0);
+    //we need this to break the parental loop of QWindowItem and QTopLevelWindow
+#if QT_VERSION < 0x050000
+    _view->scene()->setParent(0);
+#endif
+}
+
+void QTopLevelWindow::registerChildWindow(QTopLevelWindow* child)
+{
+    child->setParent(this);
+}
+
+void QTopLevelWindow::hideChildWindows()
+{
+    foreach (QTopLevelWindow* child, findChildren<QTopLevelWindow*>()) {
+        child->hide();
+    }
+}
+
+void QTopLevelWindow::initPosition()
+{
+    if (!_positionIsDefined)
+        center();
+    foreach (QTopLevelWindow* child, findChildren<QTopLevelWindow*>()) {
+        child->initPosition();
+    }
+}
+
+void QTopLevelWindow::center()
+{
+    QPoint parentCenter;
+#if QT_VERSION < 0x050000
+    if (parentWidget())
+        parentCenter = parentWidget()->geometry().center();
+    else
+#endif
+        parentCenter = QDesktopWidget().screenGeometry().center();
+    QRect thisGeometry = geometry();
+    thisGeometry.moveCenter(parentCenter);
+    setGeometry(thisGeometry);
+}
+
+void QTopLevelWindow::move(int x, int y)
+{
+    qDebug("a %d, %d", x, y);
+    move(QPoint(x,y));
+}
+
+void QTopLevelWindow::move(const QPoint &point)
+{
+    _positionIsDefined = true;
+    QMainWindow::move(point);
+}
+
+void QTopLevelWindow::setWindowFlags(Qt::WindowFlags type)
+{
+    QWidget::setWindowFlags(type | Qt::Window);
+}
+
+bool QTopLevelWindow::event(QEvent *event) {
+    switch (event->type()) {
+        case QEvent::WindowStateChange:
+            emit windowStateChanged();
+            break;
+        case QEvent::Show:
+            emit visibilityChanged();
+            break;
+        case QEvent::Hide:
+            hideChildWindows();
+            emit visibilityChanged();
+            break;
+        case QEvent::Resize: {
+            const QResizeEvent *resize = static_cast<const QResizeEvent *>(event);
+            emit sizeChanged(resize->size());
+            break;
+        }
+        default: break;
+    }
+    return QMainWindow::event(event);
+}
diff --git a/src/qtoplevelwindow.h b/src/qtoplevelwindow.h
new file mode 100644
index 0000000..10f0845
--- /dev/null
+++ b/src/qtoplevelwindow.h
@@ -0,0 +1,86 @@
+/****************************************************************************
+**
+** Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
+** All rights reserved.
+** Contact: Nokia Corporation (qt-info@nokia.com)
+**
+** This file is part of the Qt Components project on Qt Labs.
+**
+** No Commercial Usage
+** This file contains pre-release code and may not be distributed.
+** You may use this file in accordance with the terms and conditions contained
+** in the Technology Preview License Agreement accompanying this package.
+**
+** GNU Lesser General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU Lesser
+** General Public License version 2.1 as published by the Free Software
+** Foundation and appearing in the file LICENSE.LGPL included in the
+** packaging of this file.  Please review the following information to
+** ensure the GNU Lesser General Public License version 2.1 requirements
+** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** If you have questions regarding the use of this file, please contact
+** Nokia at qt-info@nokia.com.
+**
+****************************************************************************/
+
+#ifndef QTOPLEVELWINDOW_H
+#define QTOPLEVELWINDOW_H
+
+#include <QtCore/qglobal.h>
+
+#include <QMainWindow>
+#if QT_VERSION < 0x050000
+#include <QDeclarativeView>
+#else
+#include <QtQuick/QQuickView>
+#include <QtGui/QWindow>
+#include "qwindowwidget.h"
+#endif
+
+#include <QWindowStateChangeEvent>
+#include <QDebug>
+
+// Qt 4, QtQuick1 : QTopLevelWindow is a QMainWindow with a QDeclarativeView centerWidget
+// Qt 5, QtQuick2 : QTopLevelWindow is a QMainWindow with a QWindowWidget centerWidget that embeds a QQuickView.
+class QTopLevelWindow : public QMainWindow {
+    Q_OBJECT
+public:
+    QTopLevelWindow();
+    ~QTopLevelWindow();
+
+#if QT_VERSION < 0x050000
+    QGraphicsScene *scene() { return _view->scene(); }
+    QDeclarativeView *view() { return _view; }
+#else
+    QQuickView * view() { return _view; }
+#endif
+    void registerChildWindow(QTopLevelWindow* child);
+    void hideChildWindows();
+    void initPosition();
+    void setWindowFlags(Qt::WindowFlags type);
+
+    void center();
+    void move(int x, int y);
+    void move(const QPoint &);
+
+protected:
+    virtual bool event(QEvent *event);
+
+Q_SIGNALS:
+    void visibilityChanged();
+    void windowStateChanged();
+    void sizeChanged(QSize newSize);
+
+private:
+#if QT_VERSION < 0x050000
+    QDeclarativeView *_view;
+#else
+    QWindowWidget *_windowWidget;
+    QQuickView *_view;
+#endif
+    bool _positionIsDefined;
+
+};
+
+#endif // QTOPLEVELWINDOW_H
diff --git a/src/qwindowitem.cpp b/src/qwindowitem.cpp
new file mode 100644
index 0000000..113d3f1
--- /dev/null
+++ b/src/qwindowitem.cpp
@@ -0,0 +1,287 @@
+/****************************************************************************
+**
+** Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
+** All rights reserved.
+** Contact: Nokia Corporation (qt-info@nokia.com)
+**
+** This file is part of the examples of the Qt Toolkit.
+**
+** You may use this file under the terms of the BSD license as follows:
+**
+** "Redistribution and use in source and binary forms, with or without
+** modification, are permitted provided that the following conditions are
+** met:
+**   * Redistributions of source code must retain the above copyright
+**     notice, this list of conditions and the following disclaimer.
+**   * Redistributions in binary form must reproduce the above copyright
+**     notice, this list of conditions and the following disclaimer in
+**     the documentation and/or other materials provided with the
+**     distribution.
+**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
+**     the names of its contributors may be used to endorse or promote
+**     products derived from this software without specific prior written
+**     permission.
+**
+** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOTgall
+** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+
+#include "qwindowitem.h"
+#include "qtoplevelwindow.h"
+
+#include <QTimer>
+
+QWindowItem::QWindowItem()
+    : _window(new QTopLevelWindow), _positionIsDefined(false), _delayedVisible(false), _deleteOnClose(true), _x(0), _y(0)
+{
+    connect(_window, SIGNAL(visibilityChanged()), this, SIGNAL(visibleChanged()));
+    connect(_window, SIGNAL(windowStateChanged()), this, SIGNAL(windowStateChanged()));
+    connect(_window, SIGNAL(sizeChanged(QSize)), this, SLOT(updateSize(QSize)));
+
+#if QT_VERSION < 0x050000
+    view()->setResizeMode(QDeclarativeView::SizeRootObjectToView);
+#else
+    view()->setResizeMode(QQuickView::SizeRootObjectToView);
+#endif
+    _window->installEventFilter(this);
+}
+
+QWindowItem::~QWindowItem()
+{
+    delete _window;
+}
+
+bool QWindowItem::eventFilter(QObject *, QEvent *ev)
+{
+    switch (ev->type()) {
+    case QEvent::Close:
+        ev->ignore();
+        if (_deleteOnClose)
+            deleteLater();
+        else
+            _window->hide();
+        return true;
+    case QEvent::Resize:
+        emit sizeChanged();
+        emit widthChanged();
+        emit heightChanged();
+        break;
+
+    case QEvent::Move:
+        emit xChanged();
+        emit yChanged();
+        break;
+
+    default:
+        break;
+    }
+    return false;
+}
+
+void QWindowItem::registerChildWindow(QWindowItem *child) {
+    _window->registerChildWindow(child->window());
+}
+
+void QWindowItem::updateParentWindow() {
+#if QT_VERSION < 0x050000
+    QDeclarativeItem *p = parentItem();
+#else
+    QQuickItem *p = parentItem();
+#endif
+    while (p) {
+        if (QWindowItem *w = qobject_cast<QWindowItem*>(p)) {
+            w->registerChildWindow(this);
+            return;
+        }
+        p = p->parentItem();
+    }
+}
+
+void QWindowItem::componentComplete()
+{
+    updateParentWindow();
+#if QT_VERSION < 0x050000
+    _window->scene()->addItem(this);
+    if (!_window->parentWidget())
+        _window->initPosition();
+    QDeclarativeItem::componentComplete();
+#else
+    this->setParentItem(_window->view()->rootItem());
+    if (_window->isTopLevel())
+        _window->initPosition();
+    QQuickItem::componentComplete();
+#endif
+    if (_delayedVisible) {
+        setVisible(true);
+    }
+}
+
+void QWindowItem::updateSize(QSize newSize)
+{
+#if QT_VERSION < 0x050000
+    QDeclarativeItem::setSize(newSize);
+#else
+    QQuickItem::setSize(newSize);
+#endif
+    emit sizeChanged();
+}
+
+void QWindowItem::center()
+{
+    _window->center();
+}
+
+void QWindowItem::setX(int x)
+{
+    _x = x;
+    _window->move(x, _y);
+}
+void QWindowItem::setY(int y)
+{
+    _y = y;
+    _window->move(_x, y);
+}
+
+void QWindowItem::moveWindow(int x,int y, int lx, int ly)
+{
+    QPoint p = _window->mapToGlobal(QPoint(x,y));
+    p.setX(p.x() - lx);
+    p.setY(p.y() - ly);
+    _window->move(p);
+}
+
+void QWindowItem::setHeight(int height)
+{
+#if QT_VERSION < 0x050000
+    int menuBarHeight = _window->menuBar()->sizeHint().height();
+    if (menuBarHeight) menuBarHeight++;
+    _window->resize(width(), height+menuBarHeight);
+    QDeclarativeItem::setHeight(_window->height());
+#else
+    _window->resize(width(), height);
+    QQuickItem::setHeight(_window->height());
+#endif
+}
+
+void QWindowItem::setMinimumHeight(int height)
+{
+#if QT_VERSION < 0x050000
+    int menuBarHeight = _window->menuBar()->sizeHint().height();
+    if (menuBarHeight) menuBarHeight++;
+    _window->setMinimumHeight(height+menuBarHeight);
+#else
+    _window->setMinimumSize(QSize(_window->minimumSize().width(), height));
+#endif
+}
+
+void QWindowItem::setMaximumHeight(int height)
+{
+#if QT_VERSION < 0x050000
+    int menuBarHeight = _window->menuBar()->sizeHint().height();
+    if (menuBarHeight) menuBarHeight++;
+    _window->setMaximumHeight(height+menuBarHeight);
+#else
+    _window->setMaximumSize(QSize(_window->maximumSize().width(), height));
+#endif
+}
+
+void QWindowItem::setWidth(int width)
+{
+    _window->resize(width, height());
+#if QT_VERSION < 0x050000
+    QDeclarativeItem::setWidth(_window->width());
+#else
+    QQuickItem::setWidth(_window->width());
+#endif
+}
+
+void QWindowItem::setMinimumWidth(int width)
+{
+#if QT_VERSION < 0x050000
+    _window->setMinimumWidth(width);
+#else
+    _window->setMinimumSize(QSize(width, _window->minimumSize().height()));
+#endif
+}
+
+void QWindowItem::setMaximumWidth(int width)
+{
+#if QT_VERSION < 0x050000
+    _window->setMaximumWidth(width);
+#else
+    _window->setMinimumSize(QSize(width, _window->maximumSize().height()));
+#endif
+}
+
+void QWindowItem::setTitle(QString title)
+{
+    _window->setWindowTitle(title);
+    emit titleChanged();
+}
+
+void QWindowItem::setVisible(bool visible)
+{
+    _window->setWindowFlags(_window->windowFlags() | Qt::Window);
+    if (visible) {
+        if (isComponentComplete()) {
+            // avoid flickering when showing the widget,
+            // by passing the event loop at least once
+            QTimer::singleShot(1, _window, SLOT(show()));
+        } else {
+            _delayedVisible = true;
+        }
+    } else {
+        _window->hide();
+    }
+}
+
+void QWindowItem::setWindowDecoration(bool s)
+{
+    bool visible = _window->isVisible();
+
+
+    _window->setWindowFlags(s ? _window->windowFlags() & ~Qt::FramelessWindowHint
+                              : _window->windowFlags() | Qt::FramelessWindowHint);
+    if (visible)
+        _window->show();
+    emit windowDecorationChanged();
+}
+
+void QWindowItem::setModal(bool modal)
+{
+    bool visible = _window->isVisible();
+    _window->hide();
+    _window->setWindowModality(modal ? Qt::WindowModal : Qt::NonModal);
+
+    if (visible)
+        _window->show();
+    emit modalityChanged();
+}
+
+void QWindowItem::setDeleteOnClose(bool deleteOnClose)
+{
+    if (deleteOnClose == _deleteOnClose)
+        return;
+    _deleteOnClose = deleteOnClose;
+    emit deleteOnCloseChanged();
+}
+
+void QWindowItem::close()
+{
+    if (_deleteOnClose)
+        deleteLater();
+    else
+        _window->hide();
+}
diff --git a/src/qwindowitem.h b/src/qwindowitem.h
new file mode 100644
index 0000000..347327f
--- /dev/null
+++ b/src/qwindowitem.h
@@ -0,0 +1,152 @@
+/****************************************************************************
+**
+** Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
+** All rights reserved.
+** Contact: Nokia Corporation (qt-info@nokia.com)
+**
+** This file is part of the Qt Components project on Qt Labs.
+**
+** No Commercial Usage
+** This file contains pre-release code and may not be distributed.
+** You may use this file in accordance with the terms and conditions contained
+** in the Technology Preview License Agreement accompanying this package.
+**
+** GNU Lesser General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU Lesser
+** General Public License version 2.1 as published by the Free Software
+** Foundation and appearing in the file LICENSE.LGPL included in the
+** packaging of this file.  Please review the following information to
+** ensure the GNU Lesser General Public License version 2.1 requirements
+** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** If you have questions regarding the use of this file, please contact
+** Nokia at qt-info@nokia.com.
+**
+****************************************************************************/
+
+#ifndef QWindowItem_H
+#define QWindowItem_H
+
+#include "qtoplevelwindow.h"
+
+#include <QtGui/QGuiApplication>
+#if QT_VERSION < 0x050000
+#include <QDeclarativeItem>
+#include <QDeclarativeView>
+#else
+#include <QtQuick/QQuickItem>
+#include <QtQuick/QQuickView>
+#endif
+#include <QMenuBar>
+
+#if QT_VERSION < 0x050000
+class QWindowItem : public QDeclarativeItem
+#else
+class QWindowItem : public QQuickItem
+#endif
+{
+    Q_OBJECT
+    Q_PROPERTY(int x READ x WRITE setX NOTIFY xChanged)
+    Q_PROPERTY(int y READ y WRITE setY NOTIFY yChanged)
+    Q_PROPERTY(int height READ height WRITE setHeight NOTIFY sizeChanged)
+    Q_PROPERTY(int width READ width WRITE setWidth NOTIFY sizeChanged)
+    Q_PROPERTY(int minimumHeight READ minimumHeight WRITE setMinimumHeight NOTIFY minimumHeightChanged)
+    Q_PROPERTY(int maximumHeight READ maximumHeight WRITE setMaximumHeight NOTIFY maximumHeightChanged)
+    Q_PROPERTY(int minimumWidth READ minimumWidth WRITE setMinimumWidth NOTIFY minimumWidthChanged)
+    Q_PROPERTY(int maximumWidth READ maximumWidth WRITE setMaximumWidth NOTIFY maximumWidthChanged)
+    Q_PROPERTY(bool visible READ isVisible WRITE setVisible NOTIFY visibleChanged)
+    Q_PROPERTY(bool windowDecoration READ windowDecoration WRITE setWindowDecoration NOTIFY windowDecorationChanged)
+    Q_PROPERTY(bool modal READ modal WRITE setModal NOTIFY modalityChanged)
+    Q_PROPERTY(bool deleteOnClose READ deleteOnClose WRITE setDeleteOnClose NOTIFY deleteOnCloseChanged)
+    Q_PROPERTY(Qt::WindowState windowState READ windowState WRITE setWindowState NOTIFY windowStateChanged)
+    Q_PROPERTY(QString title READ title WRITE setTitle NOTIFY titleChanged)
+
+public:
+    QWindowItem();
+    ~QWindowItem();
+    QTopLevelWindow *window() { return _window; }
+#if QT_VERSION < 0x050000
+    QDeclarativeView *view() { return _window->view(); }
+#else
+    QQuickView *view() { return _window->view(); }
+#endif
+    int x() const { return _window->x(); }
+    int y() const { return _window->y(); }
+#if QT_VERSION < 0x050000
+    int height() const { return _window->height(); }
+    int minimumHeight() const { return _window->minimumHeight(); }
+    int maximumHeight() const { return _window->maximumHeight(); }
+    int width() const { return _window->width(); }
+    int minimumWidth() const { return _window->minimumWidth(); }
+    int maximumWidth() const { return _window->maximumWidth(); }
+#else
+    int height() const { return _window->size().height(); }
+    int minimumHeight() const { return _window->minimumSize().height(); }
+    int maximumHeight() const { return _window->maximumSize().height(); }
+    int width() const { return _window->size().width(); }
+    int minimumWidth() const { return _window->minimumSize().width(); }
+    int maximumWidth() const { return _window->maximumSize().width(); }
+#endif
+    bool isVisible() const { return _window->isVisible(); }
+    bool windowDecoration() const { return !(_window->windowFlags() & Qt::FramelessWindowHint); }
+    Qt::WindowState windowState() const { return static_cast<Qt::WindowState>(static_cast<int>(_window->windowState()) & ~Qt::WindowActive); }
+    QString title() const { return _window->windowTitle(); }
+    bool deleteOnClose() const { return _deleteOnClose; }
+    bool modal() const { return _window->isModal(); }
+
+    void setX(int x);
+    void setY(int y);
+
+    void setHeight(int height);
+    void setMinimumHeight(int height);
+    void setMaximumHeight(int height);
+    void setWidth(int width);
+    void setMinimumWidth(int width);
+    void setMaximumWidth(int width);
+    void setVisible(bool visible);
+    void setWindowDecoration(bool s);
+    void setWindowState(Qt::WindowState state) { _window->setWindowState(state); }
+    void setTitle(QString title);
+    void setModal(bool modal);
+    void setDeleteOnClose(bool close);
+
+public Q_SLOTS:
+    void close();
+
+protected:
+    bool eventFilter(QObject *, QEvent *ev);
+    void updateParentWindow();
+    void registerChildWindow(QWindowItem* child);
+    void componentComplete();
+
+protected Q_SLOTS:
+    void updateSize(QSize newSize);
+    void center();
+    void moveWindow(int x, int y, int lx, int ly);
+
+Q_SIGNALS:
+    void sizeChanged();
+    void xChanged();
+    void yChanged();
+    void visibleChanged();
+    void windowDecorationChanged();
+    void windowStateChanged();
+    void minimumHeightChanged();
+    void minimumWidthChanged();
+    void maximumHeightChanged();
+    void maximumWidthChanged();
+    void titleChanged();
+    void modalityChanged();
+    void deleteOnCloseChanged();
+
+private:
+    QTopLevelWindow *_window;
+    bool _complete;
+    bool _positionIsDefined;
+    bool _delayedVisible;
+    bool _deleteOnClose;
+    int _x;
+    int _y;
+};
+
+#endif // QWindowItem_H
diff --git a/src/qwindowwidget.cpp b/src/qwindowwidget.cpp
new file mode 100644
index 0000000..a505408
--- /dev/null
+++ b/src/qwindowwidget.cpp
@@ -0,0 +1,45 @@
+#include "qwindowwidget.h"
+#include <QtCore/qdebug.h>
+#include <QtGui/qevent.h>
+
+QWindowWidget::QWindowWidget()
+    :m_EmbeddedWindow(0)
+{
+
+}
+
+void QWindowWidget::setEmbeddedWindow(QWindow *window)
+{
+    m_EmbeddedWindow = window;
+
+    this->window()->winId(); // force parent (top-level) creation
+    m_EmbeddedWindow->setParent(this->window()->windowHandle());
+}
+
+QWindow *QWindowWidget::embeddedWindow() const
+{
+    return m_EmbeddedWindow;
+}
+
+bool QWindowWidget::event(QEvent *event) {
+    switch (event->type()) {
+        case QEvent::Show:
+            m_EmbeddedWindow->show();
+            break;
+        case QEvent::Hide:
+            m_EmbeddedWindow->hide();
+            break;
+        case QEvent::Resize: {
+            QResizeEvent *resize = static_cast<QResizeEvent *>(event);
+            // qDebug() << "\n" << this << "resize current geom" << m_EmbeddedWindow->geometry() ;
+            // qDebug() << "newsize" << resize->size();
+
+            // Propagate resize, force pos to (0,0).
+            m_EmbeddedWindow->setGeometry(QRect(QPoint(), resize->size()));
+            break;
+        }
+        default: break;
+    }
+    return QWidget::event(event);
+}
+
diff --git a/src/qwindowwidget.h b/src/qwindowwidget.h
new file mode 100644
index 0000000..b5b27d9
--- /dev/null
+++ b/src/qwindowwidget.h
@@ -0,0 +1,54 @@
+/****************************************************************************
+**
+** Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
+** All rights reserved.
+** Contact: Nokia Corporation (qt-info@nokia.com)
+**
+** This file is part of the Qt Components project on Qt Labs.
+**
+** No Commercial Usage
+** This file contains pre-release code and may not be distributed.
+** You may use this file in accordance with the terms and conditions contained
+** in the Technology Preview License Agreement accompanying this package.
+**
+** GNU Lesser General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU Lesser
+** General Public License version 2.1 as published by the Free Software
+** Foundation and appearing in the file LICENSE.LGPL included in the
+** packaging of this file.  Please review the following information to
+** ensure the GNU Lesser General Public License version 2.1 requirements
+** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** If you have questions regarding the use of this file, please contact
+** Nokia at qt-info@nokia.com.
+**
+****************************************************************************/
+
+#ifndef QWINDOWWIDGET_H
+#define QWINDOWWIDGET_H
+
+#include <QtCore/qglobal.h>
+#include <QtWidgets/QWidget>
+#include <QtGui/QWindow>
+
+//
+// QWindowWidget supports embedding a QWindow in a QWidget hierarchy,
+// making the QWindow geometry track the QWidget geometry.
+//
+// This class has one major limitation: the embedded QWindow has a
+// native (non-toplevel) window surface which is overlayed the QWidget
+// hierarchy. This means that "complex" configurations like placing
+// placing the QWindowWidget in a scroll area will most likely not work.
+//
+class QWindowWidget : public QWidget
+{
+public:
+    QWindowWidget();
+    void setEmbeddedWindow(QWindow *embeddedWindow);
+    QWindow *embeddedWindow() const;
+    bool event(QEvent *event);
+private:
+    QWindow *m_EmbeddedWindow;
+};
+
+#endif // QWIDGETWINDOW_H
diff --git a/src/src.pro b/src/src.pro
index 646daeb..b3336a2 100644
--- a/src/src.pro
+++ b/src/src.pro
@@ -16,7 +16,9 @@ HEADERS += qrangemodel_p.h \
            qdeclarativefolderlistmodel.h \
            qstyleitem.h \
            qwheelarea.h \
+           qwindowitem.h \
            qdesktopitem.h \
+           qtoplevelwindow.h \
            qcursorarea.h \
            qtooltiparea.h \
     qtsplitterbase.h
@@ -26,11 +28,17 @@ SOURCES += qrangemodel.cpp \
            qdeclarativefolderlistmodel.cpp \
            qstyleitem.cpp \
            qwheelarea.cpp \
+           qwindowitem.cpp \
            qdesktopitem.cpp \
+           qtoplevelwindow.cpp \
            qcursorarea.cpp \
            qtooltiparea.cpp \
     qtsplitterbase.cpp
 
+### Qt 5 only
+HEADERS += qwindowwidget.h
+SOURCES += qwindowwidget.cpp
+
 TARGETPATH = QtDesktop/plugin
 
 target.path = $$[QT_INSTALL_IMPORTS]/$$TARGETPATH