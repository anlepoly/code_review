diff --git a/src/declarative/debugger/qdeclarativedebugserver.cpp b/src/declarative/debugger/qdeclarativedebugserver.cpp
index c0fd798..ab7f308 100644
--- a/src/declarative/debugger/qdeclarativedebugserver.cpp
+++ b/src/declarative/debugger/qdeclarativedebugserver.cpp
@@ -190,7 +190,7 @@ QDeclarativeDebugServer *QDeclarativeDebugServer::instance()
             if (appD->qmljsDebugArgumentsString().indexOf(QLatin1String("port:")) == 0) {
                 int separatorIndex = appD->qmljsDebugArgumentsString().indexOf(QLatin1Char(','));
                 port = appD->qmljsDebugArgumentsString().mid(5, separatorIndex - 5).toInt(&ok);
-                pluginName = QLatin1String("qmldbg_tcp");
+                pluginName = QLatin1String("qmldbg_tcp_qtquick1");
             } else if (appD->qmljsDebugArgumentsString().contains(QLatin1String("ost"))) {
                 pluginName = QLatin1String("qmldbg_ost");
                 ok = true;
diff --git a/src/plugins/qmltooling/qmldbg_tcp/qmldbg_tcp.pro b/src/plugins/qmltooling/qmldbg_tcp/qmldbg_tcp.pro
deleted file mode 100644
index a224792..0000000
--- a/src/plugins/qmltooling/qmldbg_tcp/qmldbg_tcp.pro
+++ /dev/null
@@ -1,19 +0,0 @@
-TARGET = qmldbg_tcp
-QT       += quick1 quick1-private network
-
-load(qt_plugin)
-
-DESTDIR  = $$QT.quick1.plugins/qmltooling
-
-SOURCES += \
-    qtcpserverconnection.cpp
-
-HEADERS += \
-    qtcpserverconnection.h
-
-OTHER_FILES += qtcpserverconnection.json
-
-target.path += $$[QT_INSTALL_PLUGINS]/qmltooling
-INSTALLS += target
-
-symbian:TARGET.UID3=0x20031E90
diff --git a/src/plugins/qmltooling/qmldbg_tcp/qtcpserverconnection.cpp b/src/plugins/qmltooling/qmldbg_tcp/qtcpserverconnection.cpp
deleted file mode 100644
index 2df3199..0000000
--- a/src/plugins/qmltooling/qmldbg_tcp/qtcpserverconnection.cpp
+++ /dev/null
@@ -1,197 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/
-**
-** This file is part of the QtDeclarative module of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:LGPL$
-** GNU Lesser General Public License Usage
-** This file may be used under the terms of the GNU Lesser General Public
-** License version 2.1 as published by the Free Software Foundation and
-** appearing in the file LICENSE.LGPL included in the packaging of this
-** file. Please review the following information to ensure the GNU Lesser
-** General Public License version 2.1 requirements will be met:
-** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
-**
-** In addition, as a special exception, Nokia gives you certain additional
-** rights. These rights are described in the Nokia Qt LGPL Exception
-** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
-**
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU General
-** Public License version 3.0 as published by the Free Software Foundation
-** and appearing in the file LICENSE.GPL included in the packaging of this
-** file. Please review the following information to ensure the GNU General
-** Public License version 3.0 requirements will be met:
-** http://www.gnu.org/copyleft/gpl.html.
-**
-** Other Usage
-** Alternatively, this file may be used in accordance with the terms and
-** conditions contained in a signed written agreement between you and Nokia.
-**
-**
-**
-**
-**
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-#include "qtcpserverconnection.h"
-
-#include <QtCore/qplugin.h>
-#include <QtNetwork/qtcpserver.h>
-#include <QtNetwork/qtcpsocket.h>
-
-#include <private/qdeclarativedebugserver_p.h>
-#include <private/qpacketprotocol_p.h>
-
-QT_BEGIN_NAMESPACE
-
-class QTcpServerConnectionPrivate {
-public:
-    QTcpServerConnectionPrivate();
-
-    int port;
-    bool block;
-    QTcpSocket *socket;
-    QPacketProtocol *protocol;
-    QTcpServer *tcpServer;
-
-    QDeclarativeDebugServer *debugServer;
-};
-
-QTcpServerConnectionPrivate::QTcpServerConnectionPrivate() :
-    port(0),
-    block(false),
-    socket(0),
-    protocol(0),
-    tcpServer(0),
-    debugServer(0)
-{
-}
-
-QTcpServerConnection::QTcpServerConnection() :
-    d_ptr(new QTcpServerConnectionPrivate)
-{
-
-}
-
-QTcpServerConnection::~QTcpServerConnection()
-{
-    delete d_ptr;
-}
-
-void QTcpServerConnection::setServer(QDeclarativeDebugServer *server)
-{
-    Q_D(QTcpServerConnection);
-    d->debugServer = server;
-}
-
-bool QTcpServerConnection::isConnected() const
-{
-    Q_D(const QTcpServerConnection);
-    return d->socket && d->socket->state() == QTcpSocket::ConnectedState;
-}
-
-void QTcpServerConnection::send(const QList<QByteArray> &messages)
-{
-    Q_D(QTcpServerConnection);
-
-    if (!isConnected()
-            || !d->protocol || !d->socket)
-        return;
-
-    foreach (const QByteArray &message, messages) {
-        QPacket pack;
-        pack.writeRawData(message.data(), message.length());
-        d->protocol->send(pack);
-    }
-    d->socket->flush();
-}
-
-void QTcpServerConnection::disconnect()
-{
-    Q_D(QTcpServerConnection);
-
-    // protocol might still be processing packages at this point
-    d->protocol->deleteLater();
-    d->protocol = 0;
-    d->socket->deleteLater();
-    d->socket = 0;
-}
-
-bool QTcpServerConnection::waitForMessage()
-{
-    Q_D(QTcpServerConnection);
-    if (d->protocol->packetsAvailable() > 0) {
-        QPacket packet = d->protocol->read();
-        d->debugServer->receiveMessage(packet.data());
-        return true;
-    } else {
-        return d->protocol->waitForReadyRead(-1);
-    }
-}
-
-void QTcpServerConnection::setPort(int port, bool block)
-{
-    Q_D(QTcpServerConnection);
-    d->port = port;
-    d->block = block;
-
-    listen();
-    if (block)
-        d->tcpServer->waitForNewConnection(-1);
-}
-
-void QTcpServerConnection::listen()
-{
-    Q_D(QTcpServerConnection);
-
-    d->tcpServer = new QTcpServer(this);
-    QObject::connect(d->tcpServer, SIGNAL(newConnection()), this, SLOT(newConnection()));
-    if (d->tcpServer->listen(QHostAddress::Any, d->port)) {
-        qDebug("QDeclarativeDebugServer: Waiting for connection on port %d...", d->port);
-    } else {
-        qWarning("QDeclarativeDebugServer: Unable to listen on port %d", d->port);
-    }
-}
-
-
-void QTcpServerConnection::readyRead()
-{
-    Q_D(QTcpServerConnection);
-    if (!d->protocol)
-        return;
-
-    while (d->protocol->packetsAvailable() > 0) {
-        QPacket packet = d->protocol->read();
-        d->debugServer->receiveMessage(packet.data());
-    }
-}
-
-void QTcpServerConnection::newConnection()
-{
-    Q_D(QTcpServerConnection);
-
-    if (d->socket) {
-        qWarning("QDeclarativeDebugServer: Another client is already connected");
-        QTcpSocket *faultyConnection = d->tcpServer->nextPendingConnection();
-        delete faultyConnection;
-        return;
-    }
-
-    d->socket = d->tcpServer->nextPendingConnection();
-    d->socket->setParent(this);
-    d->protocol = new QPacketProtocol(d->socket, this);
-    QObject::connect(d->protocol, SIGNAL(readyRead()), this, SLOT(readyRead()));
-
-    if (d->block) {
-        d->protocol->waitForReadyRead(-1);
-    }
-}
-
-QT_END_NAMESPACE
-
diff --git a/src/plugins/qmltooling/qmldbg_tcp/qtcpserverconnection.h b/src/plugins/qmltooling/qmldbg_tcp/qtcpserverconnection.h
deleted file mode 100644
index a5cda10..0000000
--- a/src/plugins/qmltooling/qmldbg_tcp/qtcpserverconnection.h
+++ /dev/null
@@ -1,84 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/
-**
-** This file is part of the QtDeclarative module of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:LGPL$
-** GNU Lesser General Public License Usage
-** This file may be used under the terms of the GNU Lesser General Public
-** License version 2.1 as published by the Free Software Foundation and
-** appearing in the file LICENSE.LGPL included in the packaging of this
-** file. Please review the following information to ensure the GNU Lesser
-** General Public License version 2.1 requirements will be met:
-** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
-**
-** In addition, as a special exception, Nokia gives you certain additional
-** rights. These rights are described in the Nokia Qt LGPL Exception
-** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
-**
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU General
-** Public License version 3.0 as published by the Free Software Foundation
-** and appearing in the file LICENSE.GPL included in the packaging of this
-** file. Please review the following information to ensure the GNU General
-** Public License version 3.0 requirements will be met:
-** http://www.gnu.org/copyleft/gpl.html.
-**
-** Other Usage
-** Alternatively, this file may be used in accordance with the terms and
-** conditions contained in a signed written agreement between you and Nokia.
-**
-**
-**
-**
-**
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-#ifndef QTCPSERVERCONNECTION_H
-#define QTCPSERVERCONNECTION_H
-
-#include <QtQuick1/private/qdeclarativedebugserverconnection_p.h>
-
-QT_BEGIN_NAMESPACE
-
-class QDeclarativeDebugServer;
-class QTcpServerConnectionPrivate;
-class QTcpServerConnection : public QObject, public QDeclarativeDebugServerConnection
-{
-    Q_OBJECT
-    Q_DECLARE_PRIVATE(QTcpServerConnection)
-    Q_DISABLE_COPY(QTcpServerConnection)
-    Q_PLUGIN_METADATA(IID "org.qt-project.Qt.QDeclarativeDebugServerConnection" FILE "qtcpserverconnection.json")
-    Q_INTERFACES(QDeclarativeDebugServerConnection)
-
-public:
-    QTcpServerConnection();
-    ~QTcpServerConnection();
-
-    void setServer(QDeclarativeDebugServer *server);
-    void setPort(int port, bool bock);
-
-    bool isConnected() const;
-    void send(const QList<QByteArray> &messages);
-    void disconnect();
-    bool waitForMessage();
-
-    void listen();
-    void waitForConnection();
-
-private Q_SLOTS:
-    void readyRead();
-    void newConnection();
-
-private:
-    QTcpServerConnectionPrivate *d_ptr;
-};
-
-QT_END_NAMESPACE
-
-#endif // QTCPSERVERCONNECTION_H
diff --git a/src/plugins/qmltooling/qmldbg_tcp/qtcpserverconnection.json b/src/plugins/qmltooling/qmldbg_tcp/qtcpserverconnection.json
deleted file mode 100644
index 0967ef4..0000000
--- a/src/plugins/qmltooling/qmldbg_tcp/qtcpserverconnection.json
+++ /dev/null
@@ -1 +0,0 @@
-{}
diff --git a/src/plugins/qmltooling/qmldbg_tcp_qtquick1/qmldbg_tcp_qtquick1.pro b/src/plugins/qmltooling/qmldbg_tcp_qtquick1/qmldbg_tcp_qtquick1.pro
new file mode 100644
index 0000000..ea52c06
--- /dev/null
+++ b/src/plugins/qmltooling/qmldbg_tcp_qtquick1/qmldbg_tcp_qtquick1.pro
@@ -0,0 +1,19 @@
+TARGET = qmldbg_tcp_qtquick1
+QT       += quick1 quick1-private network
+
+load(qt_plugin)
+
+DESTDIR  = $$QT.quick1.plugins/qmltooling
+
+SOURCES += \
+    qtcpserverconnection.cpp
+
+HEADERS += \
+    qtcpserverconnection.h
+
+OTHER_FILES += qtcpserverconnection.json
+
+target.path += $$[QT_INSTALL_PLUGINS]/qmltooling
+INSTALLS += target
+
+symbian:TARGET.UID3=0x20031E90
diff --git a/src/plugins/qmltooling/qmldbg_tcp_qtquick1/qtcpserverconnection.cpp b/src/plugins/qmltooling/qmldbg_tcp_qtquick1/qtcpserverconnection.cpp
new file mode 100644
index 0000000..2df3199
--- /dev/null
+++ b/src/plugins/qmltooling/qmldbg_tcp_qtquick1/qtcpserverconnection.cpp
@@ -0,0 +1,197 @@
+/****************************************************************************
+**
+** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/
+**
+** This file is part of the QtDeclarative module of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** GNU Lesser General Public License Usage
+** This file may be used under the terms of the GNU Lesser General Public
+** License version 2.1 as published by the Free Software Foundation and
+** appearing in the file LICENSE.LGPL included in the packaging of this
+** file. Please review the following information to ensure the GNU Lesser
+** General Public License version 2.1 requirements will be met:
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** In addition, as a special exception, Nokia gives you certain additional
+** rights. These rights are described in the Nokia Qt LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU General
+** Public License version 3.0 as published by the Free Software Foundation
+** and appearing in the file LICENSE.GPL included in the packaging of this
+** file. Please review the following information to ensure the GNU General
+** Public License version 3.0 requirements will be met:
+** http://www.gnu.org/copyleft/gpl.html.
+**
+** Other Usage
+** Alternatively, this file may be used in accordance with the terms and
+** conditions contained in a signed written agreement between you and Nokia.
+**
+**
+**
+**
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#include "qtcpserverconnection.h"
+
+#include <QtCore/qplugin.h>
+#include <QtNetwork/qtcpserver.h>
+#include <QtNetwork/qtcpsocket.h>
+
+#include <private/qdeclarativedebugserver_p.h>
+#include <private/qpacketprotocol_p.h>
+
+QT_BEGIN_NAMESPACE
+
+class QTcpServerConnectionPrivate {
+public:
+    QTcpServerConnectionPrivate();
+
+    int port;
+    bool block;
+    QTcpSocket *socket;
+    QPacketProtocol *protocol;
+    QTcpServer *tcpServer;
+
+    QDeclarativeDebugServer *debugServer;
+};
+
+QTcpServerConnectionPrivate::QTcpServerConnectionPrivate() :
+    port(0),
+    block(false),
+    socket(0),
+    protocol(0),
+    tcpServer(0),
+    debugServer(0)
+{
+}
+
+QTcpServerConnection::QTcpServerConnection() :
+    d_ptr(new QTcpServerConnectionPrivate)
+{
+
+}
+
+QTcpServerConnection::~QTcpServerConnection()
+{
+    delete d_ptr;
+}
+
+void QTcpServerConnection::setServer(QDeclarativeDebugServer *server)
+{
+    Q_D(QTcpServerConnection);
+    d->debugServer = server;
+}
+
+bool QTcpServerConnection::isConnected() const
+{
+    Q_D(const QTcpServerConnection);
+    return d->socket && d->socket->state() == QTcpSocket::ConnectedState;
+}
+
+void QTcpServerConnection::send(const QList<QByteArray> &messages)
+{
+    Q_D(QTcpServerConnection);
+
+    if (!isConnected()
+            || !d->protocol || !d->socket)
+        return;
+
+    foreach (const QByteArray &message, messages) {
+        QPacket pack;
+        pack.writeRawData(message.data(), message.length());
+        d->protocol->send(pack);
+    }
+    d->socket->flush();
+}
+
+void QTcpServerConnection::disconnect()
+{
+    Q_D(QTcpServerConnection);
+
+    // protocol might still be processing packages at this point
+    d->protocol->deleteLater();
+    d->protocol = 0;
+    d->socket->deleteLater();
+    d->socket = 0;
+}
+
+bool QTcpServerConnection::waitForMessage()
+{
+    Q_D(QTcpServerConnection);
+    if (d->protocol->packetsAvailable() > 0) {
+        QPacket packet = d->protocol->read();
+        d->debugServer->receiveMessage(packet.data());
+        return true;
+    } else {
+        return d->protocol->waitForReadyRead(-1);
+    }
+}
+
+void QTcpServerConnection::setPort(int port, bool block)
+{
+    Q_D(QTcpServerConnection);
+    d->port = port;
+    d->block = block;
+
+    listen();
+    if (block)
+        d->tcpServer->waitForNewConnection(-1);
+}
+
+void QTcpServerConnection::listen()
+{
+    Q_D(QTcpServerConnection);
+
+    d->tcpServer = new QTcpServer(this);
+    QObject::connect(d->tcpServer, SIGNAL(newConnection()), this, SLOT(newConnection()));
+    if (d->tcpServer->listen(QHostAddress::Any, d->port)) {
+        qDebug("QDeclarativeDebugServer: Waiting for connection on port %d...", d->port);
+    } else {
+        qWarning("QDeclarativeDebugServer: Unable to listen on port %d", d->port);
+    }
+}
+
+
+void QTcpServerConnection::readyRead()
+{
+    Q_D(QTcpServerConnection);
+    if (!d->protocol)
+        return;
+
+    while (d->protocol->packetsAvailable() > 0) {
+        QPacket packet = d->protocol->read();
+        d->debugServer->receiveMessage(packet.data());
+    }
+}
+
+void QTcpServerConnection::newConnection()
+{
+    Q_D(QTcpServerConnection);
+
+    if (d->socket) {
+        qWarning("QDeclarativeDebugServer: Another client is already connected");
+        QTcpSocket *faultyConnection = d->tcpServer->nextPendingConnection();
+        delete faultyConnection;
+        return;
+    }
+
+    d->socket = d->tcpServer->nextPendingConnection();
+    d->socket->setParent(this);
+    d->protocol = new QPacketProtocol(d->socket, this);
+    QObject::connect(d->protocol, SIGNAL(readyRead()), this, SLOT(readyRead()));
+
+    if (d->block) {
+        d->protocol->waitForReadyRead(-1);
+    }
+}
+
+QT_END_NAMESPACE
+
diff --git a/src/plugins/qmltooling/qmldbg_tcp_qtquick1/qtcpserverconnection.h b/src/plugins/qmltooling/qmldbg_tcp_qtquick1/qtcpserverconnection.h
new file mode 100644
index 0000000..a5cda10
--- /dev/null
+++ b/src/plugins/qmltooling/qmldbg_tcp_qtquick1/qtcpserverconnection.h
@@ -0,0 +1,84 @@
+/****************************************************************************
+**
+** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/
+**
+** This file is part of the QtDeclarative module of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** GNU Lesser General Public License Usage
+** This file may be used under the terms of the GNU Lesser General Public
+** License version 2.1 as published by the Free Software Foundation and
+** appearing in the file LICENSE.LGPL included in the packaging of this
+** file. Please review the following information to ensure the GNU Lesser
+** General Public License version 2.1 requirements will be met:
+** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** In addition, as a special exception, Nokia gives you certain additional
+** rights. These rights are described in the Nokia Qt LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU General
+** Public License version 3.0 as published by the Free Software Foundation
+** and appearing in the file LICENSE.GPL included in the packaging of this
+** file. Please review the following information to ensure the GNU General
+** Public License version 3.0 requirements will be met:
+** http://www.gnu.org/copyleft/gpl.html.
+**
+** Other Usage
+** Alternatively, this file may be used in accordance with the terms and
+** conditions contained in a signed written agreement between you and Nokia.
+**
+**
+**
+**
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#ifndef QTCPSERVERCONNECTION_H
+#define QTCPSERVERCONNECTION_H
+
+#include <QtQuick1/private/qdeclarativedebugserverconnection_p.h>
+
+QT_BEGIN_NAMESPACE
+
+class QDeclarativeDebugServer;
+class QTcpServerConnectionPrivate;
+class QTcpServerConnection : public QObject, public QDeclarativeDebugServerConnection
+{
+    Q_OBJECT
+    Q_DECLARE_PRIVATE(QTcpServerConnection)
+    Q_DISABLE_COPY(QTcpServerConnection)
+    Q_PLUGIN_METADATA(IID "org.qt-project.Qt.QDeclarativeDebugServerConnection" FILE "qtcpserverconnection.json")
+    Q_INTERFACES(QDeclarativeDebugServerConnection)
+
+public:
+    QTcpServerConnection();
+    ~QTcpServerConnection();
+
+    void setServer(QDeclarativeDebugServer *server);
+    void setPort(int port, bool bock);
+
+    bool isConnected() const;
+    void send(const QList<QByteArray> &messages);
+    void disconnect();
+    bool waitForMessage();
+
+    void listen();
+    void waitForConnection();
+
+private Q_SLOTS:
+    void readyRead();
+    void newConnection();
+
+private:
+    QTcpServerConnectionPrivate *d_ptr;
+};
+
+QT_END_NAMESPACE
+
+#endif // QTCPSERVERCONNECTION_H
diff --git a/src/plugins/qmltooling/qmldbg_tcp_qtquick1/qtcpserverconnection.json b/src/plugins/qmltooling/qmldbg_tcp_qtquick1/qtcpserverconnection.json
new file mode 100644
index 0000000..0967ef4
--- /dev/null
+++ b/src/plugins/qmltooling/qmldbg_tcp_qtquick1/qtcpserverconnection.json
@@ -0,0 +1 @@
+{}
diff --git a/src/plugins/qmltooling/qmltooling.pro b/src/plugins/qmltooling/qmltooling.pro
index e495c81..274073e 100644
--- a/src/plugins/qmltooling/qmltooling.pro
+++ b/src/plugins/qmltooling/qmltooling.pro
@@ -1,5 +1,3 @@
 TEMPLATE = subdirs
 
-SUBDIRS = qmldbg_inspector
-
-!contains(QT_CONFIG, qml): SUBDIRS +=  qmldbg_tcp
+SUBDIRS = qmldbg_inspector qmldbg_tcp_qtquick1