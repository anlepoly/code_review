diff --git a/src/plugins/script/qtdbus/main.cpp b/src/plugins/script/qtdbus/main.cpp
index fd93579..a1e4b99 100644
--- a/src/plugins/script/qtdbus/main.cpp
+++ b/src/plugins/script/qtdbus/main.cpp
@@ -122,7 +122,7 @@ static QScriptValue setupDBusInterface(QScriptEngine *engine, QDBusAbstractInter
                 continue;
 
             QScriptValue callWrapper = engine->newFunction(do_dbus_call);
-            const QString nameString = QString::fromAscii(name);
+            const QString nameString = QString::fromLatin1(name);
             callWrapper.setProperty(QLatin1String("functionName"), QScriptValue(engine, nameString));
             v.setProperty(nameString, callWrapper);
         }
diff --git a/src/script/api/qscriptvalue.cpp b/src/script/api/qscriptvalue.cpp
index d73405e..45e164c 100644
--- a/src/script/api/qscriptvalue.cpp
+++ b/src/script/api/qscriptvalue.cpp
@@ -333,7 +333,7 @@ QScriptValue::QScriptValue(QScriptEngine *engine, const char *val)
         JSC::ExecState *exec = d_ptr->engine->currentFrame;
         d_ptr->initFrom(JSC::jsString(exec, val));
     } else {
-        d_ptr->initFrom(QString::fromAscii(val));
+        d_ptr->initFrom(QString::fromLatin1(val));
     }
 }
 #endif
@@ -432,7 +432,7 @@ QScriptValue::QScriptValue(const QLatin1String &value)
 QScriptValue::QScriptValue(const char *value)
     : d_ptr(new (/*engine=*/0)QScriptValuePrivate(/*engine=*/0))
 {
-    d_ptr->initFrom(QString::fromAscii(value));
+    d_ptr->initFrom(QString::fromLatin1(value));
 }
 #endif
 
diff --git a/src/scripttools/debugging/qscriptsyntaxhighlighter.cpp b/src/scripttools/debugging/qscriptsyntaxhighlighter.cpp
index e3b7773..722cc00 100644
--- a/src/scripttools/debugging/qscriptsyntaxhighlighter.cpp
+++ b/src/scripttools/debugging/qscriptsyntaxhighlighter.cpp
@@ -242,7 +242,7 @@ void QScriptSyntaxHighlighter::highlightBlock(const QString &text)
         if (lastWasBackSlash) {
             input = InputSep;
         } else {
-            switch (c.toAscii()) {
+            switch (c.toLatin1()) {
                 case '*':
                     input = InputAsterix;
                     break;
diff --git a/tests/auto/qscriptvaluegenerated/testgen/testgenerator.cpp b/tests/auto/qscriptvaluegenerated/testgen/testgenerator.cpp
index 681c18e..7458a8a 100644
--- a/tests/auto/qscriptvaluegenerated/testgen/testgenerator.cpp
+++ b/tests/auto/qscriptvaluegenerated/testgen/testgenerator.cpp
@@ -69,7 +69,7 @@ static QString escape(QString txt)
 }
 
 template<typename T>
-QString prepareToInsert(T value) {return QString::fromAscii("\"") + escape(value) + "\"";}
+QString prepareToInsert(T value) {return QString::fromLatin1("\"") + escape(value) + "\"";}
 template<>
 QString prepareToInsert<qsreal>(qsreal value)
 {
@@ -88,7 +88,7 @@ QString prepareToInsert<quint16>(quint16 value) {return QString::number(value);}
 template<>
 QString prepareToInsert<bool>(bool value) {return value ? "true" : "false";}
 template<>
-QString prepareToInsert<QString>(QString value) {return QString::fromAscii("\"") + escape(value) + "\"";}
+QString prepareToInsert<QString>(QString value) {return QString::fromLatin1("\"") + escape(value) + "\"";}
 
 template<typename T>
 QString typeName() {return QString();}
@@ -246,15 +246,15 @@ static QString generateToXXXDef(const QString& name, const QList<QPair<QString,
         t.first = escape(t.first);
         if (!valueSet.isEmpty()) {
             valueSet.append(QString(","));
-            tagSet.append(QString::fromAscii(","));
+            tagSet.append(QString::fromLatin1(","));
         }
         tagSet.append(QString("\n    \""));
         tagSet.append(t.first);
-        tagSet.append(QString::fromAscii("\""));
+        tagSet.append(QString::fromLatin1("\""));
         if (!((lineBreaker++)%2))
             valueSet.append(QString("\n    "));
         else
-            valueSet.append(QString::fromAscii(" "));
+            valueSet.append(QString::fromLatin1(" "));
         valueSet.append(prepareToInsert<T>(t.second));
     }
     return result.arg(name,
@@ -313,15 +313,15 @@ QString generateToXXXDef<qsreal>(const QString& name, const QList<QPair<QString,
         t.first = escape(t.first);
         if (!valueSet.isEmpty()) {
             valueSet.append(QString(","));
-            tagSet.append(QString::fromAscii(","));
+            tagSet.append(QString::fromLatin1(","));
         }
         tagSet.append(QString("\n    \""));
         tagSet.append(t.first);
-        tagSet.append(QString::fromAscii("\""));
+        tagSet.append(QString::fromLatin1("\""));
         if (!((lineBreaker++)%10))
             valueSet.append(QString("\n    "));
         else
-            valueSet.append(QString::fromAscii(" "));
+            valueSet.append(QString::fromLatin1(" "));
         valueSet.append(prepareToInsert<qsreal>(t.second));
     }
 
@@ -384,15 +384,15 @@ static QString generateCastDef(const QList<QPair<QString, T> >& list)
         t.first = escape(t.first);
         if (!valueSet.isEmpty()) {
             valueSet.append(QString(","));
-            tagSet.append(QString::fromAscii(","));
+            tagSet.append(QString::fromLatin1(","));
         }
         tagSet.append(QString("\n    \""));
         tagSet.append(t.first);
-        tagSet.append(QString::fromAscii("\""));
+        tagSet.append(QString::fromLatin1("\""));
         if (!((lineBreaker++)%2))
             valueSet.append(QString("\n    "));
         else
-            valueSet.append(QString::fromAscii(" "));
+            valueSet.append(QString::fromLatin1(" "));
         valueSet.append(prepareToInsert<T>(t.second));
     }
     return result.arg(typeName<T>(), tagSet.join(QString()), valueSet.join(QString()), QString::number(list.count()));
@@ -450,15 +450,15 @@ QString generateCastDef<qsreal>(const QList<QPair<QString, qsreal> >& list)
         t.first = escape(t.first);
         if (!valueSet.isEmpty()) {
             valueSet.append(QString(","));
-            tagSet.append(QString::fromAscii(","));
+            tagSet.append(QString::fromLatin1(","));
         }
         tagSet.append(QString("\n    \""));
         tagSet.append(t.first);
-        tagSet.append(QString::fromAscii("\""));
+        tagSet.append(QString::fromLatin1("\""));
         if (!((lineBreaker++)%10))
             valueSet.append(QString("\n    "));
         else
-            valueSet.append(QString::fromAscii(" "));
+            valueSet.append(QString::fromLatin1(" "));
         valueSet.append(prepareToInsert<qsreal>(t.second));
     }
     return result.arg(typeName<qsreal>(),