diff --git a/examples/declarative/modelviews/modelviews.pro b/examples/declarative/modelviews/modelviews.pro
index cbdf460..c50dd74 100644
--- a/examples/declarative/modelviews/modelviews.pro
+++ b/examples/declarative/modelviews/modelviews.pro
@@ -2,11 +2,9 @@ TEMPLATE = subdirs
 
 SUBDIRS += \
     objectlistmodel \
-    stringlistmodel \
     abstractitemmodel \
     gridview \
     listview \
-    objectlistmodel \
     package \
     parallax \
     pathview \
diff --git a/src/declarative/qml/qdeclarativecompiler.cpp b/src/declarative/qml/qdeclarativecompiler.cpp
index 8c85f1a..6ec38c5 100644
--- a/src/declarative/qml/qdeclarativecompiler.cpp
+++ b/src/declarative/qml/qdeclarativecompiler.cpp
@@ -266,7 +266,7 @@ bool QDeclarativeCompiler::testLiteralAssignment(const QMetaProperty &prop,
         case QVariant::PointF:
             {
             bool ok;
-            QPointF point = QDeclarativeStringConverters::pointFFromString(string, &ok);
+            QDeclarativeStringConverters::pointFFromString(string, &ok);
             if (!ok) COMPILE_EXCEPTION(v, tr("Invalid property assignment: point expected"));
             }
             break;
@@ -274,7 +274,7 @@ bool QDeclarativeCompiler::testLiteralAssignment(const QMetaProperty &prop,
         case QVariant::SizeF:
             {
             bool ok;
-            QSizeF size = QDeclarativeStringConverters::sizeFFromString(string, &ok);
+            QDeclarativeStringConverters::sizeFFromString(string, &ok);
             if (!ok) COMPILE_EXCEPTION(v, tr("Invalid property assignment: size expected"));
             }
             break;
@@ -282,7 +282,7 @@ bool QDeclarativeCompiler::testLiteralAssignment(const QMetaProperty &prop,
         case QVariant::RectF:
             {
             bool ok;
-            QRectF rect = QDeclarativeStringConverters::rectFFromString(string, &ok);
+            QDeclarativeStringConverters::rectFFromString(string, &ok);
             if (!ok) COMPILE_EXCEPTION(v, tr("Invalid property assignment: rect expected"));
             }
             break;
diff --git a/src/declarative/qml/qdeclarativeproperty.cpp b/src/declarative/qml/qdeclarativeproperty.cpp
index 88b2631..158e561 100644
--- a/src/declarative/qml/qdeclarativeproperty.cpp
+++ b/src/declarative/qml/qdeclarativeproperty.cpp
@@ -1447,7 +1447,6 @@ struct ValueTypeSerializedData : public SerializedData {
 QByteArray QDeclarativePropertyPrivate::saveValueType(const QMetaObject *metaObject, int index, 
                                                  const QMetaObject *subObject, int subIndex)
 {
-    QMetaProperty prop = metaObject->property(index);
     QMetaProperty subProp = subObject->property(subIndex);
 
     ValueTypeSerializedData sd;
diff --git a/tests/auto/declarative/qdeclarativedebugjs/app/main.cpp b/tests/auto/declarative/qdeclarativedebugjs/app/main.cpp
index 733394c..50bd5d7 100644
--- a/tests/auto/declarative/qdeclarativedebugjs/app/main.cpp
+++ b/tests/auto/declarative/qdeclarativedebugjs/app/main.cpp
@@ -61,7 +61,7 @@ int main(int argc, char *argv[])
     }
 
     QObject *obj = component.create();
-
+    Q_UNUSED(obj)
 //    printf("%u\n", QDeclarativeDebugService::idForObject(obj));
 //    fflush(stdout);
 
diff --git a/tests/auto/declarative/qdeclarativelanguage/testtypes.h b/tests/auto/declarative/qdeclarativelanguage/testtypes.h
index 4f22aab..e652382 100644
--- a/tests/auto/declarative/qdeclarativelanguage/testtypes.h
+++ b/tests/auto/declarative/qdeclarativelanguage/testtypes.h
@@ -588,6 +588,7 @@ public:
 class MyParserStatus : public QObject, public QDeclarativeParserStatus
 {
     Q_OBJECT
+    Q_INTERFACES(QDeclarativeParserStatus)
 public:
     MyParserStatus() : m_cbc(0), m_ccc(0) {}
 
diff --git a/tests/auto/declarative/qdeclarativevisualdatamodel/tst_qdeclarativevisualdatamodel.cpp b/tests/auto/declarative/qdeclarativevisualdatamodel/tst_qdeclarativevisualdatamodel.cpp
index a851a92..081d33f 100644
--- a/tests/auto/declarative/qdeclarativevisualdatamodel/tst_qdeclarativevisualdatamodel.cpp
+++ b/tests/auto/declarative/qdeclarativevisualdatamodel/tst_qdeclarativevisualdatamodel.cpp
@@ -80,7 +80,7 @@ class SingleRoleModel : public QAbstractListModel
     Q_OBJECT
 
 public:
-    SingleRoleModel(QObject *parent = 0) {
+    SingleRoleModel(QObject * /* parent */ = 0) {
         QHash<int, QByteArray> roles;
         roles.insert(Qt::DisplayRole , "name");
         setRoleNames(roles);
@@ -101,7 +101,7 @@ public slots:
     }
 
 protected:
-    int rowCount(const QModelIndex &parent = QModelIndex()) const {
+    int rowCount(const QModelIndex & /* parent */ = QModelIndex()) const {
         return list.count();
     }
     QVariant data(const QModelIndex &index, int role = Qt::DisplayRole) const {