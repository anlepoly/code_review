diff --git a/doc/src/frameworks-technologies/dnd.qdoc b/doc/src/frameworks-technologies/dnd.qdoc
index db3ed5e..d18d8e3 100644
--- a/doc/src/frameworks-technologies/dnd.qdoc
+++ b/doc/src/frameworks-technologies/dnd.qdoc
@@ -41,9 +41,11 @@
     \tableofcontents
 
     This document describes the basic drag and drop mechanism and
-    outlines the approach used to enable it in custom widgets. Drag
-    and drop operations are also supported by Qt's item views and by
-    the graphics view framework. More information is available in
+    outlines the approach used to enable it in custom controls. Drag
+    and drop operations are also supported by many of Qt's controls,
+    such as the item views and graphics view framework, as well as
+    editing controls for Qt Widgets and Qt Quick. More information
+    about item views and graphics view is available in
     \l{Using drag and drop with item views} and \l{Graphics View
     Framework}.
 
@@ -56,22 +58,31 @@
 
     \section1 Configuration
 
-    The QApplication object provides some properties that are related
+    The QStyleHints object provides some properties that are related
     to drag and drop operations:
 
     \list
-    \li \l{QApplication::startDragTime} describes the amount of time in
+    \li \l{QStyleHints::startDragTime()} describes the amount of time in
        milliseconds that the user must hold down a mouse button over an
        object before a drag will begin.
-    \li \l{QApplication::startDragDistance} indicates how far the user has to
+    \li \l{QStyleHints::startDragDistance()} indicates how far the user has to
        move the mouse while holding down a mouse button before the movement
-       will be interpreted as dragging. Use of high values for this quantity
-       prevents accidental dragging when the user only meant to click on an
-       object.
+       will be interpreted as dragging.
+    \li \l{QStyleHints::startDragVelocity()} indicates fast (in pixels/second)
+       the user has to move the mouse to start a drag. A value of 0 means
+       that there is no such limit.
     \endlist
 
-    These quantities provide sensible default values for you to use if you
-    provide drag and drop support in your widgets.
+    These quantities provide sensible default values that are compliant with
+    the underlying windowing system for you to use if you
+    provide drag and drop support in your controls.
+
+    \section1 Drag and Drop in Qt Quick
+
+    The rest of the document focuses mainly on how to implement Drag and Drop
+    in C++. For using Drag and Drop inside a Qt Quick scene, please read the
+    documentation for the Qt Quick \l{Drag}, \l{DragEvent} and \l{DropArea} items.
+    There is also an example \l{quick/draganddrop}{available}.
 
     \section1 Dragging
 
diff --git a/doc/src/snippets/dragging/mainwindow.cpp b/doc/src/snippets/dragging/mainwindow.cpp
new file mode 100644
index 0000000..734be4a
--- /dev/null
+++ b/doc/src/snippets/dragging/mainwindow.cpp
@@ -0,0 +1,110 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/legal
+**
+** This file is part of the documentation of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:BSD$
+** You may use this file under the terms of the BSD license as follows:
+**
+** "Redistribution and use in source and binary forms, with or without
+** modification, are permitted provided that the following conditions are
+** met:
+**   * Redistributions of source code must retain the above copyright
+**     notice, this list of conditions and the following disclaimer.
+**   * Redistributions in binary form must reproduce the above copyright
+**     notice, this list of conditions and the following disclaimer in
+**     the documentation and/or other materials provided with the
+**     distribution.
+**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
+**     of its contributors may be used to endorse or promote products derived
+**     from this software without specific prior written permission.
+**
+**
+** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#include <QtGui>
+
+#include "mainwindow.h"
+
+MainWindow::MainWindow(QWidget *parent)
+    : QMainWindow(parent)
+{
+    QFrame *centralFrame = new QFrame(this);
+
+    QLabel *nameLabel = new QLabel(tr("Comment:"), centralFrame);
+    commentEdit = new QTextEdit(centralFrame);
+    QLabel *dragLabel = new QLabel(tr("<p>Drag the icon to a filer "
+                                      "window or the desktop background:</p>"),
+                                      centralFrame);
+    iconLabel = new QLabel(centralFrame);
+    iconPixmap.load(":/images/file.png");
+    iconLabel->setPixmap(iconPixmap);
+
+    QGridLayout *grid = new QGridLayout(centralFrame);
+    grid->addWidget(nameLabel, 0, 0);
+    grid->addWidget(commentEdit, 1, 0, 1, 2);
+    grid->addWidget(dragLabel, 2, 0);
+    grid->addWidget(iconLabel, 2, 1);
+
+    statusBar();
+    setCentralWidget(centralFrame);
+    setWindowTitle(tr("Dragging"));
+}
+
+//! [0]
+void MainWindow::mousePressEvent(QMouseEvent *event)
+{
+    if (event->button() == Qt::LeftButton
+        && iconLabel->geometry().contains(event->pos())) {
+
+//! [1]
+        QDrag *drag = new QDrag(this);
+        QMimeData *mimeData = new QMimeData;
+
+        mimeData->setText(commentEdit->toPlainText());
+        drag->setMimeData(mimeData);
+//! [1]
+        drag->setPixmap(iconPixmap);
+
+        Qt::DropAction dropAction = drag->exec();
+//! [0]
+
+        QString actionText;
+        switch (dropAction) {
+            case Qt::CopyAction:
+                actionText = tr("The text was copied.");
+                break;
+            case Qt::MoveAction:
+                actionText = tr("The text was moved.");
+                break;
+            case Qt::LinkAction:
+                actionText = tr("The text was linked.");
+                break;
+            case Qt::IgnoreAction:
+                actionText = tr("The drag was ignored.");
+                break;
+            default:
+                actionText = tr("Unknown action.");
+                break;
+        }
+        statusBar()->showMessage(actionText);
+//! [2]
+    }
+}
+//! [2]