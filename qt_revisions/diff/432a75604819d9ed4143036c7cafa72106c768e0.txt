diff --git a/src/corelib/io/qtextstream.cpp b/src/corelib/io/qtextstream.cpp
index a6d58c7..dd0ab85 100644
--- a/src/corelib/io/qtextstream.cpp
+++ b/src/corelib/io/qtextstream.cpp
@@ -393,7 +393,7 @@ public:
     };
 
     inline bool getChar(QChar *ch);
-    inline void ungetChar(const QChar &ch);
+    inline void ungetChar(QChar ch);
     NumberParsingStatus getNumber(qulonglong *l);
     bool getReal(double *f);
 
@@ -943,7 +943,7 @@ inline bool QTextStreamPrivate::getChar(QChar *ch)
 
 /*! \internal
 */
-inline void QTextStreamPrivate::ungetChar(const QChar &ch)
+inline void QTextStreamPrivate::ungetChar(QChar ch)
 {
     if (string) {
         if (stringOffset == 0)
diff --git a/src/corelib/kernel/qvariant.cpp b/src/corelib/kernel/qvariant.cpp
index d0470ff..4e7fd94 100644
--- a/src/corelib/kernel/qvariant.cpp
+++ b/src/corelib/kernel/qvariant.cpp
@@ -1343,7 +1343,7 @@ QVariant::QVariant(const char *val)
 */
 
 /*!
-  \fn QVariant::QVariant(const QChar &c)
+  \fn QVariant::QVariant(QChar c)
 
   Constructs a new variant with a char value, \a c.
 */
@@ -1411,7 +1411,7 @@ QVariant::QVariant(const QBitArray &val)
 { d.is_null = false; d.type = BitArray; v_construct<QBitArray>(&d, val);  }
 QVariant::QVariant(const QString &val)
 { d.is_null = false; d.type = String; v_construct<QString>(&d, val);  }
-QVariant::QVariant(const QChar &val)
+QVariant::QVariant(QChar val)
 { d.is_null = false; d.type = Char; v_construct<QChar>(&d, val);  }
 QVariant::QVariant(const QLatin1String &val)
 { QString str(val); d.is_null = false; d.type = String; v_construct<QString>(&d, str); }
diff --git a/src/corelib/kernel/qvariant.h b/src/corelib/kernel/qvariant.h
index 089d0d6..5fcfe3e 100644
--- a/src/corelib/kernel/qvariant.h
+++ b/src/corelib/kernel/qvariant.h
@@ -218,7 +218,7 @@ class Q_CORE_EXPORT QVariant
     QVariant(const QString &string);
     QVariant(const QLatin1String &string);
     QVariant(const QStringList &stringlist);
-    QVariant(const QChar &qchar);
+    QVariant(QChar qchar);
     QVariant(const QDate &date);
     QVariant(const QTime &time);
     QVariant(const QDateTime &datetime);
diff --git a/src/corelib/tools/qlocale.cpp b/src/corelib/tools/qlocale.cpp
index 6c52eb3..31f776d 100644
--- a/src/corelib/tools/qlocale.cpp
+++ b/src/corelib/tools/qlocale.cpp
@@ -2797,7 +2797,7 @@ bool QLocalePrivate::numberToCLocale(const QString &num,
         return false;
 
     while (idx < l) {
-        const QChar &in = uc[idx];
+        const QChar in = uc[idx];
 
         char out = digitToCLocale(in);
         if (out == 0) {
diff --git a/src/corelib/tools/qlocale_p.h b/src/corelib/tools/qlocale_p.h
index 7653f4d..c6902ca 100644
--- a/src/corelib/tools/qlocale_p.h
+++ b/src/corelib/tools/qlocale_p.h
@@ -228,7 +228,7 @@ public:
     bool numberToCLocale(const QString &num,
     	    	    	  GroupSeparatorMode group_sep_mode,
                           CharBuff *result) const;
-    inline char digitToCLocale(const QChar &c) const;
+    inline char digitToCLocale(QChar c) const;
 
     static void updateSystemPrivate();
 
@@ -282,7 +282,7 @@ public:
 
 };
 
-inline char QLocalePrivate::digitToCLocale(const QChar &in) const
+inline char QLocalePrivate::digitToCLocale(QChar in) const
 {
     const QChar _zero = zero();
     const QChar _group = group();
diff --git a/src/corelib/xml/qxmlutils.cpp b/src/corelib/xml/qxmlutils.cpp
index 954846a..7ec2088 100644
--- a/src/corelib/xml/qxmlutils.cpp
+++ b/src/corelib/xml/qxmlutils.cpp
@@ -379,7 +379,7 @@ bool QXmlUtils::isNCName(const QStringRef &ncName)
     const int len = ncName.size();
     for(int i = 0; i < len; ++i)
     {
-        const QChar &at = ncName.at(i);
+        const QChar at = ncName.at(i);
         if(!QXmlUtils::isNameChar(at) || at == QLatin1Char(':'))
             return false;
     }
diff --git a/src/dbus/qdbusutil.cpp b/src/dbus/qdbusutil.cpp
index 9ca8086..71edee1 100644
--- a/src/dbus/qdbusutil.cpp
+++ b/src/dbus/qdbusutil.cpp
@@ -52,7 +52,7 @@
 
 QT_BEGIN_NAMESPACE
 
-static inline bool isValidCharacterNoDash(const QChar &c)
+static inline bool isValidCharacterNoDash(QChar c)
 {
     register ushort u = c.unicode();
     return (u >= 'a' && u <= 'z')
@@ -61,7 +61,7 @@ static inline bool isValidCharacterNoDash(const QChar &c)
             || (u == '_');
 }
 
-static inline bool isValidCharacter(const QChar &c)
+static inline bool isValidCharacter(QChar c)
 {
     register ushort u = c.unicode();
     return (u >= 'a' && u <= 'z')
@@ -70,7 +70,7 @@ static inline bool isValidCharacter(const QChar &c)
             || (u == '_') || (u == '-');
 }
 
-static inline bool isValidNumber(const QChar &c)
+static inline bool isValidNumber(QChar c)
 {
     register ushort u = c.unicode();
     return (u >= '0' && u <= '9');
diff --git a/src/gui/text/qrawfont.cpp b/src/gui/text/qrawfont.cpp
index a5879e3..79793d5 100644
--- a/src/gui/text/qrawfont.cpp
+++ b/src/gui/text/qrawfont.cpp
@@ -614,7 +614,7 @@ QList<QFontDatabase::WritingSystem> QRawFont::supportedWritingSystems() const
 
     \sa supportedWritingSystems()
 */
-bool QRawFont::supportsCharacter(const QChar &character) const
+bool QRawFont::supportsCharacter(QChar character) const
 {
     return d->isValid() && d->fontEngine->canRender(&character, 1);
 }
diff --git a/src/gui/text/qrawfont.h b/src/gui/text/qrawfont.h
index 453f01f..5cd996e 100644
--- a/src/gui/text/qrawfont.h
+++ b/src/gui/text/qrawfont.h
@@ -127,7 +127,7 @@ public:
                       QFont::HintingPreference hintingPreference);
 
     bool supportsCharacter(quint32 ucs4) const;
-    bool supportsCharacter(const QChar &character) const;
+    bool supportsCharacter(QChar character) const;
     QList<QFontDatabase::WritingSystem> supportedWritingSystems() const;
 
     QByteArray fontTable(const char *tagName) const;
diff --git a/src/gui/text/qtextdocument_p.cpp b/src/gui/text/qtextdocument_p.cpp
index 8ce3ae4..2869f75 100644
--- a/src/gui/text/qtextdocument_p.cpp
+++ b/src/gui/text/qtextdocument_p.cpp
@@ -126,7 +126,7 @@ void QTextBlockData::invalidate() const
         layout->engine()->invalidate();
 }
 
-static bool isValidBlockSeparator(const QChar &ch)
+static bool isValidBlockSeparator(QChar ch)
 {
     return ch == QChar::ParagraphSeparator
         || ch == QTextBeginningOfFrame
@@ -393,7 +393,7 @@ int QTextDocumentPrivate::insert_block(int pos, uint strPos, int format, int blo
     return x;
 }
 
-int QTextDocumentPrivate::insertBlock(const QChar &blockSeparator,
+int QTextDocumentPrivate::insertBlock(QChar blockSeparator,
                                   int pos, int blockFormat, int charFormat, QTextUndoCommand::Operation op)
 {
     Q_ASSERT(formats.format(blockFormat).isBlockFormat());
diff --git a/src/gui/text/qtextdocument_p.h b/src/gui/text/qtextdocument_p.h
index 5f2f0f0..54eefd3 100644
--- a/src/gui/text/qtextdocument_p.h
+++ b/src/gui/text/qtextdocument_p.h
@@ -179,7 +179,7 @@ public:
     void insert(int pos, const QString &text, int format);
     void insert(int pos, int strPos, int strLength, int format);
     int insertBlock(int pos, int blockFormat, int charFormat, QTextUndoCommand::Operation = QTextUndoCommand::MoveCursor);
-    int insertBlock(const QChar &blockSeparator, int pos, int blockFormat, int charFormat,
+    int insertBlock(QChar blockSeparator, int pos, int blockFormat, int charFormat,
                      QTextUndoCommand::Operation op = QTextUndoCommand::MoveCursor);
 
     void move(int from, int to, int length, QTextUndoCommand::Operation = QTextUndoCommand::MoveCursor);
diff --git a/src/gui/text/qtextobject.cpp b/src/gui/text/qtextobject.cpp
index bffc2c3..a9daf6b 100644
--- a/src/gui/text/qtextobject.cpp
+++ b/src/gui/text/qtextobject.cpp
@@ -525,7 +525,7 @@ void QTextFrame::setLayoutData(QTextFrameLayoutData *data)
 
 
 
-void QTextFramePrivate::fragmentAdded(const QChar &type, uint fragment)
+void QTextFramePrivate::fragmentAdded(QChar type, uint fragment)
 {
     if (type == QTextBeginningOfFrame) {
         Q_ASSERT(!fragment_start);
@@ -543,7 +543,7 @@ void QTextFramePrivate::fragmentAdded(const QChar &type, uint fragment)
     }
 }
 
-void QTextFramePrivate::fragmentRemoved(const QChar &type, uint fragment)
+void QTextFramePrivate::fragmentRemoved(QChar type, uint fragment)
 {
     Q_UNUSED(fragment); // --release warning
     if (type == QTextBeginningOfFrame) {
diff --git a/src/gui/text/qtextobject_p.h b/src/gui/text/qtextobject_p.h
index 960e4e8..3f63024 100644
--- a/src/gui/text/qtextobject_p.h
+++ b/src/gui/text/qtextobject_p.h
@@ -97,8 +97,8 @@ public:
         : QTextObjectPrivate(doc), fragment_start(0), fragment_end(0), parentFrame(0), layoutData(0)
     {
     }
-    virtual void fragmentAdded(const QChar &type, uint fragment);
-    virtual void fragmentRemoved(const QChar &type, uint fragment);
+    virtual void fragmentAdded(QChar type, uint fragment);
+    virtual void fragmentRemoved(QChar type, uint fragment);
     void remove_me();
 
     uint fragment_start;
diff --git a/src/gui/text/qtexttable.cpp b/src/gui/text/qtexttable.cpp
index 35adfd1..12af933 100644
--- a/src/gui/text/qtexttable.cpp
+++ b/src/gui/text/qtexttable.cpp
@@ -397,7 +397,7 @@ int QTextTablePrivate::findCellIndex(int fragment) const
     return it - cells.begin();
 }
 
-void QTextTablePrivate::fragmentAdded(const QChar &type, uint fragment)
+void QTextTablePrivate::fragmentAdded(QChar type, uint fragment)
 {
     dirty = true;
     if (blockFragmentUpdates)
@@ -415,7 +415,7 @@ void QTextTablePrivate::fragmentAdded(const QChar &type, uint fragment)
     QTextFramePrivate::fragmentAdded(type, fragment);
 }
 
-void QTextTablePrivate::fragmentRemoved(const QChar &type, uint fragment)
+void QTextTablePrivate::fragmentRemoved(QChar type, uint fragment)
 {
     dirty = true;
     if (blockFragmentUpdates)
diff --git a/src/gui/text/qtexttable_p.h b/src/gui/text/qtexttable_p.h
index 273caa1..7b278f9 100644
--- a/src/gui/text/qtexttable_p.h
+++ b/src/gui/text/qtexttable_p.h
@@ -66,8 +66,8 @@ public:
     ~QTextTablePrivate();
 
     static QTextTable *createTable(QTextDocumentPrivate *, int pos, int rows, int cols, const QTextTableFormat &tableFormat);
-    void fragmentAdded(const QChar &type, uint fragment);
-    void fragmentRemoved(const QChar &type, uint fragment);
+    void fragmentAdded(QChar type, uint fragment);
+    void fragmentRemoved(QChar type, uint fragment);
 
     void update() const;
 
diff --git a/src/testlib/qtestcase.cpp b/src/testlib/qtestcase.cpp
index 56959ba..0b5f636 100644
--- a/src/testlib/qtestcase.cpp
+++ b/src/testlib/qtestcase.cpp
@@ -770,7 +770,7 @@ QT_BEGIN_NAMESPACE
 */
 
 /*!
-    \fn char *QTest::toString(const QChar &character)
+    \fn char *QTest::toString(QChar character)
     \overload
 
     Returns a textual representation of the given \a character.
diff --git a/src/tools/uic/driver.cpp b/src/tools/uic/driver.cpp
index 5a9a862..16dc12f 100644
--- a/src/tools/uic/driver.cpp
+++ b/src/tools/uic/driver.cpp
@@ -208,7 +208,7 @@ QString Driver::qtify(const QString &name)
     return qname;
 }
 
-static bool isAnsiCCharacter(const QChar& c)
+static bool isAnsiCCharacter(QChar c)
 {
     return (c.toUpper() >= QLatin1Char('A') && c.toUpper() <= QLatin1Char('Z'))
            || c.isDigit() || c == QLatin1Char('_');
diff --git a/src/widgets/widgets/qspinbox.cpp b/src/widgets/widgets/qspinbox.cpp
index ee94368..3038d8e 100644
--- a/src/widgets/widgets/qspinbox.cpp
+++ b/src/widgets/widgets/qspinbox.cpp
@@ -1157,8 +1157,8 @@ QVariant QDoubleSpinBoxPrivate::validateAndInterpret(QString &input, int &pos,
                 }
             }
         } else {
-            const QChar &last = copy.at(len - 1);
-            const QChar &secondLast = copy.at(len - 2);
+            const QChar last = copy.at(len - 1);
+            const QChar secondLast = copy.at(len - 2);
             if ((last == locale.groupSeparator() || last.isSpace())
                 && (secondLast == locale.groupSeparator() || secondLast.isSpace())) {
                 state = QValidator::Invalid;
diff --git a/src/widgets/widgets/qwidgetlinecontrol_p.h b/src/widgets/widgets/qwidgetlinecontrol_p.h
index 1d95536..a019118 100644
--- a/src/widgets/widgets/qwidgetlinecontrol_p.h
+++ b/src/widgets/widgets/qwidgetlinecontrol_p.h
@@ -313,7 +313,7 @@ public:
     }
 
     QChar passwordCharacter() const { return m_passwordCharacter; }
-    void setPasswordCharacter(const QChar &character) { m_passwordCharacter = character; updateDisplayText(); }
+    void setPasswordCharacter(QChar character) { m_passwordCharacter = character; updateDisplayText(); }
 
     Qt::LayoutDirection layoutDirection() const {
         if (m_layoutDirection == Qt::LayoutDirectionAuto) {