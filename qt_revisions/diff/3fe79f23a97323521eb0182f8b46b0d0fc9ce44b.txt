diff --git a/tests/manual/qnetworkaccessmanager/qget/qget.cpp b/tests/manual/qnetworkaccessmanager/qget/qget.cpp
index 86b05f8..44fb621 100644
--- a/tests/manual/qnetworkaccessmanager/qget/qget.cpp
+++ b/tests/manual/qnetworkaccessmanager/qget/qget.cpp
@@ -57,7 +57,9 @@ DownloadManager::DownloadManager()
     connect(&nam, SIGNAL(finished(QNetworkReply*)), this, SLOT(finished(QNetworkReply*)));
     connect(&nam, SIGNAL(authenticationRequired(QNetworkReply*, QAuthenticator*)), this, SLOT(authenticationRequired(QNetworkReply*, QAuthenticator*)));
     connect(&nam, SIGNAL(proxyAuthenticationRequired(const QNetworkProxy&, QAuthenticator*)), this, SLOT(proxyAuthenticationRequired(const QNetworkProxy&, QAuthenticator*)));
+#ifndef QT_NO_SSL
     connect(&nam, SIGNAL(sslErrors(QNetworkReply*, const QList<QSslError>&)), this, SLOT(sslErrors(QNetworkReply*, const QList<QSslError>&)));
+#endif
 }
 
 DownloadManager::~DownloadManager()
@@ -117,6 +119,7 @@ void DownloadManager::proxyAuthenticationRequired(const QNetworkProxy& proxy, QA
     }
 }
 
+#ifndef QT_NO_SSL
 void DownloadManager::sslErrors(QNetworkReply* reply, const QList<QSslError>& errors)
 {
     qDebug() << "sslErrors";
@@ -125,6 +128,7 @@ void DownloadManager::sslErrors(QNetworkReply* reply, const QList<QSslError>& er
         qDebug() << error.certificate().toPem();
     }
 }
+#endif
 
 DownloadItem::DownloadItem(QNetworkReply* r, QNetworkAccessManager& manager) : reply(r), nam(manager)
 {
diff --git a/tests/manual/qnetworkaccessmanager/qget/qget.h b/tests/manual/qnetworkaccessmanager/qget/qget.h
index c8ab9e3..40d75a3 100644
--- a/tests/manual/qnetworkaccessmanager/qget/qget.h
+++ b/tests/manual/qnetworkaccessmanager/qget/qget.h
@@ -87,7 +87,9 @@ private slots:
     void finished(QNetworkReply* reply);
     void authenticationRequired(QNetworkReply* reply, QAuthenticator* authenticator);
     void proxyAuthenticationRequired(const QNetworkProxy& proxy, QAuthenticator* authenticator);
+#ifndef QT_NO_SSL
     void sslErrors(QNetworkReply* reply, const QList<QSslError>& errors);
+#endif
     void downloadFinished(DownloadItem *item);
 private:
     QNetworkAccessManager nam;