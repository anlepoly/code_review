diff --git a/src/serialportengine_symbian.cpp b/src/serialportengine_symbian.cpp
index 1c242f3..52cd3d0 100755
--- a/src/serialportengine_symbian.cpp
+++ b/src/serialportengine_symbian.cpp
@@ -541,84 +541,10 @@ bool SymbianSerialPortEngine::setRate(qint32 rate, SerialPort::Directions dir)
         return false;
     }
 
-    switch (rate) {
-    case 50:
-        m_currentSettings().iRate = EBps50;
-        break;
-    case 75:
-        m_currentSettings().iRate = EBps75;
-        break;
-    case 110:
-        m_currentSettings().iRate = EBps110;
-        break;
-    case 134:
-        m_currentSettings().iRate = EBps134;
-        break;
-    case 150:
-        m_currentSettings().iRate = EBps150;
-        break;
-    case 300:
-        m_currentSettings().iRate = EBps300;
-        break;
-    case 600:
-        m_currentSettings().iRate = EBps600;
-        break;
-    case 1200:
-        m_currentSettings().iRate = EBps1200;
-        break;
-    case 1800:
-        m_currentSettings().iRate = EBps1800;
-        break;
-    case 2000:
-        m_currentSettings().iRate = EBps2000;
-        break;
-    case 2400:
-        m_currentSettings().iRate = EBps2400;
-        break;
-    case 3600:
-        m_currentSettings().iRate = EBps3600;
-        break;
-    case 4800:
-        m_currentSettings().iRate = EBps4800;
-        break;
-    case 7200:
-        m_currentSettings().iRate = EBps7200;
-        break;
-    case 9600:
-        m_currentSettings().iRate = EBps9600;
-        break;
-    case 19200:
-        m_currentSettings().iRate = EBps19200;
-        break;
-    case 38400:
-        m_currentSettings().iRate = EBps38400;
-        break;
-    case 57600:
-        m_currentSettings().iRate = EBps57600;
-        break;
-    case 115200:
-        m_currentSettings().iRate = EBps115200;
-        break;
-    case 230400:
-        m_currentSettings().iRate = EBps230400;
-        break;
-    case 460800:
-        m_currentSettings().iRate = EBps460800;
-        break;
-    case 576000:
-        m_currentSettings().iRate = EBps576000;
-        break;
-    case 1152000:
-        m_currentSettings().iRate = EBps1152000;
-        break;
-    case 4000000:
-        m_currentSettings().iRate = EBps4000000;
-        break;
-    case 921600:
-        m_currentSettings().iRate = EBps921600;
-        break;
-        //case 1843200:; // Only for  Symbian SR1
-    default:
+    rate = settingFromRate(rate);
+    if (rate)
+        m_currentSettings().iRate = static_cast<TBps>(rate);
+    else {
         dptr->setError(SerialPort::UnsupportedPortOperationError);
         return false;
     }
@@ -796,7 +722,89 @@ bool SymbianSerialPortEngine::processIOErrors()
     return false;
 }
 
-///
+/* Public static methods */
+
+struct RatePair
+{
+   qint32 rate;    // The numerical value of baud rate.
+   qint32 setting; // The OS-specific code of baud rate.
+   bool operator<(const RatePair &other) const { return rate < other.rate; }
+   bool operator==(const RatePair &other) const { return setting == other.setting; }
+};
+
+// This table contains correspondences standard pairs values of
+// baud rates that are defined in files
+// - d32comm.h for Symbian^3
+// - d32public.h for Symbian SR1
+static
+const RatePair standardRatesTable[] =
+{
+    { 50, EBps50 },
+    { 75, EBps75 },
+    { 110, EBps110},
+    { 134, EBps134 },
+    { 150, EBps150 },
+    { 300, EBps300 },
+    { 600, EBps600 },
+    { 1200, EBps1200 },
+    { 1800, EBps1800 },
+    { 2000, EBps2000 },
+    { 2400, EBps2400 },
+    { 3600, EBps3600 },
+    { 4800, EBps4800 },
+    { 7200, EBps7200 },
+    { 9600, EBps9600 },
+    { 19200, EBps19200 },
+    { 38400, EBps38400 },
+    { 57600, EBps57600 },
+    { 115200, EBps115200 },
+    { 230400, EBps230400 },
+    { 460800, EBps460800 },
+    { 576000, EBps576000 },
+    { 921600, EBps921600 },
+    { 1152000, EBps1152000 },
+    //{ 1843200, EBps1843200 }, only for Symbian SR1
+    { 4000000, EBps4000000 }
+};
+
+static const RatePair *standardRatesTable_end =
+        standardRatesTable + sizeof(standardRatesTable)/sizeof(*standardRatesTable);
+
+/*!
+    Convert symbian-specific enum of baud rate to a numeric value.
+    If the desired item is not found then returns 0.
+*/
+qint32 SymbianSerialPortEngine::rateFromSetting(EBps setting)
+{
+    const RatePair rp = {0, setting};
+    const RatePair *ret = qFind(standardRatesTable, standardRatesTable_end, rp);
+    return (ret != standardRatesTable_end) ? ret->rate : 0;
+}
+
+/*!
+    Convert a numeric value of baud rate to symbian-specific enum.
+    If the desired item is not found then returns 0.
+*/
+EBps SymbianSerialPortEngine::settingFromRate(qint32 rate)
+{
+    const RatePair rp = {rate, 0};
+    const RatePair *ret = qBinaryFind(standardRatesTable, standardRatesTable_end, rp);
+    return (ret != standardRatesTable_end) ? ret->setting : 0;
+}
+
+/*!
+    Returns a list standard values of baud rates,
+    enums are defined in
+   - d32comm.h for Symbian^3
+   - d32public.h for Symbian SR1.
+*/
+QList<qint32> SymbianSerialPortEngine::standardRates()
+{
+    QList<qint32> ret;
+    for (const RatePair *it = standardRatesTable; it != standardRatesTable_end; ++it)
+       ret.append(it->rate);
+    return ret;
+}
 
 /* Protected methods */
 
@@ -807,86 +815,7 @@ bool SymbianSerialPortEngine::processIOErrors()
 void SymbianSerialPortEngine::detectDefaultSettings()
 {
     // Detect rate.
-    switch (m_currentSettings().iRate) {
-    case EBps50:
-        dptr->options.inputRate = 50;
-        break;
-    case EBps75:
-        dptr->options.inputRate = 75;
-        break;
-    case EBps110:
-        dptr->options.inputRate = 110;
-        break;
-    case EBps134:
-        dptr->options.inputRate = 134;
-        break;
-    case EBps150:
-        dptr->options.inputRate = 150;
-        break;
-    case EBps300:
-        dptr->options.inputRate = 300;
-        break;
-    case EBps600:
-        dptr->options.inputRate = 600;
-        break;
-    case EBps1200:
-        dptr->options.inputRate = 1200;
-        break;
-    case EBps1800:
-        dptr->options.inputRate = 1800;
-        break;
-    case EBps2000:
-        dptr->options.inputRate = 2000;
-        break;
-    case EBps2400:
-        dptr->options.inputRate = 2400;
-        break;
-    case EBps3600:
-        dptr->options.inputRate = 3600;
-        break;
-    case EBps4800:
-        dptr->options.inputRate = 4800;
-        break;
-    case EBps7200:
-        dptr->options.inputRate = 7200;
-        break;
-    case EBps9600:
-        dptr->options.inputRate = 9600;
-        break;
-    case EBps19200:
-        dptr->options.inputRate = 19200;
-        break;
-    case EBps38400:
-        dptr->options.inputRate = 38400;
-        break;
-    case EBps57600:
-        dptr->options.inputRate = 57600;
-        break;
-    case EBps115200:
-        dptr->options.inputRate = 115200;
-        break;
-    case EBps230400:
-        dptr->options.inputRate = 230400;
-        break;
-    case EBps460800:
-        dptr->options.inputRate = 460800;
-        break;
-    case EBps576000:
-        dptr->options.inputRate = 576000;
-        break;
-    case EBps1152000:
-        dptr->options.inputRate = 1152000;
-        break;
-    case EBps4000000:
-        dptr->options.inputRate = 4000000;
-        break;
-    case EBps921600:
-        dptr->options.inputRate = 921600;
-        break;
-        //case EBps1843200: inRate = 1843200; break;
-    default:
-        dptr->options.inputRate = SerialPort::UnknownRate;
-    }
+    dptr->options.inputRate = rateFromSetting(m_currentSettings().iRate);
     dptr->options.outputRate = dptr->options.inputRate;
 
     // Detect databits.
diff --git a/src/serialportengine_symbian_p.h b/src/serialportengine_symbian_p.h
index 2a99a54..b654c03 100755
--- a/src/serialportengine_symbian_p.h
+++ b/src/serialportengine_symbian_p.h
@@ -60,6 +60,11 @@ public:
 
     virtual bool processIOErrors();
 
+public:
+    static qint32 rateFromSetting(EBps setting);
+    static EBps settingFromRate(qint32 rate);
+    static QList<qint32> standardRates();
+
 protected:
     virtual void detectDefaultSettings();
     //virtual bool eventFilter(QObject *obj, QEvent *e);
diff --git a/src/serialportengine_unix.cpp b/src/serialportengine_unix.cpp
index 95d9315..e81d88d 100755
--- a/src/serialportengine_unix.cpp
+++ b/src/serialportengine_unix.cpp
@@ -620,116 +620,6 @@ QString UnixSerialPortEngine::fromSystemLocation(const QString &location) const
     return ret;
 }
 
-static QHash<qint32, qint32> generateStandardRatesMachTable()
-{
-    QHash<qint32, qint32> h;
-
-#if defined (B0)
-    h[0] = B0;
-#endif
-#if defined (B50)
-    h[50] = B50;
-#endif
-#if defined (B75)
-    h[75] = B75;
-#endif
-#if defined (B110)
-    h[110] = B110;
-#endif
-#if defined (B134)
-    h[134] = B134;
-#endif
-#if defined (B150)
-    h[150] = B150;
-#endif
-#if defined (B200)
-    h[200] = B200;
-#endif
-#if defined (B300)
-    h[300] = B300;
-#endif
-#if defined (B600)
-    h[600] = B600;
-#endif
-#if defined (B1200)
-    h[1200] = B1200;
-#endif
-#if defined (B1800)
-    h[1800] = B1800;
-#endif
-#if defined (B2400)
-    h[2400] = B2400;
-#endif
-#if defined (B4800)
-    h[4800] = B4800;
-#endif
-#if defined (B9600)
-    h[9600] = B9600;
-#endif
-#if defined (B19200)
-    h[19200] = B19200;
-#endif
-#if defined (B38400)
-    h[38400] = B38400;
-#endif
-#if defined (B57600)
-    h[57600] = B57600;
-#endif
-#if defined (B115200)
-    h[115200] = B115200;
-#endif
-#if defined (B230400)
-    h[230400] = B230400;
-#endif
-#if defined (B460800)
-    h[460800] = B460800;
-#endif
-#if defined (B500000)
-    h[500000] = B500000;
-#endif
-#if defined (B576000)
-    h[576000] = B576000;
-#endif
-#if defined (B921600)
-    h[921600] = B921600;
-#endif
-#if defined (B1000000)
-    h[1000000] = B1000000;
-#endif
-#if defined (B1152000)
-    h[1152000] = B1152000;
-#endif
-#if defined (B1500000)
-    h[1500000] = B1500000;
-#endif
-#if defined (B2000000)
-    h[2000000] = B2000000;
-#endif
-#if defined (B2500000)
-    h[2500000] = B2500000;
-#endif
-#if defined (B3000000)
-    h[3000000] = B3000000;
-#endif
-#if defined (B3500000)
-    h[3500000] = B3500000;
-#endif
-#if defined (B4000000)
-    h[4000000] = B4000000;
-#endif
-
-    return h;
-}
-
-// Standard baud rates match table, where:
-// - key - is the numerical value of baud rate (eg. 9600, 115200 ...)
-// - value - is the value of POSIX baud rate macros (eg. B9600, B115200 ...)
-inline QHash<qint32, qint32>& standardRatesMachTable()
-{
-    static QHash<qint32, qint32> h = generateStandardRatesMachTable();
-    return h;
-}
-
 /*!
     Set desired \a rate by given direction \a dir,
     where \a rate is expressed by any positive integer type qint32.
@@ -752,7 +642,7 @@ bool UnixSerialPortEngine::setRate(qint32 rate, SerialPort::Directions dir)
 #endif
 
     if (ret) {
-        const qint32 unixRate = standardRatesMachTable().value(rate);
+        const qint32 unixRate = settingFromRate(rate);
         if (unixRate > 0) {
             // try prepate to set standard baud rate
 
@@ -1051,6 +941,150 @@ bool UnixSerialPortEngine::processIOErrors()
     return false;
 }
 
+/* Public static methods */
+
+struct RatePair
+{
+   qint32 rate;    // The numerical value of baud rate.
+   qint32 setting; // The OS-specific code of baud rate.
+   bool operator<(const RatePair &other) const { return rate < other.rate; }
+   bool operator==(const RatePair &other) const { return setting == other.setting; }
+};
+
+// This table contains correspondences standard pairs values of
+// baud rates that are defined in file termios.h
+static
+const RatePair standardRatesTable[] =
+{
+    #if defined (B50)
+    { 50, B50},
+    #endif
+    #if defined (B75)
+    { 75, B75},
+    #endif
+    #if defined (B110)
+    { 110, B110},
+    #endif
+    #if defined (B134)
+    { 134, B134},
+    #endif
+    #if defined (B150)
+    { 150, B150},
+    #endif
+    #if defined (B200)
+    { 200, B200},
+    #endif
+    #if defined (B300)
+    { 300, B300},
+    #endif
+    #if defined (B600)
+    { 600, B600},
+    #endif
+    #if defined (B1200)
+    { 1200, B1200},
+    #endif
+    #if defined (B1800)
+    { 1800, B1800},
+    #endif
+    #if defined (B2400)
+    { 2400, B2400},
+    #endif
+    #if defined (B4800)
+    { 4800, B4800},
+    #endif
+    #if defined (B9600)
+    { 9600, B9600},
+    #endif
+    #if defined (B19200)
+    { 19200, B19200},
+    #endif
+    #if defined (B38400)
+    { 38400, B38400},
+    #endif
+    #if defined (B57600)
+    { 57600, B57600},
+    #endif
+    #if defined (B115200)
+    { 115200, B115200},
+    #endif
+    #if defined (B230400)
+    { 230400, B230400},
+    #endif
+    #if defined (B460800)
+    { 460800, B460800},
+    #endif
+    #if defined (B500000)
+    { 500000, B500000},
+    #endif
+    #if defined (B576000)
+    { 576000, B576000},
+    #endif
+    #if defined (B921600)
+    { 921600, B921600},
+    #endif
+    #if defined (B1000000)
+    { 1000000, B1000000},
+    #endif
+    #if defined (B1152000)
+    { 1152000, B1152000},
+    #endif
+    #if defined (B1500000)
+    { 1500000, B1500000},
+    #endif
+    #if defined (B2000000)
+    { 2000000, B2000000},
+    #endif
+    #if defined (B2500000)
+    { 2500000, B2500000},
+    #endif
+    #if defined (B3000000)
+    { 3000000, B3000000},
+    #endif
+    #if defined (B3500000)
+    { 3500000, B3500000},
+    #endif
+    #if defined (B4000000)
+    { 4000000, B4000000}
+    #endif
+};
+
+static const RatePair *standardRatesTable_end =
+        standardRatesTable + sizeof(standardRatesTable)/sizeof(*standardRatesTable);
+
+/*!
+    Convert *nix-specific code of baud rate to a numeric value.
+    If the desired item is not found then returns 0.
+*/
+qint32 UnixSerialPortEngine::rateFromSetting(qint32 setting)
+{
+    const RatePair rp = {0, setting};
+    const RatePair *ret = qFind(standardRatesTable, standardRatesTable_end, rp);
+    return (ret != standardRatesTable_end) ? ret->rate : 0;
+}
+
+/*!
+    Convert a numeric value of baud rate to *nix-specific code.
+    If the desired item is not found then returns 0.
+*/
+qint32 UnixSerialPortEngine::settingFromRate(qint32 rate)
+{
+    const RatePair rp = {rate, 0};
+    const RatePair *ret = qBinaryFind(standardRatesTable, standardRatesTable_end, rp);
+    return (ret != standardRatesTable_end) ? ret->setting : 0;
+}
+
+/*!
+    Returns a list standard values of baud rates,
+    codes are defined in termios.h
+*/
+QList<qint32> UnixSerialPortEngine::standardRates()
+{
+    QList<qint32> ret;
+    for (const RatePair *it = standardRatesTable; it != standardRatesTable_end; ++it)
+       ret.append(it->rate);
+    return ret;
+}
+
 /* Protected methods */
 
 /*!
@@ -1088,8 +1122,8 @@ void UnixSerialPortEngine::detectDefaultSettings()
     // other *nix
 #endif
     if (!isCustomRate) {
-        dptr->options.inputRate = standardRatesMachTable().key(::cfgetispeed(&m_currentTermios));
-        dptr->options.outputRate = standardRatesMachTable().key(::cfgetospeed(&m_currentTermios));
+        dptr->options.inputRate = rateFromSetting(::cfgetispeed(&m_currentTermios));
+        dptr->options.outputRate = rateFromSetting(::cfgetospeed(&m_currentTermios));
     }
 
     // Detect databits.
diff --git a/src/serialportengine_unix_p.h b/src/serialportengine_unix_p.h
index a59b4b3..8f73008 100755
--- a/src/serialportengine_unix_p.h
+++ b/src/serialportengine_unix_p.h
@@ -63,6 +63,11 @@ public:
 
     virtual bool processIOErrors();
 
+public:
+    static qint32 rateFromSetting(qint32 setting);
+    static qint32 settingFromRate(qint32 rate);
+    static QList<qint32> standardRates();
+
 protected:
     virtual void detectDefaultSettings();
     virtual bool eventFilter(QObject *obj, QEvent *e);
diff --git a/src/serialportengine_win.cpp b/src/serialportengine_win.cpp
index 61ed45a..48cb1ed 100755
--- a/src/serialportengine_win.cpp
+++ b/src/serialportengine_win.cpp
@@ -1029,6 +1029,75 @@ void WinSerialPortEngine::unlockNotification(NotificationLockerType type)
 
 #endif
 
+/* Public static methods */
+
+// This table contains standard values of baud rates that
+// are defined in MSDN and/or in Win SDK file winbase.h
+static
+const qint32 standardRatesTable[] =
+{
+    #if defined (CBR_110)
+    CBR_110,
+    #endif
+    #if defined (CBR_300)
+    CBR_300,
+    #endif
+    #if defined (CBR_600)
+    CBR_600,
+    #endif
+    #if defined (CBR_1200)
+    CBR_1200,
+    #endif
+    #if defined (CBR_2400)
+    CBR_2400,
+    #endif
+    #if defined (CBR_4800)
+    CBR_4800,
+    #endif
+    #if defined (CBR_9600)
+    CBR_9600,
+    #endif
+    #if defined (CBR_14400)
+    CBR_14400,
+    #endif
+    #if defined (CBR_19200)
+    CBR_19200,
+    #endif
+    #if defined (CBR_38400)
+    CBR_38400,
+    #endif
+    #if defined (CBR_56000)
+    CBR_56000,
+    #endif
+    #if defined (CBR_57600)
+    CBR_57600,
+    #endif
+    #if defined (CBR_115200)
+    CBR_115200,
+    #endif
+    #if defined (CBR_128000)
+    CBR_128000,
+    #endif
+    #if defined (CBR_256000)
+    CBR_256000
+    #endif
+};
+
+static const qint32 *standardRatesTable_end =
+        standardRatesTable + sizeof(standardRatesTable)/sizeof(*standardRatesTable);
+
+/*!
+   Returns a list standard values of baud rate that
+   are defined in MSDN and/or in Win SDK file winbase.h.
+*/
+QList<qint32> WinSerialPortEngine::standardRates()
+{
+   QList<qint32> l;
+   for (const qint32 *it = standardRatesTable; it != standardRatesTable_end; ++it)
+      l.append(*it);
+   return l;
+}
+
 /* Protected methods */
 
 /*!
diff --git a/src/serialportengine_win_p.h b/src/serialportengine_win_p.h
index f8672f8..350c6e1 100755
--- a/src/serialportengine_win_p.h
+++ b/src/serialportengine_win_p.h
@@ -119,6 +119,9 @@ public:
     virtual void unlockNotification(NotificationLockerType type);
 #endif
 
+public:
+    static QList<qint32> standardRates();
+
 protected:
     virtual void detectDefaultSettings();
 
diff --git a/src/serialportinfo_mac.cpp b/src/serialportinfo_mac.cpp
index 5087d33..7e5de27 100644
--- a/src/serialportinfo_mac.cpp
+++ b/src/serialportinfo_mac.cpp
@@ -5,6 +5,7 @@
 #include "serialportinfo.h"
 #include "serialportinfo_p.h"
 #include "ttylocker_unix_p.h"
+#include "serialportengine_unix_p.h"
 
 #include <sys/param.h>
 
@@ -243,13 +244,7 @@ static QList<qint32> emptyList()
 
 QList<qint32> SerialPortInfo::standardRates() const
 {
-    static QList<qint32> rates = emptyList()
-            << 50 << 75 << 110 << 134 << 150 << 200 << 300 << 600 << 1200 << 1800
-            << 2400 << 4800 << 9600 << 19200 << 38400 << 57600
-            << 115200 << 230400 << 460800 << 500000 << 576000 << 921600
-            << 1000000 << 1152000 << 1500000 << 2000000 << 2500000
-            << 3000000 << 3500000 << 4000000;
-    return rates;
+    return UnixSerialPortEngine::standardRates();
 }
 
 bool SerialPortInfo::isBusy() const
diff --git a/src/serialportinfo_symbian.cpp b/src/serialportinfo_symbian.cpp
index c9055c5..dbf1bcb 100644
--- a/src/serialportinfo_symbian.cpp
+++ b/src/serialportinfo_symbian.cpp
@@ -4,6 +4,7 @@
 
 #include "serialportinfo.h"
 #include "serialportinfo_p.h"
+#include "serialportengine_symbian_p.h"
 
 #include <e32base.h>
 //#include <e32test.h>
@@ -29,7 +30,7 @@ _LIT(KBluetoothModuleName , "BTCOMM");
 _LIT(KInfraRedModuleName , "IRCOMM");
 _LIT(KACMModuleName, "ECACM");
 
-// Return false on error load. 
+// Return false on error load.
 static bool loadDevices()
 {
     TInt r = KErrNone;
@@ -54,7 +55,7 @@ static bool loadDevices()
     if ((r != KErrNone) && (r != KErrAlreadyExists))
         return false; //User::Leave(r);
 #endif
-    
+
     return true;
 }
 
@@ -68,7 +69,7 @@ QList<SerialPortInfo> SerialPortInfo::availablePorts()
 
     if (!loadDevices())
         return ports;
-    
+
     RCommServ server;
     TInt r = server.Connect();
     if (r != KErrNone)
@@ -122,7 +123,7 @@ QList<SerialPortInfo> SerialPortInfo::availablePorts()
             }
         }
     }
-    
+
     // FIXME: Get info about InfraRed ports.
     r = server.LoadCommModule(KInfraRedModuleName);
     //User::LeaveIfError(r);
@@ -172,23 +173,9 @@ QList<SerialPortInfo> SerialPortInfo::availablePorts()
     return ports;
 }
 
-static QList<qint32> emptyList()
-{
-    QList<qint32> list;
-    return list;
-}
-
 QList<qint32> SerialPortInfo::standardRates() const
 {
-    // See enum TBps in SDK:
-    // - epoc32/include/platform/d32comm.h for Symbian^3
-    // - epoc32/include/platform/d32public.h for Symbian SR1
-    static QList<qint32> rates = emptyList()
-    << 50 << 75 << 110 << 134 << 150 << 300 << 600 << 1200 << 1800 << 2000
-    << 2400 << 3600 << 4800 << 7200 << 9600 << 19200 << 38400 << 57600
-    << 115200 << 230400 << 460800 << 576000 << 1152000 << 4000000 << 921600
-    << 1843200; // 1843200 only for  Symbian SR1!
-    return rates;
+    return SymbianSerialPortEngine::standardRates();
 }
 
 bool SerialPortInfo::isBusy() const
diff --git a/src/serialportinfo_unix.cpp b/src/serialportinfo_unix.cpp
index 1300a23..50d5832 100644
--- a/src/serialportinfo_unix.cpp
+++ b/src/serialportinfo_unix.cpp
@@ -5,6 +5,7 @@
 #include "serialportinfo.h"
 #include "serialportinfo_p.h"
 #include "ttylocker_unix_p.h"
+#include "serialportengine_unix_p.h"
 
 #include <sys/types.h>
 #include <signal.h>
@@ -72,19 +73,6 @@ inline QStringList& filtersOfDevices()
 
 #endif
 
-static
-const qint32 standardRates_begin[] =
-{
-    50, 75, 110, 134, 150,
-    200, 300, 600, 1200, 1800,
-    2400, 4800, 9600, 19200, 38400,
-    57600, 115200, 230400, 460800,
-    500000, 576000, 921600, 1000000,
-    1152000, 1500000, 2000000, 2500000,
-    3000000, 3500000, 4000000
-}, *standardRates_end = standardRates_begin + sizeof(::standardRates_begin)/sizeof(*::standardRates_begin);
-
-
 QT_BEGIN_NAMESPACE_SERIALPORT
 
 
@@ -220,44 +208,7 @@ QList<SerialPortInfo> SerialPortInfo::availablePorts()
 
 QList<qint32> SerialPortInfo::standardRates() const
 {
-    QList<qint32> rates;
-    rates.reserve(standardRates_end - standardRates_begin);
-
-#if defined (Q_OS_LINUX) && defined (TIOCGSERIAL) && defined (TIOCSSERIAL)
-
-    int descriptor = ::open(systemLocation().toLocal8Bit().constData(),
-                            O_NOCTTY | O_NDELAY | O_RDWR);
-    if (descriptor != -1) {
-
-        struct serial_struct ser_info;
-
-        // This call with may TIOCGSERIAL be not supported on some
-        // USB/Serial converters (for example, PL2303).
-        int result = ::ioctl(descriptor, TIOCGSERIAL, &ser_info);
-        ::close(descriptor);
-        if ((result != -1) && (ser_info.baud_base > 0)) {
-
-            for (int i = 1, max = ser_info.baud_base / 50; i <= max; ++i) {
-                result = ser_info.baud_base / i;
-
-                //append to list only rates presented in array standardRates_begin
-                if ((qBinaryFind(standardRates_begin, standardRates_end, result) != standardRates_end)
-                        && !rates.contains(result)) {
-                    rates.append(result);
-                }
-            }
-        }
-    }
-
-#else
-
-    for (const qint32 *i = standardRates_begin; i != standardRates_end; ++i)
-        rates.append(*i);
-
-#endif
-
-    qSort(rates);
-    return rates;
+    return UnixSerialPortEngine::standardRates();
 }
 
 bool SerialPortInfo::isBusy() const
diff --git a/src/serialportinfo_win.cpp b/src/serialportinfo_win.cpp
index 3140c5c..b024e20 100644
--- a/src/serialportinfo_win.cpp
+++ b/src/serialportinfo_win.cpp
@@ -4,6 +4,7 @@
 
 #include "serialportinfo.h"
 #include "serialportinfo_p.h"
+#include "serialportengine_win_p.h"
 
 #include <qt_windows.h>
 #include <objbase.h>
@@ -306,58 +307,7 @@ QList<SerialPortInfo> SerialPortInfo::availablePorts()
 
 QList<qint32> SerialPortInfo::standardRates() const
 {
-    QList<qint32> rates;
-
-    QString location = systemLocation();
-    QByteArray nativeFilePath = QByteArray((const char *)location.utf16(), location.size() * 2 + 1);
-
-    HANDLE descriptor = ::CreateFile((const wchar_t*)nativeFilePath.constData(),
-                                     GENERIC_READ | GENERIC_WRITE, 0, 0, OPEN_EXISTING, 0, 0);
-
-    if (descriptor != INVALID_HANDLE_VALUE) {
-        COMMPROP prop;
-        if ((::GetCommProperties(descriptor, &prop) != 0) && prop.dwSettableBaud) {
-            if (prop.dwSettableBaud & BAUD_075)
-                rates.append(75);
-            if (prop.dwSettableBaud & BAUD_110)
-                rates.append(110);
-            if (prop.dwSettableBaud & BAUD_150)
-                rates.append(150);
-            if (prop.dwSettableBaud & BAUD_300)
-                rates.append(300);
-            if (prop.dwSettableBaud & BAUD_600)
-                rates.append(600);
-            if (prop.dwSettableBaud & BAUD_1200)
-                rates.append(1200);
-            if (prop.dwSettableBaud & BAUD_1800)
-                rates.append(1800);
-            if (prop.dwSettableBaud & BAUD_2400)
-                rates.append(2400);
-            if (prop.dwSettableBaud & BAUD_4800)
-                rates.append(4800);
-            if (prop.dwSettableBaud & BAUD_7200)
-                rates.append(7200);
-            if (prop.dwSettableBaud & BAUD_9600)
-                rates.append(9600);
-            if (prop.dwSettableBaud & BAUD_14400)
-                rates.append(14400);
-            if (prop.dwSettableBaud & BAUD_19200)
-                rates.append(19200);
-            if (prop.dwSettableBaud & BAUD_38400)
-                rates.append(38400);
-            if (prop.dwSettableBaud & BAUD_56K)
-                rates.append(56000);
-            if (prop.dwSettableBaud & BAUD_57600)
-                rates.append(57600);
-            if (prop.dwSettableBaud & BAUD_115200)
-                rates.append(115200);
-            if (prop.dwSettableBaud & BAUD_128K)
-                rates.append(128000);
-        }
-        ::CloseHandle(descriptor);
-    }
-
-    return rates;
+    return WinSerialPortEngine::standardRates();
 }
 
 bool SerialPortInfo::isBusy() const