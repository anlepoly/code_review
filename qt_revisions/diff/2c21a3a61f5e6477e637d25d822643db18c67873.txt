diff --git a/src/quick/items/qquickmousearea.cpp b/src/quick/items/qquickmousearea.cpp
index cf6045e..b870443 100644
--- a/src/quick/items/qquickmousearea.cpp
+++ b/src/quick/items/qquickmousearea.cpp
@@ -52,6 +52,9 @@
 #include <float.h>
 
 QT_BEGIN_NAMESPACE
+
+DEFINE_BOOL_CONFIG_OPTION(qmlVisualTouchDebugging, QML_VISUAL_TOUCH_DEBUGGING)
+
 static const int PressAndHoldDelay = 800;
 
 QQuickDrag::QQuickDrag(QObject *parent)
@@ -198,6 +201,9 @@ void QQuickMouseAreaPrivate::init()
     Q_Q(QQuickMouseArea);
     q->setAcceptedMouseButtons(Qt::LeftButton);
     q->setFiltersChildMouseEvents(true);
+    if (qmlVisualTouchDebugging()) {
+        q->setFlag(QQuickItem::ItemHasContents);
+    }
 }
 
 void QQuickMouseAreaPrivate::saveEvent(QMouseEvent *event)
@@ -1165,4 +1171,21 @@ QQuickDrag *QQuickMouseArea::drag()
     return d->drag;
 }
 
+QSGNode *QQuickMouseArea::updatePaintNode(QSGNode *oldNode, UpdatePaintNodeData *data)
+{
+    Q_UNUSED(data);
+    Q_D(QQuickMouseArea);
+
+    if (!qmlVisualTouchDebugging())
+        return 0;
+
+    QSGRectangleNode *rectangle = static_cast<QSGRectangleNode *>(oldNode);
+    if (!rectangle) rectangle = d->sceneGraphContext()->createRectangleNode();
+
+    rectangle->setRect(QRectF(0, 0, width(), height()));
+    rectangle->setColor(QColor(255, 0, 0, 50));
+    rectangle->update();
+    return rectangle;
+}
+
 QT_END_NAMESPACE
diff --git a/src/quick/items/qquickmousearea_p.h b/src/quick/items/qquickmousearea_p.h
index 98034a6..7513ca3 100644
--- a/src/quick/items/qquickmousearea_p.h
+++ b/src/quick/items/qquickmousearea_p.h
@@ -207,6 +207,7 @@ protected:
     virtual void geometryChanged(const QRectF &newGeometry,
                                  const QRectF &oldGeometry);
     virtual void itemChange(ItemChange change, const ItemChangeData& value);
+    virtual QSGNode *updatePaintNode(QSGNode *, UpdatePaintNodeData *);
 
 private:
     void handlePress();
diff --git a/src/quick/items/qquickmultipointtoucharea.cpp b/src/quick/items/qquickmultipointtoucharea.cpp
index 32c8c38..766ce67 100644
--- a/src/quick/items/qquickmultipointtoucharea.cpp
+++ b/src/quick/items/qquickmultipointtoucharea.cpp
@@ -41,6 +41,8 @@
 
 #include "qquickmultipointtoucharea_p.h"
 #include <QtQuick/qquickcanvas.h>
+#include <private/qsgadaptationlayer_p.h>
+#include <private/qquickitem_p.h>
 #include <QEvent>
 #include <QMouseEvent>
 #include <math.h>
@@ -48,6 +50,8 @@
 
 QT_BEGIN_NAMESPACE
 
+DEFINE_BOOL_CONFIG_OPTION(qmlVisualTouchDebugging, QML_VISUAL_TOUCH_DEBUGGING)
+
 /*!
     \qmlclass TouchPoint QQuickTouchPoint
     \inqmlmodule QtQuick 2
@@ -307,6 +311,9 @@ QQuickMultiPointTouchArea::QQuickMultiPointTouchArea(QQuickItem *parent)
 {
     setAcceptedMouseButtons(Qt::LeftButton);
     setFiltersChildMouseEvents(true);
+    if (qmlVisualTouchDebugging()) {
+        setFlag(QQuickItem::ItemHasContents);
+    }
 }
 
 QQuickMultiPointTouchArea::~QQuickMultiPointTouchArea()
@@ -738,4 +745,20 @@ bool QQuickMultiPointTouchArea::shouldFilter(QEvent *event)
     return false;
 }
 
+QSGNode *QQuickMultiPointTouchArea::updatePaintNode(QSGNode *oldNode, UpdatePaintNodeData *data)
+{
+    Q_UNUSED(data);
+
+    if (!qmlVisualTouchDebugging())
+        return 0;
+
+    QSGRectangleNode *rectangle = static_cast<QSGRectangleNode *>(oldNode);
+    if (!rectangle) rectangle = QQuickItemPrivate::get(this)->sceneGraphContext()->createRectangleNode();
+
+    rectangle->setRect(QRectF(0, 0, width(), height()));
+    rectangle->setColor(QColor(255, 0, 0, 50));
+    rectangle->update();
+    return rectangle;
+}
+
 QT_END_NAMESPACE
diff --git a/src/quick/items/qquickmultipointtoucharea_p.h b/src/quick/items/qquickmultipointtoucharea_p.h
index b56d88b..e611ce3 100644
--- a/src/quick/items/qquickmultipointtoucharea_p.h
+++ b/src/quick/items/qquickmultipointtoucharea_p.h
@@ -251,6 +251,7 @@ protected:
     bool sendMouseEvent(QMouseEvent *event);
     bool shouldFilter(QEvent *event);
     void grabGesture();
+    virtual QSGNode *updatePaintNode(QSGNode *, UpdatePaintNodeData *);
 
 private:
     void ungrab();