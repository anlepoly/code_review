diff --git a/tools/qdoc3/atom.cpp b/tools/qdoc3/atom.cpp
index 547b3ea..fba9bd6 100644
--- a/tools/qdoc3/atom.cpp
+++ b/tools/qdoc3/atom.cpp
@@ -247,13 +247,29 @@ static const struct {
 
 /*! \fn Atom::Atom(Type type, const QString& string)
 
-  Constructs an atom (\a type, \a string) outside of any atom list.
+  Constructs an atom of the specified \a type with the single
+  parameter \a string and does not put the new atom in a list.
 */
 
-/*! \fn Atom(Atom *prev, Type type, const QString& string)
+/*! \fn Atom::Atom(Type type, const QString& p1, const QString& p2)
 
-  Constructs an atom (\a type, \a string) that follows \a prev in \a
-  prev's atom list.
+  Constructs an atom of the specified \a type with the two
+  parameters \a p1 and \a p2 and does not put the new atom
+  in a list.
+*/
+
+/*! \fn Atom(Atom *previous, Type type, const QString& string)
+
+  Constructs an atom of the specified \a type with the single
+  parameter \a string and inserts the new atom into the list
+  after the \a previous atom.
+*/
+
+/*! \fn Atom::Atom(Atom* previous, Type type, const QString& p1, const QString& p2)
+
+  Constructs an atom of the specified \a type with the two
+  parameters \a p1 and \a p2 and inserts the new atom into
+  the list after the \a previous atom.
 */
 
 /*! \fn void Atom::appendChar(QChar ch)
@@ -286,7 +302,7 @@ static const struct {
  */
 const Atom* Atom::next(Type t) const
 {
-    return (nxt && (nxt->type() == t)) ? nxt : 0;
+    return (next_ && (next_->type() == t)) ? next_ : 0;
 }
 
 /*!
@@ -295,7 +311,7 @@ const Atom* Atom::next(Type t) const
  */
 const Atom* Atom::next(Type t, const QString& s) const
 {
-    return (nxt && (nxt->type() == t) && (nxt->string() == s)) ? nxt : 0;
+    return (next_ && (next_->type() == t) && (next_->string() == s)) ? next_ : 0;
 }
 
 /*! \fn const Atom *Atom::next() const
diff --git a/tools/qdoc3/atom.h b/tools/qdoc3/atom.h
index 665477f..02510ad 100644
--- a/tools/qdoc3/atom.h
+++ b/tools/qdoc3/atom.h
@@ -136,46 +136,46 @@ class Atom
     };
 
     Atom(Type type, const QString& string = "")
-	: nxt(0), typ(type) 
+        : next_(0), type_(type)
     {
         strs << string; 
     }
 
     Atom(Type type, const QString& p1, const QString& p2)
-	: nxt(0), typ(type) 
+        : next_(0), type_(type)
     { 
         strs << p1; 
         if (!p2.isEmpty()) 
             strs << p2; 
     }
 
-    Atom(Atom* prev, Type type, const QString& string = "")
-	: nxt(prev->nxt), typ(type) 
+    Atom(Atom* previous, Type type, const QString& string = "")
+        : next_(previous->next_), type_(type)
     { 
         strs << string; 
-        prev->nxt = this; 
+        previous->next_ = this;
     }
     
-    Atom(Atom* prev, Type type, const QString& p1, const QString& p2)
-	: nxt(prev->nxt), typ(type) 
+    Atom(Atom* previous, Type type, const QString& p1, const QString& p2)
+        : next_(previous->next_), type_(type)
     { 
         strs << p1; 
         if (!p2.isEmpty()) 
             strs << p2; 
-        prev->nxt = this; 
+        previous->next_ = this;
     }
 
     void appendChar(QChar ch) { strs[0] += ch; }
     void appendString(const QString& string) { strs[0] += string; }
     void chopString() { strs[0].chop(1); }
     void setString(const QString& string) { strs[0] = string; }
-    Atom* next() { return nxt; }
-    void setNext(Atom* newNext) { nxt = newNext; }
+    Atom* next() { return next_; }
+    void setNext(Atom* newNext) { next_ = newNext; }
 
-    const Atom* next() const { return nxt; }
+    const Atom* next() const { return next_; }
     const Atom* next(Type t) const;
     const Atom* next(Type t, const QString& s) const;
-    Type type() const { return typ; }
+    Type type() const { return type_; }
     QString typeString() const;
     const QString& string() const { return strs[0]; }
     const QString& string(int i) const { return strs[i]; }
@@ -203,8 +203,8 @@ class Atom
     static QString UPPERROMAN_;
 
  private:
-    Atom* nxt;
-    Type typ;
+    Atom* next_;
+    Type type_;
     QStringList strs;
 };
 
diff --git a/tools/qdoc3/ditaxmlgenerator.cpp b/tools/qdoc3/ditaxmlgenerator.cpp
index 5e0f165..6909f06 100644
--- a/tools/qdoc3/ditaxmlgenerator.cpp
+++ b/tools/qdoc3/ditaxmlgenerator.cpp
@@ -1487,11 +1487,18 @@ int DitaXmlGenerator::generateAtom(const Atom *atom,
         break;
     case Atom::TableLeft:
         {
+           QString attr;
+           if ((atom->count() > 0) && (atom->string(0) == "borderless"))
+               attr = "borderless";
+           else if ((atom->count() > 1) && (atom->string(1) == "borderless"))
+               attr = "borderless";
             if (in_para) {
                 writeEndTag(); // </p>
                 in_para = false;
             }
             writeStartTag(DT_table);
+            if (!attr.isEmpty())
+                xmlWriter().writeAttribute("outputclass",attr);
             numTableRows = 0;
             if (tableColumnCount != 0) {
                 qDebug() << "ERROR: Nested tables!";
diff --git a/tools/qdoc3/doc.cpp b/tools/qdoc3/doc.cpp
index a086d28..87b4ce6 100644
--- a/tools/qdoc3/doc.cpp
+++ b/tools/qdoc3/doc.cpp
@@ -55,7 +55,6 @@
 #include <qregexp.h>
 #include <ctype.h>
 #include <limits.h>
-#include <qdebug.h>
 
 QT_BEGIN_NAMESPACE
 
@@ -974,6 +973,7 @@ void DocParser::parse(const QString& source,
                         }
                         else if (openedCommands.top() == CMD_TABLE) {
                             p1 = "1,1";
+                            p2 = "";
                             if (isLeftBraceAhead()) {
                                 p1 = getArgument();
                                 if (isLeftBraceAhead()) {
@@ -1214,10 +1214,12 @@ void DocParser::parse(const QString& source,
                         startFormat(ATOM_FORMATTING_SUPERSCRIPT, cmd);
                         break;
                     case CMD_TABLE:
-                        p1 = getRestOfLine();
+                        //p1 = getRestOfLine();
+                        p1 = getOptionalArgument();
+                        p2 = getOptionalArgument();
                         if (openCommand(cmd)) {
                             leavePara();
-                            append(Atom::TableLeft, p1);
+                            append(Atom::TableLeft, p1, p2);
                             inTableHeader = false;
                             inTableRow = false;
                             inTableItem = false;
diff --git a/tools/qdoc3/htmlgenerator.cpp b/tools/qdoc3/htmlgenerator.cpp
index 15e93c2..1dcbc13 100644
--- a/tools/qdoc3/htmlgenerator.cpp
+++ b/tools/qdoc3/htmlgenerator.cpp
@@ -1009,23 +1009,39 @@ int HtmlGenerator::generateAtom(const Atom *atom,
         }
         break;
     case Atom::TableLeft:
-        if (in_para) {
-            out() << "</p>\n";
-            in_para = false;
-        }
-        if (!atom->string().isEmpty()) {
-            if (atom->string().contains("%")) {
-                out() << "<table class=\"generic\" width=\""
-                      << atom->string() << "\">\n ";
+        {
+            QString p1, p2;
+            QString attr = "generic";
+            QString width;
+            if (in_para) {
+                out() << "</p>\n";
+                in_para = false;
             }
-            else {
-                out() << "<table class=\"generic\">\n";
+            if (atom->count() > 0) {
+                p1 = atom->string(0);
+                if (atom->count() > 1)
+                    p2 = atom->string(1);
             }
+            if (p1 == "borderless" || p2 == "borderless")
+                qDebug() << "ATOM::TABLELEFT:" << atom->count() << p1 << p2;
+            if (!p1.isEmpty()) {
+                if (p1 == "borderless")
+                    attr = p1;
+                else if (p1.contains("%"))
+                    width = p1;
+            }
+            if (!p2.isEmpty()) {
+                if (p2 == "borderless")
+                    attr = p2;
+                else if (p2.contains("%"))
+                    width = p2;
+            }
+            out() << "<table class=\"" << attr << "\"";
+            if (!width.isEmpty())
+                out() << " width=\"" << width << "\">";
+            out() << "\n ";
+            numTableRows = 0;
         }
-        else {
-            out() << "<table class=\"generic\">\n";
-        }
-        numTableRows = 0;
         break;
     case Atom::TableRight:
         out() << "</table>\n";
diff --git a/tools/qdoc3/text.cpp b/tools/qdoc3/text.cpp
index 01ab83a..93c95a3 100644
--- a/tools/qdoc3/text.cpp
+++ b/tools/qdoc3/text.cpp
@@ -92,11 +92,21 @@ Text& Text::operator<<(const QString& string)
 
 Text& Text::operator<<(const Atom& atom)
 {
-    if (first == 0) {
-	first = new Atom(atom.type(), atom.string());
-	last = first;
-    } else {
-	last = new Atom(last, atom.type(), atom.string());
+    if (atom.count() < 2) {
+        if (first == 0) {
+            first = new Atom(atom.type(), atom.string());
+            last = first;
+        }
+        else
+            last = new Atom(last, atom.type(), atom.string());
+    }
+    else {
+        if (first == 0) {
+            first = new Atom(atom.type(), atom.string(), atom.string(1));
+            last = first;
+        }
+        else
+            last = new Atom(last, atom.type(), atom.string(), atom.string(1));
     }
     return *this;
 }