diff --git a/qmake/generators/win32/msvc_nmake.cpp b/qmake/generators/win32/msvc_nmake.cpp
index 6a1d6d1..d899c70 100644
--- a/qmake/generators/win32/msvc_nmake.cpp
+++ b/qmake/generators/win32/msvc_nmake.cpp
@@ -409,6 +409,7 @@ void NmakeMakefileGenerator::writeBuildRulesPart(QTextStream &t)
                 manifest = escapeFilePath(fileFixify(manifest));
             }
 
+            const QString resourceId = (templateName == "app") ? "1" : "2";
             const bool incrementalLinking = project->values("QMAKE_LFLAGS").toQStringList().filter(QRegExp("(/|-)INCREMENTAL:NO")).isEmpty();
             if (incrementalLinking) {
                 // Link a resource that contains the manifest without modifying the exe/dll after linking.
@@ -418,7 +419,8 @@ void NmakeMakefileGenerator::writeBuildRulesPart(QTextStream &t)
                 QString manifest_bak = escapeFilePath(target +  "_manifest.bak");
                 project->values("QMAKE_CLEAN") << manifest_rc << manifest_res;
 
-                t << "\n\techo 1 /* CREATEPROCESS_MANIFEST_RESOURCE_ID */ 24 /* RT_MANIFEST */ "
+                t << "\n\techo " << resourceId
+                  << " /* CREATEPROCESS_MANIFEST_RESOURCE_ID */ 24 /* RT_MANIFEST */ "
                   << cQuoted(unescapeFilePath(manifest)) << ">" << manifest_rc;
 
                 if (generateManifest) {
@@ -441,7 +443,6 @@ void NmakeMakefileGenerator::writeBuildRulesPart(QTextStream &t)
                 // directly embed the manifest in the executable after linking
                 t << "\n\t";
                 writeLinkCommand(t, extraLFlags);
-                const QString resourceId = (templateName == "app") ? "1" : "2";
                 t << "\n\t" << "mt.exe /nologo /manifest " << manifest
                   << " /outputresource:$(DESTDIR_TARGET);" << resourceId;
             }