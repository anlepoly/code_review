diff --git a/src/gui/image/qpixmap.cpp b/src/gui/image/qpixmap.cpp
index b581248..cefb8ed 100644
--- a/src/gui/image/qpixmap.cpp
+++ b/src/gui/image/qpixmap.cpp
@@ -715,7 +715,7 @@ bool QPixmap::load(const QString &fileName, const char *format, Qt::ImageConvers
         return false;
 
     QFileInfo info(fileName);
-    QString key = QLatin1Literal("qt_pixmap")
+    QString key = QLatin1String("qt_pixmap")
                   % info.absoluteFilePath()
                   % HexString<uint>(info.lastModified().toTime_t())
                   % HexString<quint64>(info.size())
diff --git a/src/gui/painting/qbrush.cpp b/src/gui/painting/qbrush.cpp
index fe9b370..2f0fb9f 100644
--- a/src/gui/painting/qbrush.cpp
+++ b/src/gui/painting/qbrush.cpp
@@ -100,7 +100,7 @@ QPixmap qt_pixmapForBrush(int brushStyle, bool invert)
 {
 
     QPixmap pm;
-    QString key = QLatin1Literal("$qt-brush$")
+    QString key = QLatin1String("$qt-brush$")
                   % HexString<uint>(brushStyle)
                   % QLatin1Char(invert ? '1' : '0');
     if (!QPixmapCache::find(key, pm)) {
diff --git a/src/gui/painting/qpainter.cpp b/src/gui/painting/qpainter.cpp
index 97b0f91..68e60ed 100644
--- a/src/gui/painting/qpainter.cpp
+++ b/src/gui/painting/qpainter.cpp
@@ -6109,7 +6109,7 @@ static QPixmap generateWavyPixmap(qreal maxRadius, const QPen &pen)
 {
     const qreal radiusBase = qMax(qreal(1), maxRadius);
 
-    QString key = QLatin1Literal("WaveUnderline-")
+    QString key = QLatin1String("WaveUnderline-")
                   % pen.color().name()
                   % HexString<qreal>(radiusBase);
 
diff --git a/src/widgets/kernel/qicon.cpp b/src/widgets/kernel/qicon.cpp
index 369e26c..62c99a6 100644
--- a/src/widgets/kernel/qicon.cpp
+++ b/src/widgets/kernel/qicon.cpp
@@ -266,7 +266,7 @@ QPixmap QPixmapIconEngine::pixmap(const QSize &size, QIcon::Mode mode, QIcon::St
         actualSize.scale(size, Qt::KeepAspectRatio);
 
     // #### Qt5 no idea what this really does, but we need to remove the QApp and style references
-    QString key = QLatin1Literal("qt_")
+    QString key = QLatin1String("qt_")
                   % HexString<quint64>(pm.cacheKey())
                   % HexString<uint>(pe->mode)
                   % HexString<quint64>(QApplication::palette().cacheKey())
diff --git a/src/widgets/kernel/qiconloader.cpp b/src/widgets/kernel/qiconloader.cpp
index a0ee95c..e1828fd 100644
--- a/src/widgets/kernel/qiconloader.cpp
+++ b/src/widgets/kernel/qiconloader.cpp
@@ -507,7 +507,7 @@ QPixmap PixmapEntry::pixmap(const QSize &size, QIcon::Mode mode, QIcon::State st
         basePixmap.load(filename);
 
     int actualSize = qMin(size.width(), size.height());
-    QString key = QLatin1Literal("$qt_theme_")
+    QString key = QLatin1String("$qt_theme_")
                   % HexString<qint64>(basePixmap.cacheKey())
                   % HexString<int>(mode)
                   % HexString<qint64>(qApp->palette().cacheKey())
diff --git a/src/widgets/styles/qgtkstyle.cpp b/src/widgets/styles/qgtkstyle.cpp
index 87d335b..dbaee40 100644
--- a/src/widgets/styles/qgtkstyle.cpp
+++ b/src/widgets/styles/qgtkstyle.cpp
@@ -707,7 +707,7 @@ void QGtkStyle::drawPrimitive(PrimitiveElement element,
         // thin rectangular images
         const int pmSize = 64;
         const int border = proxy()->pixelMetric(PM_DefaultFrameWidth, option, widget);
-        const QString pmKey = QLatin1Literal("windowframe") % HexString<uint>(option->state);
+        const QString pmKey = QLatin1String("windowframe") % HexString<uint>(option->state);
 
         QPixmap pixmap;
         QRect pmRect(QPoint(0,0), QSize(pmSize, pmSize));
diff --git a/src/widgets/styles/qplastiquestyle.cpp b/src/widgets/styles/qplastiquestyle.cpp
index cae015f..51c6c44 100644
--- a/src/widgets/styles/qplastiquestyle.cpp
+++ b/src/widgets/styles/qplastiquestyle.cpp
@@ -487,7 +487,7 @@ static void qBrushSetAlphaF(QBrush *brush, qreal alpha)
         // Modify the texture - ridiculously expensive.
         QPixmap texture = brush->texture();
         QPixmap pixmap;
-        QString name = QLatin1Literal("qbrushtexture-alpha")
+        QString name = QLatin1String("qbrushtexture-alpha")
                        % HexString<qreal>(alpha)
                        % HexString<qint64>(texture.cacheKey());
         if (!QPixmapCache::find(name, pixmap)) {
@@ -550,7 +550,7 @@ static QBrush qBrushLight(QBrush brush, int light)
         // Modify the texture - ridiculously expensive.
         QPixmap texture = brush.texture();
         QPixmap pixmap;
-        QString name = QLatin1Literal("qbrushtexture-light")
+        QString name = QLatin1String("qbrushtexture-light")
                        % HexString<int>(light)
                        % HexString<qint64>(texture.cacheKey());
 
@@ -612,7 +612,7 @@ static QBrush qBrushDark(QBrush brush, int dark)
         // Modify the texture - ridiculously expensive.
         QPixmap texture = brush.texture();
         QPixmap pixmap;
-        QString name = QLatin1Literal("qbrushtexture-dark")
+        QString name = QLatin1String("qbrushtexture-dark")
                        % HexString<int>(dark)
                        % HexString<qint64>(texture.cacheKey());
 
@@ -739,7 +739,7 @@ static QColor mergedColors(const QColor &colorA, const QColor &colorB, int facto
 static void qt_plastique_draw_gradient(QPainter *painter, const QRect &rect, const QColor &gradientStart,
                                        const QColor &gradientStop)
 {
-    QString gradientName = QLatin1Literal("qplastique-g")
+    QString gradientName = QLatin1String("qplastique-g")
                    % HexString<int>(rect.width())
                    % HexString<int>(rect.height())
                    % HexString<QRgb>(gradientStart.rgba())
diff --git a/tests/auto/corelib/tools/qstringbuilder/qstringbuilder1/stringbuilder.cpp b/tests/auto/corelib/tools/qstringbuilder/qstringbuilder1/stringbuilder.cpp
index 862789c..6e4636b 100644
--- a/tests/auto/corelib/tools/qstringbuilder/qstringbuilder1/stringbuilder.cpp
+++ b/tests/auto/corelib/tools/qstringbuilder/qstringbuilder1/stringbuilder.cpp
@@ -68,7 +68,6 @@ void runScenario()
 {
     // this code is latin1. TODO: replace it with the utf8 block below, once
     // strings default to utf8.
-    QLatin1Literal l1literal(LITERAL);
     QLatin1String l1string(LITERAL);
     QString string(l1string);
     QStringRef stringref(&string, 2, 10);
@@ -78,14 +77,10 @@ void runScenario()
     QString r3 = QString::fromUtf8(UTF8_LITERAL UTF8_LITERAL);
     QString r;
 
-    r = l1literal Q l1literal;
-    QCOMPARE(r, r2);
     r = string P string;
     QCOMPARE(r, r2);
     r = stringref Q stringref;
     QCOMPARE(r, QString(stringref.toString() + stringref.toString()));
-    r = string Q l1literal;
-    QCOMPARE(r, r2);
     r = string P l1string;
     QCOMPARE(r, r2);
     r = string Q QStringLiteral(LITERAL);
diff --git a/tests/auto/network/socket/qlocalsocket/tst_qlocalsocket.cpp b/tests/auto/network/socket/qlocalsocket/tst_qlocalsocket.cpp
index 2715bfc..1f531f3 100644
--- a/tests/auto/network/socket/qlocalsocket/tst_qlocalsocket.cpp
+++ b/tests/auto/network/socket/qlocalsocket/tst_qlocalsocket.cpp
@@ -1153,7 +1153,7 @@ void tst_QLocalSocket::verifyListenWithDescriptor_data()
     QTest::addColumn<bool>("abstract");
     QTest::addColumn<bool>("bound");
 
-    QTest::newRow("normal") << QDir::tempPath() + QLatin1Literal("/testsocket") << false << true;
+    QTest::newRow("normal") << QDir::tempPath() + QLatin1String("/testsocket") << false << true;
 #ifdef Q_OS_LINUX
     QTest::newRow("absrtact") << QString::fromLatin1("abstractsocketname") << true << true;
     QTest::newRow("abstractwithslash") << QString::fromLatin1("abstractsocketwitha/inthename") << true << true;