diff --git a/src/corelib/statemachine/qstate.cpp b/src/corelib/statemachine/qstate.cpp
index 14432ed..39651b9 100644
--- a/src/corelib/statemachine/qstate.cpp
+++ b/src/corelib/statemachine/qstate.cpp
@@ -495,6 +495,8 @@ bool QState::event(QEvent *e)
     if ((e->type() == QEvent::ChildAdded) || (e->type() == QEvent::ChildRemoved)) {
         d->childStatesListNeedsRefresh = true;
         d->transitionsListNeedsRefresh = true;
+        if ((e->type() == QEvent::ChildRemoved) && (static_cast<QChildEvent *>(e)->child() == d->initialState))
+            d->initialState = 0;
     }
     return QAbstractState::event(e);
 }
diff --git a/tests/auto/corelib/statemachine/qstatemachine/tst_qstatemachine.cpp b/tests/auto/corelib/statemachine/qstatemachine/tst_qstatemachine.cpp
index 6fde415..102f96b 100644
--- a/tests/auto/corelib/statemachine/qstatemachine/tst_qstatemachine.cpp
+++ b/tests/auto/corelib/statemachine/qstatemachine/tst_qstatemachine.cpp
@@ -189,6 +189,7 @@ private slots:
     void initialStateIsEnteredBeforeStartedEmitted();
     void deletePropertyAssignmentObjectBeforeEntry();
     void deletePropertyAssignmentObjectBeforeRestore();
+    void deleteInitialState();
 };
 
 class TestState : public QState
@@ -4073,5 +4074,17 @@ void tst_QStateMachine::deletePropertyAssignmentObjectBeforeRestore()
     delete o2;
 }
 
+void tst_QStateMachine::deleteInitialState()
+{
+    QStateMachine machine;
+    QState *s1 = new QState(&machine);
+    machine.setInitialState(s1);
+    delete s1;
+    QTest::ignoreMessage(QtWarningMsg, "QStateMachine::start: No initial state set for machine. Refusing to start.");
+    machine.start();
+    // Shouldn't crash
+    QCoreApplication::processEvents();
+}
+
 QTEST_MAIN(tst_QStateMachine)
 #include "tst_qstatemachine.moc"