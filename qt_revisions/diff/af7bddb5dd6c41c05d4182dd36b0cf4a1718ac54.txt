diff --git a/doc/src/examples/grue.qdoc b/doc/src/examples/grue.qdoc
index 136e3d4..c2be06e 100644
--- a/doc/src/examples/grue.qdoc
+++ b/doc/src/examples/grue.qdoc
@@ -80,7 +80,7 @@
 /*!
     \example sensors/grue/plugin
     \title Grue Sensor Implementation
-    \brief The Grue sensor implementation lives in a plugin that is loaded by the QtSensors library.
+    \brief The Grue sensor implementation lives in a plugin that is loaded by the Qt Sensors library.
 
     The Grue sensor needs a backend before it can be used. The backend provided
     is rather basic and it relies on some kind of light sensor to work but it
@@ -128,7 +128,7 @@
     \brief The Grue sensor console application demonstrates use of the Grue sensor.
 
     This is a simple commandline application. It demonstrates how to use the generic
-    access feature of QtSensors to avoid a link-time dependency on the Grue Sensor
+    access feature of Qt Sensors to avoid a link-time dependency on the Grue Sensor
     library.
 
     \sa {Grue Sensor Example}
diff --git a/doc/src/examples/qmlqtsensors.qdoc b/doc/src/examples/qmlqtsensors.qdoc
index 4e997c8..4fc9e7d 100644
--- a/doc/src/examples/qmlqtsensors.qdoc
+++ b/doc/src/examples/qmlqtsensors.qdoc
@@ -27,9 +27,9 @@
 
 /*!
     \example sensors/qmlqtsensors
-    \title QML QtSensors example
+    \title QML Qt Sensors example
     \ingroup qtsensors-examples
-    \brief The QML QtSensors example demonstrates the QML sensors elements in the QtSensors 5 import.
+    \brief The QML Qt Sensors example demonstrates the QML sensors elements in the QtSensors 5 import.
     \image qmlqtsensors.jpg
 
 \section1 Overview
diff --git a/doc/src/examples/sensors.qdoc b/doc/src/examples/sensors.qdoc
index 530df3d..3bf57d9 100644
--- a/doc/src/examples/sensors.qdoc
+++ b/doc/src/examples/sensors.qdoc
@@ -27,11 +27,11 @@
 
 /*!
     \group qtsensors-examples
-    \title QtSensors Examples
-    \brief Examples for the QtSensors module
+    \title Qt Sensors Examples
+    \brief Examples for the Qt Sensors module
     \ingroup all-examples
 
-    These are the QtSensors examples.
+    These are the Qt Sensors examples.
 
     \generatelist related
 */
diff --git a/doc/src/imports/qtmobilitysensors1.qdoc b/doc/src/imports/qtmobilitysensors1.qdoc
index 7b068ca..40ec4b6 100644
--- a/doc/src/imports/qtmobilitysensors1.qdoc
+++ b/doc/src/imports/qtmobilitysensors1.qdoc
@@ -35,7 +35,7 @@
     This is the legacy QML import. It exists for compatibility with the QtMobiltiy 1.2 release
     and is not recommended for new applications.
 
-    The QtMobility.sensors import has the QtSensors C++ classes directly exported into the QML environment.
+    The QtMobility.sensors import has the Qt Sensors C++ classes directly exported into the QML environment.
     This causes some limitations due to the use of types that do not work in the QML environment.
     See \l{QtMobility.sensors QML Limitations}{below} for a list of the known limitations.
 
diff --git a/doc/src/imports/qtsensors5.qdoc b/doc/src/imports/qtsensors5.qdoc
index 6f1a46a..c889868 100644
--- a/doc/src/imports/qtsensors5.qdoc
+++ b/doc/src/imports/qtsensors5.qdoc
@@ -27,8 +27,8 @@
 
 /*!
     \qmlmodule QtSensors 5
-    \title QtSensors 5.x
-    \brief The QML import for QtSensors
+    \title Qt Sensors QML API
+    \brief The QML import for Qt Sensors
 
     \section1 Overview
 
@@ -40,7 +40,7 @@
     sensors.
 
     The plugin contains many sensor types and properties to read values.
-    As an example, consider the tilt sensor. The \l {QML QtSensors example}
+    As an example, consider the tilt sensor. The \l {QML Qt Sensors example}
     simply displays text on-screen to show the current tilt value.
 
     The QML code to read the value is quite simple. Below is a QML \l TiltSensor element
diff --git a/doc/src/porting.qdoc b/doc/src/porting.qdoc
index fcd3849..3911f34 100644
--- a/doc/src/porting.qdoc
+++ b/doc/src/porting.qdoc
@@ -27,15 +27,15 @@
 
 /*!
     \page qtsensors-porting.html
-    \title Porting Applications from QtMobility Sensors to QtSensors
+    \title Porting Applications from QtMobility Sensors to Qt Sensors
 
     \tableofcontents
 
     \section1 Overview
 
-    The initial release of QtSensors (5.0) is generally expected to be source
+    The initial release of Qt Sensors (5.0) is generally expected to be source
     compatible with QtMobility Sensors 1.2. This document attempts to explain
-    where things must be changed in order to port applications to QtSensors.
+    where things must be changed in order to port applications to Qt Sensors.
 
     \section1 QML
 
@@ -48,8 +48,8 @@
 
     \table
         \row
-            \o \l {QtSensors 5.x}{QML API}
-            \o Information about the QtSensors QML API
+            \o \l {Qt Sensors QML API}{QML API}
+            \o Information about the Qt Sensors QML API
         \row
             \o \l {QtMobility.sensors 1.x}{Legacy QML API}
             \o Information about the legacy QtMobility.sensors QML API
@@ -59,8 +59,8 @@
 
     \section2 Includes
 
-    QtMobility Sensors installed headers into a \c QtSensors directory. This is
-    also the directory that QtSensors uses. It is therefore expected that includes
+    QtMobility Sensors installed headers into a \c Qt Sensors directory. This is
+    also the directory that Qt Sensors uses. It is therefore expected that includes
     that worked with QtMobility Sensors should continue to work.
 
     For example:
@@ -74,7 +74,7 @@
     \section2 Macros and Namespace
 
     QtMobility Sensors was built in a \c QtMobility namespace. This was enabled by
-    the use of various macros. QtSensors does not normally build into a namespace
+    the use of various macros. Qt Sensors does not normally build into a namespace
     and the macros from QtMobility no longer exist.
 
     \list
@@ -85,7 +85,7 @@
     \endlist
 
     Note that Qt can be configured to build into a namespace. If Qt is built in this
-    way then QtSensors is also built into the nominated namespace. However, as this
+    way then Qt Sensors is also built into the nominated namespace. However, as this
     is optional, the macros for this are typically defined to do nothing.
 
     \list
@@ -100,7 +100,7 @@
     qtimestamp was previously defined as an opaque type equivalent to a quint64. It existed
     as a class due to an implementation detail.
 
-    In QtSensors, the API uses quint64 instead of qtimestamp. qtimestamp still exists as a
+    In Qt Sensors, the API uses quint64 instead of qtimestamp. qtimestamp still exists as a
     typedef so that applications that refer to qtimestamp can be compiled.
 
     \section1 Project Files
@@ -112,7 +112,7 @@
     MOBILITY += sensors
     \endcode
 
-    Applications should remove these lines and instead use this to enable the QtSensors API.
+    Applications should remove these lines and instead use this to enable the Qt Sensors API.
 
     \code
     QT += sensors
diff --git a/doc/src/qtsensors-backend.qdoc b/doc/src/qtsensors-backend.qdoc
index 5fad1bf..8e79100 100644
--- a/doc/src/qtsensors-backend.qdoc
+++ b/doc/src/qtsensors-backend.qdoc
@@ -27,10 +27,10 @@
 
 /*!
 \group sensors_backend_topics
-\title QtSensors Backend
-\brief Information about the QtSensors back end
+\title Qt Sensors Backend
+\brief Information about the Qt Sensors back end
 
-The QtSensors backend connects the QtSensors API to the platform services or hardware sensors.
+The Qt Sensors backend connects the Qt Sensors API to the platform services or hardware sensors.
 
 \tableofcontents
 
@@ -39,7 +39,7 @@ The QtSensors backend connects the QtSensors API to the platform services or har
 \section1 Backend API
 
 QSensor instances talk to a backend object. Backends are usually supplied
-with the QtSensors library for a specific device although third party
+with the Qt Sensors library for a specific device although third party
 backends may be used as well. A backend may talk
 directly to hardware or it may talk to a system service. In some instances
 it may even talk to another sensor.
diff --git a/doc/src/qtsensors-cpp.qdoc b/doc/src/qtsensors-cpp.qdoc
index ecb54b4..6740441 100644
--- a/doc/src/qtsensors-cpp.qdoc
+++ b/doc/src/qtsensors-cpp.qdoc
@@ -27,23 +27,23 @@
 
 /*!
 \page qtsensors-cpp.html
-\title QtSensors C++ API
-\brief Information about the QtSensors C++ API
+\title Qt Sensors C++ API
+\brief Information about the Qt Sensors C++ API
 
 \tableofcontents
 
 \section1 Sensor Types
 
-On a device there can be many types of sensors. Not all of the types that the QtSensors API
+On a device there can be many types of sensors. Not all of the types that the Qt Sensors API
 supports may be available. There may also be types available that are not defined in the
-QtSensors API. The types of sensors available on a device is found using the
+Qt Sensors API. The types of sensors available on a device is found using the
 \l QSensor::sensorTypes() function.
 
 For a list of built-in sensor types, see the \l{Sensor Classes} section below.
 
 \section1 Common Conventions
 
-Unless otherwise specified, QtSensors uses the
+Unless otherwise specified, Qt Sensors uses the
 \l{http://en.wikipedia.org/wiki/Cartesian_coordinate_system}{Right Hand Cartesian coordinate system}.
 
 \image sensors-coordinates.jpg
@@ -106,7 +106,7 @@ shows you information about available sensors.
 
 \section1 Front end, back end
 
-The QtSensors API has a front end, for application developers to use and a back end,
+The Qt Sensors API has a front end, for application developers to use and a back end,
 where device implementors write code to access their hardware. As an application
 developer you do not need to access the back end though it may be useful to understand
 how it works.
@@ -116,11 +116,11 @@ device plugin. Data comes back through the QSensorReading class.
 
 \image sensors-overview.png
 
-More information about the back end can be found in \l{QtSensors Backend}.
+More information about the back end can be found in \l{Qt Sensors Backend}.
 
 \section1 Main Classes
 
-The primary classes that make up the QtSensors API.
+The primary classes that make up the Qt Sensors API.
 
 \annotatedlist sensors_main
 
@@ -133,7 +133,7 @@ The best way to access sensor data is via one of these classes.
 \section1 Sensor Classes
 
 These classes provide convenience wrappers that reduce the need for casting.
-Each of these classes represents a sensor type that the QtSensors API knows
+Each of these classes represents a sensor type that the Qt Sensors API knows
 about. Note that additional types may be made available at run-time. See
 \l{Sensor Types} for more information.
 
diff --git a/doc/src/qtsensors.qdoc b/doc/src/qtsensors.qdoc
index 9a9a2b4..e19570f 100644
--- a/doc/src/qtsensors.qdoc
+++ b/doc/src/qtsensors.qdoc
@@ -28,33 +28,33 @@
 /*!
     \page qtsensors.html
     \title Qt Sensors
-    \brief The QtSensors API provides access to sensors via QML and C++ interfaces.
+    \brief The Qt Sensors API provides access to sensors via QML and C++ interfaces.
     \ingroup technology-apis
 
-    The QtSensors API provides access to sensors via QML and C++ interfaces.
+    The Qt Sensors API provides access to sensors via QML and C++ interfaces.
 
     \section1 Information for Application Writers
 
-    Applications can access QtSensors using QML or C++.
+    Applications can access Qt Sensors using QML or C++.
 
     \table
         \row
-            \o \l {QtSensors 5.x}{QML API}
-            \o Information about the QtSensors QML API
+            \o \l {Qt Sensors QML API}{QML API}
+            \o Information about the Qt Sensors QML API
         \row
-            \o \l {QtSensors C++ API}{C++ API}
-            \o Information about the QtSensors C++ API
+            \o \l {Qt Sensors C++ API}{C++ API}
+            \o Information about the Qt Sensors C++ API
         \row
-            \o \l {QtSensors Examples}{Examples}
-            \o Examples demonstrating use of the QtSensors APIs
+            \o \l {Qt Sensors Examples}{Examples}
+            \o Examples demonstrating use of the Qt Sensors APIs
     \endtable
 
     \section1 Information for Backend Implementors
 
     \table
         \row
-            \o \l {QtSensors Backend}{Backend}
-            \o Information about the QtSensors back end
+            \o \l {Qt Sensors Backend}{Backend}
+            \o Information about the Qt Sensors back end
         \row
             \o \l {Grue Sensor Example}
             \o The Grue Sensor Example demonstrates creation of a sensor backend
@@ -62,41 +62,41 @@
 
     \section1 Compatibility with QtMobility Sensors API
 
-    QtSensors 5.0 (the initial release) is generally expected to be source compatible
+    Qt Sensors 5.0 (the initial release) is generally expected to be source compatible
     with QtMobility Sensors 1.2.
 
     \table
         \row
-            \o \l {Porting Applications from QtMobility Sensors to QtSensors}{Porting Guide}
-            \o Information about the steps needed to port applications to the QtSensors API.
+            \o \l {Porting Applications from QtMobility Sensors to Qt Sensors}{Porting Guide}
+            \o Information about the steps needed to port applications to the Qt Sensors API.
         \row
             \o \l {QtMobility.sensors 1.x}{Legacy QML API}
             \o Information about the legacy QtMobility.sensors QML API
     \endtable
 
 
-    \section1 Information for QtSensorGestures API
+    \section1 Information for Qt SensorGestures API
 
-    QtSensorGestures provides a motion gesture recognition API for devices.
+    Qt SensorGestures provides a motion gesture recognition API for devices.
 
     \table
         \row
             \o \l {SensorGesture}{QML API}
-            \o Information about the QtSensorGestures QML API
+            \o Information about the Qt SensorGestures QML API
         \row
             \o \l {QtSensorGestures C++ API}{C++ API}
-            \o Information about the QtSensorGestures C++ API
+            \o Information about the Qt SensorGestures C++ API
     \endtable
 
-    \section1 Information for QtSensorGestures Recognizer Plugin Implementors.
+    \section1 Information for Qt SensorGestures Recognizer Plugin Implementors.
 
     \table
         \row
             \o \l {QtSensorGestures Plugins}{Plugins}
-            \o Information about the QtSensorGestures recognizer plugins.
+            \o Information about the Qt SensorGestures recognizer plugins.
         \row
             \o \l {QtSensorGestures Emulator}{Emulator}
-            \o Information about QtSensorGestures use in the Emulator.
+            \o Information about Qt SensorGestures use in the Emulator.
     \endtable
 
 */
diff --git a/src/imports/sensors2/qsensor2ambientlight.cpp b/src/imports/sensors2/qsensor2ambientlight.cpp
index 7f9402d..49f1933 100644
--- a/src/imports/sensors2/qsensor2ambientlight.cpp
+++ b/src/imports/sensors2/qsensor2ambientlight.cpp
@@ -50,7 +50,7 @@ QT_BEGIN_NAMESPACE
     \inqmlmodule QtSensors 5
     \ingroup qml-QtSensors5
     \since QtSensors 5.0
-    \brief The AmbientLightSensor element provide an easy access to determine the ambient light by using the ambient light sensor.
+    \brief The AmbientLightSensor element provides easy access to determine the ambient light by using the ambient light sensor.
 
     This element is part of the \bold{QtSensors 5} module.
 */
@@ -86,7 +86,7 @@ QSensor2AmbientLight::~QSensor2AmbientLight()
         \o It is light (eg. internal lights).
     \row
         \o AmbientLightSensor.Bright
-        \o It is bright (eg. shade).
+        \o It is bright (eg. outside but in the shade).
     \row
         \o AmbientLightSensor.Sunny
         \o It is very bright (eg. direct sunlight).
diff --git a/src/imports/sensors2/qsensor2gesture.cpp b/src/imports/sensors2/qsensor2gesture.cpp
index 42fe994..2185fb0 100644
--- a/src/imports/sensors2/qsensor2gesture.cpp
+++ b/src/imports/sensors2/qsensor2gesture.cpp
@@ -51,7 +51,7 @@ QT_BEGIN_NAMESPACE
     \qmlclass SensorGesture QSensor2Gesture
     \inqmlmodule QtSensors 5
     \since QtSensors 5.0
-    \brief The SensorGesture element provide notification when sensor gestures are triggered.
+    \brief The SensorGesture element provides notification when sensor gestures are triggered.
 
     This element is part of the \bold{QtSensors 5} module.
 
@@ -112,7 +112,7 @@ void QSensor2Gesture::componentComplete()
 */
 
 /*!
-    \qmlproperty QStringList QtSensors5::SensorGesture::availableGestures
+    \qmlproperty stringlist QtSensors5::SensorGesture::availableGestures
     This property can be used to determine all available gestures on the system.
 */
 QStringList QSensor2Gesture::availableGestures()
@@ -121,7 +121,7 @@ QStringList QSensor2Gesture::availableGestures()
 }
 
 /*!
-    \qmlproperty QString QtSensors5::SensorGesture::gestures
+    \qmlproperty string QtSensors5::SensorGesture::gestures
     Set this property to the gestures the application is interested in detecting.
     The properties validGestures and invalidGestures will be set as appropriate immediately.
     The list of available gestures can be found in the availableGestures property.
@@ -151,7 +151,7 @@ void QSensor2Gesture::setGestures(const QStringList& value)
 
 
 /*!
-    \qmlproperty QStringList QtSensors5::SensorGesture::validGestures
+    \qmlproperty stringlist QtSensors5::SensorGesture::validGestures
     This property holds the requested gestures that were found on the system.
 */
 QStringList QSensor2Gesture::validGestures() const
@@ -162,7 +162,7 @@ QStringList QSensor2Gesture::validGestures() const
 }
 
 /*!
-    \qmlproperty QStringList QtSensors5::SensorGesture::invalidGestures
+    \qmlproperty stringlist QtSensors5::SensorGesture::invalidGestures
     This property holds the requested gestures that were not found on the system.
 */
 QStringList QSensor2Gesture::invalidGestures() const
@@ -209,7 +209,7 @@ void QSensor2Gesture::setEnabled(bool value)
 }
 
 /*!
-    \qmlsignal QtSensors5::SensorGesture::detected(QString gesture)
+    \qmlsignal QtSensors5::SensorGesture::detected(string gesture)
     This signal is emitted whenever a gesture is detected.
     The gesture parameter contains the gesture that was detected.
 */
diff --git a/src/imports/sensors2/qsensor2proximity.cpp b/src/imports/sensors2/qsensor2proximity.cpp
index 3aebff1..0166e17 100644
--- a/src/imports/sensors2/qsensor2proximity.cpp
+++ b/src/imports/sensors2/qsensor2proximity.cpp
@@ -50,7 +50,7 @@ QT_BEGIN_NAMESPACE
     \inqmlmodule QtSensors 5
     \ingroup qml-QtSensors5
     \since QtSensors 5.0
-    \brief The ProximitySensor element provide an easy access to determine if the proximity of the mobile user by using the proximity sensor.
+    \brief The ProximitySensor element provides an easy access to determine if the proximity of the mobile user by using the proximity sensor.
 
     This element is part of the \bold{QtSensors 5} module.
 */
diff --git a/src/imports/sensors2/qsensor2tilt.cpp b/src/imports/sensors2/qsensor2tilt.cpp
index 8cf4a61..e261fe7 100644
--- a/src/imports/sensors2/qsensor2tilt.cpp
+++ b/src/imports/sensors2/qsensor2tilt.cpp
@@ -137,7 +137,7 @@ void QSensor2Tilt::createRunModeDataRateMap()
 }
 
 /*!
-    \qmlproperty bool QtSensors5::TiltSensor::speed
+    \qmlproperty enumeration QtSensors5::TiltSensor::speed
     Holds the speed that the sensor should be run at.
     Default is Slow.
 
@@ -220,7 +220,7 @@ void QSensor2Tilt::setUnit(const QSensor2Tilt::Unit val)
 
 
 /*!
-    \qmlproperty qreal QtSensors5::TiltSensor::yRotation
+    \qmlproperty real QtSensors5::TiltSensor::yRotation
     Holds the rotation arround the y axis.
 
     \table
@@ -240,7 +240,7 @@ qreal QSensor2Tilt::yRotation()
 }
 
 /*!
-    \qmlproperty qreal QtSensors5::TiltSensor::xRotation
+    \qmlproperty real QtSensors5::TiltSensor::xRotation
     Holds the rotation arround the x axis.
     \table
     \row
@@ -281,13 +281,35 @@ inline qreal calcRoll(double Ax, double Ay, double Az)
 }
 
 /*!
-    \qmlproperty qreal QtSensors5::TiltSensor::accuracy
+    \qmlproperty real QtSensors5::TiltSensor::accuracy
     This property contains the accuracy (in degrees) in which the rotation should be measured.
     This can be used to minimize signal emiting and therefore saving of performance.
     Default value is 1 degree.
+    The accuracy value is unsigned and works clockwise and anti-clockwise in X and Y axis rotation directions.
+    Accuracy range can be 0 to 90 degrees.
+
+
+    E.g.
+
+
+    Accuracy 5.5 will notify the client application about an rotation change only if the rotation angle over the X and / or Y axis was changed by 5.5 or more degrees clockwise or anti-clockwise.
+
+    \table
+    \header \o Rotation \o notify application \o reason
+    \row \o 0.2424   \o no   \o
+    \row \o 4.34234  \o no   \o
+    \row \o 5.23423  \o no   \o
+    \row \o 6.34324  \o yes  \o because 6.34324 >= 5.5
+    \row \o 7.43264  \o no   \o
+    \row \o 8.24504  \o no   \o
+    \row \o 9.34653  \o no   \o
+    \row \o 10.23476 \o no   \o
+    \row \o 11.43565 \o no   \o
+    \row \o 12.45645 \o yes  \o because 12.45645 - 6.34324 = 6.11321 >= 5.5
+    \endtable
 */
 /*!
-    \qmlsignal QtSensors5::TiltSensor::tiltChanged(qreal deltaX, qreal deltaY)
+    \qmlsignal QtSensors5::TiltSensor::tiltChanged(real deltaX, real deltaY)
     This signal is emitted whenever the change from at leat one of the rotation values was higher than the accuracy.
     The angle value is based on the specified unit (Degree or Radian).
 
@@ -302,11 +324,12 @@ qreal QSensor2Tilt::accuracy()
 void QSensor2Tilt::setAccuracy(qreal val)
 {
     //save in rad to save convertion calc in filter function
-    _radAccuracy = M_PI * val / 180;
+    if (val <= 90 && val >= 0)
+      _radAccuracy = M_PI * val / 180;
 }
 
 /*!
-    \qmlproperty void QtSensors5::TiltSensor::calibrate
+    \qmlmethod void QtSensors5::TiltSensor::calibrate()
     The call of this function calibrates the tilt from x and y to the current position.
 */
 void QSensor2Tilt::calibrate()
@@ -322,7 +345,7 @@ void QSensor2Tilt::calibrate()
 }
 
 /*!
-    \qmlproperty qreal QtSensors5::TiltSensor::settings
+    \qmlproperty real QtSensors5::TiltSensor::settings
     This property contains the setting of the current state.
     It can be used for saving and reloading previously saved calibrations.
 */