diff --git a/src/serialportengine_win.cpp b/src/serialportengine_win.cpp
index fcbeb8f..f43b66b 100755
--- a/src/serialportengine_win.cpp
+++ b/src/serialportengine_win.cpp
@@ -208,11 +208,8 @@ bool WinSerialPortEngine::open(const QString &location, QIODevice::OpenMode mode
         txflag = true;
     }
 
-    QByteArray filePath = QByteArray((const char *)location.utf16(),
-                                     location.size() * 2 + 1);
-
     // Try opened serial device.
-    m_descriptor = ::CreateFile((const wchar_t*)filePath.constData(),
+    m_descriptor = ::CreateFile(reinterpret_cast<const wchar_t*>(location.utf16()),
                                 desiredAccess, shareMode, 0, OPEN_EXISTING, flagsAndAttributes, 0);
 
     if (m_descriptor == INVALID_HANDLE_VALUE) {
diff --git a/src/serialportinfo_win.cpp b/src/serialportinfo_win.cpp
index e9811d6..6bb3c99 100644
--- a/src/serialportinfo_win.cpp
+++ b/src/serialportinfo_win.cpp
@@ -356,11 +356,8 @@ QList<qint32> SerialPortInfo::standardRates()
 
 bool SerialPortInfo::isBusy() const
 {
-    QString location = systemLocation();
-    QByteArray nativeFilePath = QByteArray((const char *)location.utf16(), location.size() * 2 + 1);
-
-    const HANDLE descriptor = ::CreateFile((const wchar_t*)nativeFilePath.constData(),
-                                     GENERIC_READ | GENERIC_WRITE, 0, 0, OPEN_EXISTING, 0, 0);
+    const HANDLE descriptor = ::CreateFile(reinterpret_cast<const wchar_t*>(systemLocation().utf16()),
+                                           GENERIC_READ | GENERIC_WRITE, 0, 0, OPEN_EXISTING, 0, 0);
 
     if (descriptor == INVALID_HANDLE_VALUE) {
         if (::GetLastError() == ERROR_ACCESS_DENIED)
@@ -373,11 +370,8 @@ bool SerialPortInfo::isBusy() const
 
 bool SerialPortInfo::isValid() const
 {
-    QString location = systemLocation();
-    QByteArray nativeFilePath = QByteArray((const char *)location.utf16(), location.size() * 2 + 1);
-
-    const HANDLE descriptor = ::CreateFile((const wchar_t*)nativeFilePath.constData(),
-                                     GENERIC_READ | GENERIC_WRITE, 0, 0, OPEN_EXISTING, 0, 0);
+    const HANDLE descriptor = ::CreateFile(reinterpret_cast<const wchar_t*>(systemLocation().utf16()),
+                                           GENERIC_READ | GENERIC_WRITE, 0, 0, OPEN_EXISTING, 0, 0);
 
     if (descriptor == INVALID_HANDLE_VALUE) {
         if (::GetLastError() != ERROR_ACCESS_DENIED)