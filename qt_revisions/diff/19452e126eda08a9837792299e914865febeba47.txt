diff --git a/src/quick/items/qquickitem.cpp b/src/quick/items/qquickitem.cpp
index 667b919..d4eea2b 100644
--- a/src/quick/items/qquickitem.cpp
+++ b/src/quick/items/qquickitem.cpp
@@ -4530,7 +4530,7 @@ bool QQuickItem::smooth() const
 }
 
 /*!
-    Sets whether the item should be drawn with antialiasing and
+    Sets whether the item should be drawn with
     smooth pixmap filtering to \a smooth.
 
     \sa smooth()
diff --git a/src/quick/items/qquickrectangle.cpp b/src/quick/items/qquickrectangle.cpp
index 99ad7b7..2789d85 100644
--- a/src/quick/items/qquickrectangle.cpp
+++ b/src/quick/items/qquickrectangle.cpp
@@ -283,7 +283,7 @@ int QQuickRectanglePrivate::doUpdateSlotIdx = -1;
 
     You can also create rounded rectangles using the \l radius property. Since this
     introduces curved edges to the corners of a rectangle, it may be appropriate to
-    set the \l smooth property to improve its appearance.
+    set the \l antialiasing property to improve its appearance.
 
     \section1 Example Usage
 
@@ -299,7 +299,7 @@ int QQuickRectanglePrivate::doUpdateSlotIdx = -1;
     \clearfloat
     \section1 Performance
 
-    Using the \l smooth property improves the appearance of a rounded rectangle at
+    Using the \l antialiasing property improves the appearance of a rounded rectangle at
     the cost of rendering performance. You should consider unsetting this property
     for rectangles in motion, and only set it when they are stationary.
 
@@ -521,21 +521,6 @@ QSGNode *QQuickRectangle::updatePaintNode(QSGNode *oldNode, UpdatePaintNodeData
 
     return rectangle;
 }
-/*!
-    \qmlproperty bool QtQuick2::Rectangle::smooth
-
-    Set this property if you want the item to be smoothly scaled or
-    transformed.  Smooth filtering gives better visual quality, but is slower.  If
-    the item is displayed at its natural size, this property has no visual or
-    performance effect.
-
-    \note Generally scaling artifacts are only visible if the item is stationary on
-    the screen.  A common pattern when animating an item is to disable smooth
-    filtering at the beginning of the animation and reenable it at the conclusion.
-
-    \image rect-smooth.png
-    On this image, smooth is turned off for the top half and on for the bottom half.
-*/
 
 QRectF QQuickRectangle::boundingRect() const
 {
diff --git a/src/quick/items/qquicktext.cpp b/src/quick/items/qquicktext.cpp
index fd1fc5e..9c210d4 100644
--- a/src/quick/items/qquicktext.cpp
+++ b/src/quick/items/qquicktext.cpp
@@ -1281,20 +1281,6 @@ QQuickText::~QQuickText()
 */
 
 /*!
-    \qmlproperty bool QtQuick2::Text::smooth
-
-    This property holds whether the text is smoothly scaled or transformed.
-
-    Smooth filtering gives better visual quality, but is slower.  If
-    the item is displayed at its natural size, this property has no visual or
-    performance effect.
-
-    \note Generally scaling artifacts are only visible if the item is stationary on
-    the screen.  A common pattern when animating an item is to disable smooth
-    filtering at the beginning of the animation and reenable it at the conclusion.
-*/
-
-/*!
     \qmlsignal QtQuick2::Text::onLineLaidOut(line)
 
     This handler is called for every line during the layout process.
diff --git a/src/quick/items/qquicktextedit.cpp b/src/quick/items/qquicktextedit.cpp
index 3737a0e..4422d6a 100644
--- a/src/quick/items/qquicktextedit.cpp
+++ b/src/quick/items/qquicktextedit.cpp
@@ -1680,20 +1680,6 @@ QSGNode *QQuickTextEdit::updatePaintNode(QSGNode *oldNode, UpdatePaintNodeData *
 }
 
 /*!
-    \qmlproperty bool QtQuick2::TextEdit::smooth
-
-    This property holds whether the text is smoothly scaled or transformed.
-
-    Smooth filtering gives better visual quality, but is slower.  If
-    the item is displayed at its natural size, this property has no visual or
-    performance effect.
-
-    \note Generally scaling artifacts are only visible if the item is stationary on
-    the screen.  A common pattern when animating an item is to disable smooth
-    filtering at the beginning of the animation and reenable it at the conclusion.
-*/
-
-/*!
     \qmlproperty bool QtQuick2::TextEdit::canPaste
 
     Returns true if the TextEdit is writable and the content of the clipboard is
@@ -1757,7 +1743,6 @@ void QQuickTextEditPrivate::init()
 {
     Q_Q(QQuickTextEdit);
 
-    q->setSmooth(smooth);
     q->setAcceptedMouseButtons(Qt::LeftButton);
     q->setFlag(QQuickItem::ItemAcceptsInputMethod);
     q->setFlag(QQuickItem::ItemHasContents);
diff --git a/src/quick/items/qquicktextinput.cpp b/src/quick/items/qquicktextinput.cpp
index b243442..bb38e51 100644
--- a/src/quick/items/qquicktextinput.cpp
+++ b/src/quick/items/qquicktextinput.cpp
@@ -2115,20 +2115,6 @@ void QQuickTextInput::selectWord()
 }
 
 /*!
-    \qmlproperty bool QtQuick2::TextInput::smooth
-
-    This property holds whether the text is smoothly scaled or transformed.
-
-    Smooth filtering gives better visual quality, but is slower.  If
-    the item is displayed at its natural size, this property has no visual or
-    performance effect.
-
-    \note Generally scaling artifacts are only visible if the item is stationary on
-    the screen.  A common pattern when animating an item is to disable smooth
-    filtering at the beginning of the animation and reenable it at the conclusion.
-*/
-
-/*!
    \qmlproperty string QtQuick2::TextInput::passwordCharacter
 
    This is the character displayed when echoMode is set to Password or
@@ -2470,7 +2456,6 @@ bool QQuickTextInput::isInputMethodComposing() const
 void QQuickTextInputPrivate::init()
 {
     Q_Q(QQuickTextInput);
-    q->setSmooth(smooth);
     q->setAcceptedMouseButtons(Qt::LeftButton);
     q->setFlag(QQuickItem::ItemAcceptsInputMethod);
     q->setFlag(QQuickItem::ItemHasContents);