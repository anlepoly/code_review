diff --git a/src/imports/multimedia/qdeclarativecamera.cpp b/src/imports/multimedia/qdeclarativecamera.cpp
index adfe138..8dd1a8a 100644
--- a/src/imports/multimedia/qdeclarativecamera.cpp
+++ b/src/imports/multimedia/qdeclarativecamera.cpp
@@ -181,12 +181,12 @@ QString QDeclarativeCamera::errorString() const
     return m_camera->errorString();
 }
 
-QDeclarativeCamera::CaptureModes QDeclarativeCamera::captureMode() const
+QDeclarativeCamera::CaptureMode QDeclarativeCamera::captureMode() const
 {
-    return QDeclarativeCamera::CaptureModes(int(m_camera->captureMode()));
+    return QDeclarativeCamera::CaptureMode(int(m_camera->captureMode()));
 }
 
-void QDeclarativeCamera::setCaptureMode(QDeclarativeCamera::CaptureModes mode)
+void QDeclarativeCamera::setCaptureMode(QDeclarativeCamera::CaptureMode mode)
 {
     m_camera->setCaptureMode(QCamera::CaptureModes(int(mode)));
 }
diff --git a/src/imports/multimedia/qdeclarativecamera_p.h b/src/imports/multimedia/qdeclarativecamera_p.h
index ff6f40b..30604c6 100644
--- a/src/imports/multimedia/qdeclarativecamera_p.h
+++ b/src/imports/multimedia/qdeclarativecamera_p.h
@@ -79,7 +79,7 @@ class QDeclarativeCamera : public QObject, public QDeclarativeParserStatus
     Q_OBJECT
     Q_INTERFACES(QDeclarativeParserStatus)
 
-    Q_PROPERTY(CaptureModes captureMode READ captureMode WRITE setCaptureMode NOTIFY captureModeChanged)
+    Q_PROPERTY(CaptureMode captureMode READ captureMode WRITE setCaptureMode NOTIFY captureModeChanged)
     Q_PROPERTY(State cameraState READ cameraState WRITE setCameraState NOTIFY cameraStateChanged)
     Q_PROPERTY(LockStatus lockStatus READ lockStatus NOTIFY lockStatusChanged)
     Q_PROPERTY(QString errorString READ errorString NOTIFY errorChanged)
@@ -114,7 +114,6 @@ public:
         CaptureStillImage = QCamera::CaptureStillImage,
         CaptureVideo = QCamera::CaptureVideo
     };
-    Q_DECLARE_FLAGS(CaptureModes, CaptureMode)
 
     enum State
     {
@@ -180,7 +179,6 @@ public:
         FocusContinuous = QCameraFocus::ContinuousFocus,
         FocusMacro = QCameraFocus::MacroFocus
     };
-    Q_DECLARE_FLAGS(FocusModes, FocusMode)
 
     enum FocusPointMode {
         FocusPointAuto = QCameraFocus::FocusPointAuto,
@@ -208,7 +206,7 @@ public:
     QDeclarativeCameraFocus *focus() { return m_focus; }
     QDeclarativeCameraImageProcessing *imageProcessing() { return m_imageProcessing; }
 
-    CaptureModes captureMode() const;
+    CaptureMode captureMode() const;
     State cameraState() const;
 
     Error error() const;
@@ -223,7 +221,7 @@ public:
     qreal digitalZoom() const;
 
 public Q_SLOTS:
-    void setCaptureMode(QDeclarativeCamera::CaptureModes mode);
+    void setCaptureMode(CaptureMode mode);
 
     void start();
     void stop();
diff --git a/src/imports/multimedia/qdeclarativecamerafocus.cpp b/src/imports/multimedia/qdeclarativecamerafocus.cpp
index 5248e0e..53c9332 100644
--- a/src/imports/multimedia/qdeclarativecamerafocus.cpp
+++ b/src/imports/multimedia/qdeclarativecamerafocus.cpp
@@ -97,7 +97,7 @@ QDeclarativeCameraFocus::~QDeclarativeCameraFocus()
 
 
 /*!
-    \qmlproperty Camera::FocusModes CameraFocus::focusMode
+    \qmlproperty Camera::FocusMode CameraFocus::focusMode
     \property QDeclarativeCameraFocus::focusMode
 
     The current camera focus mode.
@@ -105,17 +105,17 @@ QDeclarativeCameraFocus::~QDeclarativeCameraFocus()
     It's possible to combine multiple Camera::FocusMode values,
     for example Camera.FocusMacro + Camera.FocusContinuous.
 */
-QDeclarativeCamera::FocusModes QDeclarativeCameraFocus::focusMode() const
+QDeclarativeCamera::FocusMode QDeclarativeCameraFocus::focusMode() const
 {
-    return QDeclarativeCamera::FocusModes(int(m_focus->focusMode()));
+    return QDeclarativeCamera::FocusMode(int(m_focus->focusMode()));
 }
 
-bool QDeclarativeCameraFocus::isFocusModeSupported(QDeclarativeCamera::FocusModes mode) const
+bool QDeclarativeCameraFocus::isFocusModeSupported(QDeclarativeCamera::FocusMode mode) const
 {
     return m_focus->isFocusModeSupported(QCameraFocus::FocusModes(int(mode)));
 }
 
-void QDeclarativeCameraFocus::setFocusMode(QDeclarativeCamera::FocusModes mode)
+void QDeclarativeCameraFocus::setFocusMode(QDeclarativeCamera::FocusMode mode)
 {
     m_focus->setFocusMode(QCameraFocus::FocusModes(int(mode)));
 }
diff --git a/src/imports/multimedia/qdeclarativecamerafocus_p.h b/src/imports/multimedia/qdeclarativecamerafocus_p.h
index 97d3d18..9a9472b 100644
--- a/src/imports/multimedia/qdeclarativecamerafocus_p.h
+++ b/src/imports/multimedia/qdeclarativecamerafocus_p.h
@@ -68,29 +68,29 @@ class QDeclarativeCamera;
 class QDeclarativeCameraFocus : public QObject
 {
     Q_OBJECT
-    Q_PROPERTY(QDeclarativeCamera::FocusModes focusMode READ focusMode WRITE setFocusMode NOTIFY focusModeChanged)
+    Q_PROPERTY(QDeclarativeCamera::FocusMode focusMode READ focusMode WRITE setFocusMode NOTIFY focusModeChanged)
     Q_PROPERTY(QDeclarativeCamera::FocusPointMode focusPointMode READ focusPointMode WRITE setFocusPointMode NOTIFY focusPointModeChanged)
     Q_PROPERTY(QPointF customFocusPoint READ customFocusPoint WRITE setCustomFocusPoint NOTIFY customFocusPointChanged)
     Q_PROPERTY(QObject *focusZones READ focusZones CONSTANT)
 public:
     ~QDeclarativeCameraFocus();
 
-    QDeclarativeCamera::FocusModes focusMode() const;
+    QDeclarativeCamera::FocusMode focusMode() const;
     QDeclarativeCamera::FocusPointMode focusPointMode() const;
     QPointF customFocusPoint() const;
 
     QAbstractListModel *focusZones() const;
 
-    Q_INVOKABLE bool isFocusModeSupported(QDeclarativeCamera::FocusModes mode) const;
+    Q_INVOKABLE bool isFocusModeSupported(QDeclarativeCamera::FocusMode mode) const;
     Q_INVOKABLE bool isFocusPointModeSupported(QDeclarativeCamera::FocusPointMode) const;
 
 public Q_SLOTS:
-    void setFocusMode(QDeclarativeCamera::FocusModes);
+    void setFocusMode(QDeclarativeCamera::FocusMode);
     void setFocusPointMode(QDeclarativeCamera::FocusPointMode mode);
     void setCustomFocusPoint(const QPointF &point);
 
 Q_SIGNALS:
-    void focusModeChanged(QDeclarativeCamera::FocusModes);
+    void focusModeChanged(QDeclarativeCamera::FocusMode);
     void focusPointModeChanged(QDeclarativeCamera::FocusPointMode);
     void customFocusPointChanged(const QPointF &);