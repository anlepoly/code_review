diff --git a/src/serialport_win.cpp b/src/serialport_win.cpp
index 7b72f5b..177c9dd 100644
--- a/src/serialport_win.cpp
+++ b/src/serialport_win.cpp
@@ -131,10 +131,10 @@ protected:
         bool ret = QWinEventNotifier::event(e);
         if (ret) {
             DWORD numberOfBytesTransferred = 0;
-            bool success = ::GetOverlappedResult(dptr->descriptor,
+            BOOL success = ::GetOverlappedResult(dptr->descriptor,
                                                  &dptr->readOverlapped,
                                                  &numberOfBytesTransferred,
-                                                 false);
+                                                 FALSE);
             if (success)
                 dptr->completeAsyncRead(numberOfBytesTransferred);
         }
@@ -158,10 +158,10 @@ protected:
         bool ret = QWinEventNotifier::event(e);
         if (ret) {
             DWORD numberOfBytesTransferred = 0;
-            bool success = ::GetOverlappedResult(dptr->descriptor,
+            BOOL success = ::GetOverlappedResult(dptr->descriptor,
                                                  &dptr->writeOverlapped,
                                                  &numberOfBytesTransferred,
-                                                 false);
+                                                 FALSE);
             if (success)
                 dptr->completeAsyncWrite(numberOfBytesTransferred);
         }
@@ -203,30 +203,30 @@ bool SerialPortPrivate::open(QIODevice::OpenMode mode)
     }
 
     descriptor = ::CreateFile(reinterpret_cast<const wchar_t*>(systemLocation.utf16()),
-                              desiredAccess, 0, 0, OPEN_EXISTING, FILE_FLAG_OVERLAPPED, 0);
+                              desiredAccess, 0, NULL, OPEN_EXISTING, FILE_FLAG_OVERLAPPED, NULL);
 
     if (descriptor == INVALID_HANDLE_VALUE) {
         portError = decodeSystemError();
         return false;
     }
 
-    if (::GetCommState(descriptor, &restoredDcb) == 0) {
+    if (::GetCommState(descriptor, &restoredDcb) == FALSE) {
         portError = decodeSystemError();
         return false;
     }
 
     currentDcb = restoredDcb;
-    currentDcb.fBinary = true;
-    currentDcb.fInX = false;
-    currentDcb.fOutX = false;
-    currentDcb.fAbortOnError = false;
-    currentDcb.fNull = false;
-    currentDcb.fErrorChar = false;
+    currentDcb.fBinary = TRUE;
+    currentDcb.fInX = FALSE;
+    currentDcb.fOutX = FALSE;
+    currentDcb.fAbortOnError = FALSE;
+    currentDcb.fNull = FALSE;
+    currentDcb.fErrorChar = FALSE;
 
     if (!updateDcb())
         return false;
 
-    if (::GetCommTimeouts(descriptor, &restoredCommTimeouts) == 0) {
+    if (::GetCommTimeouts(descriptor, &restoredCommTimeouts) == FALSE) {
         portError = decodeSystemError();
         return false;
     }
@@ -238,25 +238,25 @@ bool SerialPortPrivate::open(QIODevice::OpenMode mode)
         return false;
 
     ::memset(&selectOverlapped, 0, sizeof(selectOverlapped));
-    selectOverlapped.hEvent = ::CreateEvent(0, true, false, 0);
+    selectOverlapped.hEvent = ::CreateEvent(NULL, TRUE, FALSE, NULL);
 
     if (eventMask & EV_RXCHAR) {
         ::memset(&readOverlapped, 0, sizeof(readOverlapped));
-        readOverlapped.hEvent = ::CreateEvent(0, false, false, 0);
+        readOverlapped.hEvent = ::CreateEvent(NULL, FALSE, FALSE, NULL);
         readCompletionNotifier = new ReadCompletionNotifier(this, q_ptr);
         readCompletionNotifier->setEnabled(true);
     }
 
     if (eventMask & EV_TXEMPTY) {
         ::memset(&writeOverlapped, 0, sizeof(writeOverlapped));
-        writeOverlapped.hEvent = ::CreateEvent(0, false, false, 0);
+        writeOverlapped.hEvent = ::CreateEvent(NULL, FALSE, FALSE, NULL);
         writeCompletionNotifier = new WriteCompletionNotifier(this, q_ptr);
         writeCompletionNotifier->setEnabled(true);
     }
 
     ::SetCommMask(descriptor, eventMask);
     ::memset(&eventOverlapped, 0, sizeof(eventOverlapped));
-    eventOverlapped.hEvent = ::CreateEvent(0, true, false, 0);
+    eventOverlapped.hEvent = ::CreateEvent(NULL, TRUE, FALSE, NULL);
     eventNotifier = new CommEventNotifier(this, q_ptr);
     eventNotifier->setEnabled(true);
     ::WaitCommEvent(descriptor, &eventMask, &eventOverlapped);
@@ -324,7 +324,7 @@ SerialPort::Lines SerialPortPrivate::lines() const
     DWORD modemStat = 0;
     SerialPort::Lines ret = 0;
 
-    if (::GetCommModemStatus(descriptor, &modemStat) == 0)
+    if (::GetCommModemStatus(descriptor, &modemStat) == FALSE)
         return ret;
 
     if (modemStat & MS_CTS_ON)
@@ -337,9 +337,9 @@ SerialPort::Lines SerialPortPrivate::lines() const
         ret |= SerialPort::Dcd;
 
     DWORD bytesReturned = 0;
-    if (::DeviceIoControl(descriptor, IOCTL_SERIAL_GET_DTRRTS, 0, 0,
+    if (::DeviceIoControl(descriptor, IOCTL_SERIAL_GET_DTRRTS, NULL, 0,
                           &modemStat, sizeof(modemStat),
-                          &bytesReturned, 0)) {
+                          &bytesReturned, NULL)) {
 
         if (modemStat & SERIAL_DTR_STATE)
             ret |= SerialPort::Dtr;
@@ -397,7 +397,7 @@ qint64 SerialPortPrivate::bytesAvailable() const
 {
     COMSTAT cs;
     ::memset(&cs, 0, sizeof(cs));
-    if (::ClearCommError(descriptor, 0, &cs) == 0)
+    if (::ClearCommError(descriptor, NULL, &cs) == FALSE)
         return -1;
     return cs.cbInQue;
 }
@@ -406,7 +406,7 @@ qint64 SerialPortPrivate::bytesToWrite() const
 {
     COMSTAT cs;
     ::memset(&cs, 0, sizeof(cs));
-    if (::ClearCommError(descriptor, 0, &cs) == 0)
+    if (::ClearCommError(descriptor, NULL, &cs) == FALSE)
         return -1;
     return cs.cbOutQue;
 }
@@ -495,7 +495,7 @@ bool SerialPortPrivate::waitForReadyRead(int msecs)
 
         if (readyToCompleteRead) {
             if (!::GetOverlappedResult(descriptor, &readOverlapped,
-                                       &bytesTransferred, false)) {
+                                       &bytesTransferred, FALSE)) {
                 return false;
             }
             return completeAsyncRead(bytesTransferred);
@@ -503,7 +503,7 @@ bool SerialPortPrivate::waitForReadyRead(int msecs)
 
         if (readyToCompleteWrite) {
             if (::GetOverlappedResult(descriptor, &readOverlapped,
-                                      &bytesTransferred, false)) {
+                                      &bytesTransferred, FALSE)) {
                 completeAsyncWrite(bytesTransferred);
             }
         }
@@ -549,7 +549,7 @@ bool SerialPortPrivate::waitForBytesWritten(int msecs)
 
         if (readyToCompleteRead) {
             if (!::GetOverlappedResult(descriptor, &readOverlapped,
-                                       &bytesTransferred, false)) {
+                                       &bytesTransferred, FALSE)) {
                 return false;
             }
             if (!completeAsyncRead(bytesTransferred))
@@ -558,7 +558,7 @@ bool SerialPortPrivate::waitForBytesWritten(int msecs)
 
         if (readyToCompleteWrite) {
             if (::GetOverlappedResult(descriptor, &readOverlapped,
-                                      &bytesTransferred, false)) {
+                                      &bytesTransferred, FALSE)) {
                 if (completeAsyncWrite(bytesTransferred))
                     return true;
             }
@@ -588,11 +588,11 @@ bool SerialPortPrivate::setDataBits(SerialPort::DataBits dataBits)
 
 bool SerialPortPrivate::setParity(SerialPort::Parity parity)
 {
-    currentDcb.fParity = true;
+    currentDcb.fParity = TRUE;
     switch (parity) {
     case SerialPort::NoParity:
         currentDcb.Parity = NOPARITY;
-        currentDcb.fParity = false;
+        currentDcb.fParity = FALSE;
         break;
     case SerialPort::OddParity:
         currentDcb.Parity = ODDPARITY;
@@ -608,7 +608,7 @@ bool SerialPortPrivate::setParity(SerialPort::Parity parity)
         break;
     default:
         currentDcb.Parity = NOPARITY;
-        currentDcb.fParity = false;
+        currentDcb.fParity = FALSE;
         break;
     }
     return updateDcb();
@@ -635,19 +635,19 @@ bool SerialPortPrivate::setStopBits(SerialPort::StopBits stopBits)
 
 bool SerialPortPrivate::setFlowControl(SerialPort::FlowControl flow)
 {
-    currentDcb.fInX = false;
-    currentDcb.fOutX = false;
-    currentDcb.fOutxCtsFlow = false;
+    currentDcb.fInX = FALSE;
+    currentDcb.fOutX = FALSE;
+    currentDcb.fOutxCtsFlow = FALSE;
     currentDcb.fRtsControl = RTS_CONTROL_DISABLE;
     switch (flow) {
     case SerialPort::NoFlowControl:
         break;
     case SerialPort::SoftwareControl:
-        currentDcb.fInX = true;
-        currentDcb.fOutX = true;
+        currentDcb.fInX = TRUE;
+        currentDcb.fOutX = TRUE;
         break;
     case SerialPort::HardwareControl:
-        currentDcb.fOutxCtsFlow = true;
+        currentDcb.fOutxCtsFlow = TRUE;
         currentDcb.fRtsControl = RTS_CONTROL_HANDSHAKE;
         break;
     default:
@@ -680,7 +680,7 @@ bool SerialPortPrivate::startAsyncRead()
     char *ptr = readBuffer.reserve(bytesToRead);
 
     readSequenceStarted = true;
-    if (::ReadFile(descriptor, ptr, bytesToRead, 0, &readOverlapped))
+    if (::ReadFile(descriptor, ptr, bytesToRead, NULL, &readOverlapped))
         return true;
 
     switch (::GetLastError()) {
@@ -707,7 +707,7 @@ bool SerialPortPrivate::startAsyncWrite(int maxSize)
 
     const char *ptr = writeBuffer.readPointer();
 
-    if (::WriteFile(descriptor, ptr, nextSize, 0, &writeOverlapped))
+    if (::WriteFile(descriptor, ptr, nextSize, NULL, &writeOverlapped))
         return true;
 
     switch (::GetLastError()) {
@@ -730,7 +730,7 @@ bool SerialPortPrivate::startAsyncWrite(int maxSize)
 bool SerialPortPrivate::processIoErrors()
 {
     DWORD error = 0;
-    const bool ret = ::ClearCommError(descriptor, &error, 0) != 0;
+    const bool ret = ::ClearCommError(descriptor, &error, FALSE) != FALSE;
     if (ret && error) {
         if (error & CE_FRAME)
             portError = SerialPort::FramingError;
@@ -808,7 +808,7 @@ bool SerialPortPrivate::completeAsyncWrite(DWORD numberOfBytes)
 
 bool SerialPortPrivate::updateDcb()
 {
-    if (::SetCommState(descriptor, &currentDcb) == 0) {
+    if (::SetCommState(descriptor, &currentDcb) == FALSE) {
         portError = decodeSystemError();
         return false;
     }
@@ -817,7 +817,7 @@ bool SerialPortPrivate::updateDcb()
 
 bool SerialPortPrivate::updateCommTimeouts()
 {
-    if (::SetCommTimeouts(descriptor, &currentCommTimeouts) == 0) {
+    if (::SetCommTimeouts(descriptor, &currentCommTimeouts) == FALSE) {
         portError = decodeSystemError();
         return false;
     }
@@ -932,7 +932,7 @@ bool SerialPortPrivate::waitForReadOrWrite(bool *selectForStartRead, bool *selec
 
     DWORD eventMask = 0;
 
-    if (::WaitCommEvent(descriptor, &eventMask, &selectOverlapped) == 0
+    if (::WaitCommEvent(descriptor, &eventMask, &selectOverlapped) == FALSE
             && ::GetLastError() != ERROR_IO_PENDING) {
         return false;
     }
@@ -952,7 +952,7 @@ bool SerialPortPrivate::waitForReadOrWrite(bool *selectForStartRead, bool *selec
 
     DWORD waitResult = ::WaitForMultipleObjects(NumberOfEvents,
                                                 events,
-                                                false, // wait any event
+                                                FALSE, // wait any event
                                                 qMax(msecs, 0));
 
     switch (waitResult) {
diff --git a/src/serialport_wince.cpp b/src/serialport_wince.cpp
index 26fe126..5e5ce96 100644
--- a/src/serialport_wince.cpp
+++ b/src/serialport_wince.cpp
@@ -75,7 +75,7 @@ protected:
     virtual void run() {
         DWORD mask = 0;
         while (running) {
-            if (::WaitCommEvent(dptr->descriptor, &mask, 0) != 0) {
+            if (::WaitCommEvent(dptr->descriptor, &mask, FALSE) != FALSE) {
                 // Wait until complete the operation changes the port settings,
                 // see updateDcb().
                 dptr->settingsChangeMutex.lock();
@@ -166,14 +166,14 @@ bool SerialPortPrivate::open(QIODevice::OpenMode mode)
     }
 
     descriptor = ::CreateFile(reinterpret_cast<const wchar_t*>(systemLocation.utf16()),
-                              desiredAccess, 0, 0, OPEN_EXISTING, 0, 0);
+                              desiredAccess, 0, NULL, OPEN_EXISTING, 0, NULL);
 
     if (descriptor == INVALID_HANDLE_VALUE) {
         portError = decodeSystemError();
         return false;
     }
 
-    if (::GetCommState(descriptor, &restoredDcb) == 0) {
+    if (::GetCommState(descriptor, &restoredDcb) == FALSE) {
         portError = decodeSystemError();
         return false;
     }
@@ -189,7 +189,7 @@ bool SerialPortPrivate::open(QIODevice::OpenMode mode)
     if (!updateDcb())
         return false;
 
-    if (::GetCommTimeouts(descriptor, &restoredCommTimeouts) == 0) {
+    if (::GetCommTimeouts(descriptor, &restoredCommTimeouts) == FALSE) {
         portError = decodeSystemError();
         return false;
     }
@@ -339,7 +339,7 @@ bool SerialPortPrivate::notifyRead()
     char *ptr = readBuffer.reserve(bytesToRead);
 
     DWORD readBytes = 0;
-    bool sucessResult = ::ReadFile(descriptor, ptr, bytesToRead, &readBytes, 0);
+    BOOL sucessResult = ::ReadFile(descriptor, ptr, bytesToRead, &readBytes, NULL);
 
     if (!sucessResult) {
         readBuffer.truncate(bytesToRead);
@@ -381,7 +381,7 @@ bool SerialPortPrivate::notifyWrite(int maxSize)
     const char *ptr = writeBuffer.readPointer();
 
     DWORD bytesWritten = 0;
-    if (::WriteFile(descriptor, ptr, nextSize, &bytesWritten, 0) == 0)
+    if (::WriteFile(descriptor, ptr, nextSize, &bytesWritten, NULL) == FALSE)
         return false;
 
     writeBuffer.free(bytesWritten);
@@ -400,7 +400,7 @@ bool SerialPortPrivate::waitForReadOrWrite(bool *selectForRead, bool *selectForW
     // breaker can work out before you call a method WaitCommEvent()
     // and so it will loop forever!
     WaitCommEventBreaker breaker(descriptor, qMax(msecs, 0));
-    ::WaitCommEvent(descriptor, &eventMask, 0);
+    ::WaitCommEvent(descriptor, &eventMask, NULL);
     breaker.stop();
 
     if (breaker.isWorked())
@@ -428,13 +428,13 @@ bool SerialPortPrivate::updateDcb()
 
     DWORD eventMask = 0;
     // Save the event mask
-    if (::GetCommMask(descriptor, &eventMask) == 0)
+    if (::GetCommMask(descriptor, &eventMask) == FALSE)
         return false;
 
     // Break event notifier from WaitCommEvent
     ::SetCommMask(descriptor, 0);
     // Change parameters
-    bool ret = (::SetCommState(descriptor, &currentDcb) != 0);
+    bool ret = (::SetCommState(descriptor, &currentDcb) != FALSE);
     if (!ret)
         portError = decodeSystemError();
     // Restore the event mask
@@ -445,7 +445,7 @@ bool SerialPortPrivate::updateDcb()
 
 bool SerialPortPrivate::updateCommTimeouts()
 {
-    if (::SetCommTimeouts(descriptor, &currentCommTimeouts) == 0) {
+    if (::SetCommTimeouts(descriptor, &currentCommTimeouts) == FALSE) {
         portError = decodeSystemError();
         return false;
     }
diff --git a/src/serialportinfo_win.cpp b/src/serialportinfo_win.cpp
index 82dfb9a..75454c6 100755
--- a/src/serialportinfo_win.cpp
+++ b/src/serialportinfo_win.cpp
@@ -83,14 +83,14 @@ static QVariant getDeviceRegistryProperty(HDEVINFO deviceInfoSet,
     QVariant v;
 
     ::SetupDiGetDeviceRegistryProperty(deviceInfoSet, deviceInfoData,
-                                       property, &dataType, 0, 0, &dataSize);
+                                       property, &dataType, NULL, 0, &dataSize);
 
     QByteArray data(dataSize, 0);
 
     if (::SetupDiGetDeviceRegistryProperty(deviceInfoSet, deviceInfoData,
-                                           property, 0,
+                                           property, NULL,
                                            reinterpret_cast<unsigned char*>(data.data()),
-                                           dataSize, 0)) {
+                                           dataSize, NULL)) {
 
         switch (dataType) {
 
@@ -170,7 +170,7 @@ static QString getNativeName(HDEVINFO deviceInfoSet,
         const LONG ret = ::RegEnumValue(key,
                                         index++,
                                         reinterpret_cast<wchar_t *>(bufKeyName.data()), &lenKeyName,
-                                        0,
+                                        NULL,
                                         &keyType,
                                         reinterpret_cast<unsigned char *>(bufKeyVal.data()), &lenKeyValue);
 
@@ -217,7 +217,7 @@ QList<SerialPortInfo> SerialPortInfo::availablePorts()
 
     for (int i = 0; i < guidCount; ++i) {
 
-        const HDEVINFO deviceInfoSet = ::SetupDiGetClassDevs(&guidsArray[i], 0, 0, DIGCF_PRESENT);
+        const HDEVINFO deviceInfoSet = ::SetupDiGetClassDevs(&guidsArray[i], NULL, 0, DIGCF_PRESENT);
 
         if (deviceInfoSet == INVALID_HANDLE_VALUE)
             return ports;
@@ -270,7 +270,7 @@ QList<qint32> SerialPortInfo::standardRates()
 bool SerialPortInfo::isBusy() const
 {
     const HANDLE descriptor = ::CreateFile(reinterpret_cast<const wchar_t*>(systemLocation().utf16()),
-                                           GENERIC_READ | GENERIC_WRITE, 0, 0, OPEN_EXISTING, 0, 0);
+                                           GENERIC_READ | GENERIC_WRITE, 0, NULL, OPEN_EXISTING, 0, NULL);
 
     if (descriptor == INVALID_HANDLE_VALUE) {
         if (::GetLastError() == ERROR_ACCESS_DENIED)
@@ -284,7 +284,7 @@ bool SerialPortInfo::isBusy() const
 bool SerialPortInfo::isValid() const
 {
     const HANDLE descriptor = ::CreateFile(reinterpret_cast<const wchar_t*>(systemLocation().utf16()),
-                                           GENERIC_READ | GENERIC_WRITE, 0, 0, OPEN_EXISTING, 0, 0);
+                                           GENERIC_READ | GENERIC_WRITE, 0, NULL, OPEN_EXISTING, 0, NULL);
 
     if (descriptor == INVALID_HANDLE_VALUE) {
         if (::GetLastError() != ERROR_ACCESS_DENIED)
diff --git a/src/serialportinfo_wince.cpp b/src/serialportinfo_wince.cpp
index e0d1fae..1fbbd86 100644
--- a/src/serialportinfo_wince.cpp
+++ b/src/serialportinfo_wince.cpp
@@ -65,12 +65,12 @@ static QString findDescription(HKEY parentKeyHandle, const QString &subKey)
         DWORD dataType = 0;
         DWORD dataSize = 0;
         res = ::RegQueryValueEx(hSubKey, reinterpret_cast<const wchar_t *>(valueName.utf16()),
-                                0, &dataType, 0, &dataSize);
+                                NULL, &dataType, NULL, &dataSize);
 
         if (res == ERROR_SUCCESS) {
             QByteArray data(dataSize, 0);
             res = ::RegQueryValueEx(hSubKey, reinterpret_cast<const wchar_t *>(valueName.utf16()),
-                                    0, 0,
+                                    NULL, NULL,
                                     reinterpret_cast<unsigned char *>(data.data()),
                                     &dataSize);
 
@@ -91,7 +91,7 @@ static QString findDescription(HKEY parentKeyHandle, const QString &subKey)
             QByteArray data(dataSize, 0);
             while (::RegEnumKeyEx(hSubKey, index++,
                                   reinterpret_cast<wchar_t *>(data.data()), &dataSize,
-                                  0, 0, 0, 0) == ERROR_SUCCESS) {
+                                  NULL, NULL, NULL, NULL) == ERROR_SUCCESS) {
 
                 result = findDescription(hSubKey,
                                          QString::fromUtf16(reinterpret_cast<ushort *>(data.data()), dataSize));