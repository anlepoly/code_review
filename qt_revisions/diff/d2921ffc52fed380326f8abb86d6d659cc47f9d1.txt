diff --git a/src/declarative/qml/v8/qv8engine.cpp b/src/declarative/qml/v8/qv8engine.cpp
index 04589fe..70e6528 100644
--- a/src/declarative/qml/v8/qv8engine.cpp
+++ b/src/declarative/qml/v8/qv8engine.cpp
@@ -75,12 +75,14 @@ static bool ObjectComparisonCallback(v8::Local<v8::Object> lhs, v8::Local<v8::Ob
     if (lhs == rhs)
         return true;
 
+    if (lhs.IsEmpty() || rhs.IsEmpty())
+        return false;
+
     QV8ObjectResource *lhsr = static_cast<QV8ObjectResource*>(lhs->GetExternalResource());
     QV8ObjectResource *rhsr = static_cast<QV8ObjectResource*>(rhs->GetExternalResource());
 
-    Q_ASSERT(lhsr->engine == rhsr->engine);
-
     if (lhsr && rhsr) {
+        Q_ASSERT(lhsr->engine == rhsr->engine);
         QV8ObjectResource::ResourceType lhst = lhsr->resourceType();
         QV8ObjectResource::ResourceType rhst = rhsr->resourceType();
 
diff --git a/tests/auto/declarative/qdeclarativevaluetypes/data/nonValueTypeComparison.qml b/tests/auto/declarative/qdeclarativevaluetypes/data/nonValueTypeComparison.qml
new file mode 100644
index 0000000..0ffa5eb
--- /dev/null
+++ b/tests/auto/declarative/qdeclarativevaluetypes/data/nonValueTypeComparison.qml
@@ -0,0 +1,10 @@
+import QtQuick 2.0
+
+Item {
+    property variant somepoint: Qt.point(1,2)
+    property variant randomjsobj: {"some": 1, "thing": 2}
+    property bool test1: somepoint != randomjsobj
+
+    property variant similar: {"x":1, "y":2}
+    property bool test2: somepoint != similar
+}
diff --git a/tests/auto/declarative/qdeclarativevaluetypes/tst_qdeclarativevaluetypes.cpp b/tests/auto/declarative/qdeclarativevaluetypes/tst_qdeclarativevaluetypes.cpp
index 72ec7a5..e701efa 100644
--- a/tests/auto/declarative/qdeclarativevaluetypes/tst_qdeclarativevaluetypes.cpp
+++ b/tests/auto/declarative/qdeclarativevaluetypes/tst_qdeclarativevaluetypes.cpp
@@ -93,6 +93,7 @@ private slots:
     void returnValues();
     void varAssignment();
     void bindingsSpliceCorrectly();
+    void nonValueTypeComparison();
 
 private:
     QDeclarativeEngine engine;
@@ -1301,6 +1302,18 @@ void tst_qdeclarativevaluetypes::bindingsSpliceCorrectly()
     }
 }
 
+void tst_qdeclarativevaluetypes::nonValueTypeComparison()
+{
+    QDeclarativeComponent component(&engine, testFileUrl("nonValueTypeComparison.qml"));
+    QObject *object = component.create();
+    QVERIFY(object != 0);
+
+    QCOMPARE(object->property("test1").toBool(), true);
+    QCOMPARE(object->property("test2").toBool(), true);
+
+    delete object;
+}
+
 QTEST_MAIN(tst_qdeclarativevaluetypes)
 
 #include "tst_qdeclarativevaluetypes.moc"