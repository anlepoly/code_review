diff --git a/examples/Gallery.qml b/examples/Gallery.qml
index 969312e..59a6454 100644
--- a/examples/Gallery.qml
+++ b/examples/Gallery.qml
@@ -36,6 +36,36 @@ Rectangle {
                 anchors.verticalCenter: parent.verticalCenter
                 onClicked: window1.visible = !window1.visible
             }
+            ToolButton{
+                iconName: "document-open"
+                anchors.verticalCenter: parent.verticalCenter
+                onClicked: fileDialogLoad.open()
+            }
+            ToolButton{
+                iconName: "document-save-as"
+                anchors.verticalCenter: parent.verticalCenter
+                onClicked: fileDialogSave.open()
+            }
+        }
+
+        FileDialog {
+            id: fileDialogLoad
+            folder: "/tmp"
+            title: "Choose a file to open"
+            selectMultiple: true
+            nameFilters: [ "Image files (*.png *.jpg)", "All files (*)" ]
+
+            onAccepted: { console.log("Accepted: " + filePaths) }
+        }
+
+        FileDialog {
+            id: fileDialogSave
+            folder: "/tmp"
+            title: "Save as..."
+            modal: true
+            selectExisting: false
+
+            onAccepted: { console.log("Accepted: " + filePath) }
         }
 
         Window {
diff --git a/src/qfiledialogitem.cpp b/src/qfiledialogitem.cpp
new file mode 100644
index 0000000..23360b7
--- /dev/null
+++ b/src/qfiledialogitem.cpp
@@ -0,0 +1,305 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Alberto Mardegan <info@mardy.it>
+** Contact: http://www.qt-project.org/
+**
+** This file is part of the Qt Components project.
+**
+** $QT_BEGIN_LICENSE:BSD$
+** You may use this file under the terms of the BSD license as follows:
+**
+** "Redistribution and use in source and binary forms, with or without
+** modification, are permitted provided that the following conditions are
+** met:
+**   * Redistributions of source code must retain the above copyright
+**     notice, this list of conditions and the following disclaimer.
+**   * Redistributions in binary form must reproduce the above copyright
+**     notice, this list of conditions and the following disclaimer in
+**     the documentation and/or other materials provided with the
+**     distribution.
+**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
+**     the names of its contributors may be used to endorse or promote
+**     products derived from this software without specific prior written
+**     permission.
+**
+** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+/*!
+    \qmlclass FileDialog QFileDialogItem
+    \ingroup qt-components
+    \brief Dialog component for choosing files from a local filesystem.
+
+    FileDialog implements a basic file chooser: it allows the user to select
+    existing files and/or directories, or create new filenames.
+*/
+
+/*!
+    \qmlsignal FileDialog::accepted
+
+    The \a accepted signal is emitted when the user has finished using the
+    dialog. You can then inspect the \a filePath or \a filePaths properties to
+    get the selection.
+
+    Example:
+
+    \qml
+    FileDialog {
+        onAccepted: { console.log("Selected file: " + filePath) }
+    }
+    \endqml
+*/
+
+/*!
+    \qmlsignal FileDialog::rejected
+
+    The \a rejected signal is emitted when the user has dismissed the dialog,
+    either by closing the dialog window or by pressing the Cancel button.
+*/
+
+#include "qfiledialogitem.h"
+
+#include <QGraphicsScene>
+
+QFileDialogItem::QFileDialogItem():
+    _dialog(new QFileDialog),
+    _isOpen(false),
+    _selectExisting(true),
+    _selectMultiple(false),
+    _selectFolder(false)
+{
+    QObject::connect(_dialog, SIGNAL(accepted()), this, SIGNAL(accepted()));
+    QObject::connect(_dialog, SIGNAL(rejected()), this, SIGNAL(rejected()));
+}
+
+QFileDialogItem::~QFileDialogItem()
+{
+    delete _dialog;
+}
+
+/*!
+    \qmlproperty string FileDialog::title
+
+    The title of the dialog window.
+*/
+void QFileDialogItem::setTitle(QString title)
+{
+    _dialog->setWindowTitle(title);
+    emit titleChanged();
+}
+
+/* Intentionally left undocumented, as we might decide to remove it later */
+void QFileDialogItem::setModal(bool modal)
+{
+    bool visible = _dialog->isVisible();
+    _dialog->hide();
+    _dialog->setWindowModality(modal ? Qt::WindowModal : Qt::NonModal);
+
+    if (visible)
+        _dialog->show();
+    emit modalityChanged();
+}
+
+/*!
+    \qmlproperty bool FileDialog::selectExisting
+
+    Whether only existing files or directories can be selected.
+
+    By default, this property is true.
+*/
+void QFileDialogItem::setSelectExisting(bool selectExisting)
+{
+    if (selectExisting == _selectExisting) return;
+    _selectExisting = selectExisting;
+
+    updateFileMode();
+
+    _dialog->setAcceptMode(selectExisting ?
+                           QFileDialog::AcceptOpen : QFileDialog::AcceptSave);
+
+    Q_EMIT selectExistingChanged();
+}
+
+/*!
+    \qmlproperty bool FileDialog::selectMultiple
+
+    Whether more than one filename can be selected.
+
+    By default, this property is false.
+*/
+void QFileDialogItem::setSelectMultiple(bool selectMultiple)
+{
+    if (selectMultiple == _selectMultiple) return;
+    _selectMultiple = selectMultiple;
+
+    updateFileMode();
+
+    Q_EMIT selectMultipleChanged();
+}
+
+/*!
+    \qmlproperty bool FileDialog::selectFolder
+
+    Whether the selected item should be a folder.
+
+    By default, this property is false.
+*/
+void QFileDialogItem::setSelectFolder(bool selectFolder)
+{
+    if (selectFolder == _selectFolder) return;
+    _selectFolder = selectFolder;
+
+    updateFileMode();
+
+    Q_EMIT selectFolderChanged();
+}
+
+void QFileDialogItem::updateFileMode()
+{
+    QFileDialog::FileMode mode = QFileDialog::AnyFile;
+
+    if (_selectFolder) {
+        mode = QFileDialog::Directory;
+        _dialog->setOption(QFileDialog::ShowDirsOnly, true);
+    } else if (_selectExisting) {
+        mode = _selectMultiple ?
+            QFileDialog::ExistingFiles : QFileDialog::ExistingFile;
+        _dialog->setOption(QFileDialog::ShowDirsOnly, false);
+    }
+    _dialog->setFileMode(mode);
+}
+
+/*!
+    \qmlproperty string FileDialog::folder
+
+    The path to the currently selected folder. Setting this property before
+    invoking open() will cause the file browser to be initially positioned on
+    the specified folder.
+
+    The value of this property is also updated after the dialog is closed.
+
+    By default, this property is false.
+*/
+void QFileDialogItem::setFolder(const QString &folder)
+{
+    _dialog->setDirectory(folder);
+    Q_EMIT folderChanged();
+}
+
+QString QFileDialogItem::folder() const
+{
+    return _dialog->directory().absolutePath();
+}
+
+/*!
+    \qmlproperty list<string> FileDialog::nameFilters
+
+    A list of strings to be used as file name filters. Each string can be a
+    space-separated list of filters; filters may include the ? and * wildcards.
+    The list of filters can also be enclosed in parentheses and a textual
+    description of the filter can be provided.
+
+    For example:
+
+    \qml
+    FileDialog {
+        nameFilters: [ "Image files (*.jpg *.png)", "All files (*)" ]
+    }
+    \endqml
+
+    \note Directories are not excluded by filters.
+*/
+void QFileDialogItem::setNameFilters(const QStringList &nameFilters)
+{
+    _dialog->setNameFilters(nameFilters);
+    Q_EMIT nameFiltersChanged();
+}
+
+/*!
+    \qmlproperty string FileDialog::filePath
+
+    The path of the file which was selected by the user.
+
+    \note This property is set only if exactly one file was selected. In all
+    other cases, it will return an empty string.
+
+    \sa filePaths
+*/
+QString QFileDialogItem::filePath() const
+{
+    QStringList files = filePaths();
+    return (files.count() == 1) ? files[0] : QString();
+}
+
+/*!
+    \qmlproperty list<string> FileDialog::filePaths
+
+    The list of file paths which were selected by the user.
+*/
+QStringList QFileDialogItem::filePaths() const
+{
+    return _dialog->selectedFiles();
+}
+
+/*!
+    \qmlmethod void FileDialog::open()
+
+    Shows the dialog to the user.
+*/
+void QFileDialogItem::open()
+{
+    /* We must set the QtDeclarative scene as parent widget for the
+     * QDialog, so that it will be positioned on top of it.
+     * This is also necessary for the modality to work.
+     */
+    if (_dialog->parentWidget() == 0) {
+        QList<QGraphicsView *> views = scene()->views();
+        if (!views.isEmpty()) {
+            _dialog->setParent(views[0], Qt::Dialog);
+        }
+    }
+
+    if (isVisible()) {
+        _dialog->show();
+    }
+    _isOpen = true;
+}
+
+/*!
+    \qmlmethod void FileDialog::close()
+
+    Closes the dialog.
+*/
+void QFileDialogItem::close()
+{
+    _isOpen = false;
+    _dialog->hide();
+}
+
+QVariant QFileDialogItem::itemChange(GraphicsItemChange change,
+                                     const QVariant &value)
+{
+    if (change == QGraphicsItem::QGraphicsItem::ItemVisibleHasChanged) {
+        bool visible = value.toBool();
+
+        if (visible && _isOpen) {
+            _dialog->show();
+        } else {
+            _dialog->hide();
+        }
+    }
+
+    return QDeclarativeItem::itemChange(change, value);
+}
diff --git a/src/qfiledialogitem.h b/src/qfiledialogitem.h
new file mode 100644
index 0000000..01af200
--- /dev/null
+++ b/src/qfiledialogitem.h
@@ -0,0 +1,116 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Alberto Mardegan <info@mardy.it>
+** Contact: http://www.qt-project.org/
+**
+** This file is part of the Qt Components project.
+**
+** $QT_BEGIN_LICENSE:BSD$
+** You may use this file under the terms of the BSD license as follows:
+**
+** "Redistribution and use in source and binary forms, with or without
+** modification, are permitted provided that the following conditions are
+** met:
+**   * Redistributions of source code must retain the above copyright
+**     notice, this list of conditions and the following disclaimer.
+**   * Redistributions in binary form must reproduce the above copyright
+**     notice, this list of conditions and the following disclaimer in
+**     the documentation and/or other materials provided with the
+**     distribution.
+**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
+**     the names of its contributors may be used to endorse or promote
+**     products derived from this software without specific prior written
+**     permission.
+**
+** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#ifndef QFILEDIALOGITEM_H
+#define QFILEDIALOGITEM_H
+
+#include <QtGui/QApplication>
+#include <QDeclarativeItem>
+#include <QDeclarativeView>
+#include <QFileDialog>
+
+class QFileDialogItem: public QDeclarativeItem
+{
+    Q_OBJECT
+    Q_PROPERTY(bool modal READ modal WRITE setModal NOTIFY modalityChanged)
+    Q_PROPERTY(QString title READ title WRITE setTitle NOTIFY titleChanged)
+    Q_PROPERTY(bool selectExisting READ selectExisting \
+               WRITE setSelectExisting NOTIFY selectExistingChanged)
+    Q_PROPERTY(bool selectMultiple READ selectMultiple \
+               WRITE setSelectMultiple NOTIFY selectMultipleChanged)
+    Q_PROPERTY(bool selectFolder READ selectFolder \
+               WRITE setSelectFolder NOTIFY selectFolderChanged)
+    Q_PROPERTY(QString folder READ folder WRITE setFolder NOTIFY folderChanged)
+    Q_PROPERTY(QStringList nameFilters READ nameFilters \
+               WRITE setNameFilters NOTIFY nameFiltersChanged)
+    Q_PROPERTY(QString filePath READ filePath NOTIFY accepted)
+    Q_PROPERTY(QStringList filePaths READ filePaths NOTIFY accepted)
+
+public:
+    QFileDialogItem();
+    ~QFileDialogItem();
+
+    QString title() const { return _dialog->windowTitle(); }
+    bool modal() const { return _dialog->isModal(); }
+    bool selectExisting() const { return _selectExisting; }
+    bool selectMultiple() const { return _selectMultiple; }
+    bool selectFolder() const { return _selectFolder; }
+    QString folder() const;
+    QStringList nameFilters() const { return _dialog->nameFilters(); }
+    QString filePath() const;
+    QStringList filePaths() const;
+
+    void setTitle(QString title);
+    void setModal(bool modal);
+    void setSelectExisting(bool selectExisting);
+    void setSelectMultiple(bool selectMultiple);
+    void setSelectFolder(bool selectFolder);
+    void setFolder(const QString &folder);
+    void setNameFilters(const QStringList &nameFilters);
+
+public Q_SLOTS:
+    void open();
+    void close();
+
+Q_SIGNALS:
+    void titleChanged();
+    void modalityChanged();
+    void accepted();
+    void rejected();
+    void selectExistingChanged();
+    void selectMultipleChanged();
+    void selectFolderChanged();
+    void folderChanged();
+    void nameFiltersChanged();
+
+protected:
+    QVariant itemChange(GraphicsItemChange change, const QVariant &value);
+
+private:
+    void updateFileMode();
+
+private:
+    QFileDialog *_dialog;
+    bool _isOpen;
+    bool _selectExisting;
+    bool _selectMultiple;
+    bool _selectFolder;
+};
+
+#endif // QFILEDIALOGITEM_H
diff --git a/src/qstyleplugin.cpp b/src/qstyleplugin.cpp
index b65ac22..fe41350 100644
--- a/src/qstyleplugin.cpp
+++ b/src/qstyleplugin.cpp
@@ -52,6 +52,7 @@
 #include "qtsplitterbase.h"
 #include "qdeclarativelinearlayout.h"
 #include <qdeclarativeextensionplugin.h>
+#include "qfiledialogitem.h"
 #include "settings.h"
 
 #include <qdeclarativeengine.h>
@@ -96,6 +97,8 @@ void StylePlugin::registerTypes(const char *uri)
     qmlRegisterType<QtMenuItem>(uri, 0, 1, "MenuItem");
     qmlRegisterType<QtMenuSeparator>(uri, 0, 1, "Separator");
 
+    qmlRegisterType<QFileDialogItem>(uri, 0, 1, "FileDialog");
+
     qmlRegisterType<QFileSystemModel>(uri, 0, 1, "FileSystemModel");
     qmlRegisterType<QtSplitterBase>(uri, 0, 1, "Splitter");
     qmlRegisterType<Settings>(uri, 0, 1, "Settings");
diff --git a/src/src.pro b/src/src.pro
index 33acc58..ad26cff 100644
--- a/src/src.pro
+++ b/src/src.pro
@@ -27,6 +27,7 @@ HEADERS += qtmenu.h \
            qdeclarativelayout.h \
            qdeclarativelinearlayout.h \
            qdeclarativelayoutengine_p.h \
+           qfiledialogitem.h \
            settings.h
 
 SOURCES += qtmenu.cpp \
@@ -46,6 +47,7 @@ SOURCES += qtmenu.cpp \
            qdeclarativelayout.cpp \
            qdeclarativelinearlayout.cpp \
            qdeclarativelayoutengine.cpp \
+           qfiledialogitem.cpp \
            settings.cpp
 
 TARGETPATH = QtDesktop/plugin