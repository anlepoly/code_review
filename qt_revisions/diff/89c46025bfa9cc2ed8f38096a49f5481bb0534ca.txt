diff --git a/tools/qdoc3/cppcodeparser.cpp b/tools/qdoc3/cppcodeparser.cpp
index 1cdbd19..3d09a63 100644
--- a/tools/qdoc3/cppcodeparser.cpp
+++ b/tools/qdoc3/cppcodeparser.cpp
@@ -59,17 +59,18 @@ QT_BEGIN_NAMESPACE
 
 #define COMMAND_CLASS                   Doc::alias("class")
 #define COMMAND_CONTENTSPAGE            Doc::alias("contentspage")
+#define COMMAND_DITAMAP                 Doc::alias("ditamap")
 #define COMMAND_ENUM                    Doc::alias("enum")
 #define COMMAND_EXAMPLE                 Doc::alias("example")
 #define COMMAND_EXTERNALPAGE            Doc::alias("externalpage")
-#define COMMAND_FILE                    Doc::alias("file") // ### don't document
+#define COMMAND_FILE                    Doc::alias("file")
 #define COMMAND_FN                      Doc::alias("fn")
 #define COMMAND_GROUP                   Doc::alias("group")
 #define COMMAND_HEADERFILE              Doc::alias("headerfile")
 #define COMMAND_INDEXPAGE               Doc::alias("indexpage")
-#define COMMAND_INHEADERFILE            Doc::alias("inheaderfile") // ### don't document
+#define COMMAND_INHEADERFILE            Doc::alias("inheaderfile")
 #define COMMAND_MACRO                   Doc::alias("macro")
-#define COMMAND_MODULE                  Doc::alias("module") // ### don't document
+#define COMMAND_MODULE                  Doc::alias("module")
 #define COMMAND_NAMESPACE               Doc::alias("namespace")
 #define COMMAND_OVERLOAD                Doc::alias("overload")
 #define COMMAND_NEXTPAGE                Doc::alias("nextpage")
@@ -498,6 +499,7 @@ const FunctionNode *CppCodeParser::findFunctionNode(const QString& synopsis,
 QSet<QString> CppCodeParser::topicCommands()
 {
     return QSet<QString>() << COMMAND_CLASS
+                           << COMMAND_DITAMAP
                            << COMMAND_ENUM
                            << COMMAND_EXAMPLE
                            << COMMAND_EXTERNALPAGE
@@ -721,6 +723,8 @@ Node* CppCodeParser::processTopicCommand(const Doc& doc,
                 ptype = Node::TutorialPage;
             else if (t == "faq")
                 ptype = Node::FAQPage;
+            else if (t == "ditamap")
+                ptype = Node::DitaMapPage;
         }
 
         /*
@@ -735,12 +739,20 @@ Node* CppCodeParser::processTopicCommand(const Doc& doc,
           node and return that one.
         */
         NameCollisionNode* ncn = tre->checkForCollision(args[0]);
-        FakeNode* fn = new FakeNode(tre->root(), args[0], Node::Page, ptype);
+        FakeNode* fn = 0;
+        if (ptype == Node::DitaMapPage)
+            fn = new DitaMapNode(tre->root(), args[0]);
+        else
+            fn = new FakeNode(tre->root(), args[0], Node::Page, ptype);
         if (ncn) {
             ncn->addCollision(fn);
         }
         return fn;
     }
+    else if (command == COMMAND_DITAMAP) {
+        FakeNode* fn = new DitaMapNode(tre->root(), arg);
+        return fn;
+    }
     else if (command == COMMAND_QMLCLASS) {
         const ClassNode* classNode = 0;
         QStringList names = arg.split(QLatin1Char(' '));
diff --git a/tools/qdoc3/ditaxmlgenerator.cpp b/tools/qdoc3/ditaxmlgenerator.cpp
index 350fe6c..e5a89cf 100644
--- a/tools/qdoc3/ditaxmlgenerator.cpp
+++ b/tools/qdoc3/ditaxmlgenerator.cpp
@@ -2228,6 +2228,17 @@ void DitaXmlGenerator::writeXrefListItem(const QString& link, const QString& tex
  */
 void DitaXmlGenerator::generateFakeNode(const FakeNode* fake, CodeMarker* marker)
 {
+    /*
+      If the fake node is a page node, and if the page type
+      is DITA map page, write the node's contents as a dita
+      map and return without doing anything else.
+     */
+    if (fake->subType() == Node::Page && fake->pageType() == Node::DitaMapPage) {
+        const DitaMapNode* dmn = static_cast<const DitaMapNode*>(fake);
+        writeDitaMap(dmn);
+        return;
+    }
+
     QList<Section> sections;
     QList<Section>::const_iterator s;
     QString fullTitle = fake->fullTitle();
@@ -5947,6 +5958,46 @@ void DitaXmlGenerator::writeDitaMap(const Tree *tree)
         delete pageTypeMaps[i];
 }
 
+/*!
+  Creates the DITA map from the topicrefs in \a node,
+  which is a DitaMapNode.
+ */
+void DitaXmlGenerator::writeDitaMap(const DitaMapNode* node)
+{
+    beginSubPage(node,node->name());
+
+    QString doctype;
+    doctype = "<!DOCTYPE map PUBLIC \"-//OASIS//DTD DITA Map//EN\" \"map.dtd\">";
+    //    doctype = "<!DOCTYPE cxxAPIMap PUBLIC \"-//NOKIA//DTD DITA C++ API Map Reference Type v0.6.0//EN\" \"dtd/cxxAPIMap.dtd\">";
+
+    xmlWriter().writeDTD(doctype);
+    writeStartTag(DT_map);
+    writeStartTag(DT_topicmeta);
+    writeStartTag(DT_shortdesc);
+    xmlWriter().writeCharacters(node->title());
+    writeEndTag(); // </shortdesc>
+    writeEndTag(); // </topicmeta>
+    const QList<Topicref*> map = node->map();
+    writeTopicrefs(map);
+    endSubPage();
+}
+
+/*!
+  Write the \a topicrefs to the current output file.
+ */
+void DitaXmlGenerator::writeTopicrefs(const QList<Topicref*>& topicrefs)
+{
+    foreach (Topicref* t, topicrefs) {
+        writeStartTag(DT_topicref);
+        xmlWriter().writeAttribute("navtitle",t->navtitle());
+        if (!t->href().isEmpty())
+            xmlWriter().writeAttribute("href",t->href());
+        if (!t->subrefs().isEmpty())
+            writeTopicrefs(t->subrefs());
+        writeEndTag(); // </topicref>
+    }
+}
+
 void DitaXmlGenerator::writeTopicrefs(NodeMultiMap* nmm, const QString& navtitle)
 {
     if (!nmm || nmm->isEmpty())
diff --git a/tools/qdoc3/ditaxmlgenerator.h b/tools/qdoc3/ditaxmlgenerator.h
index c23ac56..7cfe76d 100644
--- a/tools/qdoc3/ditaxmlgenerator.h
+++ b/tools/qdoc3/ditaxmlgenerator.h
@@ -442,6 +442,7 @@ class DitaXmlGenerator : public PageGenerator
     void writeApiDesc(const Node* node, CodeMarker* marker, const QString& title);
     void addLink(const QString& href, const QStringRef& text, DitaTag t = DT_xref);
     void writeDitaMap(const Tree* tree);
+    void writeDitaMap(const DitaMapNode* node);
     void writeStartTag(DitaTag t);
     void writeEndTag(DitaTag t=DT_NONE);
     DitaTag currentTag();
@@ -454,6 +455,7 @@ class DitaXmlGenerator : public PageGenerator
     QString metadataDefault(DitaTag t) const;
     QString stripMarkup(const QString& src) const;
     void collectNodesByTypeAndSubtype(const InnerNode* parent);
+    void writeTopicrefs(const QList<Topicref*>& topicrefs);
     void writeTopicrefs(NodeMultiMap* nmm, const QString& navtitle);
     bool isDuplicate(NodeMultiMap* nmm, const QString& key, Node* node);
 
diff --git a/tools/qdoc3/doc.cpp b/tools/qdoc3/doc.cpp
index 1008919..427da7a 100644
--- a/tools/qdoc3/doc.cpp
+++ b/tools/qdoc3/doc.cpp
@@ -84,7 +84,7 @@ enum {
     CMD_BRIEF,
     CMD_C,
     CMD_CAPTION,
-    CMD_CHAPTER, // 9
+    CMD_CHAPTER,
     CMD_CODE,
     CMD_CODELINE,
     CMD_DIV,
@@ -109,6 +109,7 @@ enum {
     CMD_ENDSECTION4,
     CMD_ENDSIDEBAR,
     CMD_ENDTABLE,
+    CMD_ENDTOPICREF,
     CMD_EXPIRE,
     CMD_FOOTNOTE,
     CMD_GENERATELIST,
@@ -145,10 +146,10 @@ enum {
     CMD_RAW,
     CMD_ROW,
     CMD_SA,
-    CMD_SECTION1, // 68
-    CMD_SECTION2, // 69
-    CMD_SECTION3, // 70
-    CMD_SECTION4, // 71
+    CMD_SECTION1,
+    CMD_SECTION2,
+    CMD_SECTION3,
+    CMD_SECTION4,
     CMD_SIDEBAR,
     CMD_SINCELIST,
     CMD_SKIPLINE,
@@ -161,6 +162,7 @@ enum {
     CMD_TABLE,
     CMD_TABLEOFCONTENTS,
     CMD_TARGET,
+    CMD_TOPICREF,
     CMD_TT,
     CMD_UNDERLINE,
     CMD_UNICODE,
@@ -218,6 +220,7 @@ static struct {
     { "endsection4", CMD_ENDSECTION4, 0 },  // ### don't document for now
     { "endsidebar", CMD_ENDSIDEBAR, 0 },
     { "endtable", CMD_ENDTABLE, 0 },
+    { "endtopicref", CMD_ENDTOPICREF, 0 },
     { "expire", CMD_EXPIRE, 0 },
     { "footnote", CMD_FOOTNOTE, 0 },
     { "generatelist", CMD_GENERATELIST, 0 },
@@ -250,7 +253,7 @@ static struct {
     { "quotation", CMD_QUOTATION, 0 },
     { "quotefile", CMD_QUOTEFILE, 0 },
     { "quotefromfile", CMD_QUOTEFROMFILE, 0 },
-    { "quotefunction", CMD_QUOTEFUNCTION, 0 }, // ### don't document for now
+    { "quotefunction", CMD_QUOTEFUNCTION, 0 },
     { "raw", CMD_RAW, 0 },
     { "row", CMD_ROW, 0 },
     { "sa", CMD_SA, 0 },
@@ -258,7 +261,7 @@ static struct {
     { "section2", CMD_SECTION2, 0 },
     { "section3", CMD_SECTION3, 0 },
     { "section4", CMD_SECTION4, 0 },
-    { "sidebar", CMD_SIDEBAR, 0 }, // ### don't document for now
+    { "sidebar", CMD_SIDEBAR, 0 },
     { "sincelist", CMD_SINCELIST, 0 },
     { "skipline", CMD_SKIPLINE, 0 },
     { "skipto", CMD_SKIPTO, 0 },
@@ -270,6 +273,7 @@ static struct {
     { "table", CMD_TABLE, 0 },
     { "tableofcontents", CMD_TABLEOFCONTENTS, 0 },
     { "target", CMD_TARGET, 0 },
+    { "topicref", CMD_TOPICREF, 0 },
     { "tt", CMD_TT, 0 },
     { "underline", CMD_UNDERLINE, 0 },
     { "unicode", CMD_UNICODE, 0 },
@@ -357,6 +361,7 @@ class DocPrivate : public Shared
     bool hasSectioningUnits : 1;
     DocPrivateExtra *extra;
     TopicList topics;
+    QList<Topicref*> ditamap_;
 };
 
 DocPrivate::DocPrivate(const Location& start,
@@ -375,6 +380,9 @@ DocPrivate::DocPrivate(const Location& start,
 DocPrivate::~DocPrivate()
 {
     delete extra;
+    foreach (Topicref* t, ditamap_) {
+        delete t;
+    }
 }
 
 void DocPrivate::addAlso(const Text& also)
@@ -465,6 +473,7 @@ class DocParser
     QString expandMacroToString(const QString &name, const QString &def, int numParams);
     Doc::Sections getSectioningUnit();
     QString getArgument(bool verbatim = false);
+    QString getBracedArgument(bool verbatim);
     QString getOptionalArgument();
     QString getRestOfLine();
     QString getMetaCommandArgument(const QString &cmdStr);
@@ -510,6 +519,7 @@ class DocParser
     QStack<int> openedCommands;
     QStack<OpenedList> openedLists;
     Quoter quoter;
+    QStack<Topicref*> topicrefs_;
 };
 
 int DocParser::tabSize;
@@ -784,6 +794,11 @@ void DocParser::parse(const QString& source,
                             openedLists.pop();
                         }
                         break;
+                    case CMD_ENDTOPICREF:
+                        if (closeCommand(cmd)) {
+                            topicrefs_.pop(); // zzz
+                        }
+                        break;
                     case CMD_ENDOMIT:
                         closeCommand(cmd);
                         break;
@@ -959,6 +974,20 @@ void DocParser::parse(const QString& source,
                                                          getOptionalArgument()));
                         }
                         break;
+                    case CMD_TOPICREF:
+                        if (openCommand(cmd)) {
+                            Topicref* t = new Topicref();
+                            t->setNavtitle(getArgument(true));
+                            t->setHref(getOptionalArgument());
+                            if (topicrefs_.isEmpty()) {
+                                priv->ditamap_.append(t);
+                            }
+                            else {
+                                topicrefs_.top()->appendSubref(t);
+                            }
+                            topicrefs_.push(t);
+                        }
+                        break;
                     case CMD_META:
                         priv->constructExtra();
                         p1 = getArgument();
@@ -1817,14 +1846,15 @@ bool DocParser::openCommand(int cmd)
         else if (outer == CMD_FOOTNOTE || outer == CMD_LINK) {
             ok = false;
         }
+        else if (outer == CMD_TOPICREF)
+            ok = (cmd == CMD_TOPICREF);
     }
 
     if (ok) {
         openedCommands.push(cmd);
     }
     else {
-        location().warning(tr("Cannot use '\\%1' within '\\%2'")
-                           .arg(cmdName(cmd)).arg(cmdName(outer)));
+        location().warning(tr("Can't use '\\%1' in '\\%2'").arg(cmdName(cmd)).arg(cmdName(outer)));
     }
     return ok;
 }
@@ -2235,28 +2265,19 @@ Doc::Sections DocParser::getSectioningUnit()
     }
 }
 
-QString DocParser::getArgument(bool verbatim)
+/*!
+  Gets an argument that is enclosed in braces and returns it
+  without the enclosing braces. On entry, the current character
+  is the left brace. On exit, the current character is the one
+  that comes afterr the right brace.
+
+  If \a verbatim is true, extra whitespace is retained in the
+  returned string. Otherwise, extr whitespace is removed.
+ */
+QString DocParser::getBracedArgument(bool verbatim)
 {
     QString arg;
     int delimDepth = 0;
-
-    skipSpacesOrOneEndl();
-
-    int startPos = pos;
-
-    /*
-      Typically, an argument ends at the next white-space. However,
-      braces can be used to group words:
-
-          {a few words}
-
-      Also, opening and closing parentheses have to match. Thus,
-
-          printf("%d\n", x)
-
-      is an argument too, although it contains spaces. Finally,
-      trailing punctuation is not included in an argument, nor is 's.
-    */
     if (pos < (int) in.length() && in[pos] == '{') {
         pos++;
         while (pos < (int) in.length() && delimDepth >= 0) {
@@ -2300,7 +2321,30 @@ QString DocParser::getArgument(bool verbatim)
         if (delimDepth > 0)
             location().warning(tr("Missing '}'"));
     }
-    else {
+    return arg;
+}
+
+/*!
+  Typically, an argument ends at the next white-space. However,
+  braces can be used to group words:
+
+  {a few words}
+
+  Also, opening and closing parentheses have to match. Thus,
+
+  printf("%d\n", x)
+
+  is an argument too, although it contains spaces. Finally,
+  trailing punctuation is not included in an argument, nor is 's.
+*/
+QString DocParser::getArgument(bool verbatim)
+{
+    skipSpacesOrOneEndl();
+
+    int delimDepth = 0;
+    int startPos = pos;
+    QString arg = getBracedArgument(verbatim);
+    if (arg.isEmpty()) {
         while ((pos < in.length()) &&
                ((delimDepth > 0) || ((delimDepth == 0) && !in[pos].isSpace()))) {
             switch (in[pos].unicode()) {
@@ -2609,6 +2653,8 @@ int DocParser::endCmdFor(int cmd)
         return CMD_ENDSIDEBAR;
     case CMD_TABLE:
         return CMD_ENDTABLE;
+    case CMD_TOPICREF:
+        return CMD_ENDTOPICREF;
     default:
         return cmd;
     }
@@ -3297,4 +3343,20 @@ void Doc::detach()
     priv = newPriv;
 }
 
+/*!
+  The destructor deletes all the sub-Topicrefs.
+ */
+Topicref::~Topicref()
+{
+    foreach (Topicref* t, subrefs_) {
+        delete t;
+    }
+}
+
+/*!
+  Returns a reference to the structure that will be used
+  for generating a DITA mao.
+ */
+const QList<Topicref*>& Doc::ditamap() const { return priv->ditamap_; }
+
 QT_END_NAMESPACE
diff --git a/tools/qdoc3/doc.h b/tools/qdoc3/doc.h
index 66c841a..518ace9 100644
--- a/tools/qdoc3/doc.h
+++ b/tools/qdoc3/doc.h
@@ -74,6 +74,25 @@ struct Topic
 };
 typedef QList<Topic> TopicList;
 
+class Topicref
+{
+ public:
+    Topicref() { }
+    ~Topicref();
+
+    const QString& navtitle() const { return navtitle_; }
+    const QString& href() const { return href_; }
+    void setNavtitle(const QString& t) { navtitle_ = t; }
+    void setHref(const QString& t) { href_ = t; }
+    const QList<Topicref*>& subrefs() const { return subrefs_; }
+    void appendSubref(Topicref* t) { subrefs_.append(t); }
+
+ private:
+    QString navtitle_;
+    QString href_;
+    QList<Topicref*> subrefs_;
+};
+
 class Doc
 {
  public:
@@ -107,6 +126,7 @@ class Doc
                           const QStringList &newNames);
     void simplifyEnumDoc();
     void setBody(const Text &body);
+    const QList<Topicref*>& ditamap() const;
 
     const Location &location() const;
     bool isEmpty() const;
diff --git a/tools/qdoc3/node.cpp b/tools/qdoc3/node.cpp
index 44aad63..dc20f1c 100644
--- a/tools/qdoc3/node.cpp
+++ b/tools/qdoc3/node.cpp
@@ -197,6 +197,8 @@ QString Node::pageTypeString(unsigned t)
             return "tutorial";
         case Node::FAQPage:
             return "faq";
+        case Node::DitaMapPage:
+            return "ditamap";
         default:
             return "article";
     }
@@ -292,6 +294,8 @@ QString Node::nodeSubtypeString(unsigned t)
             return "QML basic type";
         case QmlModule:
             return "QML module";
+        case DitaMap:
+            return "ditamap";
         case Collision:
             return "collision";
         case NoSubType:
@@ -320,6 +324,8 @@ void Node::setPageType(const QString& t)
         pageType_ = ArticlePage;
     else if (t == "example")
         pageType_ = ExamplePage;
+    else if (t == "ditamap")
+        pageType_ = DitaMapPage;
 }
 
 /*!
@@ -1412,6 +1418,9 @@ FakeNode::FakeNode(InnerNode* parent, const QString& name, SubType subtype, Node
     case Page:
         setPageType(ptype);
         break;
+    case DitaMap:
+        setPageType(ptype);
+        break;
     case Module:
     case QmlModule:
     case Group:
diff --git a/tools/qdoc3/node.h b/tools/qdoc3/node.h
index def2890..1efcb28 100644
--- a/tools/qdoc3/node.h
+++ b/tools/qdoc3/node.h
@@ -105,6 +105,7 @@ class Node
         QmlPropertyGroup,
         QmlBasicType,
         QmlModule,
+        DitaMap,
         Collision,
         LastSubtype
     };
@@ -152,6 +153,7 @@ class Node
         OverviewPage,
         TutorialPage,
         FAQPage,
+        DitaMapPage,
         OnBeyondZebra
     };
 
@@ -446,7 +448,7 @@ class FakeNode : public InnerNode
     SubType nodeSubtype_;
     QString title_;
     QString subtitle_;
-    NodeList nodeList;
+    NodeList nodeList; // used for groups and QML modules.
 };
 
 class NameCollisionNode : public FakeNode
@@ -941,6 +943,16 @@ class TargetNode : public LeafNode
     virtual bool isInnerNode() const;
 };
 
+class DitaMapNode : public FakeNode
+{
+ public:
+    DitaMapNode(InnerNode* parent, const QString& name)
+        : FakeNode(parent, name, Node::Page, Node::DitaMapPage) { }
+    virtual ~DitaMapNode() { }
+
+    const QList<Topicref*>& map() const { return doc().ditamap(); }
+};
+
 QT_END_NAMESPACE
 
 #endif