diff --git a/src/concurrent/qfutureinterface.h b/src/concurrent/qfutureinterface.h
index f64623a..3f05466 100644
--- a/src/concurrent/qfutureinterface.h
+++ b/src/concurrent/qfutureinterface.h
@@ -60,7 +60,7 @@ class QFutureInterfaceBasePrivate;
 class QFutureWatcherBase;
 class QFutureWatcherBasePrivate;
 
-class Q_CORE_EXPORT QFutureInterfaceBase
+class Q_CONCURRENT_EXPORT QFutureInterfaceBase
 {
 public:
     enum State {
diff --git a/src/concurrent/qfuturewatcher.h b/src/concurrent/qfuturewatcher.h
index 0e94863..6b4b941 100644
--- a/src/concurrent/qfuturewatcher.h
+++ b/src/concurrent/qfuturewatcher.h
@@ -55,7 +55,7 @@ QT_BEGIN_NAMESPACE
 class QEvent;
 
 class QFutureWatcherBasePrivate;
-class Q_CORE_EXPORT QFutureWatcherBase : public QObject
+class Q_CONCURRENT_EXPORT QFutureWatcherBase : public QObject
 {
     Q_OBJECT
     Q_DECLARE_PRIVATE(QFutureWatcherBase)
diff --git a/src/concurrent/qtconcurrentexception.h b/src/concurrent/qtconcurrentexception.h
index b04e1f2..2021e77 100644
--- a/src/concurrent/qtconcurrentexception.h
+++ b/src/concurrent/qtconcurrentexception.h
@@ -62,14 +62,14 @@ namespace QtConcurrent
 
 #ifndef QT_NO_EXCEPTIONS
 
-class Q_CORE_EXPORT Exception : public std::exception
+class Q_CONCURRENT_EXPORT Exception : public std::exception
 {
 public:
     virtual void raise() const;
     virtual Exception *clone() const;
 };
 
-class Q_CORE_EXPORT UnhandledException : public Exception
+class Q_CONCURRENT_EXPORT UnhandledException : public Exception
 {
 public:
     void raise() const;
@@ -90,7 +90,7 @@ public:
     QExplicitlySharedDataPointer<Base> base;
 };
 
-class Q_CORE_EXPORT ExceptionStore
+class Q_CONCURRENT_EXPORT ExceptionStore
 {
 public:
     void setException(const Exception &e);
@@ -107,7 +107,7 @@ public:
 
 namespace internal {
 
-class Q_CORE_EXPORT ExceptionStore
+class Q_CONCURRENT_EXPORT ExceptionStore
 {
 public:
     ExceptionStore() { }
diff --git a/src/concurrent/qtconcurrentiteratekernel.h b/src/concurrent/qtconcurrentiteratekernel.h
index a28bc31..4858053 100644
--- a/src/concurrent/qtconcurrentiteratekernel.h
+++ b/src/concurrent/qtconcurrentiteratekernel.h
@@ -80,7 +80,7 @@ namespace QtConcurrent {
     management is done on the basis of the median of several timing measuremens,
     and it is done induvidualy for each thread.
 */
-class Q_CORE_EXPORT BlockSizeManager
+class Q_CONCURRENT_EXPORT BlockSizeManager
 {
 public:
     BlockSizeManager(int iterationCount);
diff --git a/src/concurrent/qtconcurrentresultstore.h b/src/concurrent/qtconcurrentresultstore.h
index d39a45b..4be3c20 100644
--- a/src/concurrent/qtconcurrentresultstore.h
+++ b/src/concurrent/qtconcurrentresultstore.h
@@ -78,7 +78,7 @@ public:
     const void *result; // if count is 0 it's a result, otherwise it's a vector.
 };
 
-class Q_CORE_EXPORT ResultIteratorBase
+class Q_CONCURRENT_EXPORT ResultIteratorBase
 {
 public:
     ResultIteratorBase();
@@ -119,7 +119,7 @@ public:
     }
 };
 
-class Q_CORE_EXPORT ResultStoreBase
+class Q_CONCURRENT_EXPORT ResultStoreBase
 {
 public:
     ResultStoreBase();
diff --git a/src/concurrent/qtconcurrentthreadengine.h b/src/concurrent/qtconcurrentthreadengine.h
index 20e86f5..679496c 100644
--- a/src/concurrent/qtconcurrentthreadengine.h
+++ b/src/concurrent/qtconcurrentthreadengine.h
@@ -93,7 +93,7 @@ enum ThreadFunctionResult { ThrottleThread, ThreadFinished };
 // Can be run in three modes: single threaded, multi-threaded blocking
 // and multi-threaded asynchronous.
 // The code for the single threaded mode is
-class Q_CORE_EXPORT ThreadEngineBase: public QRunnable
+class Q_CONCURRENT_EXPORT ThreadEngineBase: public QRunnable
 {
 public:
     // Public API:
diff --git a/tests/auto/concurrent/qfuture/qfuture.pro b/tests/auto/concurrent/qfuture/qfuture.pro
index a4c7061..c0fe7ec 100644
--- a/tests/auto/concurrent/qfuture/qfuture.pro
+++ b/tests/auto/concurrent/qfuture/qfuture.pro
@@ -1,5 +1,5 @@
 CONFIG += testcase parallel_test
 TARGET = tst_qfuture
-QT = concurrent-private testlib concurrent
+QT = core concurrent-private testlib concurrent
 SOURCES = tst_qfuture.cpp
 DEFINES += QT_STRICT_ITERATORS
diff --git a/tests/auto/concurrent/qfuturewatcher/qfuturewatcher.pro b/tests/auto/concurrent/qfuturewatcher/qfuturewatcher.pro
index 3b8ebda..e9caf54 100644
--- a/tests/auto/concurrent/qfuturewatcher/qfuturewatcher.pro
+++ b/tests/auto/concurrent/qfuturewatcher/qfuturewatcher.pro
@@ -1,4 +1,4 @@
 CONFIG += testcase parallel_test
 TARGET = tst_qfuturewatcher
-QT = concurrent-private testlib concurrent
+QT = core concurrent-private testlib concurrent
 SOURCES = tst_qfuturewatcher.cpp