diff --git a/src/tools/qdoc/config.cpp b/src/tools/qdoc/config.cpp
index 81594a0..e86fb33 100644
--- a/src/tools/qdoc/config.cpp
+++ b/src/tools/qdoc/config.cpp
@@ -229,7 +229,7 @@ void Config::unload(const QString& fileName)
  */
 void Config::setStringList(const QString& var, const QStringList& values)
 {
-    stringValueMap[var] = values.join(QLatin1String(" "));
+    stringValueMap[var] = values.join(QLatin1Char(' '));
     stringListValueMap[var] = values;
 }
 
diff --git a/src/tools/qdoc/cppcodemarker.cpp b/src/tools/qdoc/cppcodemarker.cpp
index e2115e8..3abe4c2 100644
--- a/src/tools/qdoc/cppcodemarker.cpp
+++ b/src/tools/qdoc/cppcodemarker.cpp
@@ -220,7 +220,7 @@ QString CppCodeMarker::markedUpSynopsis(const Node *node,
                 bracketed += "slot";
             }
             if (!bracketed.isEmpty())
-                extra += " [" + bracketed.join(" ") + QLatin1Char(']');
+                extra += " [" + bracketed.join(' ') + QLatin1Char(']');
         }
         break;
     case Node::Enum:
diff --git a/src/tools/qdoc/cppcodeparser.cpp b/src/tools/qdoc/cppcodeparser.cpp
index 0022b0e..de7b833 100644
--- a/src/tools/qdoc/cppcodeparser.cpp
+++ b/src/tools/qdoc/cppcodeparser.cpp
@@ -104,7 +104,7 @@ void CppCodeParser::initializeParser(const Config &config)
                 CONFIG_EXAMPLES + Config::dot + CONFIG_FILEEXTENSIONS);
 
     if (!exampleFilePatterns.isEmpty())
-        exampleNameFilter = exampleFilePatterns.join(" ");
+        exampleNameFilter = exampleFilePatterns.join(' ');
     else
         exampleNameFilter = "*.cpp *.h *.js *.xq *.svg *.xml *.dita *.ui";
 
@@ -112,7 +112,7 @@ void CppCodeParser::initializeParser(const Config &config)
                 CONFIG_EXAMPLES + Config::dot + CONFIG_IMAGEEXTENSIONS);
 
     if (!exampleImagePatterns.isEmpty())
-        exampleImageFilter = exampleImagePatterns.join(" ");
+        exampleImageFilter = exampleImagePatterns.join(' ');
     else
         exampleImageFilter = "*.png";
 }
diff --git a/src/tools/qdoc/ditaxmlgenerator.cpp b/src/tools/qdoc/ditaxmlgenerator.cpp
index bc07312..10caa43 100644
--- a/src/tools/qdoc/ditaxmlgenerator.cpp
+++ b/src/tools/qdoc/ditaxmlgenerator.cpp
@@ -1754,7 +1754,7 @@ int DitaXmlGenerator::generateAtom(const Atom *atom,
             if (pieces.size() >= 2) {
                 columnText = pieces.at(0);
                 pieces.pop_front();
-                QString path = pieces.join(" ").trimmed();
+                QString path = pieces.join(' ').trimmed();
                 node = qdb_->findNodeForTarget(path, relative, atom);
                 if (!node)
                     relative->doc().location().warning(tr("Cannot link to '%1'").arg(path));
diff --git a/src/tools/qdoc/doc.cpp b/src/tools/qdoc/doc.cpp
index 51627b1..107976f 100644
--- a/src/tools/qdoc/doc.cpp
+++ b/src/tools/qdoc/doc.cpp
@@ -2954,7 +2954,7 @@ Text Doc::trimmedBriefText(const QString &className) const
                 w.removeFirst();
         }
 
-        whats = w.join(" ");
+        whats = w.join(' ');
 
         if (whats.endsWith(QLatin1Char('.')))
             whats.truncate(whats.length() - 1);
diff --git a/src/tools/qdoc/generator.cpp b/src/tools/qdoc/generator.cpp
index 8e05668..5f2fae6 100644
--- a/src/tools/qdoc/generator.cpp
+++ b/src/tools/qdoc/generator.cpp
@@ -1083,7 +1083,7 @@ void Generator::generateSince(const Node *node, CodeMarker *marker)
             text << " " << since[0];
         } else {
             // Reconstruct the <project> <version> string.
-            text << " " << since.join(" ");
+            text << " " << since.join(' ');
         }
 
         text << "." << Atom::ParaRight;
diff --git a/src/tools/qdoc/node.cpp b/src/tools/qdoc/node.cpp
index bfe23fc..d9a6ad6 100644
--- a/src/tools/qdoc/node.cpp
+++ b/src/tools/qdoc/node.cpp
@@ -2004,7 +2004,7 @@ QString FunctionNode::signature(bool values) const
 void FunctionNode::debug() const
 {
     qDebug("QML METHOD %s rt %s pp %s",
-           qPrintable(name()), qPrintable(rt), qPrintable(pp.join(" ")));
+           qPrintable(name()), qPrintable(rt), qPrintable(pp.join(' ')));
 }
 
 /*!
diff --git a/src/tools/qdoc/qmlvisitor.cpp b/src/tools/qdoc/qmlvisitor.cpp
index e40218a..8181cbc 100644
--- a/src/tools/qdoc/qmlvisitor.cpp
+++ b/src/tools/qdoc/qmlvisitor.cpp
@@ -364,7 +364,7 @@ void QmlDocVisitor::applyMetacommands(QQmlJS::AST::SourceLocation,
                 node->setStatus(Node::Preliminary);
             }
             else if (command == COMMAND_SINCE) {
-                QString arg = args[0].first; //.join(" ");
+                QString arg = args[0].first; //.join(' ');
                 node->setSince(arg);
             }
             else {
diff --git a/src/tools/qdoc/tokenizer.cpp b/src/tools/qdoc/tokenizer.cpp
index ec05150..69f2daf 100644
--- a/src/tools/qdoc/tokenizer.cpp
+++ b/src/tools/qdoc/tokenizer.cpp
@@ -502,8 +502,8 @@ void Tokenizer::initialize(const Config &config)
 
     QStringList d = config.getStringList(CONFIG_DEFINES);
     d += "qdoc";
-    defines = new QRegExp(d.join("|"));
-    falsehoods = new QRegExp(config.getStringList(CONFIG_FALSEHOODS).join("|"));
+    defines = new QRegExp(d.join('|'));
+    falsehoods = new QRegExp(config.getStringList(CONFIG_FALSEHOODS).join('|'));
 
     memset(kwordHashTable, 0, sizeof(kwordHashTable));
     for (int i = 0; i < Tok_LastKeyword - Tok_FirstKeyword + 1; i++)
diff --git a/src/tools/qdoc/tree.cpp b/src/tools/qdoc/tree.cpp
index 493671f..d1b70fa 100644
--- a/src/tools/qdoc/tree.cpp
+++ b/src/tools/qdoc/tree.cpp
@@ -1485,7 +1485,7 @@ bool Tree::generateIndexSection(QXmlStreamWriter& writer,
             ClassNode* baseClassNode = related.node;
             baseStrings.insert(baseClassNode->name());
         }
-        writer.writeAttribute("bases", QStringList(baseStrings.toList()).join(","));
+        writer.writeAttribute("bases", QStringList(baseStrings.toList()).join(','));
         writer.writeAttribute("module", node->moduleName());
     }
         break;
diff --git a/tools/configure/configureapp.cpp b/tools/configure/configureapp.cpp
index 54ac8ce..2fb9f27 100644
--- a/tools/configure/configureapp.cpp
+++ b/tools/configure/configureapp.cpp
@@ -2439,7 +2439,7 @@ void Configure::generateOutputVars()
     if (dictionary[ "SHARED" ] == "yes") {
         QString version = dictionary[ "VERSION" ];
         if (!version.isEmpty()) {
-            qmakeVars += "QMAKE_QT_VERSION_OVERRIDE = " + version.left(version.indexOf("."));
+            qmakeVars += "QMAKE_QT_VERSION_OVERRIDE = " + version.left(version.indexOf('.'));
             version.remove(QLatin1Char('.'));
         }
         dictionary[ "QMAKE_OUTDIR" ] += "_shared";
@@ -2560,7 +2560,7 @@ void Configure::generateOutputVars()
     qmakeVars += QString("RCC_DIR         = ") + formatPath("tmp/rcc/" + dictionary["QMAKE_OUTDIR"]);
 
     if (!qmakeDefines.isEmpty())
-        qmakeVars += QString("DEFINES        += ") + qmakeDefines.join(" ");
+        qmakeVars += QString("DEFINES        += ") + qmakeDefines.join(' ');
     if (!qmakeIncludes.isEmpty())
         qmakeVars += QString("INCLUDEPATH    += ") + formatPaths(qmakeIncludes);
     if (!opensslLibs.isEmpty())
@@ -2595,17 +2595,17 @@ void Configure::generateOutputVars()
         if (!sybaseLibs.isEmpty())
             lflagsTDS += sybaseLibs.section("=", 1);
         if (!lflagsTDS.isEmpty())
-            qmakeVars += QString("QT_LFLAGS_TDS=") + lflagsTDS.join(" ");
+            qmakeVars += QString("QT_LFLAGS_TDS=") + lflagsTDS.join(' ');
     }
 
     if (!qmakeSql.isEmpty())
-        qmakeVars += QString("sql-drivers    += ") + qmakeSql.join(" ");
+        qmakeVars += QString("sql-drivers    += ") + qmakeSql.join(' ');
     if (!qmakeSqlPlugins.isEmpty())
-        qmakeVars += QString("sql-plugins    += ") + qmakeSqlPlugins.join(" ");
+        qmakeVars += QString("sql-plugins    += ") + qmakeSqlPlugins.join(' ');
     if (!qmakeStyles.isEmpty())
-        qmakeVars += QString("styles         += ") + qmakeStyles.join(" ");
+        qmakeVars += QString("styles         += ") + qmakeStyles.join(' ');
     if (!qmakeStylePlugins.isEmpty())
-        qmakeVars += QString("style-plugins  += ") + qmakeStylePlugins.join(" ");
+        qmakeVars += QString("style-plugins  += ") + qmakeStylePlugins.join(' ');
 
     if (dictionary["QMAKESPEC"].endsWith("-g++")) {
         QString includepath = qgetenv("INCLUDE");
@@ -2650,7 +2650,7 @@ void Configure::generateCachefile()
         for (QStringList::Iterator var = qmakeVars.begin(); var != qmakeVars.end(); ++var) {
             cacheStream << (*var) << endl;
         }
-        cacheStream << "CONFIG         += " << qmakeConfig.join(" ") << "no_private_qt_headers_warning QTDIR_build" << endl;
+        cacheStream << "CONFIG         += " << qmakeConfig.join(' ') << "no_private_qt_headers_warning QTDIR_build" << endl;
 
         cacheStream.flush();
         cacheFile.close();
@@ -2664,7 +2664,7 @@ void Configure::generateCachefile()
         moduleStream << "#paths" << endl;
         moduleStream << "QT_BUILD_TREE   = " << formatPath(dictionary["QT_BUILD_TREE"]) << endl;
         moduleStream << "QT_SOURCE_TREE  = " << formatPath(dictionary["QT_SOURCE_TREE"]) << endl;
-        moduleStream << "QT_BUILD_PARTS += " << buildParts.join(" ") << endl << endl;
+        moduleStream << "QT_BUILD_PARTS += " << buildParts.join(' ') << endl << endl;
 
         if (dictionary["QT_EDITION"] != "QT_EDITION_OPENSOURCE")
             moduleStream << "DEFINES        *= QT_EDITION=QT_EDITION_DESKTOP" << endl;
@@ -2915,7 +2915,7 @@ void Configure::generateQConfigPri()
             configStream << "QT_EDITION = " << QLatin1String("OpenSource") << endl;
         else
             configStream << "QT_EDITION = " << dictionary["EDITION"] << endl;
-        configStream << "QT_CONFIG += " << qtConfig.join(" ") << endl;
+        configStream << "QT_CONFIG += " << qtConfig.join(' ') << endl;
 
         configStream << "#versioning " << endl
                      << "QT_VERSION = " << dictionary["VERSION"] << endl
@@ -3757,11 +3757,11 @@ void Configure::generateMakefiles()
                     }
                     QTextStream txt(&file);
                     txt << "all:\n";
-                    txt << "\t" << args.join(" ") << "\n";
+                    txt << "\t" << args.join(' ') << "\n";
                     txt << "\t$(MAKE) -$(MAKEFLAGS) -f " << it->target << "\n";
                     txt << "first: all\n";
                     txt << "qmake: FORCE\n";
-                    txt << "\t" << args.join(" ") << "\n";
+                    txt << "\t" << args.join(' ') << "\n";
                     txt << "FORCE:\n";
                 }
             }