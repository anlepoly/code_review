diff --git a/release-tools/archiveresolver.py b/release-tools/archiveresolver.py
new file mode 100644
index 0000000..1be2461
--- /dev/null
+++ b/release-tools/archiveresolver.py
@@ -0,0 +1,155 @@
+#!/usr/bin/env python
+###############################################
+#
+# Copyright (C) 2012 Digia Plc
+# For any questions to Digia, please use contact form at http://qt.digia.com
+#
+# $QT_BEGIN_LICENSE:LGPL$
+# GNU Lesser General Public License Usage
+# This file may be used under the terms of the GNU Lesser General Public
+# License version 2.1 as published by the Free Software Foundation and
+# appearing in the file LICENSE.LGPL included in the packaging of this
+# file. Please review the following information to ensure the GNU Lesser
+# General Public License version 2.1 requirements will be met:
+# http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+#
+# GNU General Public License Usage
+# Alternatively, this file may be used under the terms of the GNU General
+# Public License version 3.0 as published by the Free Software Foundation
+# and appearing in the file LICENSE.GPL included in the packaging of this
+# file. Please review the following information to ensure the GNU General
+# Public License version 3.0 requirements will be met:
+# http://www.gnu.org/copyleft/gpl.html.
+#
+# $QT_END_LICENSE$
+#
+# If you have questions regarding the use of this file, please use
+# contact form at http://qt.digia.com
+#
+###############################################
+
+import os
+import sys
+import bldinstallercommon
+
+SERVER_NAMESPACE                = 'ArchiveRemoteLocation'
+PACKAGE_REMOTE_LOCATION_RELEASE = 'release'
+PACKAGE_REMOTE_LOCATION_RND     = 'rnd'
+PACKAGE_ARCHIVE_TAG             = 'ARCHIVE_TAG'
+
+
+###############################
+# class ArchiveLocationResolver
+###############################
+class ArchiveLocationResolver:
+    """Helper class to resolve full URI for archive"""
+
+
+    ######################################
+    # inner class ArchiveRemoteLocation
+    ######################################
+    class ArchiveRemoteLocation:
+        """Container class for server URL data"""
+
+
+        ###############################
+        # Constructor
+        ###############################
+        def __init__(self, server_name, server_base_url, server_base_path):
+            self.server_name = server_name
+            temp = server_base_url
+            if not temp.endswith('/') and not server_base_path.startswith('/'):
+                temp = temp + '/'
+            temp = temp + server_base_path
+            self.server_url = temp
+
+
+    ###############################
+    # Constructor
+    ###############################
+    def __init__(self, target_config, testclient_mode):
+        """Init data based on the target configuration"""
+        self.server_list = []
+        self.pkg_templates_dir = ''
+        self.default_server = None
+        # get packages tempalates src dir first
+        self.pkg_templates_dir = os.path.normpath(bldinstallercommon.config_section_map(target_config,'WorkingDirectories')['packages_dir'])
+        server_namespace = os.path.normpath(bldinstallercommon.config_section_map(target_config,'WorkingDirectories')['packages_dir'])
+        # next read server list
+        for section in target_config.sections():
+            if section.startswith(SERVER_NAMESPACE):
+                server_name = section.split('.')[-1]
+                base_url    = bldinstallercommon.safe_config_key_fetch(target_config, section, 'base_url')
+                base_path   = bldinstallercommon.safe_config_key_fetch(target_config, section, 'base_path')
+                if testclient_mode:
+                    base_path = base_path + PACKAGE_REMOTE_LOCATION_RND
+                else:
+                    base_path = base_path + PACKAGE_REMOTE_LOCATION_RELEASE
+                server_obj  = ArchiveLocationResolver.ArchiveRemoteLocation(server_name, base_url, base_path)
+                self.server_list.append(server_obj)
+        if len(self.server_list) == 1:
+            self.default_server = self.server_list[0]
+
+
+    ###############################
+    # Get full server URL by name
+    ###############################
+    def server_url_by_name(self, server_name):
+        """Get server URL by name. If empty name given, return the default server (may be null)."""
+        if not server_name:
+            return self.default_server.server_url
+        for server in self.server_list:
+            if server.server_name == server_name:
+                return server.server_url
+        print '*** Error! Unable to find server by name: ' + server_name
+        sys.exit(-1)
+
+
+    ###############################
+    # Get full server URI
+    ###############################
+    def resolve_full_uri(self, package_name, server_name, archive_uri):
+        """Resolve the full URI in the following order
+             1. is archive_uri a valid URI as such
+             2. check if given archive_uri denotes a package under package templates directory
+             3. check if given URI is valid full URL
+             4. try to compose full URL
+            return the resolved URI
+        """
+        # source package specific, if archive_uri contains special tag, it means
+        # that it's source package. Replace the suffix specified by the platform
+        if archive_uri.endswith(PACKAGE_ARCHIVE_TAG):
+            if bldinstallercommon.is_win_platform():
+                archive_uri = archive_uri.replace(PACKAGE_ARCHIVE_TAG, 'zip')
+            else:
+                archive_uri = archive_uri.replace(PACKAGE_ARCHIVE_TAG, "tar.gz")
+        # 1. the file exists, uri points to valid path on file system (or network share)
+        if os.path.isfile(archive_uri):
+            return archive_uri
+        # 2. check if given archive_uri denotes a package under package templates directory
+        temp = os.path.normpath(self.pkg_templates_dir + os.sep + package_name + os.sep + 'data' + os.sep + archive_uri)
+        if os.path.isfile(temp):
+            return temp
+        # 3. check if given URI is valid full URL
+        res = bldinstallercommon.is_content_url_valid(archive_uri)
+        if res:
+            return archive_uri
+        # 4. try to compose full URL
+        temp = self.server_url_by_name(server_name)
+        if not temp.endswith('/') and not archive_uri.startswith('/'):
+            temp = temp + '/'
+        temp = temp + archive_uri
+        return temp
+
+
+    ###############################
+    # Print out server list
+    ###############################
+    def print_server_list(self):
+        print '--------------------------------------------------'
+        print ' Server list:'
+        for server in self.server_list:
+            print ' ---------------------------------------------'
+            print ' Server name: ' + server.server_name
+            print ' Server url:  ' + server.server_url
+
diff --git a/release-tools/bld_ifw_tools.py b/release-tools/bld_ifw_tools.py
index 05d26dc..913d139 100644
--- a/release-tools/bld_ifw_tools.py
+++ b/release-tools/bld_ifw_tools.py
@@ -41,6 +41,7 @@ import platform
 
 import bld_ifw_tools_impl
 
+
 if len(sys.argv) < 2:
     print '*** platform identifier is needed as parameter: linux/mac/windows'
     sys.exit(-1)
@@ -49,3 +50,6 @@ platformIdentifier = sys.argv[1]
 bld_ifw_tools_impl.build_ifw('release', platformIdentifier)
 
 
+
+
+
diff --git a/release-tools/bld_ifw_tools_impl.py b/release-tools/bld_ifw_tools_impl.py
index 04a1fac..c5914ef 100644
--- a/release-tools/bld_ifw_tools_impl.py
+++ b/release-tools/bld_ifw_tools_impl.py
@@ -149,6 +149,7 @@ def prepare_qt_sources():
         if not bldinstallercommon.is_content_url_valid(QT_SRC_PACKAGE_URL):
             print '*** Qt src package url is invalid! Abort!'
             sys.exit(-1)
+        urllib.urlcleanup()
         urllib.urlretrieve(QT_SRC_PACKAGE_URL, QT_SRC_PACKAGE_URL_SAVE_AS)
     else:
         print 'Found old local package, using that: ' + QT_SRC_PACKAGE_URL_SAVE_AS
@@ -189,6 +190,7 @@ def build_qt():
     else:
         cmd_args = QT_CONFIGURE_BIN + ' ' + QT_INSTALLERFW_QT_CONFIGURE_LINE + QT_BUILD_DIR
     bldinstallercommon.do_execute_sub_process(cmd_args.split(' '), QT_BUILD_DIR, True)
+
     print '--------------------------------------------------------------------'
     print 'Building Qt'
     cmd_args = MAKE_CMD
@@ -229,6 +231,7 @@ def build_installer_framework():
 
     cmd_args = qmake_bin + ' ' + INSTALLER_FRAMEWORK_QMAKE_ARGS + ' ' + INSTALLER_FRAMEWORK_SOURCE_DIR
     bldinstallercommon.do_execute_sub_process(cmd_args.split(' '), INSTALLER_FRAMEWORK_BUILD_DIR, True)
+
     cmd_args = MAKE_CMD
     bldinstallercommon.do_execute_sub_process(cmd_args.split(' '), INSTALLER_FRAMEWORK_BUILD_DIR, True)
 
@@ -269,6 +272,7 @@ def archive_installer_framework():
         for filename in files:
             if filename.endswith(('.moc', 'Makefile', '.cpp', '.h', '.o')) or filename == 'Makefile':
                 os.remove(os.path.join(root, filename))
+
     cmd_args = ['7z', 'a', INSTALLER_FRAMEWORK_ARCHIVE_NAME, os.path.basename(INSTALLER_FRAMEWORK_BUILD_DIR)]
     bldinstallercommon.do_execute_sub_process(cmd_args, SCRIPT_ROOT_DIR, True)
 
@@ -362,9 +366,24 @@ def archive_qt():
     if not archive_name:
         print '*** Error! macdeployqt_archive_name not defined?!'
         sys.exit(-1)
+    # these directories can be deleted from the Qt binary package (built for SDK purposes only)
+    directories_to_delete = ['config.tests', 'src', 'qmake', 'doc', 'imports', 'lib' + os.sep + 'pkgconfig', 'tools']
+    for item in directories_to_delete:
+        full_path = content_path + os.sep + item
+        if os.path.exists(full_path) and not os.path.islink(full_path):
+            print 'Deleting: ' + item
+            shutil.rmtree(full_path)
+    # then strip out all remaining unnecessary files
+    for root, dirs, files in os.walk(content_path + os.sep + 'bin'):
+        for filename in files:
+            if filename.endswith(('.moc', 'Makefile', '.cpp', '.h', '.o')) or filename == 'Makefile':
+                os.remove(os.path.join(root, filename))
+            if filename.startswith(('designer', 'assistant', 'qcollectiongenerator', 'linguist', 'qhelpconverter', 'qhelpgenerator', 'pixeltool', 'qdoc3', 'qt3to4')):
+                os.remove(os.path.join(root, filename))
+    # archive libraries
     cmd_args_archive = ['7z', 'a', archive_name, content_path]
     bldinstallercommon.do_execute_sub_process(cmd_args_archive, SCRIPT_ROOT_DIR, True)
-
+    # check archive was generated successfully
     if not os.path.isfile(archive_name):
         print '*** Failed to generate archive: ' + archive_name
         sys.exit(-1)
diff --git a/release-tools/bldinstallercommon.py b/release-tools/bldinstallercommon.py
index f803c7b..ee55e4f 100644
--- a/release-tools/bldinstallercommon.py
+++ b/release-tools/bldinstallercommon.py
@@ -90,6 +90,17 @@ def is_content_url_valid(url):
 ###############################
 # function
 ###############################
+def dlProgress(count, blockSize, totalSize):
+    percent = int(count*blockSize*100/totalSize)
+    sys.stdout.write("\r" + "     Downloading: %d%%" % percent)
+    sys.stdout.flush()
+    if count*blockSize >= totalSize:
+        print '\n'
+
+
+###############################
+# function
+###############################
 def set_platform_specific_data():
     global PLATFORM_SUFFIX
     global IS_UNIX_PLATFORM
@@ -525,7 +536,7 @@ def do_execute_sub_process_2(args, execution_path, abort_on_fail):
 def do_execute_sub_process_get_std_out(args, execution_path, abort_on_fail, print_debug=True):
     if print_debug:
         print '      --------------------------------------------------------------------'
-        print '      Executing: [' + list_as_string(args) + ']'
+        print '      Executing:      [' + list_as_string(args) + ']'
         print '      Execution path: [' + execution_path + ']'
     theproc = None
     output = ''
@@ -577,7 +588,7 @@ def clone_repository(repo_url, repo_branch_or_tag, destination_folder):
 def extract_file(path, to_directory='.'):
     cmd_args = []
     if path.endswith('.zip'):
-        cmd_args = ['unzip', '-qq', path]
+        cmd_args = ['7z', 'x', path]
     elif path.endswith('.tar'):
         cmd_args = ['tar', '-xzf', path]
     elif path.endswith('.tar.gz') or path.endswith('.tgz'):
diff --git a/release-tools/create_installer.py b/release-tools/create_installer.py
index de02460..062f8f7 100644
--- a/release-tools/create_installer.py
+++ b/release-tools/create_installer.py
@@ -29,52 +29,62 @@
 ###############################################
 
 """Scripts to generate SDK installer based on open source InstallerFramework"""
+
 import ConfigParser
 import os
 import shutil
 import sys
 from time import gmtime, strftime
 import urllib
+
 import bldinstallercommon
 import bld_ifw_tools_impl
+from archiveresolver import ArchiveLocationResolver
+from sdkcomponent import SdkComponent
+
+# ----------------------------------------------------------------------
+BUILD_TIMESTAMP             = strftime('%d-%b-%Y', gmtime())
+CONFIG_PARSER_COMMON        = 0
+CONFIG_PARSER_TARGET        = 0
+PLATFORM_IDENTIFIER         = ''
+MAIN_CONFIG_NAME            = ''
+SCRIPT_ROOT_DIR             = os.getcwd()
+GENERAL_TAG_SUBST_LIST      = []
+CONFIGURATIONS_DIR          = 'configurations'
+CONFIG_DIR_DST              = 'config'
+COMMON_CONFIG_NAME          = 'common'
+COMMON_CONFIG_DIR_NAME      = 'all-os'
+REPO_OUTPUT_DIR             = os.path.normpath(SCRIPT_ROOT_DIR + os.sep + 'repository')
+SDK_VERSION_NUMBER          = ''
+PACKAGES_DIR_NAME_LIST      = []
+PACKAGES_FULL_PATH_DST      = 'pkg'
+ROOT_COMPONENT_NAME         = ''
+PACKAGE_NAMESPACE           = ''
+IFW_TOOLS_DIR               = ''
+ARCHIVEGEN_TOOL             = ''
+BINARYCREATOR_TOOL          = ''
+INSTALLERBASE_TOOL          = ''
+REPOGEN_TOOL                = ''
+SDK_NAME_ROOT               = ''
+SDK_NAME                    = ''
+DEBUG_RPATH                 = False
+DUMP_CONFIG                 = False
+DEVELOPMENT_MODE            = False
+OFFLINE_MODE                = False
+TESTCLIENT_MODE             = False
+ARCHIVE_LOCATION_RESOLVER   = None
+SDK_COMPONENT_LIST          = []
+SDK_COMPONENT_IGNORE_LIST   = []
 
-BUILD_TIMESTAMP         = strftime('%d-%b-%Y', gmtime())
-CONFIG_COMMON           = 0
-CONFIG_TARGET           = 0
-PLATFORM_IDENTIFIER     = ''
-CONFIG_NAME             = ''
-SCRIPT_ROOT_DIR         = os.getcwd()
-GENERAL_TAG_SUBST_LIST  = []
-CONFIGURATIONS_DIR      = 'configurations'
-COMMON_CONFIG_NAME      = 'common'
-REPO_OUTPUT_DIR         = os.path.normpath(SCRIPT_ROOT_DIR + os.sep + 'repository')
-SDK_VERSION_NUMBER      = ''
-PACKAGES_DIR_NAME       = ''
-PACKAGES_FULL_PATH_SRC  = ''
-PACKAGES_FULL_PATH_DST  = ''
-ROOT_COMPONENT_NAME     = ''
-CONFIG_XML_TARGET_DIR   = ''
-PACKAGES_NAMESPACE      = ''
-IFW_TOOLS_DIR           = ''
-ARCHIVEGEN_TOOL         = ''
-BINARYCREATOR_TOOL      = ''
-INSTALLERBASE_TOOL      = ''
-REPOGEN_TOOL            = ''
-SDK_NAME_ROOT           = ''
-SDK_NAME                = ''
-DEBUG_RPATH             = False
-DUMP_CONFIG             = False
-# force development mode as default. Change to False if using pre-built package
-DEVELOPMENT_MODE        = True
-OFFLINE_MODE            = False
-TESTCLIENT_MODE         = False
-
-IFW_DOWNLOADABLE_ARCHIVE_NAMES_TAG  = '%IFW_DOWNLOADABLE_ARCHIVE_NAMES%'
 TARGET_INSTALL_DIR_NAME_TAG         = '%TARGET_INSTALL_DIR%'
 PACKAGE_DEFAULT_TAG                 = '%PACKAGE_DEFAULT_TAG%'
 SDK_VERSION_NUM_TAG                 = '%SDK_VERSION_NUM%'
 UPDATE_REPOSITORY_URL_TAG           = '%UPDATE_REPOSITORY_URL%'
 PACKAGE_CREATION_DATE_TAG           = '%PACKAGE_CREATION_DATE%'
+INSTALL_PRIORITY_TAG                = '%INSTALL_PRIORITY%'
+SORTING_PRIORITY_TAG                = '%SORTING_PRIORITY%'
+# ----------------------------------------------------------------------
+
 
 ##############################################################
 # Start
@@ -85,7 +95,7 @@ def main():
         create_installer()
         sys.exit(0)
     else:
-        printInfo()
+        print_info()
         sys.exit(-1)
 
 
@@ -102,12 +112,32 @@ def print_info():
     print ''
     print 'Optional arguments:'
     print '  <offline>    Creates offline installer'
-    print '  <devmode>    Builds Qt and IFW. Enabled by default. (does not download pre-build IFW)'
+    print '  <devmode>    Builds Qt and IFW (does not download pre-build IFW)'
     print '  <testclient> Creates installer for RnD testing purposes only (different dist server used)'
     print ''
 
 
 ##############################################################
+# Check that valid tools are present in the build environment
+##############################################################
+def check_required_tools():
+    """Check that valid tools are present in the build environment."""
+    found = False
+    tool_name = '7z'
+    if bldinstallercommon.is_win_platform():
+        tool_name = tool_name + '.exe'
+    for p in os.environ["PATH"].split(os.pathsep):
+        found = os.path.exists(os.path.join(p, tool_name))
+        if found:
+            break
+
+    if not found:
+        print '*** Error! Required tools are not present in the system (7z)'
+        print '*** Abort!'
+        sys.exit(-1)
+
+
+##############################################################
 # Check if valid platform identifier
 ##############################################################
 def check_platform_identifier(platform_identifier):
@@ -116,6 +146,7 @@ def check_platform_identifier(platform_identifier):
     if os.path.exists(path_to_be_checked):
         return
     print '*** Unsupported platform identifier given: ' + platform_identifier
+    print '*** Following directory can not be found:   ' + path_to_be_checked
     sys.exit(-1)
 
 
@@ -124,7 +155,7 @@ def check_platform_identifier(platform_identifier):
 ##############################################################
 def check_configuration_file(configuration_name):
     """ Check if valid configuration file """
-    path_to_be_checked = SCRIPT_ROOT_DIR + os.sep + CONFIGURATIONS_DIR + os.sep + PLATFORM_IDENTIFIER + os.sep + configuration_name
+    path_to_be_checked = SCRIPT_ROOT_DIR + os.sep + CONFIGURATIONS_DIR + os.sep + configuration_name
     if os.path.isfile(path_to_be_checked):
         return
     print '*** Unable to find given configuration file: ' + path_to_be_checked
@@ -137,22 +168,18 @@ def check_configuration_file(configuration_name):
 def parse_cmd_line():
     """Parse command line arguments."""
     arg_count = len(sys.argv)
-    if arg_count < 3:
+    if arg_count < 2:
         return False
 
-    global PLATFORM_IDENTIFIER
-    global CONFIG_NAME
+    global MAIN_CONFIG_NAME
     global DEVELOPMENT_MODE
     global OFFLINE_MODE
     global TESTCLIENT_MODE
 
-    PLATFORM_IDENTIFIER = sys.argv[1]
-    CONFIG_NAME = sys.argv[2]
-    check_platform_identifier(PLATFORM_IDENTIFIER)
-    check_configuration_file(CONFIG_NAME)
-
-    if(arg_count > 3):
-        counter = 3
+    MAIN_CONFIG_NAME = sys.argv[1]
+    check_configuration_file(MAIN_CONFIG_NAME)
+    if(arg_count > 2):
+        counter = 2
         while(counter < arg_count):
             argument = sys.argv[counter].lower()
             if 'devmode' == argument:
@@ -164,9 +191,7 @@ def parse_cmd_line():
             else:
                 print '*** Unsupported argument given: ' + argument
                 sys.exit(-1)
-
             counter = counter + 1
-
     return True
 
 
@@ -176,64 +201,76 @@ def parse_cmd_line():
 def init_data():
     """Init data based on configuration files."""
     print '----------------------------------------'
-    print 'Init Data'
-    global CONFIG_COMMON
-    global CONFIG_TARGET
-    global PACKAGES_DIR_NAME
+    print ' Init Data'
+    global CONFIG_PARSER_COMMON
+    global CONFIG_PARSER_TARGET
+    global PACKAGES_DIR_NAME_LIST
     global SDK_VERSION_NUMBER
     global SDK_NAME
     global SDK_NAME_ROOT
-    global PACKAGES_NAMESPACE
-    global PACKAGES_FULL_PATH_SRC
+    global PACKAGE_NAMESPACE
     global PACKAGES_FULL_PATH_DST
     global IFW_TOOLS_DIR
+    global ARCHIVE_LOCATION_RESOLVER
+    global CONFIG_DIR
+    global PLATFORM_IDENTIFIER
 
     if DEVELOPMENT_MODE:
-        print '--------------------------'
-        print '[Development mode enabled]'
-        print '--------------------------'
-
-    common_conf_path = SCRIPT_ROOT_DIR + os.sep + CONFIGURATIONS_DIR + os.sep + PLATFORM_IDENTIFIER + os.sep + COMMON_CONFIG_NAME
-    target_conf_path = SCRIPT_ROOT_DIR + os.sep + CONFIGURATIONS_DIR + os.sep + PLATFORM_IDENTIFIER + os.sep + CONFIG_NAME
-    CONFIG_COMMON = ConfigParser.ConfigParser()
-    print 'Parsing: ' + common_conf_path
-    CONFIG_COMMON.readfp(open(common_conf_path))
-    CONFIG_TARGET = ConfigParser.ConfigParser()
-    print 'Parsing: ' + target_conf_path
-    CONFIG_TARGET.readfp(open(target_conf_path))
-
-    PACKAGES_DIR_NAME   = bldinstallercommon.config_section_map(CONFIG_TARGET,'WorkingDirectories')['packages_dir']
+        print ' --------------------------'
+        print ' [Development mode enabled]'
+        print ' --------------------------'
+
+    common_conf_path = SCRIPT_ROOT_DIR + os.sep + CONFIGURATIONS_DIR + os.sep + COMMON_CONFIG_DIR_NAME + os.sep + COMMON_CONFIG_NAME
+    target_conf_path = SCRIPT_ROOT_DIR + os.sep + CONFIGURATIONS_DIR + os.sep + MAIN_CONFIG_NAME
+    CONFIG_PARSER_COMMON = ConfigParser.ConfigParser()
+    print ' Parsing: ' + common_conf_path
+    CONFIG_PARSER_COMMON.readfp(open(common_conf_path))
+    CONFIG_PARSER_TARGET = ConfigParser.ConfigParser()
+    print ' Parsing: ' + target_conf_path
+    CONFIG_PARSER_TARGET.readfp(open(target_conf_path))
+
+    PLATFORM_IDENTIFIER = bldinstallercommon.config_section_map(CONFIG_PARSER_TARGET,'PlatformIdentifier')['identifier']
+    check_platform_identifier(PLATFORM_IDENTIFIER)
+    CONFIG_DIR_DST      = os.path.normpath(SCRIPT_ROOT_DIR + os.sep + 'config')
+    PACKAGES_DIR_NAME   = bldinstallercommon.config_section_map(CONFIG_PARSER_TARGET,'WorkingDirectories')['packages_dir']
     PACKAGES_DIR_NAME   = os.path.normpath(PACKAGES_DIR_NAME)
-    SDK_VERSION_NUMBER  = bldinstallercommon.config_section_map(CONFIG_COMMON,'SdkCommon')['version']
-    SDK_NAME            = bldinstallercommon.config_section_map(CONFIG_COMMON,'SdkCommon')['name']
+    SDK_VERSION_NUMBER  = bldinstallercommon.config_section_map(CONFIG_PARSER_COMMON,'SdkCommon')['version']
+    SDK_NAME            = bldinstallercommon.config_section_map(CONFIG_PARSER_COMMON,'SdkCommon')['name']
     SDK_NAME_ROOT       = SDK_NAME
-    PACKAGES_NAMESPACE  = bldinstallercommon.config_section_map(CONFIG_TARGET,'PackagesNamespace')['name']
-    # if the packages directory name is absolute path, then the packages templates (or static packages)
-    # can reside outside the "<script_root_dir>/configurations" folder
-    # otherwise the packages templates must be under "/configurations"
-    if os.path.isabs(PACKAGES_DIR_NAME):
-        PACKAGES_FULL_PATH_SRC = os.path.normpath(PACKAGES_DIR_NAME)
-        PACKAGES_FULL_PATH_DST = os.path.normpath(SCRIPT_ROOT_DIR + os.sep + os.path.basename(PACKAGES_DIR_NAME))
-    else:
-        PACKAGES_FULL_PATH_SRC = os.path.normpath(SCRIPT_ROOT_DIR + os.sep + CONFIGURATIONS_DIR + os.sep + PACKAGES_DIR_NAME)
-        PACKAGES_FULL_PATH_DST = os.path.normpath(SCRIPT_ROOT_DIR + os.sep + PACKAGES_DIR_NAME)
+    PACKAGE_NAMESPACE   = bldinstallercommon.config_section_map(CONFIG_PARSER_TARGET,'PackageNamespace')['name']
+
+    PACKAGES_FULL_PATH_DST = os.path.normpath(SCRIPT_ROOT_DIR + os.sep + PACKAGES_FULL_PATH_DST)
+    packages_list_raw      = bldinstallercommon.config_section_map(CONFIG_PARSER_TARGET,'WorkingDirectories')['packages_dir']
+    packages_list_raw      = packages_list_raw.replace(' ', '')
+    packages_list          = packages_list_raw.split(',')
+    for package_template_dir in packages_list:
+        package_template_dir = os.path.normpath(package_template_dir)
+        # if the packages directory name is absolute path, then the packages templates (or static packages)
+        # can reside outside the "<script_root_dir>/configurations" folder
+        # otherwise the packages templates must be under "/configurations"
+        if os.path.isabs(package_template_dir):
+            PACKAGES_DIR_NAME_LIST.append(package_template_dir)
+        else:
+            PACKAGES_DIR_NAME_LIST.append(os.path.normpath(SCRIPT_ROOT_DIR + os.sep + CONFIGURATIONS_DIR + os.sep + package_template_dir))
 
     if OFFLINE_MODE:
         SDK_NAME = SDK_NAME + '-offline'
     else:
         SDK_NAME = SDK_NAME + '-online'
-
     if TESTCLIENT_MODE:
         SDK_NAME = SDK_NAME + '-RnD_testclient'
-
     if not DEVELOPMENT_MODE:
-        tools_dir_name = bldinstallercommon.config_section_map(CONFIG_TARGET,'InstallerFrameworkTools')['name']
+        tools_dir_name = bldinstallercommon.config_section_map(CONFIG_PARSER_TARGET,'InstallerFrameworkTools')['name']
         IFW_TOOLS_DIR = SCRIPT_ROOT_DIR + os.sep + tools_dir_name
         IFW_TOOLS_DIR = os.path.normpath(IFW_TOOLS_DIR)
 
+    # init data for archive locator
+    ARCHIVE_LOCATION_RESOLVER = ArchiveLocationResolver(CONFIG_PARSER_TARGET, TESTCLIENT_MODE)
+    ARCHIVE_LOCATION_RESOLVER.print_server_list()
+
     if DUMP_CONFIG:
-        bldinstallercommon.dump_config(CONFIG_COMMON, COMMON_CONFIG_NAME)
-        bldinstallercommon.dump_config(CONFIG_TARGET, CONFIG_NAME)
+        bldinstallercommon.dump_config(CONFIG_PARSER_COMMON, COMMON_CONFIG_NAME)
+        bldinstallercommon.dump_config(CONFIG_PARSER_TARGET, MAIN_CONFIG_NAME)
 
 
 ##############################################################
@@ -242,36 +279,34 @@ def init_data():
 def clean_work_dirs():
     """Clean working directories."""
     print '----------------------------------------'
-    print 'Cleaning environment'
+    print ' Cleaning environment'
 
     # delete "/packages"
     if os.path.exists(PACKAGES_FULL_PATH_DST):
         bldinstallercommon.remove_tree(PACKAGES_FULL_PATH_DST)
-        print '-> deleted old existing directory: ' + PACKAGES_FULL_PATH_DST
+        print ' -> deleted old existing directory: ' + PACKAGES_FULL_PATH_DST
     # delete "/ifw-tools"
     if os.path.exists(IFW_TOOLS_DIR):
         bldinstallercommon.remove_tree(IFW_TOOLS_DIR)
-        print '-> deleted old existing directory: ' + IFW_TOOLS_DIR
+        print ' -> deleted old existing directory: ' + IFW_TOOLS_DIR
     # delete "/repositories"
     if os.path.exists(REPO_OUTPUT_DIR):
         bldinstallercommon.remove_tree(REPO_OUTPUT_DIR)
-        print '-> deleted old existing directory: ' + REPO_OUTPUT_DIR
+        print ' -> deleted old existing directory: ' + REPO_OUTPUT_DIR
     # delete "/config"
-    config_dir_dest = bldinstallercommon.config_section_map(CONFIG_TARGET,'ConfigDir')['target_dir']
-    config_dir_dest = os.path.normpath(SCRIPT_ROOT_DIR + os.sep + config_dir_dest)
-    if os.path.exists(config_dir_dest):
-        bldinstallercommon.remove_tree(config_dir_dest)
-        print '-> deleted old existing directory: ' + config_dir_dest
+    if os.path.exists(CONFIG_DIR_DST):
+        bldinstallercommon.remove_tree(CONFIG_DIR_DST)
+        print ' -> deleted old existing directory: ' + CONFIG_DIR_DST
     # delete sdk binary files
     fileList = os.listdir(SCRIPT_ROOT_DIR)
     for fname in fileList:
         if fname.startswith(SDK_NAME_ROOT):
             full_fn = SCRIPT_ROOT_DIR + os.sep + fname
             if os.path.isdir(full_fn):
-                print '-> deleted ' + full_fn
+                print ' -> deleted ' + full_fn
                 bldinstallercommon.remove_tree(full_fn)
             else:
-                print '-> deleted ' + full_fn
+                print ' -> deleted ' + full_fn
                 os.remove(full_fn)
 
 
@@ -280,18 +315,15 @@ def clean_work_dirs():
 ##############################################################
 def set_config_directory():
     """Copy config directory into correct place."""
-    global CONFIG_XML_TARGET_DIR
-    config_dir_template = bldinstallercommon.config_section_map(CONFIG_TARGET,'ConfigDir')['template_name']
+    print '----------------------------------------'
+    print ' Set config directory'
+    config_dir_template = bldinstallercommon.config_section_map(CONFIG_PARSER_TARGET,'ConfigDir')['template_name']
     config_dir_template = os.path.normpath(SCRIPT_ROOT_DIR + os.sep + CONFIGURATIONS_DIR + os.sep + config_dir_template)
 
-    config_dir_dest = bldinstallercommon.config_section_map(CONFIG_TARGET,'ConfigDir')['target_dir']
-    config_dir_dest = os.path.normpath(SCRIPT_ROOT_DIR + os.sep + config_dir_dest)
-    CONFIG_XML_TARGET_DIR = config_dir_dest
-
-    if not os.path.exists(config_dir_dest):
-        bldinstallercommon.create_dirs(config_dir_dest)
-    bldinstallercommon.copy_tree(config_dir_template, config_dir_dest)
-
+    if not os.path.exists(CONFIG_DIR_DST):
+        bldinstallercommon.create_dirs(CONFIG_DIR_DST)
+    bldinstallercommon.copy_tree(config_dir_template, CONFIG_DIR_DST)
+    print ' -> copied [' + config_dir_template + '] into [' + CONFIG_DIR_DST + ']'
 
 ##############################################################
 # Set the config.xml
@@ -299,27 +331,30 @@ def set_config_directory():
 def set_config_xml():
     """Copy config.xml template into correct place."""
     print '----------------------------------------'
-    print 'Set config.xml'
+    print ' Set config.xml'
 
-    configxml_filename = bldinstallercommon.config_section_map(CONFIG_TARGET,'ConfigXml')['template_name']
+    configxml_filename = bldinstallercommon.config_section_map(CONFIG_PARSER_TARGET,'ConfigXml')['template_name']
     config_template_source = SCRIPT_ROOT_DIR + os.sep + CONFIGURATIONS_DIR + os.sep + PLATFORM_IDENTIFIER + os.sep + configxml_filename
     # if no config.xml template, we assume the "config" template dir already contains it
     if not os.path.exists(config_template_source):
         return
 
     # name has to be config.xml for installer-framework
-    config_template_dest_dir = CONFIG_XML_TARGET_DIR
+    config_template_dest_dir = CONFIG_DIR_DST
     config_template_dest = config_template_dest_dir + os.sep + 'config.xml'
 
     if os.path.exists(config_template_dest):
         os.remove(config_template_dest)
-        print '-> deleted old existing config.xml: ' + config_template_dest
+        print ' -> deleted old existing config.xml: ' + config_template_dest
     if not os.path.exists(config_template_dest_dir):
         bldinstallercommon.create_dirs(config_template_dest_dir)
     shutil.copy(config_template_source, config_template_dest)
-    print '-> copied [' + config_template_source + '] into [' + config_template_dest + ']'
+    print ' -> copied [' + config_template_source + '] into [' + config_template_dest + ']'
 
-    update_repository_url = bldinstallercommon.config_section_map(CONFIG_TARGET,'SdkUpdateRepository')['repository_url']
+    if TESTCLIENT_MODE:
+        update_repository_url = bldinstallercommon.config_section_map(CONFIG_PARSER_TARGET,'SdkUpdateRepository')['repository_url_rnd']
+    else:
+        update_repository_url = bldinstallercommon.config_section_map(CONFIG_PARSER_TARGET,'SdkUpdateRepository')['repository_url_release']
 
     fileslist = [config_template_dest]
     bldinstallercommon.replace_in_files(fileslist, SDK_VERSION_NUM_TAG, SDK_VERSION_NUMBER)
@@ -331,10 +366,10 @@ def set_config_xml():
 ##############################################################
 def substitute_global_tags():
     """ Substitute common version numbers etc., match against tags """
-    print '      ----------------------------------------'
-    print '      Substituting global tags:'
-    print '      %PACKAGE_CREATION_DATE% = ' + BUILD_TIMESTAMP
-    print '      %SDK_VERSION_NUM%       = ' + SDK_VERSION_NUMBER
+    print ' ----------------------------------------'
+    print ' Substituting global tags:'
+    print '    %PACKAGE_CREATION_DATE% = ' + BUILD_TIMESTAMP
+    print '    %SDK_VERSION_NUM%       = ' + SDK_VERSION_NUMBER
 
     # initialize the file list
     fileslist = []
@@ -355,8 +390,8 @@ def substitute_component_tags(tag_pair_list, meta_dir_dest):
     """ Substitute component specific tags """
     if len(tag_pair_list) == 0:
         return
-    print '      ----------------------------------------'
-    print '      Substituting component specific tags:'
+    print '   ----------------------------------------'
+    print '   Substituting component specific tags'
     # initialize the file list
     fileslist = []
 
@@ -369,16 +404,16 @@ def substitute_component_tags(tag_pair_list, meta_dir_dest):
         tag = pair[0]
         value = pair[1]
         if tag and value:
-            print '      Matching [ ' + tag + ' ] and [ ' + value + ' ] in files list'
+            print '    Matching [ ' + tag + ' ] and [ ' + value + ' ] in files list'
             bldinstallercommon.replace_in_files(fileslist, tag, value)
         else:
-            print '      Warning! Ignoring incomplete tag pair [ ' + tag + ' ] for [ ' + value + ' ] pair'
+            print '    Warning! Ignoring incomplete tag pair [ ' + tag + ' ] for [ ' + value + ' ] pair'
 
 
 ##############################################################
 # Repackage content of the installable compoment
 ##############################################################
-def repackage_content_for_installation(install_dir, package_raw_name, rpath_target, package_strip_dirs, package_name, archive_name):
+def repackage_content_for_installation(install_dir, package_raw_name, target_install_base, rpath_target, package_strip_dirs, package_name, archive_name):
     """Repackage content into 7z archive."""
     # if no data to be installed, then just return
     if not package_raw_name:
@@ -386,18 +421,18 @@ def repackage_content_for_installation(install_dir, package_raw_name, rpath_targ
     if not package_strip_dirs:
         package_strip_dirs = '0'
 
-    print '        +++++++++++++++++++++++++++++++++++++++++'
-    print '        Repackage:             ' + package_raw_name
-    print '        Location:              ' + install_dir
-    print '        Dirst to be stripped:  ' + package_strip_dirs
-    if rpath_target == '':
-        print '        Relocate RPath:        No'
+    print '     +++++++++++++++++++++++++++++++++++++++++'
+    print '     Repackage:             ' + package_raw_name
+    print '     Location:              ' + install_dir
+    print '     Dirs to be stripped:   ' + package_strip_dirs
+    if not rpath_target:
+        print '     Relocate RPath:        No'
     else:
-        print '        Relocate RPath into:   ' + '(' + install_dir + ') '+ rpath_target
+        print '     Relocate RPath into:   ' + '(' + install_dir + ') '+ rpath_target
     print ''
 
-    if package_raw_name.endswith('.7z') and package_strip_dirs == '0' and not rpath_target:
-        print '        No repackaging actions requred for the package'
+    if package_raw_name.endswith('.7z') and package_strip_dirs == '0' and not rpath_target and target_install_base == '/':
+        print '     No repackaging actions requred for the package'
         return
 
     # extract contents
@@ -467,48 +502,6 @@ def archive_component(package, package_archive_name):
 
 
 ##############################################################
-# Create online components
-##############################################################
-def create_online_target_components(target_config):
-    """Create installable online installer."""
-    global GENERAL_TAG_SUBST_LIST
-    bldinstallercommon.create_dirs(PACKAGES_FULL_PATH_DST)
-
-    print '=================================================='
-    print '= Creating online SDK components'
-    print '=================================================='
-    print ''
-    for section in target_config.sections():
-        if section.startswith(PACKAGES_NAMESPACE):
-            print '--------------------------------------------------------------------------------'
-            is_root_component = bldinstallercommon.safe_config_key_fetch(target_config, section, 'root_component')
-            if is_root_component == 'yes':
-                meta_dir_dest = PACKAGES_FULL_PATH_DST + os.sep + section + os.sep + 'meta'
-                meta_dir_dest = os.path.normpath(meta_dir_dest)
-                bldinstallercommon.create_dirs(meta_dir_dest)
-                print '      Created:                ' + meta_dir_dest
-                # Copy meta data
-                metadata_content_source_root = PACKAGES_FULL_PATH_SRC + os.sep + section + os.sep + "meta"
-                metadata_content_source_root = os.path.normpath(metadata_content_source_root)
-                bldinstallercommon.copy_tree(metadata_content_source_root, meta_dir_dest)
-                # substitute required tags
-                GENERAL_TAG_SUBST_LIST.append(meta_dir_dest)
-                # check for downloadableArchiveName
-                archive_name = bldinstallercommon.safe_config_key_fetch(target_config, section, 'archive_name')
-                package_url  = bldinstallercommon.safe_config_key_fetch(target_config, section, 'package_url')
-                if len(package_url) > 0 and archive_name == '':
-                    print '*** Variable [archive_name] was empty? This is required if package content is used , check config file!'
-                    print '*** Abort!'
-                    sys.exit(-1)
-                tag_pair_list = []
-                tag_pair_list.append([IFW_DOWNLOADABLE_ARCHIVE_NAME_TAG, archive_name])
-                substitute_component_tags(tag_pair_list, meta_dir_dest)
-                return
-            else:
-                continue
-
-
-##############################################################
 # Create offline static component
 ##############################################################
 def create_offline_static_component(target_config, section, static_package_src):
@@ -529,174 +522,172 @@ def create_offline_static_component(target_config, section, static_package_src):
 
 
 ##############################################################
-# Construct archive
+# Handle archive
 ##############################################################
-def handle_archive(package_name, archive_uri, package_strip_dirs,
-                   target_install_base, target_install_dir,
-                   rpath_target, archive_name):
+def handle_archive(sdk_component, archive):
     """Handle single archive."""
-    print '      --------------------------------------------------------------'
-    print '      Handle archive:        '   + archive_name
-    print '        archive_uri:         '   + archive_uri
-    print '        package_strip_dirs:  '   + package_strip_dirs
-    print '        target_install_base: '   + target_install_base
-    print '        target_install_dir:  '   + target_install_dir
-    print '        rpath_target:        '   + rpath_target
+    print '   --------------------------------------------------------------'
+    print '   Handle archive:        '   + archive.archive_name
+    print '     archive_uri:         '   + archive.archive_uri
+    print '     package_strip_dirs:  '   + archive.package_strip_dirs
+    print '     target_install_base: '   + sdk_component.target_install_base
+    print '     target_install_dir:  '   + archive.target_install_dir
+    print '     rpath_target:        '   + archive.rpath_target
     print ''
 
-    # sanity check
-    if len(archive_uri) > 0 and not archive_name:
-        print '*** Variable [archive_name] was empty? This is required if [archive_uri] is used , check config file!'
-        print '*** Abort!'
-        sys.exit(-1)
-
     # Create needed data dirs
-    data_dir_dest = os.path.normpath(PACKAGES_FULL_PATH_DST + os.sep + package_name + os.sep + 'data')
-    install_dir = os.path.normpath(data_dir_dest + os.sep + target_install_base + os.sep + target_install_dir)
+    data_dir_dest = os.path.normpath(PACKAGES_FULL_PATH_DST + os.sep + sdk_component.package_name + os.sep + 'data')
+    install_dir = os.path.normpath(data_dir_dest + os.sep + sdk_component.target_install_base + os.sep + archive.target_install_dir)
     bldinstallercommon.create_dirs(install_dir)
-    print '        Created:             ' + install_dir
-
-    # transfer package from origin into destination
-    package_raw_name     = os.path.basename(archive_uri)
-    package_save_as_temp = os.path.normpath(install_dir + os.sep + os.path.basename(archive_uri))
-    if archive_uri.startswith('http'):
-        print '        Downloading:        ' + archive_uri
-        print '               into:        ' + package_save_as_temp
-        # validate url
-        res = bldinstallercommon.is_content_url_valid(archive_uri)
-        if not(res):
-            print '*** Package URL is invalid: [' + archive_uri + ']'
-            print '*** Abort!'
-            sys.exit(-1)
+    print '     -> Created:         ' + install_dir
+    # generate save as filename
+    package_raw_name     = os.path.basename(archive.archive_uri)
+    package_save_as_temp = os.path.normpath(install_dir + os.sep + os.path.basename(archive.archive_uri))
+    # if URI points to http location -> download it
+    if archive.archive_uri.startswith('http'):
+        print '     Downloading:        ' + archive.archive_uri
+        print '            into:        ' + package_save_as_temp
         # start download
-        urllib.urlretrieve(archive_uri, package_save_as_temp)
+        urllib.urlcleanup()
+        urllib.urlretrieve(archive.archive_uri, package_save_as_temp, reporthook=bldinstallercommon.dlProgress)
+        print '     Downloading completed'
     else:
-        data_content_source_root = os.path.normpath(PACKAGES_FULL_PATH_SRC + os.sep + package_name + os.sep + 'data')
-        # try first if the uri points to absolute file path
-        if os.path.isfile(archive_uri):
-            print '        Copying:             ' + archive_uri
-            print '           into:             ' + package_save_as_temp
-            shutil.copy(archive_uri, package_save_as_temp)
-        else:
-            # lastly try to check if the given file exists in the templates '/data' folder
-            temp = os.path.normpath(data_content_source_root + os.sep + archive_uri)
-            if os.path.isfile( temp ):
-                print '        Copying:             ' + temp
-                print '           into:             ' + package_save_as_temp
-                shutil.copy(temp, package_save_as_temp)
-            else:
-                print '*** Error! Unable to locate file defined by archive_uri: ' + archive_uri
-                sys.exit(-1)
+        print '     Copying:        ' + archive.archive_uri
+        print '        into:        ' + package_save_as_temp
+        # copy file on local file system or shared network drive
+        shutil.copy(archive.archive_uri, package_save_as_temp)
+        print '     Copying completed'
 
     # repackage content so that correct dir structure will get into the package
-    repackage_content_for_installation(install_dir, package_raw_name, rpath_target, package_strip_dirs, package_name, archive_name)
-
-
-##############################################################
-# Generate java script code that is embedded into installscript.qs
-##############################################################
-def generate_downloadable_archive_list(downloadable_archive_list):
-    """Generate java script code that is embedded into installscript.qs"""
-    output = ''
-    for item in downloadable_archive_list:
-        output = output + 'component.addDownloadableArchive(\"' + item + '\");'
-
-    temp_list = []
-    temp_list.append([IFW_DOWNLOADABLE_ARCHIVE_NAMES_TAG, output])
-    return temp_list
+    repackage_content_for_installation(install_dir, package_raw_name,
+                                       sdk_component.target_install_base,
+                                       archive.rpath_target,
+                                       archive.package_strip_dirs,
+                                       sdk_component.package_name,
+                                       archive.archive_name)
+
+
+##############################################################
+# Parse SDK components
+##############################################################
+def parse_component_data(configuration_file, configurations_base_path):
+    """Parse SDK component data"""
+    global SDK_COMPONENT_LIST
+    global SDK_COMPONENT_IGNORE_LIST
+    print ' -> Reading target configuration file: ' + configuration_file
+    configuration = ConfigParser.ConfigParser()
+    configuration.readfp(open(configuration_file))
+
+    # parse package ignore list first
+    sdk_component_exclude_list = bldinstallercommon.safe_config_key_fetch(configuration, 'PackageIgnoreList', 'packages')
+    if sdk_component_exclude_list:
+        sdk_component_exclude_list = sdk_component_exclude_list.replace(' ', '')
+        pkg_list = sdk_component_exclude_list.split(',')
+        for item in pkg_list:
+            SDK_COMPONENT_IGNORE_LIST.append(item)
+    # parse sdk components
+    for section in configuration.sections():
+        if section.startswith(PACKAGE_NAMESPACE):
+            if section not in SDK_COMPONENT_IGNORE_LIST:
+                sdk_component = SdkComponent(section, configuration, PACKAGES_DIR_NAME_LIST, ARCHIVE_LOCATION_RESOLVER)
+                SDK_COMPONENT_LIST.append(sdk_component)
+    # check for extra configuration files if defined
+    extra_conf_list = bldinstallercommon.safe_config_key_fetch(configuration, 'ExtraPackageConfigurationFiles', 'file_list')
+    if extra_conf_list:
+        extra_conf_list = extra_conf_list.replace(' ', '')
+        file_list = extra_conf_list.split(',')
+        for extra_conf_file in file_list:
+            extra_conf_file_path = os.path.normpath(configurations_base_path + os.sep + extra_conf_file)
+            if not os.path.isfile(extra_conf_file_path):
+                # then the file should exist in common (all-os) directory
+                extra_conf_file_path = os.path.normpath(CONFIGURATIONS_DIR + os.sep + COMMON_CONFIG_DIR_NAME + os.sep + extra_conf_file)
+                if not os.path.isfile(extra_conf_file_path):
+                    print '*** Error! Unable to locate configuration file: ' + extra_conf_file_path
+            # recursive call
+            parse_component_data(extra_conf_file_path, configurations_base_path)
+
+
+##############################################################
+# Parse SDK components
+##############################################################
+def parse_components(target_config):
+    """Parse SDK all components"""
+    print '----------------------------------------'
+    print ' Parse target configuration files'
+    conf_base_path = SCRIPT_ROOT_DIR + os.sep + CONFIGURATIONS_DIR + os.sep + PLATFORM_IDENTIFIER + os.sep
+    main_conf_file = SCRIPT_ROOT_DIR + os.sep + CONFIGURATIONS_DIR + os.sep + MAIN_CONFIG_NAME
+    parse_component_data(main_conf_file, conf_base_path)
+    return
 
 
 ##############################################################
-# Create all target components
+# Create target components
 ##############################################################
-def create_offline_target_components(target_config):
-    """Create installable offline target components."""
+def create_target_components(target_config, offline_mode):
+    """Create target components."""
     global ROOT_COMPONENT_NAME
     bldinstallercommon.create_dirs(PACKAGES_FULL_PATH_DST)
 
-    print '=================================================='
+    print '================================================================='
     print '= Creating offline SDK components'
-    print '=================================================='
+    print '================================================================='
     print ''
-    for section in target_config.sections():
-        if section.startswith(PACKAGES_NAMESPACE):
-            # check first for top level component
-            is_root_component = bldinstallercommon.safe_config_key_fetch(target_config, section, 'root_component')
-            if is_root_component == 'yes':
-                ROOT_COMPONENT_NAME = section
-            # check if static component or not
-            static_component = bldinstallercommon.safe_config_key_fetch(target_config, section, 'static_component')
-            if static_component:
-                create_offline_static_component(target_config, section, static_component)
-                continue
-
-            # otherwise "build" the component
-            package_name            = section
-            archives                = bldinstallercommon.safe_config_key_fetch(target_config, section, 'archives')
-            target_install_base     = bldinstallercommon.safe_config_key_fetch(target_config, section, 'target_install_base')
-            version                 = bldinstallercommon.safe_config_key_fetch(target_config, section, 'version')
-            version_tag             = bldinstallercommon.safe_config_key_fetch(target_config, section, 'version_tag')
-            package_default         = bldinstallercommon.safe_config_key_fetch(target_config, section, 'package_default')
-            if (package_default != 'true') and (package_default != 'script'):
-                package_default = 'false'
-
-            print '--------------------------------------------------------------------------------'
-            print '    '                             + package_name
-            print '      Package target_install_base:   '   + target_install_base
-            print '      Package version:               '   + version
-            print '      Package version_tag:           '   + version_tag
-            print '      Package package_default:       '   + package_default
-            print '      Package archives:              '   + archives
-
-            # create destination meta data folder
-            meta_dir_dest = os.path.normpath(PACKAGES_FULL_PATH_DST + os.sep + package_name + os.sep + 'meta')
-            bldinstallercommon.create_dirs(meta_dir_dest)
-            print '      Created:                       ' + meta_dir_dest
-            # Copy Meta data
-            metadata_content_source_root = os.path.normpath(PACKAGES_FULL_PATH_SRC + os.sep + package_name + os.sep + 'meta')
-            bldinstallercommon.copy_tree(metadata_content_source_root, meta_dir_dest)
-            print '      Copied metadata'
-            # add files into tag substitution
-            GENERAL_TAG_SUBST_LIST.append(meta_dir_dest)
-            # create lists for component specific tag substitutions
-            component_metadata_tag_pair_list = []
-
-            # version tag exists
-            if version_tag or version:
-                component_metadata_tag_pair_list.append([version_tag, version])
-            # substitute default package info
-            if package_default == 'true':
-                component_metadata_tag_pair_list.append([PACKAGE_DEFAULT_TAG, 'true'])
-            elif package_default == 'script':
-                component_metadata_tag_pair_list.append([PACKAGE_DEFAULT_TAG, 'script'])
-            else:
-                component_metadata_tag_pair_list.append([PACKAGE_DEFAULT_TAG, 'false'])
-
-            #target install dir substitution
-            if target_install_base:
-                component_metadata_tag_pair_list.append([TARGET_INSTALL_DIR_NAME_TAG, target_install_base])
-
-            # check if package contains archives i.e. 7z packages to be included
-            if archives:
-                downloadable_archive_list = []
-                archives_list = archives.split(',')
-                for archive in archives_list:
-                    archive_uri             = bldinstallercommon.config_section_map(target_config, archive)['archive_uri']
-                    package_strip_dirs      = bldinstallercommon.safe_config_key_fetch(target_config, archive, 'package_strip_dirs')
-                    # TODO, check if target_install_dir is needed at all
-                    target_install_dir      = bldinstallercommon.safe_config_key_fetch(target_config, archive, 'target_install_dir')
-                    rpath_target            = bldinstallercommon.safe_config_key_fetch(target_config, archive, 'rpath_target')
-                    archive_name            = bldinstallercommon.safe_config_key_fetch(target_config, archive, 'archive_name')
-                    # add downloadable archive name
-                    downloadable_archive_list.append(archive_name)
-                    handle_archive(package_name, archive_uri, package_strip_dirs, target_install_base, target_install_dir,
-                                   rpath_target, archive_name)
-                # substitute downloadable archive names in installscript.qs
-                downloadableArchives_list = generate_downloadable_archive_list(downloadable_archive_list)
-                substitute_component_tags(downloadableArchives_list, meta_dir_dest)
-
-            # substitute tags
-            substitute_component_tags(component_metadata_tag_pair_list, meta_dir_dest)
+    for sdk_component in SDK_COMPONENT_LIST:
+        # check first for top level component
+        if sdk_component.root_component == 'yes':
+            ROOT_COMPONENT_NAME = sdk_component.package_name
+        # for online installer handle only the root component, nothing else
+        if not offline_mode and not sdk_component.root_component == 'yes':
+            continue
+
+        # check if static component or not
+        if sdk_component.static_component:
+            create_offline_static_component(sdk_component)
+            continue
+
+        # not a static component so "build" it
+        sdk_component.print_component_data()
+        # create destination meta data folder
+        meta_dir_dest = os.path.normpath(PACKAGES_FULL_PATH_DST + os.sep + sdk_component.package_name + os.sep + 'meta')
+        bldinstallercommon.create_dirs(meta_dir_dest)
+        print '   -> Created:                 ' + meta_dir_dest
+        # Copy Meta data
+        metadata_content_source_root = os.path.normpath(sdk_component.pkg_template_dir + os.sep + 'meta')
+        bldinstallercommon.copy_tree(metadata_content_source_root, meta_dir_dest)
+        print '   -> Copied meta data from:   ' + metadata_content_source_root
+        # add files into tag substitution
+        GENERAL_TAG_SUBST_LIST.append(meta_dir_dest)
+        # create lists for component specific tag substitutions
+        component_metadata_tag_pair_list = []
+        # version tag substitution if exists
+        if sdk_component.version_tag or sdk_component.version:
+            component_metadata_tag_pair_list.append([sdk_component.version_tag, sdk_component.version])
+        # default package info substitution if exists
+        if sdk_component.package_default:
+            component_metadata_tag_pair_list.append([PACKAGE_DEFAULT_TAG, sdk_component.package_default])
+        # install priority info substitution if exists
+        if sdk_component.install_priority:
+            component_metadata_tag_pair_list.append([INSTALL_PRIORITY_TAG, sdk_component.install_priority])
+        # install priority info substitution if exists
+        if sdk_component.sorting_priority:
+            component_metadata_tag_pair_list.append([SORTING_PRIORITY_TAG, sdk_component.sorting_priority])
+        # target install dir substitution
+        if sdk_component.target_install_base:
+            component_metadata_tag_pair_list.append([TARGET_INSTALL_DIR_NAME_TAG, sdk_component.target_install_base])
+        # handle archives
+        if sdk_component.downloadable_archive_list:
+            downloadable_archive_list = []
+            # Copy archives into temporary build directory if exists
+            for archive in sdk_component.downloadable_archive_list:
+                downloadable_archive_list.append(archive.archive_name)
+                # fetch packages only if offline installer, for online installer just handle the metadata
+                if offline_mode:
+                    handle_archive(sdk_component, archive)
+            # substitute downloadable archive names in installscript.qs
+            downloadableArchives_list = sdk_component.generate_downloadable_archive_list(downloadable_archive_list)
+            substitute_component_tags(downloadableArchives_list, meta_dir_dest)
+        # substitute tags
+        substitute_component_tags(component_metadata_tag_pair_list, meta_dir_dest)
 
 
 ##############################################################
@@ -718,24 +709,25 @@ def install_ifw_tools():
         tools_dir_temp = bld_ifw_tools_impl.build_ifw('devmode', PLATFORM_IDENTIFIER)
         tools_bin_path = SCRIPT_ROOT_DIR + os.sep + tools_dir_temp + os.sep + 'installerbuilder' + os.sep + 'bin' + os.sep
     else:
-        tools_dir_name = bldinstallercommon.config_section_map(CONFIG_TARGET,'InstallerFrameworkTools')['name']
+        tools_dir_name = bldinstallercommon.config_section_map(CONFIG_PARSER_TARGET,'InstallerFrameworkTools')['name']
         tools_dir_name = os.path.normpath(tools_dir_name)
-        package_url = bldinstallercommon.config_section_map(CONFIG_TARGET,'InstallerFrameworkTools')['package_url']
+        package_url = bldinstallercommon.config_section_map(CONFIG_PARSER_TARGET,'InstallerFrameworkTools')['package_url']
         # create needed dirs
         bldinstallercommon.create_dirs(IFW_TOOLS_DIR)
         package_save_as_temp = IFW_TOOLS_DIR + os.sep + os.path.basename(package_url)
         package_save_as_temp = os.path.normpath(package_save_as_temp)
-        print 'Source url: ' + package_url
-        print 'Install dest: ' + package_save_as_temp
+        print ' Source url:   ' + package_url
+        print ' Install dest: ' + package_save_as_temp
         # download IFW archive
         if not package_url == '':
-            print 'Downloading:  ' + package_url
+            print ' Downloading:  ' + package_url
             res = bldinstallercommon.is_content_url_valid(package_url)
             if not(res):
                 print '*** Package URL is invalid: [' + package_url + ']'
                 print '*** Abort!'
                 sys.exit(-1)
-            urllib.urlretrieve(package_url, package_save_as_temp)
+            urllib.urlcleanup()
+            urllib.urlretrieve(package_url, package_save_as_temp, reporthook=bldinstallercommon.dlProgress)
         if not (os.path.isfile(package_save_as_temp)):
             print '*** Downloading failed! Aborting!'
             sys.exit(-1)
@@ -777,10 +769,10 @@ def install_ifw_tools():
         print '*** Repogen tool not found: ' + REPOGEN_TOOL
         sys.exit(-1)
 
-    print 'ARCHIVEGEN_TOOL: ' + ARCHIVEGEN_TOOL
-    print 'BINARYCREATOR_TOOL: ' + BINARYCREATOR_TOOL
-    print 'INSTALLERBASE_TOOL: ' + INSTALLERBASE_TOOL
-    print 'REPOGEN_TOOL: ' + REPOGEN_TOOL
+    print ' ARCHIVEGEN_TOOL: ' + ARCHIVEGEN_TOOL
+    print ' BINARYCREATOR_TOOL: ' + BINARYCREATOR_TOOL
+    print ' INSTALLERBASE_TOOL: ' + INSTALLERBASE_TOOL
+    print ' REPOGEN_TOOL: ' + REPOGEN_TOOL
 
 
 ##############################################################
@@ -793,13 +785,11 @@ def create_installer_binary():
     print '=================================================='
     global SDK_NAME
 
-    instruction_set = bldinstallercommon.config_section_map(CONFIG_TARGET,'TargetArchitechture')['instruction_set']
+    instruction_set = bldinstallercommon.config_section_map(CONFIG_PARSER_TARGET,'TargetArchitechture')['instruction_set']
     cmd_args = []
     SDK_NAME += '-' + bldinstallercommon.get_platform_suffix()
     SDK_NAME += '-' + instruction_set
     tmp = SDK_VERSION_NUMBER
-    if bldinstallercommon.is_win_platform():
-        tmp = SDK_VERSION_NUMBER.replace('.', '_')
 
     SDK_NAME = SDK_NAME + '-v' + tmp
 
@@ -809,18 +799,18 @@ def create_installer_binary():
     cmd_args = [BINARYCREATOR_TOOL, '-t', INSTALLERBASE_TOOL, '-v', '-p', PACKAGES_FULL_PATH_DST]
     if OFFLINE_MODE:
         # check if package exclude list should be used for offline installer
-        package_exclude_list = bldinstallercommon.safe_config_key_fetch(CONFIG_TARGET, 'OfflinePackageExcludeList', 'package_list')
+        package_exclude_list = bldinstallercommon.safe_config_key_fetch(CONFIG_PARSER_TARGET, 'OfflinePackageExcludeList', 'package_list')
         package_exclude_list = package_exclude_list.replace('\n', '')
         if package_exclude_list:
             cmd_args = cmd_args + ['-e', package_exclude_list]
-    cmd_args = cmd_args + ['-c', CONFIG_XML_TARGET_DIR, SDK_NAME, ROOT_COMPONENT_NAME]
+    cmd_args = cmd_args + ['-c', CONFIG_DIR_DST, SDK_NAME, ROOT_COMPONENT_NAME]
 
     if OFFLINE_MODE:
         cmd_args = cmd_args + ['--offline-only']
         print 'Creating repository for the SDK ...'
         print '    Outputdir: ' + REPO_OUTPUT_DIR
         print '      pkg src: ' + PACKAGES_FULL_PATH_DST
-        repogen_args = [REPOGEN_TOOL, '-p', PACKAGES_FULL_PATH_DST, '-c', CONFIG_XML_TARGET_DIR, REPO_OUTPUT_DIR, ROOT_COMPONENT_NAME]
+        repogen_args = [REPOGEN_TOOL, '-p', PACKAGES_FULL_PATH_DST, '-c', CONFIG_DIR_DST, REPO_OUTPUT_DIR, ROOT_COMPONENT_NAME, '-v']
         bldinstallercommon.do_execute_sub_process(repogen_args, SCRIPT_ROOT_DIR, True)
         if not os.path.exists(REPO_OUTPUT_DIR):
             print '*** Fatal error! Unable to create repository directory: ' + REPO_OUTPUT_DIR
@@ -843,7 +833,7 @@ def create_mac_disk_image():
     print '= Create mac disk image'
     print '=================================================='
 
-    nib_archive_name = bldinstallercommon.safe_config_key_fetch(CONFIG_TARGET, 'qtmenunib', 'package_url')
+    nib_archive_name = bldinstallercommon.safe_config_key_fetch(CONFIG_PARSER_TARGET, 'qtmenunib', 'package_url')
     package_save_as_folder = SCRIPT_ROOT_DIR + os.sep + SDK_NAME + '.app' + os.sep + 'Contents' + os.sep + 'Resources'
     package_save_as_temp = package_save_as_folder + os.sep + os.path.basename(nib_archive_name)
     print ' package_url: ' + nib_archive_name
@@ -857,7 +847,8 @@ def create_mac_disk_image():
             print '*** Package URL is invalid: [' + nib_archive_name + ']'
             print '*** Abort!'
             sys.exit(-1)
-        urllib.urlretrieve(nib_archive_name, package_save_as_temp)
+        urllib.urlcleanup()
+        urllib.urlretrieve(nib_archive_name, package_save_as_temp, reporthook=bldinstallercommon.dlProgress)
 
     # extract contents
     bldinstallercommon.extract_file(package_save_as_temp, package_save_as_folder)
@@ -882,6 +873,8 @@ def create_installer():
     print '=================================================='
     # init
     bldinstallercommon.init_common_module(SCRIPT_ROOT_DIR)
+    # check required tools
+    check_required_tools()
     # init data
     init_data()
     # clean env before starting
@@ -891,11 +884,10 @@ def create_installer():
     set_config_xml()
     # install Installer Framework tools
     install_ifw_tools()
+    # parse SDK components
+    parse_components(CONFIG_PARSER_TARGET)
     # create components
-    if OFFLINE_MODE:
-        create_offline_target_components(CONFIG_TARGET)
-    else:
-        create_online_target_components(CONFIG_TARGET)
+    create_target_components(CONFIG_PARSER_TARGET, OFFLINE_MODE)
     # substitute global tags
     substitute_global_tags()
     # create the installer binary
@@ -909,3 +901,4 @@ def create_installer():
 # Start build process
 ##############################################################
 main()
+
diff --git a/release-tools/sdkcomponent.py b/release-tools/sdkcomponent.py
new file mode 100644
index 0000000..1b55efa
--- /dev/null
+++ b/release-tools/sdkcomponent.py
@@ -0,0 +1,178 @@
+#!/usr/bin/env python
+###############################################
+#
+# Copyright (C) 2012 Digia Plc
+# For any questions to Digia, please use contact form at http://qt.digia.com
+#
+# $QT_BEGIN_LICENSE:LGPL$
+# GNU Lesser General Public License Usage
+# This file may be used under the terms of the GNU Lesser General Public
+# License version 2.1 as published by the Free Software Foundation and
+# appearing in the file LICENSE.LGPL included in the packaging of this
+# file. Please review the following information to ensure the GNU Lesser
+# General Public License version 2.1 requirements will be met:
+# http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+#
+# GNU General Public License Usage
+# Alternatively, this file may be used under the terms of the GNU General
+# Public License version 3.0 as published by the Free Software Foundation
+# and appearing in the file LICENSE.GPL included in the packaging of this
+# file. Please review the following information to ensure the GNU General
+# Public License version 3.0 requirements will be met:
+# http://www.gnu.org/copyleft/gpl.html.
+#
+# $QT_END_LICENSE$
+#
+# If you have questions regarding the use of this file, please use
+# contact form at http://qt.digia.com
+#
+###############################################
+
+import os
+import sys
+import bldinstallercommon
+from archiveresolver import ArchiveLocationResolver
+
+IFW_DOWNLOADABLE_ARCHIVE_NAMES_TAG  = '//%IFW_DOWNLOADABLE_ARCHIVE_NAMES%'
+
+
+class SdkComponent:
+    """SdkComponent class contains all required info for one installable SDK component"""
+    class DownloadableArchive:
+        """DownloadableArchive subclass contains all required info about data packages for one SDK component"""
+        def __init__(self, archive, package_name, archive_server_name, target_config, archive_location_resolver):
+            self.archive_uri        = bldinstallercommon.config_section_map(target_config, archive)['archive_uri']
+            self.package_strip_dirs = bldinstallercommon.safe_config_key_fetch(target_config, archive, 'package_strip_dirs')
+            self.target_install_dir = bldinstallercommon.safe_config_key_fetch(target_config, archive, 'target_install_dir') # todo, is needed?
+            self.rpath_target       = bldinstallercommon.safe_config_key_fetch(target_config, archive, 'rpath_target')
+            self.archive_name       = bldinstallercommon.safe_config_key_fetch(target_config, archive, 'archive_name')
+            self.nomalize_archive_uri(package_name, archive_server_name, archive_location_resolver)
+
+
+        def nomalize_archive_uri(self, package_name, archive_server_name, archive_location_resolver):
+            self.archive_uri = archive_location_resolver.resolve_full_uri(package_name, archive_server_name, self.archive_uri)
+
+
+        def check_archive_data(self):
+            if self.archive_uri.startswith('http'):
+                res = bldinstallercommon.is_content_url_valid(self.archive_uri)
+                if not res:
+                    print '*** Archive check fail! ***\n*** Unable to locate archive: ' + self.archive_uri
+                    sys.exit(-1)
+            elif not os.path.isfile(self.archive_uri):
+                print '*** Archive check fail! ***\n*** Unable to locate archive: ' + self.archive_uri
+                sys.exit(-1)
+
+
+    def __init__(self, section_name, target_config, packages_full_path_list, archive_location_resolver):
+        self.static_component           = bldinstallercommon.safe_config_key_fetch(target_config, section_name, 'static_component')
+        self.root_component             = bldinstallercommon.safe_config_key_fetch(target_config, section_name, 'root_component')
+        self.package_name               = section_name
+        self.archives                   = bldinstallercommon.safe_config_key_fetch(target_config, section_name, 'archives')
+        self.archives                   = self.archives.replace(' ', '')
+        self.archive_server_name        = bldinstallercommon.safe_config_key_fetch(target_config, section_name, 'archive_server_name')
+        self.downloadable_archive_list  = []
+        self.target_install_base        = bldinstallercommon.safe_config_key_fetch(target_config, section_name, 'target_install_base')
+        self.version                    = bldinstallercommon.safe_config_key_fetch(target_config, section_name, 'version')
+        self.version_tag                = bldinstallercommon.safe_config_key_fetch(target_config, section_name, 'version_tag')
+        self.package_default            = bldinstallercommon.safe_config_key_fetch(target_config, section_name, 'package_default')
+        self.install_priority           = bldinstallercommon.safe_config_key_fetch(target_config, section_name, 'install_priority')
+        self.sorting_priority           = bldinstallercommon.safe_config_key_fetch(target_config, section_name, 'sorting_priority')
+        self.downloadable_arch_list_qs  = []
+        self.pkg_template_dir           = ''
+        # look up correct package template directory from list
+        found = False
+        for item in packages_full_path_list:
+            template_full_path = os.path.normpath(item + os.sep + section_name)
+            if os.path.exists(template_full_path):
+                if not (found):
+                    # take the first match
+                    self.pkg_template_dir = template_full_path
+                    found = True
+                else:
+                    # sanity check, duplicate template should not exist to avoid
+                    # problems!
+                    print '*** Found duplicate template for: ' + item
+                    print '*** Fix your configuration! Abort!'
+                    sys.exit(-1)
+        self.parse_archives(target_config, archive_location_resolver)
+        self.check_component_data(target_config)
+
+
+    def check_component_data(self, target_config):
+        if self.static_component:
+            if not os.path.isfile(self.static_component):
+                self.sanity_check_fail(self.package_name, 'Unable to locate given static package: ' + self.static_component)
+            # no more checks needed for static component
+            return
+        if not self.package_name:
+            self.sanity_check_fail(self.package_name, 'Undefined package name?')
+        if self.archives and not self.target_install_base:
+            self.sanity_check_fail(self.package_name, 'Undefined target_install_base?')
+        if self.version and not self.version_tag:
+            self.sanity_check_fail(self.package_name, 'Undefined version_tag?')
+        if self.version_tag and not self.version:
+            self.sanity_check_fail(self.package_name, 'Undefined version?')
+        if self.package_default not in ['true', 'false', 'script']:
+            self.package_default = 'false'
+        # check that package template exists
+        if not os.path.exists(self.pkg_template_dir):
+            self.sanity_check_fail(self.package_name, 'Package template dir does not exist: ' + self.pkg_template_dir)
+        # next check that archive locations exist
+        for archive in self.downloadable_archive_list:
+            archive.check_archive_data()
+
+
+    def sanity_check_fail(self, component_name, message):
+        print '\n*** Sanity check fail! ***\n*** Component: [' + component_name + ']\n*** ' + message
+        sys.exit(-1)
+
+
+    def parse_archives(self, target_config, archive_location_resolver):
+        if self.archives:
+            archives_list = self.archives.split(',')
+            for archive in archives_list:
+                # check that archive template exists
+                if not target_config.has_section(archive):
+                    print '*** Error! Given archive section does not exist in configuration file: ' + archive
+                    print '*** Abort!'
+                    sys.exit(-1)
+                archive_obj = SdkComponent.DownloadableArchive(archive, self.package_name, self.archive_server_name, target_config, archive_location_resolver)
+                self.downloadable_archive_list.append(archive_obj)
+
+
+    def generate_downloadable_archive_list(self, downloadable_archive_list):
+        """Generate java script code that is embedded into installscript.qs"""
+
+        if self.downloadable_archive_list:
+            output = ''
+            for item in self.downloadable_archive_list:
+                output = output + 'component.addDownloadableArchive(\"' + item.archive_name + '\");'
+
+        temp_list = []
+        temp_list.append([IFW_DOWNLOADABLE_ARCHIVE_NAMES_TAG, output])
+        return temp_list
+
+
+    def print_component_data(self):
+        print '============================================================='
+        print ' [' + self.package_name + ']'
+        if self.static_component:
+            print ' Static component:    ' + self.static_component
+            return
+        if self.root_component:
+            print ' Root component:      ' + self.root_component
+        print ' Target install base: ' + self.target_install_base
+        print ' Version:             ' + self.version
+        print ' Version tag:         ' + self.version_tag
+        print ' Package default:     ' + self.package_default
+        if self.downloadable_archive_list:
+            print ' Archives:'
+            for archive in self.downloadable_archive_list:
+                print '   ---------------------------------------------------------------'
+                print '   Downloadable archive name:  ' + archive.archive_name
+                print '   Archive strip dirs:         ' + archive.package_strip_dirs
+                print '   Archive target install dir: ' + archive.target_install_dir
+                print '   Archive RPath target:       ' + archive.rpath_target
+                print '   Archive URI:                ' + archive.archive_uri
+