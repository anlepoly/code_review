diff --git a/src/declarative/graphicsitems/qdeclarativeitem.h b/src/declarative/graphicsitems/qdeclarativeitem.h
index b57c38e..5db1b9c 100644
--- a/src/declarative/graphicsitems/qdeclarativeitem.h
+++ b/src/declarative/graphicsitems/qdeclarativeitem.h
@@ -47,8 +47,8 @@
 
 #include <QtCore/QObject>
 #include <QtCore/QList>
-#include <QtWidgets/qgraphicsitem.h>
 #include <QtWidgets/qgraphicstransform.h>
+#include <QtWidgets/qgraphicswidget.h>
 #include <QtGui/qfont.h>
 #include <QtWidgets/qaction.h>
 
diff --git a/src/declarative/graphicsitems/qdeclarativetext.cpp b/src/declarative/graphicsitems/qdeclarativetext.cpp
index 4d0e582..6ab599b 100644
--- a/src/declarative/graphicsitems/qdeclarativetext.cpp
+++ b/src/declarative/graphicsitems/qdeclarativetext.cpp
@@ -1106,7 +1106,6 @@ bool QDeclarativeTextPrivate::setHAlign(QDeclarativeText::HAlignment alignment,
 {
     Q_Q(QDeclarativeText);
     if (hAlign != alignment || forceAlign) {
-        QDeclarativeText::HAlignment oldEffectiveHAlign = q->effectiveHAlign();
         hAlign = alignment;
         emit q->horizontalAlignmentChanged(hAlign);
         return true;
diff --git a/src/declarative/graphicsitems/qdeclarativetextedit.cpp b/src/declarative/graphicsitems/qdeclarativetextedit.cpp
index c23718b..6ca1b73 100644
--- a/src/declarative/graphicsitems/qdeclarativetextedit.cpp
+++ b/src/declarative/graphicsitems/qdeclarativetextedit.cpp
@@ -56,8 +56,9 @@
 #include <QGraphicsSceneMouseEvent>
 #include <QDebug>
 #include <QPainter>
+#include <QtGui/QInputPanel>
 
-#include <private/qtextcontrol_p.h>
+#include <private/qwidgettextcontrol_p.h>
 
 QT_BEGIN_NAMESPACE
 
@@ -126,10 +127,10 @@ QString QDeclarativeTextEdit::text() const
 
 #ifndef QT_NO_TEXTHTMLPARSER
     if (d->richText)
-        return d->document->toHtml();
+        return d->control->toHtml();
     else
 #endif
-        return d->document->toPlainText();
+        return d->control->toPlainText();
 }
 
 /*!
@@ -548,9 +549,12 @@ bool QDeclarativeTextEditPrivate::determineHorizontalAlignment()
     if (hAlignImplicit && q->isComponentComplete()) {
         bool alignToRight;
         if (text.isEmpty()) {
-            const QString preeditText = control->textCursor().block().layout()->preeditAreaText();
+            QTextCursor cursor = control->textCursor();
+            const QString preeditText = cursor.block().isValid()
+                    ? control->textCursor().block().layout()->preeditAreaText()
+                    : QString();
             alignToRight = preeditText.isEmpty()
-                    ? QApplication::keyboardInputDirection() == Qt::RightToLeft
+                    ? qApp->inputPanel()->inputDirection() == Qt::RightToLeft
                     : preeditText.isRightToLeft();
         } else {
             alignToRight = rightToLeftText;
@@ -1537,12 +1541,12 @@ void QDeclarativeTextEditPrivate::init()
     q->setFlag(QGraphicsItem::ItemHasNoContents, false);
     q->setFlag(QGraphicsItem::ItemAcceptsInputMethod);
 
-    control = new QTextControl(q);
+    control = new QWidgetTextControl(q);
     control->setIgnoreUnusedNavigationEvents(true);
-    control->setTextInteractionFlags(Qt::LinksAccessibleByMouse | Qt::TextSelectableByKeyboard | Qt::TextEditable);
+    control->setTextInteractionFlags(Qt::TextInteractionFlags(Qt::LinksAccessibleByMouse | Qt::TextSelectableByKeyboard | Qt::TextEditable));
     control->setDragEnabled(false);
 
-    // QTextControl follows the default text color
+    // QWidgetTextControl follows the default text color
     // defined by the platform, declarative text
     // should be black by default
     QPalette pal = control->palette();
@@ -1777,9 +1781,8 @@ void QDeclarativeTextEditPrivate::updateDefaultTextOption()
     customizing when you want the input keyboard to be shown and hidden in
     your application.
 
-    By default the opening of input panels follows the platform style. On Symbian^1 and
-    Symbian^3 -based devices the panels are opened by clicking TextEdit. On other platforms
-    the panels are automatically opened when TextEdit element gains active focus. Input panels are
+    By default the opening of input panels follows the platform style.
+    The panels are automatically opened when TextEdit element gains active focus. Input panels are
     always closed if no editor has active focus.
 
     You can disable the automatic behavior by setting the property \c activeFocusOnPress to false
@@ -1811,11 +1814,10 @@ void QDeclarativeTextEditPrivate::updateDefaultTextOption()
 */
 void QDeclarativeTextEdit::openSoftwareInputPanel()
 {
-    QEvent event(QEvent::RequestSoftwareInputPanel);
     if (qApp) {
         if (QGraphicsView * view = qobject_cast<QGraphicsView*>(qApp->focusWidget())) {
             if (view->scene() && view->scene() == scene()) {
-                QApplication::sendEvent(view, &event);
+                qApp->inputPanel()->show();
             }
         }
     }
@@ -1828,9 +1830,8 @@ void QDeclarativeTextEdit::openSoftwareInputPanel()
     for customizing when you want the input keyboard to be shown and hidden in
     your application.
 
-    By default the opening of input panels follows the platform style. On Symbian^1 and
-    Symbian^3 -based devices the panels are opened by clicking TextEdit. On other platforms
-    the panels are automatically opened when TextEdit element gains active focus. Input panels are
+    By default the opening of input panels follows the platform style.
+    The panels are automatically opened when TextEdit element gains active focus. Input panels are
     always closed if no editor has active focus.
 
     You can disable the automatic behavior by setting the property \c activeFocusOnPress to false
@@ -1862,11 +1863,10 @@ void QDeclarativeTextEdit::openSoftwareInputPanel()
 */
 void QDeclarativeTextEdit::closeSoftwareInputPanel()
 {
-    QEvent event(QEvent::CloseSoftwareInputPanel);
     if (qApp) {
         if (QGraphicsView * view = qobject_cast<QGraphicsView*>(qApp->focusWidget())) {
             if (view->scene() && view->scene() == scene()) {
-                QApplication::sendEvent(view, &event);
+                qApp->inputPanel()->hide();
             }
         }
     }
diff --git a/src/declarative/graphicsitems/qdeclarativetextedit_p_p.h b/src/declarative/graphicsitems/qdeclarativetextedit_p_p.h
index bdc4351..844c455 100644
--- a/src/declarative/graphicsitems/qdeclarativetextedit_p_p.h
+++ b/src/declarative/graphicsitems/qdeclarativetextedit_p_p.h
@@ -61,7 +61,7 @@
 QT_BEGIN_NAMESPACE
 class QTextLayout;
 class QTextDocument;
-class QTextControl;
+class QWidgetTextControl;
 class QDeclarativeTextEditPrivate : public QDeclarativeImplicitSizePaintedItemPrivate
 {
     Q_DECLARE_PUBLIC(QDeclarativeTextEdit)
@@ -124,7 +124,7 @@ public:
     QDeclarativeItem* cursor;
     QDeclarativeTextEdit::TextFormat format;
     QTextDocument *document;
-    QTextControl *control;
+    QWidgetTextControl *control;
     QDeclarativeTextEdit::WrapMode wrapMode;
     QDeclarativeTextEdit::SelectionMode mouseSelectionMode;
     int lineCount;
diff --git a/src/declarative/graphicsitems/qdeclarativetextinput.cpp b/src/declarative/graphicsitems/qdeclarativetextinput.cpp
index 2d519be..b22df6e 100644
--- a/src/declarative/graphicsitems/qdeclarativetextinput.cpp
+++ b/src/declarative/graphicsitems/qdeclarativetextinput.cpp
@@ -48,6 +48,7 @@
 #include <QValidator>
 #include <QTextCursor>
 #include <QApplication>
+#include <QtGui/QInputPanel>
 #include <QFontMetrics>
 #include <QPainter>
 #include <QTextBoundaryFinder>
@@ -58,6 +59,8 @@
 
 QT_BEGIN_NAMESPACE
 
+
+
 /*!
     \qmlclass TextInput QDeclarativeTextInput
     \ingroup qml-basic-visual-elements
@@ -394,7 +397,6 @@ bool QDeclarativeTextInputPrivate::setHAlign(QDeclarativeTextInput::HAlignment a
 {
     Q_Q(QDeclarativeTextInput);
     if ((hAlign != alignment || forceAlign) && alignment <= QDeclarativeTextInput::AlignHCenter) { // justify not supported
-        QDeclarativeTextInput::HAlignment oldEffectiveHAlign = q->effectiveHAlign();
         hAlign = alignment;
         emit q->horizontalAlignmentChanged(alignment);
         return true;
@@ -410,7 +412,7 @@ bool QDeclarativeTextInputPrivate::determineHorizontalAlignment()
         if (text.isEmpty())
             text = control->preeditAreaText();
         bool isRightToLeft = text.isEmpty()
-                ? QApplication::keyboardInputDirection() == Qt::RightToLeft
+                ? qApp->inputPanel()->inputDirection() == Qt::RightToLeft
                 : text.isRightToLeft();
         return setHAlign(isRightToLeft ? QDeclarativeTextInput::AlignRight : QDeclarativeTextInput::AlignLeft);
     }
@@ -423,7 +425,6 @@ void QDeclarativeTextInputPrivate::mirrorChange()
     if (q->isComponentComplete()) {
         if (!hAlignImplicit && (hAlign == QDeclarativeTextInput::AlignRight || hAlign == QDeclarativeTextInput::AlignLeft)) {
             q->updateCursorRectangle();
-            updateHorizontalScroll();
         }
     }
 }
@@ -554,7 +555,7 @@ QRect QDeclarativeTextInput::cursorRectangle() const
     Q_D(const QDeclarativeTextInput);
     QRect r = d->control->cursorRect();
     // Scroll and make consistent with TextEdit
-    // QLineControl inexplicably adds 1 to the height and horizontal padding
+    // QWidgetLineControl inexplicably adds 1 to the height and horizontal padding
     // for unicode direction markers.
     r.adjust(5 - d->hscroll, 0, -4 - d->hscroll, -1);
     return r;
@@ -865,8 +866,10 @@ void QDeclarativeTextInputPrivate::updateInputMethodHints()
         hints |= Qt::ImhHiddenText;
     else if (echo == QDeclarativeTextInput::PasswordEchoOnEdit)
         hints &= ~Qt::ImhHiddenText;
-    if (echo != QDeclarativeTextInput::Normal)
-        hints |= (Qt::ImhNoAutoUppercase | Qt::ImhNoPredictiveText);
+    if (echo != QDeclarativeTextInput::Normal) {
+        hints |= Qt::ImhNoAutoUppercase;
+        hints |= Qt::ImhNoPredictiveText;
+    }
     q->setInputMethodHints(hints);
 }
 
@@ -893,7 +896,7 @@ void QDeclarativeTextInput::setEchoMode(QDeclarativeTextInput::EchoMode echo)
     Q_D(QDeclarativeTextInput);
     if (echoMode() == echo)
         return;
-    d->control->setEchoMode(QLineControl::EchoMode(echo));
+    d->control->setEchoMode(echo);
     d->updateInputMethodHints();
     q_textChanged();
     emit echoModeChanged(echoMode());
@@ -985,7 +988,7 @@ void QDeclarativeTextInput::createCursor()
     QDeclarative_setParent_noEvent(d->cursorItem, this);
     d->cursorItem->setParentItem(this);
     d->cursorItem->setX(d->control->cursorToX());
-    d->cursorItem->setHeight(d->control->height()-1); // -1 to counter QLineControl's +1 which is not consistent with Text.
+    d->cursorItem->setHeight(d->control->height()-1); // -1 to counter QWidgetLineControl's +1 which is not consistent with Text.
 }
 
 /*!
@@ -1052,9 +1055,11 @@ void QDeclarativeTextInputPrivate::focusChanged(bool hasFocus)
     focused = hasFocus;
     q->setCursorVisible(hasFocus && scene && scene->hasFocus());
     if(!hasFocus && control->passwordEchoEditing())
-        control->updatePasswordEchoEditing(false);//QLineControl sets it on key events, but doesn't deal with focus events
-    if (!hasFocus)
+        control->updatePasswordEchoEditing(false);//QWidgetLineControl sets it on key events, but doesn't deal with focus events
+    if (!hasFocus) {
+        control->commitPreedit();
         control->deselect();
+    }
     QDeclarativeItemPrivate::focusChanged(hasFocus);
 }
 
@@ -1112,13 +1117,13 @@ Handles the given mouse \a event.
 void QDeclarativeTextInput::mouseDoubleClickEvent(QGraphicsSceneMouseEvent *event)
 {
     Q_D(QDeclarativeTextInput);
-    if (d->sendMouseEventToInputContext(event, QEvent::MouseButtonDblClick))
-        return;
-    if (d->selectByMouse) {
+    if (d->selectByMouse && event->button() == Qt::LeftButton) {
         int cursor = d->xToPos(event->pos().x());
         d->control->selectWordAtPos(cursor);
         event->setAccepted(true);
     } else {
+        if (d->sendMouseEventToInputContext(event, QEvent::MouseButtonDblClick))
+            return;
         QDeclarativePaintedItem::mouseDoubleClickEvent(event);
     }
 }
@@ -1126,8 +1131,9 @@ void QDeclarativeTextInput::mouseDoubleClickEvent(QGraphicsSceneMouseEvent *even
 void QDeclarativeTextInput::mousePressEvent(QGraphicsSceneMouseEvent *event)
 {
     Q_D(QDeclarativeTextInput);
-    if (d->sendMouseEventToInputContext(event, QEvent::MouseButtonPress))
-        return;
+
+    d->pressPos = event->pos();
+
     if(d->focusOnPress){
         bool hadActiveFocus = hasActiveFocus();
         forceActiveFocus();
@@ -1145,8 +1151,10 @@ void QDeclarativeTextInput::mousePressEvent(QGraphicsSceneMouseEvent *event)
     if (d->selectByMouse) {
         setKeepMouseGrab(false);
         d->selectPressed = true;
-        d->pressPos = event->pos();
     }
+    if (d->sendMouseEventToInputContext(event, QEvent::MouseButtonPress))
+        return;
+
     bool mark = (event->modifiers() & Qt::ShiftModifier) && d->selectByMouse;
     int cursor = d->xToPos(event->pos().x());
     d->control->moveCursor(cursor, mark);
@@ -1156,12 +1164,20 @@ void QDeclarativeTextInput::mousePressEvent(QGraphicsSceneMouseEvent *event)
 void QDeclarativeTextInput::mouseMoveEvent(QGraphicsSceneMouseEvent *event)
 {
     Q_D(QDeclarativeTextInput);
-    if (d->sendMouseEventToInputContext(event, QEvent::MouseMove))
-        return;
+
     if (d->selectPressed) {
         if (qAbs(int(event->pos().x() - d->pressPos.x())) > QApplication::startDragDistance())
             setKeepMouseGrab(true);
-        moveCursorSelection(d->xToPos(event->pos().x()), d->mouseSelectionMode);
+
+        if (d->control->composeMode()) {
+            // start selection
+            int startPos = d->xToPos(d->pressPos.x());
+            int currentPos = d->xToPos(event->pos().x());
+            if (startPos != currentPos)
+                d->control->setSelection(startPos, currentPos - startPos);
+        } else {
+            moveCursorSelection(d->xToPos(event->pos().x()), d->mouseSelectionMode);
+        }
         event->setAccepted(true);
     } else {
         QDeclarativePaintedItem::mouseMoveEvent(event);
@@ -1191,7 +1207,16 @@ void QDeclarativeTextInput::mouseReleaseEvent(QGraphicsSceneMouseEvent *event)
         }
     }
     d->clickCausedFocus = false;
-    d->control->processEvent(event);
+#ifndef QT_NO_CLIPBOARD
+    if (QGuiApplication::clipboard()->supportsSelection()) {
+        if (event->button() == Qt::LeftButton) {
+            d->control->copy(QClipboard::Selection);
+        } else if (!isReadOnly() && event->button() == Qt::MidButton) {
+            d->control->deselect();
+            d->control->insert(QGuiApplication::clipboard()->text(QClipboard::Selection));
+        }
+    }
+#endif
     if (!event->isAccepted())
         QDeclarativePaintedItem::mouseReleaseEvent(event);
 }
@@ -1203,28 +1228,12 @@ bool QDeclarativeTextInputPrivate::sendMouseEventToInputContext(
     if (event->widget() && control->composeMode()) {
         int tmp_cursor = xToPos(event->pos().x());
         int mousePos = tmp_cursor - control->cursor();
-        if (mousePos < 0 || mousePos > control->preeditAreaText().length()) {
-            mousePos = -1;
-            // don't send move events outside the preedit area
-            if (eventType == QEvent::MouseMove)
-                return true;
-        }
-
-        QInputContext *qic = event->widget()->inputContext();
-        if (qic) {
-            QMouseEvent mouseEvent(
-                    eventType,
-                    event->widget()->mapFromGlobal(event->screenPos()),
-                    event->screenPos(),
-                    event->button(),
-                    event->buttons(),
-                    event->modifiers());
-            // may be causing reset() in some input methods
-            qic->mouseHandler(mousePos, &mouseEvent);
-            event->setAccepted(mouseEvent.isAccepted());
-        }
-        if (!control->preeditAreaText().isEmpty())
+        if (mousePos >= 0 && mousePos <= control->preeditAreaText().length()) {
+            if (eventType == QEvent::MouseButtonRelease) {
+                qApp->inputPanel()->invokeAction(QInputPanel::Click, mousePos);
+            }
             return true;
+        }
     }
 #else
     Q_UNUSED(event);
@@ -1247,30 +1256,20 @@ bool QDeclarativeTextInput::sceneEvent(QEvent *event)
 
 bool QDeclarativeTextInput::event(QEvent* ev)
 {
+#ifndef QT_NO_SHORTCUT
     Q_D(QDeclarativeTextInput);
-    //Anything we don't deal with ourselves, pass to the control
-    bool handled = false;
-    switch(ev->type()){
-        case QEvent::KeyPress:
-        case QEvent::KeyRelease://###Should the control be doing anything with release?
-        case QEvent::InputMethod:
-        case QEvent::GraphicsSceneMousePress:
-        case QEvent::GraphicsSceneMouseMove:
-        case QEvent::GraphicsSceneMouseRelease:
-        case QEvent::GraphicsSceneMouseDoubleClick:
-            break;
-        default:
-            handled = d->control->processEvent(ev);
+
+    if (ev->type() == QEvent::ShortcutOverride) {
+        d->control->processShortcutOverrideEvent(static_cast<QKeyEvent *>(ev));
+        return ev->isAccepted();
     }
-    if(!handled)
-        handled = QDeclarativePaintedItem::event(ev);
-    return handled;
+#endif
+    return QDeclarativePaintedItem::event(ev);
 }
 
 void QDeclarativeTextInput::geometryChanged(const QRectF &newGeometry,
                                   const QRectF &oldGeometry)
 {
-    Q_D(QDeclarativeTextInput);
     if (newGeometry.width() != oldGeometry.width()) {
         updateSize();
         updateCursorRectangle();
@@ -1348,11 +1347,11 @@ void QDeclarativeTextInput::drawContents(QPainter *p, const QRect &r)
     p->setRenderHint(QPainter::TextAntialiasing, true);
     p->save();
     p->setPen(QPen(d->color));
-    int flags = QLineControl::DrawText;
+    int flags = QWidgetLineControl::DrawText;
     if(!isReadOnly() && d->cursorVisible && !d->cursorItem)
-        flags |= QLineControl::DrawCursor;
+        flags |= QWidgetLineControl::DrawCursor;
     if (d->control->hasSelectedText())
-            flags |= QLineControl::DrawSelections;
+            flags |= QWidgetLineControl::DrawSelections;
     QPoint offset = QPoint(0,0);
     QFontMetrics fm = QFontMetrics(d->font);
     QRect br(boundingRect().toRect());
@@ -1381,10 +1380,11 @@ QVariant QDeclarativeTextInput::inputMethodQuery(Qt::InputMethodQuery property)
     case Qt::ImCursorPosition:
         return QVariant(d->control->cursor());
     case Qt::ImSurroundingText:
-        if (d->control->echoMode() == PasswordEchoOnEdit && !d->control->passwordEchoEditing())
+        if (d->control->echoMode() == PasswordEchoOnEdit
+            && !d->control->passwordEchoEditing())
             return QVariant(displayText());
         else
-            return QVariant(text());
+            return QVariant(d->control->realText());
     case Qt::ImCurrentSelection:
         return QVariant(selectedText());
     case Qt::ImMaximumTextLength:
@@ -1722,9 +1722,8 @@ void QDeclarativeTextInput::moveCursorSelection(int pos, SelectionMode mode)
     customizing when you want the input keyboard to be shown and hidden in
     your application.
 
-    By default the opening of input panels follows the platform style. On Symbian^1 and
-    Symbian^3 -based devices the panels are opened by clicking TextInput. On other platforms
-    the panels are automatically opened when TextInput element gains active focus. Input panels are
+    By default the opening of input panels follows the platform style.
+    The panels are automatically opened when TextInput element gains active focus. Input panels are
     always closed if no editor has active focus.
 
   . You can disable the automatic behavior by setting the property \c activeFocusOnPress to false
@@ -1756,11 +1755,10 @@ void QDeclarativeTextInput::moveCursorSelection(int pos, SelectionMode mode)
 */
 void QDeclarativeTextInput::openSoftwareInputPanel()
 {
-    QEvent event(QEvent::RequestSoftwareInputPanel);
     if (qApp) {
         if (QGraphicsView * view = qobject_cast<QGraphicsView*>(qApp->focusWidget())) {
             if (view->scene() && view->scene() == scene()) {
-                QApplication::sendEvent(view, &event);
+                qApp->inputPanel()->show();
             }
         }
     }
@@ -1773,9 +1771,8 @@ void QDeclarativeTextInput::openSoftwareInputPanel()
     for customizing when you want the input keyboard to be shown and hidden in
     your application.
 
-    By default the opening of input panels follows the platform style. On Symbian^1 and
-    Symbian^3 -based devices the panels are opened by clicking TextInput. On other platforms
-    the panels are automatically opened when TextInput element gains active focus. Input panels are
+    By default the opening of input panels follows the platform style.
+    The panels are automatically opened when TextInput element gains active focus. Input panels are
     always closed if no editor has active focus.
 
   . You can disable the automatic behavior by setting the property \c activeFocusOnPress to false
@@ -1807,12 +1804,10 @@ void QDeclarativeTextInput::openSoftwareInputPanel()
 */
 void QDeclarativeTextInput::closeSoftwareInputPanel()
 {
-    QEvent event(QEvent::CloseSoftwareInputPanel);
     if (qApp) {
-        QEvent event(QEvent::CloseSoftwareInputPanel);
         if (QGraphicsView * view = qobject_cast<QGraphicsView*>(qApp->focusWidget())) {
             if (view->scene() && view->scene() == scene()) {
-                QApplication::sendEvent(view, &event);
+                qApp->inputPanel()->hide();
             }
         }
     }
@@ -1851,7 +1846,7 @@ bool QDeclarativeTextInput::isInputMethodComposing() const
 void QDeclarativeTextInputPrivate::init()
 {
     Q_Q(QDeclarativeTextInput);
-    control->setParent(q);
+    control->setParent(q);//Now mandatory due to accessibility changes
     control->setCursorWidth(1);
     control->setPasswordCharacter(QLatin1Char('*'));
     q->setSmooth(smooth);
@@ -1983,7 +1978,7 @@ void QDeclarativeTextInput::updateSize(bool needsRedraw)
     Q_D(QDeclarativeTextInput);
     int w = width();
     int h = height();
-    setImplicitHeight(d->control->height()-1); // -1 to counter QLineControl's +1 which is not consistent with Text.
+    setImplicitHeight(d->control->height()-1); // -1 to counter QWidgetLineControl's +1 which is not consistent with Text.
     setImplicitWidth(d->calculateTextWidth());
     setContentsSize(QSize(width(), height()));//Repaints if changed
     if(w==width() && h==height() && needsRedraw){
diff --git a/src/declarative/graphicsitems/qdeclarativetextinput_p_p.h b/src/declarative/graphicsitems/qdeclarativetextinput_p_p.h
index f968460..ab91610 100644
--- a/src/declarative/graphicsitems/qdeclarativetextinput_p_p.h
+++ b/src/declarative/graphicsitems/qdeclarativetextinput_p_p.h
@@ -50,7 +50,7 @@
 
 #include <QPointer>
 
-#include <private/qlinecontrol_p.h>
+#include <private/qwidgetlinecontrol_p.h>
 
 //
 //  W A R N I N G
@@ -70,7 +70,7 @@ class Q_AUTOTEST_EXPORT QDeclarativeTextInputPrivate : public QDeclarativeImplic
 {
     Q_DECLARE_PUBLIC(QDeclarativeTextInput)
 public:
-    QDeclarativeTextInputPrivate() : control(new QLineControl),
+    QDeclarativeTextInputPrivate() : control(new QWidgetLineControl),
                  color((QRgb)0), style(QDeclarativeText::Normal),
                  styleColor((QRgb)0), hAlign(QDeclarativeTextInput::AlignLeft),
                  mouseSelectionMode(QDeclarativeTextInput::SelectCharacters), inputMethodHints(Qt::ImhNone),
@@ -110,7 +110,7 @@ public:
     bool sendMouseEventToInputContext(QGraphicsSceneMouseEvent *event, QEvent::Type eventType);
     void updateInputMethodHints();
 
-    QLineControl* control;
+    QWidgetLineControl* control;
 
     QFont font;
     QFont sourceFont;
diff --git a/src/declarative/qml/qdeclarativeinfo.h b/src/declarative/qml/qdeclarativeinfo.h
index 206c270..d4abba8 100644
--- a/src/declarative/qml/qdeclarativeinfo.h
+++ b/src/declarative/qml/qdeclarativeinfo.h
@@ -60,7 +60,6 @@ public:
     ~QDeclarativeInfo();
 
     inline QDeclarativeInfo &operator<<(QChar t) { QDebug::operator<<(t); return *this; }
-    inline QDeclarativeInfo &operator<<(QBool t) { QDebug::operator<<(t); return *this; }
     inline QDeclarativeInfo &operator<<(bool t) { QDebug::operator<<(t); return *this; }
     inline QDeclarativeInfo &operator<<(char t) { QDebug::operator<<(t); return *this; }
     inline QDeclarativeInfo &operator<<(signed short t) { QDebug::operator<<(t); return *this; }
diff --git a/tests/auto/declarative/qdeclarativeecmascript/tst_qdeclarativeecmascript.cpp b/tests/auto/declarative/qdeclarativeecmascript/tst_qdeclarativeecmascript.cpp
index f8731f9..6952dc9 100644
--- a/tests/auto/declarative/qdeclarativeecmascript/tst_qdeclarativeecmascript.cpp
+++ b/tests/auto/declarative/qdeclarativeecmascript/tst_qdeclarativeecmascript.cpp
@@ -992,12 +992,12 @@ void tst_qdeclarativeecmascript::dynamicDestruction()
 
     QMetaObject::invokeMethod(object, "killOther");
     QVERIFY(createdQmlObject);
-    QCoreApplication::instance()->processEvents(QEventLoop::DeferredDeletion);
+    QCoreApplication::sendPostedEvents(0, QEvent::DeferredDelete);
     QVERIFY(createdQmlObject);
     for (int ii = 0; createdQmlObject && ii < 50; ++ii) { // After 5 seconds we should give up
         if (createdQmlObject) {
             QTest::qWait(100);
-            QCoreApplication::instance()->processEvents(QEventLoop::DeferredDeletion);
+            QCoreApplication::sendPostedEvents(0, QEvent::DeferredDelete);
         }
     }
     QVERIFY(!createdQmlObject);
@@ -1006,7 +1006,7 @@ void tst_qdeclarativeecmascript::dynamicDestruction()
     QMetaObject::invokeMethod(object, "killMe");
     QVERIFY(object);
     QTest::qWait(0);
-    QCoreApplication::instance()->processEvents(QEventLoop::DeferredDeletion);
+    QCoreApplication::sendPostedEvents(0, QEvent::DeferredDelete);
     QVERIFY(!object);
 }
 
@@ -2129,7 +2129,7 @@ void tst_qdeclarativeecmascript::ownership()
         QObject *object = component.create(context);
         QDeclarativeEnginePrivate::getScriptEngine(&engine)->collectGarbage();
 
-        QCoreApplication::processEvents(QEventLoop::DeferredDeletion);
+        QCoreApplication::sendPostedEvents(0, QEvent::DeferredDelete);
 
         QVERIFY(own.object == 0);
 
@@ -2146,7 +2146,7 @@ void tst_qdeclarativeecmascript::ownership()
         QObject *object = component.create(context);
         QDeclarativeEnginePrivate::getScriptEngine(&engine)->collectGarbage();
 
-        QCoreApplication::processEvents(QEventLoop::DeferredDeletion);
+        QCoreApplication::sendPostedEvents(0, QEvent::DeferredDelete);
 
         QVERIFY(own.object != 0);
 
@@ -2199,7 +2199,7 @@ void tst_qdeclarativeecmascript::cppOwnershipReturnValue()
     delete object;
     }
 
-    QCoreApplication::instance()->processEvents(QEventLoop::DeferredDeletion);
+    QCoreApplication::sendPostedEvents(0, QEvent::DeferredDelete);
 
     QVERIFY(source.value != 0);
 }
@@ -2226,7 +2226,7 @@ void tst_qdeclarativeecmascript::ownershipCustomReturnValue()
     delete object;
     }
 
-    QCoreApplication::instance()->processEvents(QEventLoop::DeferredDeletion);
+    QCoreApplication::sendPostedEvents(0, QEvent::DeferredDelete);
 
     QVERIFY(source.value == 0);
 }
diff --git a/tests/auto/declarative/qdeclarativeimage/tst_qdeclarativeimage.cpp b/tests/auto/declarative/qdeclarativeimage/tst_qdeclarativeimage.cpp
index ab82f80..05ff292 100644
--- a/tests/auto/declarative/qdeclarativeimage/tst_qdeclarativeimage.cpp
+++ b/tests/auto/declarative/qdeclarativeimage/tst_qdeclarativeimage.cpp
@@ -782,7 +782,7 @@ void tst_qdeclarativeimage::readerCrash_QTBUG_22125()
 
         // shouldn't crash when deleting cancelled QDeclarativePixmapReplys.
         QTest::qWait(1000);
-        qApp->processEvents(QEventLoop::DeferredDeletion);
+        QCoreApplication::sendPostedEvents(0, QEvent::DeferredDelete);
     }
 
     {
diff --git a/tests/auto/declarative/qdeclarativeinfo/tst_qdeclarativeinfo.cpp b/tests/auto/declarative/qdeclarativeinfo/tst_qdeclarativeinfo.cpp
index 1167136..94958b2 100644
--- a/tests/auto/declarative/qdeclarativeinfo/tst_qdeclarativeinfo.cpp
+++ b/tests/auto/declarative/qdeclarativeinfo/tst_qdeclarativeinfo.cpp
@@ -161,9 +161,6 @@ void tst_qdeclarativeinfo::types()
     QTest::ignoreMessage(QtWarningMsg, "<Unknown File>: \"Qt\"");
     qmlInfo(0) << QByteArray("Qt");
 
-    QTest::ignoreMessage(QtWarningMsg, "<Unknown File>: true");
-    qmlInfo(0) << QBool(true);
-
     //### do we actually want QUrl to show up in the output?
     //### why the extra space at the end?
     QTest::ignoreMessage(QtWarningMsg, "<Unknown File>: QUrl(\"http://qt.nokia.com\") ");
@@ -189,7 +186,7 @@ void tst_qdeclarativeinfo::chaining()
     //### should more of these be automatically inserting spaces?
     QString str("Hello World");
     QStringRef ref(&str, 6, 5);
-    QTest::ignoreMessage(QtWarningMsg, "<Unknown File>: false 1.1 1.2 15 hello 'b' QUrl(\"http://qt.nokia.com\") World \"Qt\" true Quick ");
+    QTest::ignoreMessage(QtWarningMsg, "<Unknown File>: false 1.1 1.2 15 hello 'b' QUrl(\"http://qt.nokia.com\") World \"Qt\" Quick ");
     qmlInfo(0) << false << ' '
                << 1.1 << ' '
                << 1.2f << ' '
@@ -199,7 +196,6 @@ void tst_qdeclarativeinfo::chaining()
                << QUrl("http://qt.nokia.com")
                << ref
                << QByteArray("Qt")
-               << QBool(true)
                << QString ("Quick");
 }
 
diff --git a/tests/auto/declarative/qdeclarativetextedit/tst_qdeclarativetextedit.cpp b/tests/auto/declarative/qdeclarativetextedit/tst_qdeclarativetextedit.cpp
index c165e62..5ddabc0 100644
--- a/tests/auto/declarative/qdeclarativetextedit/tst_qdeclarativetextedit.cpp
+++ b/tests/auto/declarative/qdeclarativetextedit/tst_qdeclarativetextedit.cpp
@@ -58,7 +58,7 @@
 #include <QMimeData>
 #include <private/qapplication_p.h>
 #include <private/qinputpanel_p.h>
-#include <private/qtextcontrol_p.h>
+#include <private/qwidgettextcontrol_p.h>
 #include "../shared/platforminputcontext.h"
 
 #ifdef Q_OS_SYMBIAN
@@ -2022,7 +2022,7 @@ void tst_qdeclarativetextedit::canPaste() {
     QVERIFY(textEdit != 0);
 
     // check initial value - QTBUG-17765
-    QTextControl tc;
+    QWidgetTextControl tc;
     QCOMPARE(textEdit->canPaste(), tc.canPaste());
 
 #endif
@@ -2040,7 +2040,7 @@ void tst_qdeclarativetextedit::canPasteEmpty() {
     QVERIFY(textEdit != 0);
 
     // check initial value - QTBUG-17765
-    QTextControl tc;
+    QWidgetTextControl tc;
     QCOMPARE(textEdit->canPaste(), tc.canPaste());
 
 #endif
diff --git a/tests/auto/declarative/qdeclarativetextinput/tst_qdeclarativetextinput.cpp b/tests/auto/declarative/qdeclarativetextinput/tst_qdeclarativetextinput.cpp
index ee81e4c..9d9ec69 100644
--- a/tests/auto/declarative/qdeclarativetextinput/tst_qdeclarativetextinput.cpp
+++ b/tests/auto/declarative/qdeclarativetextinput/tst_qdeclarativetextinput.cpp
@@ -51,7 +51,7 @@
 #include <QInputContext>
 #include <private/qapplication_p.h>
 #include <private/qinputpanel_p.h>
-#include <private/qlinecontrol_p.h>
+#include <private/qwidgetlinecontrol_p.h>
 #include "../shared/platforminputcontext.h"
 
 #include "qplatformdefs.h"
@@ -1757,7 +1757,7 @@ void tst_qdeclarativetextinput::canPasteEmpty() {
     QDeclarativeTextInput *textInput = qobject_cast<QDeclarativeTextInput*>(textInputComponent.create());
     QVERIFY(textInput != 0);
 
-    QLineControl lc;
+    QWidgetLineControl lc;
     bool cp = !lc.isReadOnly() && QApplication::clipboard()->text().length() != 0;
     QCOMPARE(textInput->canPaste(), cp);
 
@@ -1775,7 +1775,7 @@ void tst_qdeclarativetextinput::canPaste() {
     QDeclarativeTextInput *textInput = qobject_cast<QDeclarativeTextInput*>(textInputComponent.create());
     QVERIFY(textInput != 0);
 
-    QLineControl lc;
+    QWidgetLineControl lc;
     bool cp = !lc.isReadOnly() && QApplication::clipboard()->text().length() != 0;
     QCOMPARE(textInput->canPaste(), cp);
 
diff --git a/tools/qml/qmlruntime.cpp b/tools/qml/qmlruntime.cpp
index a5fe860..99b9a07 100644
--- a/tools/qml/qmlruntime.cpp
+++ b/tools/qml/qmlruntime.cpp
@@ -66,6 +66,7 @@
 #include <QXmlStreamReader>
 #include <QBuffer>
 #include <QNetworkReply>
+#include <QNetworkCookie>
 #include <QNetworkCookieJar>
 #include <QNetworkDiskCache>
 #include <QNetworkAccessManager>