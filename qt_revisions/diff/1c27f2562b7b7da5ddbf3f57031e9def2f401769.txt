diff --git a/examples/Gallery.qml b/examples/Gallery.qml
index 1f28238..aaf168e 100644
--- a/examples/Gallery.qml
+++ b/examples/Gallery.qml
@@ -23,29 +23,49 @@ Rectangle {
             spacing: 2
             anchors.verticalCenter: parent.verticalCenter
             ToolButton{
-                iconName: "folder-new"
-                iconSource: "images/folder_new.png"
+                iconName: "window-new"
+                iconSource: "images/window-new.png"
                 anchors.verticalCenter: parent.verticalCenter
-                Accessible.name: "New"
-                tooltip: "A button."
+                onClicked: window1.visible = !window1.visible
+                Accessible.name: "New window"
+                tooltip: "Toggle visibility of the second window"
             }
             ToolButton{
-                iconName: "folder-new"
-                iconSource: "images/folder_new.png"
+                iconName: "document-open"
+                iconSource: "images/document-open.png"
                 anchors.verticalCenter: parent.verticalCenter
-                Accessible.name: "New 2"
-                tooltip: "A second button."
+                onClicked: fileDialogLoad.open()
+                tooltip: "(Pretend to) open a file"
             }
             ToolButton{
-                iconName: "window-new"
-                iconSource: "images/toplevel_window.png"
+                iconName: "document-save-as"
+                iconSource: "images/document-save-as.png"
                 anchors.verticalCenter: parent.verticalCenter
-                onClicked: window1.visible = !window1.visible
-                Accessible.name: "New window"
-                tooltip: "New window button."
+                onClicked: fileDialogSave.open()
+                tooltip: "(Pretend to) save as..."
             }
         }
 
+        FileDialog {
+            id: fileDialogLoad
+            folder: "/tmp"
+            title: "Choose a file to open"
+            selectMultiple: true
+            nameFilters: [ "Image files (*.png *.jpg)", "All files (*)" ]
+
+            onAccepted: { console.log("Accepted: " + filePaths) }
+        }
+
+        FileDialog {
+            id: fileDialogSave
+            folder: "/tmp"
+            title: "Save as..."
+            modal: true
+            selectExisting: false
+
+            onAccepted: { console.log("Accepted: " + filePath) }
+        }
+
         Window {
             id: window1
 
diff --git a/examples/TopLevel.qml b/examples/TopLevel.qml
index b22a216..9a8642a 100644
--- a/examples/TopLevel.qml
+++ b/examples/TopLevel.qml
@@ -13,13 +13,23 @@ Window {
     minimumWidth: gallery.width
     visible: true
 
+
+    FileDialog {
+        id: fileDialogLoad
+        folder: "/tmp"
+        title: "Choose a file to open"
+        selectMultiple: true
+        nameFilters: [ "Image files (*.png *.jpg)", "All files (*)" ]
+        onAccepted: { console.log("Accepted: " + filePaths) }
+    }
+
     MenuBar {
         Menu {
             text: "File"
             MenuItem {
                 text: "Open"
                 shortcut: "Ctrl+O"
-                onTriggered: console.log("we should display a file open dialog")
+                onTriggered: fileDialogLoad.open();
             }
             MenuItem {
                 text: "Close"
diff --git a/examples/images/document-open.png b/examples/images/document-open.png
new file mode 100644
index 0000000..f35f258
Binary files /dev/null and b/examples/images/document-open.png differ
diff --git a/examples/images/document-save-as.png b/examples/images/document-save-as.png
new file mode 100644
index 0000000..5c9f6b3
Binary files /dev/null and b/examples/images/document-save-as.png differ
diff --git a/examples/images/window-new.png b/examples/images/window-new.png
new file mode 100644
index 0000000..e091702
Binary files /dev/null and b/examples/images/window-new.png differ
diff --git a/src/qfiledialogitem.cpp b/src/qfiledialogitem.cpp
new file mode 100644
index 0000000..a83a245
--- /dev/null
+++ b/src/qfiledialogitem.cpp
@@ -0,0 +1,322 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Alberto Mardegan <info@mardy.it>
+** Contact: http://www.qt-project.org/
+**
+** This file is part of the Qt Components project.
+**
+** $QT_BEGIN_LICENSE:BSD$
+** You may use this file under the terms of the BSD license as follows:
+**
+** "Redistribution and use in source and binary forms, with or without
+** modification, are permitted provided that the following conditions are
+** met:
+**   * Redistributions of source code must retain the above copyright
+**     notice, this list of conditions and the following disclaimer.
+**   * Redistributions in binary form must reproduce the above copyright
+**     notice, this list of conditions and the following disclaimer in
+**     the documentation and/or other materials provided with the
+**     distribution.
+**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
+**     the names of its contributors may be used to endorse or promote
+**     products derived from this software without specific prior written
+**     permission.
+**
+** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+/*!
+    \qmlclass FileDialog QFileDialogItem
+    \ingroup qt-components
+    \brief Dialog component for choosing files from a local filesystem.
+
+    FileDialog implements a basic file chooser: it allows the user to select
+    existing files and/or directories, or create new filenames.
+*/
+
+/*!
+    \qmlsignal FileDialog::accepted
+
+    The \a accepted signal is emitted when the user has finished using the
+    dialog. You can then inspect the \a filePath or \a filePaths properties to
+    get the selection.
+
+    Example:
+
+    \qml
+    FileDialog {
+        onAccepted: { console.log("Selected file: " + filePath) }
+    }
+    \endqml
+*/
+
+/*!
+    \qmlsignal FileDialog::rejected
+
+    The \a rejected signal is emitted when the user has dismissed the dialog,
+    either by closing the dialog window or by pressing the Cancel button.
+*/
+
+#include "qfiledialogitem.h"
+
+#if QT_VERSION < 0x050000
+#include <QGraphicsScene>
+#endif
+
+QFileDialogItem::QFileDialogItem():
+    _dialog(new QFileDialog),
+    _isOpen(false),
+    _selectExisting(true),
+    _selectMultiple(false),
+    _selectFolder(false)
+{
+    QObject::connect(_dialog, SIGNAL(accepted()), this, SIGNAL(accepted()));
+    QObject::connect(_dialog, SIGNAL(rejected()), this, SIGNAL(rejected()));
+}
+
+QFileDialogItem::~QFileDialogItem()
+{
+    delete _dialog;
+}
+
+/*!
+    \qmlproperty string FileDialog::title
+
+    The title of the dialog window.
+*/
+void QFileDialogItem::setTitle(QString title)
+{
+    _dialog->setWindowTitle(title);
+    emit titleChanged();
+}
+
+/* Intentionally left undocumented, as we might decide to remove it later */
+void QFileDialogItem::setModal(bool modal)
+{
+    bool visible = _dialog->isVisible();
+    _dialog->hide();
+    _dialog->setWindowModality(modal ? Qt::WindowModal : Qt::NonModal);
+
+    if (visible)
+        _dialog->show();
+    emit modalityChanged();
+}
+
+/*!
+    \qmlproperty bool FileDialog::selectExisting
+
+    Whether only existing files or directories can be selected.
+
+    By default, this property is true.
+*/
+void QFileDialogItem::setSelectExisting(bool selectExisting)
+{
+    if (selectExisting == _selectExisting) return;
+    _selectExisting = selectExisting;
+
+    updateFileMode();
+
+    _dialog->setAcceptMode(selectExisting ?
+                           QFileDialog::AcceptOpen : QFileDialog::AcceptSave);
+
+    Q_EMIT selectExistingChanged();
+}
+
+/*!
+    \qmlproperty bool FileDialog::selectMultiple
+
+    Whether more than one filename can be selected.
+
+    By default, this property is false.
+*/
+void QFileDialogItem::setSelectMultiple(bool selectMultiple)
+{
+    if (selectMultiple == _selectMultiple) return;
+    _selectMultiple = selectMultiple;
+
+    updateFileMode();
+
+    Q_EMIT selectMultipleChanged();
+}
+
+/*!
+    \qmlproperty bool FileDialog::selectFolder
+
+    Whether the selected item should be a folder.
+
+    By default, this property is false.
+*/
+void QFileDialogItem::setSelectFolder(bool selectFolder)
+{
+    if (selectFolder == _selectFolder) return;
+    _selectFolder = selectFolder;
+
+    updateFileMode();
+
+    Q_EMIT selectFolderChanged();
+}
+
+void QFileDialogItem::updateFileMode()
+{
+    QFileDialog::FileMode mode = QFileDialog::AnyFile;
+
+    if (_selectFolder) {
+        mode = QFileDialog::Directory;
+        _dialog->setOption(QFileDialog::ShowDirsOnly, true);
+    } else if (_selectExisting) {
+        mode = _selectMultiple ?
+            QFileDialog::ExistingFiles : QFileDialog::ExistingFile;
+        _dialog->setOption(QFileDialog::ShowDirsOnly, false);
+    }
+    _dialog->setFileMode(mode);
+}
+
+/*!
+    \qmlproperty string FileDialog::folder
+
+    The path to the currently selected folder. Setting this property before
+    invoking open() will cause the file browser to be initially positioned on
+    the specified folder.
+
+    The value of this property is also updated after the dialog is closed.
+
+    By default, this property is false.
+*/
+void QFileDialogItem::setFolder(const QString &folder)
+{
+    _dialog->setDirectory(folder);
+    Q_EMIT folderChanged();
+}
+
+QString QFileDialogItem::folder() const
+{
+    return _dialog->directory().absolutePath();
+}
+
+/*!
+    \qmlproperty list<string> FileDialog::nameFilters
+
+    A list of strings to be used as file name filters. Each string can be a
+    space-separated list of filters; filters may include the ? and * wildcards.
+    The list of filters can also be enclosed in parentheses and a textual
+    description of the filter can be provided.
+
+    For example:
+
+    \qml
+    FileDialog {
+        nameFilters: [ "Image files (*.jpg *.png)", "All files (*)" ]
+    }
+    \endqml
+
+    \note Directories are not excluded by filters.
+*/
+void QFileDialogItem::setNameFilters(const QStringList &nameFilters)
+{
+    _dialog->setNameFilters(nameFilters);
+    Q_EMIT nameFiltersChanged();
+}
+
+/*!
+    \qmlproperty string FileDialog::filePath
+
+    The path of the file which was selected by the user.
+
+    \note This property is set only if exactly one file was selected. In all
+    other cases, it will return an empty string.
+
+    \sa filePaths
+*/
+QString QFileDialogItem::filePath() const
+{
+    QStringList files = filePaths();
+    return (files.count() == 1) ? files[0] : QString();
+}
+
+/*!
+    \qmlproperty list<string> FileDialog::filePaths
+
+    The list of file paths which were selected by the user.
+*/
+QStringList QFileDialogItem::filePaths() const
+{
+    return _dialog->selectedFiles();
+}
+
+void QFileDialogItem::setVisible(bool visible)
+{
+    if (visible)
+        open();
+    else
+        close();
+}
+
+/*!
+    \qmlmethod void FileDialog::open()
+
+    Shows the dialog to the user.
+*/
+void QFileDialogItem::open()
+{
+#if QT_VERSION < 0x050000
+    /* We must set the QtDeclarative scene as parent widget for the
+     * QDialog, so that it will be positioned on top of it.
+     * This is also necessary for the modality to work.
+     */
+    if (_dialog->parentWidget() == 0) {
+        QList<QGraphicsView *> views = scene()->views();
+        if (!views.isEmpty()) {
+            _dialog->setParent(views[0], Qt::Dialog);
+        }
+    }
+#endif
+
+    if (!isVisible()) {
+        _dialog->show();
+        emit visibleChanged();
+    }
+    _isOpen = true;
+}
+
+/*!
+    \qmlmethod void FileDialog::close()
+
+    Closes the dialog.
+*/
+void QFileDialogItem::close()
+{
+    _isOpen = false;
+    _dialog->hide();
+    emit visibleChanged();
+}
+
+#if QT_VERSION < 0x050000
+QVariant QFileDialogItem::itemChange(GraphicsItemChange change,
+                                     const QVariant &value)
+{
+    if (change == QGraphicsItem::QGraphicsItem::ItemVisibleHasChanged) {
+        bool visible = value.toBool();
+
+        if (visible && _isOpen) {
+            _dialog->show();
+        } else {
+            _dialog->hide();
+        }
+        emit visibleChanged();
+    }
+
+    return QDeclarativeItem::itemChange(change, value);
+}
+#endif
diff --git a/src/qfiledialogitem.h b/src/qfiledialogitem.h
new file mode 100644
index 0000000..e63dc31
--- /dev/null
+++ b/src/qfiledialogitem.h
@@ -0,0 +1,131 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Alberto Mardegan <info@mardy.it>
+** Contact: http://www.qt-project.org/
+**
+** This file is part of the Qt Components project.
+**
+** $QT_BEGIN_LICENSE:BSD$
+** You may use this file under the terms of the BSD license as follows:
+**
+** "Redistribution and use in source and binary forms, with or without
+** modification, are permitted provided that the following conditions are
+** met:
+**   * Redistributions of source code must retain the above copyright
+**     notice, this list of conditions and the following disclaimer.
+**   * Redistributions in binary form must reproduce the above copyright
+**     notice, this list of conditions and the following disclaimer in
+**     the documentation and/or other materials provided with the
+**     distribution.
+**   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor
+**     the names of its contributors may be used to endorse or promote
+**     products derived from this software without specific prior written
+**     permission.
+**
+** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#ifndef QFILEDIALOGITEM_H
+#define QFILEDIALOGITEM_H
+
+#include <QtGui/QApplication>
+#if QT_VERSION < 0x050000
+#include <QDeclarativeItem>
+#include <QDeclarativeView>
+#else
+#include <QtQuick/QQuickItem>
+#include <QtQuick/QQuickView>
+#endif
+#include <QFileDialog>
+
+#if QT_VERSION < 0x050000
+class QFileDialogItem : public QDeclarativeItem
+#else
+class QFileDialogItem : public QQuickItem
+#endif
+{
+    Q_OBJECT
+    Q_PROPERTY(bool visible READ isVisible WRITE setVisible NOTIFY visibleChanged)
+    Q_PROPERTY(bool modal READ modal WRITE setModal NOTIFY modalityChanged)
+    Q_PROPERTY(QString title READ title WRITE setTitle NOTIFY titleChanged)
+    Q_PROPERTY(bool selectExisting READ selectExisting \
+               WRITE setSelectExisting NOTIFY selectExistingChanged)
+    Q_PROPERTY(bool selectMultiple READ selectMultiple \
+               WRITE setSelectMultiple NOTIFY selectMultipleChanged)
+    Q_PROPERTY(bool selectFolder READ selectFolder \
+               WRITE setSelectFolder NOTIFY selectFolderChanged)
+    Q_PROPERTY(QString folder READ folder WRITE setFolder NOTIFY folderChanged)
+    Q_PROPERTY(QStringList nameFilters READ nameFilters \
+               WRITE setNameFilters NOTIFY nameFiltersChanged)
+    Q_PROPERTY(QString filePath READ filePath NOTIFY accepted)
+    Q_PROPERTY(QStringList filePaths READ filePaths NOTIFY accepted)
+
+public:
+    QFileDialogItem();
+    ~QFileDialogItem();
+
+    bool isVisible() const { return _dialog->isVisible(); }
+    QString title() const { return _dialog->windowTitle(); }
+    bool modal() const { return _dialog->isModal(); }
+    bool selectExisting() const { return _selectExisting; }
+    bool selectMultiple() const { return _selectMultiple; }
+    bool selectFolder() const { return _selectFolder; }
+    QString folder() const;
+    QStringList nameFilters() const { return _dialog->nameFilters(); }
+    QString filePath() const;
+    QStringList filePaths() const;
+
+    void setVisible(bool visible);
+    void setTitle(QString title);
+    void setModal(bool modal);
+    void setSelectExisting(bool selectExisting);
+    void setSelectMultiple(bool selectMultiple);
+    void setSelectFolder(bool selectFolder);
+    void setFolder(const QString &folder);
+    void setNameFilters(const QStringList &nameFilters);
+
+public Q_SLOTS:
+    void open();
+    void close();
+
+Q_SIGNALS:
+    void titleChanged();
+    void modalityChanged();
+    void accepted();
+    void rejected();
+    void selectExistingChanged();
+    void selectMultipleChanged();
+    void selectFolderChanged();
+    void folderChanged();
+    void nameFiltersChanged();
+    void visibleChanged();
+
+protected:
+#if QT_VERSION < 0x050000
+    QVariant itemChange(GraphicsItemChange change, const QVariant &value);
+#endif
+
+private:
+    void updateFileMode();
+
+private:
+    QFileDialog *_dialog;
+    bool _isOpen;
+    bool _selectExisting;
+    bool _selectMultiple;
+    bool _selectFolder;
+};
+
+#endif // QFILEDIALOGITEM_H
diff --git a/src/qstyleplugin.cpp b/src/qstyleplugin.cpp
index 4f02832..876d2be 100644
--- a/src/qstyleplugin.cpp
+++ b/src/qstyleplugin.cpp
@@ -51,6 +51,7 @@
 #include "qtsplitterbase.h"
 #include "qquicklinearlayout.h"
 #include "qquickcomponentsprivate.h"
+#include "qfiledialogitem.h"
 #include <qqmlextensionplugin.h>
 
 #include <qqmlengine.h>
@@ -104,6 +105,8 @@ void StylePlugin::registerTypes(const char *uri)
     qmlRegisterUncreatableType<QQuickComponentsLayout>(uri, 0, 2, "Layout",
                                                        QLatin1String("Do not create objects of type Layout"));
 
+    qmlRegisterType<QFileDialogItem>(uri, 0, 2, "FileDialog");
+
     qmlRegisterType<QFileSystemModel>(uri, 0, 2, "FileSystemModel");
     qmlRegisterType<QtSplitterBase>(uri, 0, 2, "Splitter");
     qmlRegisterType<QWindowItem>("QtQuick", 2, 0, "Window"); // override built-in Window
diff --git a/src/src.pro b/src/src.pro
index 1426384..6709458 100644
--- a/src/src.pro
+++ b/src/src.pro
@@ -25,7 +25,8 @@ HEADERS += qtmenu.h \
            qquicklayout.h \
            qquicklinearlayout.h \
            qquickcomponentsprivate.h \
-           qtsplitterbase.h
+           qtsplitterbase.h \
+           qfiledialogitem.h
 
 SOURCES += qtmenu.cpp \
            qtmenubar.cpp \
@@ -41,7 +42,8 @@ SOURCES += qtmenu.cpp \
            qquicklayoutengine.cpp \
            qquicklinearlayout.cpp \
            qquickcomponentsprivate.cpp \
-           qtsplitterbase.cpp
+           qtsplitterbase.cpp \
+           qfiledialogitem.cpp
 
 TARGETPATH = QtDesktop/plugin
 
diff --git a/tests/manual/FileDialogTest.qml b/tests/manual/FileDialogTest.qml
new file mode 100644
index 0000000..cedfe46
--- /dev/null
+++ b/tests/manual/FileDialogTest.qml
@@ -0,0 +1,56 @@
+import QtQuick 2.0
+//import "../components"
+import QtQuick.Window 2.0
+import QtDesktop 0.2
+
+
+Rectangle {
+
+    width: 538
+    height: 360
+
+    ToolBar {
+        id: toolbar
+        width: parent.width
+        height: 40
+        Row {
+            spacing: 2
+            anchors.verticalCenter: parent.verticalCenter
+            ToolButton{
+                text: "Toggle"
+                tooltip: "Toggle file dialog visible"
+                anchors.verticalCenter: parent.verticalCenter
+                onClicked: fileDialogLoad.visible = !fileDialogLoad.visible
+            }
+            ToolButton{
+                text: "Open"
+                tooltip: "Open the file dialog"
+                anchors.verticalCenter: parent.verticalCenter
+                onClicked: fileDialogLoad.open()
+            }
+            ToolButton{
+                text: "Close"
+                tooltip: "Close the file dialog"
+                anchors.verticalCenter: parent.verticalCenter
+                onClicked: fileDialogLoad.close()
+            }
+        }
+    }
+
+    FileDialog {
+        id: fileDialogLoad
+        folder: "/tmp"
+        title: "Choose a file to open"
+        selectMultiple: true
+        nameFilters: [ "Image files (*.png *.jpg)", "All files (*)" ]
+
+        onAccepted: { console.log("Accepted: " + filePaths) }
+    }
+
+    Column {
+        anchors.bottom: parent.bottom
+        Text { text: "File dialog geometry " + fileDialogLoad.x + "," + fileDialogLoad.y + " " + fileDialogLoad.width + "x" + fileDialogLoad.height }
+        Text { text: "File dialog visible? " + fileDialogLoad.visible }
+    }
+}
+