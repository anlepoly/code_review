diff --git a/doc/global/qt-html-templates-offline.qdocconf b/doc/global/qt-html-templates-offline.qdocconf
deleted file mode 100644
index 9f2d28f..0000000
--- a/doc/global/qt-html-templates-offline.qdocconf
+++ /dev/null
@@ -1,32 +0,0 @@
-HTML.nobreadcrumbs      = "true"
-
-HTML.stylesheets = global/style/offline.css
-
-HTML.headerstyles = \
-    "  <link rel=\"stylesheet\" type=\"text/css\" href=\"style/offline.css\" />\n"
-
-HTML.endheader = \
-    "</head>\n" \
-
-HTML.footer = \
-    "<div class=\"footer\">\n" \
-    "    <p>\n" \
-    "      <acronym title=\"Copyright\">&copy;</acronym> 2012 Digia Plc and/or its\n" \
-    "      subsidiaries. Documentation contributions included herein are the copyrights of\n" \
-    "      their respective owners.</p>\n" \
-    "    <br />\n" \
-    "    <p>\n" \
-    "      The documentation provided herein is licensed under the terms of the\n" \
-    "      <a href=\"http://www.gnu.org/licenses/fdl.html\">GNU Free Documentation\n" \
-    "      License version 1.3</a> as published by the Free Software Foundation.</p>\n" \
-    "    <p>\n" \
-    "      Documentation sources may be obtained from <a href=\"http://www.qt-project.org\">\n" \
-    "      www.qt-project.org</a>.</p>\n" \
-    "    <br />\n" \
-    "    <p>\n" \
-    "      Digia, Qt and their respective logos are trademarks of Digia Plc \n" \
-    "      in Finland and/or other countries worldwide. All other trademarks are property\n" \
-    "      of their respective owners. <a title=\"Privacy Policy\"\n" \
-    "      href=\"http://en.gitorious.org/privacy_policy/\">Privacy Policy</a></p>\n" \
-    "</div>\n" \
-
diff --git a/doc/global/qt-module-defaults.qdocconf b/doc/global/qt-module-defaults.qdocconf
deleted file mode 100644
index 4532af5..0000000
--- a/doc/global/qt-module-defaults.qdocconf
+++ /dev/null
@@ -1,97 +0,0 @@
-codeindent              = 1
-
-Cpp.ignoretokens        = \
-                          QDBUS_EXPORT \
-                          QT_ASCII_CAST_WARN \
-                          QT_ASCII_CAST_WARN_CONSTRUCTOR \
-                          QT_BEGIN_HEADER \
-                          QT_BEGIN_INCLUDE_NAMESPACE \
-                          QT_BEGIN_NAMESPACE \
-                          QT_BOOTSTRAPPED \
-                          QT_DESIGNER_STATIC \
-                          QT_END_HEADER \
-                          QT_END_INCLUDE_NAMESPACE \
-                          QT_END_NAMESPACE \
-                          QT_FASTCALL \
-                          Q_AUTOTEST_EXPORT \
-                          Q_COMPAT_EXPORT \
-                          Q_CORE_EXPORT \
-                          Q_CORE_EXPORT_INLINE \
-                          Q_DBUS_EXPORT \
-                          Q_DECL_CONSTEXPR \
-                          Q_DECL_NOEXCEPT \
-                          Q_DECL_NOTHROW \
-                          Q_EXPORT \
-                          Q_EXPORT_PLUGIN \
-                          Q_EXPORT_PLUGIN2 \
-                          Q_GADGET \
-                          Q_GUI_EXPORT \
-                          Q_GUI_EXPORT_INLINE \
-                          Q_INLINE_TEMPLATE \
-                          Q_INVOKABLE \
-                          Q_NETWORK_EXPORT \
-                          Q_OPENGL_EXPORT \
-                          Q_OPENVG_EXPORT \
-                          Q_OUTOFLINE_TEMPLATE \
-                          Q_PRINTSUPPORT_EXPORT \
-                          Q_SQL_EXPORT \
-                          Q_SVG_EXPORT \
-                          Q_SCRIPT_EXPORT \
-                          Q_SCRIPTTOOLS_EXPORT \
-                          Q_WIDGETS_EXPORT \
-                          Q_XML_EXPORT \
-                          Q_XMLPATTERNS_EXPORT
-
-Cpp.ignoredirectives    = \
-                          __attribute__ \
-                          QT_FORWARD_DECLARE_CLASS \
-                          Q_CLASSINFO \
-                          Q_DECLARE_INTERFACE \
-                          Q_DECLARE_METATYPE \
-                          Q_DECLARE_OPERATORS_FOR_FLAGS \
-                          Q_DECLARE_PRIVATE \
-                          Q_DECLARE_PUBLIC \
-                          Q_DECLARE_PRIVATE_D \
-                          Q_DECLARE_SHARED \
-                          Q_DECLARE_TR_FUNCTIONS \
-                          Q_DECLARE_TYPEINFO \
-                          Q_DISABLE_COPY \
-                          Q_DUMMY_COMPARISON_OPERATOR \
-                          Q_ENUMS \
-                          Q_FLAGS \
-                          Q_INTERFACES \
-                          Q_PRIVATE_PROPERTY
-
-defines                 = Q_QDOC \
-                          QT_.*_SUPPORT \
-                          QT_.*_LIB \
-                          QT_COMPAT \
-                          QT_KEYPAD_NAVIGATION \
-                          QT_NO_EGL \
-                          Q_OS_.* \
-                          Q_BYTE_ORDER \
-                          QT_DEPRECATED \
-                          QT_DEPRECATED_* \
-                          Q_NO_USING_KEYWORD \
-                          __cplusplus \
-                          Q_COMPILER_INITIALIZER_LISTS
-
-dita.metadata.default.author      = Qt Project
-dita.metadata.default.permissions = all
-dita.metadata.default.publisher   = Qt Project
-dita.metadata.default.copyryear = 2012
-dita.metadata.default.copyrholder = Digia Plc
-dita.metadata.default.audience = programmer
-
-naturallanguage         = en_US
-outputencoding          = UTF-8
-sourceencoding          = UTF-8
-
-examples.fileextensions = "*.cpp *.h *.js *.xq *.svg *.xml *.ui *.qhp *.qhcp *.qml *.css"
-examples.imageextensions = "*.png *.jpg *.gif"
-
-headers.fileextensions  = "*.ch *.h *.h++ *.hh *.hpp *.hxx"
-sources.fileextensions  = "*.c++ *.cc *.cpp *.cxx *.mm *.qml *.qdoc"
-
-versionsym              = QT_VERSION_STR
-
diff --git a/doc/global/style/offline.css b/doc/global/style/offline.css
deleted file mode 100644
index 1b430ab..0000000
--- a/doc/global/style/offline.css
+++ /dev/null
@@ -1,622 +0,0 @@
-body{
-font: normal 400 14px/1.2 Arial;
-margin-top:85px;
-font-family: Arial, Helvetica;
-color:#313131;
-text-align:justify;
-margin-left:5px;
-margin-right:5px;
-}
-
-img{
--moz-box-shadow: 3px 3px 3px #ccc;
--webkit-box-shadow: 3px 3px 3px #ccc;
-box-shadow: 3px 3px 3px #ccc;
-border:#8E8D8D 2px solid;
-margin-left:0px;
-max-width: 800px;
-height: auto
-}
-
-b{
-font-weight:600;
-}
-
-.content{}
-
-.descr{
-margin-top:35px;
-/*max-width: 75%;*/
-margin-left:5px;
-text-align:justify;
-min-height:700px;
-vertical-align:top;
-}
-
-.name{
-max-width: 75%;
-font-weight:100;
-}
-
-tt{
-text-align:left;}
-
-/*
------------
-links
------------
-*/
-
-a:link{
-color: #2C418D;
-text-decoration: none;
-text-align:left;
-}
-
-a:hover{
-color: #869CD1;
-text-decoration:underline;
-text-align:left;
-}
-
-a:visited{
-color: #869CD1;
-text-decoration: none;
-text-align:left;
-}
-
-a:visited:hover{
-text-decoration:underline;
-text-align:left;
-}
-
-a[href*="http://"], a[href*="ftp://"],a[href*="https://"]
-{
-text-decoration: none;
-background-image:url(../images/ico_out.png);
-background-repeat:no-repeat;
-background-position:left;
-padding-left:20px;
-text-align:left;
-}
-
-.flags{
-text-decoration:none;
-text-height:24px;
-}
-
-/*
--------------------------------
-NOTE styles
--------------------------------
-*/
-.notetitle, .tiptitle, .fastpathtitle{
-font-weight:bold;
-}
-
-.attentiontitle,.cautiontitle,.dangertitle,.importanttitle,.remembertitle,.restrictiontitle{
-font-weight:bold;
-}
-
-.note,.tip,.fastpath{
-background: #F2F2F2 url(../images/ico_note.png);
-background-repeat: no-repeat;
-background-position: top left;
-padding:5px;
-padding-left:40px;
-padding-bottom:10px;
-border:#999 1px dotted;
-color:#666666;
-margin:5px;
-}
-
-.attention,.caution,.danger,.important,.remember,.restriction{
-background: #F2F2F2 url(../images/ico_note_attention.png);
-background-repeat:no-repeat;
-background-position:top left;
-padding:5px;
-padding-left:40px;
-padding-bottom:10px;
-border:#999 1px dotted;
-color:#666666;
-margin:5px;
-}
-
-/*
--------------------------------
-Top navigation
--------------------------------
-*/
-
-.header{
-
-height:1px;
-padding:0px;
-margin:0px;
-}
-
-.qtref{
-display: block;
-position: relative;
-top: -76px;
-height:15px;
-z-index: 1;
-font-size:11px;
-padding-right:10px;
-float:right;
-}
-
-.naviNextPrevious{
-display: block;
-position: relative;
-text-align: right;
-top: -53px;
-float:right;
-height:20px;
-z-index:1;
-padding-right:10px;
-padding-top:2px;
-vertical-align:top;
-margin:0px;
-}
-
-
-.naviNextPrevious > a:first-child{
-background-image:url(../images/btn_prev.png);
-background-repeat:no-repeat;
-background-position:left;
-padding-left:20px;
-height:20px;
-padding-left:20px;
-}
-
-.naviNextPrevious > a:last-child{
-background-image:url(../images/btn_next.png);
-background-repeat:no-repeat;
-background-position:right;
-padding-right:20px;
-height:20px;
-margin-left:30px;
-}
-
-.breadcrumb{
-display: block;
-position: relative;
-top:-20px;
-/*border-top:2px solid #ffffff;*/
-border-bottom: 1px solid #cecece;
-background-color:#F2F2F2;
-z-index:1;
-height:20px;
-padding:0px;
-margin:0px;
-padding-left:10px;
-padding-top:2px;
-margin-left:-5px;
-margin-right:-5px;
-}
-
-.breadcrumb ul{
- margin:0px;
- padding:0px;
-}
-
-.breadcrumb ul li{
-background-color:#F2F2F2;
-list-style-type:none;
-padding:0;
-margin:0;
-height:20px;
-}
-
-.breadcrumb li{
-float:left;
-}
-
-.breadcrumb .first {
-background:url(../images/home.png);
-background-position:left;
-background-repeat:no-repeat;
-padding-left:20px;
-}
-
-
-.breadcrumb li a{
-color:#2C418D;
-display:block;
-text-decoration:none;
-background:url(../images/arrow.png);
-background-repeat:no-repeat;
-background-position:right;
-padding-right:25px;
-padding-left:10px;
-}
-
-.breadcrumb li a:hover{
-color:#909090;
-display:block;
-text-decoration:none;
-background:url(../images/arrow.png);
-background-repeat:no-repeat;
-background-position:right;
-padding-right:20px;
-padding-left:10px;
-}
-
-
-/* table of content
-no display
-*/
-
-/*
------------
-headers
------------
-*/
-
-
-@media screen{
-.title{
-color:#313131;
-font-size: 18px;
-font-weight: normal;
-left: 0;
-padding-bottom: 20px;
-padding-left: 10px;
-padding-top: 20px;
-position: absolute;
-right: 0;
-top: 0;
-background-color:#E6E6E6;
-border-bottom: 1px #CCC solid;
-border-top: 2px #CCC solid;
-font-weight:bold;
-margin-left:0px;
-margin-right:0px;
-}
-}
-
-h1 {
-margin: 0;
-}
-
-h2, p.h2 {
-font: 500 16px/1.2 Arial;
-font-weight:100;
-background-color:#F2F3F4;
-padding:4px;
-margin-bottom:30px;
-margin-top:30px;
-border-top:#E0E0DE 1px solid;
-border-bottom: #E0E0DE 1px solid;
-max-width: 99%;
-}
-
-h3{
-
-font: 500 14px/1.2 Arial;
-font-weight:100;
-text-decoration:underline;
-margin-bottom:30px;
-margin-top:30px;
-}
-
-h3.fn,span.fn{
-border-width: 1px;
-border-style: solid;
-border-color: #E6E6E6;
--moz-border-radius: 7px 7px 7px 7px;
--webkit-border-radius: 7px 7px 7px 7px;
-border-radius: 7px 7px 7px 7px;
-background-color: #F6F6F6;
-word-spacing: 3px;
-padding: 5px 5px;
-text-decoration:none;
-font-weight:bold;
-max-width:75%;
-font-size:14px;
-margin:0px;
-margin-top:30px;
-
-}
-
-.name{
-color:#1A1A1A;
-}
-.type{
-color:#808080;
-}
-
-
-
-@media print {
-.title {
-color:#0066CB;
-font-family:Arial, Helvetica;
-font-size: 32px;
-font-weight: normal;
-left: 0;
-position: absolute;
-right: 0;
-top: 0;
-}
-}
-
-
-/*
------------------
-table styles
------------------
-*/
-.table img {
-border:none;
-margin-left:0px;
--moz-box-shadow:0px 0px 0px #fff;
--webkit-box-shadow: 0px 0px 0px #fff;
-box-shadow: 0px 0px 0px #fff;
-}
-
-/* table with border alternative colours*/
-
- table,pre{
--moz-border-radius: 7px 7px 7px 7px;
--webkit-border-radius: 7px 7px 7px 7px;
- border-radius: 7px 7px 7px 7px;
-background-color: #F6F6F6;
-border: 1px solid #E6E6E6;
-border-collapse: separate;
-font-size: 12px;
-line-height: 1.2;
-margin-bottom: 25px;
-margin-left: 15px;
-font-size: 12px;
-line-height: 1.2;
-margin-bottom: 25px;
-margin-left: 15px;
-}
-
-
-table th{
-text-align:left;
-padding-left:20px;
-}
-
-table td {
-padding: 3px 15px 3px 20px;
-border-bottom:#CCC dotted 1px;
-}
-table p { margin:0px;}
-
-table tr.even {
-background-color: white;
-color: #66666E;
-}
-
-table tr.odd {
-background-color: #F6F6F6;
-color: #66666E;
-}
-
-
-table thead {
-text-align:left;
-padding-left:20px;
-background-color:#e1e0e0;
-border-left:none;
-border-right:none;
-}
-
-table thead th {
-padding-top:5px;
-padding-left:10px;
-padding-bottom:5px;
-border-bottom: 2px solid #D1D1D1;
-padding-right:10px;
-}
-
-
-/* table bodless & white*/
-
-.borderless {
-border-radius: 0px 0px 0px 0px;
-background-color: #fff;
-border: 1px solid #fff;
-}
-
-.borderless tr {
-background-color: #FFF;
-color: #66666E;
-}
-
-.borderless td {
-border:none;
-border-bottom:#fff dotted 1px;
-}
-
-/*
------------
-List
------------
-*/
-
-ul{
-padding-bottom:2px;
-}
-
-li {
-margin-bottom: 10px;
-padding-left: 8px;
-list-style:outside;
-list-style-type:square;
-text-align:left;
-}
-
-
-ol{
-margin:10px;
-padding:0;
-}
-
-ol > li{
-margin-left: 30px;
-padding-left:8px;
-list-style:decimal;
-}
-
-.centerAlign{
-text-align: left;
-}
-
-.cpp{
-display: block;
-margin: 10;
-overflow: hidden;
-overflow-x: hidden;
-overflow-y: hidden;
-padding: 20px 0 20px 0;
-}
-
-.footer{
-margin-top: 50px;
-padding-left:5px;
-margin-bottom: 10px;
-font-size:10px;
-border-top: 1px solid #999;
-padding-top:11px;
-}
-
-.footerNavi{
-width:auto;
-text-align:right;
-margin-top:50px;
-z-index:1;
-}
-
-.memItemLeft{
-padding-right: 3px;
-}
-
-.memItemRight{
-padding: 3px 15px 3px 0;
-}
-
-.qml{
-display: block;
-margin: 10;
-overflow: hidden;
-overflow-x: hidden;
-overflow-y: hidden;
-padding: 20px 0 20px 0;
-}
-
-.qmldefault{
-padding-left: 5px;
-float: right;
-color: red;
-}
-
-.qmlreadonly{
-padding-left: 5px;
-float: right;
-color: #254117;
-}
-
-.rightAlign{
-padding: 3px 5px 3px 10px;
-text-align: right;
-}
-
-/*
------------
-Content table
------------
-*/
-
-@media print{
-.toc {
-float: right;
-padding-bottom: 10px;
-padding-top: 50px;
-width: 100%;
-background-image:url(../images/bgrContent.png);
-background-position:top;
-background-repeat:no-repeat;
-}
-}
-
-@media screen{
-.toc{
-clear:both;
-float:right;
-vertical-align:top;
--moz-border-radius: 7px 7px 7px 7px;
--webkit-border-radius: 7px 7px 7px 7px;
-border-radius: 7px 7px 7px 7px;
- background:#FFF url(../images/bgrContent.png);
-background-position:top;
-background-repeat:repeat-x;
-border: 1px solid #E6E6E6;
-padding-left:5px;
-padding-bottom:10px;
-height: auto;
-width: 200px;
-text-align:left;
-z-index:2;
-margin-left:20px;
-margin-right:20px;
-margin-top:0px;
-padding-top:0px;
-}
-}
-
-.toc h3{
-text-decoration:none;
-}
-
-.toc h3{font: 500 14px/1.2 Arial;
-font-weight:100;
-padding:0px;
-margin:0px;
-padding-top:5px;
-padding-left:5px;
-}
-
-
-.toc ul{
-width:160px;
-padding-left:10px;
-padding-right:5px;
-padding-bottom:10px;
-padding-top:10px;
-}
-
-.toc ul li{
-margin-left:20px;
-list-style-image:url(../images/blu_dot.png);
-list-style:outside;
-
-}
-
-
-.toc ul li a:link{
-color: #2C418D;
-text-decoration: none;
-}
-
-.toc ul li a:hover{
-color: #869CD1;
-text-decoration:underline;
-
-}
-
-.toc ul li a:visited{
-color: #869CD1;
-font-weight: bold;
-}
-
-.level1{
-border:none;}
-
-.clearfix{
-clear:both;}
-
diff --git a/doc/src/activeqt-container.qdoc b/doc/src/activeqt-container.qdoc
deleted file mode 100644
index 0162e26..0000000
--- a/doc/src/activeqt-container.qdoc
+++ /dev/null
@@ -1,205 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/legal
-**
-** This file is part of the documentation of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:FDL$
-** Commercial License Usage
-** Licensees holding valid commercial Qt licenses may use this file in
-** accordance with the commercial license agreement provided with the
-** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
-** use the contact form at http://qt.digia.com/contact-us.
-**
-** GNU Free Documentation License Usage
-** Alternatively, this file may be used under the terms of the GNU Free
-** Documentation License version 1.3 as published by the Free Software
-** Foundation and appearing in the file included in the packaging of
-** this file.  Please review the following information to ensure
-** the GNU Free Documentation License version 1.3 requirements
-** will be met: http://www.gnu.org/copyleft/fdl.html.
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-/*!
-    \page activeqt-container.html
-    \title Using ActiveX controls and COM in Qt
-    \ingroup qt-activex
-
-    \brief A Windows-only extension for accessing ActiveX controls and
-    COM objects.
-
-    The QAxContainer module is part of the \l ActiveQt framework. It
-    provides a library implementing a QWidget subclass, QAxWidget,
-    that acts as a container for ActiveX controls, and a QObject
-    subclass, QAxObject, that can be used to easily access non-visual
-    COM objects. Scripting COM objects embedded using these classes
-    is possible through the QAxScript, QAxScriptManager and
-    QAxScriptEngine classes, and a set of \l{Tools for ActiveQt}{tools}
-    makes it easy to access COM objects programmatically.
-
-    The module consists of six classes
-    \list 1
-    \li QAxBase is an abstract class that provides an API to initialize
-       and access a COM object or ActiveX control.
-    \li QAxObject provides a QObject that wraps a COM object.
-    \li QAxWidget is a QWidget that wraps an ActiveX control.
-    \li QAxScriptManager, QAxScript and QAxScriptEngine provide an
-       interface to the Windows Script Host.
-    \endlist
-
-    Some \l{ActiveQt Examples}{example applications} that use
-    standard ActiveX controls to provide high-level user interface
-    functionality are provided.
-
-    \sa {ActiveQt Framework}
-
-    Topics:
-
-    \tableofcontents
-
-    \section1 Using the Library
-
-    To build Qt applications that can host COM objects and ActiveX controls
-    link the application against the QAxContainer module by adding
-
-    \snippet doc/src/snippets/code/doc_src_qaxcontainer.pro 0
-
-    to your application's \c .pro file.
-
-    \section2 Distributing QAxContainer Applications
-
-    The QAxContainer library is static, so there is no need to redistribute
-    any additional files when using this module. Note however that the
-    ActiveX server binaries you are using might not be installed on the
-    target system, so you have to ship them with your package and register
-    them during the installation process of your application.
-
-    \section1 Instantiating COM Objects
-
-    To instantiate a COM object use the QAxBase::setControl() API, or pass
-    the name of the object directly into the constructor of the QAxBase 
-    subclass you are using.
-
-    The control can be specified in a variety of formats, but the fastest
-    and most powerful format is to use the class ID (CLSID) of the object
-    directly. The class ID can be prepended with information about a remote
-    machine that the object should run on, and can include a license key
-    for licensed controls.
-
-    \section2 Typical Error Messages
-
-    ActiveQt prints error messages to the debug output when it
-    encounters error situations at runtime. Usually you must run 
-    your program in the debugger to see these messages (e.g. in Visual
-    Studio's Debug output).
-
-    \section3 Requested control could not be instantiated
-
-    The control requested in QAxBase::setControl() is not installed
-    on this system, or is not accessible for the current user.
-
-    The control might require administrator rights, or a license key.
-    If the control is licensed, pass the license key to QAxBase::setControl
-    as documented.
-
-    \section1 Accessing the Object API
-
-    ActiveQt provides a Qt API to the COM object, and replaces COM
-    datatypes with Qt equivalents.
-
-    There are four ways to call APIs on the COM object:
-
-    \list
-    \li Generating a C++ namespace
-    \li Call-by-name
-    \li Through a script engine
-    \li Using the native COM interfaces
-    \endlist
-
-    \section2 Generating a C++ Namespace
-
-    To generate a C++ namespace for the type library you want to access,
-    use the \l dumpcpp tool. Run this tool manually on the type library you
-    want to use, or integrate it into the build system by adding the type
-    libraries to the \c TYPELIBS variable in your application's \c .pro file:
-
-    \snippet doc/src/snippets/code/doc_src_qaxcontainer.pro 1
-
-    Note that \l dumpcpp might not be able to expose all APIs in the type
-    library.
-
-    Include the resulting header file in your code to access the
-    object APIs through the generated C++ classes. See the
-    \l{activeqt/qutlook}{Qutlook} example for more information.
-
-    \section2 Call-by-Name
-
-    Use QAxBase::dynamicCall() and QAxBase::querySubObject() as well as
-    the QObject::setProperty() and QObject::property() APIs to call the
-    methods and properties of the COM object through their name. Use the 
-    \l dumpdoc tool to get the documentation of the Qt API for any COM 
-    object and its subobjects; note that not all of the COM object's APIs
-    might be available.
-
-    See the \l{activeqt/webbrowser}{Webbrowser} example for more information.
-
-    \section2 Calling Function Through a Script Engine
-
-    A Qt application can host any ActiveScript engine installed on the system.
-    The script engine can then run script code that accesses the COM objects.
-
-    To instantiate a script engine, use QAxScriptManager::addObject() to
-    register the COM objects you want to access from script, and 
-    QAxScriptManager::load() to load the script code into the engine. Then
-    call the script functions using QAxScriptManager::call() or 
-    QAxScript::call().
-
-    Which APIs of the COM object are available through scripting depends on 
-    the script language used.
-
-    The \l{testcon - An ActiveX Test Container (ActiveQt)}{ActiveX Test Container}
-    demonstrates loading of script files.
-
-    \section2 Calling a Function Using the Native COM Interfaces
-
-    To call functions of the COM object that can not be accessed via any
-    of the above methods it is possible to request the COM interface directly 
-    using QAxBase::queryInterface(). To get a C++ definition of the respective
-    interface classes use the \c #import directive with the type library
-    provided with the control; see your compiler manual for details.
-
-    \section2 Typical Error Messages
-
-    ActiveQt prints error messages to the debug output when it
-    encounters error situations at runtime. Usually you must run 
-    your program in the debugger to see these messages (e.g. in Visual
-    Studio's Debug output).
-
-    \section3 QAxBase::internalInvoke: No such method
-
-    A QAxBase::dynamicCall() failed - the function prototype did not
-    match any function available in the object's API.
-
-    \section3 Error calling IDispatch member: Non-optional parameter missing
-
-    A QAxBase::dynamicCall() failed - the function prototype was correct,
-    but too few parameters were provided.
-
-    \section3 Error calling IDispatch member: Type mismatch in parameter n
-
-    A QAxBase::dynamicCall() failed - the function prototype was correct,
-    but the paramter at index \c n was of the wrong type and could 
-    not be coerced to the correct type.
-
-    \section3 QAxScriptManager::call(): No script provides this function
-
-    You try to call a function that is provided through an engine
-    that doesn't provide introspection (ie. ActivePython or 
-    ActivePerl). You need to call the function directly on the
-    respective QAxScript object.
-*/
diff --git a/doc/src/activeqt-server.qdoc b/doc/src/activeqt-server.qdoc
deleted file mode 100644
index 285a74c..0000000
--- a/doc/src/activeqt-server.qdoc
+++ /dev/null
@@ -1,837 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/legal
-**
-** This file is part of the documentation of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:FDL$
-** Commercial License Usage
-** Licensees holding valid commercial Qt licenses may use this file in
-** accordance with the commercial license agreement provided with the
-** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
-** use the contact form at http://qt.digia.com/contact-us.
-**
-** GNU Free Documentation License Usage
-** Alternatively, this file may be used under the terms of the GNU Free
-** Documentation License version 1.3 as published by the Free Software
-** Foundation and appearing in the file included in the packaging of
-** this file.  Please review the following information to ensure
-** the GNU Free Documentation License version 1.3 requirements
-** will be met: http://www.gnu.org/copyleft/fdl.html.
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-/*!
-    \page activeqt-server.html
-    \title Building ActiveX servers in Qt
-    \ingroup qt-activex
-
-    \brief A Windows-only static library for turning a Qt binary into a COM server.
-
-    The QAxServer module is part of the \l ActiveQt framework. It
-    consists of three classes:
-
-    \list
-    \li QAxFactory defines a factory for the creation of COM objects.
-    \li QAxBindable provides an interface between the Qt widget and the
-       COM object.
-    \li QAxAggregated can be subclassed to implement additional COM interfaces.
-    \endlist
-
-    Some \l{ActiveQt Examples}{example implementations} of ActiveX
-    controls and COM objects are provided.
-
-    \sa {ActiveQt Framework}
-
-    Topics:
-
-    \tableofcontents
-
-    \section1 Using the Library
-
-    To turn a standard Qt application into a COM server using the
-    QAxServer library you must add \c axserver to the QT variable
-    in your \c .pro file.
-
-    An out-of-process executable server is generated from a \c .pro
-    file like this:
-
-    \snippet doc/src/snippets/code/doc_src_qaxserver.pro 0
-
-    To build an in-process server, use a \c .pro file like this:
-    \snippet doc/src/snippets/code/doc_src_qaxserver.pro 1
-
-    The files \c qaxserver.rc and \c qaxserver.def are part of the
-    framework and can be used from their usual location (specify a
-    path in the \c .pro file), or copied into the project directory.
-    You can modify these files as long as it includes any file as the
-    type library entry, ie. you can add version information or specify
-    a different toolbox icon.
-
-    Using the \c axserver module will cause the \c qmake tool to add the
-    required build steps to the build system:
-
-    \list
-    \li Link the binary against \c qaxserver.lib instead of \c qtmain.lib
-    \li Call the \l idc tool to generate an IDL file for the COM server
-    \li Compile the IDL into a type library using the MIDL tool (part of the
-    compiler installation)
-    \li Attach the resulting type library as a binary resource to the server
-    binary (again using the \l idc tool)
-    \li Register the server
-    \endlist
-
-    To skip the post-processing step, also set the \c qaxserver_no_postlink
-    configuration.
-
-    Additionally you can specify a version number using the \c VERSION
-    variable, e.g.
-
-    \snippet doc/src/snippets/code/doc_src_qaxserver.pro 2
-
-    The version number specified will be used as the version of the type
-    library and of the server when registering.
-
-    \section2 Out-of-Process vs. In-Process
-
-    Whether your COM server should run as a stand-alone executable
-    or as a shared library in the client process depends mainly on the
-    type of COM objects you want to provide in the server. 
-
-    An executable server has the advantage of being able to run as a
-    stand-alone application, but adds considerable overhead to the
-    communication between the COM client and the COM object. If the
-    control has a programming error only the server process running
-    the control will crash, and the client application will probably
-    continue to run. Not all COM clients support executable servers.
-
-    An in-process server is usually smaller and has faster startup
-    time. The communication between client and server is done directly
-    through virtual function calls and does not introduce the overhead
-    required for remote procedure calls. However, if the server crashes the
-    client application is likely to crash as well, and not every 
-    functionality is available for in-process servers (i.e. register in
-    the COM's running-object-table).
-
-    Both server types can use Qt either as a shared library, or statically
-    linked into the server binary.
-
-    \section2 Typical Errors During the Post-Build Steps
-
-    For the ActiveQt specific post-processing steps to work the 
-    server has to meet some requirements:
-
-    \list
-    \li All controls exposed can be created with nothing but a QApplication
-    instance being present
-    \li The initial linking of the server includes a temporary type
-    library resource
-    \li All dependencies required to run the server are in the system path
-    (or in the path used by the calling environment; note that Visual 
-    Studio has its own set of environment variables listed in the
-    Tools|Options|Directories dialog).
-    \endlist
-
-    If those requirements are not met one ore more of the following 
-    errors are likely to occur:
-
-    \section3 The Server Executable Crashes
-
-    To generate the IDL the widgets exposed as ActiveX controls need to
-    be instantiated (the constructor is called). At this point, nothing 
-    else but a QApplication object exists. Your widget constructor must 
-    not rely on any other objects to be created, e.g. it should check for
-    null-pointers.
-
-    To debug your server run it with -dumpidl outputfile and check where
-    it crashes.
-
-    Note that no functions of the control are called.
-
-    \section3 The Server Executable Is Not a Valid Win32 Application
-
-    Attaching the type library corrupted the server binary. This is a
-    bug in Windows and happens only with release builds.
-
-    The first linking step has to link a dummy type library into the
-    executable that can later be replaced by idc. Add a resource file
-    with a type library to your project as demonstrated in the examples.
-
-    \section3 "Unable to locate DLL"
-
-    The build system needs to run the server executable to generate
-    the interface definition, and to register the server. If a dynamic
-    link library the server links against is not in the path this
-    might fail (e.g. Visual Studio calls the server using the
-    enivronment settings specified in the "Directories" option). Make
-    sure that all DLLs required by your server are located in a
-    directory that is listed in the path as printed in the error
-    message box.
-
-    \section3 "Cannot open file ..."
-
-    The ActiveX server could not shut down properly when the last
-    client stopped using it. It usually takes about two seconds for
-    the application to terminate, but you might have to use the task
-    manager to kill the process (e.g. when a client doesn't release
-    the controls properly).
-
-    \section1 Implementing Controls
-
-    To implement a COM object with Qt, create a subclass of QObject
-    or any existing QObject subclass. If the class is a subclass of QWidget,
-    the COM object will be an ActiveX control.
-
-    \snippet doc/src/snippets/code/doc_src_qaxserver.cpp 3
-
-    The Q_OBJECT macro is required to provide the meta object information
-    about the widget to the ActiveQt framework.
-
-    \snippet doc/src/snippets/code/doc_src_qaxserver.cpp 4
-
-    Use the Q_CLASSINFO() macro to specify the COM identifiers for the COM
-    object. \c ClassID and \c InterfaceID are required, while \c EventsID is
-    only necessary when your object has signals. To generate these identifiers,
-    use system tools like \c uuidgen or \c guidgen.
-
-    You can specify additional attributes for each of your classes; see 
-    \l{Class Information and Tuning} for details.
-
-    \snippet doc/src/snippets/code/doc_src_qaxserver.cpp 5
-
-    Use the Q_PROPERTY() macro to declare properties for the ActiveX control.
-
-    Declare a standard constructor taking a parent object, and functions, 
-    signals and slots like for any QObject subclass.
-    \footnote
-    If a standard constructor is not present the compiler will issue
-    an error "no overloaded function takes 2 parameters" when using
-    the default factory through the QAXFACTORY_DEFAULT() macro. If you
-    cannot provide a standard constructor you must implement a
-    QAxFactory custom factory and call the constructor you have in
-    your implementation of QAxFactory::create.
-    \endfootnote
-
-    \snippet doc/src/snippets/code/doc_src_qaxserver.cpp 6
-
-    The ActiveQt framework will expose properties and public slots as ActiveX 
-    properties and methods, and signals as ActiveX events, and convert between
-    the Qt data types and the equivalent COM data types.
-
-    \section2 Data Types
-
-    The Qt data types that are supported for properties are:
-
-    \table
-    \header
-    \li Qt data type
-    \li COM property
-    \row
-    \li bool
-    \li VARIANT_BOOL
-    \row
-    \li QString
-    \li BSTR
-    \row
-    \li int
-    \li int
-    \row
-    \li uint
-    \li unsigned int
-    \row
-    \li double
-    \li double
-    \row
-    \li \l qlonglong
-    \li CY
-    \row
-    \li \l qulonglong
-    \li CY
-    \row
-    \li QColor
-    \li OLE_COLOR
-    \row
-    \li QDate
-    \li DATE
-    \row
-    \li QDateTime
-    \li DATE
-    \row
-    \li QTime
-    \li DATE
-    \row
-    \li QFont
-    \li IFontDisp*
-    \row
-    \li QPixmap
-    \li IPictureDisp*
-    \footnote
-    COM cannot marshal IPictureDisp accross process boundaries,
-    so QPixmap properties cannot be called for out-of-process servers. You
-    can however marshal the image data via e.g. temporary files. See the
-    Microsoft 
-    \link http://support.microsoft.com/default.aspx?scid=kb;[LN];Q150034 KB article 
-    Q150034 \endlink for more information.
-    \endfootnote
-    \row
-    \li QVariant
-    \li VARIANT
-    \row
-    \li QVariantList (same as QList\<QVariant\>)
-    \li SAFEARRAY(VARIANT)
-    \row
-    \li QStringList
-    \li SAFEARRAY(BSTR)
-    \row
-    \li QByteArray
-    \li SAFEARRAY(BYTE)
-    \row
-    \li QRect
-    \li User defined type
-    \row
-    \li QSize
-    \li User defined type
-    \row
-    \li QPoint
-    \li User defined type
-    \endtable
-
-    The Qt data types that are supported for parameters in signals and
-    slots are:
-    \table
-    \header
-    \li Qt data type
-    \li COM parameter
-    \row
-    \li bool
-    \li [in] VARIANT_BOOL
-    \row
-    \li bool&
-    \li [in, out] VARIANT_BOOL*
-    \row
-    \li QString, const QString&
-    \li [in] BSTR
-    \row
-    \li QString&
-    \li [in, out] BSTR*
-    \row
-    \li QString&
-    \li [in, out] BSTR*
-    \row
-    \li int
-    \li [in] int
-    \row
-    \li int&
-    \li [in,out] int
-    \row
-    \li uint
-    \li [in] unsigned int
-    \row
-    \li uint&
-    \li [in, out] unsigned int*
-    \row
-    \li double
-    \li [in] double
-    \row
-    \li double&
-    \li [in, out] double*
-    \row
-    \li QColor, const QColor&
-    \li [in] OLE_COLOR
-    \row
-    \li QColor&
-    \li [in, out] OLE_COLOR*
-    \row
-    \li QDate, const QDate&
-    \li [in] DATE
-    \row
-    \li QDate&
-    \li [in, out] DATE*
-    \row
-    \li QDateTime, const QDateTime&
-    \li [in] DATE
-    \row
-    \li QDateTime&
-    \li [in, out] DATE*
-    \row
-    \li QFont, const QFont&
-    \li [in] IFontDisp*
-    \row
-    \li QFont&
-    \li [in, out] IFontDisp**
-    \row
-    \li QPixmap, const QPixmap&
-    \li [in] IPictureDisp*
-    \row
-    \li QPixmap&
-    \li [in, out] IPictureDisp**
-    \row
-    \li QList\<QVariant\>, const QList\<QVariant\>&
-    \li [in] SAFEARRAY(VARIANT)
-    \row
-    \li QList\<QVariant\>&
-    \li [in, out] SAFEARRAY(VARIANT)*
-    \row
-    \li QStringList, const QStringList&
-    \li [in] SAFEARRAY(BSTR)
-    \row
-    \li QStringList&
-    \li [in, out] SAFEARRAY(BSTR)*
-    \row
-    \li QByteArray, const QByteArray&
-    \li [in] SAFEARRAY(BYTE)
-    \row
-    \li QByteArray&
-    \li [in, out] SAFEARRAY(BYTE)*
-    \row
-    \li QObject*
-    \li [in] IDispatch*
-    \row
-    \li QRect&
-    \footnote
-    OLE needs to marshal user defined types by reference (ByRef), and cannot 
-    marshal them by value (ByVal). This is why const-references and object
-    parameters are not supported for QRect, QSize and QPoint.
-    \endfootnote
-    \li [in, out] struct QRect (user defined)
-    \row
-    \li QSize&
-    \li [in, out] struct QSize (user defined)
-    \row
-    \li QPoint&
-    \li [in, out] struct QPoint (user defined)
-    \endtable
-
-    Also supported are exported enums and flags (see Q_ENUMS() and
-    Q_FLAGS()). The in-parameter types are also supported as
-    return values.
-
-    Properties and signals/slots that have parameters using any other
-    data types are ignored by the ActiveQt framework.
-
-    \section2 Sub-Objects
-
-    COM objects can have multiple sub-objects that can represent a sub element
-    of the COM object. A COM object representing a multi-document spread sheet 
-    application can for example provide one sub-object for each spread sheet.
-
-    Any QObject subclass can be used as the type for a sub object in ActiveX, as
-    long as it is known to the QAxFactory. Then the type can be used in properties,
-    or as the return type or paramter of a slot.
-
-    \section2 Property Notification
-
-    To make the properties bindable for the ActiveX client, use multiple
-    inheritance from the QAxBindable class:
-
-    \snippet doc/src/snippets/code/doc_src_qaxserver.cpp 7
-
-    When implementing the property write functions, use the
-    QAxBindable class's requestPropertyChange() and propertyChanged()
-    functions to allow ActiveX clients to bind to the control
-    properties. 
-    \footnote 
-    This is not required, but gives the client more control over 
-    the ActiveX control.
-    \endfootnote
-
-    \section1 Serving Controls
-
-    To make a COM server available to the COM system it must be registered 
-    in the system registry using five unique identifiers. 
-    These identifiers are provided by tools like \c guidgen or \c uuidgen. 
-    The registration information allows COM to localize the binary providing 
-    a requested ActiveX control, marshall remote procedure calls to the 
-    control and read type information about the methods and properties exposed 
-    by the control.
-
-    To create the COM object when the client asks for it the server must export 
-    an implementation of a QAxFactory. The easist way to do this is to use a set
-    of macros:
-
-    \snippet doc/src/snippets/code/doc_src_qaxserver.cpp 8
-
-    This will export \c MyWidget and \c MyWidget2 as COM objects that can be
-    created by COM clients, and will register \c MySubType as a type that can
-    be used in properties and parameters of \c MyWidget and \c MyWidget2.
-
-    The \link QAxFactory QAxFactory class documentation \endlink explains 
-    how to use this macro, and how to implement and use custom factories.
-
-    For out-of-process executable servers you can implement a main()
-    function to instantiate a QApplication object and enter the event
-    loop just like any normal Qt application. By default the
-    application will start as a standard Qt application, but if you
-    pass \c -activex on the command line it will start as an ActiveX
-    server. Use QAxFactory::isServer() to create and run a standard
-    application interface, or to prevent a stand-alone execution:
-
-    \snippet doc/src/snippets/code/doc_src_qaxserver.cpp 9
-
-    This is however not necessary as ActiveQt provides a default implementation
-    of a main function. The default implemenation calls QAxFactory::startServer(),
-    creates a QApplication instance and calls exec().
-
-    To build the ActiveX server executable run \c qmake
-    to generate the makefile, and use your compiler's
-    make tool as for any other Qt application. The make process will
-    also register the controls in the system registry by calling the
-    resulting executable with the \c -regserver command line option.
-
-    If the ActiveX server is an executable, the following command line
-    options are supported:
-    \table
-    \header \li Option \li Result
-    \row \li \c -regserver \li Registers the server in the system registry
-    \row \li \c -unregserver \li Unregisters the server from the system registry
-    \row \li \c -activex \li Starts the application as an ActiveX server
-    \row \li \c{-dumpidl <file> -version x.y} \li Writes the server's IDL to the
-    specified file. The type library will have version x.y
-    \endtable
-
-    In-process servers can be registered using the \c regsvr32 tool available
-    on all Windows systems.
-
-    \section2 Typical Compile-Time Problems
-
-    The compiler/linker errors listed are based on those issued by the 
-    Microsoft Visual C++ 6.0 compiler.
-
-    \section3 "No overloaded function takes 2 parameters"
-
-    When the error occurs in code that uses the QAXFACTORY_DEFAULT()
-    macro, the widget class had no constructor that can be used by the
-    default factory. Either add a standard widget constructor or
-    implement a custom factory that doesn't require one.
-
-    When the error occurs in code that uses the QAXFACTORY_EXPORT()
-    macro, the QAxFactory subclass had no appropriate constructor.
-    Provide a public class constructor like
-
-    \snippet doc/src/snippets/code/doc_src_qaxserver.cpp 10
-
-    for your factory class.
-
-    \section3 "Syntax error: bad suffix on number"
-
-    The unique identifiers have not been passed as strings into the 
-    QAXFACTORY_EXPORT() or QAXFACTORY_DEFAULT() macro.
-
-    \section3 "Unresolved external symbol _ucm_instantiate"
-
-    The server does not export an implementation of a QAxFactory. Use
-    the QAXFACTORY_EXPORT() macro in one of the project's
-    implementation files to instantiate and export a factory, or use
-    the QAXFACTORY_DEFAULT() macro to use the default factory.
-
-    \section3 "_ucm_initialize already defined in ..."
-
-    The server exports more than one implementation of a QAxFactory,
-    or exports the same implementation twice. If you use the default
-    factory, the QAXFACTORY_DEFAULT() macro must only be used once in
-    the project. Use a custom QAxFactory implementation and the
-    QAXFACTORY_EXPORT() macro if the server provides multiple ActiveX
-    controls.
-
-    \section2 Distributing QAxServer Binaries
-
-    ActiveX servers written with Qt can use Qt either as a shared
-    library, or have Qt linked statically into the binary. Both ways
-    will produce rather large packages (either the server binary
-    itself becomes large, or you have to ship the Qt DLL).
-
-    \section3 Installing Stand-Alone Servers
-
-    When your ActiveX server can also run as a stand-alone application,
-    run the server executable with the \c -regserver command line
-    parameter after installing the executable on the target system.
-    After that the controls provided by the server will be available to
-    ActiveX clients.
-
-    \section3 Installing In-Process Servers
-
-    When your ActiveX server is part of an installation package, use the
-    \c regsvr32 tool provided by Microsoft to register the controls on
-    the target system. If this tool is not present, load the DLL into
-    your installer process, resolve the \c DllRegisterServer symbol and
-    call the function:
-
-    \snippet doc/src/snippets/code/doc_src_qaxserver.cpp 11
-
-    \section3 Distributing Servers over the Internet
-
-    If you want to use controls in your server in web-pages you need to
-    make the server available to the browser used to view your page, and
-    you need to specify the location of the server package in your page.
-
-    To specify the location of a server, use the CODEBASE attribute in
-    the OBJECT tag of your web-site. The value can point to the server
-    file itself, to an INF file listing other files the server requires
-    (e.g. the Qt DLL), or a compressed CAB archive.
-
-    INF and CAB files are documented in almost every book available about
-    ActiveX and COM programming as well as in the MSDN library and various
-    other Online resources. The examples include INF files that can be used
-    to build CAB archives:
-
-    \snippet examples/activeqt/simple/simple.inf 0
-
-    The CABARC tool from Microsoft can easily generate CAB archives:
-
-    \snippet doc/src/snippets/code/doc_src_qaxserver.qdoc 12
-
-    The INF files assume a static build of Qt, so no dependencies to other DLLs
-    are listed in the INF files. To distribute an ActiveX server depending on
-    DLLs you must add the dependencies, and provide the library files
-    with the archive.
-
-    \section1 Using the Controls
-
-    To use the ActiveX controls, e.g. to embed them in a web page, use
-    the \c <object> HTML tag. 
-
-    \snippet doc/src/snippets/code/doc_src_qaxserver.qdoc 13
-
-    To initialize the control's properties, use
-
-    \snippet doc/src/snippets/code/doc_src_qaxserver.qdoc 14
-
-    If the web browser supports scripting use JavaScript, VBScript
-    and forms to script the control. The
-    \l{ActiveQt Examples} include demonstration HTML pages for the example
-    controls.
-
-    \section2 Supported and Unsupported ActiveX Clients
-
-    The following is largly based on our own experiements with ActiveX
-    controls and client applications, and is by no means complete.
-
-    \section3 Supported Clients
-
-    These standard applications work with ActiveX controls developed with 
-    ActiveQt. Note that some clients support only in-process controls.
-
-    \list
-    \li Internet Explorer
-    \li Microsoft ActiveX Control Test Container
-    \li Microsoft Visual Studio 6.0
-    \li Microsoft Visual Studio.NET/2003
-    \li Microsoft Visual Basic 6.0
-    \li MFC- and ATL-based containers
-    \li Sybase PowerBuilder
-    \li ActiveQt based containers
-    \endlist
-
-    Microsoft Office applications are supported, but you need to register
-    the controls as "Insertable" objects. Reimplement QAxFactory::registerClass
-    to add this attribute to the COM class, or set the "Insertable" class info
-    for your class to "yes" using the Q_CLASSINFO macro.
-
-    \section3 Unsupported Clients
-
-    We have not managed to make ActiveQt based COM objects work with the
-    following client applications.
-
-    \list
-    \li Borland C++ Builder (Versions 5 and 6)
-    \li Borland Delphi
-    \endlist
-
-    \section2 Typical Runtime Errors
-
-    \section3 The Server Does Not Respond
-
-    If the system is unable to start the server (check with the task
-    manager whether the server runs a process), make sure that no DLL
-    the server depends on is missing from the system path (e.g. the Qt 
-    DLL!). Use a dependency walker to view all dependencies of the server 
-    binary.
-
-    If the server runs (e.g. the task manager lists a process), see
-    the following section for information on debugging your server.
-
-    \section3 The Object Cannot Be Created
-
-    If the server could be built and registered correctly during the build
-    process, but the object cannot be initiliazed e.g. by the OLE/COM Object 
-    Viewer application, make sure that no DLL the server depends on is
-    missing from the system path (e.g. the Qt DLL). Use a dependency walker
-    to view all dependencies of the server binary.
-
-    If the server runs, see the following section for information on
-    debugging your server.
-
-    \section2 Debugging Runtime Errors
-
-    To debug an in-process server in Visual Studio, set the server project 
-    as the active project, and specify a client "executable for debug
-    session" in the project settings (e.g. use the ActiveX Test Container). 
-    You can set breakpoints in your code, and also step into ActiveQt and 
-    Qt code if you installed the debug version.
-
-    To debug an executable server, run the application in a debugger
-    and start with the command line parameter \c -activex. Then start
-    your client and create an instance of your ActiveX control. COM 
-    will use the existing process for the next client trying to create 
-    an ActiveX control.
-
-    \section1 Class Information and Tuning
-
-    To provide attributes for each COM class, use the Q_CLASSINFO macro, which is part of
-    Qt's meta object system.
-
-    \table
-    \header
-    \li Key
-    \li Meaning of value
-    \row
-    \li Version
-    \li The version of the class (1.0 is default)
-    \row
-    \li Description
-    \li A string describing the class.
-    \row
-    \li ClassID
-    \li The class ID.
-       You must reimplement QAxFactory::classID if not specified.
-    \row
-    \li InterfaceID
-    \li The interface ID.
-       You must reimplement QAxFactory::interfaceID if not specified.
-    \row
-    \li EventsID
-    \li The event interface ID.
-       No signals are exposed as COM events if not specified.
-    \row
-    \li DefaultProperty
-    \li The property specified represents the default property of this class.
-       Ie. the default property of a push button would be "text".
-    \row
-    \li DefaultSignal
-    \li The signal specified respresents the default signal of this class.
-       Ie. the default signal of a push button would be "clicked".
-    \row
-    \li LicenseKey
-    \li Object creation requires the specified license key. The key can be
-       empty to require a licensed machine. By default classes are not
-       licensed. Also see the following section.
-    \row
-    \li StockEvents
-    \li Objects expose stock events if value is "yes".
-       See \l QAxFactory::hasStockEvents()
-    \row
-    \li ToSuperClass
-    \li Objects expose functionality of all super-classes up to and
-       including the class name in value.
-       See \l QAxFactory::exposeToSuperClass()
-    \row
-    \li Insertable
-    \li If the value is "yes" the class is registered to be "Insertable"
-       and will be listed in OLE 2 containers (ie. Microsoft Office). This 
-       attribute is not be set by default.
-    \row
-    \li Aggregatable
-    \li If the value is "no" the class does not support aggregation. By
-       default aggregation is supported.
-    \row
-    \li Creatable
-    \li If the value is "no" the class cannot be created by the client,
-       and is only available through the API of another class (ie. the
-       class is a sub-type).
-    \row
-    \li RegisterObject
-    \li If the value is "yes" objects of this class are registered with
-       OLE and accessible from the running object table (ie. clients
-       can connect to an already running instance of this class). This
-       attribute is only supported in out-of-process servers.
-    \row
-    \li MIME
-    \li The object can handle data and files of the format specified in the
-       value. The value has the format mime:extension:description. Multiple 
-       formats are separated by a semicolon.
-    \row
-    \li CoClassAlias
-    \li The classname used in the generated IDL and in the registry. This is
-       esp. useful for C++ classes that live in a namespace - by default, 
-       ActiveQt just removes the "::" to make the IDL compile.
-    \endtable
-
-    Note that both keys and values are case sensitive.
-
-    The following declares version 2.0 of a class that exposes only its
-    own API, and is available in the "Insert Objects" dialog of Microsoft
-    Office applications.
-
-    \snippet doc/src/snippets/code/doc_src_qaxserver.cpp 15
-
-    \section2 Developing Licensed Components
-
-    If you develop components you might want to control who is able to instantiate
-    those components. Since the server binary can be shipped to and registered on 
-    any client machine it is possible for anybody to use those components in his 
-    own software.
-
-    Licensing components can be done using a variety of techniques, e.g. the code
-    creating the control can provide a license key, or the machine on which the
-    control is supposed to run needs to be licensed.
-
-    To mark a Qt class as licensed specify a "LicenseKey" using the
-    Q_CLASSINFO() macro.
-
-    \snippet doc/src/snippets/code/doc_src_qaxserver.cpp 16
-
-    The key is required to be able to create an instance of \c MyLicensedControl
-    on a machine that is not licensed itself. The licensed developer can now 
-    redistributes the server binary with his application, which creates the control 
-    using the value of "LicenseKey", while users of the application cannot create
-    the control without the license key.
-
-    If a single license key for the control is not sufficient (ie. you want 
-    differnet developers to receive different license keys) you can specify an 
-    empty key to indicate that the control requires a license, and reimplement 
-    \l QAxFactory::validateLicenseKey() to verify that a license exists on the 
-    system (ie. through a license file).
-
-    \section2 More Interfaces
-
-    ActiveX controls provided by ActiveQt servers support a minimal set of COM 
-    interfaces to implement the OLE specifications. When the ActiveX class inherits 
-    from the QAxBindable class it can also implement additional COM interfaces.
-
-    Create a new subclass of QAxAggregated and use multiple inheritance
-    to subclass additional COM interface classes. 
-
-    \snippet doc/src/snippets/code/doc_src_qaxserver.cpp 17
-
-    Reimplement the QAxAggregated::queryInterface() function to
-    support the additional COM interfaces.
-
-    \snippet doc/src/snippets/code/doc_src_qaxserver.cpp 18
-
-    Since \c ISomeCOMInterface is a subclass of \c IUnknown you will
-    have to implement the \c QueryInterface(), \c AddRef(), and \c
-    Release() functions.  Use the QAXAGG_IUNKNOWN macro in your
-    class definition to do that. If you implement the \c IUnknown
-    functions manually, delegate the calls to the interface pointer
-    returned by the QAxAggregated::controllingUnknown() function,
-    e.g.
-
-    \snippet doc/src/snippets/code/doc_src_qaxserver.cpp 19
-
-    Do not support the \c IUnknown interface itself in your
-    \l{QAxAggregated::queryInterface()}{queryInterface()}
-    implementation.
-
-    Implement the methods of the COM interfaces, and use QAxAggregated::object()
-    if you need to make calls to the QObject subclass implementing the control.
-
-    In your QAxBindable subclass, implement
-    QAxBindable::createAggregate() to return a new object of the
-    QAxAggregated subclass.
-
-    \snippet doc/src/snippets/code/doc_src_qaxserver.cpp 20
-*/
diff --git a/doc/src/activeqt.qdoc b/doc/src/activeqt.qdoc
deleted file mode 100644
index 60d33b9..0000000
--- a/doc/src/activeqt.qdoc
+++ /dev/null
@@ -1,94 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/legal
-**
-** This file is part of the documentation of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:FDL$
-** Commercial License Usage
-** Licensees holding valid commercial Qt licenses may use this file in
-** accordance with the commercial license agreement provided with the
-** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
-** use the contact form at http://qt.digia.com/contact-us.
-**
-** GNU Free Documentation License Usage
-** Alternatively, this file may be used under the terms of the GNU Free
-** Documentation License version 1.3 as published by the Free Software
-** Foundation and appearing in the file included in the packaging of
-** this file.  Please review the following information to ensure
-** the GNU Free Documentation License version 1.3 requirements
-** will be met: http://www.gnu.org/copyleft/fdl.html.
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-/*!
-    \group activeqt-tools
-    \title Tools for ActiveQt
-    \brief Tools to help integrate Qt applications with ActiveX components.
-
-    These tools provide support for integrating Qt with ActiveX components.
-
-    \generatelist{related}
-
-    \sa {ActiveQt Framework}
-*/
-
-/*!
-    \page activeqt.html
-    \title Qt's ActiveX Framework (ActiveQt)
-    \brief An overview of Qt's ActiveX and COM integration on Windows.
-
-    \ingroup qt-activex
-    \keyword ActiveQt
-    \target ActiveQt Framework
-
-    Qt's ActiveX and COM support allows Qt for Windows developers to:
-
-    \list 1
-    \li Access and use ActiveX controls and COM objects provided by any
-    ActiveX server in their Qt applications.
-    \li Make their Qt applications available as COM servers, with
-    any number of Qt objects and widgets as COM objects and ActiveX 
-    controls.
-    \endlist
-
-    For more information about using ActiveX with Qt, see
-    \l{Building ActiveX servers in Qt}.
-
-    The ActiveQt framework consists of two modules:
-
-    \list
-    \li The \l{Using ActiveX controls and COM in Qt}{QAxContainer}
-       module is a static library implementing QObject and QWidget subclasses,
-       QAxObject and QAxWidget, that act as containers for COM objects and
-       ActiveX controls.
-    \li The \l{Building ActiveX servers in Qt}{QAxServer}
-       module is a static library that implements
-       functionality for in-process and executable COM servers. This
-       module provides the QAxAggregated, QAxBindable and QAxFactory
-       classes.
-    \endlist
-
-    A set of \l{Tools for ActiveQt}{tools} is provided to simplify the
-    developing and building of Qt projects that use ActiveX.
-
-    To build the static libraries, change into the \c activeqt directory 
-    (usually \c QTDIR/src/activeqt), and run \c qmake and your make
-    tool in both the \c container and the \c control subdirectory.
-    The libraries \c qaxcontainer.lib and \c qaxserver.lib will be linked
-    into \c QTDIR/lib.
-
-    If you are using a shared configuration of Qt enter the \c plugin
-    subdirectory and run \c qmake and your make tool to build a
-    plugin that integrates the QAxContainer module into \l{Qt
-    Designer}.
-
-    The ActiveQt modules are part of the \l{Qt Commercial Edition} and
-    the \l{Open Source Versions of Qt}.
-
-    \sa {QAxContainer Module}, {QAxServer Module}
-*/
diff --git a/doc/src/examples/comapp.qdoc b/doc/src/examples/comapp.qdoc
deleted file mode 100644
index 1c26a25..0000000
--- a/doc/src/examples/comapp.qdoc
+++ /dev/null
@@ -1,110 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/legal
-**
-** This file is part of the documentation of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:FDL$
-** Commercial License Usage
-** Licensees holding valid commercial Qt licenses may use this file in
-** accordance with the commercial license agreement provided with the
-** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
-** use the contact form at http://qt.digia.com/contact-us.
-**
-** GNU Free Documentation License Usage
-** Alternatively, this file may be used under the terms of the GNU Free
-** Documentation License version 1.3 as published by the Free Software
-** Foundation and appearing in the file included in the packaging of
-** this file.  Please review the following information to ensure
-** the GNU Free Documentation License version 1.3 requirements
-** will be met: http://www.gnu.org/copyleft/fdl.html.
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-/*!
-    \example activeqt/comapp
-    \title COM App Example (ActiveQt)
-
-    The COM App example shows how to use ActiveQt to develop a Qt
-    application that can be automated via COM. Different QObject
-    based classes are exposed as COM objects that communicate with the
-    GUI of the running Qt application. The APIs of those COM objects
-    has been designed to resemble the APIs of standard COM
-    applications; i.e. those from Microsoft Office.
-
-    \snippet examples/activeqt/comapp/main.cpp 2
-    The first class \c Application represents the application object. It
-    exposes read-only properties \c documents and \c id to get access to the
-    list of documents, and an identifier. A read/write property \c visible
-    controls whether the QTabWidget-based user interface of the application 
-    should be visible, and a slot \c quit() terminates the application.
-
-    The \e RegisterObject attribute is set to make sure that instances of this
-    class are registered in COM's running object table (ROT) - this allows COM
-    clients to connect to an already instantiated COM object.
-
-    \snippet examples/activeqt/comapp/main.cpp 1
-    The \c DocumentList class stores a list of documents. It provides an API
-    to read the number of documents, to access each document by index and to 
-    create a new document. The \c application property returns the root object.
-
-    \snippet examples/activeqt/comapp/main.cpp 0
-
-    The \c Document class finally represents a document in the application.
-    Each document is represented by a page in the application's tab widget, and
-    has a title that is readable and writable through the document's API.
-    The \c application property again returns the root object.
-
-    \snippet examples/activeqt/comapp/main.cpp 3
-    The implementation of the \c Document class creates a new page for the tab
-    widget, and uses the title of that page for the title property. The page 
-    is deleted when the document is deleted.
-
-    \snippet examples/activeqt/comapp/main.cpp 4
-    The \c DocumentList implementation is straightforward.
-
-    \snippet examples/activeqt/comapp/main.cpp 5
-    The \c Application class initializes the user interface in the constructor,
-    and shows and hides it in the implementation of \c setVisible(). The object
-    name (accessible through the \c id property) is set to \c "From QAxFactory" 
-    to indicate that this COM object has been created by COM. Note that there is 
-    no destructor that would delete the QTabWidget - this is instead done in the 
-    \c quit() slot, before calling QApplication::quit() through a single-shot-timer, 
-    which is necessary ensure that the COM call to the slot is complete.
-
-    \snippet examples/activeqt/comapp/main.cpp 6
-    The classes are exported from the server using the QAxFactory macros. Only
-    \c Application objects can be instantiated from outside - the other APIs can
-    only be used after accessing the respective objects throught the \c Application
-    API.
-
-    \snippet examples/activeqt/comapp/main.cpp 7
-    The main() entry point function creates a QApplication, and just enters the
-    event loop if the application has been started by COM. If the application
-    has been started by the user, then the \c Application object is created and 
-    the object name is set to "From Application". Then the COM server is started,
-    and the application object is registered with COM. It is now accessible to
-    COM clients through the client-specific APIs.
-
-    Application exiting is controlled explicitly - if COM started the application, 
-    then the client code has to call quit(); if the user started the application,
-    then the application terminates when the last window has been closed.
-
-    Finally, the user interface is made visible, and the event loop is started.
-
-    A simple Visual Basic application could now access this Qt application. In VB,
-    start a new "Standard Exe" project and add a project reference to the comappLib
-    type library. Create a form with a listbox "DocumentList", a static label 
-    "DocumentsCount" and a command button "NewDocument". Finally, implement the code 
-    for the form like this:
-
-    \snippet doc/src/snippets/code/doc_src_examples_activeqt_comapp.qdoc 0
-
-    To build the example you must first build the QAxServer library.
-    Then run \c qmake and your make tool in
-    \c{examples\activeqt\comapp}.
-*/
diff --git a/doc/src/examples/dotnet.qdoc b/doc/src/examples/dotnet.qdoc
deleted file mode 100644
index 2f522c1..0000000
--- a/doc/src/examples/dotnet.qdoc
+++ /dev/null
@@ -1,335 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/legal
-**
-** This file is part of the documentation of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:FDL$
-** Commercial License Usage
-** Licensees holding valid commercial Qt licenses may use this file in
-** accordance with the commercial license agreement provided with the
-** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
-** use the contact form at http://qt.digia.com/contact-us.
-**
-** GNU Free Documentation License Usage
-** Alternatively, this file may be used under the terms of the GNU Free
-** Documentation License version 1.3 as published by the Free Software
-** Foundation and appearing in the file included in the packaging of
-** this file.  Please review the following information to ensure
-** the GNU Free Documentation License version 1.3 requirements
-** will be met: http://www.gnu.org/copyleft/fdl.html.
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-/*!
-    \page activeqt-dotnet.html
-    \title Dot Net Example (ActiveQt)
-
-    The Dot Net example demonstrates how Qt objects can be used in a
-    .NET environment, and how .NET objects can be used in a Qt
-    environment.
-
-    Contents:
-
-    \tableofcontents
-
-    \section1 Qt vs. .NET
-
-    Qt is a C++ library and is compiled into traditional, native
-    binaries that make full use of the performance provided by the
-    runtime environment.
-
-    One of the key concepts of .NET is the idea of "intermediate language
-    code" - the source code is compiled into a bytecode format, and at
-    runtime, that bytecode is executed in a virtual machine - the \e
-    {Common Language Runtime} (CLR).
-
-    Another key concept is that of \e {managed code}. This is essentially
-    intermediate language code written in such a way that the CLR can take
-    care of the memory management, i.e. the CLR will do automatic garbage
-    collection, so the application code does not need to explicitly free
-    the memory for unused objects.
-
-    The MS compilers for C# and VB.NET will only produce managed
-    code. Such programs cannot directly call normal, native functions
-    or classes. \footnote The .NET framework provides Platform Invocation
-    Services - P/Invoke - that enable managed code to call native C (not
-    C++) functions located in DLLs directly. The resulting application
-    then becomes partially unmanaged.\endfootnote
-
-    The MS C++ compiler for .NET on the other hand, can produce both
-    normal and managed code. To write a C++ class that can be compiled
-    into managed code, the developer must flag the class as managed using
-    the \c __gc keyword, and restrict the code to only use the subset of
-    C++ known as "Managed Extensions for C++", or MC++ for short. The
-    advantage is that MC++ code can freely call and use normal C++
-    functions and classes. And it also works the other way around: normal
-    C++ code can call managed functions and use managed classes (e.g. the
-    entire .NET framework class library), including managed functions and
-    classes implemented in C# or VB.NET. This feature of mixing managed
-    and normal C++ code immensely eases the interoperability with .NET,
-    and is by Microsoft referred to as the "It Just Works" (IJW) feature.
-
-    This document demonstrates two different ways of integrating normal
-    C++ code (that uses Qt) with managed .NET code. First, the manual way
-    is presented, which includes using a thin MC++ wrapper class around
-    the normal Qt/C++ class. Then, the automated way is presented, which
-    utilizes the ActiveQt framework as a generic bridge. The advantage of
-    the first method is that it gives the application developer full
-    control, while the second method requires less coding and relieves the
-    developer of dealing with the conversion between managed and normal
-    data objects.
-
-    The impatient reader, who right away wants to see a QPushButton
-    and a custom Qt widget (\l{activeqt/multiple}{QAxWidget2}) run in
-    a .NET GUI application is referred to the example directory of
-    ActiveQt. It contains the result of this walkthrough using both
-    C# and VB.NET, created with Visual Studio .NET (not 2003).
-    Load \c {examples/dotnet/walkthrough/csharp.csproj},
-    \c {examples/dotnet/walkthrough/vb.vbproj}
-    or \c {examples/dotnet/wrapper/wrapper.sln} into the IDE and run
-    the solution.
-
-    \b{Remark:} You will notice that in the generated code the following line is
-    commented out:
-
-    \snippet doc/src/snippets/code/doc_src_examples_activeqt_dotnet.qdoc 0
-
-    This line is regenerated without comment whenever you change the
-    dialog, in which case you have to comment it out again to be able
-    to run the project. This is a bug in the original version of
-    Visual Studio.NET, and is fixed in the 2003 edition.
-
-    \section1 Walkthrough: .NET interop with MC++ and IJW
-
-    Normal C++ classes and functions can be used from managed .NET code by
-    providing thin wrapper classes written in MC++. The wrapper class will
-    take care of forwarding the calls to the normal C++ functions or
-    methods, and converting parameter data as necessary. Since the wrapper
-    class is a managed class, it can be used without further ado in any
-    managed .NET application, whether written in C#, VB.NET, MC++ or other
-    managed programming language.
-
-    \snippet examples/activeqt/dotnet/wrapper/lib/worker.h 0
-
-    The Qt class has nothing unusual for Qt users, and as even the Qt
-    specialities like \c Q_PROPERTY, \c slots and \c signals are
-    implemented with straight C++ they don't cause any trouble when
-    compiling this class with any C++ compiler.
-
-    \snippet examples/activeqt/dotnet/wrapper/lib/networker.h 0
-
-    The .NET wrapper class uses keywords that are part of MC++ to indicate
-    that the class is managed/garbage collected (\c {__gc}), and that \c
-    StatusString should be accessible as a property in languages that
-    support this concept (\c {__property}).  We also declare an event
-    function \c statusStringChanged(String*) (\c {__event}), the
-    equivalent of the respective signal in the Qt class.
-
-    Before we can start implementing the wrapper class we need a way to
-    convert Qt's datatypes (and potentionally your own) into .NET
-    datatypes, e.g. \c QString objects need to be converted into objects
-    of type \c {String*}.
-
-    When operating on managed objects in normal C++ code, a little extra
-    care must be taken because of the CLR's garbage collection. A normal
-    pointer variable should not \footnote Indeed, the compiler will in
-    many cases disallow it. \endfootnote be used to refer to a managed
-    object. The reason is that the garbage collection can kick in at any
-    time and move the object to another place on the heap, leaving you
-    with an invalid pointer.
-
-    However, two methods are provided that solves this problem easily. The
-    first is to use a \e pinned pointer, i.e. declare the pointer variable
-    with the \c __pin keyword. This guarantees that the object pointed to
-    will not be moved by the garbage collector. It is recommended that
-    this method not be used to keep a references to managed objects for a
-    long time, since it will decrease the efficiency of the garbage
-    collector. The second way is to use the \c gcroot smartpointer
-    template type. This lets you create safe pointers to managed
-    objects. E.g. a variable of type \c gcroot<String> will always point
-    to the String object, even if it has been moved by the garbage
-    collector, and it can be used just like a normal pointer.
-
-    \snippet examples/activeqt/dotnet/wrapper/lib/tools.cpp 0
-    \codeline
-    \snippet examples/activeqt/dotnet/wrapper/lib/tools.cpp 1
-
-    The convertor functions can then be used in the wrapper class
-    implementation to call the functions in the native C++ class.
-
-    \snippet examples/activeqt/dotnet/wrapper/lib/networker.cpp 0
-    \codeline
-    \snippet examples/activeqt/dotnet/wrapper/lib/networker.cpp 1
-
-    The constructor and destructor simply create and destroy the Qt
-    object wrapped using the C++ operators \c new and \c delete.
-
-    \snippet examples/activeqt/dotnet/wrapper/lib/networker.cpp 2
-
-    The netWorker class delegates calls from the .NET code to the native
-    code. Although the transition between those two worlds implies a small
-    performance hit for each function call, and for the type conversion,
-    this should be negligible since we are anyway going to run within the
-    CLR.
-
-    \snippet examples/activeqt/dotnet/wrapper/lib/networker.cpp 3
-
-    The property setter calls the native Qt class before firing the
-    event using the \c __raise keyword.
-
-    This wrapper class can now be used in .NET code, e.g. using C++, C#,
-    Visual Basic or any other programming language available for .NET.
-
-    \snippet examples/activeqt/dotnet/wrapper/main.cs 0
-    \snippet examples/activeqt/dotnet/wrapper/main.cs 1
-    \snippet examples/activeqt/dotnet/wrapper/main.cs 2
-    \snippet examples/activeqt/dotnet/wrapper/main.cs 3
-
-    \section1 Walkthrough: .NET/COM Interop with ActiveQt
-
-    Fortunately .NET provides a generic wrapper for COM objects, the
-    \e {Runtime Callable Wrapper} (RCW). This RCW is a proxy for the
-    COM object and is generated by the CLR when a .NET Framework client
-    activates a COM object. This provides a generic way to reuse COM
-    objects in a .NET Framework project.
-
-    Making a QObject class into a COM object is easily achieved with
-    ActiveQt and demonstrated in the QAxServer examples (e.g., the
-    \l{activeqt/simple}{Simple} example). The walkthrough will use
-    the Qt classes implemented in those examples, so the first thing
-    to do is to make sure that those  examples have been built
-    correctly, e.g. by opening the
-    \l{qaxserver-demo-multiple.html}{demonstration pages} in Internet
-    Explorer to verify that the controls are functional.
-
-    \section2 Starting a Project
-
-    Start Visual Studio.NET, and create a new C# project for writing a
-    Windows application. This will present you with an empty form in
-    Visual Studio's dialog editor. You should see the toolbox, which
-    presents you with a number of available controls and objects in
-    different categories. If you right-click on the toolbox it allows
-    you to add new tabs. We will add the tab "Qt".
-
-    \section2 Importing Qt Widgets
-
-    The category only has a pointer tool by default, and we have to add
-    the Qt objects we want to use in our form. Right-click on the empty
-    space, and select "Customize". This opens a dialog that has two
-    tabs, "COM Components" and ".NET Framework Components". We used
-    ActiveQt to wrap QWidgets into COM objects, so we select the "COM
-    Components" page, and look for the classes we want to use, e.g.
-    "QPushButton" and "QAxWidget2".
-
-    When we select those widgets and close the dialog the two widgets
-    will now be available from the toolbox as grey squares with their
-    name next to it \footnote Icons could be added by modifying the
-    way the controls register themselves. \endfootnote.
-
-    \section2 Using Qt Widgets
-
-    We can now add an instance of QAxWidget2 and a QPushButton to
-    the form. Visual Studio will automatically generate the RCW for the
-    object servers. The QAxWidget2 instance takes most of the upper
-    part of the form, with the QPushButton in the lower right corner.
-
-    In the property editor of Visual Studio we can modify the properties
-    of our controls - QPushButton exposes the \c QWidget API and has many
-    properties, while QAxWidget2 has only the Visual Studio standard
-    properties in addition to its own property "lineWidth" in the
-    "Miscellaneous" category. The objects are named "axQPushButton1" and
-    "axQAxWidget21", and since especially the last name is a bit
-    confusing we rename the objects to "resetButton" and "circleWidget".
-
-    We can also change the Qt properties, e.g. set the "text" property
-    of the \c resetButton to "Reset", and the "lineWidth" property of the
-    \c circleWidget to 5. We can also put those objects into the layout
-    system that Visual Studio's dialog editor provides, e.g. by setting
-    the anchors of the \c circleWidget to "Left, Top, Right, Bottom", and
-    the anchors of the \c resetButton to "Bottom, Right".
-
-    Now we can compile and start the project, which will open a user
-    interface with our two Qt widgets. If we can resize the dialog,
-    the widgets will resize appropriately.
-
-    \section2 Handling Qt Signals
-
-    We will now implement event handlers for the widgets. Select the
-    \c circleWidget and select the "Events" page in the property
-    editor. The widget exposes events because the QAxWidget2 class has
-    the "StockEvents" attribute set in its class definition. We implement
-    the event handler \c circleClicked for the \c ClickEvent to increase
-    the line width by one for every click:
-
-    \snippet examples/activeqt/dotnet/walkthrough/Form1.cs 0
-
-    In general we can implement a default event handler by double
-    clicking on the widget in the form, but the default events for
-    our widgets are right now not defined.
-
-    We will also implement an event handler for the \c clicked signal
-    emitted by QPushButton. Add the event handler \c resetLineWidth to
-    the \c clicked event, and implement the generated function:
-
-    \snippet examples/activeqt/dotnet/walkthrough/Form1.cs 1
-
-    We reset the property to 1, and also call the \c setFocus() slot
-    to simulate the user style on Windows, where a button grabs focus
-    when you click it (so that you can click it again with the spacebar).
-
-    If we now compile and run the project we can click on the circle
-    widget to increase its line width, and press the reset button to
-    set the line width back to 1.
-
-    \section1 Summary
-
-    Using ActiveQt as a universal interoperability bridge between the
-    .NET world and the native world of Qt is very easy, and makes it
-    often  unnecessary to implement a lot of handwritten wrapper classes.
-    Instead, the QAxFactory implementation in the otherwise completely
-    cross-platform Qt project provides the glue that .NET needs to to
-    generate the RCW.
-
-    If this is not sufficient we can implement our own wrapper classes
-    thanks to the C++ extensions provided by Microsoft.
-
-    \section2 Limitations
-
-    All the limitations when using ActiveQt are implied when using this
-    technique to interoperate with .NET, e.g. the datatypes we can use
-    in the APIs can only be those supported by ActiveQt and COM. However,
-    since this includes subclasses of QObject and QWidget we can wrap
-    any of our datatypes into a QObject subclass to make its API
-    available to .NET. This has the positive side effect that the same
-    API is automatically available in
-    \l{http://qt.nokia.com/products/qsa/}{QSA}, the cross platform
-    scripting solution for Qt applications, and to COM clients in general.
-
-    When using the "IJW" method, in principle the only limitation is the
-    time required to write the wrapper classes and data type conversion
-    functions.
-
-    \section2 Performance Considerations
-
-    Every call from CLR bytecode to native code implies a small
-    performance hit, and necessary type conversions introduce an
-    additional delay with every layer that exists between the two
-    frameworks. Consequently every approach to mix .NET and native
-    code should try to minimize the communication necessary between
-    the different worlds.
-
-    As ActiveQt introduces three layers at once - the RCW, COM and finally
-    ActiveQt itself - the performance penalty when using the generic
-    Qt/ActiveQt/COM/RCW/.NET bridge is larger than when using a
-    hand-crafted IJW-wrapper class. The execution speed however is still
-    sufficient for connecting to and modifying interactive elements in a
-    user interface, and as soon as the benefit of using Qt and C++ to
-    implement and compile performance critical algorithms into native code
-    kicks in, ActiveQt becomes a valid choice for making even non-visual
-    parts of your application accessible to .NET.
-*/
diff --git a/doc/src/examples/hierarchy-demo-snippet.qdoc b/doc/src/examples/hierarchy-demo-snippet.qdoc
deleted file mode 100644
index 9e62d2b..0000000
--- a/doc/src/examples/hierarchy-demo-snippet.qdoc
+++ /dev/null
@@ -1,68 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/legal
-**
-** This file is part of the documentation of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:FDL$
-** Commercial License Usage
-** Licensees holding valid commercial Qt licenses may use this file in
-** accordance with the commercial license agreement provided with the
-** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
-** use the contact form at http://qt.digia.com/contact-us.
-**
-** GNU Free Documentation License Usage
-** Alternatively, this file may be used under the terms of the GNU Free
-** Documentation License version 1.3 as published by the Free Software
-** Foundation and appearing in the file included in the packaging of
-** this file.  Please review the following information to ensure
-** the GNU Free Documentation License version 1.3 requirements
-** will be met: http://www.gnu.org/copyleft/fdl.html.
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-//! [script]
-<script language="javascript">
-function createSubWidget( form )
-{
-    ParentWidget.createSubWidget( form.nameEdit.value );
-}
-
-function renameSubWidget( form )
-{
-    var SubWidget = ParentWidget.subWidget( form.nameEdit.value );
-    if ( !SubWidget ) {
-        alert( "No such widget " + form.nameEdit.value + "!" );
-        return;
-    }
-    SubWidget.label = form.labelEdit.value;
-    form.nameEdit.value = SubWidget.label;
-}
-
-function setFont( form )
-{
-    ParentWidget.font = form.fontEdit.value;
-}
-</script>
-
-<p>
-This widget can have many children!
-</p>
-<object ID="ParentWidget" CLASSID="CLSID:d574a747-8016-46db-a07c-b2b4854ee75c"
-CODEBASE="http://qt.nokia.com/demos/hierarchy.cab">
-[Object not available! Did you forget to build and register the server?]
-</object><br />
-<form>
-<input type="edit" ID="nameEdit" value="&lt;enter object name&gt;" />
-<input type="button" value="Create" onClick="createSubWidget(this.form)" />
-<input type="edit" ID="labelEdit" />
-<input type="button" value="Rename" onClick="renameSubWidget(this.form)" />
-<br />
-<input type="edit" ID="fontEdit" value="MS Sans Serif" />
-<input type="button" value = "Set Font" onClick="setFont(this.form)" />
-</form>
-//! [script]
diff --git a/doc/src/examples/hierarchy-demo.qdocinc b/doc/src/examples/hierarchy-demo.qdocinc
deleted file mode 100644
index 86bfd87..0000000
--- a/doc/src/examples/hierarchy-demo.qdocinc
+++ /dev/null
@@ -1,41 +0,0 @@
-\raw HTML
-<script language="javascript">
-function createSubWidget( form )
-{
-    ParentWidget.createSubWidget( form.nameEdit.value );
-}
-
-function renameSubWidget( form )
-{
-    var SubWidget = ParentWidget.subWidget( form.nameEdit.value );
-    if ( !SubWidget ) {
-        alert( "No such widget " + form.nameEdit.value + "!" );
-        return;
-    }
-    SubWidget.label = form.labelEdit.value;
-    form.nameEdit.value = SubWidget.label;
-}
-
-function setFont( form )
-{
-    ParentWidget.font = form.fontEdit.value;
-}
-</script>
-
-<p>
-This widget can have many children!
-</p>
-<object ID="ParentWidget" CLASSID="CLSID:d574a747-8016-46db-a07c-b2b4854ee75c"
-CODEBASE="http://qt.nokia.com/demos/hierarchy.cab">
-[Object not available! Did you forget to build and register the server?]
-</object><br />
-<form>
-<input type="edit" ID="nameEdit" value="&lt;enter object name&gt;" />
-<input type="button" value="Create" onClick="createSubWidget(this.form)" />
-<input type="edit" ID="labelEdit" />
-<input type="button" value="Rename" onClick="renameSubWidget(this.form)" />
-<br />
-<input type="edit" ID="fontEdit" value="MS Sans Serif" />
-<input type="button" value = "Set Font" onClick="setFont(this.form)" />
-</form>
-\endraw
diff --git a/doc/src/examples/hierarchy.qdoc b/doc/src/examples/hierarchy.qdoc
deleted file mode 100644
index ef37856..0000000
--- a/doc/src/examples/hierarchy.qdoc
+++ /dev/null
@@ -1,88 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/legal
-**
-** This file is part of the documentation of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:FDL$
-** Commercial License Usage
-** Licensees holding valid commercial Qt licenses may use this file in
-** accordance with the commercial license agreement provided with the
-** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
-** use the contact form at http://qt.digia.com/contact-us.
-**
-** GNU Free Documentation License Usage
-** Alternatively, this file may be used under the terms of the GNU Free
-** Documentation License version 1.3 as published by the Free Software
-** Foundation and appearing in the file included in the packaging of
-** this file.  Please review the following information to ensure
-** the GNU Free Documentation License version 1.3 requirements
-** will be met: http://www.gnu.org/copyleft/fdl.html.
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-/*!
-    \page qaxserver-demo-hierarchy.html
-    \title Qt Widget Hierarchy
-
-    \input examples/hierarchy-demo.qdocinc
-*/
-
-/*!
-    \example activeqt/hierarchy
-    \title Hierarchy Example (ActiveQt)
-
-    The Hierarchy example is shows how to write an in-process ActiveX
-    control. The control is a QWidget subclass with child widgets
-    that are accessible as sub-types.
-
-    \snippet examples/activeqt/hierarchy/objects.h 0
-    The \c QParentWidget class provides slots to create a widget
-    with a name, and to return a pointer to a named widget. The class
-    declaration uses \c Q_CLASSINFO() to provide the COM identifiers for
-    this class.
-
-    \snippet examples/activeqt/hierarchy/objects.cpp 0
-    The constructor of QParentWidget creates a vertical box layout.
-    New child widgets are automatically added to the layout.
-
-    \snippet examples/activeqt/hierarchy/objects.cpp 1
-    The \c createSubWidget slot creates a new \c QSubWidget with
-    the name provided in the parameter, and sets the label to that
-    name. The widget is also shown explicitly.
-
-    \snippet examples/activeqt/hierarchy/objects.cpp 2
-    The \c subWidget slot uses the \c QObject::child() function and
-    returns the first child of type \c QSubWidget that has the requested
-    name.
-
-     \snippet examples/activeqt/hierarchy/objects.h 1
-    The \c QSubWidget class has a single string-property \c label,
-    and implements the paintEvent to draw the label. The class uses
-    again \c Q_CLASSINFO to provide the COM identifiers, and also sets
-    the \e ToSuperClass attribute to \e QSubWidget, to ensure that only
-    no slots of any superclasses (i.e. QWidget) are exposed.
-
-    \snippet examples/activeqt/hierarchy/objects.cpp 3
-    \snippet examples/activeqt/hierarchy/objects.cpp 4
-    The implementation of the QSubWidget class is self-explanatory.
-
-    \snippet examples/activeqt/hierarchy/main.cpp 0
-    The classes are then exported using a QAxFactory. \c QParentWidget is
-    exported as a full class (which can be created ), while \c QSubWidget is
-    only exported as a type, which can only be created indirectly through
-    APIs of \c QParentWidget.
-
-    To build the example you must first build the QAxServer library.
-    Then run qmake and your make tool in \c examples/activeqt/hierarchy.
-
-    The \l{qaxserver-demo-hierarchy.html}{demonstration} requires
-    your WebBrowser to support ActiveX controls, and scripting to be
-    enabled.
-
-    \snippet examples/hierarchy-demo-snippet.qdoc script
-*/
diff --git a/doc/src/examples/menus.qdoc b/doc/src/examples/menus.qdoc
deleted file mode 100644
index e1d6c84..0000000
--- a/doc/src/examples/menus.qdoc
+++ /dev/null
@@ -1,60 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/legal
-**
-** This file is part of the documentation of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:FDL$
-** Commercial License Usage
-** Licensees holding valid commercial Qt licenses may use this file in
-** accordance with the commercial license agreement provided with the
-** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
-** use the contact form at http://qt.digia.com/contact-us.
-**
-** GNU Free Documentation License Usage
-** Alternatively, this file may be used under the terms of the GNU Free
-** Documentation License version 1.3 as published by the Free Software
-** Foundation and appearing in the file included in the packaging of
-** this file.  Please review the following information to ensure
-** the GNU Free Documentation License version 1.3 requirements
-** will be met: http://www.gnu.org/copyleft/fdl.html.
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-/*!
-    \page qaxserver-demo-menus.html
-    \preliminary
-
-    \title Menubar Merging
-
-    This example is not full functional at the moment.
-
-    \raw HTML
-    <object ID="QMenus" CLASSID="CLSID:4dc3f340-a6f7-44e4-a79b-3e9217695fbd"
-    CODEBASE="http://qt.nokia.com/demos/menusax.cab">
-    [Object not available! Did you forget to build and register the server?]
-    </object>
-    \endraw
-*/
-
-/*!
-    \example activeqt/menus
-    \title Menus Example (ActiveQt)
-
-    The Menus example demonstrates the use of QMenuBar and QStatusBar
-    in a QMainWindow to implement an in-place active control.
-
-    To build the example you must first build the QAxServer library.
-    Then run \c qmake and your make tool in \c
-    examples/activeqt/menus.
-
-    The \l{qaxserver-demo-menus.html}{demonstration} requires your
-    WebBrowser to support ActiveX controls, and scripting to be
-    enabled.
-
-    \snippet doc/src/snippets/code/doc_src_examples_activeqt_menus.qdoc 0
-*/
diff --git a/doc/src/examples/multiple-demo.qdocinc b/doc/src/examples/multiple-demo.qdocinc
deleted file mode 100644
index 339fc20..0000000
--- a/doc/src/examples/multiple-demo.qdocinc
+++ /dev/null
@@ -1,39 +0,0 @@
-\raw HTML
-//! [0]
-<script language="javascript">
-function setColor( form )
-{
-    Ax1.fillColor = form.colorEdit.value;
-}
-
-function setWidth( form )
-{
-    Ax2.lineWidth = form.widthEdit.value;
-}
-</script>
-
-<p />
-This is one QWidget subclass:<br />
-<object ID="Ax1" CLASSID="CLSID:1D9928BD-4453-4bdd-903D-E525ED17FDE5"
-CODEBASE="http://qt.nokia.com/demos/multipleax.cab">
-[Object not available! Did you forget to build and register the server?]
-</object><br />
-<form>
-Fill Color: <input type="edit" ID="colorEdit" value = "red" />
-<input type="button" value = "Set" onClick="setColor(this.form)" />
-<input type="button" value = "Hide" onClick="Ax1.hide()" />
-<input type="button" value = "Show" onClick="Ax1.show()" />
-</form>
-
-<p />
-This is another QWidget subclass:<br />
-<object ID="Ax2" CLASSID="CLSID:58139D56-6BE9-4b17-937D-1B1EDEDD5B71"
-CODEBASE="http://qt.nokia.com/demos/multipleax.cab">
-[Object not available! Did you forget to build and register the server?]
-</object><br />
-<form>
-Line width: <input type="edit" ID="widthEdit" value = "1" />
-<input type="button" value = "Set" onClick="setWidth(this.form)" />
-</form>
-//! [0]
-\endraw
diff --git a/doc/src/examples/multiple.qdoc b/doc/src/examples/multiple.qdoc
deleted file mode 100644
index 99750c5..0000000
--- a/doc/src/examples/multiple.qdoc
+++ /dev/null
@@ -1,70 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/legal
-**
-** This file is part of the documentation of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:FDL$
-** Commercial License Usage
-** Licensees holding valid commercial Qt licenses may use this file in
-** accordance with the commercial license agreement provided with the
-** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
-** use the contact form at http://qt.digia.com/contact-us.
-**
-** GNU Free Documentation License Usage
-** Alternatively, this file may be used under the terms of the GNU Free
-** Documentation License version 1.3 as published by the Free Software
-** Foundation and appearing in the file included in the packaging of
-** this file.  Please review the following information to ensure
-** the GNU Free Documentation License version 1.3 requirements
-** will be met: http://www.gnu.org/copyleft/fdl.html.
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-/*!
-    \page qaxserver-demo-multiple.html
-    \title Two Simple Qt Widgets
-
-    \input examples/multiple-demo.qdocinc
-*/
-
-/*!
-    \example activeqt/multiple
-    \title Multiple Example (ActiveQt)
-
-    The Multiple example demonstrates the implementation of a
-    QAxFactory to provide multiple ActiveX controls in a single in
-    process ActiveX server using the \c QAXFACTORY_EXPORT() macro.
-    The ActiveX controls in this example are simple QWidget
-    subclasses that reimplement QWidget::paintEvent().
-
-    \snippet examples/activeqt/multiple/ax1.h 0
-
-    The first control draws a filled rectangle. The fill color is exposed
-    as a property. \c Q_CLASSINFO() is used to specify the COM identifiers.
-
-    \snippet examples/activeqt/multiple/ax2.h 0
-
-    The second control draws a circle. The linewith is exposed as a property.
-    \c Q_CLASSINFO() is used to specify the COM identifiers, and to set the
-    attributes \e ToSuperClass and \e StockEvents to expose only the API of
-    the class itself, and to add COM stock events to the ActiveX control.
-
-    \snippet examples/activeqt/multiple/main.cpp 0
-
-    The classes are exported from the server using the QAxFactory macros.
-
-    To build the example you must first build the QAxServer library.
-    Then run \c qmake and your make tool in  \c
-    examples/activeqt/multiple.
-
-    The \l{qaxserver-demo-multiple.html}{demonstration} requires your
-    WebBrowser to support ActiveX controls, and scripting to be
-    enabled.
-
-    \snippet examples/multiple-demo.qdocinc 0
-*/
diff --git a/doc/src/examples/opengl-demo.qdocinc b/doc/src/examples/opengl-demo.qdocinc
deleted file mode 100644
index ccc1452..0000000
--- a/doc/src/examples/opengl-demo.qdocinc
+++ /dev/null
@@ -1,27 +0,0 @@
-\raw HTML
-//! [0]
-<SCRIPT LANGUAGE="JavaScript">
-function setRot( form )
-{
-    GLBox.setXRotation( form.XEdit.value );
-    GLBox.setYRotation( form.YEdit.value );
-    GLBox.setZRotation( form.ZEdit.value );
-}
-</SCRIPT>
-
-<p />
-An OpenGL scene:<br />
-<object ID="GLBox" CLASSID="CLSID:5fd9c22e-ed45-43fa-ba13-1530bb6b03e0"
-CODEBASE="http://qt.nokia.com/demos/openglax.cab">
-[Object not available! Did you forget to build and register the server?]
-</object><br />
-
-<form>
-Rotate the scene:<br />
-X:<input type="edit" ID="XEdit" value="0" /><br />
-Y:<input type="edit" name="YEdit" value="0" /><br />
-Z:<input type="edit" name="ZEdit" value="0" /><br />
-<input type="button" value="Set" onClick="setRot(this.form)" />
-</form>
-//! [0]
-\endraw
diff --git a/doc/src/examples/opengl.qdoc b/doc/src/examples/opengl.qdoc
deleted file mode 100644
index 7d3c68b..0000000
--- a/doc/src/examples/opengl.qdoc
+++ /dev/null
@@ -1,131 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/legal
-**
-** This file is part of the documentation of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:FDL$
-** Commercial License Usage
-** Licensees holding valid commercial Qt licenses may use this file in
-** accordance with the commercial license agreement provided with the
-** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
-** use the contact form at http://qt.digia.com/contact-us.
-**
-** GNU Free Documentation License Usage
-** Alternatively, this file may be used under the terms of the GNU Free
-** Documentation License version 1.3 as published by the Free Software
-** Foundation and appearing in the file included in the packaging of
-** this file.  Please review the following information to ensure
-** the GNU Free Documentation License version 1.3 requirements
-** will be met: http://www.gnu.org/copyleft/fdl.html.
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-/*! 
-    \page qaxserver-demo-opengl.html
-
-    \title OpenGL in an HTML page
-
-    \raw HTML
-    <SCRIPT LANGUAGE="JavaScript">
-    function setRot( form )
-    {
-        GLBox.setXRotation( form.XEdit.value );
-        GLBox.setYRotation( form.YEdit.value );
-        GLBox.setZRotation( form.ZEdit.value );
-    }
-    </SCRIPT>
-
-    <p />
-    An OpenGL scene:<br />
-    <object ID="GLBox" CLASSID="CLSID:5fd9c22e-ed45-43fa-ba13-1530bb6b03e0"
-    CODEBASE="http://qt.nokia.com/demos/openglax.cab">
-    [Object not available! Did you forget to build and register the server?]
-    </object><br />
-
-    <form>
-    Rotate the scene:<br />
-    X:<input type="edit" ID="XEdit" value="0" /><br />
-    Y:<input type="edit" name="YEdit" value="0" /><br />
-    Z:<input type="edit" name="ZEdit" value="0" /><br />
-    <input type="button" value="Set" onClick="setRot(this.form)" />
-    </form>
-    \endraw
-*/
-
-/*!
-    \example activeqt/opengl
-    \title OpenGL Example (ActiveQt)
-
-    The OpenGL example demonstrates the use of the default factory
-    and  QAxFactory::isServer(), and the implementation of an
-    additional COM interface using QAxBindable and QAxAggregated.
-    The server executable  can run both as an ActiveX server and as a
-    stand-alone application.
-
-    The ActiveX control in this example uses the QGlWidget class in
-    Qt to render an OpenGL scene in an ActiveX. The control exposes a few
-    methods to change the scene.
-
-    The application uses the default factory as provided by the 
-    QAXFACTORY_DEFAULT macro to expose the \c GLBox widget as an ActiveX 
-    control.
-    \snippet examples/activeqt/opengl/main.cpp 0
-    The implementation of \c main initializes the QApplication object,
-    and uses \c QAxFactory::isServer() to determine whether or not it is
-    appropriate to create and show the application interface.
-    \snippet examples/activeqt/opengl/main.cpp 1
-    \snippet examples/activeqt/opengl/main.cpp 2
-    \snippet examples/activeqt/opengl/main.cpp 3
-
-    The \c GLBox class inherits from both the \l QGLWidget class to be able
-    to render OpenGL, and from \l QAxBindable.
-    \snippet examples/activeqt/opengl/glbox.h 0
-    The class reimplements the \l QAxBindable::createAggregate() function from QAxBindable
-    to return the pointer to a \l QAxAggregated object.
-    \snippet examples/activeqt/opengl/glbox.h 1
-    The rest of the class declaration and the implementation of the OpenGL
-    rendering is identical to the original "box" example.
-
-    The implementation file of the \c GLBox class includes the \c objsafe.h
-    system header, in which the \c IObjectSafety COM interface is defined.
-    \snippet examples/activeqt/opengl/glbox.cpp 0
-    A class \c ObjectSafetyImpl is declared using multiple inheritance
-    to subclass the QAxAggregated class, and to implement the IObjectSafety
-    interface.
-    \snippet examples/activeqt/opengl/glbox.cpp 1
-    The class declares a default constructor, and implements the queryInterface
-    function to support the IObjectSafety interface.
-    \snippet examples/activeqt/opengl/glbox.cpp 2
-    Since every COM interface inherits \c IUnknown the \c QAXAGG_IUNKNOWN macro
-    is used to provide the default implementation of the \c IUnknown interface.
-    The macro is defined to delegate all calls to \c QueryInterface, \c AddRef
-    and \c Release to the interface returned by the controllingUnknown() function.
-    \snippet examples/activeqt/opengl/glbox.cpp 3
-    The implementation of the \c IObjectSafety interface provides the caller
-    with information about supported and enabled safety options, and returns 
-    \c S_OK for all calls to indicate that the ActiveX control is safe.
-    \snippet examples/activeqt/opengl/glbox.cpp 4
-    The implementation of the \c createAggregate() function just returns a new
-    \c ObjectSafetyImpl object.
-    \snippet examples/activeqt/opengl/glbox.cpp 5
-
-    To build the example you must first build the QAxServer library.
-    Then run \c qmake and your make tool in  \c
-    examples/activeqt/wrapper.
-
-    The \l{qaxserver-demo-opengl.html}{demonstration} requires your
-    WebBrowser to support ActiveX controls, and scripting to be
-    enabled.
-
-    In contrast to the other QAxServer examples Internet Explorer will not
-    open a dialog box to ask the user whether or not the scripting of the GLBox
-    control should be allowed (the exact browser behaviour depends on the security 
-    settings in the Internet Options dialog).
-
-    \snippet doc/src/examples/opengl-demo.qdocinc 0
-*/
diff --git a/doc/src/examples/qutlook.qdoc b/doc/src/examples/qutlook.qdoc
deleted file mode 100644
index 12774b4..0000000
--- a/doc/src/examples/qutlook.qdoc
+++ /dev/null
@@ -1,102 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/legal
-**
-** This file is part of the documentation of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:FDL$
-** Commercial License Usage
-** Licensees holding valid commercial Qt licenses may use this file in
-** accordance with the commercial license agreement provided with the
-** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
-** use the contact form at http://qt.digia.com/contact-us.
-**
-** GNU Free Documentation License Usage
-** Alternatively, this file may be used under the terms of the GNU Free
-** Documentation License version 1.3 as published by the Free Software
-** Foundation and appearing in the file included in the packaging of
-** this file.  Please review the following information to ensure
-** the GNU Free Documentation License version 1.3 requirements
-** will be met: http://www.gnu.org/copyleft/fdl.html.
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-/*! 
-    \example activeqt/qutlook
-    \title Qutlook Example (ActiveQt)
-
-    The Qutlook example demonstrates the use of ActiveQt to automate
-    Outlook. The example makes use of the \l dumpcpp tool to generate
-    a C++ namespace for the type library describing the Outlook
-    Object Model.
-
-    The project file for the example looks like this:
-
-    \snippet examples/activeqt/qutlook/qutlook.pro 1
-    \snippet examples/activeqt/qutlook/qutlook.pro 2
-
-    The project file uses the \c dumpcpp tool to add an MS Outlook type library to the project.
-    If this fails, then the generated makefile will just print an error message, otherwise
-    the build step will now run the \e dumpcpp tool on the type library, and 
-    generate a header and a cpp file (in this case, \c msoutl.h and \c msoutl.cpp) that 
-    declares and implement an easy to use API to the Outlook objects.
-
-    \snippet examples/activeqt/qutlook/addressview.h 0
-
-    The AddressView class is a QWidget subclass for the user interface. The QTreeView widget
-    will display the contents of Outlook's Contact folder as provided by the \c{model}.
-
-    \snippet examples/activeqt/qutlook/addressview.cpp 0
-    The AddressBookModel class is a QAbstractListModel subclass that communicates directly with 
-    Outlook, using a QHash for caching.
-
-    \snippet examples/activeqt/qutlook/addressview.cpp 1
-    The constructor initializes Outlook. The various signals Outlook provides to notify about 
-    contents changes are connected to the \c updateOutlook() slot.
-
-    \snippet examples/activeqt/qutlook/addressview.cpp 2
-    The destructor logs off from the session.
-
-    \snippet examples/activeqt/qutlook/addressview.cpp 3
-    The \c rowCount() implementation returns the number of entries as reported by Outlook. \c columnCount
-    and \c headerData are implemented to show four columns in the tree view.
-
-    \snippet examples/activeqt/qutlook/addressview.cpp 4
-    The \c headerData() implementation returns hardcoded strings.
-
-    \snippet examples/activeqt/qutlook/addressview.cpp 5
-    The \c data() implementation is the core of the model. If the requested data is in the cache the
-    cached value is used, otherwise the data is acquired from Outlook.
-
-    \snippet examples/activeqt/qutlook/addressview.cpp 6
-    The \c changeItem() slot is called when the user changes the current entry using the user interface.
-    The Outlook item is accessed using the Outlook API, and is modified using the property setters.
-    Finally, the item is saved to Outlook, and removed from the cache. Note that the model does not
-    signal the view of the data change, as Outlook will emit a signal on its own.
-
-    \snippet examples/activeqt/qutlook/addressview.cpp 7
-    The \c addItem() slot calls the CreateItem method of Outlook to create a new contact item,
-    sets the properties of the new item to the values entered by the user and saves the item.
-
-    \snippet examples/activeqt/qutlook/addressview.cpp 8
-    The \c update() slot clears the cache, and emits the reset() signal to notify the view about the
-    data change requiring a redraw of the contents.
-
-    \snippet examples/activeqt/qutlook/addressview.cpp 9
-    \snippet examples/activeqt/qutlook/addressview.cpp 10
-    The rest of the file implements the user interface using only Qt APIs, i.e. without communicating
-    with Outlook directly.
-
-    \snippet examples/activeqt/qutlook/main.cpp 0
-
-    The \c main() entry point function finally instantiates the user interface and enters the
-    event loop.
-
-    To build the example you must first build the QAxContainer
-    library. Then run your make tool in \c examples/activeqt/qutlook
-    and run the resulting \c qutlook.exe.
-*/
diff --git a/doc/src/examples/simple-demo.qdocinc b/doc/src/examples/simple-demo.qdocinc
deleted file mode 100644
index 5eee8bc..0000000
--- a/doc/src/examples/simple-demo.qdocinc
+++ /dev/null
@@ -1,45 +0,0 @@
-\raw HTML
-//! [0]
-<object ID="QSimpleAX" CLASSID="CLSID:DF16845C-92CD-4AAB-A982-EB9840E74669"
-CODEBASE="http://qt.nokia.com/demos/simpleax.cab">
-    <PARAM NAME="text" VALUE="A simple control" />
-    <PARAM NAME="value" VALUE="1" />
-[Object not available! Did you forget to build and register the server?]
-</object>
-//! [0] //! [1]
-
-<FORM>
-    <INPUT TYPE="BUTTON" VALUE="About..." onClick="QSimpleAX.about()" />
-</FORM>
-//! [1]
-
-//! [2]
-<object ID="Calendar" CLASSID="CLSID:8E27C92B-1264-101C-8A2F-040224009C02">
-[Standard Calendar control not available!]
-    <PARAM NAME="day" VALUE="1" />
-</object>
-//! [2]
-
-<FORM>
-    <INPUT TYPE="BUTTON" VALUE="Today" onClick="Calendar.Today()" />
-</FORM>
-
-//! [3]
-<SCRIPT LANGUAGE="VBScript">
-Sub Calendar_Click()
-    MsgBox( "Calendar Clicked!" )
-End Sub
-
-Sub QSimpleAX_TextChanged( str )
-    document.title = str
-End Sub
-</SCRIPT>
-
-<SCRIPT LANGUAGE="JavaScript">
-function QSimpleAX::ValueChanged( Newvalue )
-{
-    Calendar.Day = Newvalue;
-}
-</SCRIPT>
-//! [3]
-\endraw
diff --git a/doc/src/examples/simple.qdoc b/doc/src/examples/simple.qdoc
deleted file mode 100644
index e92152b..0000000
--- a/doc/src/examples/simple.qdoc
+++ /dev/null
@@ -1,116 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/legal
-**
-** This file is part of the documentation of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:FDL$
-** Commercial License Usage
-** Licensees holding valid commercial Qt licenses may use this file in
-** accordance with the commercial license agreement provided with the
-** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
-** use the contact form at http://qt.digia.com/contact-us.
-**
-** GNU Free Documentation License Usage
-** Alternatively, this file may be used under the terms of the GNU Free
-** Documentation License version 1.3 as published by the Free Software
-** Foundation and appearing in the file included in the packaging of
-** this file.  Please review the following information to ensure
-** the GNU Free Documentation License version 1.3 requirements
-** will be met: http://www.gnu.org/copyleft/fdl.html.
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-/*! 
-    \page qaxserver-demo-simple.html
-
-    \title A standard ActiveX and the "simple" ActiveQt widget
-
-    \raw HTML
-    <object ID="QSimpleAX" CLASSID="CLSID:DF16845C-92CD-4AAB-A982-EB9840E74669"
-    CODEBASE="http://qt.nokia.com/demos/simpleax.cab">
-        <PARAM NAME="text" VALUE="A simple control" />
-        <PARAM NAME="value" VALUE="1" />
-    [Object not available! Did you forget to build and register the server?]
-    </object>
-
-    <FORM>
-        <INPUT TYPE="BUTTON" VALUE="About..." onClick="QSimpleAX.about()" />
-    </FORM>
-
-    <object ID="Calendar" CLASSID="CLSID:8E27C92B-1264-101C-8A2F-040224009C02">
-    [Standard Calendar control not available!]
-        <PARAM NAME="day" VALUE="1" />
-    </object>
-
-    <FORM>
-        <INPUT TYPE="BUTTON" VALUE="Today" onClick="Calendar.Today()" />
-    </FORM>
-
-    <SCRIPT LANGUAGE="VBScript">
-    Sub Calendar_Click()
-        MsgBox( "Calendar Clicked!" )
-    End Sub
-
-    Sub QSimpleAX_TextChanged( str )
-        document.title = str
-    End Sub
-    </SCRIPT>
-
-    <SCRIPT LANGUAGE="JavaScript">
-    function QSimpleAX::ValueChanged( Newvalue )
-    {
-        Calendar.Day = Newvalue;
-    }
-    </SCRIPT>
-    \endraw
-*/
-
-/*!
-    \example activeqt/simple
-    \title Simple Example (ActiveQt)
-
-    The Simple example demonstrates the use of
-    QAxBindable::requestPropertyChange() and
-    QAxBindable::propertyChanged(), and the use of the default
-    QAxFactory through the \c QAXFACTORY_DEFAULT() macro.
-    
-    The ActiveX control in this example is a laid out QWidget with a
-    QSlider, a QLCDNumber and a QLineEdit. It provides a
-    signal/slot/property interface to change the values of the slider
-    and the line edit, and to get notified of any property changes.
-
-
-    The Qt implementation of the ActiveX for this example is
-    \snippet examples/activeqt/simple/main.cpp 0
-
-    The control is exported using the default QAxFactory
-    \snippet examples/activeqt/simple/main.cpp 1
-
-    To build the example you must first build the QAxServer library.
-    Then run qmake and your make tool in \c examples/activeqt/simple.
-
-    The \l{qaxserver-demo-simple.html}{demonstration} requires your
-    WebBrowser to support ActiveX controls, and scripting to be enabled.
-
-    The simple ActiveX control is embedded using the \c <object> tag.
-
-    \snippet doc/src/examples/simple-demo.qdocinc 0
-
-    A simple HTML button is connected to the ActiveQt's about() slot.
-
-    \snippet doc/src/examples/simple-demo.qdocinc 1
-
-    A second ActiveX control - the standard Calendar Control - is instantiated
-
-    \snippet doc/src/examples/simple-demo.qdocinc 2
-
-    Events from the ActiveX controls are handled using both Visual Basic Script
-    and JavaScript.
-
-    \snippet doc/src/examples/simple-demo.qdocinc 3
-*/
diff --git a/doc/src/examples/webbrowser.qdoc b/doc/src/examples/webbrowser.qdoc
deleted file mode 100644
index 0117092..0000000
--- a/doc/src/examples/webbrowser.qdoc
+++ /dev/null
@@ -1,73 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/legal
-**
-** This file is part of the documentation of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:FDL$
-** Commercial License Usage
-** Licensees holding valid commercial Qt licenses may use this file in
-** accordance with the commercial license agreement provided with the
-** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
-** use the contact form at http://qt.digia.com/contact-us.
-**
-** GNU Free Documentation License Usage
-** Alternatively, this file may be used under the terms of the GNU Free
-** Documentation License version 1.3 as published by the Free Software
-** Foundation and appearing in the file included in the packaging of
-** this file.  Please review the following information to ensure
-** the GNU Free Documentation License version 1.3 requirements
-** will be met: http://www.gnu.org/copyleft/fdl.html.
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-/*!
-    \example activeqt/webbrowser
-    \title Web Browser Example (ActiveQt)
-
-    The Web Browser example uses the Microsoft Web Browser
-    ActiveX control to implement a fully functional Web Browser
-    application. The user interface has been developed using the Qt
-    Designer integration of the QAxWidget class.
-
-    The code demonstrates how the Qt application can communicate 
-    with the embedded ActiveX controls using signals, slots and the 
-    dynamicCall() function.
-
-    \snippet examples/activeqt/webbrowser/main.cpp 0
-
-    The \c MainWindow class declares a \c QMainWindow based user interface,
-    using the \c Ui::MainWindow class generated by Qt Designer. A number
-    of slots are implemented to handle events from the various user 
-    interface elements, including the \c WebBrowser object, which is a
-    QAxWidget hosting the Microsoft Web Browser control.
-
-    \snippet examples/activeqt/webbrowser/main.cpp 1
-
-    The constructor initializes the user interface, installs a
-    progress bar on the status bar, and uses QAxBase::dynamicCall()
-    to invoke the \c GoHome() method of Internet Explorer to
-    navigate  to the user's home page.
-
-    \snippet examples/activeqt/webbrowser/main.cpp 2
-    Different slots handle the signals emitted by the WebBrowser object.
-
-    Connections that don't require any coding, i.e. connecting the \c back 
-    action to the \c GoBack() slot, have already been made in Qt Designer.
-
-    \snippet examples/activeqt/webbrowser/main.cpp 3
-    \snippet examples/activeqt/webbrowser/main.cpp 4
-
-    The rest of the implementation is not related to ActiveQt - the actions
-    are handled by different slots, and the entry point function starts the
-    application using standard Qt APIs.
-
-    To build the example you must first build the QAxContainer
-    library. Then run your make tool in \c
-    examples/activeqt/webbrowser and run the resulting \c
-    webbrowser.exe.
-*/
diff --git a/doc/src/examples/wrapper-demo.qdocinc b/doc/src/examples/wrapper-demo.qdocinc
deleted file mode 100644
index a00c505..0000000
--- a/doc/src/examples/wrapper-demo.qdocinc
+++ /dev/null
@@ -1,51 +0,0 @@
-\raw HTML
-//! [0]
-<SCRIPT LANGUAGE="VBScript">
-Sub ToolButton_Clicked()
-    RadioButton.text = InputBox( "Enter something", "Wrapper Demo" )
-End Sub
-
-Sub PushButton_clicked()
-    MsgBox( "Thank you!" )
-End Sub
-
-Sub CheckBox_toggled( state )
-    if state = 0 then
-        CheckBox.text = "Check me!"
-    else
-        CheckBox.text = "Uncheck me!"
-    end if
-End Sub
-</SCRIPT>
-<p />
-A QPushButton:<br />
-<object ID="PushButton" CLASSID="CLSID:2B262458-A4B6-468B-B7D4-CF5FEE0A7092"
-CODEBASE="http://qt.nokia.com/demos/wrapperax.cab">
-    <PARAM NAME="text" VALUE="Click me!" />
-[Object not available! Did you forget to build and register the server?]
-</object><br />
-
-<p />
-A QCheckBox:<br />
-<object ID="CheckBox" CLASSID="CLSID:6E795de9-872d-43cf-a831-496ef9d86c68"
-CODEBASE="http://qt.nokia.com/demos/wrapperax.cab">
-    <PARAM NAME="text" VALUE="Check me!" />
-[Object not available! Did you forget to build and register the server?]
-</object><br />
-
-<p />
-A QToolButton:<br />
-<object ID="ToolButton" CLASSID="CLSID:7c0ffe7a-60c3-4666-bde2-5cf2b54390a1"
-CODEBASE="http://qt.nokia.com/demos/wrapperax.cab">
-[Object not available! Did you forget to build and register the server?]
-</object><br />
-
-<p />
-A QRadioButton:<br />
-<object ID="RadioButton" CLASSID="CLSID:afcf78c8-446c-409a-93b3-ba2959039189"
-CODEBASE="http://qt.nokia.com/demos/wrapperax.cab">
-    <PARAM NAME="text" VALUE="Tune me!" />
-[Object not available! Did you forget to build and register the server?]
-</object><br />
-//! [0]
-\endraw
diff --git a/doc/src/examples/wrapper.qdoc b/doc/src/examples/wrapper.qdoc
deleted file mode 100644
index 3f4b904..0000000
--- a/doc/src/examples/wrapper.qdoc
+++ /dev/null
@@ -1,63 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/legal
-**
-** This file is part of the documentation of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:FDL$
-** Commercial License Usage
-** Licensees holding valid commercial Qt licenses may use this file in
-** accordance with the commercial license agreement provided with the
-** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
-** use the contact form at http://qt.digia.com/contact-us.
-**
-** GNU Free Documentation License Usage
-** Alternatively, this file may be used under the terms of the GNU Free
-** Documentation License version 1.3 as published by the Free Software
-** Foundation and appearing in the file included in the packaging of
-** this file.  Please review the following information to ensure
-** the GNU Free Documentation License version 1.3 requirements
-** will be met: http://www.gnu.org/copyleft/fdl.html.
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-/*!
-    \page qaxserver-demo-wrapper.html
-
-    \title Standard Qt widgets in an HTML page
-
-    \input examples/wrapper-demo.qdocinc
-*/
-
-/*!
-    \example activeqt/wrapper
-    \title Wrapper Example (ActiveQt)
-
-    The Wrapper example demonstrates how to export existing QWidget
-    classes as ActiveX controls, and the use of QAxFactory together
-    with the \c QAXFACTORY_EXPORT() macro. ActiveX controls in this
-    example are the standard button classes QPushButton, QCheckBox
-    and QRadioButton as provided by Qt.
-
-    \snippet examples/activeqt/wrapper/main.cpp 0
-    The factory implementation returns the list of supported controls,
-    creates controls on request and provides information about the unique
-    IDs of the COM classes and interfaces for each control.
-
-    \snippet examples/activeqt/wrapper/main.cpp 1
-    The factory is exported using the QAXFACTORY_EXPORT macro.
-
-    To build the example you must first build the QAxServer library.
-    Then run \c qmake and your make tool in \c
-    examples/activeqt/wrapper.
-
-    The \l{qaxserver-demo-wrapper.html}{demonstration} requires a
-    web browser that supports ActiveX controls, and scripting to be
-    enabled.
-
-    \snippet examples/wrapper-demo.qdocinc 0
-*/
diff --git a/doc/src/snippets/code/doc_src_examples_activeqt_comapp.qdoc b/doc/src/snippets/code/doc_src_examples_activeqt_comapp.qdoc
deleted file mode 100644
index fa6a491..0000000
--- a/doc/src/snippets/code/doc_src_examples_activeqt_comapp.qdoc
+++ /dev/null
@@ -1,79 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/legal
-**
-** This file is part of the documentation of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:BSD$
-** You may use this file under the terms of the BSD license as follows:
-**
-** "Redistribution and use in source and binary forms, with or without
-** modification, are permitted provided that the following conditions are
-** met:
-**   * Redistributions of source code must retain the above copyright
-**     notice, this list of conditions and the following disclaimer.
-**   * Redistributions in binary form must reproduce the above copyright
-**     notice, this list of conditions and the following disclaimer in
-**     the documentation and/or other materials provided with the
-**     distribution.
-**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
-**     of its contributors may be used to endorse or promote products derived
-**     from this software without specific prior written permission.
-**
-**
-** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-//! [0]
-Private Application As comappLib.Application
-Private MyApp As Boolean
-
-Private Sub UpdateList()
-    DocumentList.Clear
-    DocumentsCount.Caption = Application.documents.Count
-    For Index = 0 To Application.documents.Count - 1
-       DocumentList.AddItem (Application.documents.Item(Index).Title)
-    Next
-End Sub
-
-Private Sub Form_Load()
-    On Error GoTo CreateNew
-    Set Application = GetObject(, "comapp.Application")
-    MyApp = False
-    GoTo Initialized
-CreateNew:
-    On Error GoTo InitializeFailed
-    Set Application = New Application
-    Application.Visible = True
-    MyApp = True
-Initialized:
-    Caption = Application.id
-    UpdateList
-InitializeFailed:
-End Sub
-
-Private Sub Form_Unload(Cancel As Integer)
-    If MyApp Then
-        Application.quit
-    End If
-End Sub
-
-Private Sub NewDocument_Click()
-    Application.documents.addDocument
-    UpdateList
-End Sub
-//! [0]
diff --git a/doc/src/snippets/code/doc_src_examples_activeqt_dotnet.qdoc b/doc/src/snippets/code/doc_src_examples_activeqt_dotnet.qdoc
deleted file mode 100644
index 8bbf1cb..0000000
--- a/doc/src/snippets/code/doc_src_examples_activeqt_dotnet.qdoc
+++ /dev/null
@@ -1,44 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/legal
-**
-** This file is part of the documentation of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:BSD$
-** You may use this file under the terms of the BSD license as follows:
-**
-** "Redistribution and use in source and binary forms, with or without
-** modification, are permitted provided that the following conditions are
-** met:
-**   * Redistributions of source code must retain the above copyright
-**     notice, this list of conditions and the following disclaimer.
-**   * Redistributions in binary form must reproduce the above copyright
-**     notice, this list of conditions and the following disclaimer in
-**     the documentation and/or other materials provided with the
-**     distribution.
-**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
-**     of its contributors may be used to endorse or promote products derived
-**     from this software without specific prior written permission.
-**
-**
-** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-//! [0]
-' VB is case insensitive, but our C++ controls are not.
-' Me.resetButton.enabled = True
-//! [0]
diff --git a/doc/src/snippets/code/doc_src_examples_activeqt_menus.qdoc b/doc/src/snippets/code/doc_src_examples_activeqt_menus.qdoc
deleted file mode 100644
index 39fd6d6..0000000
--- a/doc/src/snippets/code/doc_src_examples_activeqt_menus.qdoc
+++ /dev/null
@@ -1,46 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/legal
-**
-** This file is part of the documentation of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:BSD$
-** You may use this file under the terms of the BSD license as follows:
-**
-** "Redistribution and use in source and binary forms, with or without
-** modification, are permitted provided that the following conditions are
-** met:
-**   * Redistributions of source code must retain the above copyright
-**     notice, this list of conditions and the following disclaimer.
-**   * Redistributions in binary form must reproduce the above copyright
-**     notice, this list of conditions and the following disclaimer in
-**     the documentation and/or other materials provided with the
-**     distribution.
-**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
-**     of its contributors may be used to endorse or promote products derived
-**     from this software without specific prior written permission.
-**
-**
-** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-//! [0]
-<object ID="QMenus" CLASSID="CLSID:4dc3f340-a6f7-44e4-a79b-3e9217695fbd"
-CODEBASE="http://qt.nokia.com/demos/menusax.cab">
-[Object not available! Did you forget to build and register the server?]
-</object>
-//! [0]
diff --git a/doc/src/snippets/code/doc_src_qaxcontainer.pro b/doc/src/snippets/code/doc_src_qaxcontainer.pro
deleted file mode 100644
index d3a3c2d..0000000
--- a/doc/src/snippets/code/doc_src_qaxcontainer.pro
+++ /dev/null
@@ -1,48 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/legal
-**
-** This file is part of the documentation of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:BSD$
-** You may use this file under the terms of the BSD license as follows:
-**
-** "Redistribution and use in source and binary forms, with or without
-** modification, are permitted provided that the following conditions are
-** met:
-**   * Redistributions of source code must retain the above copyright
-**     notice, this list of conditions and the following disclaimer.
-**   * Redistributions in binary form must reproduce the above copyright
-**     notice, this list of conditions and the following disclaimer in
-**     the documentation and/or other materials provided with the
-**     distribution.
-**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
-**     of its contributors may be used to endorse or promote products derived
-**     from this software without specific prior written permission.
-**
-**
-** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-#! [0]
-QT += axcontainer
-#! [0]
-
-
-#! [1]
-TYPELIBS = file.tlb
-#! [1]
diff --git a/doc/src/snippets/code/doc_src_qaxserver.cpp b/doc/src/snippets/code/doc_src_qaxserver.cpp
deleted file mode 100644
index 3ba3ce2..0000000
--- a/doc/src/snippets/code/doc_src_qaxserver.cpp
+++ /dev/null
@@ -1,218 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/legal
-**
-** This file is part of the documentation of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:BSD$
-** You may use this file under the terms of the BSD license as follows:
-**
-** "Redistribution and use in source and binary forms, with or without
-** modification, are permitted provided that the following conditions are
-** met:
-**   * Redistributions of source code must retain the above copyright
-**     notice, this list of conditions and the following disclaimer.
-**   * Redistributions in binary form must reproduce the above copyright
-**     notice, this list of conditions and the following disclaimer in
-**     the documentation and/or other materials provided with the
-**     distribution.
-**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
-**     of its contributors may be used to endorse or promote products derived
-**     from this software without specific prior written permission.
-**
-**
-** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-//! [3]
-#include <QWidget>
-
-class MyActiveX : public QWidget
-{
-    Q_OBJECT
-//! [3]
-
-
-//! [4]
-Q_CLASSINFO("ClassID", "{1D9928BD-4453-4bdd-903D-E525ED17FDE5}")
-Q_CLASSINFO("InterfaceID", "{99F6860E-2C5A-42ec-87F2-43396F4BE389}")
-Q_CLASSINFO("EventsID", "{0A3E9F27-E4F1-45bb-9E47-63099BCCD0E3}")
-//! [4]
-
-
-//! [5]
-Q_PROPERTY(int value READ value WRITE setValue)
-//! [5]
-
-
-//! [6]
-public:
-    MyActiveX(QWidget *parent = 0)
-    ...
-
-    int value() const;
-
-public slots:
-    void setValue(int v);
-    ...
-
-signals:
-    void valueChange(int v);
-    ...
-
-};
-//! [6]
-
-
-//! [7]
-#include <QAxBindable>
-#include <QWidget>
-
-class MyActiveX : public QWidget, public QAxBindable
-{
-    Q_OBJECT
-//! [7]
-
-
-//! [8]
-QAXFACTORY_BEGIN("{ad90301a-849e-4e8b-9a91-0a6dc5f6461f}",
-                 "{a8f21901-7ff7-4f6a-b939-789620c03d83}")
-    QAXCLASS(MyWidget)
-    QAXCLASS(MyWidget2)
-    QAXTYPE(MySubType)
-QAXFACTORY_END()
-//! [8]
-
-
-//! [9]
-#include <QApplication>
-#include <QAxFactory>
-
-int main(int argc, char *argv[])
-{
-    QApplication app(argc, argv);
-    if (!QAxFactory::isServer()) {
-        // create and show main window
-    }
-    return app.exec();
-}
-//! [9]
-
-
-//! [10]
-MyFactory(const QUuid &, const QUuid &);
-//! [10]
-
-
-//! [11]
-HMODULE dll = LoadLibrary("myserver.dll");
-typedef HRESULT(__stdcall *DllRegisterServerProc)();
-DllRegisterServerProc DllRegisterServer = 
-    (DllRegisterServerProc)GetProcAddress(dll, "DllRegisterServer");
-
-HRESULT res = E_FAIL;
-if (DllRegisterServer)
-    res = DllRegisterServer();
-if (res != S_OK)
-    // error handling
-//! [11]
-
-
-//! [15]
-class MyActiveX : public QWidget
-{
-    Q_OBJECT
-    Q_CLASSINFO("Version", "2.0")
-    Q_CLASSINFO("ClassID", "{7a4cffd8-cbcd-4ae9-ae7e-343e1e5710df}")
-    Q_CLASSINFO("InterfaceID", "{6fb035bf-8019-48d8-be51-ef05427d8994}")
-    Q_CLASSINFO("EventsID", "{c42fffdf-6557-47c9-817a-2da2228bc29c}")
-    Q_CLASSINFO("Insertable", "yes")
-    Q_CLASSINFO("ToSuperClass", "MyActiveX")
-    Q_PROPERTY(...)
-
-public:
-    MyActiveX(QWidget *parent = 0);
-
-    ...
-};
-//! [15]
-
-
-//! [16]
-class MyLicensedControl : public QWidget
-{
-    Q_OBJECT
-    Q_CLASSINFO("LicenseKey", "<key string>")
-    ...
-};
-//! [16]
-
-
-//! [17]
-class AxImpl : public QAxAggregated, public ISomeCOMInterface
-{
-public:
-    AxImpl() {}
-
-    long queryInterface(const QUuid &iid, void **iface);
-
-    // IUnknown
-    QAXAGG_IUNKNOWN
-
-    // ISomeCOMInterface
-    ...
-}
-//! [17]
-
-
-//! [18]
-long AxImpl::queryInterface(const QUuid &iid, void **iface)
-{
-    *iface = 0;
-    if (iid == IID_ISomeCOMInterface)
-        *iface = (ISomeCOMInterface *)this;
-    else
-        return E_NOINTERFACE;
-
-    AddRef();
-    return S_OK;
-}
-//! [18]
-
-
-//! [19]
-HRESULT AxImpl::QueryInterface(REFIID iid, void **iface)
-{
-    return controllingUnknown()->QueryInterface(iid, iface);
-}
-//! [19]
-
-
-//! [20]
-class MyActiveX : public QWidget, public QAxBindable
-{
-    Q_OBJECT
-
-public:
-    MyActiveX(QWidget *parent);
-
-    QAxAggregated *createAggregate()
-    {
-        return new AxImpl();
-    }
-};
-//! [20]
diff --git a/doc/src/snippets/code/doc_src_qaxserver.pro b/doc/src/snippets/code/doc_src_qaxserver.pro
deleted file mode 100644
index dcd3d38..0000000
--- a/doc/src/snippets/code/doc_src_qaxserver.pro
+++ /dev/null
@@ -1,65 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/legal
-**
-** This file is part of the documentation of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:BSD$
-** You may use this file under the terms of the BSD license as follows:
-**
-** "Redistribution and use in source and binary forms, with or without
-** modification, are permitted provided that the following conditions are
-** met:
-**   * Redistributions of source code must retain the above copyright
-**     notice, this list of conditions and the following disclaimer.
-**   * Redistributions in binary form must reproduce the above copyright
-**     notice, this list of conditions and the following disclaimer in
-**     the documentation and/or other materials provided with the
-**     distribution.
-**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
-**     of its contributors may be used to endorse or promote products derived
-**     from this software without specific prior written permission.
-**
-**
-** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-#! [0]
-TEMPLATE = app
-QT  += axserver
-
-RC_FILE  = qaxserver.rc
-...
-#! [0]
-
-
-#! [1]
-TEMPLATE = lib
-QT += axserver
-CONFIG  += dll
-
-DEF_FILE = qaxserver.def
-RC_FILE  = qaxserver.rc
-...
-#! [1]
-
-
-#! [2]
-TEMPLATE = lib
-VERSION = 2.5
-...
-#! [2]
diff --git a/doc/src/snippets/code/doc_src_qaxserver.qdoc b/doc/src/snippets/code/doc_src_qaxserver.qdoc
deleted file mode 100644
index c50641b..0000000
--- a/doc/src/snippets/code/doc_src_qaxserver.qdoc
+++ /dev/null
@@ -1,57 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/legal
-**
-** This file is part of the documentation of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:BSD$
-** You may use this file under the terms of the BSD license as follows:
-**
-** "Redistribution and use in source and binary forms, with or without
-** modification, are permitted provided that the following conditions are
-** met:
-**   * Redistributions of source code must retain the above copyright
-**     notice, this list of conditions and the following disclaimer.
-**   * Redistributions in binary form must reproduce the above copyright
-**     notice, this list of conditions and the following disclaimer in
-**     the documentation and/or other materials provided with the
-**     distribution.
-**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
-**     of its contributors may be used to endorse or promote products derived
-**     from this software without specific prior written permission.
-**
-**
-** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-//! [12]
-cabarc N simpleax.cab simpleax.exe simple.inf
-//! [12]
-
-
-//! [13]
-<object ID="MyActiveX1" CLASSID="CLSID:ad90301a-849e-4e8b-9a91-0a6dc5f6461f">
-   ...
-<\object>
-//! [13]
-
-
-//! [14]
-<object ID=...>
-    <param name="name" value="value">
-<\object>
-//! [14]
diff --git a/doc/src/snippets/code/src_activeqt_container_qaxbase.cpp b/doc/src/snippets/code/src_activeqt_container_qaxbase.cpp
deleted file mode 100644
index 2e2d91b..0000000
--- a/doc/src/snippets/code/src_activeqt_container_qaxbase.cpp
+++ /dev/null
@@ -1,199 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/legal
-**
-** This file is part of the documentation of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:BSD$
-** You may use this file under the terms of the BSD license as follows:
-**
-** "Redistribution and use in source and binary forms, with or without
-** modification, are permitted provided that the following conditions are
-** met:
-**   * Redistributions of source code must retain the above copyright
-**     notice, this list of conditions and the following disclaimer.
-**   * Redistributions in binary form must reproduce the above copyright
-**     notice, this list of conditions and the following disclaimer in
-**     the documentation and/or other materials provided with the
-**     distribution.
-**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
-**     of its contributors may be used to endorse or promote products derived
-**     from this software without specific prior written permission.
-**
-**
-** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-//! [0]
-connect(buttonBack, SIGNAL(clicked()), webBrowser, SLOT(GoBack()));
-//! [0]
-
-
-//! [1]
-activeX->setProperty("text", "some text");
-int value = activeX->property("value");
-//! [1]
-
-
-//! [2]
-webBrowser->dynamicCall("GoHome()");
-//! [2]
-
-
-//! [3]
-connect(webBrowser, SIGNAL(TitleChanged(QString)),
-	this, SLOT(setCaption(QString)));
-//! [3]
-
-
-//! [4]
-dispinterface IControl
-{
-properties:
-    [id(1)] BSTR text;
-    [id(2)] IFontDisp *font;
-
-methods:
-    [id(6)] void showColumn([in] int i);
-    [id(3)] bool addColumn([in] BSTR t);
-    [id(4)] int fillList([in, out] SAFEARRAY(VARIANT) *list);
-    [id(5)] IDispatch *item([in] int i);
-};
-//! [4]
-
-
-//! [5]
-QAxObject object("<CLSID>");
-
-QString text = object.property("text").toString();
-object.setProperty("font", QFont("Times New Roman", 12));
-
-connect(this, SIGNAL(clicked(int)), &object, SLOT(showColumn(int)));
-bool ok = object.dynamicCall("addColumn(const QString&)", "Column 1").toBool();
-
-QList<QVariant> varlist;
-QList<QVariant> parameters;
-parameters << QVariant(varlist);
-int n = object.dynamicCall("fillList(QList<QVariant>&)", parameters).toInt();
-
-QAxObject *item = object.querySubItem("item(int)", 5);
-//! [5]
-
-
-//! [6]
-IUnknown *iface = 0;
-activeX->queryInterface(IID_IUnknown, (void**)&iface);
-if (iface) {
-    // use the interface
-    iface->Release();
-}
-//! [6]
-
-
-//! [7]
-ctrl->setControl("{8E27C92B-1264-101C-8A2F-040224009C02}");
-//! [7]
-
-
-//! [8]
-ctrl->setControl("MSCal.Calendar");
-//! [8]
-
-
-//! [9]
-ctrl->setControl("Calendar Control 9.0");
-//! [9]
-
-
-//! [10]
-ctrl->setControl("c:/files/file.doc");
-//! [10]
-
-
-//! [11]
-<domain/username>:<password>@server/{8E27C92B-1264-101C-8A2F-040224009C02}
-//! [11]
-
-
-//! [12]
-{8E27C92B-1264-101C-8A2F-040224009C02}:<LicenseKey>
-//! [12]
-
-
-//! [13]
-{8E27C92B-1264-101C-8A2F-040224009C02}&
-//! [13]
-
-
-//! [14]
-ctrl->setControl("DOMAIN/user:password@server/{8E27C92B-1264-101C-8A2F-040224009C02}:LicenseKey");
-//! [14]
-
-
-//! [15]
-activeX->dynamicCall("Navigate(const QString&)", "qt.nokia.com");
-//! [15]
-
-
-//! [16]
-activeX->dynamicCall("Navigate(\"qt.nokia.com\")");
-//! [16]
-
-
-//! [17]
-activeX->dynamicCall("Value", 5);
-QString text = activeX->dynamicCall("Text").toString();
-//! [17]
-
-
-//! [18]
-IWebBrowser2 *webBrowser = 0;
-activeX->queryInterface(IID_IWebBrowser2, (void **)&webBrowser);
-if (webBrowser) {
-    webBrowser->Navigate2(pvarURL);
-    webBrowser->Release();
-}
-//! [18]
-
-
-//! [19]
-QAxWidget outlook("Outlook.Application");
-QAxObject *session = outlook.querySubObject("Session");
-if (session) {
-    QAxObject *defFolder = session->querySubObject(
-			    "GetDefaultFolder(OlDefaultFolders)",
-			    "olFolderContacts");
-    //...
-}
-//! [19]
-
-
-//! [20]
-void Receiver::slot(const QString &name, int argc, void *argv)
-{
-    VARIANTARG *params = (VARIANTARG*)argv;
-    if (name.startsWith("BeforeNavigate2(")) {
-	IDispatch *pDisp = params[argc-1].pdispVal;
-	VARIANTARG URL = *params[argc-2].pvarVal;
-	VARIANTARG Flags = *params[argc-3].pvarVal;
-	VARIANTARG TargetFrameName = *params[argc-4].pvarVal;
-	VARIANTARG PostData = *params[argc-5].pvarVal;
-	VARIANTARG Headers = *params[argc-6].pvarVal;
-	bool *Cancel = params[argc-7].pboolVal;
-    }
-}
-//! [20]
diff --git a/doc/src/snippets/code/src_activeqt_container_qaxscript.cpp b/doc/src/snippets/code/src_activeqt_container_qaxscript.cpp
deleted file mode 100644
index b9df5d2..0000000
--- a/doc/src/snippets/code/src_activeqt_container_qaxscript.cpp
+++ /dev/null
@@ -1,58 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/legal
-**
-** This file is part of the documentation of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:BSD$
-** You may use this file under the terms of the BSD license as follows:
-**
-** "Redistribution and use in source and binary forms, with or without
-** modification, are permitted provided that the following conditions are
-** met:
-**   * Redistributions of source code must retain the above copyright
-**     notice, this list of conditions and the following disclaimer.
-**   * Redistributions in binary form must reproduce the above copyright
-**     notice, this list of conditions and the following disclaimer in
-**     the documentation and/or other materials provided with the
-**     distribution.
-**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
-**     of its contributors may be used to endorse or promote products derived
-**     from this software without specific prior written permission.
-**
-**
-** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-//! [0]
-function setNumber(number)
-{
-    n = number;
-}
-//! [0]
-
-
-//! [1]
-QValueList args;
-args << 5;
-script->call("setNumber(const QVariant&)", args);
-//! [1]
-
-
-//! [2]
-script->call("setNumber(5)");
-//! [2]
diff --git a/doc/src/snippets/code/src_activeqt_container_qaxselect.cpp b/doc/src/snippets/code/src_activeqt_container_qaxselect.cpp
deleted file mode 100644
index 25e8599..0000000
--- a/doc/src/snippets/code/src_activeqt_container_qaxselect.cpp
+++ /dev/null
@@ -1,48 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/legal
-**
-** This file is part of the documentation of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:BSD$
-** You may use this file under the terms of the BSD license as follows:
-**
-** "Redistribution and use in source and binary forms, with or without
-** modification, are permitted provided that the following conditions are
-** met:
-**   * Redistributions of source code must retain the above copyright
-**     notice, this list of conditions and the following disclaimer.
-**   * Redistributions in binary form must reproduce the above copyright
-**     notice, this list of conditions and the following disclaimer in
-**     the documentation and/or other materials provided with the
-**     distribution.
-**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
-**     of its contributors may be used to endorse or promote products derived
-**     from this software without specific prior written permission.
-**
-**
-** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-//! [0]
-QAxSelect select;
-if (select.exec()) {
-    QAxWidget *container = new QAxWidget;
-    container->setControl(select.clsid());
-    container->show();
-}
-//! [0]
diff --git a/doc/src/snippets/code/src_activeqt_control_qaxbindable.cpp b/doc/src/snippets/code/src_activeqt_control_qaxbindable.cpp
deleted file mode 100644
index ae4d094..0000000
--- a/doc/src/snippets/code/src_activeqt_control_qaxbindable.cpp
+++ /dev/null
@@ -1,100 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/legal
-**
-** This file is part of the documentation of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:BSD$
-** You may use this file under the terms of the BSD license as follows:
-**
-** "Redistribution and use in source and binary forms, with or without
-** modification, are permitted provided that the following conditions are
-** met:
-**   * Redistributions of source code must retain the above copyright
-**     notice, this list of conditions and the following disclaimer.
-**   * Redistributions in binary form must reproduce the above copyright
-**     notice, this list of conditions and the following disclaimer in
-**     the documentation and/or other materials provided with the
-**     distribution.
-**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
-**     of its contributors may be used to endorse or promote products derived
-**     from this software without specific prior written permission.
-**
-**
-** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-//! [0]
-class MyActiveX : public QWidget, public QAxBindable
-{
-    Q_OBJECT
-    Q_PROPERTY(int value READ value WRITE setValue)
-
-public:
-    MyActiveX(QWidget *parent = 0);
-    ...
-
-    int value() const;
-    void setValue(int);
-};
-//! [0]
-
-
-//! [1]
-void MyActiveQt::setText(const QString &text)
-{
-    if (!requestPropertyChange("text"))
-        return;
-
-    // update property
-
-    propertyChanged("text");
-}
-//! [1]
-
-
-//! [2]
-long AxImpl::queryInterface(const QUuid &iid, void **iface)
-{
-    *iface = 0;
-    if (iid == IID_ISomeCOMInterface)
-        *iface = (ISomeCOMInterface*)this;
-    else
-        return E_NOINTERFACE;
-
-    AddRef();
-    return S_OK;
-}
-//! [2]
-
-
-//! [3]
-HRESULT AxImpl::QueryInterface(REFIID iid, void **iface)
-{
-    return controllingUnknown()->QueryInterface(iid, iface);
-}
-
-ulong AxImpl::AddRef()
-{
-    return controllingUnknown()->AddRef();
-}
-
-ulong AxImpl::Release()
-{
-    return controllingUnknown()->Release();
-}
-//! [3]
diff --git a/doc/src/snippets/code/src_activeqt_control_qaxfactory.cpp b/doc/src/snippets/code/src_activeqt_control_qaxfactory.cpp
deleted file mode 100644
index 775998d..0000000
--- a/doc/src/snippets/code/src_activeqt_control_qaxfactory.cpp
+++ /dev/null
@@ -1,195 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/legal
-**
-** This file is part of the documentation of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:BSD$
-** You may use this file under the terms of the BSD license as follows:
-**
-** "Redistribution and use in source and binary forms, with or without
-** modification, are permitted provided that the following conditions are
-** met:
-**   * Redistributions of source code must retain the above copyright
-**     notice, this list of conditions and the following disclaimer.
-**   * Redistributions in binary form must reproduce the above copyright
-**     notice, this list of conditions and the following disclaimer in
-**     the documentation and/or other materials provided with the
-**     distribution.
-**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
-**     of its contributors may be used to endorse or promote products derived
-**     from this software without specific prior written permission.
-**
-**
-** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-//! [0]
-QStringList ActiveQtFactory::featureList() const
-{
-    QStringList list;
-    list << "ActiveX1";
-    list << "ActiveX2";
-    return list;
-}
-
-QObject *ActiveQtFactory::createObject(const QString &key)
-{
-    if (key == "ActiveX1")
-        return new ActiveX1(parent);
-    if (key == "ActiveX2")
-        return new ActiveX2(parent);
-    return 0;
-}
-
-const QMetaObject *ActiveQtFactory::metaObject(const QString &key) const
-{
-    if (key == "ActiveX1")
-        return &ActiveX1::staticMetaObject;
-    if (key == "ActiveX2")
-        return &ActiveX2::staticMetaObject;
-}
-
-QUuid ActiveQtFactory::classID(const QString &key) const
-{
-    if (key == "ActiveX1")
-        return "{01234567-89AB-CDEF-0123-456789ABCDEF}";
-    ...
-    return QUuid();
-}
-
-QUuid ActiveQtFactory::interfaceID(const QString &key) const
-{
-    if (key == "ActiveX1")
-        return "{01234567-89AB-CDEF-0123-456789ABCDEF}";
-    ...
-    return QUuid();
-}
-
-QUuid ActiveQtFactory::eventsID(const QString &key) const
-{
-    if (key == "ActiveX1")
-        return "{01234567-89AB-CDEF-0123-456789ABCDEF}";
-    ...
-    return QUuid();
-}
-
-QAXFACTORY_EXPORT(
-    ActiveQtFactory,			      // factory class
-    "{01234567-89AB-CDEF-0123-456789ABCDEF}", // type library ID
-    "{01234567-89AB-CDEF-0123-456789ABCDEF}"  // application ID
-)
-//! [0]
-
-
-//! [1]
-QAXFACTORY_BEGIN(
-    "{01234567-89AB-CDEF-0123-456789ABCDEF}", // type library ID
-    "{01234567-89AB-CDEF-0123-456789ABCDEF}"  // application ID
-)
-    QAXCLASS(Class1)
-    QAXCLASS(Class2)
-QAXFACTORY_END()
-//! [1]
-
-
-//! [2]
-#include <qapplication.h>
-#include <qaxfactory.h>
-
-#include "theactivex.h"
-
-QAXFACTORY_DEFAULT(
-    TheActiveX,				  // widget class
-    "{01234567-89AB-CDEF-0123-456789ABCDEF}", // class ID
-    "{01234567-89AB-CDEF-0123-456789ABCDEF}", // interface ID
-    "{01234567-89AB-CDEF-0123-456789ABCDEF}", // event interface ID
-    "{01234567-89AB-CDEF-0123-456789ABCDEF}", // type library ID
-    "{01234567-89AB-CDEF-0123-456789ABCDEF}"  // application ID
-)
-//! [2]
-
-
-//! [3]
-settings->setValue("/CLSID/" + classID(key)
-                   + "/Implemented Categories/"
-                   + "/{00000000-0000-0000-000000000000}/.",
-                   QString());
-//! [3]
-
-
-//! [4]
-settings->remove("/CLSID/" + classID(key)
-                 + "/Implemented Categories"
-                 + "/{00000000-0000-0000-000000000000}/.");
-//! [4]
-
-
-//! [5]
-int main(int argc, char *argv[])
-{
-    QApplication app(argc, argv);
-    if (!QAxFactory::isServer()) {
-        // initialize for stand-alone execution
-    }
-    return app.exec();
-}
-//! [5]
-
-
-//! [6]
-if (QAxFactory::isServer()) {
-    QAxFactory::stopServer();
-    QAxFactory::startServer(QAxFactory::SingleInstance);
-}
-//! [6]
-
-
-//! [7]
-#include <qaxfactory.h>
-
-#include "theactivex.h"
-
-QAXFACTORY_DEFAULT(
-    TheActiveX,				  // widget class
-    "{01234567-89AB-CDEF-0123-456789ABCDEF}", // class ID
-    "{01234567-89AB-CDEF-0123-456789ABCDEF}", // interface ID
-    "{01234567-89AB-CDEF-0123-456789ABCDEF}", // event interface ID
-    "{01234567-89AB-CDEF-0123-456789ABCDEF}", // type library ID
-    "{01234567-89AB-CDEF-0123-456789ABCDEF}"  // application ID
-)
-//! [7]
-
-
-//! [8]
-QAXFACTORY_EXPORT(
-    MyFactory,			              // factory class
-    "{01234567-89AB-CDEF-0123-456789ABCDEF}", // type library ID
-    "{01234567-89AB-CDEF-0123-456789ABCDEF}"  // application ID
-)
-//! [8]
-
-
-//! [9]
-QAXFACTORY_BEGIN(
-    "{01234567-89AB-CDEF-0123-456789ABCDEF}", // type library ID
-    "{01234567-89AB-CDEF-0123-456789ABCDEF}"  // application ID
-)
-    QAXCLASS(Class1)
-    QAXCLASS(Class2)
-QAXFACTORY_END()
-//! [9]
diff --git a/src/activeqt/axshared.prx b/src/activeqt/axshared.prx
index 9b573f2..6835a96 100644
--- a/src/activeqt/axshared.prx
+++ b/src/activeqt/axshared.prx
@@ -2,6 +2,7 @@
 # It also contains shared code that is used by axcontainer and axserver.
 
 TARGET = QtAxBase
+QMAKE_DOCS = $$PWD/doc/activeqt.qdocconf
 MODULE_INCNAME = ActiveQt
 CONFIG += static
 QT += gui-private
diff --git a/src/activeqt/doc/activeqt.qdocconf b/src/activeqt/doc/activeqt.qdocconf
new file mode 100644
index 0000000..eb60b7e
--- /dev/null
+++ b/src/activeqt/doc/activeqt.qdocconf
@@ -0,0 +1,40 @@
+include($QT_INSTALL_DOCS/global/qt-module-defaults.qdocconf)
+
+project                 = ActiveQt
+description             = ActiveQt
+url                     = http://qt-project.org/doc/activeqt
+version                 = 5.0.0
+
+examplesinstallpath     = activeqt
+
+qhp.projects            = ActiveQt
+
+qhp.ActiveQt.file         = activeqt.qhp
+qhp.ActiveQt.namespace           = org.qt-project.activeqt.500
+qhp.ActiveQt.virtualFolder       = activeqt
+qhp.ActiveQt.indexTitle          = ActiveQt
+qhp.ActiveQt.indexRoot           =
+
+qhp.ActiveQt.filterAttributes    = activeqt 5.0.0 qtrefdoc
+qhp.ActiveQt.customFilters.Qt.name = activeqt 5.0.0
+qhp.ActiveQt.customFilters.Qt.filterAttributes = activeqt 5.0.0
+
+qhp.ActiveQt.subprojects         = classes
+qhp.ActiveQt.subprojects.classes.title = C++ Classes
+qhp.ActiveQt.subprojects.classes.indexTitle = Qt ActiveQt C++ Classes
+qhp.ActiveQt.subprojects.classes.selectors = class fake:headerfile
+qhp.ActiveQt.subprojects.classes.sortPages = true
+
+tagfile                 = ../../../doc/activeqt/activeqt.tags
+
+depends                 += qtcore qtgui qtdoc
+
+headerdirs  += ..
+
+sourcedirs  += ..
+
+exampledirs += ../ \
+               snippets
+
+imagedirs   += images
+
diff --git a/src/activeqt/doc/snippets/doc_src_examples_activeqt_comapp.qdoc b/src/activeqt/doc/snippets/doc_src_examples_activeqt_comapp.qdoc
new file mode 100644
index 0000000..fa6a491
--- /dev/null
+++ b/src/activeqt/doc/snippets/doc_src_examples_activeqt_comapp.qdoc
@@ -0,0 +1,79 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/legal
+**
+** This file is part of the documentation of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:BSD$
+** You may use this file under the terms of the BSD license as follows:
+**
+** "Redistribution and use in source and binary forms, with or without
+** modification, are permitted provided that the following conditions are
+** met:
+**   * Redistributions of source code must retain the above copyright
+**     notice, this list of conditions and the following disclaimer.
+**   * Redistributions in binary form must reproduce the above copyright
+**     notice, this list of conditions and the following disclaimer in
+**     the documentation and/or other materials provided with the
+**     distribution.
+**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
+**     of its contributors may be used to endorse or promote products derived
+**     from this software without specific prior written permission.
+**
+**
+** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+//! [0]
+Private Application As comappLib.Application
+Private MyApp As Boolean
+
+Private Sub UpdateList()
+    DocumentList.Clear
+    DocumentsCount.Caption = Application.documents.Count
+    For Index = 0 To Application.documents.Count - 1
+       DocumentList.AddItem (Application.documents.Item(Index).Title)
+    Next
+End Sub
+
+Private Sub Form_Load()
+    On Error GoTo CreateNew
+    Set Application = GetObject(, "comapp.Application")
+    MyApp = False
+    GoTo Initialized
+CreateNew:
+    On Error GoTo InitializeFailed
+    Set Application = New Application
+    Application.Visible = True
+    MyApp = True
+Initialized:
+    Caption = Application.id
+    UpdateList
+InitializeFailed:
+End Sub
+
+Private Sub Form_Unload(Cancel As Integer)
+    If MyApp Then
+        Application.quit
+    End If
+End Sub
+
+Private Sub NewDocument_Click()
+    Application.documents.addDocument
+    UpdateList
+End Sub
+//! [0]
diff --git a/src/activeqt/doc/snippets/doc_src_examples_activeqt_dotnet.qdoc b/src/activeqt/doc/snippets/doc_src_examples_activeqt_dotnet.qdoc
new file mode 100644
index 0000000..8bbf1cb
--- /dev/null
+++ b/src/activeqt/doc/snippets/doc_src_examples_activeqt_dotnet.qdoc
@@ -0,0 +1,44 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/legal
+**
+** This file is part of the documentation of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:BSD$
+** You may use this file under the terms of the BSD license as follows:
+**
+** "Redistribution and use in source and binary forms, with or without
+** modification, are permitted provided that the following conditions are
+** met:
+**   * Redistributions of source code must retain the above copyright
+**     notice, this list of conditions and the following disclaimer.
+**   * Redistributions in binary form must reproduce the above copyright
+**     notice, this list of conditions and the following disclaimer in
+**     the documentation and/or other materials provided with the
+**     distribution.
+**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
+**     of its contributors may be used to endorse or promote products derived
+**     from this software without specific prior written permission.
+**
+**
+** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+//! [0]
+' VB is case insensitive, but our C++ controls are not.
+' Me.resetButton.enabled = True
+//! [0]
diff --git a/src/activeqt/doc/snippets/doc_src_examples_activeqt_menus.qdoc b/src/activeqt/doc/snippets/doc_src_examples_activeqt_menus.qdoc
new file mode 100644
index 0000000..39fd6d6
--- /dev/null
+++ b/src/activeqt/doc/snippets/doc_src_examples_activeqt_menus.qdoc
@@ -0,0 +1,46 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/legal
+**
+** This file is part of the documentation of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:BSD$
+** You may use this file under the terms of the BSD license as follows:
+**
+** "Redistribution and use in source and binary forms, with or without
+** modification, are permitted provided that the following conditions are
+** met:
+**   * Redistributions of source code must retain the above copyright
+**     notice, this list of conditions and the following disclaimer.
+**   * Redistributions in binary form must reproduce the above copyright
+**     notice, this list of conditions and the following disclaimer in
+**     the documentation and/or other materials provided with the
+**     distribution.
+**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
+**     of its contributors may be used to endorse or promote products derived
+**     from this software without specific prior written permission.
+**
+**
+** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+//! [0]
+<object ID="QMenus" CLASSID="CLSID:4dc3f340-a6f7-44e4-a79b-3e9217695fbd"
+CODEBASE="http://qt.nokia.com/demos/menusax.cab">
+[Object not available! Did you forget to build and register the server?]
+</object>
+//! [0]
diff --git a/src/activeqt/doc/snippets/doc_src_qaxcontainer.pro b/src/activeqt/doc/snippets/doc_src_qaxcontainer.pro
new file mode 100644
index 0000000..d3a3c2d
--- /dev/null
+++ b/src/activeqt/doc/snippets/doc_src_qaxcontainer.pro
@@ -0,0 +1,48 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/legal
+**
+** This file is part of the documentation of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:BSD$
+** You may use this file under the terms of the BSD license as follows:
+**
+** "Redistribution and use in source and binary forms, with or without
+** modification, are permitted provided that the following conditions are
+** met:
+**   * Redistributions of source code must retain the above copyright
+**     notice, this list of conditions and the following disclaimer.
+**   * Redistributions in binary form must reproduce the above copyright
+**     notice, this list of conditions and the following disclaimer in
+**     the documentation and/or other materials provided with the
+**     distribution.
+**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
+**     of its contributors may be used to endorse or promote products derived
+**     from this software without specific prior written permission.
+**
+**
+** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#! [0]
+QT += axcontainer
+#! [0]
+
+
+#! [1]
+TYPELIBS = file.tlb
+#! [1]
diff --git a/src/activeqt/doc/snippets/doc_src_qaxserver.cpp b/src/activeqt/doc/snippets/doc_src_qaxserver.cpp
new file mode 100644
index 0000000..3ba3ce2
--- /dev/null
+++ b/src/activeqt/doc/snippets/doc_src_qaxserver.cpp
@@ -0,0 +1,218 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/legal
+**
+** This file is part of the documentation of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:BSD$
+** You may use this file under the terms of the BSD license as follows:
+**
+** "Redistribution and use in source and binary forms, with or without
+** modification, are permitted provided that the following conditions are
+** met:
+**   * Redistributions of source code must retain the above copyright
+**     notice, this list of conditions and the following disclaimer.
+**   * Redistributions in binary form must reproduce the above copyright
+**     notice, this list of conditions and the following disclaimer in
+**     the documentation and/or other materials provided with the
+**     distribution.
+**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
+**     of its contributors may be used to endorse or promote products derived
+**     from this software without specific prior written permission.
+**
+**
+** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+//! [3]
+#include <QWidget>
+
+class MyActiveX : public QWidget
+{
+    Q_OBJECT
+//! [3]
+
+
+//! [4]
+Q_CLASSINFO("ClassID", "{1D9928BD-4453-4bdd-903D-E525ED17FDE5}")
+Q_CLASSINFO("InterfaceID", "{99F6860E-2C5A-42ec-87F2-43396F4BE389}")
+Q_CLASSINFO("EventsID", "{0A3E9F27-E4F1-45bb-9E47-63099BCCD0E3}")
+//! [4]
+
+
+//! [5]
+Q_PROPERTY(int value READ value WRITE setValue)
+//! [5]
+
+
+//! [6]
+public:
+    MyActiveX(QWidget *parent = 0)
+    ...
+
+    int value() const;
+
+public slots:
+    void setValue(int v);
+    ...
+
+signals:
+    void valueChange(int v);
+    ...
+
+};
+//! [6]
+
+
+//! [7]
+#include <QAxBindable>
+#include <QWidget>
+
+class MyActiveX : public QWidget, public QAxBindable
+{
+    Q_OBJECT
+//! [7]
+
+
+//! [8]
+QAXFACTORY_BEGIN("{ad90301a-849e-4e8b-9a91-0a6dc5f6461f}",
+                 "{a8f21901-7ff7-4f6a-b939-789620c03d83}")
+    QAXCLASS(MyWidget)
+    QAXCLASS(MyWidget2)
+    QAXTYPE(MySubType)
+QAXFACTORY_END()
+//! [8]
+
+
+//! [9]
+#include <QApplication>
+#include <QAxFactory>
+
+int main(int argc, char *argv[])
+{
+    QApplication app(argc, argv);
+    if (!QAxFactory::isServer()) {
+        // create and show main window
+    }
+    return app.exec();
+}
+//! [9]
+
+
+//! [10]
+MyFactory(const QUuid &, const QUuid &);
+//! [10]
+
+
+//! [11]
+HMODULE dll = LoadLibrary("myserver.dll");
+typedef HRESULT(__stdcall *DllRegisterServerProc)();
+DllRegisterServerProc DllRegisterServer = 
+    (DllRegisterServerProc)GetProcAddress(dll, "DllRegisterServer");
+
+HRESULT res = E_FAIL;
+if (DllRegisterServer)
+    res = DllRegisterServer();
+if (res != S_OK)
+    // error handling
+//! [11]
+
+
+//! [15]
+class MyActiveX : public QWidget
+{
+    Q_OBJECT
+    Q_CLASSINFO("Version", "2.0")
+    Q_CLASSINFO("ClassID", "{7a4cffd8-cbcd-4ae9-ae7e-343e1e5710df}")
+    Q_CLASSINFO("InterfaceID", "{6fb035bf-8019-48d8-be51-ef05427d8994}")
+    Q_CLASSINFO("EventsID", "{c42fffdf-6557-47c9-817a-2da2228bc29c}")
+    Q_CLASSINFO("Insertable", "yes")
+    Q_CLASSINFO("ToSuperClass", "MyActiveX")
+    Q_PROPERTY(...)
+
+public:
+    MyActiveX(QWidget *parent = 0);
+
+    ...
+};
+//! [15]
+
+
+//! [16]
+class MyLicensedControl : public QWidget
+{
+    Q_OBJECT
+    Q_CLASSINFO("LicenseKey", "<key string>")
+    ...
+};
+//! [16]
+
+
+//! [17]
+class AxImpl : public QAxAggregated, public ISomeCOMInterface
+{
+public:
+    AxImpl() {}
+
+    long queryInterface(const QUuid &iid, void **iface);
+
+    // IUnknown
+    QAXAGG_IUNKNOWN
+
+    // ISomeCOMInterface
+    ...
+}
+//! [17]
+
+
+//! [18]
+long AxImpl::queryInterface(const QUuid &iid, void **iface)
+{
+    *iface = 0;
+    if (iid == IID_ISomeCOMInterface)
+        *iface = (ISomeCOMInterface *)this;
+    else
+        return E_NOINTERFACE;
+
+    AddRef();
+    return S_OK;
+}
+//! [18]
+
+
+//! [19]
+HRESULT AxImpl::QueryInterface(REFIID iid, void **iface)
+{
+    return controllingUnknown()->QueryInterface(iid, iface);
+}
+//! [19]
+
+
+//! [20]
+class MyActiveX : public QWidget, public QAxBindable
+{
+    Q_OBJECT
+
+public:
+    MyActiveX(QWidget *parent);
+
+    QAxAggregated *createAggregate()
+    {
+        return new AxImpl();
+    }
+};
+//! [20]
diff --git a/src/activeqt/doc/snippets/doc_src_qaxserver.pro b/src/activeqt/doc/snippets/doc_src_qaxserver.pro
new file mode 100644
index 0000000..dcd3d38
--- /dev/null
+++ b/src/activeqt/doc/snippets/doc_src_qaxserver.pro
@@ -0,0 +1,65 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/legal
+**
+** This file is part of the documentation of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:BSD$
+** You may use this file under the terms of the BSD license as follows:
+**
+** "Redistribution and use in source and binary forms, with or without
+** modification, are permitted provided that the following conditions are
+** met:
+**   * Redistributions of source code must retain the above copyright
+**     notice, this list of conditions and the following disclaimer.
+**   * Redistributions in binary form must reproduce the above copyright
+**     notice, this list of conditions and the following disclaimer in
+**     the documentation and/or other materials provided with the
+**     distribution.
+**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
+**     of its contributors may be used to endorse or promote products derived
+**     from this software without specific prior written permission.
+**
+**
+** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#! [0]
+TEMPLATE = app
+QT  += axserver
+
+RC_FILE  = qaxserver.rc
+...
+#! [0]
+
+
+#! [1]
+TEMPLATE = lib
+QT += axserver
+CONFIG  += dll
+
+DEF_FILE = qaxserver.def
+RC_FILE  = qaxserver.rc
+...
+#! [1]
+
+
+#! [2]
+TEMPLATE = lib
+VERSION = 2.5
+...
+#! [2]
diff --git a/src/activeqt/doc/snippets/doc_src_qaxserver.qdoc b/src/activeqt/doc/snippets/doc_src_qaxserver.qdoc
new file mode 100644
index 0000000..c50641b
--- /dev/null
+++ b/src/activeqt/doc/snippets/doc_src_qaxserver.qdoc
@@ -0,0 +1,57 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/legal
+**
+** This file is part of the documentation of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:BSD$
+** You may use this file under the terms of the BSD license as follows:
+**
+** "Redistribution and use in source and binary forms, with or without
+** modification, are permitted provided that the following conditions are
+** met:
+**   * Redistributions of source code must retain the above copyright
+**     notice, this list of conditions and the following disclaimer.
+**   * Redistributions in binary form must reproduce the above copyright
+**     notice, this list of conditions and the following disclaimer in
+**     the documentation and/or other materials provided with the
+**     distribution.
+**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
+**     of its contributors may be used to endorse or promote products derived
+**     from this software without specific prior written permission.
+**
+**
+** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+//! [12]
+cabarc N simpleax.cab simpleax.exe simple.inf
+//! [12]
+
+
+//! [13]
+<object ID="MyActiveX1" CLASSID="CLSID:ad90301a-849e-4e8b-9a91-0a6dc5f6461f">
+   ...
+<\object>
+//! [13]
+
+
+//! [14]
+<object ID=...>
+    <param name="name" value="value">
+<\object>
+//! [14]
diff --git a/src/activeqt/doc/snippets/src_activeqt_container_qaxbase.cpp b/src/activeqt/doc/snippets/src_activeqt_container_qaxbase.cpp
new file mode 100644
index 0000000..2e2d91b
--- /dev/null
+++ b/src/activeqt/doc/snippets/src_activeqt_container_qaxbase.cpp
@@ -0,0 +1,199 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/legal
+**
+** This file is part of the documentation of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:BSD$
+** You may use this file under the terms of the BSD license as follows:
+**
+** "Redistribution and use in source and binary forms, with or without
+** modification, are permitted provided that the following conditions are
+** met:
+**   * Redistributions of source code must retain the above copyright
+**     notice, this list of conditions and the following disclaimer.
+**   * Redistributions in binary form must reproduce the above copyright
+**     notice, this list of conditions and the following disclaimer in
+**     the documentation and/or other materials provided with the
+**     distribution.
+**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
+**     of its contributors may be used to endorse or promote products derived
+**     from this software without specific prior written permission.
+**
+**
+** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+//! [0]
+connect(buttonBack, SIGNAL(clicked()), webBrowser, SLOT(GoBack()));
+//! [0]
+
+
+//! [1]
+activeX->setProperty("text", "some text");
+int value = activeX->property("value");
+//! [1]
+
+
+//! [2]
+webBrowser->dynamicCall("GoHome()");
+//! [2]
+
+
+//! [3]
+connect(webBrowser, SIGNAL(TitleChanged(QString)),
+	this, SLOT(setCaption(QString)));
+//! [3]
+
+
+//! [4]
+dispinterface IControl
+{
+properties:
+    [id(1)] BSTR text;
+    [id(2)] IFontDisp *font;
+
+methods:
+    [id(6)] void showColumn([in] int i);
+    [id(3)] bool addColumn([in] BSTR t);
+    [id(4)] int fillList([in, out] SAFEARRAY(VARIANT) *list);
+    [id(5)] IDispatch *item([in] int i);
+};
+//! [4]
+
+
+//! [5]
+QAxObject object("<CLSID>");
+
+QString text = object.property("text").toString();
+object.setProperty("font", QFont("Times New Roman", 12));
+
+connect(this, SIGNAL(clicked(int)), &object, SLOT(showColumn(int)));
+bool ok = object.dynamicCall("addColumn(const QString&)", "Column 1").toBool();
+
+QList<QVariant> varlist;
+QList<QVariant> parameters;
+parameters << QVariant(varlist);
+int n = object.dynamicCall("fillList(QList<QVariant>&)", parameters).toInt();
+
+QAxObject *item = object.querySubItem("item(int)", 5);
+//! [5]
+
+
+//! [6]
+IUnknown *iface = 0;
+activeX->queryInterface(IID_IUnknown, (void**)&iface);
+if (iface) {
+    // use the interface
+    iface->Release();
+}
+//! [6]
+
+
+//! [7]
+ctrl->setControl("{8E27C92B-1264-101C-8A2F-040224009C02}");
+//! [7]
+
+
+//! [8]
+ctrl->setControl("MSCal.Calendar");
+//! [8]
+
+
+//! [9]
+ctrl->setControl("Calendar Control 9.0");
+//! [9]
+
+
+//! [10]
+ctrl->setControl("c:/files/file.doc");
+//! [10]
+
+
+//! [11]
+<domain/username>:<password>@server/{8E27C92B-1264-101C-8A2F-040224009C02}
+//! [11]
+
+
+//! [12]
+{8E27C92B-1264-101C-8A2F-040224009C02}:<LicenseKey>
+//! [12]
+
+
+//! [13]
+{8E27C92B-1264-101C-8A2F-040224009C02}&
+//! [13]
+
+
+//! [14]
+ctrl->setControl("DOMAIN/user:password@server/{8E27C92B-1264-101C-8A2F-040224009C02}:LicenseKey");
+//! [14]
+
+
+//! [15]
+activeX->dynamicCall("Navigate(const QString&)", "qt.nokia.com");
+//! [15]
+
+
+//! [16]
+activeX->dynamicCall("Navigate(\"qt.nokia.com\")");
+//! [16]
+
+
+//! [17]
+activeX->dynamicCall("Value", 5);
+QString text = activeX->dynamicCall("Text").toString();
+//! [17]
+
+
+//! [18]
+IWebBrowser2 *webBrowser = 0;
+activeX->queryInterface(IID_IWebBrowser2, (void **)&webBrowser);
+if (webBrowser) {
+    webBrowser->Navigate2(pvarURL);
+    webBrowser->Release();
+}
+//! [18]
+
+
+//! [19]
+QAxWidget outlook("Outlook.Application");
+QAxObject *session = outlook.querySubObject("Session");
+if (session) {
+    QAxObject *defFolder = session->querySubObject(
+			    "GetDefaultFolder(OlDefaultFolders)",
+			    "olFolderContacts");
+    //...
+}
+//! [19]
+
+
+//! [20]
+void Receiver::slot(const QString &name, int argc, void *argv)
+{
+    VARIANTARG *params = (VARIANTARG*)argv;
+    if (name.startsWith("BeforeNavigate2(")) {
+	IDispatch *pDisp = params[argc-1].pdispVal;
+	VARIANTARG URL = *params[argc-2].pvarVal;
+	VARIANTARG Flags = *params[argc-3].pvarVal;
+	VARIANTARG TargetFrameName = *params[argc-4].pvarVal;
+	VARIANTARG PostData = *params[argc-5].pvarVal;
+	VARIANTARG Headers = *params[argc-6].pvarVal;
+	bool *Cancel = params[argc-7].pboolVal;
+    }
+}
+//! [20]
diff --git a/src/activeqt/doc/snippets/src_activeqt_container_qaxscript.cpp b/src/activeqt/doc/snippets/src_activeqt_container_qaxscript.cpp
new file mode 100644
index 0000000..b9df5d2
--- /dev/null
+++ b/src/activeqt/doc/snippets/src_activeqt_container_qaxscript.cpp
@@ -0,0 +1,58 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/legal
+**
+** This file is part of the documentation of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:BSD$
+** You may use this file under the terms of the BSD license as follows:
+**
+** "Redistribution and use in source and binary forms, with or without
+** modification, are permitted provided that the following conditions are
+** met:
+**   * Redistributions of source code must retain the above copyright
+**     notice, this list of conditions and the following disclaimer.
+**   * Redistributions in binary form must reproduce the above copyright
+**     notice, this list of conditions and the following disclaimer in
+**     the documentation and/or other materials provided with the
+**     distribution.
+**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
+**     of its contributors may be used to endorse or promote products derived
+**     from this software without specific prior written permission.
+**
+**
+** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+//! [0]
+function setNumber(number)
+{
+    n = number;
+}
+//! [0]
+
+
+//! [1]
+QValueList args;
+args << 5;
+script->call("setNumber(const QVariant&)", args);
+//! [1]
+
+
+//! [2]
+script->call("setNumber(5)");
+//! [2]
diff --git a/src/activeqt/doc/snippets/src_activeqt_container_qaxselect.cpp b/src/activeqt/doc/snippets/src_activeqt_container_qaxselect.cpp
new file mode 100644
index 0000000..25e8599
--- /dev/null
+++ b/src/activeqt/doc/snippets/src_activeqt_container_qaxselect.cpp
@@ -0,0 +1,48 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/legal
+**
+** This file is part of the documentation of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:BSD$
+** You may use this file under the terms of the BSD license as follows:
+**
+** "Redistribution and use in source and binary forms, with or without
+** modification, are permitted provided that the following conditions are
+** met:
+**   * Redistributions of source code must retain the above copyright
+**     notice, this list of conditions and the following disclaimer.
+**   * Redistributions in binary form must reproduce the above copyright
+**     notice, this list of conditions and the following disclaimer in
+**     the documentation and/or other materials provided with the
+**     distribution.
+**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
+**     of its contributors may be used to endorse or promote products derived
+**     from this software without specific prior written permission.
+**
+**
+** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+//! [0]
+QAxSelect select;
+if (select.exec()) {
+    QAxWidget *container = new QAxWidget;
+    container->setControl(select.clsid());
+    container->show();
+}
+//! [0]
diff --git a/src/activeqt/doc/snippets/src_activeqt_control_qaxbindable.cpp b/src/activeqt/doc/snippets/src_activeqt_control_qaxbindable.cpp
new file mode 100644
index 0000000..ae4d094
--- /dev/null
+++ b/src/activeqt/doc/snippets/src_activeqt_control_qaxbindable.cpp
@@ -0,0 +1,100 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/legal
+**
+** This file is part of the documentation of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:BSD$
+** You may use this file under the terms of the BSD license as follows:
+**
+** "Redistribution and use in source and binary forms, with or without
+** modification, are permitted provided that the following conditions are
+** met:
+**   * Redistributions of source code must retain the above copyright
+**     notice, this list of conditions and the following disclaimer.
+**   * Redistributions in binary form must reproduce the above copyright
+**     notice, this list of conditions and the following disclaimer in
+**     the documentation and/or other materials provided with the
+**     distribution.
+**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
+**     of its contributors may be used to endorse or promote products derived
+**     from this software without specific prior written permission.
+**
+**
+** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+//! [0]
+class MyActiveX : public QWidget, public QAxBindable
+{
+    Q_OBJECT
+    Q_PROPERTY(int value READ value WRITE setValue)
+
+public:
+    MyActiveX(QWidget *parent = 0);
+    ...
+
+    int value() const;
+    void setValue(int);
+};
+//! [0]
+
+
+//! [1]
+void MyActiveQt::setText(const QString &text)
+{
+    if (!requestPropertyChange("text"))
+        return;
+
+    // update property
+
+    propertyChanged("text");
+}
+//! [1]
+
+
+//! [2]
+long AxImpl::queryInterface(const QUuid &iid, void **iface)
+{
+    *iface = 0;
+    if (iid == IID_ISomeCOMInterface)
+        *iface = (ISomeCOMInterface*)this;
+    else
+        return E_NOINTERFACE;
+
+    AddRef();
+    return S_OK;
+}
+//! [2]
+
+
+//! [3]
+HRESULT AxImpl::QueryInterface(REFIID iid, void **iface)
+{
+    return controllingUnknown()->QueryInterface(iid, iface);
+}
+
+ulong AxImpl::AddRef()
+{
+    return controllingUnknown()->AddRef();
+}
+
+ulong AxImpl::Release()
+{
+    return controllingUnknown()->Release();
+}
+//! [3]
diff --git a/src/activeqt/doc/snippets/src_activeqt_control_qaxfactory.cpp b/src/activeqt/doc/snippets/src_activeqt_control_qaxfactory.cpp
new file mode 100644
index 0000000..775998d
--- /dev/null
+++ b/src/activeqt/doc/snippets/src_activeqt_control_qaxfactory.cpp
@@ -0,0 +1,195 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/legal
+**
+** This file is part of the documentation of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:BSD$
+** You may use this file under the terms of the BSD license as follows:
+**
+** "Redistribution and use in source and binary forms, with or without
+** modification, are permitted provided that the following conditions are
+** met:
+**   * Redistributions of source code must retain the above copyright
+**     notice, this list of conditions and the following disclaimer.
+**   * Redistributions in binary form must reproduce the above copyright
+**     notice, this list of conditions and the following disclaimer in
+**     the documentation and/or other materials provided with the
+**     distribution.
+**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
+**     of its contributors may be used to endorse or promote products derived
+**     from this software without specific prior written permission.
+**
+**
+** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+//! [0]
+QStringList ActiveQtFactory::featureList() const
+{
+    QStringList list;
+    list << "ActiveX1";
+    list << "ActiveX2";
+    return list;
+}
+
+QObject *ActiveQtFactory::createObject(const QString &key)
+{
+    if (key == "ActiveX1")
+        return new ActiveX1(parent);
+    if (key == "ActiveX2")
+        return new ActiveX2(parent);
+    return 0;
+}
+
+const QMetaObject *ActiveQtFactory::metaObject(const QString &key) const
+{
+    if (key == "ActiveX1")
+        return &ActiveX1::staticMetaObject;
+    if (key == "ActiveX2")
+        return &ActiveX2::staticMetaObject;
+}
+
+QUuid ActiveQtFactory::classID(const QString &key) const
+{
+    if (key == "ActiveX1")
+        return "{01234567-89AB-CDEF-0123-456789ABCDEF}";
+    ...
+    return QUuid();
+}
+
+QUuid ActiveQtFactory::interfaceID(const QString &key) const
+{
+    if (key == "ActiveX1")
+        return "{01234567-89AB-CDEF-0123-456789ABCDEF}";
+    ...
+    return QUuid();
+}
+
+QUuid ActiveQtFactory::eventsID(const QString &key) const
+{
+    if (key == "ActiveX1")
+        return "{01234567-89AB-CDEF-0123-456789ABCDEF}";
+    ...
+    return QUuid();
+}
+
+QAXFACTORY_EXPORT(
+    ActiveQtFactory,			      // factory class
+    "{01234567-89AB-CDEF-0123-456789ABCDEF}", // type library ID
+    "{01234567-89AB-CDEF-0123-456789ABCDEF}"  // application ID
+)
+//! [0]
+
+
+//! [1]
+QAXFACTORY_BEGIN(
+    "{01234567-89AB-CDEF-0123-456789ABCDEF}", // type library ID
+    "{01234567-89AB-CDEF-0123-456789ABCDEF}"  // application ID
+)
+    QAXCLASS(Class1)
+    QAXCLASS(Class2)
+QAXFACTORY_END()
+//! [1]
+
+
+//! [2]
+#include <qapplication.h>
+#include <qaxfactory.h>
+
+#include "theactivex.h"
+
+QAXFACTORY_DEFAULT(
+    TheActiveX,				  // widget class
+    "{01234567-89AB-CDEF-0123-456789ABCDEF}", // class ID
+    "{01234567-89AB-CDEF-0123-456789ABCDEF}", // interface ID
+    "{01234567-89AB-CDEF-0123-456789ABCDEF}", // event interface ID
+    "{01234567-89AB-CDEF-0123-456789ABCDEF}", // type library ID
+    "{01234567-89AB-CDEF-0123-456789ABCDEF}"  // application ID
+)
+//! [2]
+
+
+//! [3]
+settings->setValue("/CLSID/" + classID(key)
+                   + "/Implemented Categories/"
+                   + "/{00000000-0000-0000-000000000000}/.",
+                   QString());
+//! [3]
+
+
+//! [4]
+settings->remove("/CLSID/" + classID(key)
+                 + "/Implemented Categories"
+                 + "/{00000000-0000-0000-000000000000}/.");
+//! [4]
+
+
+//! [5]
+int main(int argc, char *argv[])
+{
+    QApplication app(argc, argv);
+    if (!QAxFactory::isServer()) {
+        // initialize for stand-alone execution
+    }
+    return app.exec();
+}
+//! [5]
+
+
+//! [6]
+if (QAxFactory::isServer()) {
+    QAxFactory::stopServer();
+    QAxFactory::startServer(QAxFactory::SingleInstance);
+}
+//! [6]
+
+
+//! [7]
+#include <qaxfactory.h>
+
+#include "theactivex.h"
+
+QAXFACTORY_DEFAULT(
+    TheActiveX,				  // widget class
+    "{01234567-89AB-CDEF-0123-456789ABCDEF}", // class ID
+    "{01234567-89AB-CDEF-0123-456789ABCDEF}", // interface ID
+    "{01234567-89AB-CDEF-0123-456789ABCDEF}", // event interface ID
+    "{01234567-89AB-CDEF-0123-456789ABCDEF}", // type library ID
+    "{01234567-89AB-CDEF-0123-456789ABCDEF}"  // application ID
+)
+//! [7]
+
+
+//! [8]
+QAXFACTORY_EXPORT(
+    MyFactory,			              // factory class
+    "{01234567-89AB-CDEF-0123-456789ABCDEF}", // type library ID
+    "{01234567-89AB-CDEF-0123-456789ABCDEF}"  // application ID
+)
+//! [8]
+
+
+//! [9]
+QAXFACTORY_BEGIN(
+    "{01234567-89AB-CDEF-0123-456789ABCDEF}", // type library ID
+    "{01234567-89AB-CDEF-0123-456789ABCDEF}"  // application ID
+)
+    QAXCLASS(Class1)
+    QAXCLASS(Class2)
+QAXFACTORY_END()
+//! [9]
diff --git a/src/activeqt/doc/src/examples/comapp.qdoc b/src/activeqt/doc/src/examples/comapp.qdoc
new file mode 100644
index 0000000..1c26a25
--- /dev/null
+++ b/src/activeqt/doc/src/examples/comapp.qdoc
@@ -0,0 +1,110 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/legal
+**
+** This file is part of the documentation of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:FDL$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and Digia.  For licensing terms and
+** conditions see http://qt.digia.com/licensing.  For further information
+** use the contact form at http://qt.digia.com/contact-us.
+**
+** GNU Free Documentation License Usage
+** Alternatively, this file may be used under the terms of the GNU Free
+** Documentation License version 1.3 as published by the Free Software
+** Foundation and appearing in the file included in the packaging of
+** this file.  Please review the following information to ensure
+** the GNU Free Documentation License version 1.3 requirements
+** will be met: http://www.gnu.org/copyleft/fdl.html.
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+/*!
+    \example activeqt/comapp
+    \title COM App Example (ActiveQt)
+
+    The COM App example shows how to use ActiveQt to develop a Qt
+    application that can be automated via COM. Different QObject
+    based classes are exposed as COM objects that communicate with the
+    GUI of the running Qt application. The APIs of those COM objects
+    has been designed to resemble the APIs of standard COM
+    applications; i.e. those from Microsoft Office.
+
+    \snippet examples/activeqt/comapp/main.cpp 2
+    The first class \c Application represents the application object. It
+    exposes read-only properties \c documents and \c id to get access to the
+    list of documents, and an identifier. A read/write property \c visible
+    controls whether the QTabWidget-based user interface of the application 
+    should be visible, and a slot \c quit() terminates the application.
+
+    The \e RegisterObject attribute is set to make sure that instances of this
+    class are registered in COM's running object table (ROT) - this allows COM
+    clients to connect to an already instantiated COM object.
+
+    \snippet examples/activeqt/comapp/main.cpp 1
+    The \c DocumentList class stores a list of documents. It provides an API
+    to read the number of documents, to access each document by index and to 
+    create a new document. The \c application property returns the root object.
+
+    \snippet examples/activeqt/comapp/main.cpp 0
+
+    The \c Document class finally represents a document in the application.
+    Each document is represented by a page in the application's tab widget, and
+    has a title that is readable and writable through the document's API.
+    The \c application property again returns the root object.
+
+    \snippet examples/activeqt/comapp/main.cpp 3
+    The implementation of the \c Document class creates a new page for the tab
+    widget, and uses the title of that page for the title property. The page 
+    is deleted when the document is deleted.
+
+    \snippet examples/activeqt/comapp/main.cpp 4
+    The \c DocumentList implementation is straightforward.
+
+    \snippet examples/activeqt/comapp/main.cpp 5
+    The \c Application class initializes the user interface in the constructor,
+    and shows and hides it in the implementation of \c setVisible(). The object
+    name (accessible through the \c id property) is set to \c "From QAxFactory" 
+    to indicate that this COM object has been created by COM. Note that there is 
+    no destructor that would delete the QTabWidget - this is instead done in the 
+    \c quit() slot, before calling QApplication::quit() through a single-shot-timer, 
+    which is necessary ensure that the COM call to the slot is complete.
+
+    \snippet examples/activeqt/comapp/main.cpp 6
+    The classes are exported from the server using the QAxFactory macros. Only
+    \c Application objects can be instantiated from outside - the other APIs can
+    only be used after accessing the respective objects throught the \c Application
+    API.
+
+    \snippet examples/activeqt/comapp/main.cpp 7
+    The main() entry point function creates a QApplication, and just enters the
+    event loop if the application has been started by COM. If the application
+    has been started by the user, then the \c Application object is created and 
+    the object name is set to "From Application". Then the COM server is started,
+    and the application object is registered with COM. It is now accessible to
+    COM clients through the client-specific APIs.
+
+    Application exiting is controlled explicitly - if COM started the application, 
+    then the client code has to call quit(); if the user started the application,
+    then the application terminates when the last window has been closed.
+
+    Finally, the user interface is made visible, and the event loop is started.
+
+    A simple Visual Basic application could now access this Qt application. In VB,
+    start a new "Standard Exe" project and add a project reference to the comappLib
+    type library. Create a form with a listbox "DocumentList", a static label 
+    "DocumentsCount" and a command button "NewDocument". Finally, implement the code 
+    for the form like this:
+
+    \snippet doc/src/snippets/code/doc_src_examples_activeqt_comapp.qdoc 0
+
+    To build the example you must first build the QAxServer library.
+    Then run \c qmake and your make tool in
+    \c{examples\activeqt\comapp}.
+*/
diff --git a/src/activeqt/doc/src/examples/dotnet.qdoc b/src/activeqt/doc/src/examples/dotnet.qdoc
new file mode 100644
index 0000000..2f522c1
--- /dev/null
+++ b/src/activeqt/doc/src/examples/dotnet.qdoc
@@ -0,0 +1,335 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/legal
+**
+** This file is part of the documentation of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:FDL$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and Digia.  For licensing terms and
+** conditions see http://qt.digia.com/licensing.  For further information
+** use the contact form at http://qt.digia.com/contact-us.
+**
+** GNU Free Documentation License Usage
+** Alternatively, this file may be used under the terms of the GNU Free
+** Documentation License version 1.3 as published by the Free Software
+** Foundation and appearing in the file included in the packaging of
+** this file.  Please review the following information to ensure
+** the GNU Free Documentation License version 1.3 requirements
+** will be met: http://www.gnu.org/copyleft/fdl.html.
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+/*!
+    \page activeqt-dotnet.html
+    \title Dot Net Example (ActiveQt)
+
+    The Dot Net example demonstrates how Qt objects can be used in a
+    .NET environment, and how .NET objects can be used in a Qt
+    environment.
+
+    Contents:
+
+    \tableofcontents
+
+    \section1 Qt vs. .NET
+
+    Qt is a C++ library and is compiled into traditional, native
+    binaries that make full use of the performance provided by the
+    runtime environment.
+
+    One of the key concepts of .NET is the idea of "intermediate language
+    code" - the source code is compiled into a bytecode format, and at
+    runtime, that bytecode is executed in a virtual machine - the \e
+    {Common Language Runtime} (CLR).
+
+    Another key concept is that of \e {managed code}. This is essentially
+    intermediate language code written in such a way that the CLR can take
+    care of the memory management, i.e. the CLR will do automatic garbage
+    collection, so the application code does not need to explicitly free
+    the memory for unused objects.
+
+    The MS compilers for C# and VB.NET will only produce managed
+    code. Such programs cannot directly call normal, native functions
+    or classes. \footnote The .NET framework provides Platform Invocation
+    Services - P/Invoke - that enable managed code to call native C (not
+    C++) functions located in DLLs directly. The resulting application
+    then becomes partially unmanaged.\endfootnote
+
+    The MS C++ compiler for .NET on the other hand, can produce both
+    normal and managed code. To write a C++ class that can be compiled
+    into managed code, the developer must flag the class as managed using
+    the \c __gc keyword, and restrict the code to only use the subset of
+    C++ known as "Managed Extensions for C++", or MC++ for short. The
+    advantage is that MC++ code can freely call and use normal C++
+    functions and classes. And it also works the other way around: normal
+    C++ code can call managed functions and use managed classes (e.g. the
+    entire .NET framework class library), including managed functions and
+    classes implemented in C# or VB.NET. This feature of mixing managed
+    and normal C++ code immensely eases the interoperability with .NET,
+    and is by Microsoft referred to as the "It Just Works" (IJW) feature.
+
+    This document demonstrates two different ways of integrating normal
+    C++ code (that uses Qt) with managed .NET code. First, the manual way
+    is presented, which includes using a thin MC++ wrapper class around
+    the normal Qt/C++ class. Then, the automated way is presented, which
+    utilizes the ActiveQt framework as a generic bridge. The advantage of
+    the first method is that it gives the application developer full
+    control, while the second method requires less coding and relieves the
+    developer of dealing with the conversion between managed and normal
+    data objects.
+
+    The impatient reader, who right away wants to see a QPushButton
+    and a custom Qt widget (\l{activeqt/multiple}{QAxWidget2}) run in
+    a .NET GUI application is referred to the example directory of
+    ActiveQt. It contains the result of this walkthrough using both
+    C# and VB.NET, created with Visual Studio .NET (not 2003).
+    Load \c {examples/dotnet/walkthrough/csharp.csproj},
+    \c {examples/dotnet/walkthrough/vb.vbproj}
+    or \c {examples/dotnet/wrapper/wrapper.sln} into the IDE and run
+    the solution.
+
+    \b{Remark:} You will notice that in the generated code the following line is
+    commented out:
+
+    \snippet doc/src/snippets/code/doc_src_examples_activeqt_dotnet.qdoc 0
+
+    This line is regenerated without comment whenever you change the
+    dialog, in which case you have to comment it out again to be able
+    to run the project. This is a bug in the original version of
+    Visual Studio.NET, and is fixed in the 2003 edition.
+
+    \section1 Walkthrough: .NET interop with MC++ and IJW
+
+    Normal C++ classes and functions can be used from managed .NET code by
+    providing thin wrapper classes written in MC++. The wrapper class will
+    take care of forwarding the calls to the normal C++ functions or
+    methods, and converting parameter data as necessary. Since the wrapper
+    class is a managed class, it can be used without further ado in any
+    managed .NET application, whether written in C#, VB.NET, MC++ or other
+    managed programming language.
+
+    \snippet examples/activeqt/dotnet/wrapper/lib/worker.h 0
+
+    The Qt class has nothing unusual for Qt users, and as even the Qt
+    specialities like \c Q_PROPERTY, \c slots and \c signals are
+    implemented with straight C++ they don't cause any trouble when
+    compiling this class with any C++ compiler.
+
+    \snippet examples/activeqt/dotnet/wrapper/lib/networker.h 0
+
+    The .NET wrapper class uses keywords that are part of MC++ to indicate
+    that the class is managed/garbage collected (\c {__gc}), and that \c
+    StatusString should be accessible as a property in languages that
+    support this concept (\c {__property}).  We also declare an event
+    function \c statusStringChanged(String*) (\c {__event}), the
+    equivalent of the respective signal in the Qt class.
+
+    Before we can start implementing the wrapper class we need a way to
+    convert Qt's datatypes (and potentionally your own) into .NET
+    datatypes, e.g. \c QString objects need to be converted into objects
+    of type \c {String*}.
+
+    When operating on managed objects in normal C++ code, a little extra
+    care must be taken because of the CLR's garbage collection. A normal
+    pointer variable should not \footnote Indeed, the compiler will in
+    many cases disallow it. \endfootnote be used to refer to a managed
+    object. The reason is that the garbage collection can kick in at any
+    time and move the object to another place on the heap, leaving you
+    with an invalid pointer.
+
+    However, two methods are provided that solves this problem easily. The
+    first is to use a \e pinned pointer, i.e. declare the pointer variable
+    with the \c __pin keyword. This guarantees that the object pointed to
+    will not be moved by the garbage collector. It is recommended that
+    this method not be used to keep a references to managed objects for a
+    long time, since it will decrease the efficiency of the garbage
+    collector. The second way is to use the \c gcroot smartpointer
+    template type. This lets you create safe pointers to managed
+    objects. E.g. a variable of type \c gcroot<String> will always point
+    to the String object, even if it has been moved by the garbage
+    collector, and it can be used just like a normal pointer.
+
+    \snippet examples/activeqt/dotnet/wrapper/lib/tools.cpp 0
+    \codeline
+    \snippet examples/activeqt/dotnet/wrapper/lib/tools.cpp 1
+
+    The convertor functions can then be used in the wrapper class
+    implementation to call the functions in the native C++ class.
+
+    \snippet examples/activeqt/dotnet/wrapper/lib/networker.cpp 0
+    \codeline
+    \snippet examples/activeqt/dotnet/wrapper/lib/networker.cpp 1
+
+    The constructor and destructor simply create and destroy the Qt
+    object wrapped using the C++ operators \c new and \c delete.
+
+    \snippet examples/activeqt/dotnet/wrapper/lib/networker.cpp 2
+
+    The netWorker class delegates calls from the .NET code to the native
+    code. Although the transition between those two worlds implies a small
+    performance hit for each function call, and for the type conversion,
+    this should be negligible since we are anyway going to run within the
+    CLR.
+
+    \snippet examples/activeqt/dotnet/wrapper/lib/networker.cpp 3
+
+    The property setter calls the native Qt class before firing the
+    event using the \c __raise keyword.
+
+    This wrapper class can now be used in .NET code, e.g. using C++, C#,
+    Visual Basic or any other programming language available for .NET.
+
+    \snippet examples/activeqt/dotnet/wrapper/main.cs 0
+    \snippet examples/activeqt/dotnet/wrapper/main.cs 1
+    \snippet examples/activeqt/dotnet/wrapper/main.cs 2
+    \snippet examples/activeqt/dotnet/wrapper/main.cs 3
+
+    \section1 Walkthrough: .NET/COM Interop with ActiveQt
+
+    Fortunately .NET provides a generic wrapper for COM objects, the
+    \e {Runtime Callable Wrapper} (RCW). This RCW is a proxy for the
+    COM object and is generated by the CLR when a .NET Framework client
+    activates a COM object. This provides a generic way to reuse COM
+    objects in a .NET Framework project.
+
+    Making a QObject class into a COM object is easily achieved with
+    ActiveQt and demonstrated in the QAxServer examples (e.g., the
+    \l{activeqt/simple}{Simple} example). The walkthrough will use
+    the Qt classes implemented in those examples, so the first thing
+    to do is to make sure that those  examples have been built
+    correctly, e.g. by opening the
+    \l{qaxserver-demo-multiple.html}{demonstration pages} in Internet
+    Explorer to verify that the controls are functional.
+
+    \section2 Starting a Project
+
+    Start Visual Studio.NET, and create a new C# project for writing a
+    Windows application. This will present you with an empty form in
+    Visual Studio's dialog editor. You should see the toolbox, which
+    presents you with a number of available controls and objects in
+    different categories. If you right-click on the toolbox it allows
+    you to add new tabs. We will add the tab "Qt".
+
+    \section2 Importing Qt Widgets
+
+    The category only has a pointer tool by default, and we have to add
+    the Qt objects we want to use in our form. Right-click on the empty
+    space, and select "Customize". This opens a dialog that has two
+    tabs, "COM Components" and ".NET Framework Components". We used
+    ActiveQt to wrap QWidgets into COM objects, so we select the "COM
+    Components" page, and look for the classes we want to use, e.g.
+    "QPushButton" and "QAxWidget2".
+
+    When we select those widgets and close the dialog the two widgets
+    will now be available from the toolbox as grey squares with their
+    name next to it \footnote Icons could be added by modifying the
+    way the controls register themselves. \endfootnote.
+
+    \section2 Using Qt Widgets
+
+    We can now add an instance of QAxWidget2 and a QPushButton to
+    the form. Visual Studio will automatically generate the RCW for the
+    object servers. The QAxWidget2 instance takes most of the upper
+    part of the form, with the QPushButton in the lower right corner.
+
+    In the property editor of Visual Studio we can modify the properties
+    of our controls - QPushButton exposes the \c QWidget API and has many
+    properties, while QAxWidget2 has only the Visual Studio standard
+    properties in addition to its own property "lineWidth" in the
+    "Miscellaneous" category. The objects are named "axQPushButton1" and
+    "axQAxWidget21", and since especially the last name is a bit
+    confusing we rename the objects to "resetButton" and "circleWidget".
+
+    We can also change the Qt properties, e.g. set the "text" property
+    of the \c resetButton to "Reset", and the "lineWidth" property of the
+    \c circleWidget to 5. We can also put those objects into the layout
+    system that Visual Studio's dialog editor provides, e.g. by setting
+    the anchors of the \c circleWidget to "Left, Top, Right, Bottom", and
+    the anchors of the \c resetButton to "Bottom, Right".
+
+    Now we can compile and start the project, which will open a user
+    interface with our two Qt widgets. If we can resize the dialog,
+    the widgets will resize appropriately.
+
+    \section2 Handling Qt Signals
+
+    We will now implement event handlers for the widgets. Select the
+    \c circleWidget and select the "Events" page in the property
+    editor. The widget exposes events because the QAxWidget2 class has
+    the "StockEvents" attribute set in its class definition. We implement
+    the event handler \c circleClicked for the \c ClickEvent to increase
+    the line width by one for every click:
+
+    \snippet examples/activeqt/dotnet/walkthrough/Form1.cs 0
+
+    In general we can implement a default event handler by double
+    clicking on the widget in the form, but the default events for
+    our widgets are right now not defined.
+
+    We will also implement an event handler for the \c clicked signal
+    emitted by QPushButton. Add the event handler \c resetLineWidth to
+    the \c clicked event, and implement the generated function:
+
+    \snippet examples/activeqt/dotnet/walkthrough/Form1.cs 1
+
+    We reset the property to 1, and also call the \c setFocus() slot
+    to simulate the user style on Windows, where a button grabs focus
+    when you click it (so that you can click it again with the spacebar).
+
+    If we now compile and run the project we can click on the circle
+    widget to increase its line width, and press the reset button to
+    set the line width back to 1.
+
+    \section1 Summary
+
+    Using ActiveQt as a universal interoperability bridge between the
+    .NET world and the native world of Qt is very easy, and makes it
+    often  unnecessary to implement a lot of handwritten wrapper classes.
+    Instead, the QAxFactory implementation in the otherwise completely
+    cross-platform Qt project provides the glue that .NET needs to to
+    generate the RCW.
+
+    If this is not sufficient we can implement our own wrapper classes
+    thanks to the C++ extensions provided by Microsoft.
+
+    \section2 Limitations
+
+    All the limitations when using ActiveQt are implied when using this
+    technique to interoperate with .NET, e.g. the datatypes we can use
+    in the APIs can only be those supported by ActiveQt and COM. However,
+    since this includes subclasses of QObject and QWidget we can wrap
+    any of our datatypes into a QObject subclass to make its API
+    available to .NET. This has the positive side effect that the same
+    API is automatically available in
+    \l{http://qt.nokia.com/products/qsa/}{QSA}, the cross platform
+    scripting solution for Qt applications, and to COM clients in general.
+
+    When using the "IJW" method, in principle the only limitation is the
+    time required to write the wrapper classes and data type conversion
+    functions.
+
+    \section2 Performance Considerations
+
+    Every call from CLR bytecode to native code implies a small
+    performance hit, and necessary type conversions introduce an
+    additional delay with every layer that exists between the two
+    frameworks. Consequently every approach to mix .NET and native
+    code should try to minimize the communication necessary between
+    the different worlds.
+
+    As ActiveQt introduces three layers at once - the RCW, COM and finally
+    ActiveQt itself - the performance penalty when using the generic
+    Qt/ActiveQt/COM/RCW/.NET bridge is larger than when using a
+    hand-crafted IJW-wrapper class. The execution speed however is still
+    sufficient for connecting to and modifying interactive elements in a
+    user interface, and as soon as the benefit of using Qt and C++ to
+    implement and compile performance critical algorithms into native code
+    kicks in, ActiveQt becomes a valid choice for making even non-visual
+    parts of your application accessible to .NET.
+*/
diff --git a/src/activeqt/doc/src/examples/hierarchy-demo-snippet.qdoc b/src/activeqt/doc/src/examples/hierarchy-demo-snippet.qdoc
new file mode 100644
index 0000000..9e62d2b
--- /dev/null
+++ b/src/activeqt/doc/src/examples/hierarchy-demo-snippet.qdoc
@@ -0,0 +1,68 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/legal
+**
+** This file is part of the documentation of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:FDL$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and Digia.  For licensing terms and
+** conditions see http://qt.digia.com/licensing.  For further information
+** use the contact form at http://qt.digia.com/contact-us.
+**
+** GNU Free Documentation License Usage
+** Alternatively, this file may be used under the terms of the GNU Free
+** Documentation License version 1.3 as published by the Free Software
+** Foundation and appearing in the file included in the packaging of
+** this file.  Please review the following information to ensure
+** the GNU Free Documentation License version 1.3 requirements
+** will be met: http://www.gnu.org/copyleft/fdl.html.
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+//! [script]
+<script language="javascript">
+function createSubWidget( form )
+{
+    ParentWidget.createSubWidget( form.nameEdit.value );
+}
+
+function renameSubWidget( form )
+{
+    var SubWidget = ParentWidget.subWidget( form.nameEdit.value );
+    if ( !SubWidget ) {
+        alert( "No such widget " + form.nameEdit.value + "!" );
+        return;
+    }
+    SubWidget.label = form.labelEdit.value;
+    form.nameEdit.value = SubWidget.label;
+}
+
+function setFont( form )
+{
+    ParentWidget.font = form.fontEdit.value;
+}
+</script>
+
+<p>
+This widget can have many children!
+</p>
+<object ID="ParentWidget" CLASSID="CLSID:d574a747-8016-46db-a07c-b2b4854ee75c"
+CODEBASE="http://qt.nokia.com/demos/hierarchy.cab">
+[Object not available! Did you forget to build and register the server?]
+</object><br />
+<form>
+<input type="edit" ID="nameEdit" value="&lt;enter object name&gt;" />
+<input type="button" value="Create" onClick="createSubWidget(this.form)" />
+<input type="edit" ID="labelEdit" />
+<input type="button" value="Rename" onClick="renameSubWidget(this.form)" />
+<br />
+<input type="edit" ID="fontEdit" value="MS Sans Serif" />
+<input type="button" value = "Set Font" onClick="setFont(this.form)" />
+</form>
+//! [script]
diff --git a/src/activeqt/doc/src/examples/hierarchy-demo.qdocinc b/src/activeqt/doc/src/examples/hierarchy-demo.qdocinc
new file mode 100644
index 0000000..86bfd87
--- /dev/null
+++ b/src/activeqt/doc/src/examples/hierarchy-demo.qdocinc
@@ -0,0 +1,41 @@
+\raw HTML
+<script language="javascript">
+function createSubWidget( form )
+{
+    ParentWidget.createSubWidget( form.nameEdit.value );
+}
+
+function renameSubWidget( form )
+{
+    var SubWidget = ParentWidget.subWidget( form.nameEdit.value );
+    if ( !SubWidget ) {
+        alert( "No such widget " + form.nameEdit.value + "!" );
+        return;
+    }
+    SubWidget.label = form.labelEdit.value;
+    form.nameEdit.value = SubWidget.label;
+}
+
+function setFont( form )
+{
+    ParentWidget.font = form.fontEdit.value;
+}
+</script>
+
+<p>
+This widget can have many children!
+</p>
+<object ID="ParentWidget" CLASSID="CLSID:d574a747-8016-46db-a07c-b2b4854ee75c"
+CODEBASE="http://qt.nokia.com/demos/hierarchy.cab">
+[Object not available! Did you forget to build and register the server?]
+</object><br />
+<form>
+<input type="edit" ID="nameEdit" value="&lt;enter object name&gt;" />
+<input type="button" value="Create" onClick="createSubWidget(this.form)" />
+<input type="edit" ID="labelEdit" />
+<input type="button" value="Rename" onClick="renameSubWidget(this.form)" />
+<br />
+<input type="edit" ID="fontEdit" value="MS Sans Serif" />
+<input type="button" value = "Set Font" onClick="setFont(this.form)" />
+</form>
+\endraw
diff --git a/src/activeqt/doc/src/examples/hierarchy.qdoc b/src/activeqt/doc/src/examples/hierarchy.qdoc
new file mode 100644
index 0000000..ef37856
--- /dev/null
+++ b/src/activeqt/doc/src/examples/hierarchy.qdoc
@@ -0,0 +1,88 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/legal
+**
+** This file is part of the documentation of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:FDL$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and Digia.  For licensing terms and
+** conditions see http://qt.digia.com/licensing.  For further information
+** use the contact form at http://qt.digia.com/contact-us.
+**
+** GNU Free Documentation License Usage
+** Alternatively, this file may be used under the terms of the GNU Free
+** Documentation License version 1.3 as published by the Free Software
+** Foundation and appearing in the file included in the packaging of
+** this file.  Please review the following information to ensure
+** the GNU Free Documentation License version 1.3 requirements
+** will be met: http://www.gnu.org/copyleft/fdl.html.
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+/*!
+    \page qaxserver-demo-hierarchy.html
+    \title Qt Widget Hierarchy
+
+    \input examples/hierarchy-demo.qdocinc
+*/
+
+/*!
+    \example activeqt/hierarchy
+    \title Hierarchy Example (ActiveQt)
+
+    The Hierarchy example is shows how to write an in-process ActiveX
+    control. The control is a QWidget subclass with child widgets
+    that are accessible as sub-types.
+
+    \snippet examples/activeqt/hierarchy/objects.h 0
+    The \c QParentWidget class provides slots to create a widget
+    with a name, and to return a pointer to a named widget. The class
+    declaration uses \c Q_CLASSINFO() to provide the COM identifiers for
+    this class.
+
+    \snippet examples/activeqt/hierarchy/objects.cpp 0
+    The constructor of QParentWidget creates a vertical box layout.
+    New child widgets are automatically added to the layout.
+
+    \snippet examples/activeqt/hierarchy/objects.cpp 1
+    The \c createSubWidget slot creates a new \c QSubWidget with
+    the name provided in the parameter, and sets the label to that
+    name. The widget is also shown explicitly.
+
+    \snippet examples/activeqt/hierarchy/objects.cpp 2
+    The \c subWidget slot uses the \c QObject::child() function and
+    returns the first child of type \c QSubWidget that has the requested
+    name.
+
+     \snippet examples/activeqt/hierarchy/objects.h 1
+    The \c QSubWidget class has a single string-property \c label,
+    and implements the paintEvent to draw the label. The class uses
+    again \c Q_CLASSINFO to provide the COM identifiers, and also sets
+    the \e ToSuperClass attribute to \e QSubWidget, to ensure that only
+    no slots of any superclasses (i.e. QWidget) are exposed.
+
+    \snippet examples/activeqt/hierarchy/objects.cpp 3
+    \snippet examples/activeqt/hierarchy/objects.cpp 4
+    The implementation of the QSubWidget class is self-explanatory.
+
+    \snippet examples/activeqt/hierarchy/main.cpp 0
+    The classes are then exported using a QAxFactory. \c QParentWidget is
+    exported as a full class (which can be created ), while \c QSubWidget is
+    only exported as a type, which can only be created indirectly through
+    APIs of \c QParentWidget.
+
+    To build the example you must first build the QAxServer library.
+    Then run qmake and your make tool in \c examples/activeqt/hierarchy.
+
+    The \l{qaxserver-demo-hierarchy.html}{demonstration} requires
+    your WebBrowser to support ActiveX controls, and scripting to be
+    enabled.
+
+    \snippet examples/hierarchy-demo-snippet.qdoc script
+*/
diff --git a/src/activeqt/doc/src/examples/menus.qdoc b/src/activeqt/doc/src/examples/menus.qdoc
new file mode 100644
index 0000000..e1d6c84
--- /dev/null
+++ b/src/activeqt/doc/src/examples/menus.qdoc
@@ -0,0 +1,60 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/legal
+**
+** This file is part of the documentation of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:FDL$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and Digia.  For licensing terms and
+** conditions see http://qt.digia.com/licensing.  For further information
+** use the contact form at http://qt.digia.com/contact-us.
+**
+** GNU Free Documentation License Usage
+** Alternatively, this file may be used under the terms of the GNU Free
+** Documentation License version 1.3 as published by the Free Software
+** Foundation and appearing in the file included in the packaging of
+** this file.  Please review the following information to ensure
+** the GNU Free Documentation License version 1.3 requirements
+** will be met: http://www.gnu.org/copyleft/fdl.html.
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+/*!
+    \page qaxserver-demo-menus.html
+    \preliminary
+
+    \title Menubar Merging
+
+    This example is not full functional at the moment.
+
+    \raw HTML
+    <object ID="QMenus" CLASSID="CLSID:4dc3f340-a6f7-44e4-a79b-3e9217695fbd"
+    CODEBASE="http://qt.nokia.com/demos/menusax.cab">
+    [Object not available! Did you forget to build and register the server?]
+    </object>
+    \endraw
+*/
+
+/*!
+    \example activeqt/menus
+    \title Menus Example (ActiveQt)
+
+    The Menus example demonstrates the use of QMenuBar and QStatusBar
+    in a QMainWindow to implement an in-place active control.
+
+    To build the example you must first build the QAxServer library.
+    Then run \c qmake and your make tool in \c
+    examples/activeqt/menus.
+
+    The \l{qaxserver-demo-menus.html}{demonstration} requires your
+    WebBrowser to support ActiveX controls, and scripting to be
+    enabled.
+
+    \snippet doc/src/snippets/code/doc_src_examples_activeqt_menus.qdoc 0
+*/
diff --git a/src/activeqt/doc/src/examples/multiple-demo.qdocinc b/src/activeqt/doc/src/examples/multiple-demo.qdocinc
new file mode 100644
index 0000000..339fc20
--- /dev/null
+++ b/src/activeqt/doc/src/examples/multiple-demo.qdocinc
@@ -0,0 +1,39 @@
+\raw HTML
+//! [0]
+<script language="javascript">
+function setColor( form )
+{
+    Ax1.fillColor = form.colorEdit.value;
+}
+
+function setWidth( form )
+{
+    Ax2.lineWidth = form.widthEdit.value;
+}
+</script>
+
+<p />
+This is one QWidget subclass:<br />
+<object ID="Ax1" CLASSID="CLSID:1D9928BD-4453-4bdd-903D-E525ED17FDE5"
+CODEBASE="http://qt.nokia.com/demos/multipleax.cab">
+[Object not available! Did you forget to build and register the server?]
+</object><br />
+<form>
+Fill Color: <input type="edit" ID="colorEdit" value = "red" />
+<input type="button" value = "Set" onClick="setColor(this.form)" />
+<input type="button" value = "Hide" onClick="Ax1.hide()" />
+<input type="button" value = "Show" onClick="Ax1.show()" />
+</form>
+
+<p />
+This is another QWidget subclass:<br />
+<object ID="Ax2" CLASSID="CLSID:58139D56-6BE9-4b17-937D-1B1EDEDD5B71"
+CODEBASE="http://qt.nokia.com/demos/multipleax.cab">
+[Object not available! Did you forget to build and register the server?]
+</object><br />
+<form>
+Line width: <input type="edit" ID="widthEdit" value = "1" />
+<input type="button" value = "Set" onClick="setWidth(this.form)" />
+</form>
+//! [0]
+\endraw
diff --git a/src/activeqt/doc/src/examples/multiple.qdoc b/src/activeqt/doc/src/examples/multiple.qdoc
new file mode 100644
index 0000000..99750c5
--- /dev/null
+++ b/src/activeqt/doc/src/examples/multiple.qdoc
@@ -0,0 +1,70 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/legal
+**
+** This file is part of the documentation of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:FDL$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and Digia.  For licensing terms and
+** conditions see http://qt.digia.com/licensing.  For further information
+** use the contact form at http://qt.digia.com/contact-us.
+**
+** GNU Free Documentation License Usage
+** Alternatively, this file may be used under the terms of the GNU Free
+** Documentation License version 1.3 as published by the Free Software
+** Foundation and appearing in the file included in the packaging of
+** this file.  Please review the following information to ensure
+** the GNU Free Documentation License version 1.3 requirements
+** will be met: http://www.gnu.org/copyleft/fdl.html.
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+/*!
+    \page qaxserver-demo-multiple.html
+    \title Two Simple Qt Widgets
+
+    \input examples/multiple-demo.qdocinc
+*/
+
+/*!
+    \example activeqt/multiple
+    \title Multiple Example (ActiveQt)
+
+    The Multiple example demonstrates the implementation of a
+    QAxFactory to provide multiple ActiveX controls in a single in
+    process ActiveX server using the \c QAXFACTORY_EXPORT() macro.
+    The ActiveX controls in this example are simple QWidget
+    subclasses that reimplement QWidget::paintEvent().
+
+    \snippet examples/activeqt/multiple/ax1.h 0
+
+    The first control draws a filled rectangle. The fill color is exposed
+    as a property. \c Q_CLASSINFO() is used to specify the COM identifiers.
+
+    \snippet examples/activeqt/multiple/ax2.h 0
+
+    The second control draws a circle. The linewith is exposed as a property.
+    \c Q_CLASSINFO() is used to specify the COM identifiers, and to set the
+    attributes \e ToSuperClass and \e StockEvents to expose only the API of
+    the class itself, and to add COM stock events to the ActiveX control.
+
+    \snippet examples/activeqt/multiple/main.cpp 0
+
+    The classes are exported from the server using the QAxFactory macros.
+
+    To build the example you must first build the QAxServer library.
+    Then run \c qmake and your make tool in  \c
+    examples/activeqt/multiple.
+
+    The \l{qaxserver-demo-multiple.html}{demonstration} requires your
+    WebBrowser to support ActiveX controls, and scripting to be
+    enabled.
+
+    \snippet examples/multiple-demo.qdocinc 0
+*/
diff --git a/src/activeqt/doc/src/examples/opengl-demo.qdocinc b/src/activeqt/doc/src/examples/opengl-demo.qdocinc
new file mode 100644
index 0000000..ccc1452
--- /dev/null
+++ b/src/activeqt/doc/src/examples/opengl-demo.qdocinc
@@ -0,0 +1,27 @@
+\raw HTML
+//! [0]
+<SCRIPT LANGUAGE="JavaScript">
+function setRot( form )
+{
+    GLBox.setXRotation( form.XEdit.value );
+    GLBox.setYRotation( form.YEdit.value );
+    GLBox.setZRotation( form.ZEdit.value );
+}
+</SCRIPT>
+
+<p />
+An OpenGL scene:<br />
+<object ID="GLBox" CLASSID="CLSID:5fd9c22e-ed45-43fa-ba13-1530bb6b03e0"
+CODEBASE="http://qt.nokia.com/demos/openglax.cab">
+[Object not available! Did you forget to build and register the server?]
+</object><br />
+
+<form>
+Rotate the scene:<br />
+X:<input type="edit" ID="XEdit" value="0" /><br />
+Y:<input type="edit" name="YEdit" value="0" /><br />
+Z:<input type="edit" name="ZEdit" value="0" /><br />
+<input type="button" value="Set" onClick="setRot(this.form)" />
+</form>
+//! [0]
+\endraw
diff --git a/src/activeqt/doc/src/examples/opengl.qdoc b/src/activeqt/doc/src/examples/opengl.qdoc
new file mode 100644
index 0000000..7d3c68b
--- /dev/null
+++ b/src/activeqt/doc/src/examples/opengl.qdoc
@@ -0,0 +1,131 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/legal
+**
+** This file is part of the documentation of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:FDL$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and Digia.  For licensing terms and
+** conditions see http://qt.digia.com/licensing.  For further information
+** use the contact form at http://qt.digia.com/contact-us.
+**
+** GNU Free Documentation License Usage
+** Alternatively, this file may be used under the terms of the GNU Free
+** Documentation License version 1.3 as published by the Free Software
+** Foundation and appearing in the file included in the packaging of
+** this file.  Please review the following information to ensure
+** the GNU Free Documentation License version 1.3 requirements
+** will be met: http://www.gnu.org/copyleft/fdl.html.
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+/*! 
+    \page qaxserver-demo-opengl.html
+
+    \title OpenGL in an HTML page
+
+    \raw HTML
+    <SCRIPT LANGUAGE="JavaScript">
+    function setRot( form )
+    {
+        GLBox.setXRotation( form.XEdit.value );
+        GLBox.setYRotation( form.YEdit.value );
+        GLBox.setZRotation( form.ZEdit.value );
+    }
+    </SCRIPT>
+
+    <p />
+    An OpenGL scene:<br />
+    <object ID="GLBox" CLASSID="CLSID:5fd9c22e-ed45-43fa-ba13-1530bb6b03e0"
+    CODEBASE="http://qt.nokia.com/demos/openglax.cab">
+    [Object not available! Did you forget to build and register the server?]
+    </object><br />
+
+    <form>
+    Rotate the scene:<br />
+    X:<input type="edit" ID="XEdit" value="0" /><br />
+    Y:<input type="edit" name="YEdit" value="0" /><br />
+    Z:<input type="edit" name="ZEdit" value="0" /><br />
+    <input type="button" value="Set" onClick="setRot(this.form)" />
+    </form>
+    \endraw
+*/
+
+/*!
+    \example activeqt/opengl
+    \title OpenGL Example (ActiveQt)
+
+    The OpenGL example demonstrates the use of the default factory
+    and  QAxFactory::isServer(), and the implementation of an
+    additional COM interface using QAxBindable and QAxAggregated.
+    The server executable  can run both as an ActiveX server and as a
+    stand-alone application.
+
+    The ActiveX control in this example uses the QGlWidget class in
+    Qt to render an OpenGL scene in an ActiveX. The control exposes a few
+    methods to change the scene.
+
+    The application uses the default factory as provided by the 
+    QAXFACTORY_DEFAULT macro to expose the \c GLBox widget as an ActiveX 
+    control.
+    \snippet examples/activeqt/opengl/main.cpp 0
+    The implementation of \c main initializes the QApplication object,
+    and uses \c QAxFactory::isServer() to determine whether or not it is
+    appropriate to create and show the application interface.
+    \snippet examples/activeqt/opengl/main.cpp 1
+    \snippet examples/activeqt/opengl/main.cpp 2
+    \snippet examples/activeqt/opengl/main.cpp 3
+
+    The \c GLBox class inherits from both the \l QGLWidget class to be able
+    to render OpenGL, and from \l QAxBindable.
+    \snippet examples/activeqt/opengl/glbox.h 0
+    The class reimplements the \l QAxBindable::createAggregate() function from QAxBindable
+    to return the pointer to a \l QAxAggregated object.
+    \snippet examples/activeqt/opengl/glbox.h 1
+    The rest of the class declaration and the implementation of the OpenGL
+    rendering is identical to the original "box" example.
+
+    The implementation file of the \c GLBox class includes the \c objsafe.h
+    system header, in which the \c IObjectSafety COM interface is defined.
+    \snippet examples/activeqt/opengl/glbox.cpp 0
+    A class \c ObjectSafetyImpl is declared using multiple inheritance
+    to subclass the QAxAggregated class, and to implement the IObjectSafety
+    interface.
+    \snippet examples/activeqt/opengl/glbox.cpp 1
+    The class declares a default constructor, and implements the queryInterface
+    function to support the IObjectSafety interface.
+    \snippet examples/activeqt/opengl/glbox.cpp 2
+    Since every COM interface inherits \c IUnknown the \c QAXAGG_IUNKNOWN macro
+    is used to provide the default implementation of the \c IUnknown interface.
+    The macro is defined to delegate all calls to \c QueryInterface, \c AddRef
+    and \c Release to the interface returned by the controllingUnknown() function.
+    \snippet examples/activeqt/opengl/glbox.cpp 3
+    The implementation of the \c IObjectSafety interface provides the caller
+    with information about supported and enabled safety options, and returns 
+    \c S_OK for all calls to indicate that the ActiveX control is safe.
+    \snippet examples/activeqt/opengl/glbox.cpp 4
+    The implementation of the \c createAggregate() function just returns a new
+    \c ObjectSafetyImpl object.
+    \snippet examples/activeqt/opengl/glbox.cpp 5
+
+    To build the example you must first build the QAxServer library.
+    Then run \c qmake and your make tool in  \c
+    examples/activeqt/wrapper.
+
+    The \l{qaxserver-demo-opengl.html}{demonstration} requires your
+    WebBrowser to support ActiveX controls, and scripting to be
+    enabled.
+
+    In contrast to the other QAxServer examples Internet Explorer will not
+    open a dialog box to ask the user whether or not the scripting of the GLBox
+    control should be allowed (the exact browser behaviour depends on the security 
+    settings in the Internet Options dialog).
+
+    \snippet doc/src/examples/opengl-demo.qdocinc 0
+*/
diff --git a/src/activeqt/doc/src/examples/qutlook.qdoc b/src/activeqt/doc/src/examples/qutlook.qdoc
new file mode 100644
index 0000000..12774b4
--- /dev/null
+++ b/src/activeqt/doc/src/examples/qutlook.qdoc
@@ -0,0 +1,102 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/legal
+**
+** This file is part of the documentation of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:FDL$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and Digia.  For licensing terms and
+** conditions see http://qt.digia.com/licensing.  For further information
+** use the contact form at http://qt.digia.com/contact-us.
+**
+** GNU Free Documentation License Usage
+** Alternatively, this file may be used under the terms of the GNU Free
+** Documentation License version 1.3 as published by the Free Software
+** Foundation and appearing in the file included in the packaging of
+** this file.  Please review the following information to ensure
+** the GNU Free Documentation License version 1.3 requirements
+** will be met: http://www.gnu.org/copyleft/fdl.html.
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+/*! 
+    \example activeqt/qutlook
+    \title Qutlook Example (ActiveQt)
+
+    The Qutlook example demonstrates the use of ActiveQt to automate
+    Outlook. The example makes use of the \l dumpcpp tool to generate
+    a C++ namespace for the type library describing the Outlook
+    Object Model.
+
+    The project file for the example looks like this:
+
+    \snippet examples/activeqt/qutlook/qutlook.pro 1
+    \snippet examples/activeqt/qutlook/qutlook.pro 2
+
+    The project file uses the \c dumpcpp tool to add an MS Outlook type library to the project.
+    If this fails, then the generated makefile will just print an error message, otherwise
+    the build step will now run the \e dumpcpp tool on the type library, and 
+    generate a header and a cpp file (in this case, \c msoutl.h and \c msoutl.cpp) that 
+    declares and implement an easy to use API to the Outlook objects.
+
+    \snippet examples/activeqt/qutlook/addressview.h 0
+
+    The AddressView class is a QWidget subclass for the user interface. The QTreeView widget
+    will display the contents of Outlook's Contact folder as provided by the \c{model}.
+
+    \snippet examples/activeqt/qutlook/addressview.cpp 0
+    The AddressBookModel class is a QAbstractListModel subclass that communicates directly with 
+    Outlook, using a QHash for caching.
+
+    \snippet examples/activeqt/qutlook/addressview.cpp 1
+    The constructor initializes Outlook. The various signals Outlook provides to notify about 
+    contents changes are connected to the \c updateOutlook() slot.
+
+    \snippet examples/activeqt/qutlook/addressview.cpp 2
+    The destructor logs off from the session.
+
+    \snippet examples/activeqt/qutlook/addressview.cpp 3
+    The \c rowCount() implementation returns the number of entries as reported by Outlook. \c columnCount
+    and \c headerData are implemented to show four columns in the tree view.
+
+    \snippet examples/activeqt/qutlook/addressview.cpp 4
+    The \c headerData() implementation returns hardcoded strings.
+
+    \snippet examples/activeqt/qutlook/addressview.cpp 5
+    The \c data() implementation is the core of the model. If the requested data is in the cache the
+    cached value is used, otherwise the data is acquired from Outlook.
+
+    \snippet examples/activeqt/qutlook/addressview.cpp 6
+    The \c changeItem() slot is called when the user changes the current entry using the user interface.
+    The Outlook item is accessed using the Outlook API, and is modified using the property setters.
+    Finally, the item is saved to Outlook, and removed from the cache. Note that the model does not
+    signal the view of the data change, as Outlook will emit a signal on its own.
+
+    \snippet examples/activeqt/qutlook/addressview.cpp 7
+    The \c addItem() slot calls the CreateItem method of Outlook to create a new contact item,
+    sets the properties of the new item to the values entered by the user and saves the item.
+
+    \snippet examples/activeqt/qutlook/addressview.cpp 8
+    The \c update() slot clears the cache, and emits the reset() signal to notify the view about the
+    data change requiring a redraw of the contents.
+
+    \snippet examples/activeqt/qutlook/addressview.cpp 9
+    \snippet examples/activeqt/qutlook/addressview.cpp 10
+    The rest of the file implements the user interface using only Qt APIs, i.e. without communicating
+    with Outlook directly.
+
+    \snippet examples/activeqt/qutlook/main.cpp 0
+
+    The \c main() entry point function finally instantiates the user interface and enters the
+    event loop.
+
+    To build the example you must first build the QAxContainer
+    library. Then run your make tool in \c examples/activeqt/qutlook
+    and run the resulting \c qutlook.exe.
+*/
diff --git a/src/activeqt/doc/src/examples/simple-demo.qdocinc b/src/activeqt/doc/src/examples/simple-demo.qdocinc
new file mode 100644
index 0000000..5eee8bc
--- /dev/null
+++ b/src/activeqt/doc/src/examples/simple-demo.qdocinc
@@ -0,0 +1,45 @@
+\raw HTML
+//! [0]
+<object ID="QSimpleAX" CLASSID="CLSID:DF16845C-92CD-4AAB-A982-EB9840E74669"
+CODEBASE="http://qt.nokia.com/demos/simpleax.cab">
+    <PARAM NAME="text" VALUE="A simple control" />
+    <PARAM NAME="value" VALUE="1" />
+[Object not available! Did you forget to build and register the server?]
+</object>
+//! [0] //! [1]
+
+<FORM>
+    <INPUT TYPE="BUTTON" VALUE="About..." onClick="QSimpleAX.about()" />
+</FORM>
+//! [1]
+
+//! [2]
+<object ID="Calendar" CLASSID="CLSID:8E27C92B-1264-101C-8A2F-040224009C02">
+[Standard Calendar control not available!]
+    <PARAM NAME="day" VALUE="1" />
+</object>
+//! [2]
+
+<FORM>
+    <INPUT TYPE="BUTTON" VALUE="Today" onClick="Calendar.Today()" />
+</FORM>
+
+//! [3]
+<SCRIPT LANGUAGE="VBScript">
+Sub Calendar_Click()
+    MsgBox( "Calendar Clicked!" )
+End Sub
+
+Sub QSimpleAX_TextChanged( str )
+    document.title = str
+End Sub
+</SCRIPT>
+
+<SCRIPT LANGUAGE="JavaScript">
+function QSimpleAX::ValueChanged( Newvalue )
+{
+    Calendar.Day = Newvalue;
+}
+</SCRIPT>
+//! [3]
+\endraw
diff --git a/src/activeqt/doc/src/examples/simple.qdoc b/src/activeqt/doc/src/examples/simple.qdoc
new file mode 100644
index 0000000..e92152b
--- /dev/null
+++ b/src/activeqt/doc/src/examples/simple.qdoc
@@ -0,0 +1,116 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/legal
+**
+** This file is part of the documentation of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:FDL$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and Digia.  For licensing terms and
+** conditions see http://qt.digia.com/licensing.  For further information
+** use the contact form at http://qt.digia.com/contact-us.
+**
+** GNU Free Documentation License Usage
+** Alternatively, this file may be used under the terms of the GNU Free
+** Documentation License version 1.3 as published by the Free Software
+** Foundation and appearing in the file included in the packaging of
+** this file.  Please review the following information to ensure
+** the GNU Free Documentation License version 1.3 requirements
+** will be met: http://www.gnu.org/copyleft/fdl.html.
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+/*! 
+    \page qaxserver-demo-simple.html
+
+    \title A standard ActiveX and the "simple" ActiveQt widget
+
+    \raw HTML
+    <object ID="QSimpleAX" CLASSID="CLSID:DF16845C-92CD-4AAB-A982-EB9840E74669"
+    CODEBASE="http://qt.nokia.com/demos/simpleax.cab">
+        <PARAM NAME="text" VALUE="A simple control" />
+        <PARAM NAME="value" VALUE="1" />
+    [Object not available! Did you forget to build and register the server?]
+    </object>
+
+    <FORM>
+        <INPUT TYPE="BUTTON" VALUE="About..." onClick="QSimpleAX.about()" />
+    </FORM>
+
+    <object ID="Calendar" CLASSID="CLSID:8E27C92B-1264-101C-8A2F-040224009C02">
+    [Standard Calendar control not available!]
+        <PARAM NAME="day" VALUE="1" />
+    </object>
+
+    <FORM>
+        <INPUT TYPE="BUTTON" VALUE="Today" onClick="Calendar.Today()" />
+    </FORM>
+
+    <SCRIPT LANGUAGE="VBScript">
+    Sub Calendar_Click()
+        MsgBox( "Calendar Clicked!" )
+    End Sub
+
+    Sub QSimpleAX_TextChanged( str )
+        document.title = str
+    End Sub
+    </SCRIPT>
+
+    <SCRIPT LANGUAGE="JavaScript">
+    function QSimpleAX::ValueChanged( Newvalue )
+    {
+        Calendar.Day = Newvalue;
+    }
+    </SCRIPT>
+    \endraw
+*/
+
+/*!
+    \example activeqt/simple
+    \title Simple Example (ActiveQt)
+
+    The Simple example demonstrates the use of
+    QAxBindable::requestPropertyChange() and
+    QAxBindable::propertyChanged(), and the use of the default
+    QAxFactory through the \c QAXFACTORY_DEFAULT() macro.
+    
+    The ActiveX control in this example is a laid out QWidget with a
+    QSlider, a QLCDNumber and a QLineEdit. It provides a
+    signal/slot/property interface to change the values of the slider
+    and the line edit, and to get notified of any property changes.
+
+
+    The Qt implementation of the ActiveX for this example is
+    \snippet examples/activeqt/simple/main.cpp 0
+
+    The control is exported using the default QAxFactory
+    \snippet examples/activeqt/simple/main.cpp 1
+
+    To build the example you must first build the QAxServer library.
+    Then run qmake and your make tool in \c examples/activeqt/simple.
+
+    The \l{qaxserver-demo-simple.html}{demonstration} requires your
+    WebBrowser to support ActiveX controls, and scripting to be enabled.
+
+    The simple ActiveX control is embedded using the \c <object> tag.
+
+    \snippet doc/src/examples/simple-demo.qdocinc 0
+
+    A simple HTML button is connected to the ActiveQt's about() slot.
+
+    \snippet doc/src/examples/simple-demo.qdocinc 1
+
+    A second ActiveX control - the standard Calendar Control - is instantiated
+
+    \snippet doc/src/examples/simple-demo.qdocinc 2
+
+    Events from the ActiveX controls are handled using both Visual Basic Script
+    and JavaScript.
+
+    \snippet doc/src/examples/simple-demo.qdocinc 3
+*/
diff --git a/src/activeqt/doc/src/examples/webbrowser.qdoc b/src/activeqt/doc/src/examples/webbrowser.qdoc
new file mode 100644
index 0000000..0117092
--- /dev/null
+++ b/src/activeqt/doc/src/examples/webbrowser.qdoc
@@ -0,0 +1,73 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/legal
+**
+** This file is part of the documentation of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:FDL$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and Digia.  For licensing terms and
+** conditions see http://qt.digia.com/licensing.  For further information
+** use the contact form at http://qt.digia.com/contact-us.
+**
+** GNU Free Documentation License Usage
+** Alternatively, this file may be used under the terms of the GNU Free
+** Documentation License version 1.3 as published by the Free Software
+** Foundation and appearing in the file included in the packaging of
+** this file.  Please review the following information to ensure
+** the GNU Free Documentation License version 1.3 requirements
+** will be met: http://www.gnu.org/copyleft/fdl.html.
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+/*!
+    \example activeqt/webbrowser
+    \title Web Browser Example (ActiveQt)
+
+    The Web Browser example uses the Microsoft Web Browser
+    ActiveX control to implement a fully functional Web Browser
+    application. The user interface has been developed using the Qt
+    Designer integration of the QAxWidget class.
+
+    The code demonstrates how the Qt application can communicate 
+    with the embedded ActiveX controls using signals, slots and the 
+    dynamicCall() function.
+
+    \snippet examples/activeqt/webbrowser/main.cpp 0
+
+    The \c MainWindow class declares a \c QMainWindow based user interface,
+    using the \c Ui::MainWindow class generated by Qt Designer. A number
+    of slots are implemented to handle events from the various user 
+    interface elements, including the \c WebBrowser object, which is a
+    QAxWidget hosting the Microsoft Web Browser control.
+
+    \snippet examples/activeqt/webbrowser/main.cpp 1
+
+    The constructor initializes the user interface, installs a
+    progress bar on the status bar, and uses QAxBase::dynamicCall()
+    to invoke the \c GoHome() method of Internet Explorer to
+    navigate  to the user's home page.
+
+    \snippet examples/activeqt/webbrowser/main.cpp 2
+    Different slots handle the signals emitted by the WebBrowser object.
+
+    Connections that don't require any coding, i.e. connecting the \c back 
+    action to the \c GoBack() slot, have already been made in Qt Designer.
+
+    \snippet examples/activeqt/webbrowser/main.cpp 3
+    \snippet examples/activeqt/webbrowser/main.cpp 4
+
+    The rest of the implementation is not related to ActiveQt - the actions
+    are handled by different slots, and the entry point function starts the
+    application using standard Qt APIs.
+
+    To build the example you must first build the QAxContainer
+    library. Then run your make tool in \c
+    examples/activeqt/webbrowser and run the resulting \c
+    webbrowser.exe.
+*/
diff --git a/src/activeqt/doc/src/examples/wrapper-demo.qdocinc b/src/activeqt/doc/src/examples/wrapper-demo.qdocinc
new file mode 100644
index 0000000..a00c505
--- /dev/null
+++ b/src/activeqt/doc/src/examples/wrapper-demo.qdocinc
@@ -0,0 +1,51 @@
+\raw HTML
+//! [0]
+<SCRIPT LANGUAGE="VBScript">
+Sub ToolButton_Clicked()
+    RadioButton.text = InputBox( "Enter something", "Wrapper Demo" )
+End Sub
+
+Sub PushButton_clicked()
+    MsgBox( "Thank you!" )
+End Sub
+
+Sub CheckBox_toggled( state )
+    if state = 0 then
+        CheckBox.text = "Check me!"
+    else
+        CheckBox.text = "Uncheck me!"
+    end if
+End Sub
+</SCRIPT>
+<p />
+A QPushButton:<br />
+<object ID="PushButton" CLASSID="CLSID:2B262458-A4B6-468B-B7D4-CF5FEE0A7092"
+CODEBASE="http://qt.nokia.com/demos/wrapperax.cab">
+    <PARAM NAME="text" VALUE="Click me!" />
+[Object not available! Did you forget to build and register the server?]
+</object><br />
+
+<p />
+A QCheckBox:<br />
+<object ID="CheckBox" CLASSID="CLSID:6E795de9-872d-43cf-a831-496ef9d86c68"
+CODEBASE="http://qt.nokia.com/demos/wrapperax.cab">
+    <PARAM NAME="text" VALUE="Check me!" />
+[Object not available! Did you forget to build and register the server?]
+</object><br />
+
+<p />
+A QToolButton:<br />
+<object ID="ToolButton" CLASSID="CLSID:7c0ffe7a-60c3-4666-bde2-5cf2b54390a1"
+CODEBASE="http://qt.nokia.com/demos/wrapperax.cab">
+[Object not available! Did you forget to build and register the server?]
+</object><br />
+
+<p />
+A QRadioButton:<br />
+<object ID="RadioButton" CLASSID="CLSID:afcf78c8-446c-409a-93b3-ba2959039189"
+CODEBASE="http://qt.nokia.com/demos/wrapperax.cab">
+    <PARAM NAME="text" VALUE="Tune me!" />
+[Object not available! Did you forget to build and register the server?]
+</object><br />
+//! [0]
+\endraw
diff --git a/src/activeqt/doc/src/examples/wrapper.qdoc b/src/activeqt/doc/src/examples/wrapper.qdoc
new file mode 100644
index 0000000..3f4b904
--- /dev/null
+++ b/src/activeqt/doc/src/examples/wrapper.qdoc
@@ -0,0 +1,63 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/legal
+**
+** This file is part of the documentation of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:FDL$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and Digia.  For licensing terms and
+** conditions see http://qt.digia.com/licensing.  For further information
+** use the contact form at http://qt.digia.com/contact-us.
+**
+** GNU Free Documentation License Usage
+** Alternatively, this file may be used under the terms of the GNU Free
+** Documentation License version 1.3 as published by the Free Software
+** Foundation and appearing in the file included in the packaging of
+** this file.  Please review the following information to ensure
+** the GNU Free Documentation License version 1.3 requirements
+** will be met: http://www.gnu.org/copyleft/fdl.html.
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+/*!
+    \page qaxserver-demo-wrapper.html
+
+    \title Standard Qt widgets in an HTML page
+
+    \input examples/wrapper-demo.qdocinc
+*/
+
+/*!
+    \example activeqt/wrapper
+    \title Wrapper Example (ActiveQt)
+
+    The Wrapper example demonstrates how to export existing QWidget
+    classes as ActiveX controls, and the use of QAxFactory together
+    with the \c QAXFACTORY_EXPORT() macro. ActiveX controls in this
+    example are the standard button classes QPushButton, QCheckBox
+    and QRadioButton as provided by Qt.
+
+    \snippet examples/activeqt/wrapper/main.cpp 0
+    The factory implementation returns the list of supported controls,
+    creates controls on request and provides information about the unique
+    IDs of the COM classes and interfaces for each control.
+
+    \snippet examples/activeqt/wrapper/main.cpp 1
+    The factory is exported using the QAXFACTORY_EXPORT macro.
+
+    To build the example you must first build the QAxServer library.
+    Then run \c qmake and your make tool in \c
+    examples/activeqt/wrapper.
+
+    The \l{qaxserver-demo-wrapper.html}{demonstration} requires a
+    web browser that supports ActiveX controls, and scripting to be
+    enabled.
+
+    \snippet examples/wrapper-demo.qdocinc 0
+*/
diff --git a/src/activeqt/doc/src/qtaxbase.qdoc b/src/activeqt/doc/src/qtaxbase.qdoc
new file mode 100644
index 0000000..60d33b9
--- /dev/null
+++ b/src/activeqt/doc/src/qtaxbase.qdoc
@@ -0,0 +1,94 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/legal
+**
+** This file is part of the documentation of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:FDL$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and Digia.  For licensing terms and
+** conditions see http://qt.digia.com/licensing.  For further information
+** use the contact form at http://qt.digia.com/contact-us.
+**
+** GNU Free Documentation License Usage
+** Alternatively, this file may be used under the terms of the GNU Free
+** Documentation License version 1.3 as published by the Free Software
+** Foundation and appearing in the file included in the packaging of
+** this file.  Please review the following information to ensure
+** the GNU Free Documentation License version 1.3 requirements
+** will be met: http://www.gnu.org/copyleft/fdl.html.
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+/*!
+    \group activeqt-tools
+    \title Tools for ActiveQt
+    \brief Tools to help integrate Qt applications with ActiveX components.
+
+    These tools provide support for integrating Qt with ActiveX components.
+
+    \generatelist{related}
+
+    \sa {ActiveQt Framework}
+*/
+
+/*!
+    \page activeqt.html
+    \title Qt's ActiveX Framework (ActiveQt)
+    \brief An overview of Qt's ActiveX and COM integration on Windows.
+
+    \ingroup qt-activex
+    \keyword ActiveQt
+    \target ActiveQt Framework
+
+    Qt's ActiveX and COM support allows Qt for Windows developers to:
+
+    \list 1
+    \li Access and use ActiveX controls and COM objects provided by any
+    ActiveX server in their Qt applications.
+    \li Make their Qt applications available as COM servers, with
+    any number of Qt objects and widgets as COM objects and ActiveX 
+    controls.
+    \endlist
+
+    For more information about using ActiveX with Qt, see
+    \l{Building ActiveX servers in Qt}.
+
+    The ActiveQt framework consists of two modules:
+
+    \list
+    \li The \l{Using ActiveX controls and COM in Qt}{QAxContainer}
+       module is a static library implementing QObject and QWidget subclasses,
+       QAxObject and QAxWidget, that act as containers for COM objects and
+       ActiveX controls.
+    \li The \l{Building ActiveX servers in Qt}{QAxServer}
+       module is a static library that implements
+       functionality for in-process and executable COM servers. This
+       module provides the QAxAggregated, QAxBindable and QAxFactory
+       classes.
+    \endlist
+
+    A set of \l{Tools for ActiveQt}{tools} is provided to simplify the
+    developing and building of Qt projects that use ActiveX.
+
+    To build the static libraries, change into the \c activeqt directory 
+    (usually \c QTDIR/src/activeqt), and run \c qmake and your make
+    tool in both the \c container and the \c control subdirectory.
+    The libraries \c qaxcontainer.lib and \c qaxserver.lib will be linked
+    into \c QTDIR/lib.
+
+    If you are using a shared configuration of Qt enter the \c plugin
+    subdirectory and run \c qmake and your make tool to build a
+    plugin that integrates the QAxContainer module into \l{Qt
+    Designer}.
+
+    The ActiveQt modules are part of the \l{Qt Commercial Edition} and
+    the \l{Open Source Versions of Qt}.
+
+    \sa {QAxContainer Module}, {QAxServer Module}
+*/
diff --git a/src/activeqt/doc/src/qtaxcontainer.qdoc b/src/activeqt/doc/src/qtaxcontainer.qdoc
new file mode 100644
index 0000000..0162e26
--- /dev/null
+++ b/src/activeqt/doc/src/qtaxcontainer.qdoc
@@ -0,0 +1,205 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/legal
+**
+** This file is part of the documentation of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:FDL$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and Digia.  For licensing terms and
+** conditions see http://qt.digia.com/licensing.  For further information
+** use the contact form at http://qt.digia.com/contact-us.
+**
+** GNU Free Documentation License Usage
+** Alternatively, this file may be used under the terms of the GNU Free
+** Documentation License version 1.3 as published by the Free Software
+** Foundation and appearing in the file included in the packaging of
+** this file.  Please review the following information to ensure
+** the GNU Free Documentation License version 1.3 requirements
+** will be met: http://www.gnu.org/copyleft/fdl.html.
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+/*!
+    \page activeqt-container.html
+    \title Using ActiveX controls and COM in Qt
+    \ingroup qt-activex
+
+    \brief A Windows-only extension for accessing ActiveX controls and
+    COM objects.
+
+    The QAxContainer module is part of the \l ActiveQt framework. It
+    provides a library implementing a QWidget subclass, QAxWidget,
+    that acts as a container for ActiveX controls, and a QObject
+    subclass, QAxObject, that can be used to easily access non-visual
+    COM objects. Scripting COM objects embedded using these classes
+    is possible through the QAxScript, QAxScriptManager and
+    QAxScriptEngine classes, and a set of \l{Tools for ActiveQt}{tools}
+    makes it easy to access COM objects programmatically.
+
+    The module consists of six classes
+    \list 1
+    \li QAxBase is an abstract class that provides an API to initialize
+       and access a COM object or ActiveX control.
+    \li QAxObject provides a QObject that wraps a COM object.
+    \li QAxWidget is a QWidget that wraps an ActiveX control.
+    \li QAxScriptManager, QAxScript and QAxScriptEngine provide an
+       interface to the Windows Script Host.
+    \endlist
+
+    Some \l{ActiveQt Examples}{example applications} that use
+    standard ActiveX controls to provide high-level user interface
+    functionality are provided.
+
+    \sa {ActiveQt Framework}
+
+    Topics:
+
+    \tableofcontents
+
+    \section1 Using the Library
+
+    To build Qt applications that can host COM objects and ActiveX controls
+    link the application against the QAxContainer module by adding
+
+    \snippet doc/src/snippets/code/doc_src_qaxcontainer.pro 0
+
+    to your application's \c .pro file.
+
+    \section2 Distributing QAxContainer Applications
+
+    The QAxContainer library is static, so there is no need to redistribute
+    any additional files when using this module. Note however that the
+    ActiveX server binaries you are using might not be installed on the
+    target system, so you have to ship them with your package and register
+    them during the installation process of your application.
+
+    \section1 Instantiating COM Objects
+
+    To instantiate a COM object use the QAxBase::setControl() API, or pass
+    the name of the object directly into the constructor of the QAxBase 
+    subclass you are using.
+
+    The control can be specified in a variety of formats, but the fastest
+    and most powerful format is to use the class ID (CLSID) of the object
+    directly. The class ID can be prepended with information about a remote
+    machine that the object should run on, and can include a license key
+    for licensed controls.
+
+    \section2 Typical Error Messages
+
+    ActiveQt prints error messages to the debug output when it
+    encounters error situations at runtime. Usually you must run 
+    your program in the debugger to see these messages (e.g. in Visual
+    Studio's Debug output).
+
+    \section3 Requested control could not be instantiated
+
+    The control requested in QAxBase::setControl() is not installed
+    on this system, or is not accessible for the current user.
+
+    The control might require administrator rights, or a license key.
+    If the control is licensed, pass the license key to QAxBase::setControl
+    as documented.
+
+    \section1 Accessing the Object API
+
+    ActiveQt provides a Qt API to the COM object, and replaces COM
+    datatypes with Qt equivalents.
+
+    There are four ways to call APIs on the COM object:
+
+    \list
+    \li Generating a C++ namespace
+    \li Call-by-name
+    \li Through a script engine
+    \li Using the native COM interfaces
+    \endlist
+
+    \section2 Generating a C++ Namespace
+
+    To generate a C++ namespace for the type library you want to access,
+    use the \l dumpcpp tool. Run this tool manually on the type library you
+    want to use, or integrate it into the build system by adding the type
+    libraries to the \c TYPELIBS variable in your application's \c .pro file:
+
+    \snippet doc/src/snippets/code/doc_src_qaxcontainer.pro 1
+
+    Note that \l dumpcpp might not be able to expose all APIs in the type
+    library.
+
+    Include the resulting header file in your code to access the
+    object APIs through the generated C++ classes. See the
+    \l{activeqt/qutlook}{Qutlook} example for more information.
+
+    \section2 Call-by-Name
+
+    Use QAxBase::dynamicCall() and QAxBase::querySubObject() as well as
+    the QObject::setProperty() and QObject::property() APIs to call the
+    methods and properties of the COM object through their name. Use the 
+    \l dumpdoc tool to get the documentation of the Qt API for any COM 
+    object and its subobjects; note that not all of the COM object's APIs
+    might be available.
+
+    See the \l{activeqt/webbrowser}{Webbrowser} example for more information.
+
+    \section2 Calling Function Through a Script Engine
+
+    A Qt application can host any ActiveScript engine installed on the system.
+    The script engine can then run script code that accesses the COM objects.
+
+    To instantiate a script engine, use QAxScriptManager::addObject() to
+    register the COM objects you want to access from script, and 
+    QAxScriptManager::load() to load the script code into the engine. Then
+    call the script functions using QAxScriptManager::call() or 
+    QAxScript::call().
+
+    Which APIs of the COM object are available through scripting depends on 
+    the script language used.
+
+    The \l{testcon - An ActiveX Test Container (ActiveQt)}{ActiveX Test Container}
+    demonstrates loading of script files.
+
+    \section2 Calling a Function Using the Native COM Interfaces
+
+    To call functions of the COM object that can not be accessed via any
+    of the above methods it is possible to request the COM interface directly 
+    using QAxBase::queryInterface(). To get a C++ definition of the respective
+    interface classes use the \c #import directive with the type library
+    provided with the control; see your compiler manual for details.
+
+    \section2 Typical Error Messages
+
+    ActiveQt prints error messages to the debug output when it
+    encounters error situations at runtime. Usually you must run 
+    your program in the debugger to see these messages (e.g. in Visual
+    Studio's Debug output).
+
+    \section3 QAxBase::internalInvoke: No such method
+
+    A QAxBase::dynamicCall() failed - the function prototype did not
+    match any function available in the object's API.
+
+    \section3 Error calling IDispatch member: Non-optional parameter missing
+
+    A QAxBase::dynamicCall() failed - the function prototype was correct,
+    but too few parameters were provided.
+
+    \section3 Error calling IDispatch member: Type mismatch in parameter n
+
+    A QAxBase::dynamicCall() failed - the function prototype was correct,
+    but the paramter at index \c n was of the wrong type and could 
+    not be coerced to the correct type.
+
+    \section3 QAxScriptManager::call(): No script provides this function
+
+    You try to call a function that is provided through an engine
+    that doesn't provide introspection (ie. ActivePython or 
+    ActivePerl). You need to call the function directly on the
+    respective QAxScript object.
+*/
diff --git a/src/activeqt/doc/src/qtaxserver.qdoc b/src/activeqt/doc/src/qtaxserver.qdoc
new file mode 100644
index 0000000..285a74c
--- /dev/null
+++ b/src/activeqt/doc/src/qtaxserver.qdoc
@@ -0,0 +1,837 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/legal
+**
+** This file is part of the documentation of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:FDL$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and Digia.  For licensing terms and
+** conditions see http://qt.digia.com/licensing.  For further information
+** use the contact form at http://qt.digia.com/contact-us.
+**
+** GNU Free Documentation License Usage
+** Alternatively, this file may be used under the terms of the GNU Free
+** Documentation License version 1.3 as published by the Free Software
+** Foundation and appearing in the file included in the packaging of
+** this file.  Please review the following information to ensure
+** the GNU Free Documentation License version 1.3 requirements
+** will be met: http://www.gnu.org/copyleft/fdl.html.
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+/*!
+    \page activeqt-server.html
+    \title Building ActiveX servers in Qt
+    \ingroup qt-activex
+
+    \brief A Windows-only static library for turning a Qt binary into a COM server.
+
+    The QAxServer module is part of the \l ActiveQt framework. It
+    consists of three classes:
+
+    \list
+    \li QAxFactory defines a factory for the creation of COM objects.
+    \li QAxBindable provides an interface between the Qt widget and the
+       COM object.
+    \li QAxAggregated can be subclassed to implement additional COM interfaces.
+    \endlist
+
+    Some \l{ActiveQt Examples}{example implementations} of ActiveX
+    controls and COM objects are provided.
+
+    \sa {ActiveQt Framework}
+
+    Topics:
+
+    \tableofcontents
+
+    \section1 Using the Library
+
+    To turn a standard Qt application into a COM server using the
+    QAxServer library you must add \c axserver to the QT variable
+    in your \c .pro file.
+
+    An out-of-process executable server is generated from a \c .pro
+    file like this:
+
+    \snippet doc/src/snippets/code/doc_src_qaxserver.pro 0
+
+    To build an in-process server, use a \c .pro file like this:
+    \snippet doc/src/snippets/code/doc_src_qaxserver.pro 1
+
+    The files \c qaxserver.rc and \c qaxserver.def are part of the
+    framework and can be used from their usual location (specify a
+    path in the \c .pro file), or copied into the project directory.
+    You can modify these files as long as it includes any file as the
+    type library entry, ie. you can add version information or specify
+    a different toolbox icon.
+
+    Using the \c axserver module will cause the \c qmake tool to add the
+    required build steps to the build system:
+
+    \list
+    \li Link the binary against \c qaxserver.lib instead of \c qtmain.lib
+    \li Call the \l idc tool to generate an IDL file for the COM server
+    \li Compile the IDL into a type library using the MIDL tool (part of the
+    compiler installation)
+    \li Attach the resulting type library as a binary resource to the server
+    binary (again using the \l idc tool)
+    \li Register the server
+    \endlist
+
+    To skip the post-processing step, also set the \c qaxserver_no_postlink
+    configuration.
+
+    Additionally you can specify a version number using the \c VERSION
+    variable, e.g.
+
+    \snippet doc/src/snippets/code/doc_src_qaxserver.pro 2
+
+    The version number specified will be used as the version of the type
+    library and of the server when registering.
+
+    \section2 Out-of-Process vs. In-Process
+
+    Whether your COM server should run as a stand-alone executable
+    or as a shared library in the client process depends mainly on the
+    type of COM objects you want to provide in the server. 
+
+    An executable server has the advantage of being able to run as a
+    stand-alone application, but adds considerable overhead to the
+    communication between the COM client and the COM object. If the
+    control has a programming error only the server process running
+    the control will crash, and the client application will probably
+    continue to run. Not all COM clients support executable servers.
+
+    An in-process server is usually smaller and has faster startup
+    time. The communication between client and server is done directly
+    through virtual function calls and does not introduce the overhead
+    required for remote procedure calls. However, if the server crashes the
+    client application is likely to crash as well, and not every 
+    functionality is available for in-process servers (i.e. register in
+    the COM's running-object-table).
+
+    Both server types can use Qt either as a shared library, or statically
+    linked into the server binary.
+
+    \section2 Typical Errors During the Post-Build Steps
+
+    For the ActiveQt specific post-processing steps to work the 
+    server has to meet some requirements:
+
+    \list
+    \li All controls exposed can be created with nothing but a QApplication
+    instance being present
+    \li The initial linking of the server includes a temporary type
+    library resource
+    \li All dependencies required to run the server are in the system path
+    (or in the path used by the calling environment; note that Visual 
+    Studio has its own set of environment variables listed in the
+    Tools|Options|Directories dialog).
+    \endlist
+
+    If those requirements are not met one ore more of the following 
+    errors are likely to occur:
+
+    \section3 The Server Executable Crashes
+
+    To generate the IDL the widgets exposed as ActiveX controls need to
+    be instantiated (the constructor is called). At this point, nothing 
+    else but a QApplication object exists. Your widget constructor must 
+    not rely on any other objects to be created, e.g. it should check for
+    null-pointers.
+
+    To debug your server run it with -dumpidl outputfile and check where
+    it crashes.
+
+    Note that no functions of the control are called.
+
+    \section3 The Server Executable Is Not a Valid Win32 Application
+
+    Attaching the type library corrupted the server binary. This is a
+    bug in Windows and happens only with release builds.
+
+    The first linking step has to link a dummy type library into the
+    executable that can later be replaced by idc. Add a resource file
+    with a type library to your project as demonstrated in the examples.
+
+    \section3 "Unable to locate DLL"
+
+    The build system needs to run the server executable to generate
+    the interface definition, and to register the server. If a dynamic
+    link library the server links against is not in the path this
+    might fail (e.g. Visual Studio calls the server using the
+    enivronment settings specified in the "Directories" option). Make
+    sure that all DLLs required by your server are located in a
+    directory that is listed in the path as printed in the error
+    message box.
+
+    \section3 "Cannot open file ..."
+
+    The ActiveX server could not shut down properly when the last
+    client stopped using it. It usually takes about two seconds for
+    the application to terminate, but you might have to use the task
+    manager to kill the process (e.g. when a client doesn't release
+    the controls properly).
+
+    \section1 Implementing Controls
+
+    To implement a COM object with Qt, create a subclass of QObject
+    or any existing QObject subclass. If the class is a subclass of QWidget,
+    the COM object will be an ActiveX control.
+
+    \snippet doc/src/snippets/code/doc_src_qaxserver.cpp 3
+
+    The Q_OBJECT macro is required to provide the meta object information
+    about the widget to the ActiveQt framework.
+
+    \snippet doc/src/snippets/code/doc_src_qaxserver.cpp 4
+
+    Use the Q_CLASSINFO() macro to specify the COM identifiers for the COM
+    object. \c ClassID and \c InterfaceID are required, while \c EventsID is
+    only necessary when your object has signals. To generate these identifiers,
+    use system tools like \c uuidgen or \c guidgen.
+
+    You can specify additional attributes for each of your classes; see 
+    \l{Class Information and Tuning} for details.
+
+    \snippet doc/src/snippets/code/doc_src_qaxserver.cpp 5
+
+    Use the Q_PROPERTY() macro to declare properties for the ActiveX control.
+
+    Declare a standard constructor taking a parent object, and functions, 
+    signals and slots like for any QObject subclass.
+    \footnote
+    If a standard constructor is not present the compiler will issue
+    an error "no overloaded function takes 2 parameters" when using
+    the default factory through the QAXFACTORY_DEFAULT() macro. If you
+    cannot provide a standard constructor you must implement a
+    QAxFactory custom factory and call the constructor you have in
+    your implementation of QAxFactory::create.
+    \endfootnote
+
+    \snippet doc/src/snippets/code/doc_src_qaxserver.cpp 6
+
+    The ActiveQt framework will expose properties and public slots as ActiveX 
+    properties and methods, and signals as ActiveX events, and convert between
+    the Qt data types and the equivalent COM data types.
+
+    \section2 Data Types
+
+    The Qt data types that are supported for properties are:
+
+    \table
+    \header
+    \li Qt data type
+    \li COM property
+    \row
+    \li bool
+    \li VARIANT_BOOL
+    \row
+    \li QString
+    \li BSTR
+    \row
+    \li int
+    \li int
+    \row
+    \li uint
+    \li unsigned int
+    \row
+    \li double
+    \li double
+    \row
+    \li \l qlonglong
+    \li CY
+    \row
+    \li \l qulonglong
+    \li CY
+    \row
+    \li QColor
+    \li OLE_COLOR
+    \row
+    \li QDate
+    \li DATE
+    \row
+    \li QDateTime
+    \li DATE
+    \row
+    \li QTime
+    \li DATE
+    \row
+    \li QFont
+    \li IFontDisp*
+    \row
+    \li QPixmap
+    \li IPictureDisp*
+    \footnote
+    COM cannot marshal IPictureDisp accross process boundaries,
+    so QPixmap properties cannot be called for out-of-process servers. You
+    can however marshal the image data via e.g. temporary files. See the
+    Microsoft 
+    \link http://support.microsoft.com/default.aspx?scid=kb;[LN];Q150034 KB article 
+    Q150034 \endlink for more information.
+    \endfootnote
+    \row
+    \li QVariant
+    \li VARIANT
+    \row
+    \li QVariantList (same as QList\<QVariant\>)
+    \li SAFEARRAY(VARIANT)
+    \row
+    \li QStringList
+    \li SAFEARRAY(BSTR)
+    \row
+    \li QByteArray
+    \li SAFEARRAY(BYTE)
+    \row
+    \li QRect
+    \li User defined type
+    \row
+    \li QSize
+    \li User defined type
+    \row
+    \li QPoint
+    \li User defined type
+    \endtable
+
+    The Qt data types that are supported for parameters in signals and
+    slots are:
+    \table
+    \header
+    \li Qt data type
+    \li COM parameter
+    \row
+    \li bool
+    \li [in] VARIANT_BOOL
+    \row
+    \li bool&
+    \li [in, out] VARIANT_BOOL*
+    \row
+    \li QString, const QString&
+    \li [in] BSTR
+    \row
+    \li QString&
+    \li [in, out] BSTR*
+    \row
+    \li QString&
+    \li [in, out] BSTR*
+    \row
+    \li int
+    \li [in] int
+    \row
+    \li int&
+    \li [in,out] int
+    \row
+    \li uint
+    \li [in] unsigned int
+    \row
+    \li uint&
+    \li [in, out] unsigned int*
+    \row
+    \li double
+    \li [in] double
+    \row
+    \li double&
+    \li [in, out] double*
+    \row
+    \li QColor, const QColor&
+    \li [in] OLE_COLOR
+    \row
+    \li QColor&
+    \li [in, out] OLE_COLOR*
+    \row
+    \li QDate, const QDate&
+    \li [in] DATE
+    \row
+    \li QDate&
+    \li [in, out] DATE*
+    \row
+    \li QDateTime, const QDateTime&
+    \li [in] DATE
+    \row
+    \li QDateTime&
+    \li [in, out] DATE*
+    \row
+    \li QFont, const QFont&
+    \li [in] IFontDisp*
+    \row
+    \li QFont&
+    \li [in, out] IFontDisp**
+    \row
+    \li QPixmap, const QPixmap&
+    \li [in] IPictureDisp*
+    \row
+    \li QPixmap&
+    \li [in, out] IPictureDisp**
+    \row
+    \li QList\<QVariant\>, const QList\<QVariant\>&
+    \li [in] SAFEARRAY(VARIANT)
+    \row
+    \li QList\<QVariant\>&
+    \li [in, out] SAFEARRAY(VARIANT)*
+    \row
+    \li QStringList, const QStringList&
+    \li [in] SAFEARRAY(BSTR)
+    \row
+    \li QStringList&
+    \li [in, out] SAFEARRAY(BSTR)*
+    \row
+    \li QByteArray, const QByteArray&
+    \li [in] SAFEARRAY(BYTE)
+    \row
+    \li QByteArray&
+    \li [in, out] SAFEARRAY(BYTE)*
+    \row
+    \li QObject*
+    \li [in] IDispatch*
+    \row
+    \li QRect&
+    \footnote
+    OLE needs to marshal user defined types by reference (ByRef), and cannot 
+    marshal them by value (ByVal). This is why const-references and object
+    parameters are not supported for QRect, QSize and QPoint.
+    \endfootnote
+    \li [in, out] struct QRect (user defined)
+    \row
+    \li QSize&
+    \li [in, out] struct QSize (user defined)
+    \row
+    \li QPoint&
+    \li [in, out] struct QPoint (user defined)
+    \endtable
+
+    Also supported are exported enums and flags (see Q_ENUMS() and
+    Q_FLAGS()). The in-parameter types are also supported as
+    return values.
+
+    Properties and signals/slots that have parameters using any other
+    data types are ignored by the ActiveQt framework.
+
+    \section2 Sub-Objects
+
+    COM objects can have multiple sub-objects that can represent a sub element
+    of the COM object. A COM object representing a multi-document spread sheet 
+    application can for example provide one sub-object for each spread sheet.
+
+    Any QObject subclass can be used as the type for a sub object in ActiveX, as
+    long as it is known to the QAxFactory. Then the type can be used in properties,
+    or as the return type or paramter of a slot.
+
+    \section2 Property Notification
+
+    To make the properties bindable for the ActiveX client, use multiple
+    inheritance from the QAxBindable class:
+
+    \snippet doc/src/snippets/code/doc_src_qaxserver.cpp 7
+
+    When implementing the property write functions, use the
+    QAxBindable class's requestPropertyChange() and propertyChanged()
+    functions to allow ActiveX clients to bind to the control
+    properties. 
+    \footnote 
+    This is not required, but gives the client more control over 
+    the ActiveX control.
+    \endfootnote
+
+    \section1 Serving Controls
+
+    To make a COM server available to the COM system it must be registered 
+    in the system registry using five unique identifiers. 
+    These identifiers are provided by tools like \c guidgen or \c uuidgen. 
+    The registration information allows COM to localize the binary providing 
+    a requested ActiveX control, marshall remote procedure calls to the 
+    control and read type information about the methods and properties exposed 
+    by the control.
+
+    To create the COM object when the client asks for it the server must export 
+    an implementation of a QAxFactory. The easist way to do this is to use a set
+    of macros:
+
+    \snippet doc/src/snippets/code/doc_src_qaxserver.cpp 8
+
+    This will export \c MyWidget and \c MyWidget2 as COM objects that can be
+    created by COM clients, and will register \c MySubType as a type that can
+    be used in properties and parameters of \c MyWidget and \c MyWidget2.
+
+    The \link QAxFactory QAxFactory class documentation \endlink explains 
+    how to use this macro, and how to implement and use custom factories.
+
+    For out-of-process executable servers you can implement a main()
+    function to instantiate a QApplication object and enter the event
+    loop just like any normal Qt application. By default the
+    application will start as a standard Qt application, but if you
+    pass \c -activex on the command line it will start as an ActiveX
+    server. Use QAxFactory::isServer() to create and run a standard
+    application interface, or to prevent a stand-alone execution:
+
+    \snippet doc/src/snippets/code/doc_src_qaxserver.cpp 9
+
+    This is however not necessary as ActiveQt provides a default implementation
+    of a main function. The default implemenation calls QAxFactory::startServer(),
+    creates a QApplication instance and calls exec().
+
+    To build the ActiveX server executable run \c qmake
+    to generate the makefile, and use your compiler's
+    make tool as for any other Qt application. The make process will
+    also register the controls in the system registry by calling the
+    resulting executable with the \c -regserver command line option.
+
+    If the ActiveX server is an executable, the following command line
+    options are supported:
+    \table
+    \header \li Option \li Result
+    \row \li \c -regserver \li Registers the server in the system registry
+    \row \li \c -unregserver \li Unregisters the server from the system registry
+    \row \li \c -activex \li Starts the application as an ActiveX server
+    \row \li \c{-dumpidl <file> -version x.y} \li Writes the server's IDL to the
+    specified file. The type library will have version x.y
+    \endtable
+
+    In-process servers can be registered using the \c regsvr32 tool available
+    on all Windows systems.
+
+    \section2 Typical Compile-Time Problems
+
+    The compiler/linker errors listed are based on those issued by the 
+    Microsoft Visual C++ 6.0 compiler.
+
+    \section3 "No overloaded function takes 2 parameters"
+
+    When the error occurs in code that uses the QAXFACTORY_DEFAULT()
+    macro, the widget class had no constructor that can be used by the
+    default factory. Either add a standard widget constructor or
+    implement a custom factory that doesn't require one.
+
+    When the error occurs in code that uses the QAXFACTORY_EXPORT()
+    macro, the QAxFactory subclass had no appropriate constructor.
+    Provide a public class constructor like
+
+    \snippet doc/src/snippets/code/doc_src_qaxserver.cpp 10
+
+    for your factory class.
+
+    \section3 "Syntax error: bad suffix on number"
+
+    The unique identifiers have not been passed as strings into the 
+    QAXFACTORY_EXPORT() or QAXFACTORY_DEFAULT() macro.
+
+    \section3 "Unresolved external symbol _ucm_instantiate"
+
+    The server does not export an implementation of a QAxFactory. Use
+    the QAXFACTORY_EXPORT() macro in one of the project's
+    implementation files to instantiate and export a factory, or use
+    the QAXFACTORY_DEFAULT() macro to use the default factory.
+
+    \section3 "_ucm_initialize already defined in ..."
+
+    The server exports more than one implementation of a QAxFactory,
+    or exports the same implementation twice. If you use the default
+    factory, the QAXFACTORY_DEFAULT() macro must only be used once in
+    the project. Use a custom QAxFactory implementation and the
+    QAXFACTORY_EXPORT() macro if the server provides multiple ActiveX
+    controls.
+
+    \section2 Distributing QAxServer Binaries
+
+    ActiveX servers written with Qt can use Qt either as a shared
+    library, or have Qt linked statically into the binary. Both ways
+    will produce rather large packages (either the server binary
+    itself becomes large, or you have to ship the Qt DLL).
+
+    \section3 Installing Stand-Alone Servers
+
+    When your ActiveX server can also run as a stand-alone application,
+    run the server executable with the \c -regserver command line
+    parameter after installing the executable on the target system.
+    After that the controls provided by the server will be available to
+    ActiveX clients.
+
+    \section3 Installing In-Process Servers
+
+    When your ActiveX server is part of an installation package, use the
+    \c regsvr32 tool provided by Microsoft to register the controls on
+    the target system. If this tool is not present, load the DLL into
+    your installer process, resolve the \c DllRegisterServer symbol and
+    call the function:
+
+    \snippet doc/src/snippets/code/doc_src_qaxserver.cpp 11
+
+    \section3 Distributing Servers over the Internet
+
+    If you want to use controls in your server in web-pages you need to
+    make the server available to the browser used to view your page, and
+    you need to specify the location of the server package in your page.
+
+    To specify the location of a server, use the CODEBASE attribute in
+    the OBJECT tag of your web-site. The value can point to the server
+    file itself, to an INF file listing other files the server requires
+    (e.g. the Qt DLL), or a compressed CAB archive.
+
+    INF and CAB files are documented in almost every book available about
+    ActiveX and COM programming as well as in the MSDN library and various
+    other Online resources. The examples include INF files that can be used
+    to build CAB archives:
+
+    \snippet examples/activeqt/simple/simple.inf 0
+
+    The CABARC tool from Microsoft can easily generate CAB archives:
+
+    \snippet doc/src/snippets/code/doc_src_qaxserver.qdoc 12
+
+    The INF files assume a static build of Qt, so no dependencies to other DLLs
+    are listed in the INF files. To distribute an ActiveX server depending on
+    DLLs you must add the dependencies, and provide the library files
+    with the archive.
+
+    \section1 Using the Controls
+
+    To use the ActiveX controls, e.g. to embed them in a web page, use
+    the \c <object> HTML tag. 
+
+    \snippet doc/src/snippets/code/doc_src_qaxserver.qdoc 13
+
+    To initialize the control's properties, use
+
+    \snippet doc/src/snippets/code/doc_src_qaxserver.qdoc 14
+
+    If the web browser supports scripting use JavaScript, VBScript
+    and forms to script the control. The
+    \l{ActiveQt Examples} include demonstration HTML pages for the example
+    controls.
+
+    \section2 Supported and Unsupported ActiveX Clients
+
+    The following is largly based on our own experiements with ActiveX
+    controls and client applications, and is by no means complete.
+
+    \section3 Supported Clients
+
+    These standard applications work with ActiveX controls developed with 
+    ActiveQt. Note that some clients support only in-process controls.
+
+    \list
+    \li Internet Explorer
+    \li Microsoft ActiveX Control Test Container
+    \li Microsoft Visual Studio 6.0
+    \li Microsoft Visual Studio.NET/2003
+    \li Microsoft Visual Basic 6.0
+    \li MFC- and ATL-based containers
+    \li Sybase PowerBuilder
+    \li ActiveQt based containers
+    \endlist
+
+    Microsoft Office applications are supported, but you need to register
+    the controls as "Insertable" objects. Reimplement QAxFactory::registerClass
+    to add this attribute to the COM class, or set the "Insertable" class info
+    for your class to "yes" using the Q_CLASSINFO macro.
+
+    \section3 Unsupported Clients
+
+    We have not managed to make ActiveQt based COM objects work with the
+    following client applications.
+
+    \list
+    \li Borland C++ Builder (Versions 5 and 6)
+    \li Borland Delphi
+    \endlist
+
+    \section2 Typical Runtime Errors
+
+    \section3 The Server Does Not Respond
+
+    If the system is unable to start the server (check with the task
+    manager whether the server runs a process), make sure that no DLL
+    the server depends on is missing from the system path (e.g. the Qt 
+    DLL!). Use a dependency walker to view all dependencies of the server 
+    binary.
+
+    If the server runs (e.g. the task manager lists a process), see
+    the following section for information on debugging your server.
+
+    \section3 The Object Cannot Be Created
+
+    If the server could be built and registered correctly during the build
+    process, but the object cannot be initiliazed e.g. by the OLE/COM Object 
+    Viewer application, make sure that no DLL the server depends on is
+    missing from the system path (e.g. the Qt DLL). Use a dependency walker
+    to view all dependencies of the server binary.
+
+    If the server runs, see the following section for information on
+    debugging your server.
+
+    \section2 Debugging Runtime Errors
+
+    To debug an in-process server in Visual Studio, set the server project 
+    as the active project, and specify a client "executable for debug
+    session" in the project settings (e.g. use the ActiveX Test Container). 
+    You can set breakpoints in your code, and also step into ActiveQt and 
+    Qt code if you installed the debug version.
+
+    To debug an executable server, run the application in a debugger
+    and start with the command line parameter \c -activex. Then start
+    your client and create an instance of your ActiveX control. COM 
+    will use the existing process for the next client trying to create 
+    an ActiveX control.
+
+    \section1 Class Information and Tuning
+
+    To provide attributes for each COM class, use the Q_CLASSINFO macro, which is part of
+    Qt's meta object system.
+
+    \table
+    \header
+    \li Key
+    \li Meaning of value
+    \row
+    \li Version
+    \li The version of the class (1.0 is default)
+    \row
+    \li Description
+    \li A string describing the class.
+    \row
+    \li ClassID
+    \li The class ID.
+       You must reimplement QAxFactory::classID if not specified.
+    \row
+    \li InterfaceID
+    \li The interface ID.
+       You must reimplement QAxFactory::interfaceID if not specified.
+    \row
+    \li EventsID
+    \li The event interface ID.
+       No signals are exposed as COM events if not specified.
+    \row
+    \li DefaultProperty
+    \li The property specified represents the default property of this class.
+       Ie. the default property of a push button would be "text".
+    \row
+    \li DefaultSignal
+    \li The signal specified respresents the default signal of this class.
+       Ie. the default signal of a push button would be "clicked".
+    \row
+    \li LicenseKey
+    \li Object creation requires the specified license key. The key can be
+       empty to require a licensed machine. By default classes are not
+       licensed. Also see the following section.
+    \row
+    \li StockEvents
+    \li Objects expose stock events if value is "yes".
+       See \l QAxFactory::hasStockEvents()
+    \row
+    \li ToSuperClass
+    \li Objects expose functionality of all super-classes up to and
+       including the class name in value.
+       See \l QAxFactory::exposeToSuperClass()
+    \row
+    \li Insertable
+    \li If the value is "yes" the class is registered to be "Insertable"
+       and will be listed in OLE 2 containers (ie. Microsoft Office). This 
+       attribute is not be set by default.
+    \row
+    \li Aggregatable
+    \li If the value is "no" the class does not support aggregation. By
+       default aggregation is supported.
+    \row
+    \li Creatable
+    \li If the value is "no" the class cannot be created by the client,
+       and is only available through the API of another class (ie. the
+       class is a sub-type).
+    \row
+    \li RegisterObject
+    \li If the value is "yes" objects of this class are registered with
+       OLE and accessible from the running object table (ie. clients
+       can connect to an already running instance of this class). This
+       attribute is only supported in out-of-process servers.
+    \row
+    \li MIME
+    \li The object can handle data and files of the format specified in the
+       value. The value has the format mime:extension:description. Multiple 
+       formats are separated by a semicolon.
+    \row
+    \li CoClassAlias
+    \li The classname used in the generated IDL and in the registry. This is
+       esp. useful for C++ classes that live in a namespace - by default, 
+       ActiveQt just removes the "::" to make the IDL compile.
+    \endtable
+
+    Note that both keys and values are case sensitive.
+
+    The following declares version 2.0 of a class that exposes only its
+    own API, and is available in the "Insert Objects" dialog of Microsoft
+    Office applications.
+
+    \snippet doc/src/snippets/code/doc_src_qaxserver.cpp 15
+
+    \section2 Developing Licensed Components
+
+    If you develop components you might want to control who is able to instantiate
+    those components. Since the server binary can be shipped to and registered on 
+    any client machine it is possible for anybody to use those components in his 
+    own software.
+
+    Licensing components can be done using a variety of techniques, e.g. the code
+    creating the control can provide a license key, or the machine on which the
+    control is supposed to run needs to be licensed.
+
+    To mark a Qt class as licensed specify a "LicenseKey" using the
+    Q_CLASSINFO() macro.
+
+    \snippet doc/src/snippets/code/doc_src_qaxserver.cpp 16
+
+    The key is required to be able to create an instance of \c MyLicensedControl
+    on a machine that is not licensed itself. The licensed developer can now 
+    redistributes the server binary with his application, which creates the control 
+    using the value of "LicenseKey", while users of the application cannot create
+    the control without the license key.
+
+    If a single license key for the control is not sufficient (ie. you want 
+    differnet developers to receive different license keys) you can specify an 
+    empty key to indicate that the control requires a license, and reimplement 
+    \l QAxFactory::validateLicenseKey() to verify that a license exists on the 
+    system (ie. through a license file).
+
+    \section2 More Interfaces
+
+    ActiveX controls provided by ActiveQt servers support a minimal set of COM 
+    interfaces to implement the OLE specifications. When the ActiveX class inherits 
+    from the QAxBindable class it can also implement additional COM interfaces.
+
+    Create a new subclass of QAxAggregated and use multiple inheritance
+    to subclass additional COM interface classes. 
+
+    \snippet doc/src/snippets/code/doc_src_qaxserver.cpp 17
+
+    Reimplement the QAxAggregated::queryInterface() function to
+    support the additional COM interfaces.
+
+    \snippet doc/src/snippets/code/doc_src_qaxserver.cpp 18
+
+    Since \c ISomeCOMInterface is a subclass of \c IUnknown you will
+    have to implement the \c QueryInterface(), \c AddRef(), and \c
+    Release() functions.  Use the QAXAGG_IUNKNOWN macro in your
+    class definition to do that. If you implement the \c IUnknown
+    functions manually, delegate the calls to the interface pointer
+    returned by the QAxAggregated::controllingUnknown() function,
+    e.g.
+
+    \snippet doc/src/snippets/code/doc_src_qaxserver.cpp 19
+
+    Do not support the \c IUnknown interface itself in your
+    \l{QAxAggregated::queryInterface()}{queryInterface()}
+    implementation.
+
+    Implement the methods of the COM interfaces, and use QAxAggregated::object()
+    if you need to make calls to the QObject subclass implementing the control.
+
+    In your QAxBindable subclass, implement
+    QAxBindable::createAggregate() to return a new object of the
+    QAxAggregated subclass.
+
+    \snippet doc/src/snippets/code/doc_src_qaxserver.cpp 20
+*/