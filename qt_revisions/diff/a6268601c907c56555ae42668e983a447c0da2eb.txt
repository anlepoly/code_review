diff --git a/src/imports/multimedia/qdeclarativecamera.cpp b/src/imports/multimedia/qdeclarativecamera.cpp
index 472bae6..11872e2 100644
--- a/src/imports/multimedia/qdeclarativecamera.cpp
+++ b/src/imports/multimedia/qdeclarativecamera.cpp
@@ -70,7 +70,6 @@ void QDeclarativeCamera::_q_updateState(QCamera::State state)
 
 /*!
     \qmlclass Camera QDeclarativeCamera
-    \since 4.7
     \brief The Camera element allows you to add camera viewfinder to a scene.
     \ingroup qml-multimedia
     \inherits Item
diff --git a/src/imports/multimedia/qdeclarativecameraexposure.cpp b/src/imports/multimedia/qdeclarativecameraexposure.cpp
index e9f04de..09ad68e 100644
--- a/src/imports/multimedia/qdeclarativecameraexposure.cpp
+++ b/src/imports/multimedia/qdeclarativecameraexposure.cpp
@@ -46,7 +46,6 @@ QT_BEGIN_NAMESPACE
 
 /*!
     \qmlclass CameraExposure QDeclarativeCameraExposure
-    \since 5.0
     \brief The CameraExposure element provides interface for exposure related camera settings.
     \ingroup qml-multimedia
 
diff --git a/src/imports/multimedia/qdeclarativecameraflash.cpp b/src/imports/multimedia/qdeclarativecameraflash.cpp
index b630bda..0aa4876 100644
--- a/src/imports/multimedia/qdeclarativecameraflash.cpp
+++ b/src/imports/multimedia/qdeclarativecameraflash.cpp
@@ -46,7 +46,6 @@ QT_BEGIN_NAMESPACE
 
 /*!
     \qmlclass CameraFlash QDeclarativeCameraFlash
-    \since 5.0
     \brief The CameraFlash element provides interface for flash related camera settings.
     \ingroup qml-multimedia
 
diff --git a/src/imports/multimedia/qdeclarativecamerafocus.cpp b/src/imports/multimedia/qdeclarativecamerafocus.cpp
index d0ff644..cadeef7 100644
--- a/src/imports/multimedia/qdeclarativecamerafocus.cpp
+++ b/src/imports/multimedia/qdeclarativecamerafocus.cpp
@@ -46,7 +46,6 @@ QT_BEGIN_NAMESPACE
 
 /*!
     \qmlclass CameraFocus QDeclarativeCameraFocus
-    \since 5.0
     \brief The CameraFocus element provides interface for focus related camera settings.
     \ingroup qml-multimedia
 
diff --git a/src/imports/multimedia/qdeclarativeradio.cpp b/src/imports/multimedia/qdeclarativeradio.cpp
index 2732d3d..b9e657a 100644
--- a/src/imports/multimedia/qdeclarativeradio.cpp
+++ b/src/imports/multimedia/qdeclarativeradio.cpp
@@ -45,7 +45,6 @@ QT_BEGIN_NAMESPACE
 
 /*!
     \qmlclass Radio QDeclarativeRadio
-    \since 5.0.0
     \brief The Radio element allows you to access radio functionality from a QML application.
     \ingroup qml-multimedia
     \inherits Item
diff --git a/src/imports/multimedia/qdeclarativeradiodata.cpp b/src/imports/multimedia/qdeclarativeradiodata.cpp
index 860a454..9d6d17a 100644
--- a/src/imports/multimedia/qdeclarativeradiodata.cpp
+++ b/src/imports/multimedia/qdeclarativeradiodata.cpp
@@ -45,7 +45,6 @@ QT_BEGIN_NAMESPACE
 
 /*!
     \qmlclass RadioData QDeclarativeRadioData
-    \since 5.0.0
     \brief The RadioData element allows you to access RDS data from a QML application.
     \ingroup qml-multimedia
     \inherits Item
diff --git a/src/imports/multimedia/qdeclarativevideooutput.cpp b/src/imports/multimedia/qdeclarativevideooutput.cpp
index 51e7499..3625cde 100644
--- a/src/imports/multimedia/qdeclarativevideooutput.cpp
+++ b/src/imports/multimedia/qdeclarativevideooutput.cpp
@@ -118,7 +118,6 @@ private:
 /*!
     \qmlclass VideoOutput QDeclarativeVideoOutput
     \brief The VideoOutput element allows you to render video or camera viewfinder.
-    \since 5.0.0
 
     \ingroup qml-multimedia
 
diff --git a/src/multimedia/audio/qaudiodeviceinfo.cpp b/src/multimedia/audio/qaudiodeviceinfo.cpp
index 9ff74c6..88730c3 100644
--- a/src/multimedia/audio/qaudiodeviceinfo.cpp
+++ b/src/multimedia/audio/qaudiodeviceinfo.cpp
@@ -162,7 +162,6 @@ QAudioDeviceInfo::QAudioDeviceInfo():
 
 /*!
     Constructs a copy of \a other.
-    \since 1.0
 */
 QAudioDeviceInfo::QAudioDeviceInfo(const QAudioDeviceInfo& other):
     d(other.d)
@@ -178,7 +177,6 @@ QAudioDeviceInfo::~QAudioDeviceInfo()
 
 /*!
     Sets the QAudioDeviceInfo object to be equal to \a other.
-    \since 1.0
 */
 QAudioDeviceInfo& QAudioDeviceInfo::operator=(const QAudioDeviceInfo &other)
 {
@@ -188,7 +186,6 @@ QAudioDeviceInfo& QAudioDeviceInfo::operator=(const QAudioDeviceInfo &other)
 
 /*!
     Returns whether this QAudioDeviceInfo object holds a device definition.
-    \since 1.0
 */
 bool QAudioDeviceInfo::isNull() const
 {
@@ -203,7 +200,6 @@ bool QAudioDeviceInfo::isNull() const
     They are a unique string identifier for the audio device.
 
     eg. default, Intel, U0x46d0x9a4
-    \since 1.0
 */
 QString QAudioDeviceInfo::deviceName() const
 {
@@ -213,7 +209,6 @@ QString QAudioDeviceInfo::deviceName() const
 /*!
     Returns true if the supplied \a settings are supported by the audio
     device described by this QAudioDeviceInfo.
-    \since 1.0
 */
 bool QAudioDeviceInfo::isFormatSupported(const QAudioFormat &settings) const
 {
@@ -232,7 +227,6 @@ bool QAudioDeviceInfo::isFormatSupported(const QAudioFormat &settings) const
     \o Input settings: 8000Hz mono 8 bit.
     \o Output settings: 44100Hz stereo 16 bit little endian.
     \endlist
-    \since 1.0
 */
 QAudioFormat QAudioDeviceInfo::preferredFormat() const
 {
@@ -245,7 +239,6 @@ QAudioFormat QAudioDeviceInfo::preferredFormat() const
     These settings are provided by the platform/audio plugin being used.
 
     They are also dependent on the \l {QAudio}::Mode being used.
-    \since 1.0
 */
 QAudioFormat QAudioDeviceInfo::nearestFormat(const QAudioFormat &settings) const
 {
@@ -343,7 +336,6 @@ QAudioFormat QAudioDeviceInfo::nearestFormat(const QAudioFormat &settings) const
     For writing plugins to support additional codecs refer to:
 
     http://www.iana.org/assignments/media-types/audio/
-    \since 1.0
 */
 QStringList QAudioDeviceInfo::supportedCodecs() const
 {
@@ -353,7 +345,6 @@ QStringList QAudioDeviceInfo::supportedCodecs() const
 /*!
     Returns a list of supported sample rates (in Hertz).
 
-    \since 1.0
 */
 QList<int> QAudioDeviceInfo::supportedSampleRates() const
 {
@@ -364,7 +355,6 @@ QList<int> QAudioDeviceInfo::supportedSampleRates() const
     \obsolete
 
     Use supportedSampleRates() instead.
-    \since 1.0
 */
 QList<int> QAudioDeviceInfo::supportedFrequencies() const
 {
@@ -376,7 +366,6 @@ QList<int> QAudioDeviceInfo::supportedFrequencies() const
 
     This is typically 1 for mono sound, or 2 for stereo sound.
 
-    \since 1.0
 */
 QList<int> QAudioDeviceInfo::supportedChannelCounts() const
 {
@@ -387,7 +376,6 @@ QList<int> QAudioDeviceInfo::supportedChannelCounts() const
     \obsolete
 
     Use supportedChannelCount() instead.
-    \since 1.0
 */
 QList<int> QAudioDeviceInfo::supportedChannels() const
 {
@@ -399,7 +387,6 @@ QList<int> QAudioDeviceInfo::supportedChannels() const
 
     Typically this will include 8 and 16 bit sample sizes.
 
-    \since 1.0
 */
 QList<int> QAudioDeviceInfo::supportedSampleSizes() const
 {
@@ -408,7 +395,6 @@ QList<int> QAudioDeviceInfo::supportedSampleSizes() const
 
 /*!
     Returns a list of supported byte orders.
-    \since 1.0
 */
 QList<QAudioFormat::Endian> QAudioDeviceInfo::supportedByteOrders() const
 {
@@ -417,7 +403,6 @@ QList<QAudioFormat::Endian> QAudioDeviceInfo::supportedByteOrders() const
 
 /*!
     Returns a list of supported sample types.
-    \since 1.0
 */
 QList<QAudioFormat::SampleType> QAudioDeviceInfo::supportedSampleTypes() const
 {
@@ -427,7 +412,6 @@ QList<QAudioFormat::SampleType> QAudioDeviceInfo::supportedSampleTypes() const
 /*!
     Returns the information for the default input audio device.
     All platform and audio plugin implementations provide a default audio device to use.
-    \since 1.0
 */
 QAudioDeviceInfo QAudioDeviceInfo::defaultInputDevice()
 {
@@ -437,7 +421,6 @@ QAudioDeviceInfo QAudioDeviceInfo::defaultInputDevice()
 /*!
     Returns the information for the default output audio device.
     All platform and audio plugin implementations provide a default audio device to use.
-    \since 1.0
 */
 QAudioDeviceInfo QAudioDeviceInfo::defaultOutputDevice()
 {
@@ -446,7 +429,6 @@ QAudioDeviceInfo QAudioDeviceInfo::defaultOutputDevice()
 
 /*!
     Returns a list of audio devices that support \a mode.
-    \since 1.0
 */
 QList<QAudioDeviceInfo> QAudioDeviceInfo::availableDevices(QAudio::Mode mode)
 {
@@ -456,7 +438,6 @@ QList<QAudioDeviceInfo> QAudioDeviceInfo::availableDevices(QAudio::Mode mode)
 
 /*!
     \internal
-    \since 1.0
 */
 QAudioDeviceInfo::QAudioDeviceInfo(const QString &realm, const QByteArray &handle, QAudio::Mode mode):
     d(new QAudioDeviceInfoPrivate(realm, handle, mode))
@@ -465,7 +446,6 @@ QAudioDeviceInfo::QAudioDeviceInfo(const QString &realm, const QByteArray &handl
 
 /*!
     \internal
-    \since 1.0
 */
 QString QAudioDeviceInfo::realm() const
 {
@@ -474,7 +454,6 @@ QString QAudioDeviceInfo::realm() const
 
 /*!
     \internal
-    \since 1.0
 */
 QByteArray QAudioDeviceInfo::handle() const
 {
@@ -484,7 +463,6 @@ QByteArray QAudioDeviceInfo::handle() const
 
 /*!
     \internal
-    \since 1.0
 */
 QAudio::Mode QAudioDeviceInfo::mode() const
 {
diff --git a/src/multimedia/audio/qaudioformat.cpp b/src/multimedia/audio/qaudioformat.cpp
index 8c8cc5a..01a7201 100644
--- a/src/multimedia/audio/qaudioformat.cpp
+++ b/src/multimedia/audio/qaudioformat.cpp
@@ -108,7 +108,6 @@ public:
 
     \inmodule QtMultimedia
     \ingroup  multimedia
-    \since 1.0
 
     An audio format specifies how data in an audio stream is arranged,
     i.e, how the stream is to be interpreted. The encoding itself is
@@ -176,7 +175,6 @@ QAudioFormat::QAudioFormat():
 
 /*!
     Construct a new audio format using \a other.
-    \since 1.0
 */
 QAudioFormat::QAudioFormat(const QAudioFormat &other):
     d(other.d)
@@ -192,7 +190,6 @@ QAudioFormat::~QAudioFormat()
 
 /*!
     Assigns \a other to this QAudioFormat implementation.
-    \since 1.0
 */
 QAudioFormat& QAudioFormat::operator=(const QAudioFormat &other)
 {
@@ -205,7 +202,6 @@ QAudioFormat& QAudioFormat::operator=(const QAudioFormat &other)
   QAudioFormat; otherwise returns false.
 
   All elements of QAudioFormat are used for the comparison.
-  \since 1.0
 */
 bool QAudioFormat::operator==(const QAudioFormat &other) const
 {
@@ -222,7 +218,6 @@ bool QAudioFormat::operator==(const QAudioFormat &other) const
   QAudioFormat; otherwise returns false.
 
   All elements of QAudioFormat are used for the comparison.
-  \since 1.0
 */
 bool QAudioFormat::operator!=(const QAudioFormat& other) const
 {
@@ -231,7 +226,6 @@ bool QAudioFormat::operator!=(const QAudioFormat& other) const
 
 /*!
     Returns true if all of the parameters are valid.
-    \since 1.0
 */
 bool QAudioFormat::isValid() const
 {
@@ -242,7 +236,6 @@ bool QAudioFormat::isValid() const
 /*!
    Sets the sample rate to \a samplerate Hertz.
 
-   \since 1.0
 */
 void QAudioFormat::setSampleRate(int samplerate)
 {
@@ -262,7 +255,6 @@ void QAudioFormat::setFrequency(int frequency)
 /*!
     Returns the current sample rate in Hertz.
 
-    \since 1.0
 */
 int QAudioFormat::sampleRate() const
 {
@@ -282,7 +274,6 @@ int QAudioFormat::frequency() const
 /*!
    Sets the channel count to \a channels.
 
-   \since 1.0
 */
 void QAudioFormat::setChannelCount(int channels)
 {
@@ -302,7 +293,6 @@ void QAudioFormat::setChannels(int channels)
 /*!
     Returns the current channel count value.
 
-    \since 1.0
 */
 int QAudioFormat::channelCount() const
 {
@@ -323,7 +313,6 @@ int QAudioFormat::channels() const
    Sets the sample size to the \a sampleSize specified, in bits.
 
    This is typically 8 or 16, but some systems may support higher sample sizes.
-   \since 1.0
 */
 void QAudioFormat::setSampleSize(int sampleSize)
 {
@@ -332,7 +321,6 @@ void QAudioFormat::setSampleSize(int sampleSize)
 
 /*!
     Returns the current sample size value, in bits.
-    \since 1.0
 */
 int QAudioFormat::sampleSize() const
 {
@@ -346,7 +334,6 @@ int QAudioFormat::sampleSize() const
    reported by the QAudioDeviceInfo::supportedCodecs() function
    for the audio device you are working with.
 
-   \since 1.0
    \sa QAudioDeviceInfo::supportedCodecs()
 */
 void QAudioFormat::setCodec(const QString &codec)
@@ -357,7 +344,6 @@ void QAudioFormat::setCodec(const QString &codec)
 /*!
     Returns the current codec identifier.
 
-   \since 1.0
    \sa QAudioDeviceInfo::supportedCodecs()
 */
 QString QAudioFormat::codec() const
@@ -367,7 +353,6 @@ QString QAudioFormat::codec() const
 
 /*!
    Sets the byteOrder to \a byteOrder.
-   \since 1.0
 */
 void QAudioFormat::setByteOrder(QAudioFormat::Endian byteOrder)
 {
@@ -376,7 +361,6 @@ void QAudioFormat::setByteOrder(QAudioFormat::Endian byteOrder)
 
 /*!
     Returns the current byteOrder value.
-    \since 1.0
 */
 QAudioFormat::Endian QAudioFormat::byteOrder() const
 {
@@ -385,7 +369,6 @@ QAudioFormat::Endian QAudioFormat::byteOrder() const
 
 /*!
    Sets the sampleType to \a sampleType.
-   \since 1.0
 */
 void QAudioFormat::setSampleType(QAudioFormat::SampleType sampleType)
 {
@@ -394,7 +377,6 @@ void QAudioFormat::setSampleType(QAudioFormat::SampleType sampleType)
 
 /*!
     Returns the current SampleType value.
-    \since 1.0
 */
 QAudioFormat::SampleType QAudioFormat::sampleType() const
 {
diff --git a/src/multimedia/audio/qaudioinput.cpp b/src/multimedia/audio/qaudioinput.cpp
index e1d19b6..4cab938 100644
--- a/src/multimedia/audio/qaudioinput.cpp
+++ b/src/multimedia/audio/qaudioinput.cpp
@@ -55,7 +55,6 @@ QT_BEGIN_NAMESPACE
 
     \inmodule QtMultimedia
     \ingroup  multimedia
-    \since 1.0
 
     You can construct an audio input with the system's
     \l{QAudioDeviceInfo::defaultInputDevice()}{default audio input
@@ -117,7 +116,6 @@ QT_BEGIN_NAMESPACE
     Construct a new audio input and attach it to \a parent.
     The default audio input device is used with the output
     \a format parameters.
-    \since 1.0
 */
 
 QAudioInput::QAudioInput(const QAudioFormat &format, QObject *parent):
@@ -132,7 +130,6 @@ QAudioInput::QAudioInput(const QAudioFormat &format, QObject *parent):
     Construct a new audio input and attach it to \a parent.
     The device referenced by \a audioDevice is used with the input
     \a format parameters.
-    \since 1.0
 */
 
 QAudioInput::QAudioInput(const QAudioDeviceInfo &audioDevice, const QAudioFormat &format, QObject *parent):
@@ -164,7 +161,6 @@ QAudioInput::~QAudioInput()
      If a problem occurs during this process the error() is set to QAudio::OpenError,
      state() is set to QAudio::StoppedState and stateChanged() signal is emitted.
 
-     \since 1.0
      \sa QIODevice
 */
 
@@ -185,7 +181,6 @@ void QAudioInput::start(QIODevice* device)
     If a problem occurs during this process the error() is set to QAudio::OpenError,
     state() is set to QAudio::StoppedState and stateChanged() signal is emitted.
 
-    \since 1.0
     \sa QIODevice
 */
 
@@ -196,7 +191,6 @@ QIODevice* QAudioInput::start()
 
 /*!
     Returns the QAudioFormat being used.
-    \since 1.0
 */
 
 QAudioFormat QAudioInput::format() const
@@ -209,7 +203,6 @@ QAudioFormat QAudioInput::format() const
 
     Sets error() to QAudio::NoError, state() to QAudio::StoppedState and
     emit stateChanged() signal.
-    \since 1.0
 */
 
 void QAudioInput::stop()
@@ -219,7 +212,6 @@ void QAudioInput::stop()
 
 /*!
     Drops all audio data in the buffers, resets buffers to zero.
-    \since 1.0
 */
 
 void QAudioInput::reset()
@@ -232,7 +224,6 @@ void QAudioInput::reset()
 
     Sets error() to QAudio::NoError, state() to QAudio::SuspendedState and
     emit stateChanged() signal.
-    \since 1.0
 */
 
 void QAudioInput::suspend()
@@ -247,7 +238,6 @@ void QAudioInput::suspend()
     Sets state() to QAudio::ActiveState if you previously called start(QIODevice*).
     Sets state() to QAudio::IdleState if you previously called start().
     emits stateChanged() signal.
-    \since 1.0
 */
 
 void QAudioInput::resume()
@@ -263,7 +253,6 @@ void QAudioInput::resume()
     set is the actual buffer size used, calling bufferSize() anytime after start()
     will return the actual buffer size being used.
 
-    \since 1.0
 */
 
 void QAudioInput::setBufferSize(int value)
@@ -279,7 +268,6 @@ void QAudioInput::setBufferSize(int value)
     If called after start(), returns the actual buffer size being used. This may not be what was set previously
     by setBufferSize().
 
-    \since 1.0
 */
 
 int QAudioInput::bufferSize() const
@@ -292,7 +280,6 @@ int QAudioInput::bufferSize() const
 
     NOTE: returned value is only valid while in QAudio::ActiveState or QAudio::IdleState
     state, otherwise returns zero.
-    \since 1.0
 */
 
 int QAudioInput::bytesReady() const
@@ -308,7 +295,6 @@ int QAudioInput::bytesReady() const
     Returns the period size in bytes.
 
     Note: This is the recommended read size in bytes.
-    \since 1.0
 */
 
 int QAudioInput::periodSize() const
@@ -323,7 +309,6 @@ int QAudioInput::periodSize() const
     The minimum resolution of the timer is platform specific and values
     should be checked with notifyInterval() to confirm actual value
     being used.
-    \since 1.0
 */
 
 void QAudioInput::setNotifyInterval(int ms)
@@ -333,7 +318,6 @@ void QAudioInput::setNotifyInterval(int ms)
 
 /*!
     Returns the notify interval in milliseconds.
-    \since 1.0
 */
 
 int QAudioInput::notifyInterval() const
@@ -344,7 +328,6 @@ int QAudioInput::notifyInterval() const
 /*!
     Returns the amount of audio data processed since start()
     was called in microseconds.
-    \since 1.0
 */
 
 qint64 QAudioInput::processedUSecs() const
@@ -355,7 +338,6 @@ qint64 QAudioInput::processedUSecs() const
 /*!
     Returns the microseconds since start() was called, including time in Idle and
     Suspend states.
-    \since 1.0
 */
 
 qint64 QAudioInput::elapsedUSecs() const
@@ -365,7 +347,6 @@ qint64 QAudioInput::elapsedUSecs() const
 
 /*!
     Returns the error state.
-    \since 1.0
 */
 
 QAudio::Error QAudioInput::error() const
@@ -375,7 +356,6 @@ QAudio::Error QAudioInput::error() const
 
 /*!
     Returns the state of audio processing.
-    \since 1.0
 */
 
 QAudio::State QAudioInput::state() const
@@ -386,14 +366,12 @@ QAudio::State QAudioInput::state() const
 /*!
     \fn QAudioInput::stateChanged(QAudio::State state)
     This signal is emitted when the device \a state has changed.
-    \since 1.0
 */
 
 /*!
     \fn QAudioInput::notify()
     This signal is emitted when x ms of audio data has been processed
     the interval set by setNotifyInterval(x).
-    \since 1.0
 */
 
 QT_END_NAMESPACE
diff --git a/src/multimedia/audio/qaudiooutput.cpp b/src/multimedia/audio/qaudiooutput.cpp
index 2e7ef57..faf160c 100644
--- a/src/multimedia/audio/qaudiooutput.cpp
+++ b/src/multimedia/audio/qaudiooutput.cpp
@@ -56,7 +56,6 @@ QT_BEGIN_NAMESPACE
 
     \inmodule QtMultimedia
     \ingroup  multimedia
-    \since 1.0
 
     You can construct an audio output with the system's
     \l{QAudioDeviceInfo::defaultOutputDevice()}{default audio output
@@ -119,7 +118,6 @@ QT_BEGIN_NAMESPACE
     Construct a new audio output and attach it to \a parent.
     The default audio output device is used with the output
     \a format parameters.
-    \since 1.0
 */
 QAudioOutput::QAudioOutput(const QAudioFormat &format, QObject *parent):
     QObject(parent)
@@ -133,7 +131,6 @@ QAudioOutput::QAudioOutput(const QAudioFormat &format, QObject *parent):
     Construct a new audio output and attach it to \a parent.
     The device referenced by \a audioDevice is used with the output
     \a format parameters.
-    \since 1.0
 */
 QAudioOutput::QAudioOutput(const QAudioDeviceInfo &audioDevice, const QAudioFormat &format, QObject *parent):
     QObject(parent)
@@ -156,7 +153,6 @@ QAudioOutput::~QAudioOutput()
 /*!
     Returns the QAudioFormat being used.
 
-    \since 1.0
 */
 QAudioFormat QAudioOutput::format() const
 {
@@ -175,7 +171,6 @@ QAudioFormat QAudioOutput::format() const
     If a problem occurs during this process the error() is set to QAudio::OpenError,
     state() is set to QAudio::StoppedState and stateChanged() signal is emitted.
 
-    \since 1.0
     \sa QIODevice
 */
 void QAudioOutput::start(QIODevice* device)
@@ -194,7 +189,6 @@ void QAudioOutput::start(QIODevice* device)
     If a problem occurs during this process the error() is set to QAudio::OpenError,
     state() is set to QAudio::StoppedState and stateChanged() signal is emitted.
 
-    \since 1.0
     \sa QIODevice
 */
 QIODevice* QAudioOutput::start()
@@ -207,7 +201,6 @@ QIODevice* QAudioOutput::start()
 
     Sets error() to QAudio::NoError, state() to QAudio::StoppedState and
     emit stateChanged() signal.
-    \since 1.0
 */
 void QAudioOutput::stop()
 {
@@ -217,7 +210,6 @@ void QAudioOutput::stop()
 /*!
     Drops all audio data in the buffers, resets buffers to zero.
 
-    \since 1.0
 */
 void QAudioOutput::reset()
 {
@@ -229,7 +221,6 @@ void QAudioOutput::reset()
 
     Sets error() to QAudio::NoError, state() to QAudio::SuspendedState and
     emits stateChanged() signal.
-    \since 1.0
 */
 void QAudioOutput::suspend()
 {
@@ -243,7 +234,6 @@ void QAudioOutput::suspend()
     Sets state() to QAudio::ActiveState if you previously called start(QIODevice*).
     Sets state() to QAudio::IdleState if you previously called start().
     emits stateChanged() signal.
-    \since 1.0
 */
 void QAudioOutput::resume()
 {
@@ -255,7 +245,6 @@ void QAudioOutput::resume()
 
     \note The returned value is only valid while in QAudio::ActiveState or QAudio::IdleState
     state, otherwise returns zero.
-    \since 1.0
 */
 int QAudioOutput::bytesFree() const
 {
@@ -268,7 +257,6 @@ int QAudioOutput::bytesFree() const
 
     \note It is recommended to provide at least enough data for a full period with each
     write operation.
-    \since 1.0
 */
 int QAudioOutput::periodSize() const
 {
@@ -282,7 +270,6 @@ int QAudioOutput::periodSize() const
     are ignored after start(). It should not be assumed that the buffer size
     set is the actual buffer size used - call bufferSize() anytime after start()
     to return the actual buffer size being used.
-    \since 1.0
 */
 void QAudioOutput::setBufferSize(int value)
 {
@@ -297,7 +284,6 @@ void QAudioOutput::setBufferSize(int value)
     If called after start(), returns the actual buffer size being used. This may not be what was set previously
     by setBufferSize().
 
-    \since 1.0
 */
 int QAudioOutput::bufferSize() const
 {
@@ -311,7 +297,6 @@ int QAudioOutput::bufferSize() const
     The minimum resolution of the timer is platform specific and values
     should be checked with notifyInterval() to confirm the actual value
     being used.
-    \since 1.0
 */
 void QAudioOutput::setNotifyInterval(int ms)
 {
@@ -320,7 +305,6 @@ void QAudioOutput::setNotifyInterval(int ms)
 
 /*!
     Returns the notify interval in milliseconds.
-    \since 1.0
 */
 int QAudioOutput::notifyInterval() const
 {
@@ -330,7 +314,6 @@ int QAudioOutput::notifyInterval() const
 /*!
     Returns the amount of audio data processed since start()
     was called (in microseconds).
-    \since 1.0
 */
 qint64 QAudioOutput::processedUSecs() const
 {
@@ -340,7 +323,6 @@ qint64 QAudioOutput::processedUSecs() const
 /*!
     Returns the microseconds since start() was called, including time in Idle and
     Suspend states.
-    \since 1.0
 */
 qint64 QAudioOutput::elapsedUSecs() const
 {
@@ -349,7 +331,6 @@ qint64 QAudioOutput::elapsedUSecs() const
 
 /*!
     Returns the error state.
-    \since 1.0
 */
 QAudio::Error QAudioOutput::error() const
 {
@@ -358,7 +339,6 @@ QAudio::Error QAudioOutput::error() const
 
 /*!
     Returns the state of audio processing.
-    \since 1.0
 */
 QAudio::State QAudioOutput::state() const
 {
@@ -368,7 +348,6 @@ QAudio::State QAudioOutput::state() const
 /*!
     Sets the volume.
     Where \a volume is between 0.0 and 1.0 inclusive.
-    \since 5.0
 */
 void QAudioOutput::setVolume(qreal volume)
 {
@@ -377,7 +356,6 @@ void QAudioOutput::setVolume(qreal volume)
 
 /*!
     Returns the volume between 0.0 and 1.0 inclusive.
-    \since 5.0
 */
 qreal QAudioOutput::volume() const
 {
@@ -388,7 +366,6 @@ qreal QAudioOutput::volume() const
     \fn QAudioOutput::stateChanged(QAudio::State state)
     This signal is emitted when the device \a state has changed.
     This is the current state of the audio output.
-    \since 1.0
 */
 
 /*!
@@ -396,7 +373,6 @@ qreal QAudioOutput::volume() const
     This signal is emitted when a certain interval of milliseconds
     of audio data has been processed.  The interval is set by
     setNotifyInterval().
-    \since 1.0
 */
 
 QT_END_NAMESPACE
diff --git a/src/multimedia/audio/qaudiosystem.cpp b/src/multimedia/audio/qaudiosystem.cpp
index f642654..adfd947 100644
--- a/src/multimedia/audio/qaudiosystem.cpp
+++ b/src/multimedia/audio/qaudiosystem.cpp
@@ -50,7 +50,6 @@ QT_BEGIN_NAMESPACE
     \ingroup multimedia
     \inmodule QtMultimedia
     \internal
-    \since 1.0
 
     This class implements the audio functionality for
     QAudioDeviceInfo, i.e., QAudioDeviceInfo keeps a
@@ -66,61 +65,51 @@ QT_BEGIN_NAMESPACE
 /*!
     \fn virtual QAudioFormat QAbstractAudioDeviceInfo::preferredFormat() const
     Returns the recommended settings to use.
-    \since 1.0
 */
 
 /*!
     \fn virtual bool QAbstractAudioDeviceInfo::isFormatSupported(const QAudioFormat& format) const
     Returns true if \a format is available from audio device.
-    \since 1.0
 */
 
 /*!
     \fn virtual QString QAbstractAudioDeviceInfo::deviceName() const
     Returns the audio device name.
-    \since 1.0
 */
 
 /*!
     \fn virtual QStringList QAbstractAudioDeviceInfo::supportedCodecs()
     Returns the list of currently available codecs.
-    \since 1.0
 */
 
 /*!
     \fn virtual QList<int> QAbstractAudioDeviceInfo::supportedSampleRates()
     Returns the list of currently available sample rates.
-    \since 1.0
 */
 
 /*!
     \fn virtual QList<int> QAbstractAudioDeviceInfo::supportedChannelCounts()
     Returns the list of currently available channels.
-    \since 1.0
 */
 
 /*!
     \fn virtual QList<int> QAbstractAudioDeviceInfo::supportedSampleSizes()
     Returns the list of currently available sample sizes.
-    \since 1.0
 */
 
 /*!
     \fn virtual QList<QAudioFormat::Endian> QAbstractAudioDeviceInfo::supportedByteOrders()
     Returns the list of currently available byte orders.
-    \since 1.0
 */
 
 /*!
     \fn virtual QList<QAudioFormat::SampleType> QAbstractAudioDeviceInfo::supportedSampleTypes()
     Returns the list of currently available sample types.
-    \since 1.0
 */
 
 /*!
     \class QAbstractAudioOutput
     \brief The QAbstractAudioOutput class is a base class for audio backends.
-    \since 1.0
 
     \ingroup multimedia
     \inmodule QtMultimedia
@@ -138,62 +127,52 @@ QT_BEGIN_NAMESPACE
 /*!
     \fn virtual void QAbstractAudioOutput::start(QIODevice* device)
     Uses the \a device as the QIODevice to transfer data.
-    \since 1.0
 */
 
 /*!
     \fn virtual QIODevice* QAbstractAudioOutput::start()
     Returns a pointer to the QIODevice being used to handle
     the data transfer. This QIODevice can be used to write() audio data directly.
-    \since 1.0
 */
 
 /*!
     \fn virtual void QAbstractAudioOutput::stop()
     Stops the audio output.
-    \since 1.0
 */
 
 /*!
     \fn virtual void QAbstractAudioOutput::reset()
     Drops all audio data in the buffers, resets buffers to zero.
-    \since 1.0
 */
 
 /*!
     \fn virtual void QAbstractAudioOutput::suspend()
     Stops processing audio data, preserving buffered audio data.
-    \since 1.0
 */
 
 /*!
     \fn virtual void QAbstractAudioOutput::resume()
     Resumes processing audio data after a suspend()
-    \since 1.0
 */
 
 /*!
     \fn virtual int QAbstractAudioOutput::bytesFree() const
     Returns the free space available in bytes in the audio buffer.
-    \since 1.0
 */
 
 /*!
     \fn virtual int QAbstractAudioOutput::periodSize() const
     Returns the period size in bytes.
-    \since 1.0
 */
 
 /*!
     \fn virtual void QAbstractAudioOutput::setBufferSize(int value)
     Sets the audio buffer size to \a value in bytes.
-    \since 1.0
 */
 
 /*!
     \fn virtual int QAbstractAudioOutput::bufferSize() const
     Returns the audio buffer size in bytes.
-    \since 1.0
 */
 
 /*!
@@ -201,82 +180,69 @@ QT_BEGIN_NAMESPACE
     Sets the interval for notify() signal to be emitted. This is based on the \a ms
     of audio data processed not on actual real-time. The resolution of the timer
     is platform specific.
-    \since 1.0
 */
 
 /*!
     \fn virtual int QAbstractAudioOutput::notifyInterval() const
     Returns the notify interval in milliseconds.
-    \since 1.0
 */
 
 /*!
     \fn virtual qint64 QAbstractAudioOutput::processedUSecs() const
     Returns the amount of audio data processed since start() was called in milliseconds.
-    \since 1.0
 */
 
 /*!
     \fn virtual qint64 QAbstractAudioOutput::elapsedUSecs() const
     Returns the milliseconds since start() was called, including time in Idle and suspend states.
-    \since 1.0
 */
 
 /*!
     \fn virtual QAudio::Error QAbstractAudioOutput::error() const
     Returns the error state.
-    \since 1.0
 */
 
 /*!
     \fn virtual QAudio::State QAbstractAudioOutput::state() const
     Returns the state of audio processing.
-    \since 1.0
 */
 
 /*!
     \fn virtual void QAbstractAudioOutput::setFormat(const QAudioFormat& fmt)
     Set the QAudioFormat to use to \a fmt.
     Setting the format is only allowable while in QAudio::StoppedState.
-    \since 1.0
 */
 
 /*!
     \fn virtual QAudioFormat QAbstractAudioOutput::format() const
     Returns the QAudioFormat being used.
-    \since 1.0
 */
 
 /*!
     \fn virtual void QAbstractAudioOutput::setVolume(qreal volume)
     Sets the volume.
     Where \a volume is between 0.0 and 1.0.
-    \since 5.0
 */
 
 /*!
     \fn virtual qreal QAbstractAudioOutput::volume() const
     Returns the volume in the range 0.0 and 1.0.
-    \since 5.0
 */
 
 /*!
     \fn QAbstractAudioOutput::errorChanged(QAudio::Error error)
     This signal is emitted when the \a error state has changed.
-    \since 1.0
 */
 
 /*!
     \fn QAbstractAudioOutput::stateChanged(QAudio::State state)
     This signal is emitted when the device \a state has changed.
-    \since 1.0
 */
 
 /*!
     \fn QAbstractAudioOutput::notify()
     This signal is emitted when x ms of audio data has been processed
     the interval set by setNotifyInterval(x).
-    \since 1.0
 */
 
 
@@ -284,7 +250,6 @@ QT_BEGIN_NAMESPACE
     \class QAbstractAudioInput
     \brief The QAbstractAudioInput class provides access for QAudioInput to access the audio
     device provided by the plugin.
-    \since 1.0
 
     \ingroup multimedia
     \inmodule QtMultimedia
@@ -302,62 +267,52 @@ QT_BEGIN_NAMESPACE
 /*!
     \fn virtual void QAbstractAudioInput::start(QIODevice* device)
     Uses the \a device as the QIODevice to transfer data.
-    \since 1.0
 */
 
 /*!
     \fn virtual QIODevice* QAbstractAudioInput::start()
     Returns a pointer to the QIODevice being used to handle
     the data transfer. This QIODevice can be used to read() audio data directly.
-    \since 1.0
 */
 
 /*!
     \fn virtual void QAbstractAudioInput::stop()
     Stops the audio input.
-    \since 1.0
 */
 
 /*!
     \fn virtual void QAbstractAudioInput::reset()
     Drops all audio data in the buffers, resets buffers to zero.
-    \since 1.0
 */
 
 /*!
     \fn virtual void QAbstractAudioInput::suspend()
     Stops processing audio data, preserving buffered audio data.
-    \since 1.0
 */
 
 /*!
     \fn virtual void QAbstractAudioInput::resume()
     Resumes processing audio data after a suspend().
-    \since 1.0
 */
 
 /*!
     \fn virtual int QAbstractAudioInput::bytesReady() const
     Returns the amount of audio data available to read in bytes.
-    \since 1.0
 */
 
 /*!
     \fn virtual int QAbstractAudioInput::periodSize() const
     Returns the period size in bytes.
-    \since 1.0
 */
 
 /*!
     \fn virtual void QAbstractAudioInput::setBufferSize(int value)
     Sets the audio buffer size to \a value in milliseconds.
-    \since 1.0
 */
 
 /*!
     \fn virtual int QAbstractAudioInput::bufferSize() const
     Returns the audio buffer size in milliseconds.
-    \since 1.0
 */
 
 /*!
@@ -365,69 +320,58 @@ QT_BEGIN_NAMESPACE
     Sets the interval for notify() signal to be emitted. This is based
     on the \a ms of audio data processed not on actual real-time.
     The resolution of the timer is platform specific.
-    \since 1.0
 */
 
 /*!
     \fn virtual int QAbstractAudioInput::notifyInterval() const
     Returns the notify interval in milliseconds.
-    \since 1.0
 */
 
 /*!
     \fn virtual qint64 QAbstractAudioInput::processedUSecs() const
     Returns the amount of audio data processed since start() was called in milliseconds.
-    \since 1.0
 */
 
 /*!
     \fn virtual qint64 QAbstractAudioInput::elapsedUSecs() const
     Returns the milliseconds since start() was called, including time in Idle and suspend states.
-    \since 1.0
 */
 
 /*!
     \fn virtual QAudio::Error QAbstractAudioInput::error() const
     Returns the error state.
-    \since 1.0
 */
 
 /*!
     \fn virtual QAudio::State QAbstractAudioInput::state() const
     Returns the state of audio processing.
-    \since 1.0
 */
 
 /*!
     \fn virtual void QAbstractAudioInput::setFormat(const QAudioFormat& fmt)
     Set the QAudioFormat to use to \a fmt.
     Setting the format is only allowable while in QAudio::StoppedState.
-    \since 1.0
 */
 
 /*!
     \fn virtual QAudioFormat QAbstractAudioInput::format() const
     Returns the QAudioFormat being used
-    \since 1.0
 */
 
 /*!
     \fn QAbstractAudioInput::errorChanged(QAudio::Error error)
     This signal is emitted when the \a error state has changed.
-    \since 1.0
 */
 
 /*!
     \fn QAbstractAudioInput::stateChanged(QAudio::State state)
     This signal is emitted when the device \a state has changed.
-    \since 1.0
 */
 
 /*!
     \fn QAbstractAudioInput::notify()
     This signal is emitted when x ms of audio data has been processed
     the interval set by setNotifyInterval(x).
-    \since 1.0
 */
 
 
diff --git a/src/multimedia/audio/qaudiosystemplugin.cpp b/src/multimedia/audio/qaudiosystemplugin.cpp
index f3537f8..f2532f3 100644
--- a/src/multimedia/audio/qaudiosystemplugin.cpp
+++ b/src/multimedia/audio/qaudiosystemplugin.cpp
@@ -47,7 +47,6 @@ QT_BEGIN_NAMESPACE
 /*!
     \class QAudioSystemPlugin
     \brief The QAudioSystemPlugin class provides an abstract base for audio plugins.
-    \since 1.0
 
     \ingroup multimedia
     \inmodule QtMultimedia
@@ -108,33 +107,28 @@ QAudioSystemPlugin::~QAudioSystemPlugin()
 /*!
     \fn QStringList QAudioSystemPlugin::keys() const
     Returns the list of device identifiers this plugin supports.
-    \since 1.0
 */
 
 /*!
     \fn QList<QByteArray> QAudioSystemPlugin::availableDevices(QAudio::Mode mode) const
     Returns a list of available audio devices for \a mode
-    \since 1.0
 */
 
 /*!
     \fn QAbstractAudioInput* QAudioSystemPlugin::createInput(const QByteArray& device)
     Returns a pointer to a QAbstractAudioInput created using \a device identifier
-    \since 1.0
 */
 
 /*!
     \fn QAbstractAudioOutput* QAudioSystemPlugin::createOutput(const QByteArray& device)
     Returns a pointer to a QAbstractAudioOutput created using \a device identifier
 
-    \since 1.0
 */
 
 /*!
     \fn QAbstractAudioDeviceInfo* QAudioSystemPlugin::createDeviceInfo(const QByteArray& device, QAudio::Mode mode)
     Returns a pointer to a QAbstractAudioDeviceInfo created using \a device and \a mode
 
-    \since 1.0
 */
 
 
diff --git a/src/multimedia/audio/qsamplecache_p.cpp b/src/multimedia/audio/qsamplecache_p.cpp
index fbb8f3d..136d88a 100644
--- a/src/multimedia/audio/qsamplecache_p.cpp
+++ b/src/multimedia/audio/qsamplecache_p.cpp
@@ -54,7 +54,6 @@ QT_BEGIN_NAMESPACE
 
     When you want to get a sound sample data, you need to request the QSample reference from QSampleCache.
 
-    \since 1.1
 
     \code
         QSample *m_sample;     // class member.
diff --git a/src/multimedia/audio/qsound.cpp b/src/multimedia/audio/qsound.cpp
index 47f67a7..7a51bd9 100644
--- a/src/multimedia/audio/qsound.cpp
+++ b/src/multimedia/audio/qsound.cpp
@@ -80,7 +80,6 @@
 /*!
     Plays the sound stored in the file specified by the given \a filename.
 
-    \since 5.0
     \sa stop(), loopsRemaining(), isFinished()
 */
 void QSound::play(const QString& filename)
@@ -96,7 +95,6 @@ void QSound::play(const QString& filename)
     Constructs a QSound object from the file specified by the given \a
     filename and with the given \a parent.
 
-    \since 5.0
     \sa play()
 */
 QSound::QSound(const QString& filename, QObject* parent)
@@ -111,7 +109,6 @@ QSound::QSound(const QString& filename, QObject* parent)
     the stop() function is called before the sound object is
     destroyed.
 
-    \since 5.0
     \sa stop(), isFinished()
 */
 QSound::~QSound()
@@ -138,7 +135,6 @@ bool QSound::isFinished() const
     sound. The sound can be played again at any time, possibly mixing
     or replacing previous plays of the sound.
 
-    \since 5.0
     \sa fileName()
 */
 void QSound::play()
@@ -150,7 +146,6 @@ void QSound::play()
     Returns the number of times the sound will play.
     Return value of \c QSound::Infinite indicates infinite number of loops
 
-    \since 5.0
     \sa loopsRemaining(), setLoops()
 */
 int QSound::loops() const
@@ -168,7 +163,6 @@ int QSound::loops() const
     positive values this value decreases each time the sound is played).
     Return value of \c QSound::Infinite indicates infinite number of loops
 
-    \since 5.0
     \sa loops(), isFinished()
 */
 int QSound::loopsRemaining() const
@@ -190,7 +184,6 @@ int QSound::loopsRemaining() const
     Note that passing the value \c QSound::Infinite will cause the sound to loop
     indefinitely.
 
-    \since 5.0
     \sa loops()
 */
 void QSound::setLoops(int n)
@@ -204,7 +197,6 @@ void QSound::setLoops(int n)
 /*!
     Returns the filename associated with this QSound object.
 
-    \since 5.0
     \sa QSound()
 */
 QString QSound::fileName() const
@@ -215,7 +207,6 @@ QString QSound::fileName() const
 /*!
     Stops the sound playing.
 
-    \since 5.0
     \sa play()
 */
 void QSound::stop()
@@ -225,7 +216,6 @@ void QSound::stop()
 
 /*!
     \internal
-    \since 5.0
 */
 void QSound::deleteOnComplete()
 {
diff --git a/src/multimedia/audio/qsoundeffect.cpp b/src/multimedia/audio/qsoundeffect.cpp
index b9f8306..3b3d233 100644
--- a/src/multimedia/audio/qsoundeffect.cpp
+++ b/src/multimedia/audio/qsoundeffect.cpp
@@ -52,7 +52,6 @@ QT_BEGIN_NAMESPACE
 /*!
     \qmlclass SoundEffect QSoundEffect
     \brief The SoundEffect element provides a way to play sound effects in QML.
-    \since 1.0
 
     \inmodule QtMultimedia
 
@@ -65,14 +64,12 @@ QT_BEGIN_NAMESPACE
 
 /*!
     \qmlproperty url SoundEffect::source
-    \since 1.0
 
     This property provides a way to control the sound to play.
 */
 
 /*!
     \qmlproperty int SoundEffect::loops
-    \since 1.0
 
     This property provides a way to control the number of times to repeat the sound on each play().
 
@@ -81,7 +78,6 @@ QT_BEGIN_NAMESPACE
 
 /*!
     \qmlproperty qreal SoundEffect::volume
-    \since 1.0
 
     This property holds the volume of the playback, from 0.0 (silent) to 1.0 (maximum volume).
     Note: Currently this has no effect on Mac OS X.
@@ -89,21 +85,18 @@ QT_BEGIN_NAMESPACE
 
 /*!
     \qmlproperty bool SoundEffect::muted
-    \since 1.0
 
     This property provides a way to control muting.
 */
 
 /*!
     \qmlproperty bool SoundEffect::playing
-    \since 1.1
 
     This property indicates if the soundeffect is playing or not.
 */
 
 /*!
     \qmlproperty int SoundEffect::status
-    \since 1.0
 
     This property indicates the following status of the soundeffect.
 
@@ -115,42 +108,36 @@ QT_BEGIN_NAMESPACE
 
 /*!
     \qmlsignal SoundEffect::sourceChanged()
-    \since 1.0
 
     This handler is called when the source has changed.
 */
 
 /*!
     \qmlsignal SoundEffect::loopCountChanged()
-    \since 1.0
 
     This handler is called when the initial number of loops has changed.
 */
 
 /*!
     \qmlsignal SoundEffect::loopsRemainingChanged()
-    \since 1.0
 
     This handler is called when the remaining number of loops has changed.
 */
 
 /*!
     \qmlsignal SoundEffect::volumeChanged()
-    \since 1.0
 
     This handler is called when the volume has changed.
 */
 
 /*!
     \qmlsignal SoundEffect::mutedChanged()
-    \since 1.0
 
     This handler is called when the mute state has changed.
 */
 
 /*!
     \qmlsignal SoundEffect::playingChanged()
-    \since 1.0
 
     This handler is called when the playing property has changed.
 */
@@ -159,12 +146,10 @@ QT_BEGIN_NAMESPACE
     \qmlsignal SoundEffect::statusChanged()
 
     This handler is called when the status property has changed.
-    \since 1.0
 */
 
 
 /*!
-    \since 1.0
 */
 
 QSoundEffect::QSoundEffect(QObject *parent) :
@@ -274,7 +259,6 @@ bool QSoundEffect::isLoaded() const
   This is the default method for SoundEffect.
 
   \snippet doc/src/snippets/multimedia-snippets/soundeffect.qml play sound on click
-  \since 1.0
 */
 void QSoundEffect::play()
 {
@@ -299,7 +283,6 @@ QSoundEffect::Status QSoundEffect::status() const
   Note that if the backend is PulseAudio, due to the limitation of the underlying API,
   tis stop will only prevent next looping but will not be able to stop current playback immediately.
 
-  \since 1.0
  */
 void QSoundEffect::stop()
 {
diff --git a/src/multimedia/camera/qcamera.cpp b/src/multimedia/camera/qcamera.cpp
index 89ab537..97c105a 100644
--- a/src/multimedia/camera/qcamera.cpp
+++ b/src/multimedia/camera/qcamera.cpp
@@ -82,7 +82,6 @@ QT_BEGIN_NAMESPACE
 
     \inmodule QtMultimedia
     \ingroup camera
-    \since 1.1
 
     QCamera can be used with QVideoWidget for viewfinder display,
     QMediaRecorder for video recording and QCameraImageCapture for image taking.
@@ -407,7 +406,6 @@ QCamera::~QCamera()
 
 /*!
     Return true if the camera service is ready to use.
-    \since 1.1
 */
 bool QCamera::isAvailable() const
 {
@@ -416,7 +414,6 @@ bool QCamera::isAvailable() const
 
 /*!
     Returns the error state of the camera service.
-    \since 1.1
 */
 
 QtMultimedia::AvailabilityError QCamera::availabilityError() const
@@ -437,7 +434,6 @@ QtMultimedia::AvailabilityError QCamera::availabilityError() const
 
 /*!
     Returns the camera exposure control object.
-    \since 1.1
 */
 QCameraExposure *QCamera::exposure() const
 {
@@ -446,7 +442,6 @@ QCameraExposure *QCamera::exposure() const
 
 /*!
     Returns the camera focus control object.
-    \since 1.1
 */
 QCameraFocus *QCamera::focus() const
 {
@@ -455,7 +450,6 @@ QCameraFocus *QCamera::focus() const
 
 /*!
     Returns the camera image processing control object.
-    \since 1.1
 */
 QCameraImageProcessing *QCamera::imageProcessing() const
 {
@@ -465,7 +459,6 @@ QCameraImageProcessing *QCamera::imageProcessing() const
 /*!
   Sets the QVideoWidget based camera \a viewfinder.
   The previously set viewfinder is detached.
-  \since 1.1
 */
 
 // QVideoWidget is forward declared
@@ -486,7 +479,6 @@ void QCamera::setViewfinder(QVideoWidget *viewfinder)
 /*!
   Sets the QGraphicsVideoItem based camera \a viewfinder.
   The previously set viewfinder is detached.
-  \since 1.1
 */
 // QGraphicsVideoItem is forward declared
 void QCamera::setViewfinder(QGraphicsVideoItem *viewfinder)
@@ -509,7 +501,6 @@ void QCamera::setViewfinder(QGraphicsVideoItem *viewfinder)
 
     If a viewfinder has already been set on the camera the new surface
     will replace it.
-    \since 1.2
 */
 
 void QCamera::setViewfinder(QAbstractVideoSurface *surface)
@@ -528,7 +519,6 @@ void QCamera::setViewfinder(QAbstractVideoSurface *surface)
 
 /*!
     Returns the error state of the object.
-    \since 1.1
 */
 
 QCamera::Error QCamera::error() const
@@ -538,7 +528,6 @@ QCamera::Error QCamera::error() const
 
 /*!
     Returns a string describing a camera's error state.
-    \since 1.1
 */
 QString QCamera::errorString() const
 {
@@ -548,7 +537,6 @@ QString QCamera::errorString() const
 
 /*!
     Returns true if the capture \a mode is suported.
-    \since 1.1
 */
 bool QCamera::isCaptureModeSupported(QCamera::CaptureMode mode) const
 {
@@ -566,7 +554,6 @@ bool QCamera::isCaptureModeSupported(QCamera::CaptureMode mode) const
   chaging capture mode is likely to lead to camera status
   chaged to QCamera::LoadedStatus, QCamera::LoadingStatus,
   and when the camera is ready to QCamera::ActiveStatus.
-  \since 1.1
 */
 
 QCamera::CaptureMode QCamera::captureMode() const
@@ -596,7 +583,6 @@ void QCamera::setCaptureMode(QCamera::CaptureMode mode)
     While the camera state is changed to QCamera::ActiveState,
     starting the camera service can be asynchronous with the actual
     status reported with QCamera::status property.
-    \since 1.1
 */
 void QCamera::start()
 {
@@ -607,7 +593,6 @@ void QCamera::start()
 /*!
     Stops the camera.
     The camera state is changed from QCamera::ActiveState to QCamera::LoadedState.
-    \since 1.1
 */
 void QCamera::stop()
 {
@@ -625,7 +610,6 @@ void QCamera::stop()
 
     In all the other cases it's possible to start the camera directly
     from unloaded state.
-    \since 1.1
 */
 void QCamera::load()
 {
@@ -636,7 +620,6 @@ void QCamera::load()
 /*!
     Close the camera device and deallocate the related resources.
     The camera state is changed to QCamera::UnloadedStatus.
-    \since 1.1
 */
 void QCamera::unload()
 {
@@ -647,7 +630,6 @@ void QCamera::unload()
 
 /*!
     Returns a list of camera device's available from the default service provider.
-    \since 1.1
 */
 
 QList<QByteArray> QCamera::availableDevices()
@@ -657,7 +639,6 @@ QList<QByteArray> QCamera::availableDevices()
 
 /*!
     Returns the description of the \a device.
-    \since 1.1
 */
 
 QString QCamera::deviceDescription(const QByteArray &device)
@@ -681,7 +662,6 @@ QCamera::Status QCamera::status() const
 
 /*!
     Returns the lock types, camera supports.
-    \since 1.1
 */
 QCamera::LockTypes QCamera::supportedLocks() const
 {
@@ -690,7 +670,6 @@ QCamera::LockTypes QCamera::supportedLocks() const
 
 /*!
     Returns the requested lock types.
-    \since 1.1
 */
 QCamera::LockTypes QCamera::requestedLocks() const
 {
@@ -699,7 +678,6 @@ QCamera::LockTypes QCamera::requestedLocks() const
 
 /*!
     Returns the status of requested camera settings locks.
-    \since 1.1
 */
 QCamera::LockStatus QCamera::lockStatus() const
 {
@@ -708,7 +686,6 @@ QCamera::LockStatus QCamera::lockStatus() const
 
 /*!
     Returns the status of camera settings \a lock.
-    \since 1.1
 */
 QCamera::LockStatus QCamera::lockStatus(QCamera::LockType lockType) const
 {
@@ -750,7 +727,6 @@ QCamera::LockStatus QCamera::lockStatus(QCamera::LockType lockType) const
 
     It's also acceptable to relock already locked settings,
     depending on the lock parameter this initiates new focusing, exposure or white balance calculation.
-    \since 1.1
  */
 void QCamera::searchAndLock(QCamera::LockTypes locks)
 {
@@ -774,7 +750,6 @@ void QCamera::searchAndLock(QCamera::LockTypes locks)
 
 /*!
     Lock all the supported camera settings.
-    \since 1.1
  */
 void QCamera::searchAndLock()
 {
@@ -783,7 +758,6 @@ void QCamera::searchAndLock()
 
 /*!
     Unlocks the camera settings specified with \a locks or cancel the current locking if one is active.
-    \since 1.1
  */
 void QCamera::unlock(QCamera::LockTypes locks)
 {
@@ -807,7 +781,6 @@ void QCamera::unlock(QCamera::LockTypes locks)
 
 /*!
     Unlock all the requested camera locks.
-    \since 1.1
  */
 void QCamera::unlock()
 {
@@ -844,7 +817,6 @@ void QCamera::unlock()
 /*!
     \property QCamera::state
     \brief The current state of the camera object.
-    \since 1.1
 */
 
 /*!
@@ -889,7 +861,6 @@ void QCamera::unlock()
 /*!
     \property QCamera::status
     \brief The current status of the camera object.
-    \since 1.1
 */
 
 
@@ -897,7 +868,6 @@ void QCamera::unlock()
     \enum QCamera::CaptureMode
     \value CaptureStillImage Camera is configured for still frames capture.
     \value CaptureVideo  Camera is configured for video capture.
-    \since 1.1
 */
 
 /*!
@@ -916,34 +886,29 @@ void QCamera::unlock()
 /*!
     \property QCamera::lockStatus
     \brief The overall status for all the requested camera locks.
-    \since 1.1
 */
 
 /*!
     \fn void QCamera::locked()
 
     Signals all the requested camera settings are locked.
-    \since 1.1
 */
 
 /*!
     \fn void QCamera::lockFailed()
 
     Signals locking of at least one requested camera settings failed.
-    \since 1.1
 */
 
 /*!
     \fn QCamera::lockStatusChanged(QCamera::LockStatus status, QCamera::LockChangeReason reason)
 
     Signals the overall \a status for all the requested camera locks was changed with specified \a reason.
-    \since 1.1
 */
 
 /*!
     \fn QCamera::lockStatusChanged(QCamera::LockType lock, QCamera::LockStatus status, QCamera::LockChangeReason reason)
     Signals the \a lock \a status was changed with specified \a reason.
-    \since 1.1
 */
 
 /*!
@@ -1001,14 +966,12 @@ void QCamera::unlock()
     \fn void QCamera::error(QCamera::Error value)
 
     Signal emitted when error state changes to \a value.
-    \since 1.1
 */
 
 /*!
     \fn void QCamera::captureModeChanged(QCamera::CaptureMode mode)
 
     Signals the capture \a mode has changed.
-    \since 1.1
 */
 
 /*!
@@ -1019,7 +982,6 @@ void QCamera::unlock()
   Usually the state changes is caused by calling
   load(), unload(), start() and stop(),
   but the state can also be changed change as a result of camera error.
-    \since 1.1
 */
 
 /*!
@@ -1027,7 +989,6 @@ void QCamera::unlock()
 
   Signals the camera \a status has changed.
 
-  \since 1.1
 */
 
 QT_END_NAMESPACE
diff --git a/src/multimedia/camera/qcameraexposure.cpp b/src/multimedia/camera/qcameraexposure.cpp
index d839f37..7870aba 100644
--- a/src/multimedia/camera/qcameraexposure.cpp
+++ b/src/multimedia/camera/qcameraexposure.cpp
@@ -59,7 +59,6 @@ QT_BEGIN_NAMESPACE
 
     \inmodule QtMultimedia
     \ingroup camera
-    \since 1.1
 
 */
 
@@ -189,7 +188,6 @@ QCameraExposure::~QCameraExposure()
 
 /*!
     Returns true if exposure settings are supported by this camera.
-    \since 1.1
 */
 bool QCameraExposure::isAvailable() const
 {
@@ -205,7 +203,6 @@ bool QCameraExposure::isAvailable() const
   but some non conflicting flags combination are also allowed,
   like QCameraExposure::FlashManual | QCameraExposure::FlashSlowSyncRearCurtain.
 
-  \since 1.1
   \sa QCameraExposure::isFlashModeSupported(), QCameraExposure::isFlashReady()
 */
 
@@ -222,7 +219,6 @@ void QCameraExposure::setFlashMode(QCameraExposure::FlashModes mode)
 
 /*!
     Returns true if the flash \a mode is supported.
-    \since 1.1
 */
 
 bool QCameraExposure::isFlashModeSupported(QCameraExposure::FlashModes mode) const
@@ -244,7 +240,6 @@ bool QCameraExposure::isFlashReady() const
   \property QCameraExposure::exposureMode
   \brief The exposure mode being used.
 
-  \since 1.1
   \sa QCameraExposure::isExposureModeSupported()
 */
 
@@ -261,7 +256,6 @@ void QCameraExposure::setExposureMode(QCameraExposure::ExposureMode mode)
 
 /*!
     Returns true if the exposure \a mode is supported.
-    \since 1.1
 */
 
 bool QCameraExposure::isExposureModeSupported(QCameraExposure::ExposureMode mode) const
@@ -275,7 +269,6 @@ bool QCameraExposure::isExposureModeSupported(QCameraExposure::ExposureMode mode
   \brief Exposure compensation in EV units.
 
   Exposure compensation property allows to adjust the automatically calculated exposure.
-  \since 1.1
 */
 
 qreal QCameraExposure::exposureCompensation() const
@@ -296,7 +289,6 @@ void QCameraExposure::setExposureCompensation(qreal ev)
   \property QCameraExposure::meteringMode
   \brief The metering mode being used.
 
-  \since 1.1
   \sa QCameraExposure::isMeteringModeSupported()
 */
 
@@ -323,7 +315,6 @@ void QCameraExposure::setMeteringMode(QCameraExposure::MeteringMode mode)
   which is typically the default spot metering point.
 
   The spot metering point is only used with spot metering mode.
-  \since 1.1
  */
 
 QPointF QCameraExposure::spotMeteringPoint() const
@@ -340,7 +331,6 @@ void QCameraExposure::setSpotMeteringPoint(const QPointF &point)
 
 /*!
     Returns true if the metering \a mode is supported.
-    \since 1.1
 */
 bool QCameraExposure::isMeteringModeSupported(QCameraExposure::MeteringMode mode) const
 {
@@ -360,7 +350,6 @@ int QCameraExposure::isoSensitivity() const
 
     If the camera supports arbitrary ISO sensitivities within the supported range,
     *\a continuous is set to true, otherwise *\a continuous is set to false.
-    \since 1.1
 */
 QList<int> QCameraExposure::supportedIsoSensitivities(bool *continuous) const
 {
@@ -390,7 +379,6 @@ QList<int> QCameraExposure::supportedIsoSensitivities(bool *continuous) const
 /*!
     \fn QCameraExposure::setManualIsoSensitivity(int iso)
     Sets the manual sensitivity to \a iso
-    \since 1.1
 */
 
 void QCameraExposure::setManualIsoSensitivity(int iso)
@@ -402,7 +390,6 @@ void QCameraExposure::setManualIsoSensitivity(int iso)
 /*!
      \fn QCameraExposure::setAutoIsoSensitivity()
      Turn on auto sensitivity
-    \since 1.1
 */
 
 void QCameraExposure::setAutoIsoSensitivity()
@@ -415,7 +402,6 @@ void QCameraExposure::setAutoIsoSensitivity()
     \property QCameraExposure::shutterSpeed
     \brief Camera's shutter speed in seconds.
 
-    \since 1.1
     \sa supportedShutterSpeeds(), setAutoShutterSpeed(), setManualShutterSpeed()
 */
 
@@ -423,7 +409,6 @@ void QCameraExposure::setAutoIsoSensitivity()
     \fn QCameraExposure::shutterSpeedChanged(qreal speed)
 
     Signals that a camera's shutter \a speed has changed.
-    \since 1.1
 */
 
 /*!
@@ -431,14 +416,12 @@ void QCameraExposure::setAutoIsoSensitivity()
     \brief The sensor ISO sensitivity.
 
     \sa supportedIsoSensitivities(), setAutoIsoSensitivity(), setManualIsoSensitivity()
-    \since 1.1
 */
 
 /*!
     \property QCameraExposure::aperture
     \brief Lens aperture is specified as an F number, the ratio of the focal length to effective aperture diameter.
 
-    \since 1.1
     \sa supportedApertures(), setAutoAperture(), setManualAperture()
 */
 
@@ -458,7 +441,6 @@ qreal QCameraExposure::aperture() const
 
     If the camera supports arbitrary aperture values within the supported range,
     *\a continuous is set to true, otherwise *\a continuous is set to false.
-    \since 1.1
 */
 QList<qreal> QCameraExposure::supportedApertures(bool * continuous) const
 {
@@ -488,7 +470,6 @@ QList<qreal> QCameraExposure::supportedApertures(bool * continuous) const
 /*!
     \fn QCameraExposure::setManualAperture(qreal aperture)
     Sets the manual camera \a aperture value.
-    \since 1.1
 */
 
 void QCameraExposure::setManualAperture(qreal aperture)
@@ -500,7 +481,6 @@ void QCameraExposure::setManualAperture(qreal aperture)
 /*!
     \fn QCameraExposure::setAutoAperture()
     Turn on auto aperture
-    \since 1.1
 */
 
 void QCameraExposure::setAutoAperture()
@@ -511,7 +491,6 @@ void QCameraExposure::setAutoAperture()
 
 /*!
     Returns the current shutter speed in seconds.
-    \since 1.1
 */
 
 qreal QCameraExposure::shutterSpeed() const
@@ -527,7 +506,6 @@ qreal QCameraExposure::shutterSpeed() const
 
     If the camera supports arbitrary shutter speed values within the supported range,
     *\a continuous is set to true, otherwise *\a continuous is set to false.
-    \since 1.1
 */
 QList<qreal> QCameraExposure::supportedShutterSpeeds(bool *continuous) const
 {
@@ -556,7 +534,6 @@ QList<qreal> QCameraExposure::supportedShutterSpeeds(bool *continuous) const
 
 /*!
     Set the manual shutter speed to \a seconds
-    \since 1.1
 */
 
 void QCameraExposure::setManualShutterSpeed(qreal seconds)
@@ -567,7 +544,6 @@ void QCameraExposure::setManualShutterSpeed(qreal seconds)
 
 /*!
     Turn on auto shutter speed
-    \since 1.1
 */
 
 void QCameraExposure::setAutoShutterSpeed()
@@ -622,28 +598,24 @@ void QCameraExposure::setAutoShutterSpeed()
 /*!
     \property QCameraExposure::flashReady
     \brief Indicates if the flash is charged and ready to use.
-    \since 1.1
 */
 
 /*!
     \fn void QCameraExposure::flashReady(bool ready)
 
     Signal the flash \a ready status has changed.
-    \since 1.1
 */
 
 /*!
     \fn void QCameraExposure::apertureChanged(qreal value)
 
     Signal emitted when aperature changes to \a value.
-    \since 1.1
 */
 
 /*!
     \fn void QCameraExposure::apertureRangeChanged()
 
     Signal emitted when aperature range has changed.
-    \since 1.1
 */
 
 
@@ -651,7 +623,6 @@ void QCameraExposure::setAutoShutterSpeed()
     \fn void QCameraExposure::shutterSpeedRangeChanged()
 
     Signal emitted when the shutter speed range has changed.
-    \since 1.1
 */
 
 
@@ -659,14 +630,12 @@ void QCameraExposure::setAutoShutterSpeed()
     \fn void QCameraExposure::isoSensitivityChanged(int value)
 
     Signal emitted when sensitivity changes to \a value.
-    \since 1.1
 */
 
 /*!
     \fn void QCameraExposure::exposureCompensationChanged(qreal value)
 
     Signal emitted when the exposure compensation changes to \a value.
-    \since 1.1
 */
 
 #include "moc_qcameraexposure.cpp"
diff --git a/src/multimedia/camera/qcamerafocus.cpp b/src/multimedia/camera/qcamerafocus.cpp
index 73c2bcc..3b7f3b0 100644
--- a/src/multimedia/camera/qcamerafocus.cpp
+++ b/src/multimedia/camera/qcamerafocus.cpp
@@ -111,7 +111,6 @@ public:
 
     \inmodule QtMultimedia
     \ingroup camera
-    \since 1.1
 
     For cameras that support autofocusing, in order for a camera to autofocus on
     part of a sensor frame, it considers different zones within the frame.  Which
@@ -244,7 +243,6 @@ void QCameraFocusZone::setStatus(QCameraFocusZone::FocusZoneStatus status)
 
     \inmodule QtMultimedia
     \ingroup camera
-    \since 1.1
 
     On hardware that supports it, this class lets you adjust the focus
     or zoom (both optical and digital).  This also includes things
@@ -348,7 +346,6 @@ QCameraFocus::~QCameraFocus()
     Returns true if focus related settings are supported by this camera.
 
     You may need to also check if any specific features are supported.
-    \since 1.1
 */
 bool QCameraFocus::isAvailable() const
 {
@@ -359,7 +356,6 @@ bool QCameraFocus::isAvailable() const
   \property QCameraFocus::focusMode
   \brief The current camera focus mode.
 
-  \since 1.1
 
   This controls the way the camera lens assembly is configured.
 
@@ -379,7 +375,6 @@ void QCameraFocus::setFocusMode(QCameraFocus::FocusMode mode)
 
 /*!
     Returns true if the focus \a mode is supported by camera.
-    \since 1.1
 */
 
 bool QCameraFocus::isFocusModeSupported(QCameraFocus::FocusMode mode) const
@@ -390,7 +385,6 @@ bool QCameraFocus::isFocusModeSupported(QCameraFocus::FocusMode mode) const
 /*!
   \property QCameraFocus::focusPointMode
   \brief The current camera focus point selection mode.
-  \since 1.1
 
   If the camera focus mode is set to use an autofocusing mode,
   this property controls the way the camera will select areas
@@ -416,7 +410,6 @@ void QCameraFocus::setFocusPointMode(QCameraFocus::FocusPointMode mode)
 
 /*!
   Returns true if focus point \a mode is supported.
-  \since 1.1
  */
 bool QCameraFocus::isFocusPointModeSupported(QCameraFocus::FocusPointMode mode) const
 {
@@ -433,7 +426,6 @@ bool QCameraFocus::isFocusPointModeSupported(QCameraFocus::FocusPointMode mode)
   QPointF(0,0) points to the left top frame point, QPointF(0.5,0.5) points to the frame center.
 
   The custom focus point property is used only in \c FocusPointCustom focus mode.
-  \since 1.1
  */
 
 QPointF QCameraFocus::customFocusPoint() const
@@ -462,7 +454,6 @@ void QCameraFocus::setCustomFocusPoint(const QPointF &point)
 
   The coordinates system is the same as for custom focus points:
   QPointF(0,0) points to the left top frame point, QPointF(0.5,0.5) points to the frame center.
-  \since 1.1
  */
 QCameraFocusZoneList QCameraFocus::focusZones() const
 {
@@ -475,7 +466,6 @@ QCameraFocusZoneList QCameraFocus::focusZones() const
     Returns the maximum optical zoom.
 
     This will be \c 1.0 on cameras that do not support optical zoom.
-    \since 1.1
 */
 
 qreal QCameraFocus::maximumOpticalZoom() const
@@ -487,7 +477,6 @@ qreal QCameraFocus::maximumOpticalZoom() const
     Returns the maximum digital zoom
 
     This will be \c 1.0 on cameras that do not support digital zoom.
-    \since 1.1
 */
 
 qreal QCameraFocus::maximumDigitalZoom() const
@@ -499,7 +488,6 @@ qreal QCameraFocus::maximumDigitalZoom() const
   \property QCameraFocus::opticalZoom
   \brief The current optical zoom value.
 
-  \since 1.1
   \sa QCameraFocus::digitalZoom
 */
 
@@ -512,7 +500,6 @@ qreal QCameraFocus::opticalZoom() const
   \property QCameraFocus::digitalZoom
   \brief The current digital zoom value.
 
-  \since 1.1
   \sa QCameraFocus::opticalZoom
 */
 qreal QCameraFocus::digitalZoom() const
@@ -527,7 +514,6 @@ qreal QCameraFocus::digitalZoom() const
     Since there may be a physical component to move, the change in
     zoom value may not be instantaneous.
 
-    \since 1.1
 */
 void QCameraFocus::zoomTo(qreal optical, qreal digital)
 {
@@ -563,21 +549,18 @@ void QCameraFocus::zoomTo(qreal optical, qreal digital)
     \fn void QCameraFocus::opticalZoomChanged(qreal value)
 
     Signal emitted when optical zoom value changes to new \a value.
-    \since 1.1
 */
 
 /*!
     \fn void QCameraFocus::digitalZoomChanged(qreal value)
 
     Signal emitted when digital zoom value changes to new \a value.
-    \since 1.1
 */
 
 /*!
     \fn void QCameraFocus::maximumOpticalZoomChanged(qreal zoom)
 
     Signal emitted when the maximum supported optical \a zoom value changed.
-    \since 1.1
 */
 
 /*!
@@ -587,7 +570,6 @@ void QCameraFocus::zoomTo(qreal optical, qreal digital)
 
     The maximum supported zoom value can depend on other camera settings,
     like capture mode or resolution.
-    \since 1.1
 */
 
 
@@ -599,7 +581,6 @@ void QCameraFocus::zoomTo(qreal optical, qreal digital)
 
   This can change when a zone is focused or loses focus, or new focus zones
   have been detected.
-  \since 1.1
 */
 
 
diff --git a/src/multimedia/camera/qcameraimagecapture.cpp b/src/multimedia/camera/qcameraimagecapture.cpp
index 6cb350c..b90d620 100644
--- a/src/multimedia/camera/qcameraimagecapture.cpp
+++ b/src/multimedia/camera/qcameraimagecapture.cpp
@@ -60,7 +60,6 @@ QT_BEGIN_NAMESPACE
     \class QCameraImageCapture
     \inmodule QtMultimedia
     \ingroup camera
-    \since 1.1
 
 
     \brief The QCameraImageCapture class is used for the recording of media content.
@@ -182,7 +181,6 @@ QCameraImageCapture::~QCameraImageCapture()
 
 /*!
   \reimp
-  \since 1.1
 */
 QMediaObject *QCameraImageCapture::mediaObject() const
 {
@@ -191,7 +189,6 @@ QMediaObject *QCameraImageCapture::mediaObject() const
 
 /*!
   \reimp
-  \since 1.1
 */
 bool QCameraImageCapture::setMediaObject(QMediaObject *mediaObject)
 {
@@ -299,7 +296,6 @@ bool QCameraImageCapture::setMediaObject(QMediaObject *mediaObject)
 
 /*!
     Returns true if the images capture service ready to use.
-    \since 1.1
 */
 bool QCameraImageCapture::isAvailable() const
 {
@@ -311,7 +307,6 @@ bool QCameraImageCapture::isAvailable() const
 
 /*!
     Returns the availability error code.
-    \since 1.1
 */
 QtMultimedia::AvailabilityError QCameraImageCapture::availabilityError() const
 {
@@ -324,7 +319,6 @@ QtMultimedia::AvailabilityError QCameraImageCapture::availabilityError() const
 /*!
     Returns the current error state.
 
-    \since 1.1
     \sa errorString()
 */
 
@@ -336,7 +330,6 @@ QCameraImageCapture::Error QCameraImageCapture::error() const
 /*!
     Returns a string describing the current error state.
 
-    \since 1.1
     \sa error()
 */
 
@@ -348,7 +341,6 @@ QString QCameraImageCapture::errorString() const
 
 /*!
     Returns a list of supported image codecs.
-    \since 1.1
 */
 QStringList QCameraImageCapture::supportedImageCodecs() const
 {
@@ -358,7 +350,6 @@ QStringList QCameraImageCapture::supportedImageCodecs() const
 
 /*!
     Returns a description of an image \a codec.
-    \since 1.1
 */
 QString QCameraImageCapture::imageCodecDescription(const QString &codec) const
 {
@@ -375,7 +366,6 @@ QString QCameraImageCapture::imageCodecDescription(const QString &codec) const
     If the encoder supports arbitrary resolutions within the supported range,
     *\a continuous is set to true, otherwise *\a continuous is set to false.
 
-    \since 1.1
     \sa QImageEncoderSettings::resolution()
 */
 QList<QSize> QCameraImageCapture::supportedResolutions(const QImageEncoderSettings &settings, bool *continuous) const
@@ -390,7 +380,6 @@ QList<QSize> QCameraImageCapture::supportedResolutions(const QImageEncoderSettin
 /*!
     Returns the image encoder settings being used.
 
-    \since 1.1
     \sa setEncodingSettings()
 */
 
@@ -406,7 +395,6 @@ QImageEncoderSettings QCameraImageCapture::encodingSettings() const
     If some parameters are not specified, or null settings are passed,
     the encoder choose the default encoding parameters.
 
-    \since 1.1
     \sa encodingSettings()
 */
 
@@ -430,7 +418,6 @@ void QCameraImageCapture::setEncodingSettings(const QImageEncoderSettings &setti
 /*!
     Returns the list of supported buffer image capture formats.
 
-    \since 1.1
     \sa bufferFormat() setBufferFormat()
 */
 QList<QVideoFrame::PixelFormat> QCameraImageCapture::supportedBufferFormats() const
@@ -444,7 +431,6 @@ QList<QVideoFrame::PixelFormat> QCameraImageCapture::supportedBufferFormats() co
 /*!
     Returns the buffer image capture format being used.
 
-    \since 1.2
     \sa supportedBufferCaptureFormats() setBufferCaptureFormat()
 */
 QVideoFrame::PixelFormat QCameraImageCapture::bufferFormat() const
@@ -458,7 +444,6 @@ QVideoFrame::PixelFormat QCameraImageCapture::bufferFormat() const
 /*!
     Sets the buffer image capture format to be used.
 
-    \since 1.2
     \sa bufferCaptureFormat() supportedBufferCaptureFormats() captureDestination()
 */
 void QCameraImageCapture::setBufferFormat(const QVideoFrame::PixelFormat format)
@@ -470,7 +455,6 @@ void QCameraImageCapture::setBufferFormat(const QVideoFrame::PixelFormat format)
 /*!
     Returns true if the image capture \a destination is supported; otherwise returns false.
 
-    \since 1.2
     \sa captureDestination() setCaptureDestination()
 */
 bool QCameraImageCapture::isCaptureDestinationSupported(QCameraImageCapture::CaptureDestinations destination) const
@@ -484,7 +468,6 @@ bool QCameraImageCapture::isCaptureDestinationSupported(QCameraImageCapture::Cap
 /*!
     Returns the image capture destination being used.
 
-    \since 1.2
     \sa isCaptureDestinationSupported() setCaptureDestination()
 */
 QCameraImageCapture::CaptureDestinations QCameraImageCapture::captureDestination() const
@@ -498,7 +481,6 @@ QCameraImageCapture::CaptureDestinations QCameraImageCapture::captureDestination
 /*!
     Sets the capture \a destination to be used.
 
-    \since 1.2
     \sa isCaptureDestinationSupported() captureDestination()
 */
 void QCameraImageCapture::setCaptureDestination(QCameraImageCapture::CaptureDestinations destination)
@@ -512,7 +494,6 @@ void QCameraImageCapture::setCaptureDestination(QCameraImageCapture::CaptureDest
 /*!
   \property QCameraImageCapture::readyForCapture
    Indicates the service is ready to capture a an image immediately.
-  \since 1.1
 */
 
 bool QCameraImageCapture::isReadyForCapture() const
@@ -527,7 +508,6 @@ bool QCameraImageCapture::isReadyForCapture() const
     \fn QCameraImageCapture::readyForCaptureChanged(bool ready)
 
     Signals that a camera's \a ready for capture state has changed.
-    \since 1.1
 */
 
 
@@ -544,7 +524,6 @@ bool QCameraImageCapture::isReadyForCapture() const
 
     QCameraImageCapture::capture returns the capture Id parameter, used with
     imageExposed(), imageCaptured() and imageSaved() signals.
-    \since 1.1
 */
 int QCameraImageCapture::capture(const QString &file)
 {
@@ -567,7 +546,6 @@ int QCameraImageCapture::capture(const QString &file)
 /*!
     Cancel incomplete capture requests.
     Already captured and queused for proicessing images may be discarded.
-    \since 1.1
 */
 void QCameraImageCapture::cancelCapture()
 {
@@ -608,28 +586,24 @@ void QCameraImageCapture::cancelCapture()
 
     Signals that the capture request \a id has failed with an \a error
     and \a errorString description.
-    \since 1.1
 */
 
 /*!
     \fn QCameraImageCapture::bufferFormatChanged(QVideoFrame::PixelFormat format)
 
     Signal emitted when the buffer \a format for the buffer image capture has changed.
-    \since 1.2
 */
 
 /*!
     \fn QCameraImageCapture::captureDestinationChanged(CaptureDestinations destination)
 
     Signal emitted when the capture \a destination has changed.
-    \since 1.2
 */
 
 /*!
     \fn QCameraImageCapture::imageExposed(int id)
 
     Signal emitted when the frame with request \a id was exposed.
-    \since 1.1
 */
 
 /*!
@@ -637,7 +611,6 @@ void QCameraImageCapture::cancelCapture()
 
     Signal emitted when the frame with request \a id was captured, but not processed and saved yet.
     Frame \a preview can be displayed to user.
-    \since 1.1
 */
 
 /*!
@@ -647,7 +620,6 @@ void QCameraImageCapture::cancelCapture()
     This signal is emitted for metadata \a value with a \a key listed in QtMultimedia::MetaData enum.
 
     This signal is emitted between imageExposed and imageSaved signals.
-    \since 1.2
 */
 
 /*!
@@ -657,7 +629,6 @@ void QCameraImageCapture::cancelCapture()
     This signal is emitted for extended metadata \a value with a \a key not listed in QtMultimedia::MetaData enum.
 
     This signal is emitted between imageExposed and imageSaved signals.
-    \since 1.2
 */
 
 
@@ -665,14 +636,12 @@ void QCameraImageCapture::cancelCapture()
     \fn QCameraImageCapture::imageAvailable(int id, const QVideoFrame &buffer)
 
     Signal emitted when the frame with request \a id is available as \a buffer.
-    \since 1.2
 */
 
 /*!
     \fn QCameraImageCapture::imageSaved(int id, const QString &fileName)
 
     Signal emitted when the frame with request \a id was saved to \a fileName.
-    \since 1.1
 */
 
 
diff --git a/src/multimedia/camera/qcameraimageprocessing.cpp b/src/multimedia/camera/qcameraimageprocessing.cpp
index cfd2c88..ae6bd73 100644
--- a/src/multimedia/camera/qcameraimageprocessing.cpp
+++ b/src/multimedia/camera/qcameraimageprocessing.cpp
@@ -75,7 +75,6 @@ QT_BEGIN_NAMESPACE
 
     \inmodule QtMultimedia
     \ingroup camera
-    \since 1.1
 
     After capturing the data for a camera frame, the camera hardware and
     software performs various image processing tasks to produce a final
@@ -149,7 +148,6 @@ QCameraImageProcessing::~QCameraImageProcessing()
 
 /*!
     Returns true if image processing related settings are supported by this camera.
-    \since 1.1
 */
 bool QCameraImageProcessing::isAvailable() const
 {
@@ -159,7 +157,6 @@ bool QCameraImageProcessing::isAvailable() const
 
 /*!
     Returns the white balance mode being used.
-    \since 1.1
 */
 
 QCameraImageProcessing::WhiteBalanceMode QCameraImageProcessing::whiteBalanceMode() const
@@ -169,7 +166,6 @@ QCameraImageProcessing::WhiteBalanceMode QCameraImageProcessing::whiteBalanceMod
 
 /*!
     Sets the white balance to \a mode.
-    \since 1.1
 */
 
 void QCameraImageProcessing::setWhiteBalanceMode(QCameraImageProcessing::WhiteBalanceMode mode)
@@ -180,7 +176,6 @@ void QCameraImageProcessing::setWhiteBalanceMode(QCameraImageProcessing::WhiteBa
 
 /*!
     Returns true if the white balance \a mode is supported.
-    \since 1.1
 */
 
 bool QCameraImageProcessing::isWhiteBalanceModeSupported(QCameraImageProcessing::WhiteBalanceMode mode) const
@@ -192,7 +187,6 @@ bool QCameraImageProcessing::isWhiteBalanceModeSupported(QCameraImageProcessing:
     Returns the current color temperature if the
     current white balance mode is \c WhiteBalanceManual.  For other modes the
     return value is undefined.
-    \since 1.1
 */
 
 int QCameraImageProcessing::manualWhiteBalance() const
@@ -208,7 +202,6 @@ int QCameraImageProcessing::manualWhiteBalance() const
 /*!
     Sets manual white balance to \a colorTemperature.  This is used
     when whiteBalanceMode() is set to \c WhiteBalanceManual.  The units are Kelvin.
-    \since 1.1
 */
 
 void QCameraImageProcessing::setManualWhiteBalance(int colorTemperature)
@@ -222,7 +215,6 @@ void QCameraImageProcessing::setManualWhiteBalance(int colorTemperature)
 
 /*!
     Returns the contrast adjustment setting.
-    \since 1.1
 */
 int QCameraImageProcessing::contrast() const
 {
@@ -238,7 +230,6 @@ int QCameraImageProcessing::contrast() const
     Set the contrast adjustment to \a value.
 
     Valid contrast adjustment values range between -100 and 100, with a default of 0.
-    \since 1.1
 */
 void QCameraImageProcessing::setContrast(int value)
 {
@@ -249,7 +240,6 @@ void QCameraImageProcessing::setContrast(int value)
 
 /*!
     Returns the saturation adjustment value.
-    \since 1.1
 */
 int QCameraImageProcessing::saturation() const
 {
@@ -265,7 +255,6 @@ int QCameraImageProcessing::saturation() const
     Sets the saturation adjustment value to \a value.
 
     Valid saturation values range between -100 and 100, with a default of 0.
-    \since 1.1
 */
 
 void QCameraImageProcessing::setSaturation(int value)
@@ -279,7 +268,6 @@ void QCameraImageProcessing::setSaturation(int value)
     Identifies if sharpening is supported.
 
     Returns true if sharpening is supported; and false if it is not.
-    \since 1.1
 */
 bool QCameraImageProcessing::isSharpeningSupported() const
 {
@@ -294,7 +282,6 @@ bool QCameraImageProcessing::isSharpeningSupported() const
 
     This may be \c DefaultSharpening if no particular sharpening level has been applied.
 
-    \since 1.1
 */
 int QCameraImageProcessing::sharpeningLevel() const
 {
@@ -316,7 +303,6 @@ int QCameraImageProcessing::sharpeningLevel() const
     to perform.  Otherwise a level of 0 will disable sharpening, and a level of 100
     corresponds to maximum sharpening applied.
 
-    \since 1.1
 */
 
 void QCameraImageProcessing::setSharpeningLevel(int level)
@@ -329,7 +315,6 @@ void QCameraImageProcessing::setSharpeningLevel(int level)
 
 /*!
     Returns true if denoising is supported.
-    \since 1.1
 */
 bool QCameraImageProcessing::isDenoisingSupported() const
 {
@@ -343,7 +328,6 @@ bool QCameraImageProcessing::isDenoisingSupported() const
     Returns the denoising level.  This may be \c DefaultDenoising if no
     particular value has been set.
 
-    \since 1.1
 */
 int QCameraImageProcessing::denoisingLevel() const
 {
@@ -365,7 +349,6 @@ int QCameraImageProcessing::denoisingLevel() const
     to perform.  Otherwise a level of 0 will disable denoising, and a level of 100
     corresponds to maximum denoising applied.
 
-    \since 1.1
 */
 void QCameraImageProcessing::setDenoisingLevel(int level)
 {
diff --git a/src/multimedia/controls/qaudioencodercontrol.cpp b/src/multimedia/controls/qaudioencodercontrol.cpp
index 469a785..df79e46 100644
--- a/src/multimedia/controls/qaudioencodercontrol.cpp
+++ b/src/multimedia/controls/qaudioencodercontrol.cpp
@@ -49,7 +49,6 @@ QT_BEGIN_NAMESPACE
     \class QAudioEncoderControl
     \inmodule QtMultimedia
     \ingroup multimedia-serv
-    \since 1.0
 
     \brief The QAudioEncoderControl class provides access to the settings of a
     media service that performs audio encoding.
@@ -97,14 +96,12 @@ QAudioEncoderControl::~QAudioEncoderControl()
   \fn QAudioEncoderControl::supportedAudioCodecs() const
 
   Returns the list of supported audio codec names.
-  \since 1.0
 */
 
 /*!
   \fn QAudioEncoderControl::codecDescription(const QString &codec) const
 
   Returns description of audio \a codec.
-  \since 1.0
 */
 
 /*!
@@ -120,28 +117,24 @@ QAudioEncoderControl::~QAudioEncoderControl()
 
   If the encoder supports arbitrary sample rates within the supported rates range,
   *\a continuous is set to true, otherwise *\a continuous is set to false.
-  \since 1.0
 */
 
 /*!
     \fn QAudioEncoderControl::supportedEncodingOptions(const QString &codec) const
 
     Returns the list of \a codec specific audio encoding options.
-    \since 1.0
 */
 
 /*!
     \fn QAudioEncoderControl::encodingOption(const QString &codec, const QString &option) const
 
     Returns the value of audio encoding \a option for \a codec.
-    \since 1.0
 */
 
 /*!
     \fn QAudioEncoderControl::setEncodingOption(const QString &codec, const QString &option, const QVariant &value)
 
     Set the \a codec specific \a option to \a value.
-    \since 1.0
 */
 
 /*!
@@ -152,14 +145,12 @@ QAudioEncoderControl::~QAudioEncoderControl()
     The returned value may be different tha passed to QAudioEncoderControl::setAudioSettings()
     if the settings contains the default or undefined parameters.
     In this case if the undefined parameters are already resolved, they should be returned.
-    \since 1.0
 */
 
 /*!
     \fn QAudioEncoderControl::setAudioSettings(const QAudioEncoderSettings &settings)
 
     Sets the selected audio \a settings.
-    \since 1.0
 */
 
 #include "moc_qaudioencodercontrol.cpp"
diff --git a/src/multimedia/controls/qcameracapturebufferformatcontrol.cpp b/src/multimedia/controls/qcameracapturebufferformatcontrol.cpp
index f2eb64e..321dc2b 100644
--- a/src/multimedia/controls/qcameracapturebufferformatcontrol.cpp
+++ b/src/multimedia/controls/qcameracapturebufferformatcontrol.cpp
@@ -88,28 +88,24 @@ QCameraCaptureBufferFormatControl::~QCameraCaptureBufferFormatControl()
     \fn QCameraCaptureBufferFormatControl::supportedBufferFormats() const
 
     Returns the list of the supported buffer capture formats.
-    \since 1.2
 */
 
 /*!
     \fn QCameraCaptureBufferFormatControl::bufferFormat() const
 
     Returns the current buffer capture format.
-    \since 1.2
 */
 
 /*!
     \fn QCameraCaptureBufferFormatControl::setBufferFormat(QVideoFrame::PixelFormat format)
 
     Sets the buffer capture \a format.
-    \since 1.2
 */
 
 /*!
     \fn QCameraCaptureBufferFormatControl::bufferFormatChanged(QVideoFrame::PixelFormat format)
 
     Signals the buffer image capture format changed to \a format.
-    \since 1.2
 */
 
 #include "moc_qcameracapturebufferformatcontrol.cpp"
diff --git a/src/multimedia/controls/qcameracapturedestinationcontrol.cpp b/src/multimedia/controls/qcameracapturedestinationcontrol.cpp
index 3bcc000..bbce699 100644
--- a/src/multimedia/controls/qcameracapturedestinationcontrol.cpp
+++ b/src/multimedia/controls/qcameracapturedestinationcontrol.cpp
@@ -92,28 +92,24 @@ QCameraCaptureDestinationControl::~QCameraCaptureDestinationControl()
     \fn QCameraCaptureDestinationControl::isCaptureDestinationSupported(QCameraImageCapture::CaptureDestinations destination) const
 
     Returns true if the capture \a destination is supported; and false if it is not.
-    \since 1.2
 */
 
 /*!
     \fn QCameraCaptureDestinationControl::captureDestination() const
 
     Returns the current capture \a destination. The default destination is QCameraImageCapture::CaptureToFile.
-    \since 1.2
 */
 
 /*!
     \fn QCameraCaptureDestinationControl::setCaptureDestination(QCameraImageCapture::CaptureDestinations destination)
 
     Sets the capture \a destination.
-    \since 1.2
 */
 
 /*!
     \fn QCameraCaptureDestinationControl::captureDestinationChanged(QCameraImageCapture::CaptureDestinations destination)
 
     Signals the image capture \a destination changed.
-    \since 1.2
 */
 
 #include "moc_qcameracapturedestinationcontrol.cpp"
diff --git a/src/multimedia/controls/qcameracontrol.cpp b/src/multimedia/controls/qcameracontrol.cpp
index f98de77..2f11e96 100644
--- a/src/multimedia/controls/qcameracontrol.cpp
+++ b/src/multimedia/controls/qcameracontrol.cpp
@@ -54,7 +54,6 @@ QT_BEGIN_NAMESPACE
 
     \inmodule QtMultimedia
     \ingroup multimedia-serv
-    \since 1.1
 
     This service is provided by a QMediaService object via
     QMediaService::control().  It is used by QCamera.
@@ -99,7 +98,6 @@ QCameraControl::~QCameraControl()
 
     Returns the state of the camera service.
 
-    \since 1.1
     \sa QCamera::state
 */
 
@@ -112,7 +110,6 @@ QCameraControl::~QCameraControl()
     while camera status is used as a feedback mechanism to inform application about backend status.
     Status changes are reported asynchronously with QCameraControl::statusChanged() signal.
 
-    \since 1.1
     \sa QCamera::State
 */
 
@@ -123,7 +120,6 @@ QCameraControl::~QCameraControl()
 
     In most cases the state chage is caused by QCameraControl::setState(),
     but if critical error has occurred the state changes to QCamera::UnloadedState.
-    \since 1.1
 */
 
 /*!
@@ -131,7 +127,6 @@ QCameraControl::~QCameraControl()
 
     Returns the status of the camera service.
 
-    \since 1.1
     \sa QCamera::state
 */
 
@@ -139,7 +134,6 @@ QCameraControl::~QCameraControl()
     \fn void QCameraControl::statusChanged(QCamera::Status status)
 
     Signal emitted when the camera \a status changes.
-    \since 1.1
 */
 
 
@@ -148,14 +142,12 @@ QCameraControl::~QCameraControl()
 
     Signal emitted when an error occurs with error code \a error and
     a description of the error \a errorString.
-    \since 1.1
 */
 
 /*!
     \fn Camera::CaptureMode QCameraControl::captureMode() const = 0
 
     Returns the current capture mode.
-    \since 1.1
 */
 
 /*!
@@ -171,21 +163,18 @@ QCameraControl::~QCameraControl()
     with the status changed to QCamera::StartingStatus.
     This allows the capture settings to be applied before camera is started.
     Than change the status to QCamera::StartedStatus when the capture mode change is done.
-    \since 1.1
 */
 
 /*!
     \fn bool QCameraControl::isCaptureModeSupported(QCamera::CaptureMode mode) const = 0;
 
     Returns true if the capture \a mode is suported.
-    \since 1.1
 */
 
 /*!
     \fn QCameraControl::captureModeChanged(QCamera::CaptureMode mode)
 
     Signal emitted when the camera capture \a mode changes.
-    \since 1.1
  */
 
 /*!
@@ -198,7 +187,6 @@ QCameraControl::~QCameraControl()
     before the settings are changed and restarted after.
     Otherwise the backend should apply the change in the current state,
     with the camera status indicating the progress, if necessary.
-    \since 1.1
 */
 
 /*!
diff --git a/src/multimedia/controls/qcameraexposurecontrol.cpp b/src/multimedia/controls/qcameraexposurecontrol.cpp
index 969fd76..4ca75d3 100644
--- a/src/multimedia/controls/qcameraexposurecontrol.cpp
+++ b/src/multimedia/controls/qcameraexposurecontrol.cpp
@@ -51,7 +51,6 @@ QT_BEGIN_NAMESPACE
 
     \inmodule QtMultimedia
     \ingroup multimedia-serv
-    \since 1.1
 
     You can adjust a number of parameters that will affect images and video taken with
     the corresponding QCamera object.
@@ -100,7 +99,6 @@ QCameraExposureControl::~QCameraExposureControl()
   \fn QCamera::ExposureMode QCameraExposureControl::exposureMode() const
 
   Returns the exposure mode.
-  \since 1.1
 */
 
 
@@ -108,7 +106,6 @@ QCameraExposureControl::~QCameraExposureControl()
   \fn void QCameraExposureControl::setExposureMode(QCameraExposure::ExposureMode mode)
 
   Set the exposure mode to \a mode.
-  \since 1.1
 */
 
 
@@ -116,27 +113,23 @@ QCameraExposureControl::~QCameraExposureControl()
   \fn bool QCameraExposureControl::isExposureModeSupported(QCameraExposure::ExposureMode mode) const
 
   Returns true if the exposure \a mode is supported.
-  \since 1.1
 */
 
 
 /*!
   \fn QCameraExposure::MeteringMode QCameraExposureControl::meteringMode() const
   Returns the current metering mode.
-  \since 1.1
 */
 
 /*!
   \fn void QCameraExposureControl::setMeteringMode(QCameraExposure::MeteringMode mode)
 
   Set the metering mode to \a mode.
-  \since 1.1
 */
 
 /*!
   \fn bool QCameraExposureControl::isMeteringModeSupported(QCameraExposure::MeteringMode mode) const
     Returns true if the metering \a mode is supported.
-  \since 1.1
 */
 
 /*!
@@ -183,21 +176,18 @@ QCameraExposureControl::~QCameraExposureControl()
   \fn QCameraExposureControl::isParameterSupported(ExposureParameter parameter) const
 
   Returns true is exposure \a parameter is supported by backend.
-  \since 1.1
 */
 
 /*!
   \fn QCameraExposureControl::exposureParameter(ExposureParameter parameter) const
 
   Returns the exposure \a parameter value, or invalid QVariant() if the value is unknown or not supported.
-  \since 1.1
 */
 
 /*!
   \fn QCameraExposureControl::exposureParameterFlags(ExposureParameter parameter) const
 
   Returns the properties of exposure \a parameter.
-  \since 1.1
 */
 
 
@@ -205,7 +195,6 @@ QCameraExposureControl::~QCameraExposureControl()
   \fn QCameraExposureControl::supportedParameterRange(ExposureParameter parameter) const
 
   Returns the list of supported \a parameter values;
-  \since 1.1
 */
 
 /*!
@@ -216,28 +205,24 @@ QCameraExposureControl::~QCameraExposureControl()
   and if possible report the actual value to user with QCameraExposureControl::exposureParameter().
 
   Returns true if parameter is supported and value is correct.
-  \since 1.1
 */
 
 /*!
   \fn QCameraExposureControl::extendedParameterName(ExposureParameter parameter)
 
   Returns the extended exposure \a parameter name.
-  \since 1.1
 */
 
 /*!
     \fn void QCameraExposureControl::flashReady(bool ready)
 
     Signal emitted when flash state changes, flash is charged \a ready.
-    \since 1.1
 */
 
 /*!
     \fn void QCameraExposureControl::exposureParameterChanged(int parameter)
 
     Signal emitted when the exposure \a parameter has changed.
-    \since 1.1
 */
 
 /*!
@@ -245,7 +230,6 @@ QCameraExposureControl::~QCameraExposureControl()
     \fn void QCameraExposureControl::exposureParameterRangeChanged(int parameter)
 
     Signal emitted when the exposure \a parameter range has changed.
-    \since 1.1
 */
 
 
diff --git a/src/multimedia/controls/qcameraflashcontrol.cpp b/src/multimedia/controls/qcameraflashcontrol.cpp
index eaa7ca9..a2b2d6b 100644
--- a/src/multimedia/controls/qcameraflashcontrol.cpp
+++ b/src/multimedia/controls/qcameraflashcontrol.cpp
@@ -51,7 +51,6 @@ QT_BEGIN_NAMESPACE
 
     \ingroup multimedia-serv
     \inmodule QtMultimedia
-    \since 1.1
 
     \inmodule QtMultimedia
 
@@ -98,7 +97,6 @@ QCameraFlashControl::~QCameraFlashControl()
   \fn QCamera::FlashModes QCameraFlashControl::flashMode() const
 
   Returns the current flash mode.
-  \since 1.1
 */
 
 /*!
@@ -109,7 +107,6 @@ QCameraFlashControl::~QCameraFlashControl()
   Usually a single QCameraExposure::FlashMode flag is used,
   but some non conflicting flags combination are also allowed,
   like QCameraExposure::FlashManual | QCameraExposure::FlashSlowSyncRearCurtain.
-  \since 1.1
 */
 
 
@@ -119,21 +116,18 @@ QCameraFlashControl::~QCameraFlashControl()
   Return true if the reqested flash \a mode is supported.
   Some QCameraExposure::FlashMode values can be combined,
   for example QCameraExposure::FlashManual | QCameraExposure::FlashSlowSyncRearCurtain
-  \since 1.1
 */
 
 /*!
   \fn bool QCameraFlashControl::isFlashReady() const
 
   Returns true if flash is charged.
-  \since 1.1
 */
 
 /*!
     \fn void QCameraFlashControl::flashReady(bool ready)
 
     Signal emitted when flash state changes to \a ready.
-    \since 1.1
 */
 
 #include "moc_qcameraflashcontrol.cpp"
diff --git a/src/multimedia/controls/qcamerafocuscontrol.cpp b/src/multimedia/controls/qcamerafocuscontrol.cpp
index d056391..1e580a5 100644
--- a/src/multimedia/controls/qcamerafocuscontrol.cpp
+++ b/src/multimedia/controls/qcamerafocuscontrol.cpp
@@ -53,7 +53,6 @@ QT_BEGIN_NAMESPACE
 
     \inmodule QtMultimedia
     \ingroup multimedia-serv
-    \since 1.1
 
     The interface name of QCameraFocusControl is \c com.nokia.Qt.QCameraFocusControl/1.0 as
     defined in QCameraFocusControl_iid.
@@ -94,7 +93,6 @@ QCameraFocusControl::~QCameraFocusControl()
   \fn QCameraFocus::FocusMode QCameraFocusControl::focusMode() const
 
   Returns the focus mode being used.
-  \since 1.1
 */
 
 
@@ -102,7 +100,6 @@ QCameraFocusControl::~QCameraFocusControl()
   \fn void QCameraFocusControl::setFocusMode(QCameraFocus::FocusMode mode)
 
   Set the focus mode to \a mode.
-  \since 1.1
 */
 
 
@@ -110,7 +107,6 @@ QCameraFocusControl::~QCameraFocusControl()
   \fn bool QCameraFocusControl::isFocusModeSupported(QCameraFocus::FocusMode mode) const
 
   Returns true if focus \a mode is supported.
-  \since 1.1
 */
 
 
@@ -118,7 +114,6 @@ QCameraFocusControl::~QCameraFocusControl()
   \fn qreal QCameraFocusControl::maximumOpticalZoom() const
 
   Returns the maximum optical zoom value, or 1.0 if optical zoom is not supported.
-  \since 1.1
 */
 
 
@@ -126,7 +121,6 @@ QCameraFocusControl::~QCameraFocusControl()
   \fn qreal QCameraFocusControl::maximumDigitalZoom() const
 
   Returns the maximum digital zoom value, or 1.0 if digital zoom is not supported.
-  \since 1.1
 */
 
 
@@ -134,14 +128,12 @@ QCameraFocusControl::~QCameraFocusControl()
   \fn qreal QCameraFocusControl::opticalZoom() const
 
   Return the current optical zoom value.
-  \since 1.1
 */
 
 /*!
   \fn qreal QCameraFocusControl::digitalZoom() const
 
   Return the current digital zoom value.
-  \since 1.1
 */
 
 
@@ -149,28 +141,24 @@ QCameraFocusControl::~QCameraFocusControl()
   \fn void QCameraFocusControl::zoomTo(qreal optical, qreal digital)
 
   Sets \a optical and \a digital zoom values.
-  \since 1.1
 */
 
 /*!
   \fn QCameraFocusControl::focusPointMode() const
 
   Returns the camera focus point selection mode.
-  \since 1.1
 */
 
 /*!
   \fn QCameraFocusControl::setFocusPointMode(QCameraFocus::FocusPointMode mode)
 
   Sets the camera focus point selection \a mode.
-  \since 1.1
 */
 
 /*!
   \fn QCameraFocusControl::isFocusPointModeSupported(QCameraFocus::FocusPointMode mode) const
 
   Returns true if the camera focus point \a mode is supported.
-  \since 1.1
 */
 
 /*!
@@ -180,7 +168,6 @@ QCameraFocusControl::~QCameraFocusControl()
   QPointF(0,0) points to the left top frame point, QPointF(0.5,0.5) points to the frame center.
 
   Custom focus point is used only in FocusPointCustom focus mode.
-  \since 1.1
 */
 
 /*!
@@ -192,7 +179,6 @@ QCameraFocusControl::~QCameraFocusControl()
   it should use the nearest supported focus point,
   and return the actual focus point with QCameraFocusControl::focusZones().
 
-  \since 1.1
   \sa QCameraFocusControl::customFocusPoint(), QCameraFocusControl::focusZones()
 */
 
@@ -200,28 +186,24 @@ QCameraFocusControl::~QCameraFocusControl()
   \fn QCameraFocusControl::focusZones() const
 
   Returns the list of zones, the camera is using for focusing or focused on.
-  \since 1.1
 */
 
 /*!
     \fn void QCameraFocusControl::opticalZoomChanged(qreal zoom)
 
     Signal emitted when the optical \a zoom value changed.
-    \since 1.1
 */
 
 /*!
     \fn void QCameraFocusControl::digitalZoomChanged(qreal zoom)
 
     Signal emitted when the digital \a zoom value changed.
-    \since 1.1
 */
 
 /*!
     \fn void QCameraFocusControl::maximumOpticalZoomChanged(qreal zoom)
 
     Signal emitted when the maximum supported optical \a zoom value changed.
-    \since 1.1
 */
 
 /*!
@@ -231,7 +213,6 @@ QCameraFocusControl::~QCameraFocusControl()
 
     The maximum supported zoom value can depend on other camera settings,
     like capture mode or resolution.
-    \since 1.1
 */
 
 
@@ -242,7 +223,6 @@ QCameraFocusControl::~QCameraFocusControl()
 
   Usually the zones list is changed when the camera is focused.
 
-  \since 1.1
   \sa QCameraFocusControl::focusZones()
 */
 
diff --git a/src/multimedia/controls/qcameraimagecapturecontrol.cpp b/src/multimedia/controls/qcameraimagecapturecontrol.cpp
index aa265e1..f86c50e 100644
--- a/src/multimedia/controls/qcameraimagecapturecontrol.cpp
+++ b/src/multimedia/controls/qcameraimagecapturecontrol.cpp
@@ -52,7 +52,6 @@ QT_BEGIN_NAMESPACE
 
     \inmodule QtMultimedia
     \ingroup multimedia-serv
-    \since 1.1
 
 
 
@@ -96,14 +95,12 @@ QCameraImageCaptureControl::~QCameraImageCaptureControl()
     hardware initialized, flash is charged, etc).
 
     Returns true if the camera is ready for capture; and false if it is not.
-    \since 1.1
 */
 
 /*!
     \fn QCameraImageCaptureControl::readyForCaptureChanged(bool ready)
 
     Signals that a capture control's \a ready state has changed.
-    \since 1.1
 */
 
 /*!
@@ -116,14 +113,12 @@ QCameraImageCaptureControl::~QCameraImageCaptureControl()
 
     Returns the capture request id number, which is used later
     with imageExposed(), imageCaptured() and imageSaved() signals.
-    \since 1.1
 */
 
 /*!
     \fn QCameraImageCaptureControl::cancelCapture()
 
     Cancel pending capture requests.
-    \since 1.1
 */
 
 /*!
@@ -132,7 +127,6 @@ QCameraImageCaptureControl::~QCameraImageCaptureControl()
     Signals that an image with it \a requestId
     has just been exposed.
     This signal can be used for the shutter sound or other indicaton.
-    \since 1.1
 */
 
 /*!
@@ -140,7 +134,6 @@ QCameraImageCaptureControl::~QCameraImageCaptureControl()
 
     Signals that an image with it \a requestId
     has been captured and a \a preview is available.
-    \since 1.1
 */
 
 /*!
@@ -150,7 +143,6 @@ QCameraImageCaptureControl::~QCameraImageCaptureControl()
     This signal is emitted for metadata \a value with a \a key listed in QtMultimedia::MetaData enum.
 
     This signal should be emitted between imageExposed and imageSaved signals.
-    \since 1.2
 */
 
 /*!
@@ -160,14 +152,12 @@ QCameraImageCaptureControl::~QCameraImageCaptureControl()
     This signal is emitted for extended metadata \a value with a \a key not listed in QtMultimedia::MetaData enum.
 
     This signal should be emitted between imageExposed and imageSaved signals.
-    \since 1.2
 */
 
 /*!
     \fn QCameraImageCaptureControl::imageAvailable(int requestId, const QVideoFrame &buffer)
 
     Signals that a captured \a buffer with a \a requestId is available.
-    \since 1.2
 */
 
 /*!
@@ -175,21 +165,18 @@ QCameraImageCaptureControl::~QCameraImageCaptureControl()
 
     Signals that a captured image with a \a requestId has been saved
     to \a fileName.
-    \since 1.1
 */
 
 /*!
     \fn QCameraImageCaptureControl::driveMode() const
 
     Returns the current camera drive mode.
-    \since 1.1
 */
 
 /*!
     \fn QCameraImageCaptureControl::setDriveMode(QCameraImageCapture::DriveMode mode)
 
     Sets the current camera drive \a mode.
-    \since 1.1
 */
 
 
@@ -198,7 +185,6 @@ QCameraImageCaptureControl::~QCameraImageCaptureControl()
 
     Signals the capture request \a id failed with \a error code and message \a errorString.
 
-    \since 1.1
     \sa QCameraImageCapture::Error
 */
 
diff --git a/src/multimedia/controls/qcameraimageprocessingcontrol.cpp b/src/multimedia/controls/qcameraimageprocessingcontrol.cpp
index bc287ac..967b0d3 100644
--- a/src/multimedia/controls/qcameraimageprocessingcontrol.cpp
+++ b/src/multimedia/controls/qcameraimageprocessingcontrol.cpp
@@ -60,7 +60,6 @@ namespace
     \class QCameraImageProcessingControl
     \inmodule QtMultimedia
     \ingroup multimedia-serv
-    \since 1.1
 
 
     \brief The QCameraImageProcessingControl class provides an abstract class
@@ -106,20 +105,17 @@ QCameraImageProcessingControl::~QCameraImageProcessingControl()
 /*!
     \fn QCameraImageProcessingControl::whiteBalanceMode() const
     Return the white balance mode being used.
-    \since 1.1
 */
 
 /*!
     \fn QCameraImageProcessingControl::setWhiteBalanceMode(QCameraImageProcessing::WhiteBalanceMode mode)
     Set the white balance mode to \a mode
-    \since 1.1
 */
 
 /*!
     \fn QCameraImageProcessingControl::isWhiteBalanceModeSupported(QCameraImageProcessing::WhiteBalanceMode mode) const
     Returns true if the white balance \a mode is supported.
     The backend should support at least QCameraImageProcessing::WhiteBalanceAuto mode.
-    \since 1.1
 */
 
 /*!
@@ -131,13 +127,11 @@ QCameraImageProcessingControl::~QCameraImageProcessingControl()
     but some parameter may not be available depending on other
     camera settings, like presets.
     In such case the currently supported parameters should be returned.
-    \since 1.1
 */
 
 /*!
     \fn QCameraImageProcessingControl::processingParameter(ProcessingParameter parameter) const
     Returns the image processing \a parameter value.
-    \since 1.1
 */
 
 /*!
@@ -154,7 +148,6 @@ QCameraImageProcessingControl::~QCameraImageProcessingControl()
     For sharpening and denoising the range is 0..100,
     0 for sharpening or denoising disabled
     and 100 for maximum sharpening/denoising applied.
-    \since 1.1
 */
 
 /*!
diff --git a/src/multimedia/controls/qcameralockscontrol.cpp b/src/multimedia/controls/qcameralockscontrol.cpp
index 13ab28e..7ce0766 100644
--- a/src/multimedia/controls/qcameralockscontrol.cpp
+++ b/src/multimedia/controls/qcameralockscontrol.cpp
@@ -54,7 +54,6 @@ QT_BEGIN_NAMESPACE
 
     \inmodule QtMultimedia
     \ingroup multimedia-serv
-    \since 1.1
 
     This service is provided by a QMediaService object via
     QMediaService::control().  It is used by QCamera.
@@ -97,35 +96,30 @@ QCameraLocksControl::~QCameraLocksControl()
     \fn QCameraLocksControl::supportedLocks() const
 
     Returns the lock types, the camera supports.
-    \since 1.1
 */
 
 /*!
     \fn QCameraLocksControl::lockStatus(QCamera::LockType lock) const
 
     Returns the camera \a lock status.
-    \since 1.1
 */
 
 /*!
     \fn QCameraLocksControl::searchAndLock(QCamera::LockTypes locks)
 
     Request camera \a locks.
-    \since 1.1
 */
 
 /*!
     \fn QCameraLocksControl::unlock(QCamera::LockTypes locks)
 
     Unlock camera \a locks.
-    \since 1.1
 */
 
 /*!
     \fn QCameraLocksControl::lockStatusChanged(QCamera::LockType lock, QCamera::LockStatus status, QCamera::LockChangeReason reason)
 
     Signals the \a lock \a status was changed with a specified \a reason.
-    \since 1.1
 */
 
 
diff --git a/src/multimedia/controls/qimageencodercontrol.cpp b/src/multimedia/controls/qimageencodercontrol.cpp
index f86fc3e..11d8d3c 100644
--- a/src/multimedia/controls/qimageencodercontrol.cpp
+++ b/src/multimedia/controls/qimageencodercontrol.cpp
@@ -49,7 +49,6 @@ QT_BEGIN_NAMESPACE
 
     \inmodule QtMultimedia
     \ingroup multimedia-serv
-    \since 1.0
 
     \brief The QImageEncoderControl class provides access to the settings of a media service that
     performs image encoding.
@@ -102,21 +101,18 @@ QImageEncoderControl::~QImageEncoderControl()
 
     If the encoder supports arbitrary resolutions within the supported resolutions range,
     *\a continuous is set to true, otherwise *\a continuous is set to false.
-    \since 1.0
 */
 
 /*!
     \fn QImageEncoderControl::supportedImageCodecs() const
 
     Returns a list of supported image codecs.
-    \since 1.0
 */
 
 /*!
     \fn QImageEncoderControl::imageCodecDescription(const QString &codec) const
 
     Returns a description of an image \a codec.
-    \since 1.0
 */
 
 /*!
@@ -127,14 +123,12 @@ QImageEncoderControl::~QImageEncoderControl()
     The returned value may be different tha passed to QImageEncoderControl::setImageSettings()
     if the settings contains the default or undefined parameters.
     In this case if the undefined parameters are already resolved, they should be returned.
-    \since 1.0
 */
 
 /*!
     \fn QImageEncoderControl::setImageSettings(const QImageEncoderSettings &settings)
 
     Sets the selected image encoder \a settings.
-    \since 1.0
 */
 
 #include "moc_qimageencodercontrol.cpp"
diff --git a/src/multimedia/controls/qmediabackgroundplaybackcontrol.cpp b/src/multimedia/controls/qmediabackgroundplaybackcontrol.cpp
index 68eadd8..a5f3d09 100644
--- a/src/multimedia/controls/qmediabackgroundplaybackcontrol.cpp
+++ b/src/multimedia/controls/qmediabackgroundplaybackcontrol.cpp
@@ -49,7 +49,6 @@ QT_BEGIN_NAMESPACE
     \class QMediaBackgroundPlaybackControl
     \inmodule QtMultimedia
     \ingroup multimedia
-    \since 5.0
 
 
     \brief The QMediaBackgroundPlaybackControl class provides access to the background playback
@@ -99,21 +98,18 @@ QMediaBackgroundPlaybackControl::QMediaBackgroundPlaybackControl(QObject *parent
     contextId is an unique string set by the application and is used by the background daemon to
     distinguish and manage different context for different application.
 
-    \since 1.0
 */
 
 /*!
     \fn QMediaBackgroundPlaybackControl::acquire()
 
     Try to acquire the playback resource for current application
-    \since 1.0
 */
 
 /*!
     \fn QMediaBackgroundPlaybackControl::release()
 
     Give up the playback resource if current applicaiton holds it.
-    \since 1.0
 */
 
 /*!
@@ -124,7 +120,6 @@ QMediaBackgroundPlaybackControl::QMediaBackgroundPlaybackControl(QObject *parent
 
     By default this property is false
 
-    \since 1.0
 */
 
 /*!
@@ -132,7 +127,6 @@ QMediaBackgroundPlaybackControl::QMediaBackgroundPlaybackControl(QObject *parent
 
     Signals that the playback resource is acquired
 
-    \since 1.0
 */
 
 /*!
@@ -140,7 +134,6 @@ QMediaBackgroundPlaybackControl::QMediaBackgroundPlaybackControl(QObject *parent
 
     Signals that the playback resource is lost
 
-    \since 1.0
 */
 
 #include "moc_qmediabackgroundplaybackcontrol.cpp"
diff --git a/src/multimedia/controls/qmediacontainercontrol.cpp b/src/multimedia/controls/qmediacontainercontrol.cpp
index 62cb647..44b7220 100644
--- a/src/multimedia/controls/qmediacontainercontrol.cpp
+++ b/src/multimedia/controls/qmediacontainercontrol.cpp
@@ -51,7 +51,6 @@ QT_BEGIN_NAMESPACE
 
     \inmodule QtMultimedia
     \ingroup multimedia-serv
-    \since 1.0
 
     If a QMediaService supports writing encoded data it will implement
     QMediaContainerControl.  This control provides information about the output
@@ -97,28 +96,24 @@ QMediaContainerControl::~QMediaContainerControl()
     \fn QMediaContainerControl::supportedContainers() const
 
     Returns a list of MIME types of supported container formats.
-    \since 1.0
 */
 
 /*!
     \fn QMediaContainerControl::containerMimeType() const
 
     Returns the MIME type of the selected container format.
-    \since 1.0
 */
 
 /*!
     \fn QMediaContainerControl::setContainerMimeType(const QString &mimeType)
 
     Sets the current container format to the format identified by the given \a mimeType.
-    \since 1.0
 */
 
 /*!
     \fn QMediaContainerControl::containerDescription(const QString &mimeType) const
 
     Returns a description of the container format identified by the given \a mimeType.
-    \since 1.0
 */
 
 #include "moc_qmediacontainercontrol.cpp"
diff --git a/src/multimedia/controls/qmediagaplessplaybackcontrol.cpp b/src/multimedia/controls/qmediagaplessplaybackcontrol.cpp
index 84363e0..ec0ed76 100644
--- a/src/multimedia/controls/qmediagaplessplaybackcontrol.cpp
+++ b/src/multimedia/controls/qmediagaplessplaybackcontrol.cpp
@@ -46,7 +46,6 @@
     \class QMediaGaplessPlaybackControl
     \inmodule QtMultimedia
     \ingroup multimedia
-    \since 5.0
 
     \brief The QMediaGaplessPlaybackControl class provides access to the gapless playback
     related control of a QMediaService.
@@ -93,14 +92,12 @@ QMediaGaplessPlaybackControl::QMediaGaplessPlaybackControl(QObject *parent):
     \fn QMediaGaplessPlaybackControl::nextMedia() const
 
     Returns the content of the next media
-    \since 1.0
 */
 
 /*!
     \fn QMediaGaplessPlaybackControl::setNextMedia(const QMediaContent& media)
 
     Sets the next media for smooth transition.
-    \since 1.0
 */
 
 /*!
@@ -109,7 +106,6 @@ QMediaGaplessPlaybackControl::QMediaGaplessPlaybackControl(QObject *parent):
     Signals that the next media has changed (either explicitly via \l setNextMedia() or when the
     player clears the next media while advancing to it).
 
-    \since 1.0
     \sa nextMedia()
 */
 
@@ -118,7 +114,6 @@ QMediaGaplessPlaybackControl::QMediaGaplessPlaybackControl(QObject *parent):
 
     Signals when the player advances to the next media (the content of next media will be cleared).
 
-    \since 1.0
     \sa nextMedia()
 */
 
@@ -129,7 +124,6 @@ QMediaGaplessPlaybackControl::QMediaGaplessPlaybackControl(QObject *parent):
     If crossfading is not supported, \l setCrossfadTime() will be ignored and \l crossfadeTime() will
     always return 0.
 
-    \since 1.0
 */
 
 /*!
@@ -144,14 +138,12 @@ QMediaGaplessPlaybackControl::QMediaGaplessPlaybackControl(QObject *parent):
     A crossfade time of zero or negative will result in gapless playback (suitable for some
     continuous media).
 
-    \since 1.0
 */
 
 /*!
     \fn QMediaGaplessPlaybackControl::crossfadeTime() const
 
     Returns current crossfade time in seconds.
-    \since 1.0
 */
 
 /*!
@@ -159,7 +151,6 @@ QMediaGaplessPlaybackControl::QMediaGaplessPlaybackControl(QObject *parent):
 
     Signals that the crossfade time has changed.
 
-    \since 1.0
     \sa crossfadeTime()
 */
 
diff --git a/src/multimedia/controls/qmedianetworkaccesscontrol.cpp b/src/multimedia/controls/qmedianetworkaccesscontrol.cpp
index 403110e..f592fb3 100644
--- a/src/multimedia/controls/qmedianetworkaccesscontrol.cpp
+++ b/src/multimedia/controls/qmedianetworkaccesscontrol.cpp
@@ -49,7 +49,6 @@ QT_BEGIN_NAMESPACE
     \brief The QMediaNetworkAccessControl class allows the setting of the Network Access Point for media related activities.
     \ingroup multimedia-serv
     \inmodule QtMultimedia
-    \since 1.2
 
     The functionality provided by this control allows the
     setting of a Network Access Point.
@@ -79,7 +78,6 @@ QMediaNetworkAccessControl::~QMediaNetworkAccessControl()
     It is assumed the list is given in highest to lowest preference order.
     By calling this function all previous configurations will be invalidated
     and replaced with the new list.
-    \since 1.2
 */
 
 /*
@@ -94,7 +92,6 @@ QMediaNetworkAccessControl::~QMediaNetworkAccessControl()
     \fn QMediaNetworkAccessControl::configurationChanged(const QNetworkConfiguration &configuration)
     This signal is emitted when the current active network configuration changes
     to \a configuration.
-    \since 1.2
 */
 
 
diff --git a/src/multimedia/controls/qmediaplayercontrol.cpp b/src/multimedia/controls/qmediaplayercontrol.cpp
index 6d39187..7035c30 100644
--- a/src/multimedia/controls/qmediaplayercontrol.cpp
+++ b/src/multimedia/controls/qmediaplayercontrol.cpp
@@ -50,7 +50,6 @@ QT_BEGIN_NAMESPACE
     \class QMediaPlayerControl
     \inmodule QtMultimedia
     \ingroup multimedia-serv
-    \since 1.0
 
 
     \brief The QMediaPlayerControl class provides access to the media playing
@@ -102,7 +101,6 @@ QMediaPlayerControl::QMediaPlayerControl(QObject *parent):
     \fn QMediaPlayerControl::state() const
 
     Returns the state of a player control.
-    \since 1.0
 */
 
 /*!
@@ -110,7 +108,6 @@ QMediaPlayerControl::QMediaPlayerControl(QObject *parent):
 
     Signals that the \a state of a player control has changed.
 
-    \since 1.0
     \sa state()
 */
 
@@ -118,7 +115,6 @@ QMediaPlayerControl::QMediaPlayerControl(QObject *parent):
     \fn QMediaPlayerControl::mediaStatus() const
 
     Returns the status of the current media.
-    \since 1.0
 */
 
 /*!
@@ -126,7 +122,6 @@ QMediaPlayerControl::QMediaPlayerControl(QObject *parent):
 
     Signals that the \a status of the current media has changed.
 
-    \since 1.0
     \sa mediaStatus()
 */
 
@@ -135,7 +130,6 @@ QMediaPlayerControl::QMediaPlayerControl(QObject *parent):
     \fn QMediaPlayerControl::duration() const
 
     Returns the duration of the current media in milliseconds.
-    \since 1.0
 */
 
 /*!
@@ -143,7 +137,6 @@ QMediaPlayerControl::QMediaPlayerControl(QObject *parent):
 
     Signals that the \a duration of the current media has changed.
 
-    \since 1.0
     \sa duration()
 */
 
@@ -151,7 +144,6 @@ QMediaPlayerControl::QMediaPlayerControl(QObject *parent):
     \fn QMediaPlayerControl::position() const
 
     Returns the current playback position in milliseconds.
-    \since 1.0
 */
 
 /*!
@@ -159,7 +151,6 @@ QMediaPlayerControl::QMediaPlayerControl(QObject *parent):
 
     Sets the playback \a position of the current media.  This will initiate a seek and it may take
     some time for playback to reach the position set.
-    \since 1.0
 */
 
 /*!
@@ -170,7 +161,6 @@ QMediaPlayerControl::QMediaPlayerControl(QObject *parent):
     This is only emitted in when there has been a discontinous change in the playback postion, such
     as a seek or the position being reset.
 
-    \since 1.0
     \sa position()
 */
 
@@ -178,14 +168,12 @@ QMediaPlayerControl::QMediaPlayerControl(QObject *parent):
     \fn QMediaPlayerControl::volume() const
 
     Returns the audio volume of a player control.
-    \since 1.0
 */
 
 /*!
     \fn QMediaPlayerControl::setVolume(int volume)
 
     Sets the audio \a volume of a player control.
-    \since 1.0
 */
 
 /*!
@@ -193,7 +181,6 @@ QMediaPlayerControl::QMediaPlayerControl(QObject *parent):
 
     Signals the audio \a volume of a player control has changed.
 
-    \since 1.0
     \sa volume()
 */
 
@@ -201,14 +188,12 @@ QMediaPlayerControl::QMediaPlayerControl(QObject *parent):
     \fn QMediaPlayerControl::isMuted() const
 
     Returns the mute state of a player control.
-    \since 1.0
 */
 
 /*!
     \fn QMediaPlayerControl::setMuted(bool mute)
 
     Sets the \a mute state of a player control.
-    \since 1.0
 */
 
 /*!
@@ -216,7 +201,6 @@ QMediaPlayerControl::QMediaPlayerControl(QObject *parent):
 
     Signals a change in the \a mute status of a player control.
 
-    \since 1.0
     \sa isMuted()
 */
 
@@ -225,7 +209,6 @@ QMediaPlayerControl::QMediaPlayerControl(QObject *parent):
 
     Returns the buffering progress of the current media.  Progress is measured in the percentage
     of the buffer filled.
-    \since 1.0
 */
 
 /*!
@@ -233,7 +216,6 @@ QMediaPlayerControl::QMediaPlayerControl(QObject *parent):
 
     Signals that buffering \a progress has changed.
 
-    \since 1.0
     \sa bufferStatus()
 */
 
@@ -243,7 +225,6 @@ QMediaPlayerControl::QMediaPlayerControl(QObject *parent):
     Identifies if there is audio output available for the current media.
 
     Returns true if audio output is available and false otherwise.
-    \since 1.0
 */
 
 /*!
@@ -251,7 +232,6 @@ QMediaPlayerControl::QMediaPlayerControl(QObject *parent):
 
     Signals that there has been a change in the availability of \a audio output.
 
-    \since 1.0
     \sa isAudioAvailable()
 */
 
@@ -261,7 +241,6 @@ QMediaPlayerControl::QMediaPlayerControl(QObject *parent):
     Identifies if there is video output available for the current media.
 
     Returns true if video output is available and false otherwise.
-    \since 1.0
 */
 
 /*!
@@ -269,7 +248,6 @@ QMediaPlayerControl::QMediaPlayerControl(QObject *parent):
 
     Signals that there has been a change in the availability of \a video output.
 
-    \since 1.0
     \sa isVideoAvailable()
 */
 
@@ -279,7 +257,6 @@ QMediaPlayerControl::QMediaPlayerControl(QObject *parent):
     Identifies if the current media is seekable.
 
     Returns true if it possible to seek within the current media, and false otherwise.
-    \since 1.0
 */
 
 /*!
@@ -287,7 +264,6 @@ QMediaPlayerControl::QMediaPlayerControl(QObject *parent):
 
     Signals that the \a seekable state of a player control has changed.
 
-    \since 1.0
     \sa isSeekable()
 */
 
@@ -299,7 +275,6 @@ QMediaPlayerControl::QMediaPlayerControl(QObject *parent):
     Usually for local files this is a continuous interval equal to [0..duration()]
     or an empty time range if seeking is not supported, but for network sources
     it refers to the buffered parts of the media.
-    \since 1.0
 */
 
 /*!
@@ -307,7 +282,6 @@ QMediaPlayerControl::QMediaPlayerControl(QObject *parent):
 
     Signals that the available media playback \a ranges have changed.
 
-    \since 1.0
     \sa QMediaPlayerControl::availablePlaybackRanges()
 */
 
@@ -315,21 +289,18 @@ QMediaPlayerControl::QMediaPlayerControl(QObject *parent):
     \fn qreal QMediaPlayerControl::playbackRate() const
 
     Returns the rate of playback.
-    \since 1.0
 */
 
 /*!
     \fn QMediaPlayerControl::setPlaybackRate(qreal rate)
 
     Sets the \a rate of playback.
-    \since 1.0
 */
 
 /*!
     \fn QMediaPlayerControl::media() const
 
     Returns the current media source.
-    \since 1.0
 */
 
 /*!
@@ -337,7 +308,6 @@ QMediaPlayerControl::QMediaPlayerControl(QObject *parent):
 
     Returns the current media stream. This is only a valid if a stream was passed to setMedia().
 
-    \since 1.0
     \sa setMedia()
 */
 
@@ -351,14 +321,12 @@ QMediaPlayerControl::QMediaPlayerControl(QObject *parent):
     Setting the media to a null QMediaContent will cause the control to discard all
     information relating to the current media source and to cease all I/O operations related
     to that media.
-    \since 1.0
 */
 
 /*!
     \fn QMediaPlayerControl::mediaChanged(const QMediaContent& content)
 
     Signals that the current media \a content has changed.
-    \since 1.0
 */
 
 /*!
@@ -369,7 +337,6 @@ QMediaPlayerControl::QMediaPlayerControl(QObject *parent):
     If successful the player control will immediately enter the \l {QMediaPlayer::PlayingState}
     {playing} state.
 
-    \since 1.0
     \sa state()
 */
 
@@ -381,7 +348,6 @@ QMediaPlayerControl::QMediaPlayerControl(QObject *parent):
     If sucessful the player control will immediately enter the \l {QMediaPlayer::PausedState}
     {paused} state.
 
-    \since 1.0
     \sa state(), play(), stop()
 */
 
@@ -392,21 +358,18 @@ QMediaPlayerControl::QMediaPlayerControl(QObject *parent):
 
     If successful the player control will immediately enter the \l {QMediaPlayer::StoppedState}
     {stopped} state.
-    \since 1.0
 */
 
 /*!
     \fn QMediaPlayerControl::error(int error, const QString &errorString)
 
     Signals that an \a error has occurred.  The \a errorString provides a more detailed explanation.
-    \since 1.0
 */
 
 /*!
     \fn QMediaPlayerControl::playbackRateChanged(qreal rate)
 
     Signal emitted when playback rate changes to \a rate.
-    \since 1.0
 */
 
 #include "moc_qmediaplayercontrol.cpp"
diff --git a/src/multimedia/controls/qmediaplaylistcontrol.cpp b/src/multimedia/controls/qmediaplaylistcontrol.cpp
index 8c4bfd1..a024045 100644
--- a/src/multimedia/controls/qmediaplaylistcontrol.cpp
+++ b/src/multimedia/controls/qmediaplaylistcontrol.cpp
@@ -49,7 +49,6 @@ QT_BEGIN_NAMESPACE
     \class QMediaPlaylistControl
     \inmodule QtMultimedia
     \ingroup multimedia-serv
-    \since 1.0
 
 
     \brief The QMediaPlaylistControl class provides access to the playlist
@@ -100,7 +99,6 @@ QMediaPlaylistControl::~QMediaPlaylistControl()
   \fn QMediaPlaylistControl::playlistProvider() const
 
   Returns the playlist used by this media player.
-  \since 1.0
 */
 
 /*!
@@ -114,21 +112,18 @@ QMediaPlaylistControl::~QMediaPlaylistControl()
 
   Returns true if player can use this passed playlist; otherwise returns false.
 
-  \since 1.0
 */
 
 /*!
   \fn QMediaPlaylistControl::currentIndex() const
 
   Returns position of the current media source in the playlist.
-  \since 1.0
 */
 
 /*!
   \fn QMediaPlaylistControl::setCurrentIndex(int position)
 
   Jump to the item at the given \a position.
-  \since 1.0
 */
 
 /*!
@@ -140,7 +135,6 @@ QMediaPlaylistControl::~QMediaPlaylistControl()
   Returned value depends on the size of playlist, current position
   and playback mode.
 
-  \since 1.0
   \sa QMediaPlaylist::playbackMode
 */
 
@@ -150,7 +144,6 @@ QMediaPlaylistControl::~QMediaPlaylistControl()
   Returns the index of item, which were current after calling previous()
   \a step times.
 
-  \since 1.0
   \sa QMediaPlaylist::playbackMode
 */
 
@@ -158,14 +151,12 @@ QMediaPlaylistControl::~QMediaPlaylistControl()
   \fn QMediaPlaylistControl::next()
 
   Moves to the next item in playlist.
-  \since 1.0
 */
 
 /*!
   \fn QMediaPlaylistControl::previous()
 
   Returns to the previous item in playlist.
-  \since 1.0
 */
 
 /*!
@@ -173,7 +164,6 @@ QMediaPlaylistControl::~QMediaPlaylistControl()
 
   Returns the playlist navigation mode.
 
-  \since 1.0
   \sa QMediaPlaylist::PlaybackMode
 */
 
@@ -182,7 +172,6 @@ QMediaPlaylistControl::~QMediaPlaylistControl()
 
   Sets the playback \a mode.
 
-  \since 1.0
   \sa QMediaPlaylist::PlaybackMode
 */
 
@@ -190,28 +179,24 @@ QMediaPlaylistControl::~QMediaPlaylistControl()
   \fn QMediaPlaylistControl::playlistProviderChanged()
 
   Signal emitted when the playlist provider has changed.
-  \since 1.0
 */
 
 /*!
   \fn QMediaPlaylistControl::currentIndexChanged(int position)
 
   Signal emitted when the playlist \a position is changed.
-  \since 1.0
 */
 
 /*!
   \fn QMediaPlaylistControl::playbackModeChanged(QMediaPlaylist::PlaybackMode mode)
 
   Signal emitted when the playback \a mode is changed.
-  \since 1.0
 */
 
 /*!
   \fn QMediaPlaylistControl::currentMediaChanged(const QMediaContent& content)
 
   Signal emitted when current media changes to \a content.
-  \since 1.0
 */
 
 #include "moc_qmediaplaylistcontrol.cpp"
diff --git a/src/multimedia/controls/qmediaplaylistsourcecontrol.cpp b/src/multimedia/controls/qmediaplaylistsourcecontrol.cpp
index 091e5cf..b91ce33 100644
--- a/src/multimedia/controls/qmediaplaylistsourcecontrol.cpp
+++ b/src/multimedia/controls/qmediaplaylistsourcecontrol.cpp
@@ -49,7 +49,6 @@ QT_BEGIN_NAMESPACE
     \class QMediaPlaylistSourceControl
     \inmodule QtMultimedia
     \ingroup multimedia-serv
-    \since 1.0
 
 
     \brief The QMediaPlaylistSourceControl class provides access to the playlist playback
@@ -102,7 +101,6 @@ QMediaPlaylistSourceControl::~QMediaPlaylistSourceControl()
 
   Returns the current playlist.
   Should return a null pointer if no playlist is assigned.
-  \since 1.0
 */
 
 /*!
@@ -112,7 +110,6 @@ QMediaPlaylistSourceControl::~QMediaPlaylistSourceControl()
   If a null pointer is passed, the playlist source should be disabled.
 
   The current media should be replaced with the current item of the media playlist.
-  \since 1.0
 */
 
 
@@ -120,7 +117,6 @@ QMediaPlaylistSourceControl::~QMediaPlaylistSourceControl()
   \fn QMediaPlaylistSourceControl::playlistChanged(QMediaPlaylist* playlist)
 
   Signal emitted when the playlist has changed to \a playlist.
-  \since 1.0
 */
 
 #include "moc_qmediaplaylistsourcecontrol.cpp"
diff --git a/src/multimedia/controls/qmediarecordercontrol.cpp b/src/multimedia/controls/qmediarecordercontrol.cpp
index 4a7df90..cccc6c5 100644
--- a/src/multimedia/controls/qmediarecordercontrol.cpp
+++ b/src/multimedia/controls/qmediarecordercontrol.cpp
@@ -48,7 +48,6 @@ QT_BEGIN_NAMESPACE
     \class QMediaRecorderControl
     \inmodule QtMultimedia
     \ingroup multimedia-serv
-    \since 1.0
 
 
     \brief The QMediaRecorderControl class provides access to the recording
@@ -101,7 +100,6 @@ QMediaRecorderControl::~QMediaRecorderControl()
     \fn QUrl QMediaRecorderControl::outputLocation() const
 
     Returns the current output location being used.
-    \since 1.0
 */
 
 /*!
@@ -113,42 +111,36 @@ QMediaRecorderControl::~QMediaRecorderControl()
     The \a location can be relative or empty;
     in this case the service should use the system specific place and file naming scheme.
     After recording has stated, QMediaRecorderControl::outputLocation() should return the actual output location.
-    \since 1.0
 */
 
 /*!
     \fn int QMediaRecorderControl::state() const
 
     Return the current recording state.
-    \since 1.0
 */
 
 /*!
     \fn qint64 QMediaRecorderControl::duration() const
 
     Return the current duration in milliseconds.
-    \since 1.0
 */
 
 /*!
     \fn void QMediaRecorderControl::record()
 
     Start recording.
-    \since 1.0
 */
 
 /*!
     \fn void QMediaRecorderControl::pause()
 
     Pause recording.
-    \since 1.0
 */
 
 /*!
     \fn void QMediaRecorderControl::stop()
 
     Stop recording.
-    \since 1.0
 */
 
 /*!
@@ -156,21 +148,18 @@ QMediaRecorderControl::~QMediaRecorderControl()
 
     Commits the encoder settings and performs pre-initialization to reduce delays when recording
     is started.
-    \since 1.0
 */
 
 /*!
     \fn bool QMediaRecorderControl::isMuted() const
 
     Returns true if the recorder is muted, and false if it is not.
-    \since 1.0
 */
 
 /*!
     \fn void QMediaRecorderControl::setMuted(bool muted)
 
     Sets the \a muted state of a media recorder.
-    \since 1.0
 */
 
 
@@ -178,7 +167,6 @@ QMediaRecorderControl::~QMediaRecorderControl()
     \fn void QMediaRecorderControl::stateChanged(QMediaRecorder::State state)
 
     Signals that the \a state of a media recorder has changed.
-    \since 1.0
 */
 
 /*!
@@ -187,21 +175,18 @@ QMediaRecorderControl::~QMediaRecorderControl()
     Signals that the \a duration of the recorded media has changed.
 
     This only emitted when there is a discontinuous change in the duration such as being reset to 0.
-    \since 1.0
 */
 
 /*!
     \fn void QMediaRecorderControl::mutedChanged(bool muted)
 
     Signals that the \a muted state of a media recorder has changed.
-    \since 1.0
 */
 
 /*!
     \fn void QMediaRecorderControl::error(int error, const QString &errorString)
 
     Signals that an \a error has occurred.  The \a errorString describes the error.
-    \since 1.0
 */
 
 #include "moc_qmediarecordercontrol.cpp"
diff --git a/src/multimedia/controls/qmediastreamscontrol.cpp b/src/multimedia/controls/qmediastreamscontrol.cpp
index b5e140f..056ad7c 100644
--- a/src/multimedia/controls/qmediastreamscontrol.cpp
+++ b/src/multimedia/controls/qmediastreamscontrol.cpp
@@ -64,7 +64,6 @@ namespace
     \ingroup multimedia-serv
     \brief The QMediaStreamsControl class provides a media stream selection control.
 
-    \since 1.0
 
     The QMediaStreamsControl class provides descriptions of the available media streams
     and allows individual streams to be activated and deactivated.
@@ -83,7 +82,6 @@ namespace
     Defines the interface name of the QMediaStreamsControl class.
 
     \relates QMediaStreamsControl
-    \since 1.0
 */
 
 /*!
@@ -117,14 +115,12 @@ QMediaStreamsControl::~QMediaStreamsControl()
     \fn QMediaStreamsControl::streamCount()
 
     Returns the number of media streams.
-    \since 1.0
 */
 
 /*!
     \fn QMediaStreamsControl::streamType(int stream)
 
     Return the type of a media \a stream.
-    \since 1.0
 */
 
 /*!
@@ -133,14 +129,12 @@ QMediaStreamsControl::~QMediaStreamsControl()
     Returns the meta-data value of \a key for a given \a stream.
 
     Useful metadata keya are QtMultimedia::Title, QtMultimedia::Description and QtMultimedia::Language.
-    \since 1.0
 */
 
 /*!
     \fn QMediaStreamsControl::isActive(int stream)
 
     Returns true if the media \a stream is active.
-    \since 1.0
 */
 
 /*!
@@ -151,21 +145,18 @@ QMediaStreamsControl::~QMediaStreamsControl()
     Setting the active state of a media stream to true will activate it.  If any other stream
     of the same type was previously active it will be deactivated. Setting the active state fo a
     media stream to false will deactivate it.
-    \since 1.0
 */
 
 /*!
     \fn QMediaStreamsControl::streamsChanged()
 
     The signal is emitted when the available streams list is changed.
-    \since 1.0
 */
 
 /*!
     \fn QMediaStreamsControl::activeStreamsChanged()
 
     The signal is emitted when the active streams list is changed.
-    \since 1.0
 */
 
 #include "moc_qmediastreamscontrol.cpp"
diff --git a/src/multimedia/controls/qmetadatareadercontrol.cpp b/src/multimedia/controls/qmetadatareadercontrol.cpp
index 3b12a43..f122a2d 100644
--- a/src/multimedia/controls/qmetadatareadercontrol.cpp
+++ b/src/multimedia/controls/qmetadatareadercontrol.cpp
@@ -49,7 +49,6 @@ QT_BEGIN_NAMESPACE
     \class QMetaDataReaderControl
     \inmodule QtMultimedia
     \ingroup multimedia-serv
-    \since 1.0
 
 
     \brief The QMetaDataReaderControl class provides read access to the
@@ -108,21 +107,18 @@ QMetaDataReaderControl::~QMetaDataReaderControl()
     Identifies if meta-data is available from a media service.
 
     Returns true if the meta-data is available and false otherwise.
-    \since 1.0
 */
 
 /*!
     \fn QVariant QMetaDataReaderControl::metaData(QtMultimedia::MetaData key) const
 
     Returns the meta-data for the given \a key.
-    \since 1.0
 */
 
 /*!
     \fn QMetaDataReaderControl::availableMetaData() const
 
     Returns a list of keys there is meta-data available for.
-    \since 1.0
 */
 
 /*!
@@ -132,14 +128,12 @@ QMetaDataReaderControl::~QMetaDataReaderControl()
 
     The valid selection of keys for extended meta-data is determined by the provider and the meaning
     and type may differ between providers.
-    \since 1.0
 */
 
 /*!
     \fn QMetaDataReaderControl::availableExtendedMetaData() const
 
     Returns a list of keys there is extended meta-data available for.
-    \since 1.0
 */
 
 
@@ -147,7 +141,6 @@ QMetaDataReaderControl::~QMetaDataReaderControl()
     \fn void QMetaDataReaderControl::metaDataChanged()
 
     Signal the changes of meta-data.
-    \since 1.0
 */
 
 /*!
@@ -155,7 +148,6 @@ QMetaDataReaderControl::~QMetaDataReaderControl()
 
     Signal the availability of meta-data has changed, \a available will
     be true if the multimedia object has meta-data.
-    \since 1.0
 */
 
 #include "moc_qmetadatareadercontrol.cpp"
diff --git a/src/multimedia/controls/qmetadatawritercontrol.cpp b/src/multimedia/controls/qmetadatawritercontrol.cpp
index ca92e67..c7dcb5c 100644
--- a/src/multimedia/controls/qmetadatawritercontrol.cpp
+++ b/src/multimedia/controls/qmetadatawritercontrol.cpp
@@ -49,7 +49,6 @@ QT_BEGIN_NAMESPACE
     \class QMetaDataWriterControl
     \inmodule QtMultimedia
     \ingroup multimedia-serv
-    \since 1.0
 
 
     \brief The QMetaDataWriterControl class provides write access to the
@@ -107,7 +106,6 @@ QMetaDataWriterControl::~QMetaDataWriterControl()
     Identifies if meta-data is available from a media service.
 
     Returns true if the meta-data is available and false otherwise.
-    \since 1.0
 */
 
 /*!
@@ -116,21 +114,18 @@ QMetaDataWriterControl::~QMetaDataWriterControl()
     Identifies if a media service's meta-data can be edited.
 
     Returns true if the meta-data is writable and false otherwise.
-    \since 1.0
 */
 
 /*!
     \fn QVariant QMetaDataWriterControl::metaData(QtMultimedia::MetaData key) const
 
     Returns the meta-data for the given \a key.
-    \since 1.0
 */
 
 /*!
     \fn void QMetaDataWriterControl::setMetaData(QtMultimedia::MetaData key, const QVariant &value)
 
     Sets the \a value of the meta-data element with the given \a key.
-    \since 1.0
 */
 
 /*!
@@ -146,7 +141,6 @@ QMetaDataWriterControl::~QMetaDataWriterControl()
 
     The valid selection of keys for extended meta-data is determined by the provider and the meaning
     and type may differ between providers.
-    \since 1.0
 */
 
 /*!
@@ -156,14 +150,12 @@ QMetaDataWriterControl::~QMetaDataWriterControl()
 
     The valid selection of keys for extended meta-data is determined by the provider and the meaning
     and type may differ between providers.
-    \since 1.0
 */
 
 /*!
     \fn QMetaDataWriterControl::availableExtendedMetaData() const
 
     Returns a list of keys there is extended meta-data available for.
-    \since 1.0
 */
 
 
@@ -171,7 +163,6 @@ QMetaDataWriterControl::~QMetaDataWriterControl()
     \fn void QMetaDataWriterControl::metaDataChanged()
 
     Signal the changes of meta-data.
-    \since 1.0
 */
 
 /*!
@@ -179,7 +170,6 @@ QMetaDataWriterControl::~QMetaDataWriterControl()
 
     Signal the availability of meta-data has changed, \a available will
     be true if the multimedia object has meta-data.
-    \since 1.0
 */
 
 /*!
@@ -187,7 +177,6 @@ QMetaDataWriterControl::~QMetaDataWriterControl()
 
     Signal a change in the writable status of meta-data, \a writable will be
     true if meta-data elements can be added or adjusted.
-    \since 1.0
 */
 
 #include "moc_qmetadatawritercontrol.cpp"
diff --git a/src/multimedia/controls/qradiodatacontrol.cpp b/src/multimedia/controls/qradiodatacontrol.cpp
index 72ca587..38a26d4 100644
--- a/src/multimedia/controls/qradiodatacontrol.cpp
+++ b/src/multimedia/controls/qradiodatacontrol.cpp
@@ -50,7 +50,6 @@ QT_BEGIN_NAMESPACE
     \class QRadioDataControl
     \inmodule QtMultimedia
     \ingroup multimedia-serv
-    \since 5.0
 
 
     \brief The QRadioDataControl class provides access to the RDS functionality of the
@@ -96,119 +95,102 @@ QRadioDataControl::~QRadioDataControl()
     \fn bool QRadioDataControl::isAvailable() const
 
     Returns true if the radio service is ready to use.
-    \since 5.0
 */
 
 /*!
     \fn QtMultimedia::AvailabilityError QRadioDataControl::availabilityError() const
 
     Returns the error state of the radio service.
-    \since 5.0
 */
 
 /*!
     \fn QRadioData::Error QRadioDataControl::error() const
 
     Returns the error state of a radio data.
-    \since 5.0
 */
 
 /*!
     \fn QString QRadioDataControl::errorString() const
 
     Returns a string describing a radio data's error state.
-    \since 5.0
 */
 
 /*!
     \fn void QRadioDataControl::error(QRadioData::Error error)
 
     Signals that an \a error has occurred.
-    \since 5.0
 */
 
 /*!
     \fn int QRadioDataControl::stationId()
 
     Returns the current Program Identification
-    \since 5.0
 */
 
 /*!
     \fn QRadioData::ProgramType QRadioDataControl::programType()
 
     Returns the current Program Type
-    \since 5.0
 */
 
 /*!
     \fn QString QRadioDataControl::programTypeName()
 
     Returns the current Program Type Name
-    \since 5.0
 */
 
 /*!
     \fn QString QRadioDataControl::stationName()
 
     Returns the current Program Service
-    \since 5.0
 */
 
 /*!
     \fn QString QRadioDataControl::radioText()
 
     Returns the current Radio Text
-    \since 5.0
 */
 
 /*!
     \fn void QRadioDataControl::setAlternativeFrequenciesEnabled(bool enabled)
 
     Sets the Alternative Frequency to \a enabled
-    \since 5.0
 */
 
 /*!
     \fn bool QRadioDataControl::isAlternativeFrequenciesEnabled()
 
     Returns true if Alternative Frequency is currently enabled
-    \since 5.0
 */
 
 /*!
     \fn void QRadioDataControl::stationIdChanged(QString stationId)
 
     Signals that the Program Identification \a stationId has changed
-    \since 5.0
 */
 
 /*!
     \fn void QRadioDataControl::programTypeChanged(QRadioData::ProgramType programType)
 
     Signals that the Program Type \a programType has changed
-    \since 5.0
 */
 
 /*!
     \fn void QRadioDataControl::programTypeNameChanged(QString programTypeName)
 
     Signals that the Program Type Name \a programTypeName has changed
-    \since 5.0
 */
 
 /*!
     \fn void QRadioDataControl::stationNameChanged(QString stationName)
 
     Signals that the Program Service \a stationName has changed
-    \since 5.0
 */
 
 /*!
     \fn void QRadioDataControl::radioTextChanged(QString radioText)
 
     Signals that the Radio Text \a radioText has changed
-    \since 5.0
 */
 
 #include "moc_qradiodatacontrol.cpp"
diff --git a/src/multimedia/controls/qradiotunercontrol.cpp b/src/multimedia/controls/qradiotunercontrol.cpp
index 9b16d49..fba5689 100644
--- a/src/multimedia/controls/qradiotunercontrol.cpp
+++ b/src/multimedia/controls/qradiotunercontrol.cpp
@@ -50,7 +50,6 @@ QT_BEGIN_NAMESPACE
     \class QRadioTunerControl
     \inmodule QtMultimedia
     \ingroup multimedia-serv
-    \since 1.0
 
 
     \brief The QRadioTunerControl class provides access to the radio tuning
@@ -102,35 +101,30 @@ QRadioTunerControl::~QRadioTunerControl()
     \fn bool QRadioTunerControl::isAvailable() const
 
     Returns true if the radio service is ready to use.
-    \since 1.0
 */
 
 /*!
     \fn QtMultimedia::AvailabilityError QRadioTunerControl::availabilityError() const
 
     Returns the error state of the radio service.
-    \since 1.0
 */
 
 /*!
     \fn QRadioTuner::State QRadioTunerControl::state() const
 
     Returns the current radio tuner state.
-    \since 1.0
 */
 
 /*!
     \fn QRadioTuner::Band QRadioTunerControl::band() const
 
     Returns the frequency band a radio tuner is tuned to.
-    \since 1.0
 */
 
 /*!
     \fn void QRadioTunerControl::bandChanged(QRadioTuner::Band band)
 
     Signals that the frequency \a band a radio tuner is tuned to has changed.
-    \since 1.0
 */
 
 /*!
@@ -139,7 +133,6 @@ QRadioTunerControl::~QRadioTunerControl()
     Sets the frequecy \a band a radio tuner is tuned to.
 
     Changing the frequency band will reset the frequency to the minimum frequency of the new band.
-    \since 1.0
 */
 
 /*!
@@ -148,14 +141,12 @@ QRadioTunerControl::~QRadioTunerControl()
     Identifies if a frequency \a band is supported.
 
     Returns true if the band is supported, and false if it is not.
-    \since 1.0
 */
 
 /*!
     \fn int QRadioTunerControl::frequency() const
 
     Returns the frequency a radio tuner is tuned to.
-    \since 1.0
 */
 
 /*!
@@ -163,21 +154,18 @@ QRadioTunerControl::~QRadioTunerControl()
 
     Returns the number of Hertz to increment the frequency by when stepping through frequencies
     within a given \a band.
-    \since 1.0
 */
 
 /*!
     \fn QPair<int,int> QRadioTunerControl::frequencyRange(QRadioTuner::Band band) const
 
     Returns a frequency \a band's minimum and maximum frequency.
-    \since 1.0
 */
 
 /*!
     \fn void QRadioTunerControl::setFrequency(int frequency)
 
     Sets the \a frequency a radio tuner is tuned to.
-    \since 1.0
 */
 
 /*!
@@ -186,7 +174,6 @@ QRadioTunerControl::~QRadioTunerControl()
     Identifies if a radio tuner is receiving a stereo signal.
 
     Returns true if the tuner is receiving a stereo signal, and false if it is not.
-    \since 1.0
 */
 
 /*!
@@ -194,7 +181,6 @@ QRadioTunerControl::~QRadioTunerControl()
 
     Returns a radio tuner's stereo mode.
 
-    \since 1.0
     \sa QRadioTuner::StereoMode
 */
 
@@ -203,7 +189,6 @@ QRadioTunerControl::~QRadioTunerControl()
 
     Sets a radio tuner's stereo \a mode.
 
-    \since 1.0
     \sa QRadioTuner::StereoMode
 */
 
@@ -211,21 +196,18 @@ QRadioTunerControl::~QRadioTunerControl()
     \fn int QRadioTunerControl::signalStrength() const
 
     Return a radio tuner's current signal strength as a percentage.
-    \since 1.0
 */
 
 /*!
     \fn int QRadioTunerControl::volume() const
 
     Returns the volume of a radio tuner's audio output as a percentage.
-    \since 1.0
 */
 
 /*!
     \fn void QRadioTunerControl::setVolume(int volume)
 
     Sets the percentage \a volume of a radio tuner's audio output.
-    \since 1.0
 */
 
 /*!
@@ -234,14 +216,12 @@ QRadioTunerControl::~QRadioTunerControl()
     Identifies if a radio tuner's audio output is muted.
 
     Returns true if the audio is muted, and false if it is not.
-    \since 1.0
 */
 
 /*!
     \fn void QRadioTunerControl::setMuted(bool muted)
 
     Sets the \a muted state of a radio tuner's audio output.
-    \since 1.0
 */
 
 /*!
@@ -250,70 +230,60 @@ QRadioTunerControl::~QRadioTunerControl()
     Identifies if a radio tuner is currently scanning for signal.
 
     Returns true if the tuner is scanning, and false if it is not.
-    \since 1.0
 */
 
 /*!
     \fn  void QRadioTunerControl::searchForward()
 
     Starts a forward scan for a signal, starting from the current \l frequency().
-    \since 1.0
 */
 
 /*!
     \fn void QRadioTunerControl::searchBackward()
 
     Starts a backwards scan for a signal, starting from the current \l frequency().
-    \since 1.0
 */
 
 /*!
     \fn  void QRadioTunerControl::searchAllStations()
 
     Starts a scan through the whole frequency band searching all stations
-    \since 5.0
 */
 
 /*!
     \fn void QRadioTunerControl::cancelSearch()
 
     Stops scanning for a signal.
-    \since 1.0
 */
 
 /*!
     \fn void QRadioTunerControl::start()
 
     Activate the radio device.
-    \since 1.0
 */
 
 /*!
     \fn QRadioTunerControl::stop()
 
     Deactivate the radio device.
-    \since 1.0
 */
 
 /*!
     \fn QRadioTuner::Error QRadioTunerControl::error() const
 
     Returns the error state of a radio tuner.
-    \since 1.0
 */
 
 /*!
     \fn QString QRadioTunerControl::errorString() const
 
     Returns a string describing a radio tuner's error state.
-    \since 1.0
 */
 
 /*!
     \fn void QRadioTunerControl::stateChanged(QRadioTuner::State state)
 
     Signals that the \a state of a radio tuner has changed.
-    \since 1.0
 */
 
 
@@ -321,56 +291,48 @@ QRadioTunerControl::~QRadioTunerControl()
     \fn void QRadioTunerControl::frequencyChanged(int frequency)
 
     Signals that the \a frequency a radio tuner is tuned to has changed.
-    \since 1.0
 */
 
 /*!
     \fn void QRadioTunerControl::stereoStatusChanged(bool stereo)
 
     Signals that the \a stereo state of a radio tuner has changed.
-    \since 1.0
 */
 
 /*!
     \fn void QRadioTunerControl::searchingChanged(bool searching)
 
     Signals that the \a searching state of a radio tuner has changed.
-    \since 1.0
 */
 
 /*!
     \fn void QRadioTunerControl::signalStrengthChanged(int strength)
 
     Signals that the percentage \a strength of the signal received by a radio tuner has changed.
-    \since 1.0
 */
 
 /*!
     \fn void QRadioTunerControl::volumeChanged(int volume)
 
     Signals that the percentage \a volume of radio tuner's audio output has changed.
-    \since 1.0
 */
 
 /*!
     \fn void QRadioTunerControl::mutedChanged(bool muted)
 
     Signals that the \a muted state of a radio tuner's audio output has changed.
-    \since 1.0
 */
 
 /*!
     \fn void QRadioTunerControl::error(QRadioTuner::Error error)
 
     Signals that an \a error has occurred.
-    \since 1.0
 */
 
 /*!
     \fn void QRadioTunerControl::stationFound(int frequency)
 
     Signals that new station with \a frequency was found when scanning
-    \since 5.0
 */
 
 #include "moc_qradiotunercontrol.cpp"
diff --git a/src/multimedia/controls/qvideodevicecontrol.cpp b/src/multimedia/controls/qvideodevicecontrol.cpp
index c2efca3..4d79de5 100644
--- a/src/multimedia/controls/qvideodevicecontrol.cpp
+++ b/src/multimedia/controls/qvideodevicecontrol.cpp
@@ -49,7 +49,6 @@ QT_BEGIN_NAMESPACE
     \brief The QVideoDeviceControl class provides an video device selector media control.
     \inmodule QtMultimedia
     \ingroup multimedia-serv
-    \since 1.0
 
     The QVideoDeviceControl class provides descriptions of the video devices
     available on a system and allows one to be selected as the  endpoint of a
@@ -88,63 +87,54 @@ QVideoDeviceControl::~QVideoDeviceControl()
     \fn QVideoDeviceControl::deviceCount() const
 
     Returns the number of available video devices;
-    \since 1.0
 */
 
 /*!
     \fn QVideoDeviceControl::deviceName(int index) const
 
     Returns the name of the video device at \a index.
-    \since 1.0
 */
 
 /*!
     \fn QVideoDeviceControl::deviceDescription(int index) const
 
     Returns a description of the video device at \a index.
-    \since 1.0
 */
 
 /*!
     \fn QVideoDeviceControl::defaultDevice() const
 
     Returns the index of the default video device.
-    \since 1.0
 */
 
 /*!
     \fn QVideoDeviceControl::selectedDevice() const
 
     Returns the index of the selected video device.
-    \since 1.0
 */
 
 /*!
     \fn QVideoDeviceControl::setSelectedDevice(int index)
 
     Sets the selected video device \a index.
-    \since 1.0
 */
 
 /*!
     \fn QVideoDeviceControl::devicesChanged()
 
     Signals that the list of available video devices has changed.
-    \since 1.0
 */
 
 /*!
     \fn QVideoDeviceControl::selectedDeviceChanged(int index)
 
     Signals that the selected video device \a index has changed.
-    \since 1.0
 */
 
 /*!
     \fn QVideoDeviceControl::selectedDeviceChanged(const QString &name)
 
     Signals that the selected video device \a name has changed.
-    \since 1.0
 */
 
 #include "moc_qvideodevicecontrol.cpp"
diff --git a/src/multimedia/controls/qvideoencodercontrol.cpp b/src/multimedia/controls/qvideoencodercontrol.cpp
index 6a693c5..da806e2 100644
--- a/src/multimedia/controls/qvideoencodercontrol.cpp
+++ b/src/multimedia/controls/qvideoencodercontrol.cpp
@@ -50,7 +50,6 @@ QT_BEGIN_NAMESPACE
 
     \inmodule QtMultimedia
     \ingroup multimedia-serv
-    \since 1.0
 
     \brief The QVideoEncoderControl class provides access to the settings
     of a media service that performs video encoding.
@@ -98,14 +97,12 @@ QVideoEncoderControl::~QVideoEncoderControl()
     \fn QVideoEncoderControl::supportedVideoCodecs() const
 
     Returns the list of supported video codecs.
-    \since 1.0
 */
 
 /*!
     \fn QVideoEncoderControl::videoCodecDescription(const QString &codec) const
 
     Returns a description of a video \a codec.
-    \since 1.0
 */
 
 /*!
@@ -114,21 +111,18 @@ QVideoEncoderControl::~QVideoEncoderControl()
     Returns a list of supported encoding options for a video \a codec.
 
     The names and types of the options in the list is system dependent.
-    \since 1.0
 */
 
 /*!
     \fn QVideoEncoderControl::encodingOption(const QString &codec, const QString &option) const
 
     Returns the value of a video \a codec \a option.
-    \since 1.0
 */
 
 /*!
     \fn QVideoEncoderControl::setEncodingOption(const QString &codec, const QString &option, const QVariant &value)
 
     Sets the \a value of a \a codec specific \a option.
-    \since 1.0
 */
 
 /*!
@@ -145,7 +139,6 @@ QVideoEncoderControl::~QVideoEncoderControl()
     If the encoder supports arbitrary resolutions within the supported resolutions range,
     *\a continuous is set to true, otherwise *\a continuous is set to false.
 
-    \since 1.0
     \sa QVideoEncoderSettings::resolution()
 */
 
@@ -163,7 +156,6 @@ QVideoEncoderControl::~QVideoEncoderControl()
     If the encoder supports arbitrary frame rates within the supported range,
     *\a continuous is set to true, otherwise *\a continuous is set to false.
 
-    \since 1.0
     \sa QVideoEncoderSettings::frameRate()
 */
 
@@ -175,14 +167,12 @@ QVideoEncoderControl::~QVideoEncoderControl()
     The returned value may be different tha passed to QVideoEncoderControl::setVideoSettings()
     if the settings contains the default or undefined parameters.
     In this case if the undefined parameters are already resolved, they should be returned.
-    \since 1.0
 */
 
 /*!
     \fn QVideoEncoderControl::setVideoSettings(const QVideoEncoderSettings &settings)
 
     Sets the selected video encoder \a settings.
-    \since 1.0
 */
 
 #include "moc_qvideoencodercontrol.cpp"
diff --git a/src/multimedia/controls/qvideorenderercontrol.cpp b/src/multimedia/controls/qvideorenderercontrol.cpp
index e49045c..dafc2ad 100644
--- a/src/multimedia/controls/qvideorenderercontrol.cpp
+++ b/src/multimedia/controls/qvideorenderercontrol.cpp
@@ -54,7 +54,6 @@ QT_BEGIN_NAMESPACE
 
     \inmodule QtMultimedia
     \ingroup multimedia-serv
-    \since 1.0
 
     Using the surface() property of QVideoRendererControl a
     QAbstractVideoSurface may be set as the video render target of a
@@ -99,14 +98,12 @@ QVideoRendererControl::~QVideoRendererControl()
     \fn QVideoRendererControl::surface() const
 
     Returns the surface a video producer renders to.
-    \since 1.0
 */
 
 /*!
     \fn QVideoRendererControl::setSurface(QAbstractVideoSurface *surface)
 
     Sets the \a surface a video producer renders to.
-    \since 1.0
 */
 
 #include "moc_qvideorenderercontrol.cpp"
diff --git a/src/multimedia/imageviewer/qmediaimageviewer.cpp b/src/multimedia/imageviewer/qmediaimageviewer.cpp
index c832ba6..3fdf5fa 100644
--- a/src/multimedia/imageviewer/qmediaimageviewer.cpp
+++ b/src/multimedia/imageviewer/qmediaimageviewer.cpp
@@ -150,7 +150,6 @@ void QMediaImageViewerPrivate::_q_playlistDestroyed()
     \brief The QMediaImageViewer class provides a means of viewing image media.
     \inmodule QtMultimedia
     \ingroup multimedia
-    \since 1.0
 
 
     QMediaImageViewer is used together with a media display object such as
@@ -227,7 +226,6 @@ QMediaImageViewer::~QMediaImageViewer()
 /*!
     \property QMediaImageViewer::state
     \brief the playlist control state of a slide show.
-    \since 1.0
 */
 
 QMediaImageViewer::State QMediaImageViewer::state() const
@@ -239,13 +237,11 @@ QMediaImageViewer::State QMediaImageViewer::state() const
     \fn QMediaImageViewer::stateChanged(QMediaImageViewer::State state)
 
     Signals that the playlist control \a state of an image viewer has changed.
-    \since 1.0
 */
 
 /*!
     \property QMediaImageViewer::mediaStatus
     \brief the status of the current media.
-    \since 1.0
 */
 
 QMediaImageViewer::MediaStatus QMediaImageViewer::mediaStatus() const
@@ -257,13 +253,11 @@ QMediaImageViewer::MediaStatus QMediaImageViewer::mediaStatus() const
     \fn QMediaImageViewer::mediaStatusChanged(QMediaImageViewer::MediaStatus status)
 
     Signals the the \a status of the current media has changed.
-    \since 1.0
 */
 
 /*!
     \property QMediaImageViewer::media
     \brief the media an image viewer is presenting.
-    \since 1.0
 */
 
 QMediaContent QMediaImageViewer::media() const
@@ -304,7 +298,6 @@ void QMediaImageViewer::setMedia(const QMediaContent &media)
 
 /*!
   Use \a playlist as the source of images to be displayed in the viewer.
-  \since 1.0
 */
 void QMediaImageViewer::setPlaylist(QMediaPlaylist *playlist)
 {
@@ -335,7 +328,6 @@ void QMediaImageViewer::setPlaylist(QMediaPlaylist *playlist)
 
 /*!
   Returns the current playlist, or 0 if none.
-  \since 1.0
 */
 QMediaPlaylist *QMediaImageViewer::playlist() const
 {
@@ -346,7 +338,6 @@ QMediaPlaylist *QMediaImageViewer::playlist() const
     \fn QMediaImageViewer::mediaChanged(const QMediaContent &media)
 
     Signals that the \a media an image viewer is presenting has changed.
-    \since 1.0
 */
 
 /*!
@@ -355,7 +346,6 @@ QMediaPlaylist *QMediaImageViewer::playlist() const
     image.
 
     The timeout only applies if the image viewer has a playlist attached and is in the PlayingState.
-    \since 1.0
 */
 
 int QMediaImageViewer::timeout() const
@@ -379,7 +369,6 @@ void QMediaImageViewer::setTimeout(int timeout)
 
     The elapsed time only increases while the image viewer is in the PlayingState.  If stopped the
     elapsed time will be reset to 0.
-    \since 1.0
 */
 
 int QMediaImageViewer::elapsedTime() const
@@ -404,7 +393,6 @@ int QMediaImageViewer::elapsedTime() const
     in the PlayingState and an image is loaded.  The notification interval
     is controlled by the QMediaObject::notifyInterval property.
 
-    \since 1.0
     \sa timeout, QMediaObject::notifyInterval
 */
 
@@ -412,7 +400,6 @@ int QMediaImageViewer::elapsedTime() const
     Sets a video \a widget as the current video output.
 
     This will unbind any previous video output bound with setVideoOutput().
-    \since 1.1
 */
 
 void QMediaImageViewer::setVideoOutput(QVideoWidget *widget)
@@ -432,7 +419,6 @@ void QMediaImageViewer::setVideoOutput(QVideoWidget *widget)
     Sets a video \a item as the current video output.
 
     This will unbind any previous video output bound with setVideoOutput().
-    \since 1.1
 */
 
 void QMediaImageViewer::setVideoOutput(QGraphicsVideoItem *item)
@@ -454,7 +440,6 @@ void QMediaImageViewer::setVideoOutput(QGraphicsVideoItem *item)
 
     If a video output has already been set on the image viewer the new surface
     will replace it.
-    \since 1.2
 */
 
 void QMediaImageViewer::setVideoOutput(QAbstractVideoSurface *surface)
@@ -473,7 +458,6 @@ void QMediaImageViewer::setVideoOutput(QAbstractVideoSurface *surface)
 
 /*!
     \internal
-    \since 1.0
 */
 bool QMediaImageViewer::bind(QObject *object)
 {
@@ -488,7 +472,6 @@ bool QMediaImageViewer::bind(QObject *object)
 
 /*!
      \internal
-     \since 1.0
  */
 void QMediaImageViewer::unbind(QObject *object)
 {
@@ -505,7 +488,6 @@ void QMediaImageViewer::unbind(QObject *object)
     it will resume from the current media.
 
     If no playlist is attached to an image viewer this will do nothing.
-    \since 1.0
 */
 void QMediaImageViewer::play()
 {
@@ -539,7 +521,6 @@ void QMediaImageViewer::play()
 
     The current media and elapsed time are retained.  If resumed, the current image will be
     displayed for the remainder of the time out period before the next image is loaded.
-    \since 1.0
 */
 void QMediaImageViewer::pause()
 {
@@ -562,7 +543,6 @@ void QMediaImageViewer::pause()
 
     The current media is retained, but the elapsed time is discarded.  If resumed, the current
     image will be displayed for the full time out period before the next image is loaded.
-    \since 1.0
 */
 void QMediaImageViewer::stop()
 {
@@ -589,7 +569,6 @@ void QMediaImageViewer::stop()
     \reimp
 
     \internal
-    \since 1.0
 */
 void QMediaImageViewer::timerEvent(QTimerEvent *event)
 {
diff --git a/src/multimedia/imageviewer/qmediaimageviewerservice.cpp b/src/multimedia/imageviewer/qmediaimageviewerservice.cpp
index 83a8229..06b91b6 100644
--- a/src/multimedia/imageviewer/qmediaimageviewerservice.cpp
+++ b/src/multimedia/imageviewer/qmediaimageviewerservice.cpp
@@ -174,7 +174,6 @@ void QMediaImageViewerServicePrivate::clear()
 
 /*!
     \class QMediaImageViewerService
-    \since 1.0
     \internal
 */
 
@@ -402,7 +401,6 @@ void QMediaImageViewerControlPrivate::_q_headFinished()
 /*!
     \class QMediaImageViewerControl
     \internal
-    \since 1.1
 */
 QMediaImageViewerControl::QMediaImageViewerControl(QMediaImageViewerService *parent)
     : QMediaControl(*new QMediaImageViewerControlPrivate, parent)
@@ -422,7 +420,6 @@ QMediaImageViewerControl::~QMediaImageViewerControl()
 }
 
 /*!
-    \since 1.1
 */
 QMediaImageViewer::MediaStatus QMediaImageViewerControl::mediaStatus() const
 {
@@ -431,11 +428,9 @@ QMediaImageViewer::MediaStatus QMediaImageViewerControl::mediaStatus() const
 
 /*!
     \fn QMediaImageViewerControl::mediaStatusChanged(QMediaImageViewer::MediaStatus status);
-    \since 1.1
 */
 
 /*!
-    \since 1.1
 */
 void QMediaImageViewerControl::showMedia(const QMediaContent &media)
 {
diff --git a/src/multimedia/playback/qaudioendpointselector.cpp b/src/multimedia/playback/qaudioendpointselector.cpp
index d5808ea..0b448f9 100644
--- a/src/multimedia/playback/qaudioendpointselector.cpp
+++ b/src/multimedia/playback/qaudioendpointselector.cpp
@@ -49,7 +49,6 @@ QT_BEGIN_NAMESPACE
     \brief The QAudioEndpointSelector class provides an audio endpoint selector media control.
     \inmodule QtMultimedia
     \ingroup multimedia
-    \since 1.0
 
     The QAudioEndpointSelector class provides descriptions of the audio
     endpoints available on a system and allows one to be selected as the audio
@@ -90,49 +89,42 @@ QAudioEndpointSelector::~QAudioEndpointSelector()
     \fn QList<QString> QAudioEndpointSelector::availableEndpoints() const
 
     Returns a list of the names of the available audio endpoints.
-    \since 1.0
 */
 
 /*!
     \fn QString QAudioEndpointSelector::endpointDescription(const QString& name) const
 
     Returns the description of the endpoint \a name.
-    \since 1.0
 */
 
 /*!
     \fn QString QAudioEndpointSelector::defaultEndpoint() const
 
     Returns the name of the default audio endpoint.
-    \since 1.0
 */
 
 /*!
     \fn QString QAudioEndpointSelector::activeEndpoint() const
 
     Returns the name of the currently selected audio endpoint.
-    \since 1.0
 */
 
 /*!
     \fn QAudioEndpointSelector::setActiveEndpoint(const QString& name)
 
     Set the active audio endpoint to \a name.
-    \since 1.0
 */
 
 /*!
     \fn QAudioEndpointSelector::activeEndpointChanged(const QString& name)
 
     Signals that the audio endpoint has changed to \a name.
-    \since 1.0
 */
 
 /*!
     \fn QAudioEndpointSelector::availableEndpointsChanged()
 
     Signals that list of available endpoints has changed.
-    \since 1.0
 */
 
 #include "moc_qaudioendpointselector.cpp"
diff --git a/src/multimedia/playback/qmediacontent.cpp b/src/multimedia/playback/qmediacontent.cpp
index 798259c..76e2379 100644
--- a/src/multimedia/playback/qmediacontent.cpp
+++ b/src/multimedia/playback/qmediacontent.cpp
@@ -89,7 +89,6 @@ private:
 
     \inmodule QtMultimedia
     \ingroup multimedia
-    \since 1.0
 
     QMediaContent is used within the multimedia framework as the logical handle
     to media content.  A QMediaContent object is composed of one or more
@@ -112,7 +111,6 @@ QMediaContent::QMediaContent()
 
 /*!
     Constructs a media content with \a url providing a reference to the content.
-    \since 1.0
 */
 
 QMediaContent::QMediaContent(const QUrl &url):
@@ -126,7 +124,6 @@ QMediaContent::QMediaContent(const QUrl &url):
 
     This constructor can be used to reference media content via network protocols such as HTTP.
     This may include additional information required to obtain the resource, such as Cookies or HTTP headers.
-    \since 1.0
 */
 
 QMediaContent::QMediaContent(const QNetworkRequest &request):
@@ -137,7 +134,6 @@ QMediaContent::QMediaContent(const QNetworkRequest &request):
 
 /*!
     Constructs a media content with \a resource providing a reference to the content.
-    \since 1.0
 */
 
 QMediaContent::QMediaContent(const QMediaResource &resource):
@@ -148,7 +144,6 @@ QMediaContent::QMediaContent(const QMediaResource &resource):
 
 /*!
     Constructs a media content with \a resources providing a reference to the content.
-    \since 1.0
 */
 
 QMediaContent::QMediaContent(const QMediaResourceList &resources):
@@ -158,7 +153,6 @@ QMediaContent::QMediaContent(const QMediaResourceList &resources):
 
 /*!
     Constructs a copy of the media content \a other.
-    \since 1.0
 */
 
 QMediaContent::QMediaContent(const QMediaContent &other):
@@ -176,7 +170,6 @@ QMediaContent::~QMediaContent()
 
 /*!
     Assigns the value of \a other to this media content.
-    \since 1.0
 */
 
 QMediaContent& QMediaContent::operator=(const QMediaContent &other)
@@ -187,7 +180,6 @@ QMediaContent& QMediaContent::operator=(const QMediaContent &other)
 
 /*!
     Returns true if \a other is equivalent to this media content; false otherwise.
-    \since 1.0
 */
 
 bool QMediaContent::operator==(const QMediaContent &other) const
@@ -199,7 +191,6 @@ bool QMediaContent::operator==(const QMediaContent &other) const
 
 /*!
     Returns true if \a other is not equivalent to this media content; false otherwise.
-    \since 1.0
 */
 
 bool QMediaContent::operator!=(const QMediaContent &other) const
@@ -209,7 +200,6 @@ bool QMediaContent::operator!=(const QMediaContent &other) const
 
 /*!
     Returns true if this media content is null (uninitialized); false otherwise.
-    \since 1.0
 */
 
 bool QMediaContent::isNull() const
@@ -219,7 +209,6 @@ bool QMediaContent::isNull() const
 
 /*!
     Returns a QUrl that represents that canonical resource for this media content.
-    \since 1.0
 */
 
 QUrl QMediaContent::canonicalUrl() const
@@ -229,7 +218,6 @@ QUrl QMediaContent::canonicalUrl() const
 
 /*!
     Returns a QNetworkRequest that represents that canonical resource for this media content.
-    \since 1.0
 */
 
 QNetworkRequest QMediaContent::canonicalRequest() const
@@ -239,7 +227,6 @@ QNetworkRequest QMediaContent::canonicalRequest() const
 
 /*!
     Returns a QMediaResource that represents that canonical resource for this media content.
-    \since 1.0
 */
 
 QMediaResource QMediaContent::canonicalResource() const
@@ -252,7 +239,6 @@ QMediaResource QMediaContent::canonicalResource() const
 /*!
     Returns a list of alternative resources for this media content.  The first item in this list
     is always the canonical resource.
-    \since 1.0
 */
 
 QMediaResourceList QMediaContent::resources() const
diff --git a/src/multimedia/playback/qmediaplayer.cpp b/src/multimedia/playback/qmediaplayer.cpp
index eac1e84..49f2e11 100644
--- a/src/multimedia/playback/qmediaplayer.cpp
+++ b/src/multimedia/playback/qmediaplayer.cpp
@@ -65,7 +65,6 @@ QT_BEGIN_NAMESPACE
     \brief The QMediaPlayer class allows the playing of a media source.
     \inmodule QtMultimedia
     \ingroup multimedia
-    \since 1.0
 
 
 
@@ -265,7 +264,6 @@ static QMediaService *playerService(QMediaPlayer::Flags flags, QMediaServiceProv
     parented to \a parent and with \a flags.
 
     If a playback service is not specified the system default will be used.
-    \since 1.0
 */
 
 QMediaPlayer::QMediaPlayer(QObject *parent, QMediaPlayer::Flags flags, QMediaServiceProvider *provider):
@@ -345,7 +343,6 @@ QMediaContent QMediaPlayer::media() const
 
     This is only valid if a stream was passed to setMedia().
 
-    \since 1.0
     \sa setMedia()
 */
 
@@ -407,7 +404,6 @@ void QMediaPlayer::setPlaylist(QMediaPlaylist *playlist)
     configuration  that can be used for network access.
 
     This will invalidate the choice of previous configurations.
-    \since 1.2
 */
 void QMediaPlayer::setNetworkConfigurations(const QList<QNetworkConfiguration> &configurations)
 {
@@ -524,7 +520,6 @@ qreal QMediaPlayer::playbackRate() const
 
 /*!
     Returns the current error state.
-    \since 1.0
 */
 
 QMediaPlayer::Error QMediaPlayer::error() const
@@ -542,7 +537,6 @@ QString QMediaPlayer::errorString() const
     If a default contructed QNetworkConfiguration is returned
     this feature is not available or that none of the
     current supplied configurations are in use.
-    \since 1.2
 */
 QNetworkConfiguration QMediaPlayer::currentNetworkConfiguration() const
 {
@@ -557,7 +551,6 @@ QNetworkConfiguration QMediaPlayer::currentNetworkConfiguration() const
 //public Q_SLOTS:
 /*!
     Start or resume playing the current source.
-    \since 1.0
 */
 
 void QMediaPlayer::play()
@@ -584,7 +577,6 @@ void QMediaPlayer::play()
 
 /*!
     Pause playing the current source.
-    \since 1.0
 */
 
 void QMediaPlayer::pause()
@@ -597,7 +589,6 @@ void QMediaPlayer::pause()
 
 /*!
     Stop playing, and reset the play position to the beginning.
-    \since 1.0
 */
 
 void QMediaPlayer::stop()
@@ -660,7 +651,6 @@ void QMediaPlayer::setPlaybackRate(qreal rate)
     Setting the media to a null QMediaContent will cause the player to discard all
     information relating to the current media source and to cease all I/O operations related
     to that media.
-    \since 1.0
 */
 
 void QMediaPlayer::setMedia(const QMediaContent &media, QIODevice *stream)
@@ -676,7 +666,6 @@ void QMediaPlayer::setMedia(const QMediaContent &media, QIODevice *stream)
 
 /*!
     \internal
-    \since 1.0
 */
 
 bool QMediaPlayer::bind(QObject *obj)
@@ -686,7 +675,6 @@ bool QMediaPlayer::bind(QObject *obj)
 
 /*!
     \internal
-    \since 1.0
 */
 
 void QMediaPlayer::unbind(QObject *obj)
@@ -699,7 +687,6 @@ void QMediaPlayer::unbind(QObject *obj)
 
     The \a flags argument allows additional requirements such as performance indicators to be
     specified.
-    \since 1.0
 */
 QtMultimedia::SupportEstimate QMediaPlayer::hasSupport(const QString &mimeType,
                                                const QStringList& codecs,
@@ -722,7 +709,6 @@ QtMultimedia::SupportEstimate QMediaPlayer::hasSupport(const QString &mimeType,
     given mime type is not guaranteed even if the mime type is in general supported.  In addition, in some
     cases this function will need to load all available media plugins and query them for their support, which
     may take some time.
-    \since 1.0
 */
 QStringList QMediaPlayer::supportedMimeTypes(Flags flags)
 {
@@ -737,7 +723,6 @@ QStringList QMediaPlayer::supportedMimeTypes(Flags flags)
 
     If the media player has already video output attached,
     it will be replaced with a new one.
-    \since 1.0
 */
 void QMediaPlayer::setVideoOutput(QVideoWidget *output)
 {
@@ -759,7 +744,6 @@ void QMediaPlayer::setVideoOutput(QVideoWidget *output)
 
     If the media player has already video output attached,
     it will be replaced with a new one.
-    \since 1.0
 */
 void QMediaPlayer::setVideoOutput(QGraphicsVideoItem *output)
 {
@@ -780,7 +764,6 @@ void QMediaPlayer::setVideoOutput(QGraphicsVideoItem *output)
 
     If a video output has already been set on the media player the new surface
     will replace it.
-    \since 1.2
 */
 
 void QMediaPlayer::setVideoOutput(QAbstractVideoSurface *surface)
@@ -850,14 +833,12 @@ void QMediaPlayer::setVideoOutput(QAbstractVideoSurface *surface)
 
     Signals that an \a error condition has occurred.
 
-    \since 1.0
     \sa errorString()
 */
 
 /*!
     \fn void QMediaPlayer::stateChanged(State state)
 
-    \since 1.0
     Signal the \a state of the Player object has changed.
 */
 
@@ -866,7 +847,6 @@ void QMediaPlayer::setVideoOutput(QAbstractVideoSurface *surface)
 
     Signals that the \a status of the current media has changed.
 
-    \since 1.0
     \sa mediaStatus()
 */
 
@@ -875,7 +855,6 @@ void QMediaPlayer::setVideoOutput(QAbstractVideoSurface *surface)
 
     Signals that the current playing content will be obtained from \a media.
 
-    \since 1.0
     \sa media()
 */
 
@@ -883,14 +862,12 @@ void QMediaPlayer::setVideoOutput(QAbstractVideoSurface *surface)
     \fn void QMediaPlayer::playbackRateChanged(qreal rate);
 
     Signals the playbackRate has changed to \a rate.
-    \since 1.0
 */
 
 /*!
     \fn void QMediaPlayer::seekableChanged(bool seekable);
 
     Signals the \a seekable status of the player object has changed.
-    \since 1.0
 */
 
 // Properties
@@ -900,7 +877,6 @@ void QMediaPlayer::setVideoOutput(QAbstractVideoSurface *surface)
 
     By default this property is QMediaPlayer::Stopped
 
-    \since 1.0
     \sa mediaStatus(), play(), pause(), stop()
 */
 
@@ -908,7 +884,6 @@ void QMediaPlayer::setVideoOutput(QAbstractVideoSurface *surface)
     \property QMediaPlayer::error
     \brief a string describing the last error condition.
 
-    \since 1.0
     \sa error()
 */
 
@@ -925,7 +900,6 @@ void QMediaPlayer::setVideoOutput(QAbstractVideoSurface *surface)
     information relating to the current media source and to cease all I/O operations related
     to that media.
 
-    \since 1.0
     \sa QMediaContent
 */
 
@@ -943,7 +917,6 @@ void QMediaPlayer::setVideoOutput(QAbstractVideoSurface *surface)
     QMediaPlaylist::setCurrentIndex(int) instead of QMediaPlayer::setMedia(),
     otherwise the current playlist will be discarded.
 
-    \since 1.0
     \sa QMediaContent
 */
 
@@ -957,7 +930,6 @@ void QMediaPlayer::setVideoOutput(QAbstractVideoSurface *surface)
 
     By default this property is QMediaPlayer::NoMedia
 
-    \since 1.0
     \sa state
 */
 
@@ -969,7 +941,6 @@ void QMediaPlayer::setVideoOutput(QAbstractVideoSurface *surface)
     The value may change across the life time of the QMediaPlayer object and
     may not be available when initial playback begins, connect to the
     durationChanged() signal to receive status notifications.
-    \since 1.0
 */
 
 /*!
@@ -980,7 +951,6 @@ void QMediaPlayer::setVideoOutput(QAbstractVideoSurface *surface)
     the beginning of the media. Periodically changes in the position will be
     indicated with the signal positionChanged(), the interval between updates
     can be set with QMediaObject's method setNotifyInterval().
-    \since 1.0
 */
 
 /*!
@@ -989,7 +959,6 @@ void QMediaPlayer::setVideoOutput(QAbstractVideoSurface *surface)
 
     The playback volume is a linear in effect and the value can range from 0 -
     100, values outside this range will be clamped.
-    \since 1.0
 */
 
 /*!
@@ -997,7 +966,6 @@ void QMediaPlayer::setVideoOutput(QAbstractVideoSurface *surface)
     \brief the muted state of the current media.
 
     The value will be true if the playback volume is muted; otherwise false.
-    \since 1.0
 */
 
 /*!
@@ -1009,7 +977,6 @@ void QMediaPlayer::setVideoOutput(QAbstractVideoSurface *surface)
     filled before playback can resume, at which time the MediaStatus will be
     BufferedMedia.
 
-    \since 1.0
     \sa mediaStatus()
 */
 
@@ -1020,7 +987,6 @@ void QMediaPlayer::setVideoOutput(QAbstractVideoSurface *surface)
     As the life time of QMediaPlayer can be longer than the playback of one
     QMediaContent, this property may change over time, the
     audioAvailableChanged signal can be used to monitor it's status.
-    \since 1.0
 */
 
 /*!
@@ -1032,7 +998,6 @@ void QMediaPlayer::setVideoOutput(QAbstractVideoSurface *surface)
     QMediaContent, this property may change over time, the
     videoAvailableChanged signal can be used to monitor it's status.
 
-    \since 1.0
     \sa QVideoWidget, QMediaContent
 */
 
@@ -1043,7 +1008,6 @@ void QMediaPlayer::setVideoOutput(QAbstractVideoSurface *surface)
     If seeking is supported this property will be true; false otherwise. The
     status of this property may change across the life time of the QMediaPlayer
     object, use the seekableChanged signal to monitor changes.
-    \since 1.0
 */
 
 /*!
@@ -1059,14 +1023,12 @@ void QMediaPlayer::setVideoOutput(QAbstractVideoSurface *surface)
     Not all playback services support change of the playback rate. It is
     framework defined as to the status and quality of audio and video
     while fast forwarding or rewinding.
-    \since 1.0
 */
 
 /*!
     \fn void QMediaPlayer::durationChanged(qint64 duration)
 
     Signal the duration of the content has changed to \a duration, expressed in milliseconds.
-    \since 1.0
 */
 
 /*!
@@ -1074,49 +1036,42 @@ void QMediaPlayer::setVideoOutput(QAbstractVideoSurface *surface)
 
     Signal the position of the content has changed to \a position, expressed in
     milliseconds.
-    \since 1.0
 */
 
 /*!
     \fn void QMediaPlayer::volumeChanged(int volume)
 
     Signal the playback volume has changed to \a volume.
-    \since 1.0
 */
 
 /*!
     \fn void QMediaPlayer::mutedChanged(bool muted)
 
     Signal the mute state has changed to \a muted.
-    \since 1.0
 */
 
 /*!
     \fn void QMediaPlayer::videoAvailableChanged(bool videoAvailable)
 
     Signal the availability of visual content has changed to \a videoAvailable.
-    \since 1.0
 */
 
 /*!
     \fn void QMediaPlayer::audioAvailableChanged(bool available)
 
     Signals the availability of audio content has changed to \a available.
-    \since 1.0
 */
 
 /*!
     \fn void QMediaPlayer::bufferStatusChanged(int percentFilled)
 
     Signal the amount of the local buffer filled as a percentage by \a percentFilled.
-    \since 1.0
 */
 
 /*!
    \fn void QMediaPlayer::networkConfigurationChanged(const QNetworkConfiguration &configuration)
 
     Signal that the active in use network access point  has been changed to \a configuration and all subsequent network access will use this \a configuration.
-    \since 1.2
 */
 
 /*!
diff --git a/src/multimedia/playback/qmediaplaylist.cpp b/src/multimedia/playback/qmediaplaylist.cpp
index d8a7db5..bc28576 100644
--- a/src/multimedia/playback/qmediaplaylist.cpp
+++ b/src/multimedia/playback/qmediaplaylist.cpp
@@ -79,7 +79,6 @@ namespace
     \class QMediaPlaylist
     \inmodule QtMultimedia
     \ingroup multimedia
-    \since 1.0
 
 
     \brief The QMediaPlaylist class provides a list of media content to play.
@@ -151,7 +150,6 @@ QMediaPlaylist::~QMediaPlaylist()
 /*!
   Returns the QMediaObject instance that this QMediaPlaylist is bound too,
   or 0 otherwise.
-  \since 1.0
 */
 QMediaObject *QMediaPlaylist::mediaObject() const
 {
@@ -162,7 +160,6 @@ QMediaObject *QMediaPlaylist::mediaObject() const
   \internal
   If \a mediaObject is null or doesn't have an intrinsic playlist,
   internal local memory playlist source will be created.
-  \since 1.0
 */
 bool QMediaPlaylist::setMediaObject(QMediaObject *mediaObject)
 {
@@ -248,7 +245,6 @@ bool QMediaPlaylist::setMediaObject(QMediaObject *mediaObject)
 
   This property defines the order, items in playlist are played.
 
-  \since 1.0
   \sa QMediaPlaylist::PlaybackMode
 */
 
@@ -265,7 +261,6 @@ void QMediaPlaylist::setPlaybackMode(QMediaPlaylist::PlaybackMode mode)
 
 /*!
   Returns position of the current media content in the playlist.
-  \since 1.0
 */
 int QMediaPlaylist::currentIndex() const
 {
@@ -274,7 +269,6 @@ int QMediaPlaylist::currentIndex() const
 
 /*!
   Returns the current media content.
-  \since 1.0
 */
 
 QMediaContent QMediaPlaylist::currentMedia() const
@@ -289,7 +283,6 @@ QMediaContent QMediaPlaylist::currentMedia() const
   Returned value depends on the size of playlist, current position
   and playback mode.
 
-  \since 1.0
   \sa QMediaPlaylist::playbackMode
 */
 int QMediaPlaylist::nextIndex(int steps) const
@@ -301,7 +294,6 @@ int QMediaPlaylist::nextIndex(int steps) const
   Returns the index of the item, which would be current after calling previous()
   \a steps times.
 
-  \since 1.0
   \sa QMediaPlaylist::playbackMode
 */
 
@@ -314,7 +306,6 @@ int QMediaPlaylist::previousIndex(int steps) const
 /*!
   Returns the number of items in the playlist.
 
-  \since 1.0
   \sa isEmpty()
   */
 int QMediaPlaylist::mediaCount() const
@@ -325,7 +316,6 @@ int QMediaPlaylist::mediaCount() const
 /*!
   Returns true if the playlist contains no items; otherwise returns false.
 
-  \since 1.0
   \sa mediaCount()
   */
 bool QMediaPlaylist::isEmpty() const
@@ -336,7 +326,6 @@ bool QMediaPlaylist::isEmpty() const
 /*!
   Returns true if the playlist can be modified; otherwise returns false.
 
-  \since 1.0
   \sa mediaCount()
   */
 bool QMediaPlaylist::isReadOnly() const
@@ -346,7 +335,6 @@ bool QMediaPlaylist::isReadOnly() const
 
 /*!
   Returns the media content at \a index in the playlist.
-  \since 1.0
 */
 
 QMediaContent QMediaPlaylist::media(int index) const
@@ -358,7 +346,6 @@ QMediaContent QMediaPlaylist::media(int index) const
   Append the media \a content to the playlist.
 
   Returns true if the operation is successful, otherwise return false.
-  \since 1.0
   */
 bool QMediaPlaylist::addMedia(const QMediaContent &content)
 {
@@ -369,7 +356,6 @@ bool QMediaPlaylist::addMedia(const QMediaContent &content)
   Append multiple media content \a items to the playlist.
 
   Returns true if the operation is successful, otherwise return false.
-  \since 1.0
   */
 bool QMediaPlaylist::addMedia(const QList<QMediaContent> &items)
 {
@@ -380,7 +366,6 @@ bool QMediaPlaylist::addMedia(const QList<QMediaContent> &items)
   Insert the media \a content to the playlist at position \a pos.
 
   Returns true if the operation is successful, otherwise false.
-  \since 1.0
 */
 
 bool QMediaPlaylist::insertMedia(int pos, const QMediaContent &content)
@@ -392,7 +377,6 @@ bool QMediaPlaylist::insertMedia(int pos, const QMediaContent &content)
   Insert multiple media content \a items to the playlist at position \a pos.
 
   Returns true if the operation is successful, otherwise false.
-  \since 1.0
 */
 
 bool QMediaPlaylist::insertMedia(int pos, const QList<QMediaContent> &items)
@@ -404,7 +388,6 @@ bool QMediaPlaylist::insertMedia(int pos, const QList<QMediaContent> &items)
   Remove the item from the playlist at position \a pos.
 
   Returns true if the operation is successful, otherwise return false.
-  \since 1.0
   */
 bool QMediaPlaylist::removeMedia(int pos)
 {
@@ -416,7 +399,6 @@ bool QMediaPlaylist::removeMedia(int pos)
   Remove items in the playlist from \a start to \a end inclusive.
 
   Returns true if the operation is successful, otherwise return false.
-  \since 1.0
   */
 bool QMediaPlaylist::removeMedia(int start, int end)
 {
@@ -428,7 +410,6 @@ bool QMediaPlaylist::removeMedia(int start, int end)
   Remove all the items from the playlist.
 
   Returns true if the operation is successful, otherwise return false.
-  \since 1.0
   */
 bool QMediaPlaylist::clear()
 {
@@ -462,7 +443,6 @@ bool QMediaPlaylistPrivate::writeItems(QMediaPlaylistWriter *writer)
 
   QMediaPlaylist::loaded() signal is emitted if playlist was loaded successfully,
   otherwise the playlist emits loadFailed().
-  \since 1.0
 */
 void QMediaPlaylist::load(const QUrl &location, const char *format)
 {
@@ -509,7 +489,6 @@ void QMediaPlaylist::load(const QUrl &location, const char *format)
 
   QMediaPlaylist::loaded() signal is emitted if playlist was loaded successfully,
   otherwise the playlist emits loadFailed().
-  \since 1.0
 */
 void QMediaPlaylist::load(QIODevice * device, const char *format)
 {
@@ -553,7 +532,6 @@ void QMediaPlaylist::load(QIODevice * device, const char *format)
   otherwise format is guessed from location name.
 
   Returns true if playlist was saved successfully, otherwise returns false.
-  \since 1.0
   */
 bool QMediaPlaylist::save(const QUrl &location, const char *format)
 {
@@ -580,7 +558,6 @@ bool QMediaPlaylist::save(const QUrl &location, const char *format)
   Save playlist to QIODevice \a device using format \a format.
 
   Returns true if playlist was saved successfully, otherwise returns false.
-  \since 1.0
 */
 bool QMediaPlaylist::save(QIODevice * device, const char *format)
 {
@@ -612,7 +589,6 @@ bool QMediaPlaylist::save(QIODevice * device, const char *format)
 
 /*!
     Returns the last error condition.
-    \since 1.0
 */
 QMediaPlaylist::Error QMediaPlaylist::error() const
 {
@@ -621,7 +597,6 @@ QMediaPlaylist::Error QMediaPlaylist::error() const
 
 /*!
     Returns the string describing the last error condition.
-    \since 1.0
 */
 QString QMediaPlaylist::errorString() const
 {
@@ -630,7 +605,6 @@ QString QMediaPlaylist::errorString() const
 
 /*!
   Shuffle items in the playlist.
-  \since 1.0
 */
 void QMediaPlaylist::shuffle()
 {
@@ -640,7 +614,6 @@ void QMediaPlaylist::shuffle()
 
 /*!
     Advance to the next media content in playlist.
-    \since 1.0
 */
 void QMediaPlaylist::next()
 {
@@ -649,7 +622,6 @@ void QMediaPlaylist::next()
 
 /*!
     Return to the previous media content in playlist.
-    \since 1.0
 */
 void QMediaPlaylist::previous()
 {
@@ -658,7 +630,6 @@ void QMediaPlaylist::previous()
 
 /*!
     Activate media content from playlist at position \a playlistPosition.
-    \since 1.0
 */
 
 void QMediaPlaylist::setCurrentIndex(int playlistPosition)
@@ -671,7 +642,6 @@ void QMediaPlaylist::setCurrentIndex(int playlistPosition)
 
     This signal is emitted after media has been inserted into the playlist.
     The new items are those between \a start and \a end inclusive.
-    \since 1.0
  */
 
 /*!
@@ -679,7 +649,6 @@ void QMediaPlaylist::setCurrentIndex(int playlistPosition)
 
     This signal is emitted after media has been removed from the playlist.
     The removed items are those between \a start and \a end inclusive.
-    \since 1.0
  */
 
 /*!
@@ -687,68 +656,58 @@ void QMediaPlaylist::setCurrentIndex(int playlistPosition)
 
     This signal is emitted after media has been changed in the playlist
     between \a start and \a end positions inclusive.
-    \since 1.0
  */
 
 /*!
     \fn void QMediaPlaylist::currentIndexChanged(int position)
 
     Signal emitted when playlist position changed to \a position.
-    \since 1.0
 */
 
 /*!
     \fn void QMediaPlaylist::playbackModeChanged(QMediaPlaylist::PlaybackMode mode)
 
     Signal emitted when playback mode changed to \a mode.
-    \since 1.0
 */
 
 /*!
     \fn void QMediaPlaylist::mediaAboutToBeInserted(int start, int end)
 
     Signal emitted when items are to be inserted at \a start and ending at \a end.
-    \since 1.0
 */
 
 /*!
     \fn void QMediaPlaylist::mediaAboutToBeRemoved(int start, int end)
 
     Signal emitted when item are to be deleted at \a start and ending at \a end.
-    \since 1.0
 */
 
 /*!
     \fn void QMediaPlaylist::currentMediaChanged(const QMediaContent &content)
 
     Signal emitted when current media changes to \a content.
-    \since 1.0
 */
 
 /*!
     \property QMediaPlaylist::currentIndex
     \brief Current position.
-    \since 1.0
 */
 
 /*!
     \property QMediaPlaylist::currentMedia
     \brief Current media content.
-    \since 1.0
 */
 
 /*!
     \fn QMediaPlaylist::loaded()
 
     Signal emitted when playlist finished loading.
-    \since 1.0
 */
 
 /*!
     \fn QMediaPlaylist::loadFailed()
 
     Signal emitted if failed to load playlist.
-    \since 1.0
 */
 
 /*!
diff --git a/src/multimedia/playback/qmediaplaylistioplugin.cpp b/src/multimedia/playback/qmediaplaylistioplugin.cpp
index 948c007..228a5a7 100644
--- a/src/multimedia/playback/qmediaplaylistioplugin.cpp
+++ b/src/multimedia/playback/qmediaplaylistioplugin.cpp
@@ -48,7 +48,6 @@ QT_BEGIN_NAMESPACE
 
     \brief The QMediaPlaylistReader class provides an interface for reading a playlist file.
     \inmodule QtMultimedia
-    \since 1.0
 
     \sa QMediaPlaylistIOPlugin
 */
@@ -66,7 +65,6 @@ QMediaPlaylistReader::~QMediaPlaylistReader()
     Identifies if a playlist reader has reached the end of its input.
 
     Returns true if the reader has reached the end; and false otherwise.
-    \since 1.0
 */
 
 /*!
@@ -75,14 +73,12 @@ QMediaPlaylistReader::~QMediaPlaylistReader()
     Reads an item of media from a playlist file.
 
     Returns the read media, or a null QMediaContent if no more media is available.
-    \since 1.0
 */
 
 /*!
     \fn QMediaPlaylistReader::close()
 
     Closes a playlist reader's input device.
-    \since 1.0
 */
 
 /*!
@@ -90,7 +86,6 @@ QMediaPlaylistReader::~QMediaPlaylistReader()
 
     \brief The QMediaPlaylistWriter class provides an interface for writing a playlist file.
 
-    \since 1.0
     \sa QMediaPlaylistIOPlugin
 */
 
@@ -107,20 +102,17 @@ QMediaPlaylistWriter::~QMediaPlaylistWriter()
     Writes an item of \a media to a playlist file.
 
     Returns true if the media was written successfully; and false otherwise.
-    \since 1.0
 */
 
 /*!
     \fn QMediaPlaylistWriter::close()
 
     Finalizes the writing of a playlist and closes the output device.
-    \since 1.0
 */
 
 /*!
     \class QMediaPlaylistIOPlugin
     \brief The QMediaPlaylistIOPlugin class provides an interface for media playlist I/O plug-ins.
-    \since 1.0
 */
 
 /*!
@@ -144,7 +136,6 @@ QMediaPlaylistIOPlugin::~QMediaPlaylistIOPlugin()
     Identifies if plug-in can read \a format data from an I/O \a device.
 
     Returns true if the data can be read; and false otherwise.
-    \since 1.0
 */
 
 /*!
@@ -153,7 +144,6 @@ QMediaPlaylistIOPlugin::~QMediaPlaylistIOPlugin()
     Identifies if a plug-in can read \a format data from a URL \a location.
 
     Returns true if the data can be read; and false otherwise.
-    \since 1.0
 */
 
 /*!
@@ -162,14 +152,12 @@ QMediaPlaylistIOPlugin::~QMediaPlaylistIOPlugin()
     Identifies if a plug-in can write \a format data to an I/O \a device.
 
     Returns true if the data can be written; and false otherwise.
-    \since 1.0
 */
 
 /*!
     \fn QMediaPlaylistIOPlugin::keys() const
 
     Returns a list of format keys supported by a plug-in.
-    \since 1.0
 */
 
 /*!
@@ -178,7 +166,6 @@ QMediaPlaylistIOPlugin::~QMediaPlaylistIOPlugin()
     Returns a new QMediaPlaylistReader which reads \a format data from an I/O \a device.
 
     If the device is invalid or the format is unsupported this will return a null pointer.
-    \since 1.0
 */
 
 /*!
@@ -187,7 +174,6 @@ QMediaPlaylistIOPlugin::~QMediaPlaylistIOPlugin()
     Returns a new QMediaPlaylistReader which reads \a format data from a URL \a location.
 
     If the location or the format is unsupported this will return a null pointer.
-    \since 1.0
 */
 
 /*!
@@ -196,7 +182,6 @@ QMediaPlaylistIOPlugin::~QMediaPlaylistIOPlugin()
     Returns a new QMediaPlaylistWriter which writes \a format data to an I/O \a device.
 
     If the device is invalid or the format is unsupported this will return a null pointer.
-    \since 1.0
 */
 
 #include "moc_qmediaplaylistioplugin.cpp"
diff --git a/src/multimedia/playback/qmediaplaylistnavigator.cpp b/src/multimedia/playback/qmediaplaylistnavigator.cpp
index 2fbbef8..85dc68f 100644
--- a/src/multimedia/playback/qmediaplaylistnavigator.cpp
+++ b/src/multimedia/playback/qmediaplaylistnavigator.cpp
@@ -196,7 +196,6 @@ int QMediaPlaylistNavigatorPrivate::previousItemPos(int steps) const
     \brief The QMediaPlaylistNavigator class provides navigation for a media playlist.
     \inmodule QtMultimedia
     \ingroup multimedia
-    \since 1.0
 
     \sa QMediaPlaylist, QMediaPlaylistProvider
 */
@@ -206,7 +205,6 @@ int QMediaPlaylistNavigatorPrivate::previousItemPos(int steps) const
     Constructs a media playlist navigator for a \a playlist.
 
     The \a parent is passed to QObject.
-    \since 1.0
  */
 QMediaPlaylistNavigator::QMediaPlaylistNavigator(QMediaPlaylistProvider *playlist, QObject *parent)
     : QObject(parent)
@@ -229,7 +227,6 @@ QMediaPlaylistNavigator::~QMediaPlaylistNavigator()
 
 /*! \property QMediaPlaylistNavigator::playbackMode
     Contains the playback mode.
-    \since 1.0
  */
 QMediaPlaylist::PlaybackMode QMediaPlaylistNavigator::playbackMode() const
 {
@@ -238,7 +235,6 @@ QMediaPlaylist::PlaybackMode QMediaPlaylistNavigator::playbackMode() const
 
 /*!
     Sets the playback \a mode.
-    \since 1.0
  */
 void QMediaPlaylistNavigator::setPlaybackMode(QMediaPlaylist::PlaybackMode mode)
 {
@@ -262,7 +258,6 @@ void QMediaPlaylistNavigator::setPlaybackMode(QMediaPlaylist::PlaybackMode mode)
 
 /*!
     Returns the playlist being navigated.
-    \since 1.0
 */
 
 QMediaPlaylistProvider *QMediaPlaylistNavigator::playlist() const
@@ -272,7 +267,6 @@ QMediaPlaylistProvider *QMediaPlaylistNavigator::playlist() const
 
 /*!
     Sets the \a playlist to navigate.
-    \since 1.0
 */
 void QMediaPlaylistNavigator::setPlaylist(QMediaPlaylistProvider *playlist)
 {
@@ -314,7 +308,6 @@ void QMediaPlaylistNavigator::setPlaylist(QMediaPlaylistProvider *playlist)
 
   Contains the media at the current position in the playlist.
 
-  \since 1.0
   \sa currentIndex()
 */
 
@@ -328,7 +321,6 @@ QMediaContent QMediaPlaylistNavigator::currentItem() const
   Returns the media that is \a steps positions ahead of the current
   position in the playlist.
 
-  \since 1.0
   \sa nextIndex()
 */
 QMediaContent QMediaPlaylistNavigator::nextItem(int steps) const
@@ -340,7 +332,6 @@ QMediaContent QMediaPlaylistNavigator::nextItem(int steps) const
   Returns the media that is \a steps positions behind the current
   position in the playlist.
 
-  \since 1.0
   \sa previousIndex()
  */
 QMediaContent QMediaPlaylistNavigator::previousItem(int steps) const
@@ -350,7 +341,6 @@ QMediaContent QMediaPlaylistNavigator::previousItem(int steps) const
 
 /*!
     Returns the media at a \a position in the playlist.
-    \since 1.0
  */
 QMediaContent QMediaPlaylistNavigator::itemAt(int position) const
 {
@@ -363,7 +353,6 @@ QMediaContent QMediaPlaylistNavigator::itemAt(int position) const
 
   If no media is current, the property contains -1.
 
-  \since 1.0
   \sa nextIndex(), previousIndex()
 */
 
@@ -379,7 +368,6 @@ int QMediaPlaylistNavigator::currentIndex() const
   If the position is beyond the end of the playlist, this value
   returned is -1.
 
-  \since 1.0
   \sa currentIndex(), previousIndex(), playbackMode()
 */
 
@@ -396,7 +384,6 @@ int QMediaPlaylistNavigator::nextIndex(int steps) const
   If the position is prior to the beginning of the playlist this will
   return -1.
 
-  \since 1.0
   \sa currentIndex(), nextIndex(), playbackMode()
 */
 int QMediaPlaylistNavigator::previousIndex(int steps) const
@@ -407,7 +394,6 @@ int QMediaPlaylistNavigator::previousIndex(int steps) const
 /*!
   Advances to the next item in the playlist.
 
-  \since 1.0
   \sa previous(), jump(), playbackMode()
  */
 void QMediaPlaylistNavigator::next()
@@ -425,7 +411,6 @@ void QMediaPlaylistNavigator::next()
 /*!
   Returns to the previous item in the playlist,
 
-  \since 1.0
   \sa next(), jump(), playbackMode()
  */
 void QMediaPlaylistNavigator::previous()
@@ -441,7 +426,6 @@ void QMediaPlaylistNavigator::previous()
 
 /*!
   Jumps to a new \a position in the playlist.
-  \since 1.0
  */
 void QMediaPlaylistNavigator::jump(int position)
 {
@@ -479,7 +463,6 @@ void QMediaPlaylistNavigator::jump(int position)
 
 /*!
     \internal
-  \since 1.0
 */
 void QMediaPlaylistNavigatorPrivate::_q_mediaInserted(int start, int end)
 {
@@ -496,7 +479,6 @@ void QMediaPlaylistNavigatorPrivate::_q_mediaInserted(int start, int end)
 
 /*!
     \internal
-    \since 1.0
 */
 void QMediaPlaylistNavigatorPrivate::_q_mediaRemoved(int start, int end)
 {
@@ -517,7 +499,6 @@ void QMediaPlaylistNavigatorPrivate::_q_mediaRemoved(int start, int end)
 
 /*!
     \internal
-    \since 1.0
 */
 void QMediaPlaylistNavigatorPrivate::_q_mediaChanged(int start, int end)
 {
@@ -539,28 +520,24 @@ void QMediaPlaylistNavigatorPrivate::_q_mediaChanged(int start, int end)
     \fn QMediaPlaylistNavigator::activated(const QMediaContent &media)
 
     Signals that the current \a media has changed.
-    \since 1.0
 */
 
 /*!
     \fn QMediaPlaylistNavigator::currentIndexChanged(int position)
 
     Signals the \a position of the current media has changed.
-    \since 1.0
 */
 
 /*!
     \fn QMediaPlaylistNavigator::playbackModeChanged(QMediaPlaylist::PlaybackMode mode)
 
     Signals that the playback \a mode has changed.
-    \since 1.0
 */
 
 /*!
     \fn QMediaPlaylistNavigator::surroundingItemsChanged()
 
     Signals that media immediately surrounding the current position has changed.
-    \since 1.0
 */
 
 #include "moc_qmediaplaylistnavigator.cpp"
diff --git a/src/multimedia/playback/qmediaplaylistprovider.cpp b/src/multimedia/playback/qmediaplaylistprovider.cpp
index 50d8a67..fac0eff 100644
--- a/src/multimedia/playback/qmediaplaylistprovider.cpp
+++ b/src/multimedia/playback/qmediaplaylistprovider.cpp
@@ -51,7 +51,6 @@ QT_BEGIN_NAMESPACE
 
     \brief The QMediaPlaylistProvider class provides an abstract list of media.
     \inmodule QtMultimedia
-    \since 1.0
 
     \sa QMediaPlaylist
 */
@@ -84,7 +83,6 @@ QMediaPlaylistProvider::~QMediaPlaylistProvider()
     \fn QMediaPlaylistProvider::mediaCount() const;
 
     Returns the size of playlist.
-    \since 1.0
 */
 
 /*!
@@ -93,7 +91,6 @@ QMediaPlaylistProvider::~QMediaPlaylistProvider()
     Returns the media at \a index in the playlist.
 
     If the index is invalid this will return a null media content.
-    \since 1.0
 */
 
 
@@ -105,7 +102,6 @@ QMediaPlaylistProvider::~QMediaPlaylistProvider()
 
     Returns true if the provider supports the format and loading from the locations URL protocol,
     otherwise this will return false.
-    \since 1.0
 */
 bool QMediaPlaylistProvider::load(const QUrl &location, const char *format)
 {
@@ -122,7 +118,6 @@ bool QMediaPlaylistProvider::load(const QUrl &location, const char *format)
 
     Returns true if the provider supports the format and loading from an I/O device, otherwise this
     will return false.
-    \since 1.0
 */
 bool QMediaPlaylistProvider::load(QIODevice * device, const char *format)
 {
@@ -136,7 +131,6 @@ bool QMediaPlaylistProvider::load(QIODevice * device, const char *format)
     the writer will inspect the URL to guess the format.
 
     Returns true if the playlist was saved successfully; and false otherwise.
-    \since 1.0
   */
 bool QMediaPlaylistProvider::save(const QUrl &location, const char *format)
 {
@@ -149,7 +143,6 @@ bool QMediaPlaylistProvider::save(const QUrl &location, const char *format)
     Saves the contents of a playlist to an I/O \a device in the specified \a format.
 
     Returns true if the playlist was saved successfully; and false otherwise.
-    \since 1.0
 */
 bool QMediaPlaylistProvider::save(QIODevice * device, const char *format)
 {
@@ -160,7 +153,6 @@ bool QMediaPlaylistProvider::save(QIODevice * device, const char *format)
 
 /*!
     Returns true if a playlist is read-only; otherwise returns false.
-    \since 1.0
 */
 bool QMediaPlaylistProvider::isReadOnly() const
 {
@@ -171,7 +163,6 @@ bool QMediaPlaylistProvider::isReadOnly() const
     Append \a media to a playlist.
 
     Returns true if the media was appended; and false otherwise.
-    \since 1.0
 */
 bool QMediaPlaylistProvider::addMedia(const QMediaContent &media)
 {
@@ -183,7 +174,6 @@ bool QMediaPlaylistProvider::addMedia(const QMediaContent &media)
     Append multiple media \a items to a playlist.
 
     Returns true if the media items were appended; and false otherwise.
-    \since 1.0
 */
 bool QMediaPlaylistProvider::addMedia(const QList<QMediaContent> &items)
 {
@@ -199,7 +189,6 @@ bool QMediaPlaylistProvider::addMedia(const QList<QMediaContent> &items)
     Inserts \a media into a playlist at \a position.
 
     Returns true if the media was inserted; and false otherwise.
-    \since 1.0
 */
 bool QMediaPlaylistProvider::insertMedia(int position, const QMediaContent &media)
 {
@@ -212,7 +201,6 @@ bool QMediaPlaylistProvider::insertMedia(int position, const QMediaContent &medi
     Inserts multiple media \a items into a playlist at \a position.
 
     Returns true if the media \a items were inserted; and false otherwise.
-    \since 1.0
 */
 bool QMediaPlaylistProvider::insertMedia(int position, const QList<QMediaContent> &items)
 {
@@ -229,7 +217,6 @@ bool QMediaPlaylistProvider::insertMedia(int position, const QList<QMediaContent
     Removes the media at \a position from a playlist.
 
     Returns true if the media was removed; and false otherwise.
-    \since 1.0
 */
 bool QMediaPlaylistProvider::removeMedia(int position)
 {
@@ -241,7 +228,6 @@ bool QMediaPlaylistProvider::removeMedia(int position)
     Removes the media between the given \a start and \a end positions from a playlist.
 
     Returns true if the media was removed; and false otherwise.
-    \since 1.0
   */
 bool QMediaPlaylistProvider::removeMedia(int start, int end)
 {
@@ -257,7 +243,6 @@ bool QMediaPlaylistProvider::removeMedia(int start, int end)
     Removes all media from a playlist.
 
     Returns true if the media was removed; and false otherwise.
-    \since 1.0
 */
 bool QMediaPlaylistProvider::clear()
 {
@@ -266,7 +251,6 @@ bool QMediaPlaylistProvider::clear()
 
 /*!
     Shuffles the contents of a playlist.
-    \since 1.0
 */
 void QMediaPlaylistProvider::shuffle()
 {
@@ -277,7 +261,6 @@ void QMediaPlaylistProvider::shuffle()
 
     Signals that new media is about to be inserted into a playlist between the \a start and \a end
     positions.
-    \since 1.0
 */
 
 /*!
@@ -285,7 +268,6 @@ void QMediaPlaylistProvider::shuffle()
 
     Signals that new media has been inserted into a playlist between the \a start and \a end
     positions.
-    \since 1.0
 */
 
 /*!
@@ -293,35 +275,30 @@ void QMediaPlaylistProvider::shuffle()
 
     Signals that media is about to be removed from a playlist between the \a start and \a end
     positions.
-    \since 1.0
 */
 
 /*!
     \fn void QMediaPlaylistProvider::mediaRemoved(int start, int end);
 
     Signals that media has been removed from a playlist between the \a start and \a end positions.
-    \since 1.0
 */
 
 /*!
     \fn void QMediaPlaylistProvider::mediaChanged(int start, int end);
 
     Signals that media in playlist between the \a start and \a end positions inclusive has changed.
-    \since 1.0
 */
 
 /*!
     \fn void QMediaPlaylistProvider::loaded()
 
     Signals that a load() finished successfully.
-    \since 1.0
 */
 
 /*!
     \fn void QMediaPlaylistProvider::loadFailed(QMediaPlaylist::Error error, const QString& errorMessage)
 
     Signals that a load failed() due to an \a error.  The \a errorMessage provides more information.
-    \since 1.0
 */
 
 #include "moc_qmediaplaylistprovider.cpp"
diff --git a/src/multimedia/playback/qmediaresource.cpp b/src/multimedia/playback/qmediaresource.cpp
index 5f5499f..b6676b0 100644
--- a/src/multimedia/playback/qmediaresource.cpp
+++ b/src/multimedia/playback/qmediaresource.cpp
@@ -66,7 +66,6 @@ namespace
     \brief The QMediaResource class provides a description of a media resource.
     \inmodule QtMultimedia
     \ingroup multimedia
-    \since 1.0
 
     A media resource is composed of a \l {url()}{URL} containing the
     location of the resource and a set of properties that describe the
@@ -104,7 +103,6 @@ QMediaResource::QMediaResource()
 
 /*!
     Constructs a media resource with the given \a mimeType from a \a url.
-    \since 1.0
 */
 QMediaResource::QMediaResource(const QUrl &url, const QString &mimeType)
 {
@@ -114,7 +112,6 @@ QMediaResource::QMediaResource(const QUrl &url, const QString &mimeType)
 
 /*!
     Constructs a media resource with the given \a mimeType from a network \a request.
-    \since 1.0
 */
 QMediaResource::QMediaResource(const QNetworkRequest &request, const QString &mimeType)
 {
@@ -125,7 +122,6 @@ QMediaResource::QMediaResource(const QNetworkRequest &request, const QString &mi
 
 /*!
     Constructs a copy of a media resource \a other.
-    \since 1.0
 */
 QMediaResource::QMediaResource(const QMediaResource &other)
     : values(other.values)
@@ -134,7 +130,6 @@ QMediaResource::QMediaResource(const QMediaResource &other)
 
 /*!
     Assigns the value of \a other to a media resource.
-    \since 1.0
 */
 QMediaResource &QMediaResource::operator =(const QMediaResource &other)
 {
@@ -155,7 +150,6 @@ QMediaResource::~QMediaResource()
     Compares a media resource to \a other.
 
     Returns true if the resources are identical, and false otherwise.
-    \since 1.0
 */
 bool QMediaResource::operator ==(const QMediaResource &other) const
 {
@@ -178,7 +172,6 @@ bool QMediaResource::operator ==(const QMediaResource &other) const
     Compares a media resource to \a other.
 
     Returns true if they are different, and false otherwise.
-    \since 1.0
 */
 bool QMediaResource::operator !=(const QMediaResource &other) const
 {
@@ -189,7 +182,6 @@ bool QMediaResource::operator !=(const QMediaResource &other) const
     Identifies if a media resource is null.
 
     Returns true if the resource is null, and false otherwise.
-    \since 1.0
 */
 bool QMediaResource::isNull() const
 {
@@ -198,7 +190,6 @@ bool QMediaResource::isNull() const
 
 /*!
     Returns the URL of a media resource.
-    \since 1.0
 */
 QUrl QMediaResource::url() const
 {
@@ -207,7 +198,6 @@ QUrl QMediaResource::url() const
 
 /*!
     Returns the network request associated with this media resource.
-    \since 1.0
 */
 QNetworkRequest QMediaResource::request() const
 {
@@ -221,7 +211,6 @@ QNetworkRequest QMediaResource::request() const
     Returns the MIME type of a media resource.
 
     This may be null if the MIME type is unknown.
-    \since 1.0
 */
 QString QMediaResource::mimeType() const
 {
@@ -232,7 +221,6 @@ QString QMediaResource::mimeType() const
     Returns the language of a media resource as an ISO 639-2 code.
 
     This may be null if the language is unknown.
-    \since 1.0
 */
 QString QMediaResource::language() const
 {
@@ -241,7 +229,6 @@ QString QMediaResource::language() const
 
 /*!
     Sets the \a language of a media resource.
-    \since 1.0
 */
 void QMediaResource::setLanguage(const QString &language)
 {
@@ -256,7 +243,6 @@ void QMediaResource::setLanguage(const QString &language)
 
     This may be null if the media resource does not contain an audio stream, or the codec is
     unknown.
-    \since 1.0
 */
 QString QMediaResource::audioCodec() const
 {
@@ -265,7 +251,6 @@ QString QMediaResource::audioCodec() const
 
 /*!
     Sets the audio \a codec of a media resource.
-    \since 1.0
 */
 void QMediaResource::setAudioCodec(const QString &codec)
 {
@@ -280,7 +265,6 @@ void QMediaResource::setAudioCodec(const QString &codec)
 
     This may be null if the media resource does not contain a video stream, or the codec is
     unknonwn.
-    \since 1.0
 */
 QString QMediaResource::videoCodec() const
 {
@@ -289,7 +273,6 @@ QString QMediaResource::videoCodec() const
 
 /*!
     Sets the video \a codec of media resource.
-    \since 1.0
 */
 void QMediaResource::setVideoCodec(const QString &codec)
 {
@@ -303,7 +286,6 @@ void QMediaResource::setVideoCodec(const QString &codec)
     Returns the size in bytes of a media resource.
 
     This may be zero if the size is unknown.
-    \since 1.0
 */
 qint64 QMediaResource::dataSize() const
 {
@@ -312,7 +294,6 @@ qint64 QMediaResource::dataSize() const
 
 /*!
     Sets the \a size in bytes of a media resource.
-    \since 1.0
 */
 void QMediaResource::setDataSize(const qint64 size)
 {
@@ -326,7 +307,6 @@ void QMediaResource::setDataSize(const qint64 size)
     Returns the bit rate in bits per second of a media resource's audio stream.
 
     This may be zero if the bit rate is unknown, or the resource contains no audio stream.
-    \since 1.0
 */
 int QMediaResource::audioBitRate() const
 {
@@ -335,7 +315,6 @@ int QMediaResource::audioBitRate() const
 
 /*!
     Sets the bit \a rate in bits per second of a media resource's video stream.
-    \since 1.0
 */
 void QMediaResource::setAudioBitRate(int rate)
 {
@@ -349,7 +328,6 @@ void QMediaResource::setAudioBitRate(int rate)
     Returns the audio sample rate of a media resource.
 
     This may be zero if the sample size is unknown, or the resource contains no audio stream.
-    \since 1.0
 */
 int QMediaResource::sampleRate() const
 {
@@ -358,7 +336,6 @@ int QMediaResource::sampleRate() const
 
 /*!
     Sets the audio \a sampleRate of a media resource.
-    \since 1.0
 */
 void QMediaResource::setSampleRate(int sampleRate)
 {
@@ -372,7 +349,6 @@ void QMediaResource::setSampleRate(int sampleRate)
     Returns the number of audio channels in a media resource.
 
     This may be zero if the sample size is unknown, or the resource contains no audio stream.
-    \since 1.0
 */
 int QMediaResource::channelCount() const
 {
@@ -381,7 +357,6 @@ int QMediaResource::channelCount() const
 
 /*!
     Sets the number of audio \a channels in a media resource.
-    \since 1.0
 */
 void QMediaResource::setChannelCount(int channels)
 {
@@ -395,7 +370,6 @@ void QMediaResource::setChannelCount(int channels)
     Returns the bit rate in bits per second of a media resource's video stream.
 
     This may be zero if the bit rate is unknown, or the resource contains no video stream.
-    \since 1.0
 */
 int QMediaResource::videoBitRate() const
 {
@@ -404,7 +378,6 @@ int QMediaResource::videoBitRate() const
 
 /*!
     Sets the bit \a rate in bits per second of a media resource's video stream.
-    \since 1.0
 */
 void QMediaResource::setVideoBitRate(int rate)
 {
@@ -419,7 +392,6 @@ void QMediaResource::setVideoBitRate(int rate)
 
     This may be null is the resolution is unknown, or the resource contains no pixel data (i.e. the
     resource is an audio stream.
-    \since 1.0
 */
 QSize QMediaResource::resolution() const
 {
@@ -428,7 +400,6 @@ QSize QMediaResource::resolution() const
 
 /*!
     Sets the \a resolution in pixels of a media resource.
-    \since 1.0
 */
 void QMediaResource::setResolution(const QSize &resolution)
 {
@@ -440,7 +411,6 @@ void QMediaResource::setResolution(const QSize &resolution)
 
 /*!
     Sets the \a width and \a height in pixels of a media resource.
-    \since 1.0
 */
 void QMediaResource::setResolution(int width, int height)
 {
diff --git a/src/multimedia/qmediabindableinterface.cpp b/src/multimedia/qmediabindableinterface.cpp
index b659e74..b734f60 100644
--- a/src/multimedia/qmediabindableinterface.cpp
+++ b/src/multimedia/qmediabindableinterface.cpp
@@ -47,7 +47,6 @@ QT_BEGIN_NAMESPACE
     \class QMediaBindableInterface
     \inmodule QtMultimedia
     \ingroup multimedia
-    \since 1.0
 
 
     \brief The QMediaBindableInterface class is the base class for objects extending media objects functionality.
@@ -67,7 +66,6 @@ QMediaBindableInterface::~QMediaBindableInterface()
     \fn QMediaBindableInterface::mediaObject() const;
 
     Return the currently attached media object.
-    \since 1.0
 */
 
 
@@ -76,7 +74,6 @@ QMediaBindableInterface::~QMediaBindableInterface()
 
     Attaches to the media \a object.
     Returns true if attached successfully, otherwise returns false.
-    \since 1.0
 */
 
 
diff --git a/src/multimedia/qmediacontrol.cpp b/src/multimedia/qmediacontrol.cpp
index fcc44b0..0ebaca1 100644
--- a/src/multimedia/qmediacontrol.cpp
+++ b/src/multimedia/qmediacontrol.cpp
@@ -53,7 +53,6 @@ QT_BEGIN_NAMESPACE
     \class QMediaControl
     \inmodule QtMultimedia
     \ingroup multimedia-serv
-    \since 1.0
 
 
     \brief The QMediaControl class provides a base interface for media service controls.
@@ -110,7 +109,6 @@ QMediaControl::~QMediaControl()
 
 /*!
     Constructs a media control with the given \a parent.
-    \since 1.0
 */
 
 QMediaControl::QMediaControl(QObject *parent)
@@ -122,7 +120,6 @@ QMediaControl::QMediaControl(QObject *parent)
 
 /*!
     \internal
-    \since 1.0
 */
 
 QMediaControl::QMediaControl(QMediaControlPrivate &dd, QObject *parent)
diff --git a/src/multimedia/qmediaobject.cpp b/src/multimedia/qmediaobject.cpp
index 63e5d09..66978fb 100644
--- a/src/multimedia/qmediaobject.cpp
+++ b/src/multimedia/qmediaobject.cpp
@@ -72,7 +72,6 @@ void QMediaObjectPrivate::_q_notify()
 
     \inmodule QtMultimedia
     \ingroup multimedia
-    \since 1.0
 
     QMediaObject derived classes provide access to the functionality of a
     QMediaService.  Each media object hosts a QMediaService and uses the
@@ -99,7 +98,6 @@ QMediaObject::~QMediaObject()
 
 /*!
     Returns the service availability error state.
-    \since 1.0
 */
 
 QtMultimedia::AvailabilityError QMediaObject::availabilityError() const
@@ -109,7 +107,6 @@ QtMultimedia::AvailabilityError QMediaObject::availabilityError() const
 
 /*!
     Returns true if the service is available for use.
-    \since 1.0
 */
 
 bool QMediaObject::isAvailable() const
@@ -119,7 +116,6 @@ bool QMediaObject::isAvailable() const
 
 /*!
     Returns the media service that provides the functionality of this multimedia object.
-    \since 1.0
 */
 
 QMediaService* QMediaObject::service() const
@@ -156,7 +152,6 @@ void QMediaObject::setNotifyInterval(int milliSeconds)
 
     The object passed must implement the QMediaBindableInterface interface.
 
-    \since 1.0
     \sa QMediaBindableInterface
 */
 bool QMediaObject::bind(QObject *object)
@@ -183,7 +178,6 @@ bool QMediaObject::bind(QObject *object)
     will be generated if the object was not previously bound to this
     object.
 
-    \since 1.0
     \sa QMediaBindableInterface
 */
 void QMediaObject::unbind(QObject *object)
@@ -203,7 +197,6 @@ void QMediaObject::unbind(QObject *object)
 
     This class is meant as a base class for multimedia objects so this
     constructor is protected.
-    \since 1.0
 */
 
 QMediaObject::QMediaObject(QObject *parent, QMediaService *service):
@@ -249,7 +242,6 @@ QMediaObject::QMediaObject(QMediaObjectPrivate &dd, QObject *parent,
     Watch the property \a name. The property's notify signal will be emitted
     once every \code notifyInterval milliseconds.
 
-    \since 1.0
     \sa notifyInterval
 */
 
@@ -273,7 +265,6 @@ void QMediaObject::addPropertyWatch(QByteArray const &name)
     Remove property \a name from the list of properties whose changes are
     regularly signaled.
 
-    \since 1.0
     \sa notifyInterval
 */
 
@@ -298,7 +289,6 @@ void QMediaObject::removePropertyWatch(QByteArray const &name)
 
     The interval is expressed in milliseconds, the default value is 1000.
 
-    \since 1.0
     \sa addPropertyWatch(), removePropertyWatch()
 */
 
@@ -306,12 +296,10 @@ void QMediaObject::removePropertyWatch(QByteArray const &name)
     \fn void QMediaObject::notifyIntervalChanged(int milliseconds)
 
     Signal a change in the notify interval period to \a milliseconds.
-    \since 1.0
 */
 
 /*!
     Returns true if there is meta-data associated with this media object, else false.
-    \since 1.0
 */
 
 bool QMediaObject::isMetaDataAvailable() const
@@ -327,12 +315,10 @@ bool QMediaObject::isMetaDataAvailable() const
     \fn QMediaObject::metaDataAvailableChanged(bool available)
 
     Signals that the \a available state of a media object's meta-data has changed.
-    \since 1.0
 */
 
 /*!
     Returns the value associated with a meta-data \a key.
-    \since 1.0
 */
 QVariant QMediaObject::metaData(QtMultimedia::MetaData key) const
 {
@@ -345,7 +331,6 @@ QVariant QMediaObject::metaData(QtMultimedia::MetaData key) const
 
 /*!
     Returns a list of keys there is meta-data available for.
-    \since 1.0
 */
 QList<QtMultimedia::MetaData> QMediaObject::availableMetaData() const
 {
@@ -360,7 +345,6 @@ QList<QtMultimedia::MetaData> QMediaObject::availableMetaData() const
     \fn QMediaObject::metaDataChanged()
 
     Signals that this media object's meta-data has changed.
-    \since 1.0
 */
 
 /*!
@@ -368,7 +352,6 @@ QList<QtMultimedia::MetaData> QMediaObject::availableMetaData() const
 
     The naming and type of extended meta-data is not standardized, so the values and meaning
     of keys may vary between backends.
-    \since 1.0
 */
 QVariant QMediaObject::extendedMetaData(const QString &key) const
 {
@@ -381,7 +364,6 @@ QVariant QMediaObject::extendedMetaData(const QString &key) const
 
 /*!
     Returns a list of keys there is extended meta-data available for.
-    \since 1.0
 */
 QStringList QMediaObject::availableExtendedMetaData() const
 {
@@ -414,7 +396,6 @@ void QMediaObject::setupMetaData()
     \fn QMediaObject::availabilityChanged(bool available)
 
     Signal emitted when the availability state has changed to \a available
-    \since 1.0
 */
 
 
diff --git a/src/multimedia/qmediaservice.cpp b/src/multimedia/qmediaservice.cpp
index 7c64554..7cfdcaa 100644
--- a/src/multimedia/qmediaservice.cpp
+++ b/src/multimedia/qmediaservice.cpp
@@ -55,7 +55,6 @@ QT_BEGIN_NAMESPACE
     service implementations.
     \inmodule QtMultimedia
     \ingroup multimedia-serv
-    \since 1.0
 
 
     Media services provide implementations of the functionality promised
@@ -122,7 +121,6 @@ QMediaService::~QMediaService()
 
     Controls must be returned to the service when no longer needed using the
     releaseControl() function.
-    \since 1.0
 */
 
 /*!
@@ -135,14 +133,12 @@ QMediaService::~QMediaService()
 
     Controls must be returned to the service when no longer needed using the
     releaseControl() function.
-    \since 1.0
 */
 
 /*!
     \fn void QMediaService::releaseControl(QMediaControl *control);
 
     Releases a \a control back to the service.
-    \since 1.0
 */
 
 #include "moc_qmediaservice.cpp"
diff --git a/src/multimedia/qmediaserviceprovider.cpp b/src/multimedia/qmediaserviceprovider.cpp
index 98606c1..d884bd5 100644
--- a/src/multimedia/qmediaserviceprovider.cpp
+++ b/src/multimedia/qmediaserviceprovider.cpp
@@ -86,7 +86,6 @@ public:
 
     \inmodule QtMultimedia
     \ingroup multimedia-serv
-    \since 1.0
 
     The QMediaServiceProvider class uses hints to select an appropriate media service.
 */
@@ -140,7 +139,6 @@ QMediaServiceProviderHint::QMediaServiceProviderHint()
 
     This type of hint describes a service that is able to play content of a specific MIME \a type
     encoded with one or more of the listed \a codecs.
-    \since 1.0
 */
 QMediaServiceProviderHint::QMediaServiceProviderHint(const QString &type, const QStringList& codecs)
     :d(new QMediaServiceProviderHintPrivate(ContentType))
@@ -153,7 +151,6 @@ QMediaServiceProviderHint::QMediaServiceProviderHint(const QString &type, const
   Constructs a Device media service provider hint.
 
   This type of hint describes a media service that utilizes a specific \a device.
-  \since 1.0
 */
 QMediaServiceProviderHint::QMediaServiceProviderHint(const QByteArray &device)
     :d(new QMediaServiceProviderHintPrivate(Device))
@@ -165,7 +162,6 @@ QMediaServiceProviderHint::QMediaServiceProviderHint(const QByteArray &device)
     Constructs a SupportedFeatures media service provider hint.
 
     This type of hint describes a service which supports a specific set of \a features.
-    \since 1.0
 */
 QMediaServiceProviderHint::QMediaServiceProviderHint(QMediaServiceProviderHint::Features features)
     :d(new QMediaServiceProviderHintPrivate(SupportedFeatures))
@@ -175,7 +171,6 @@ QMediaServiceProviderHint::QMediaServiceProviderHint(QMediaServiceProviderHint::
 
 /*!
     Constructs a copy of the media service provider hint \a other.
-    \since 1.0
 */
 QMediaServiceProviderHint::QMediaServiceProviderHint(const QMediaServiceProviderHint &other)
     :d(other.d)
@@ -191,7 +186,6 @@ QMediaServiceProviderHint::~QMediaServiceProviderHint()
 
 /*!
     Assigns the value \a other to a media service provider hint.
-    \since 1.0
 */
 QMediaServiceProviderHint& QMediaServiceProviderHint::operator=(const QMediaServiceProviderHint &other)
 {
@@ -203,7 +197,6 @@ QMediaServiceProviderHint& QMediaServiceProviderHint::operator=(const QMediaServ
     Identifies if \a other is of equal value to a media service provider hint.
 
     Returns true if the hints are equal, and false if they are not.
-    \since 1.0
 */
 bool QMediaServiceProviderHint::operator == (const QMediaServiceProviderHint &other) const
 {
@@ -219,7 +212,6 @@ bool QMediaServiceProviderHint::operator == (const QMediaServiceProviderHint &ot
     Identifies if \a other is not of equal value to a media service provider hint.
 
     Returns true if the hints are not equal, and false if they are.
-    \since 1.0
 */
 bool QMediaServiceProviderHint::operator != (const QMediaServiceProviderHint &other) const
 {
@@ -228,7 +220,6 @@ bool QMediaServiceProviderHint::operator != (const QMediaServiceProviderHint &ot
 
 /*!
     Returns true if a media service provider is null.
-    \since 1.0
 */
 bool QMediaServiceProviderHint::isNull() const
 {
@@ -237,7 +228,6 @@ bool QMediaServiceProviderHint::isNull() const
 
 /*!
     Returns the type of a media service provider hint.
-    \since 1.0
 */
 QMediaServiceProviderHint::Type QMediaServiceProviderHint::type() const
 {
@@ -246,7 +236,6 @@ QMediaServiceProviderHint::Type QMediaServiceProviderHint::type() const
 
 /*!
     Returns the mime type of the media a service is expected to be able play.
-    \since 1.0
 */
 QString QMediaServiceProviderHint::mimeType() const
 {
@@ -255,7 +244,6 @@ QString QMediaServiceProviderHint::mimeType() const
 
 /*!
     Returns a list of codes a media service is expected to be able to decode.
-    \since 1.0
 */
 QStringList QMediaServiceProviderHint::codecs() const
 {
@@ -264,7 +252,6 @@ QStringList QMediaServiceProviderHint::codecs() const
 
 /*!
     Returns the name of a device a media service is expected to utilize.
-    \since 1.0
 */
 QByteArray QMediaServiceProviderHint::device() const
 {
@@ -273,7 +260,6 @@ QByteArray QMediaServiceProviderHint::device() const
 
 /*!
     Returns a set of features a media service is expected to provide.
-    \since 1.0
 */
 QMediaServiceProviderHint::Features QMediaServiceProviderHint::features() const
 {
@@ -542,7 +528,6 @@ Q_GLOBAL_STATIC(QPluginServiceProvider, pluginProvider);
     \class QMediaServiceProvider
 
     \brief The QMediaServiceProvider class provides an abstract allocator for media services.
-    \since 1.0
 */
 
 /*!
@@ -556,14 +541,12 @@ Q_GLOBAL_STATIC(QPluginServiceProvider, pluginProvider);
 
     The returned service must be released with releaseService when it is
     finished with.
-    \since 1.0
 */
 
 /*!
     \fn QMediaServiceProvider::releaseService(QMediaService *service)
 
     Releases a media \a service requested with requestService().
-    \since 1.0
 */
 
 /*!
@@ -573,7 +556,6 @@ Q_GLOBAL_STATIC(QPluginServiceProvider, pluginProvider);
     serviceType service that is able to play media of a specific \a mimeType
     that is encoded using the listed \a codecs while adhering to constraints
     identified in \a flags.
-    \since 1.0
 */
 QtMultimedia::SupportEstimate QMediaServiceProvider::hasSupport(const QByteArray &serviceType,
                                                         const QString &mimeType,
@@ -596,7 +578,6 @@ QtMultimedia::SupportEstimate QMediaServiceProvider::hasSupport(const QByteArray
 
     The resultant list is restricted to MIME types which can be supported given
     the constraints in \a flags.
-    \since 1.0
 */
 QStringList QMediaServiceProvider::supportedMimeTypes(const QByteArray &serviceType, int flags) const
 {
@@ -608,7 +589,6 @@ QStringList QMediaServiceProvider::supportedMimeTypes(const QByteArray &serviceT
 
 /*!
   Returns the list of devices related to \a service type.
-  \since 1.0
 */
 QList<QByteArray> QMediaServiceProvider::devices(const QByteArray &service) const
 {
@@ -619,7 +599,6 @@ QList<QByteArray> QMediaServiceProvider::devices(const QByteArray &service) cons
 /*!
     Returns the description of \a device related to \a serviceType, suitable for use by
     an application for display.
-    \since 1.0
 */
 QString QMediaServiceProvider::deviceDescription(const QByteArray &serviceType, const QByteArray &device)
 {
@@ -637,7 +616,6 @@ static QMediaServiceProvider *qt_defaultMediaServiceProvider = 0;
     Sets a media service \a provider as the default.
 
     \internal
-    \since 1.0
 */
 void QMediaServiceProvider::setDefaultServiceProvider(QMediaServiceProvider *provider)
 {
@@ -665,7 +643,6 @@ QMediaServiceProvider *QMediaServiceProvider::defaultServiceProvider()
 
     \brief The QMediaServiceProviderPlugin class interface provides an interface for QMediaService
     plug-ins.
-    \since 1.0
 
     A media service provider plug-in may implement one or more of
     QMediaServiceSupportedFormatsInterface,
@@ -677,7 +654,6 @@ QMediaServiceProvider *QMediaServiceProvider::defaultServiceProvider()
     \fn QMediaServiceProviderPlugin::keys() const
 
     Returns a list of keys for media services a plug-in can create.
-    \since 1.0
 */
 
 /*!
@@ -686,14 +662,12 @@ QMediaServiceProvider *QMediaServiceProvider::defaultServiceProvider()
     Constructs a new instance of the QMediaService identified by \a key.
 
     The QMediaService returned must be destroyed with release().
-    \since 1.0
 */
 
 /*!
     \fn QMediaServiceProviderPlugin::release(QMediaService *service)
 
     Destroys a media \a service constructed with create().
-    \since 1.0
 */
 
 
@@ -701,7 +675,6 @@ QMediaServiceProvider *QMediaServiceProvider::defaultServiceProvider()
     \class QMediaServiceSupportedFormatsInterface
     \brief The QMediaServiceSupportedFormatsInterface class interface
     identifies if a media service plug-in supports a media format.
-    \since 1.0
 
     A QMediaServiceProviderPlugin may implement this interface.
 */
@@ -717,21 +690,18 @@ QMediaServiceProvider *QMediaServiceProvider::defaultServiceProvider()
 
     Returns the level of support a media service plug-in has for a \a mimeType
     and set of \a codecs.
-    \since 1.0
 */
 
 /*!
     \fn QMediaServiceSupportedFormatsInterface::supportedMimeTypes() const
 
     Returns a list of MIME types supported by the media service plug-in.
-    \since 1.0
 */
 
 /*!
     \class QMediaServiceSupportedDevicesInterface
     \brief The QMediaServiceSupportedDevicesInterface class interface
     identifies the devices supported by a media service plug-in.
-    \since 1.0
 
     A QMediaServiceProviderPlugin may implement this interface.
 */
@@ -746,21 +716,18 @@ QMediaServiceProvider *QMediaServiceProvider::defaultServiceProvider()
     \fn QMediaServiceSupportedDevicesInterface::devices(const QByteArray &service) const
 
     Returns a list of devices supported by a plug-in \a service.
-    \since 1.0
 */
 
 /*!
     \fn QMediaServiceSupportedDevicesInterface::deviceDescription(const QByteArray &service, const QByteArray &device)
 
     Returns a description of a \a device supported by a plug-in \a service.
-    \since 1.0
 */
 
 /*!
     \class QMediaServiceFeaturesInterface
     \brief The QMediaServiceFeaturesInterface class interface identifies
     features supported by a media service plug-in.
-    \since 1.0
 
     A QMediaServiceProviderPlugin may implement this interface.
 */
@@ -774,7 +741,6 @@ QMediaServiceProvider *QMediaServiceProvider::defaultServiceProvider()
     \fn QMediaServiceFeaturesInterface::supportedFeatures(const QByteArray &service) const
 
     Returns a set of features supported by a plug-in \a service.
-    \since 1.0
 */
 
 #include "moc_qmediaserviceprovider.cpp"
diff --git a/src/multimedia/qmediatimerange.cpp b/src/multimedia/qmediatimerange.cpp
index e873f08..22a56fa 100644
--- a/src/multimedia/qmediatimerange.cpp
+++ b/src/multimedia/qmediatimerange.cpp
@@ -50,7 +50,6 @@ QT_BEGIN_NAMESPACE
     \brief The QMediaTimeInterval class represents a time interval with integer precision.
     \inmodule QtMultimedia
     \ingroup multimedia
-    \since 1.0
 
     An interval is specified by an inclusive start() and end() time.  These
     must be set in the constructor, as this is an immutable class.  The
@@ -87,7 +86,6 @@ QMediaTimeInterval::QMediaTimeInterval()
     \fn QMediaTimeInterval::QMediaTimeInterval(qint64 start, qint64 end)
 
     Constructs an interval with the specified \a start and \a end times.
-    \since 1.0
 */
 QMediaTimeInterval::QMediaTimeInterval(qint64 start, qint64 end)
     : s(start)
@@ -100,7 +98,6 @@ QMediaTimeInterval::QMediaTimeInterval(qint64 start, qint64 end)
     \fn QMediaTimeInterval::QMediaTimeInterval(const QMediaTimeInterval &other)
 
     Constructs an interval by taking a copy of \a other.
-    \since 1.0
 */
 QMediaTimeInterval::QMediaTimeInterval(const QMediaTimeInterval &other)
     : s(other.s)
@@ -114,7 +111,6 @@ QMediaTimeInterval::QMediaTimeInterval(const QMediaTimeInterval &other)
 
     Returns the start time of the interval.
 
-    \since 1.0
     \sa end()
 */
 qint64 QMediaTimeInterval::start() const
@@ -127,7 +123,6 @@ qint64 QMediaTimeInterval::start() const
 
     Returns the end time of the interval.
 
-    \since 1.0
     \sa start()
 */
 qint64 QMediaTimeInterval::end() const
@@ -140,7 +135,6 @@ qint64 QMediaTimeInterval::end() const
 
     Returns true if the time interval contains the specified \a time.
     That is, start() <= time <= end().
-    \since 1.0
 */
 bool QMediaTimeInterval::contains(qint64 time) const
 {
@@ -154,7 +148,6 @@ bool QMediaTimeInterval::contains(qint64 time) const
     Returns true if this time interval is normal.
     A normal time interval has start() <= end().
 
-    \since 1.0
     \sa normalized()
 */
 bool QMediaTimeInterval::isNormal() const
@@ -169,7 +162,6 @@ bool QMediaTimeInterval::isNormal() const
 
     If the start() time of the interval is greater than the end() time,
     then the returned interval has the start and end times swapped.
-    \since 1.0
 */
 QMediaTimeInterval QMediaTimeInterval::normalized() const
 {
@@ -185,7 +177,6 @@ QMediaTimeInterval QMediaTimeInterval::normalized() const
     Returns a copy of this time interval, translated by a value of \a offset.
     An interval can be moved forward through time with a positive offset, or backward
     through time with a negative offset.
-    \since 1.0
 */
 QMediaTimeInterval QMediaTimeInterval::translated(qint64 offset) const
 {
@@ -197,7 +188,6 @@ QMediaTimeInterval QMediaTimeInterval::translated(qint64 offset) const
     \relates QMediaTimeRange
 
     Returns true if \a a is exactly equal to \a b.
-    \since 1.0
 */
 bool operator==(const QMediaTimeInterval &a, const QMediaTimeInterval &b)
 {
@@ -209,7 +199,6 @@ bool operator==(const QMediaTimeInterval &a, const QMediaTimeInterval &b)
     \relates QMediaTimeRange
 
     Returns true if \a a is not exactly equal to \a b.
-    \since 1.0
 */
 bool operator!=(const QMediaTimeInterval &a, const QMediaTimeInterval &b)
 {
@@ -322,7 +311,6 @@ void QMediaTimeRangePrivate::removeInterval(const QMediaTimeInterval &interval)
     \brief The QMediaTimeRange class represents a set of zero or more disjoint
     time intervals.
     \ingroup multimedia
-    \since 1.0
 
     \reentrant
 
@@ -361,7 +349,6 @@ QMediaTimeRange::QMediaTimeRange()
     If the interval is not \l{QMediaTimeInterval::isNormal()}{normal},
     the resulting time range will be empty.
 
-    \since 1.0
     \sa addInterval()
 */
 QMediaTimeRange::QMediaTimeRange(qint64 start, qint64 end)
@@ -378,7 +365,6 @@ QMediaTimeRange::QMediaTimeRange(qint64 start, qint64 end)
     If \a interval is not \l{QMediaTimeInterval::isNormal()}{normal},
     the resulting time range will be empty.
 
-    \since 1.0
     \sa addInterval()
 */
 QMediaTimeRange::QMediaTimeRange(const QMediaTimeInterval &interval)
@@ -391,7 +377,6 @@ QMediaTimeRange::QMediaTimeRange(const QMediaTimeInterval &interval)
     \fn QMediaTimeRange::QMediaTimeRange(const QMediaTimeRange &range)
 
     Constructs a time range by copying another time \a range.
-    \since 1.0
 */
 QMediaTimeRange::QMediaTimeRange(const QMediaTimeRange &range)
     : d(range.d)
@@ -413,7 +398,6 @@ QMediaTimeRange::~QMediaTimeRange()
     \fn QMediaTimeRange::operator=(const QMediaTimeRange &other)
 
     Takes a copy of the \a other time range and returns itself.
-    \since 1.0
 */
 QMediaTimeRange &QMediaTimeRange::operator=(const QMediaTimeRange &other)
 {
@@ -425,7 +409,6 @@ QMediaTimeRange &QMediaTimeRange::operator=(const QMediaTimeRange &other)
     \fn QMediaTimeRange::operator=(const QMediaTimeInterval &interval)
 
     Sets the time range to a single continuous interval, \a interval.
-    \since 1.0
 */
 QMediaTimeRange &QMediaTimeRange::operator=(const QMediaTimeInterval &interval)
 {
@@ -440,7 +423,6 @@ QMediaTimeRange &QMediaTimeRange::operator=(const QMediaTimeInterval &interval)
 
     For empty time ranges, this value is equal to zero.
 
-    \since 1.0
     \sa latestTime()
 */
 qint64 QMediaTimeRange::earliestTime() const
@@ -458,7 +440,6 @@ qint64 QMediaTimeRange::earliestTime() const
 
     For empty time ranges, this value is equal to zero.
 
-    \since 1.0
     \sa earliestTime()
 */
 qint64 QMediaTimeRange::latestTime() const
@@ -476,7 +457,6 @@ qint64 QMediaTimeRange::latestTime() const
     Adds the interval specified by \a start and \a end
     to the time range.
 
-    \since 1.0
     \sa addInterval()
 */
 void QMediaTimeRange::addInterval(qint64 start, qint64 end)
@@ -497,7 +477,6 @@ void QMediaTimeRange::addInterval(qint64 start, qint64 end)
 
     This operation takes \l{linear time}
 
-    \since 1.0
     \sa removeInterval()
 */
 void QMediaTimeRange::addInterval(const QMediaTimeInterval &interval)
@@ -511,7 +490,6 @@ void QMediaTimeRange::addInterval(const QMediaTimeInterval &interval)
     Adds each of the intervals in \a range to this time range.
 
     Equivalent to calling addInterval() for each interval in \a range.
-    \since 1.0
 */
 void QMediaTimeRange::addTimeRange(const QMediaTimeRange &range)
 {
@@ -527,7 +505,6 @@ void QMediaTimeRange::addTimeRange(const QMediaTimeRange &range)
     Removes the interval specified by \a start and \a end
     from the time range.
 
-    \since 1.0
     \sa removeInterval()
 */
 void QMediaTimeRange::removeInterval(qint64 start, qint64 end)
@@ -549,7 +526,6 @@ void QMediaTimeRange::removeInterval(qint64 start, qint64 end)
 
     This operation takes \l{linear time}
 
-    \since 1.0
     \sa addInterval()
 */
 void QMediaTimeRange::removeInterval(const QMediaTimeInterval &interval)
@@ -563,7 +539,6 @@ void QMediaTimeRange::removeInterval(const QMediaTimeInterval &interval)
     Removes each of the intervals in \a range from this time range.
 
     Equivalent to calling removeInterval() for each interval in \a range.
-    \since 1.0
 */
 void QMediaTimeRange::removeTimeRange(const QMediaTimeRange &range)
 {
@@ -576,7 +551,6 @@ void QMediaTimeRange::removeTimeRange(const QMediaTimeRange &range)
     \fn QMediaTimeRange::operator+=(const QMediaTimeRange &other)
 
     Adds each interval in \a other to the time range and returns the result.
-    \since 1.0
 */
 QMediaTimeRange& QMediaTimeRange::operator+=(const QMediaTimeRange &other)
 {
@@ -588,7 +562,6 @@ QMediaTimeRange& QMediaTimeRange::operator+=(const QMediaTimeRange &other)
     \fn QMediaTimeRange::operator+=(const QMediaTimeInterval &interval)
 
     Adds the specified \a interval to the time range and returns the result.
-    \since 1.0
 */
 QMediaTimeRange& QMediaTimeRange::operator+=(const QMediaTimeInterval &interval)
 {
@@ -600,7 +573,6 @@ QMediaTimeRange& QMediaTimeRange::operator+=(const QMediaTimeInterval &interval)
     \fn QMediaTimeRange::operator-=(const QMediaTimeRange &other)
 
     Removes each interval in \a other from the time range and returns the result.
-    \since 1.0
 */
 QMediaTimeRange& QMediaTimeRange::operator-=(const QMediaTimeRange &other)
 {
@@ -612,7 +584,6 @@ QMediaTimeRange& QMediaTimeRange::operator-=(const QMediaTimeRange &other)
     \fn QMediaTimeRange::operator-=(const QMediaTimeInterval &interval)
 
     Removes the specified \a interval from the time range and returns the result.
-    \since 1.0
 */
 QMediaTimeRange& QMediaTimeRange::operator-=(const QMediaTimeInterval &interval)
 {
@@ -625,7 +596,6 @@ QMediaTimeRange& QMediaTimeRange::operator-=(const QMediaTimeInterval &interval)
 
     Removes all intervals from the time range.
 
-    \since 1.0
     \sa removeInterval()
 */
 void QMediaTimeRange::clear()
@@ -637,7 +607,6 @@ void QMediaTimeRange::clear()
     \fn QMediaTimeRange::intervals() const
 
     Returns the list of intervals covered by this time range.
-    \since 1.0
 */
 QList<QMediaTimeInterval> QMediaTimeRange::intervals() const
 {
@@ -649,7 +618,6 @@ QList<QMediaTimeInterval> QMediaTimeRange::intervals() const
 
     Returns true if there are no intervals within the time range.
 
-    \since 1.0
     \sa intervals()
 */
 bool QMediaTimeRange::isEmpty() const
@@ -662,7 +630,6 @@ bool QMediaTimeRange::isEmpty() const
 
     Returns true if the time range consists of a continuous interval.
     That is, there is one or fewer disjoint intervals within the time range.
-    \since 1.0
 */
 bool QMediaTimeRange::isContinuous() const
 {
@@ -673,7 +640,6 @@ bool QMediaTimeRange::isContinuous() const
     \fn QMediaTimeRange::contains(qint64 time) const
 
     Returns true if the specified \a time lies within the time range.
-    \since 1.0
 */
 bool QMediaTimeRange::contains(qint64 time) const
 {
@@ -693,7 +659,6 @@ bool QMediaTimeRange::contains(qint64 time) const
     \relates QMediaTimeRange
 
     Returns true if all intervals in \a a are present in \a b.
-    \since 1.0
 */
 bool operator==(const QMediaTimeRange &a, const QMediaTimeRange &b)
 {
@@ -714,7 +679,6 @@ bool operator==(const QMediaTimeRange &a, const QMediaTimeRange &b)
     \relates QMediaTimeRange
 
     Returns true if one or more intervals in \a a are not present in \a b.
-    \since 1.0
 */
 bool operator!=(const QMediaTimeRange &a, const QMediaTimeRange &b)
 {
@@ -725,7 +689,6 @@ bool operator!=(const QMediaTimeRange &a, const QMediaTimeRange &b)
     \fn operator+(const QMediaTimeRange &r1, const QMediaTimeRange &r2)
 
     Returns a time range containing the union between \a r1 and \a r2.
-    \since 1.0
  */
 QMediaTimeRange operator+(const QMediaTimeRange &r1, const QMediaTimeRange &r2)
 {
@@ -736,7 +699,6 @@ QMediaTimeRange operator+(const QMediaTimeRange &r1, const QMediaTimeRange &r2)
     \fn operator-(const QMediaTimeRange &r1, const QMediaTimeRange &r2)
 
     Returns a time range containing \a r2 subtracted from \a r1.
-    \since 1.0
  */
 QMediaTimeRange operator-(const QMediaTimeRange &r1, const QMediaTimeRange &r2)
 {
diff --git a/src/multimedia/radio/qradiodata.cpp b/src/multimedia/radio/qradiodata.cpp
index 4a15607..8bdf4f2 100644
--- a/src/multimedia/radio/qradiodata.cpp
+++ b/src/multimedia/radio/qradiodata.cpp
@@ -69,7 +69,6 @@ namespace
 
     \inmodule QtMultimedia
     \ingroup multimedia
-    \since 5.0
 
     The radio data object will emit signals for any changes in radio data. You can enable or disable
     alternative frequency with setAlternativeFrequenciesEnabled().
@@ -91,7 +90,6 @@ public:
     Constructs a radio data based on a media service allocated by a media service \a provider.
 
     The \a parent is passed to QMediaObject.
-    \since 5.0
 */
 
 QRadioData::QRadioData(QObject *parent, QMediaServiceProvider* provider):
@@ -132,7 +130,6 @@ QRadioData::~QRadioData()
 
 /*!
     Returns true if the radio data service is ready to use.
-    \since 5.0
 */
 bool QRadioData::isAvailable() const
 {
@@ -146,7 +143,6 @@ bool QRadioData::isAvailable() const
 
 /*!
     Returns the availability error state.
-    \since 5.0
 */
 QtMultimedia::AvailabilityError QRadioData::availabilityError() const
 {
@@ -162,7 +158,6 @@ QtMultimedia::AvailabilityError QRadioData::availabilityError() const
     \property QRadioData::stationId
     \brief Current Program Identification
 
-    \since 5.0
 */
 
 QString QRadioData::stationId() const
@@ -178,7 +173,6 @@ QString QRadioData::stationId() const
     \property QRadioData::programType
     \brief Current Program Type
 
-    \since 5.0
 */
 
 QRadioData::ProgramType QRadioData::programType() const
@@ -195,7 +189,6 @@ QRadioData::ProgramType QRadioData::programType() const
     \property QRadioData::programTypeName
     \brief Current Program Type Name
 
-    \since 5.0
 */
 
 QString QRadioData::programTypeName() const
@@ -211,7 +204,6 @@ QString QRadioData::programTypeName() const
     \property QRadioData::stationName
     \brief Current Program Service
 
-    \since 5.0
 */
 
 QString QRadioData::stationName() const
@@ -227,7 +219,6 @@ QString QRadioData::stationName() const
     \property QRadioData::radioText
     \brief Current Radio Text
 
-    \since 5.0
 */
 
 QString QRadioData::radioText() const
@@ -243,7 +234,6 @@ QString QRadioData::radioText() const
     \property QRadioData::alternativeFrequenciesEnabled
     \brief Is Alternative Frequency currently enabled
 
-    \since 5.0
 */
 
 bool QRadioData::isAlternativeFrequenciesEnabled() const
@@ -266,7 +256,6 @@ void QRadioData::setAlternativeFrequenciesEnabled( bool enabled )
 /*!
     Returns the error state of a radio data.
 
-    \since 5.0
     \sa errorString()
 */
 
@@ -282,7 +271,6 @@ QRadioData::Error QRadioData::error() const
 /*!
     Returns a description of a radio data's error state.
 
-    \since 5.0
     \sa error()
 */
 QString QRadioData::errorString() const
@@ -298,42 +286,36 @@ QString QRadioData::errorString() const
     \fn void QRadioData::stationIdChanged(QString stationId)
 
     Signals that the Program Identification code has changed to \a stationId
-    \since 5.0
 */
 
 /*!
     \fn void QRadioData::programTypeChanged(QRadioData::ProgramType programType)
 
     Signals that the Program Type code has changed to \a programType
-    \since 5.0
 */
 
 /*!
     \fn void QRadioData::programTypeNameChanged(QString programTypeName)
 
     Signals that the Program Type Name has changed to \a programTypeName
-    \since 5.0
 */
 
 /*!
     \fn void QRadioData::stationNameChanged(int stationName)
 
     Signals that the Program Service has changed to \a stationName
-    \since 5.0
 */
 
 /*!
     \fn void QRadioData::alternativeFrequenciesEnabledChanged(bool enabled)
 
     Signals that the AF has been enabled or disabled
-    \since 5.0
 */
 
 /*!
     \fn void QRadioData::error(QRadioData::Error error)
 
     Signals that an \a error occurred.
-    \since 5.0
 */
 
 /*!
@@ -349,7 +331,6 @@ QString QRadioData::errorString() const
 
 /*! \fn void QRadioData::stateChanged(QRadioData::State state)
   This signal is emitted when the state changes to \a state.
-  \since 5.0
  */
 
 #include "moc_qradiodata.cpp"
diff --git a/src/multimedia/radio/qradiotuner.cpp b/src/multimedia/radio/qradiotuner.cpp
index 3d5323b..2bfa937 100644
--- a/src/multimedia/radio/qradiotuner.cpp
+++ b/src/multimedia/radio/qradiotuner.cpp
@@ -73,7 +73,6 @@ namespace
 
     \inmodule QtMultimedia
     \ingroup multimedia
-    \since 1.0
 
     You can control the systems analog radio device using this interface, for example:
 
@@ -104,7 +103,6 @@ public:
     Constructs a radio tuner based on a media service allocated by a media service \a provider.
 
     The \a parent is passed to QMediaObject.
-    \since 1.0
 */
 
 QRadioTuner::QRadioTuner(QObject *parent, QMediaServiceProvider* provider):
@@ -147,7 +145,6 @@ QRadioTuner::~QRadioTuner()
 
 /*!
     Returns true if the radio tuner service is ready to use.
-    \since 1.0
 */
 bool QRadioTuner::isAvailable() const
 {
@@ -159,7 +156,6 @@ bool QRadioTuner::isAvailable() const
 
 /*!
     Returns the availability error state.
-    \since 1.0
 */
 QtMultimedia::AvailabilityError QRadioTuner::availabilityError() const
 {
@@ -173,7 +169,6 @@ QtMultimedia::AvailabilityError QRadioTuner::availabilityError() const
     \property QRadioTuner::state
     Return the current radio tuner state.
 
-    \since 1.0
     \sa QRadioTuner::State
 */
 
@@ -187,7 +182,6 @@ QRadioTuner::State QRadioTuner::state() const
     \property QRadioTuner::band
     \brief the frequency band a radio tuner is tuned to.
 
-    \since 1.0
     \sa QRadioTuner::Band
 */
 
@@ -204,7 +198,6 @@ QRadioTuner::Band QRadioTuner::band() const
 /*!
     \property QRadioTuner::frequency
     \brief the frequency in Hertz a radio tuner is tuned to.
-    \since 1.0
 */
 
 int QRadioTuner::frequency() const
@@ -220,7 +213,6 @@ int QRadioTuner::frequency() const
 /*!
     Returns the number of Hertz to increment the frequency by when stepping through frequencies
     within a given \a band.
-    \since 1.0
 */
 
 int QRadioTuner::frequencyStep(QRadioTuner::Band band) const
@@ -235,7 +227,6 @@ int QRadioTuner::frequencyStep(QRadioTuner::Band band) const
 
 /*!
     Returns a frequency \a band's minimum and maximum frequency.
-    \since 1.0
 */
 
 QPair<int,int> QRadioTuner::frequencyRange(QRadioTuner::Band band) const
@@ -251,7 +242,6 @@ QPair<int,int> QRadioTuner::frequencyRange(QRadioTuner::Band band) const
 /*!
     \property QRadioTuner::stereo
     \brief whether a radio tuner is receiving a stereo signal.
-    \since 1.0
 */
 
 bool QRadioTuner::isStereo() const
@@ -268,7 +258,6 @@ bool QRadioTuner::isStereo() const
 /*!
     \property QRadioTuner::stereoMode
     \brief the stereo mode of a radio tuner.
-    \since 1.0
 */
 
 QRadioTuner::StereoMode QRadioTuner::stereoMode() const
@@ -293,7 +282,6 @@ void QRadioTuner::setStereoMode(QRadioTuner::StereoMode mode)
     Identifies if a frequency \a band is supported by a radio tuner.
 
     Returns true if the band is supported, and false if it is not.
-    \since 1.0
 */
 
 bool QRadioTuner::isBandSupported(QRadioTuner::Band band) const
@@ -308,7 +296,6 @@ bool QRadioTuner::isBandSupported(QRadioTuner::Band band) const
 
 /*!
     Activate the radio device.
-    \since 1.0
 */
 
 void QRadioTuner::start()
@@ -321,7 +308,6 @@ void QRadioTuner::start()
 
 /*!
     Deactivate the radio device.
-    \since 1.0
 */
 
 void QRadioTuner::stop()
@@ -335,7 +321,6 @@ void QRadioTuner::stop()
 /*!
     \property QRadioTuner::signalStrength
     \brief the strength of the current radio signal as a percentage.
-    \since 1.0
 */
 
 int QRadioTuner::signalStrength() const
@@ -351,7 +336,6 @@ int QRadioTuner::signalStrength() const
 /*!
     \property QRadioTuner::volume
     \brief the volume of a radio tuner's audio output as a percentage.
-    \since 1.0
 */
 
 
@@ -368,7 +352,6 @@ int QRadioTuner::volume() const
 /*!
     \property QRadioTuner::muted
     \brief whether a radio tuner's audio output is muted.
-    \since 1.0
 */
 
 bool QRadioTuner::isMuted() const
@@ -385,7 +368,6 @@ bool QRadioTuner::isMuted() const
     Sets a radio tuner's frequency \a band.
 
     Changing the band will reset the \l frequency to the new band's minimum frequency.
-    \since 1.0
 */
 
 void QRadioTuner::setBand(QRadioTuner::Band band)
@@ -401,7 +383,6 @@ void QRadioTuner::setBand(QRadioTuner::Band band)
 
     If the tuner is set to a frequency outside the current \l band, the band will be changed to
     one occupied by the new frequency.
-    \since 1.0
 */
 
 void QRadioTuner::setFrequency(int frequency)
@@ -433,7 +414,6 @@ void QRadioTuner::setMuted(bool muted)
     \brief whether a radio tuner is currently scanning for a signal.
 
     \sa searchForward(), searchBackward(), cancelSearch()
-    \since 1.0
 */
 
 bool QRadioTuner::isSearching() const
@@ -449,7 +429,6 @@ bool QRadioTuner::isSearching() const
 /*!
     Starts a forward scan for a signal, starting from the current \l frequency.
 
-    \since 1.0
     \sa searchBackward(), cancelSearch(), searching
 */
 
@@ -464,7 +443,6 @@ void QRadioTuner::searchForward()
 /*!
     Starts a backwards scan for a signal, starting from the current \l frequency.
 
-    \since 1.0
     \sa searchForward(), cancelSearch(), searching
 */
 
@@ -484,7 +462,6 @@ void QRadioTuner::searchBackward()
     emitted (false). If \a searchMode is set to SearchGetStationId, searching
     waits for station id (PI) on each frequency.
 
-    \since 5.0
     \sa searchForward(), searchBackward(), searching
 */
 
@@ -499,7 +476,6 @@ void QRadioTuner::searchAllStations(QRadioTuner::SearchMode searchMode)
 /*!
     Stops scanning for a signal.
 
-    \since 1.0
     \sa searchForward(), searchBackward(), searching
 */
 
@@ -514,7 +490,6 @@ void QRadioTuner::cancelSearch()
 /*!
     Returns the error state of a radio tuner.
 
-    \since 1.0
     \sa errorString()
 */
 
@@ -531,7 +506,6 @@ QRadioTuner::Error QRadioTuner::error() const
 /*!
     Returns a description of a radio tuner's error state.
 
-    \since 1.0
     \sa error()
 */
 
@@ -549,49 +523,42 @@ QString QRadioTuner::errorString() const
     \fn void QRadioTuner::bandChanged(QRadioTuner::Band band)
 
     Signals a radio tuner's \a band has changed.
-    \since 1.0
 */
 
 /*!
     \fn void QRadioTuner::frequencyChanged(int frequency)
 
     Signals that the \a frequency a radio tuner is tuned to has changed.
-    \since 1.0
 */
 
 /*!
     \fn void QRadioTuner::mutedChanged(bool muted)
 
     Signals that the \a muted state of a radio tuner's audio output has changed.
-    \since 1.0
 */
 
 /*!
     \fn void QRadioTuner::volumeChanged(int volume)
 
     Signals that the \a volume of a radio tuner's audio output has changed.
-    \since 1.0
 */
 
 /*!
     \fn void QRadioTuner::searchingChanged(bool searching)
 
     Signals that the \a searching state of a radio tuner has changed.
-    \since 1.0
 */
 
 /*!
     \fn void QRadioTuner::stereoStatusChanged(bool stereo)
 
     Signals that the \a stereo state of a radio tuner has changed.
-    \since 1.0
 */
 
 /*!
     \fn void QRadioTuner::signalStrengthChanged(int strength)
 
     Signals that the \a strength of the signal received by a radio tuner has changed.
-    \since 1.0
 */
 
 /*!
@@ -599,14 +566,12 @@ QString QRadioTuner::errorString() const
 
     Signals that a station was found in \a frequency with \a stationId Program
     Identification code.
-    \since 5.0
 */
 
 /*!
     \fn void QRadioTuner::error(QRadioTuner::Error error)
 
     Signals that an \a error occurred.
-    \since 1.0
 */
 
 /*!
@@ -654,7 +619,6 @@ QString QRadioTuner::errorString() const
 
 /*! \fn void QRadioTuner::stateChanged(QRadioTuner::State state)
   This signal is emitted when the state changes to \a state.
-  \since 1.0
  */
 
 #include "moc_qradiotuner.cpp"
diff --git a/src/multimedia/recording/qaudiocapturesource.cpp b/src/multimedia/recording/qaudiocapturesource.cpp
index a2a14e3..8e352c8 100644
--- a/src/multimedia/recording/qaudiocapturesource.cpp
+++ b/src/multimedia/recording/qaudiocapturesource.cpp
@@ -50,7 +50,6 @@ QT_BEGIN_NAMESPACE
     \brief The QAudioCaptureSource class provides an interface to query and select an audio input endpoint.
     \inmodule QtMultimedia
     \ingroup multimedia
-    \since 1.0
 
     QAudioCaptureSource provides access to the audio inputs available on your system.
 
@@ -105,7 +104,6 @@ public:
 
 /*!
     Construct a QAudioCaptureSource using the QMediaService from \a provider, with \a parent.
-    \since 1.0
 */
 
 QAudioCaptureSource::QAudioCaptureSource(QObject *parent, QMediaServiceProvider *provider):
@@ -134,7 +132,6 @@ QAudioCaptureSource::~QAudioCaptureSource()
 
 /*!
     Returns the error state of the audio capture service.
-    \since 1.0
 */
 
 QtMultimedia::AvailabilityError QAudioCaptureSource::availabilityError() const
@@ -146,7 +143,6 @@ QtMultimedia::AvailabilityError QAudioCaptureSource::availabilityError() const
 
 /*!
     Returns true if the audio capture service is available, otherwise returns false.
-    \since 1.0
 */
 bool QAudioCaptureSource::isAvailable() const
 {
@@ -162,7 +158,6 @@ bool QAudioCaptureSource::isAvailable() const
 
 /*!
     Returns a list of available audio inputs
-    \since 1.0
 */
 
 QList<QString> QAudioCaptureSource::audioInputs() const
@@ -178,7 +173,6 @@ QList<QString> QAudioCaptureSource::audioInputs() const
 
 /*!
     Returns the description of the audio input device with \a name.
-    \since 1.0
 */
 
 QString QAudioCaptureSource::audioDescription(const QString& name) const
@@ -193,7 +187,6 @@ QString QAudioCaptureSource::audioDescription(const QString& name) const
 
 /*!
     Returns the default audio input name.
-    \since 1.0
 */
 
 QString QAudioCaptureSource::defaultAudioInput() const
@@ -208,7 +201,6 @@ QString QAudioCaptureSource::defaultAudioInput() const
 
 /*!
     Returns the active audio input name.
-    \since 1.0
 */
 
 QString QAudioCaptureSource::activeAudioInput() const
@@ -223,7 +215,6 @@ QString QAudioCaptureSource::activeAudioInput() const
 
 /*!
     Set the active audio input to \a name.
-    \since 1.0
 */
 
 void QAudioCaptureSource::setAudioInput(const QString& name)
@@ -238,19 +229,16 @@ void QAudioCaptureSource::setAudioInput(const QString& name)
     \fn QAudioCaptureSource::activeAudioInputChanged(const QString& name)
 
     Signal emitted when active audio input changes to \a name.
-    \since 1.0
 */
 
 /*!
     \fn QAudioCaptureSource::availableAudioInputsChanged()
 
     Signal is emitted when the available audio inputs change.
-    \since 1.0
 */
 
 /*!
   \internal
-  \since 1.0
 */
 void QAudioCaptureSource::statusChanged()
 {
diff --git a/src/multimedia/recording/qmediaencodersettings.cpp b/src/multimedia/recording/qmediaencodersettings.cpp
index b54ac53..17ba833 100644
--- a/src/multimedia/recording/qmediaencodersettings.cpp
+++ b/src/multimedia/recording/qmediaencodersettings.cpp
@@ -87,7 +87,6 @@ private:
 
     \inmodule QtMultimedia
     \ingroup multimedia
-    \since 1.0
 
     A audio encoder settings object is used to specify the audio encoder
     settings used by QMediaRecorder.  Audio encoder settings are selected by
@@ -110,7 +109,6 @@ QAudioEncoderSettings::QAudioEncoderSettings()
 
 /*!
     Constructs a copy of the audio encoder settings object \a other.
-    \since 1.0
 */
 
 QAudioEncoderSettings::QAudioEncoderSettings(const QAudioEncoderSettings& other)
@@ -128,7 +126,6 @@ QAudioEncoderSettings::~QAudioEncoderSettings()
 
 /*!
     Assigns the value of \a other to an audio encoder settings object.
-    \since 1.0
 */
 
 QAudioEncoderSettings& QAudioEncoderSettings::operator=(const QAudioEncoderSettings &other)
@@ -143,7 +140,6 @@ QAudioEncoderSettings& QAudioEncoderSettings::operator=(const QAudioEncoderSetti
 
     Returns true if the settings objects are of equal value, and false if they
     are not of equal value.
-    \since 1.0
 */
 
 bool QAudioEncoderSettings::operator==(const QAudioEncoderSettings &other) const
@@ -164,7 +160,6 @@ bool QAudioEncoderSettings::operator==(const QAudioEncoderSettings &other) const
 
     Returns true if the settings objects are not of equal value, and true if
     they are of equal value.
-    \since 1.0
 */
 
 bool QAudioEncoderSettings::operator!=(const QAudioEncoderSettings &other) const
@@ -176,7 +171,6 @@ bool QAudioEncoderSettings::operator!=(const QAudioEncoderSettings &other) const
     Identifies if an audio settings object is initialized.
 
     Returns true if the settings object is null, and false if it is not.
-    \since 1.0
 */
 
 bool QAudioEncoderSettings::isNull() const
@@ -187,7 +181,6 @@ bool QAudioEncoderSettings::isNull() const
 /*!
     Returns the audio encoding mode.
 
-    \since 1.0
     \sa QtMultimedia::EncodingMode
 */
 QtMultimedia::EncodingMode QAudioEncoderSettings::encodingMode() const
@@ -205,7 +198,6 @@ QtMultimedia::EncodingMode QAudioEncoderSettings::encodingMode() const
     The audio codec, channels count and sample rate settings are used in all
     the encoding modes.
 
-    \since 1.0
     \sa encodingMode(), QtMultimedia::EncodingMode
 */
 void QAudioEncoderSettings::setEncodingMode(QtMultimedia::EncodingMode mode)
@@ -215,7 +207,6 @@ void QAudioEncoderSettings::setEncodingMode(QtMultimedia::EncodingMode mode)
 
 /*!
     Returns the audio codec.
-    \since 1.0
 */
 QString QAudioEncoderSettings::codec() const
 {
@@ -224,7 +215,6 @@ QString QAudioEncoderSettings::codec() const
 
 /*!
     Sets the audio \a codec.
-    \since 1.0
 */
 void QAudioEncoderSettings::setCodec(const QString& codec)
 {
@@ -234,7 +224,6 @@ void QAudioEncoderSettings::setCodec(const QString& codec)
 
 /*!
     Returns the bit rate of the compressed audio stream in bits per second.
-    \since 1.0
 */
 int QAudioEncoderSettings::bitRate() const
 {
@@ -243,7 +232,6 @@ int QAudioEncoderSettings::bitRate() const
 
 /*!
     Returns the number of audio channels.
-    \since 1.0
 */
 int QAudioEncoderSettings::channelCount() const
 {
@@ -255,7 +243,6 @@ int QAudioEncoderSettings::channelCount() const
 
     A value of -1 indicates the encoder should make an optimal choice based on
     what is available from the audio source and the limitations of the codec.
-    \since 1.0
 */
 void QAudioEncoderSettings::setChannelCount(int channels)
 {
@@ -265,7 +252,6 @@ void QAudioEncoderSettings::setChannelCount(int channels)
 
 /*!
     Sets the audio bit \a rate in bits per second.
-    \since 1.0
 */
 void QAudioEncoderSettings::setBitRate(int rate)
 {
@@ -275,7 +261,6 @@ void QAudioEncoderSettings::setBitRate(int rate)
 
 /*!
     Returns the audio sample rate in Hz.
-    \since 1.0
 */
 int QAudioEncoderSettings::sampleRate() const
 {
@@ -287,7 +272,6 @@ int QAudioEncoderSettings::sampleRate() const
 
     A value of -1 indicates the encoder should make an optimal choice based on what is avaialbe
     from the audio source and the limitations of the codec.
-    \since 1.0
   */
 void QAudioEncoderSettings::setSampleRate(int rate)
 {
@@ -297,7 +281,6 @@ void QAudioEncoderSettings::setSampleRate(int rate)
 
 /*!
     Returns the audio encoding quality.
-    \since 1.0
 */
 
 QtMultimedia::EncodingQuality QAudioEncoderSettings::quality() const
@@ -313,7 +296,6 @@ QtMultimedia::EncodingQuality QAudioEncoderSettings::quality() const
 
     The \a quality settings parameter is only used in the
     \l {QtMultimedia::ConstantQualityEncoding}{constant quality} \l{encodingMode()}{encoding mode}.
-    \since 1.0
 */
 void QAudioEncoderSettings::setQuality(QtMultimedia::EncodingQuality quality)
 {
@@ -361,7 +343,6 @@ private:
     \class QVideoEncoderSettings
 
     \brief The QVideoEncoderSettings class provides a set of video encoder settings.
-    \since 1.0
 
     A video encoder settings object is used to specify the video encoder
     settings used by QMediaRecorder.  Video encoder settings are selected by
@@ -385,7 +366,6 @@ QVideoEncoderSettings::QVideoEncoderSettings()
 
 /*!
     Constructs a copy of the video encoder settings object \a other.
-    \since 1.0
 */
 
 QVideoEncoderSettings::QVideoEncoderSettings(const QVideoEncoderSettings& other)
@@ -403,7 +383,6 @@ QVideoEncoderSettings::~QVideoEncoderSettings()
 
 /*!
     Assigns the value of \a other to a video encoder settings object.
-    \since 1.0
 */
 QVideoEncoderSettings &QVideoEncoderSettings::operator=(const QVideoEncoderSettings &other)
 {
@@ -416,7 +395,6 @@ QVideoEncoderSettings &QVideoEncoderSettings::operator=(const QVideoEncoderSetti
 
     Returns true if the settings objects are of equal value, and false if they
     are not of equal value.
-    \since 1.0
 */
 bool QVideoEncoderSettings::operator==(const QVideoEncoderSettings &other) const
 {
@@ -435,7 +413,6 @@ bool QVideoEncoderSettings::operator==(const QVideoEncoderSettings &other) const
 
     Returns true if the settings objects are not of equal value, and false if
     they are of equal value.
-    \since 1.0
 */
 bool QVideoEncoderSettings::operator!=(const QVideoEncoderSettings &other) const
 {
@@ -446,7 +423,6 @@ bool QVideoEncoderSettings::operator!=(const QVideoEncoderSettings &other) const
     Identifies if a video encoder settings object is uninitalized.
 
     Returns true if the settings are null, and false if they are not.
-    \since 1.0
 */
 bool QVideoEncoderSettings::isNull() const
 {
@@ -456,7 +432,6 @@ bool QVideoEncoderSettings::isNull() const
 /*!
     Returns the video encoding mode.
 
-    \since 1.0
     \sa QtMultimedia::EncodingMode
 */
 QtMultimedia::EncodingMode QVideoEncoderSettings::encodingMode() const
@@ -473,7 +448,6 @@ QtMultimedia::EncodingMode QVideoEncoderSettings::encodingMode() const
 
     The rest of encoding settings are respected regardless of encoding mode.
 
-    \since 1.0
     \sa QtMultimedia::EncodingMode
 */
 void QVideoEncoderSettings::setEncodingMode(QtMultimedia::EncodingMode mode)
@@ -484,7 +458,6 @@ void QVideoEncoderSettings::setEncodingMode(QtMultimedia::EncodingMode mode)
 
 /*!
     Returns the video codec.
-    \since 1.0
 */
 
 QString QVideoEncoderSettings::codec() const
@@ -494,7 +467,6 @@ QString QVideoEncoderSettings::codec() const
 
 /*!
     Sets the video \a codec.
-    \since 1.0
 */
 void QVideoEncoderSettings::setCodec(const QString& codec)
 {
@@ -504,7 +476,6 @@ void QVideoEncoderSettings::setCodec(const QString& codec)
 
 /*!
     Returns bit rate of the encoded video stream in bits per second.
-    \since 1.0
 */
 int QVideoEncoderSettings::bitRate() const
 {
@@ -513,7 +484,6 @@ int QVideoEncoderSettings::bitRate() const
 
 /*!
     Sets the bit rate of the encoded video stream to \a value.
-    \since 1.0
 */
 
 void QVideoEncoderSettings::setBitRate(int value)
@@ -524,7 +494,6 @@ void QVideoEncoderSettings::setBitRate(int value)
 
 /*!
     Returns the video frame rate.
-    \since 1.0
 */
 qreal QVideoEncoderSettings::frameRate() const
 {
@@ -538,7 +507,6 @@ qreal QVideoEncoderSettings::frameRate() const
 
     A value of 0 indicates the encoder should make an optimal choice based on what is available
     from the video source and the limitations of the codec.
-    \since 1.0
 */
 
 void QVideoEncoderSettings::setFrameRate(qreal rate)
@@ -549,7 +517,6 @@ void QVideoEncoderSettings::setFrameRate(qreal rate)
 
 /*!
     Returns the resolution of the encoded video.
-    \since 1.0
 */
 
 QSize QVideoEncoderSettings::resolution() const
@@ -562,7 +529,6 @@ QSize QVideoEncoderSettings::resolution() const
 
     An empty QSize indicates the encoder should make an optimal choice based on
     what is available from the video source and the limitations of the codec.
-    \since 1.0
 */
 
 void QVideoEncoderSettings::setResolution(const QSize &resolution)
@@ -575,7 +541,6 @@ void QVideoEncoderSettings::setResolution(const QSize &resolution)
     Sets the \a width and \a height of the resolution of the encoded video.
 
     \overload
-    \since 1.0
 */
 
 void QVideoEncoderSettings::setResolution(int width, int height)
@@ -586,7 +551,6 @@ void QVideoEncoderSettings::setResolution(int width, int height)
 
 /*!
     Returns the video encoding quality.
-    \since 1.0
 */
 
 QtMultimedia::EncodingQuality QVideoEncoderSettings::quality() const
@@ -605,7 +569,6 @@ QtMultimedia::EncodingQuality QVideoEncoderSettings::quality() const
     The \a quality settings parameter is only used in the \l
     {QtMultimedia::ConstantQualityEncoding}{constant quality}
     \l{encodingMode()}{encoding mode}.
-    \since 1.0
 */
 
 void QVideoEncoderSettings::setQuality(QtMultimedia::EncodingQuality quality)
@@ -649,7 +612,6 @@ private:
 
     \brief The QImageEncoderSettings class provides a set of image encoder
     settings.
-    \since 1.0
 
     A image encoder settings object is used to specify the image encoder
     settings used by QCameraImageCapture.  Image encoder settings are selected
@@ -673,7 +635,6 @@ QImageEncoderSettings::QImageEncoderSettings()
 
 /*!
     Constructs a copy of the image encoder settings object \a other.
-    \since 1.0
 */
 
 QImageEncoderSettings::QImageEncoderSettings(const QImageEncoderSettings& other)
@@ -691,7 +652,6 @@ QImageEncoderSettings::~QImageEncoderSettings()
 
 /*!
     Assigns the value of \a other to a image encoder settings object.
-    \since 1.0
 */
 QImageEncoderSettings &QImageEncoderSettings::operator=(const QImageEncoderSettings &other)
 {
@@ -705,7 +665,6 @@ QImageEncoderSettings &QImageEncoderSettings::operator=(const QImageEncoderSetti
 
     Returns true if the settings objects are of equal value, and false if they
     are not of equal value.
-    \since 1.0
 */
 bool QImageEncoderSettings::operator==(const QImageEncoderSettings &other) const
 {
@@ -723,7 +682,6 @@ bool QImageEncoderSettings::operator==(const QImageEncoderSettings &other) const
 
     Returns true if the settings objects are not of equal value, and false if
     they are of equal value.
-    \since 1.0
 */
 bool QImageEncoderSettings::operator!=(const QImageEncoderSettings &other) const
 {
@@ -734,7 +692,6 @@ bool QImageEncoderSettings::operator!=(const QImageEncoderSettings &other) const
     Identifies if a image encoder settings object is uninitalized.
 
     Returns true if the settings are null, and false if they are not.
-    \since 1.0
 */
 bool QImageEncoderSettings::isNull() const
 {
@@ -743,7 +700,6 @@ bool QImageEncoderSettings::isNull() const
 
 /*!
     Returns the image codec.
-    \since 1.0
 */
 
 QString QImageEncoderSettings::codec() const
@@ -753,7 +709,6 @@ QString QImageEncoderSettings::codec() const
 
 /*!
     Sets the image \a codec.
-    \since 1.0
 */
 void QImageEncoderSettings::setCodec(const QString& codec)
 {
@@ -763,7 +718,6 @@ void QImageEncoderSettings::setCodec(const QString& codec)
 
 /*!
     Returns the resolution of the encoded image.
-    \since 1.0
 */
 
 QSize QImageEncoderSettings::resolution() const
@@ -776,7 +730,6 @@ QSize QImageEncoderSettings::resolution() const
 
     An empty QSize indicates the encoder should make an optimal choice based on
     what is available from the image source and the limitations of the codec.
-    \since 1.0
 */
 
 void QImageEncoderSettings::setResolution(const QSize &resolution)
@@ -789,7 +742,6 @@ void QImageEncoderSettings::setResolution(const QSize &resolution)
     Sets the \a width and \a height of the resolution of the encoded image.
 
     \overload
-    \since 1.0
 */
 
 void QImageEncoderSettings::setResolution(int width, int height)
@@ -800,7 +752,6 @@ void QImageEncoderSettings::setResolution(int width, int height)
 
 /*!
     Returns the image encoding quality.
-    \since 1.0
 */
 
 QtMultimedia::EncodingQuality QImageEncoderSettings::quality() const
@@ -810,7 +761,6 @@ QtMultimedia::EncodingQuality QImageEncoderSettings::quality() const
 
 /*!
     Sets the image encoding \a quality.
-    \since 1.0
 */
 
 void QImageEncoderSettings::setQuality(QtMultimedia::EncodingQuality quality)
diff --git a/src/multimedia/recording/qmediarecorder.cpp b/src/multimedia/recording/qmediarecorder.cpp
index 0d2cd3c..8a5155a 100644
--- a/src/multimedia/recording/qmediarecorder.cpp
+++ b/src/multimedia/recording/qmediarecorder.cpp
@@ -65,7 +65,6 @@ QT_BEGIN_NAMESPACE
     \class QMediaRecorder
     \inmodule QtMultimedia
     \ingroup multimedia
-    \since 1.0
 
 
     \brief The QMediaRecorder class is used for the recording of media content.
@@ -191,7 +190,6 @@ void QMediaRecorderPrivate::_q_updateNotifyInterval(int ms)
     Constructs a media recorder which records the media produced by \a mediaObject.
 
     The \a parent is passed to QMediaObject.
-    \since 1.0
 */
 
 QMediaRecorder::QMediaRecorder(QMediaObject *mediaObject, QObject *parent):
@@ -219,7 +217,6 @@ QMediaRecorder::~QMediaRecorder()
 /*!
     Returns the QMediaObject instance that this QMediaRecorder is bound too,
     or 0 otherwise.
-    \since 1.0
 */
 QMediaObject *QMediaRecorder::mediaObject() const
 {
@@ -228,7 +225,6 @@ QMediaObject *QMediaRecorder::mediaObject() const
 
 /*!
     \internal
-    \since 1.0
 */
 bool QMediaRecorder::setMediaObject(QMediaObject *object)
 {
@@ -353,12 +349,10 @@ bool QMediaRecorder::setMediaObject(QMediaObject *object)
     The \a location can be relative or empty;
     in this case the recorder uses the system specific place and file naming scheme.
     After recording has stated, QMediaRecorder::outputLocation() returns the actual output location.
-    \since 1.0
 */
 
 /*!
     Returns true if media recorder service ready to use.
-    \since 1.0
 */
 bool QMediaRecorder::isAvailable() const
 {
@@ -370,7 +364,6 @@ bool QMediaRecorder::isAvailable() const
 
 /*!
     Returns the availability error code.
-    \since 1.0
 */
 QtMultimedia::AvailabilityError QMediaRecorder::availabilityError() const
 {
@@ -394,7 +387,6 @@ bool QMediaRecorder::setOutputLocation(const QUrl &location)
 /*!
     Returns the current media recorder state.
 
-    \since 1.0
     \sa QMediaRecorder::State
 */
 
@@ -406,7 +398,6 @@ QMediaRecorder::State QMediaRecorder::state() const
 /*!
     Returns the current error state.
 
-    \since 1.0
     \sa errorString()
 */
 
@@ -418,7 +409,6 @@ QMediaRecorder::Error QMediaRecorder::error() const
 /*!
     Returns a string describing the current error state.
 
-    \since 1.0
     \sa error()
 */
 
@@ -431,7 +421,6 @@ QString QMediaRecorder::errorString() const
     \property QMediaRecorder::duration
 
     \brief the recorded media duration in milliseconds.
-    \since 1.0
 */
 
 qint64 QMediaRecorder::duration() const
@@ -443,7 +432,6 @@ qint64 QMediaRecorder::duration() const
     \property QMediaRecorder::muted
 
     \brief whether a recording audio stream is muted.
-    \since 1.0
 */
 
 bool QMediaRecorder::isMuted() const
@@ -461,7 +449,6 @@ void QMediaRecorder::setMuted(bool muted)
 
 /*!
     Returns a list of MIME types of supported container formats.
-    \since 1.0
 */
 QStringList QMediaRecorder::supportedContainers() const
 {
@@ -471,7 +458,6 @@ QStringList QMediaRecorder::supportedContainers() const
 
 /*!
     Returns a description of a container format \a mimeType.
-    \since 1.0
 */
 QString QMediaRecorder::containerDescription(const QString &mimeType) const
 {
@@ -481,7 +467,6 @@ QString QMediaRecorder::containerDescription(const QString &mimeType) const
 
 /*!
     Returns the MIME type of the selected container format.
-    \since 1.0
 */
 
 QString QMediaRecorder::containerMimeType() const
@@ -492,7 +477,6 @@ QString QMediaRecorder::containerMimeType() const
 
 /*!
     Returns a list of supported audio codecs.
-    \since 1.0
 */
 QStringList QMediaRecorder::supportedAudioCodecs() const
 {
@@ -502,7 +486,6 @@ QStringList QMediaRecorder::supportedAudioCodecs() const
 
 /*!
     Returns a description of an audio \a codec.
-    \since 1.0
 */
 QString QMediaRecorder::audioCodecDescription(const QString &codec) const
 {
@@ -522,7 +505,6 @@ QString QMediaRecorder::audioCodecDescription(const QString &codec) const
     If the encoder supports arbitrary sample rates within the supported rates
     range, *\a continuous is set to true, otherwise *\a continuous is set to
     false.
-    \since 1.0
 */
 
 QList<int> QMediaRecorder::supportedAudioSampleRates(const QAudioEncoderSettings &settings, bool *continuous) const
@@ -544,7 +526,6 @@ QList<int> QMediaRecorder::supportedAudioSampleRates(const QAudioEncoderSettings
     If the encoder supports arbitrary resolutions within the supported range,
     *\a continuous is set to true, otherwise *\a continuous is set to false.
 
-    \since 1.0
     \sa QVideoEncoderSettings::resolution()
 */
 QList<QSize> QMediaRecorder::supportedResolutions(const QVideoEncoderSettings &settings, bool *continuous) const
@@ -566,7 +547,6 @@ QList<QSize> QMediaRecorder::supportedResolutions(const QVideoEncoderSettings &s
     If the encoder supports arbitrary frame rates within the supported range,
     *\a continuous is set to true, otherwise *\a continuous is set to false.
 
-    \since 1.0
     \sa QVideoEncoderSettings::frameRate()
 */
 QList<qreal> QMediaRecorder::supportedFrameRates(const QVideoEncoderSettings &settings, bool *continuous) const
@@ -580,7 +560,6 @@ QList<qreal> QMediaRecorder::supportedFrameRates(const QVideoEncoderSettings &se
 
 /*!
     Returns a list of supported video codecs.
-    \since 1.0
 */
 QStringList QMediaRecorder::supportedVideoCodecs() const
 {
@@ -591,7 +570,6 @@ QStringList QMediaRecorder::supportedVideoCodecs() const
 /*!
     Returns a description of a video \a codec.
 
-    \since 1.0
     \sa setEncodingSettings()
 */
 QString QMediaRecorder::videoCodecDescription(const QString &codec) const
@@ -603,7 +581,6 @@ QString QMediaRecorder::videoCodecDescription(const QString &codec) const
 /*!
     Returns the audio encoder settings being used.
 
-    \since 1.0
     \sa setEncodingSettings()
 */
 
@@ -616,7 +593,6 @@ QAudioEncoderSettings QMediaRecorder::audioSettings() const
 /*!
     Returns the video encoder settings being used.
 
-    \since 1.0
     \sa setEncodingSettings()
 */
 
@@ -638,7 +614,6 @@ QVideoEncoderSettings QMediaRecorder::videoSettings() const
     It's only possible to change settings when the encoder is in the
     QMediaEncoder::StoppedState state.
 
-    \since 1.0
     \sa audioSettings(), videoSettings(), containerMimeType()
 */
 
@@ -676,7 +651,6 @@ void QMediaRecorder::setEncodingSettings(const QAudioEncoderSettings &audio,
     This is an asynchronous call, with signal
     stateCahnged(QMediaRecorder::RecordingState) being emitted when recording
     started, otherwise the error() signal is emitted.
-    \since 1.0
 */
 
 void QMediaRecorder::record()
@@ -693,7 +667,6 @@ void QMediaRecorder::record()
 
 /*!
     Pause recording.
-    \since 1.0
 */
 
 void QMediaRecorder::pause()
@@ -705,7 +678,6 @@ void QMediaRecorder::pause()
 
 /*!
     Stop recording.
-    \since 1.0
 */
 
 void QMediaRecorder::stop()
@@ -735,28 +707,24 @@ void QMediaRecorder::stop()
     \fn QMediaRecorder::stateChanged(State state)
 
     Signals that a media recorder's \a state has changed.
-    \since 1.0
 */
 
 /*!
     \fn QMediaRecorder::durationChanged(qint64 duration)
 
     Signals that the \a duration of the recorded media has changed.
-    \since 1.0
 */
 
 /*!
     \fn QMediaRecorder::error(QMediaRecorder::Error error)
 
     Signals that an \a error has occurred.
-    \since 1.0
 */
 
 /*!
     \fn QMediaRecorder::mutedChanged(bool muted)
 
     Signals that the \a muted state has changed. If true the recording is being muted.
-    \since 1.0
 */
 
 /*!
@@ -764,7 +732,6 @@ void QMediaRecorder::stop()
     \brief whether access to a media object's meta-data is available.
 
     If this is true there is meta-data available, otherwise there is no meta-data available.
-    \since 1.0
 */
 
 bool QMediaRecorder::isMetaDataAvailable() const
@@ -780,7 +747,6 @@ bool QMediaRecorder::isMetaDataAvailable() const
     \fn QMediaRecorder::metaDataAvailableChanged(bool available)
 
     Signals that the \a available state of a media object's meta-data has changed.
-    \since 1.0
 */
 
 /*!
@@ -788,7 +754,6 @@ bool QMediaRecorder::isMetaDataAvailable() const
     \brief whether a media object's meta-data is writable.
 
     If this is true the meta-data is writable, otherwise the meta-data is read-only.
-    \since 1.0
 */
 
 bool QMediaRecorder::isMetaDataWritable() const
@@ -804,12 +769,10 @@ bool QMediaRecorder::isMetaDataWritable() const
     \fn QMediaRecorder::metaDataWritableChanged(bool writable)
 
     Signals that the \a writable state of a media object's meta-data has changed.
-    \since 1.0
 */
 
 /*!
     Returns the value associated with a meta-data \a key.
-    \since 1.0
 */
 QVariant QMediaRecorder::metaData(QtMultimedia::MetaData key) const
 {
@@ -825,7 +788,6 @@ QVariant QMediaRecorder::metaData(QtMultimedia::MetaData key) const
 
     \note To ensure that meta data is set corretly, it should be set before starting the recording.
     Once the recording is stopped, any meta data set will be attached to the next recording.
-    \since 1.0
 */
 void QMediaRecorder::setMetaData(QtMultimedia::MetaData key, const QVariant &value)
 {
@@ -837,7 +799,6 @@ void QMediaRecorder::setMetaData(QtMultimedia::MetaData key, const QVariant &val
 
 /*!
     Returns a list of keys there is meta-data available for.
-    \since 1.0
 */
 QList<QtMultimedia::MetaData> QMediaRecorder::availableMetaData() const
 {
@@ -852,7 +813,6 @@ QList<QtMultimedia::MetaData> QMediaRecorder::availableMetaData() const
     \fn QMediaRecorder::metaDataChanged()
 
     Signals that a media object's meta-data has changed.
-    \since 1.0
 */
 
 /*!
@@ -860,7 +820,6 @@ QList<QtMultimedia::MetaData> QMediaRecorder::availableMetaData() const
 
     The naming and type of extended meta-data is not standardized, so the values and meaning
     of keys may vary between backends.
-    \since 1.0
 */
 QVariant QMediaRecorder::extendedMetaData(const QString &key) const
 {
@@ -876,7 +835,6 @@ QVariant QMediaRecorder::extendedMetaData(const QString &key) const
 
     The naming and type of extended meta-data is not standardized, so the values and meaning
     of keys may vary between backends.
-    \since 1.0
 */
 void QMediaRecorder::setExtendedMetaData(const QString &key, const QVariant &value)
 {
@@ -888,7 +846,6 @@ void QMediaRecorder::setExtendedMetaData(const QString &key, const QVariant &val
 
 /*!
     Returns a list of keys there is extended meta-data available for.
-    \since 1.0
 */
 QStringList QMediaRecorder::availableExtendedMetaData() const
 {
diff --git a/src/multimedia/video/qabstractvideobuffer.cpp b/src/multimedia/video/qabstractvideobuffer.cpp
index ee64aeb..5bb3ee5 100644
--- a/src/multimedia/video/qabstractvideobuffer.cpp
+++ b/src/multimedia/video/qabstractvideobuffer.cpp
@@ -64,7 +64,6 @@ namespace
 /*!
     \class QAbstractVideoBuffer
     \brief The QAbstractVideoBuffer class is an abstraction for video data.
-    \since 1.0
     \inmodule QtMultimedia
 
     The QVideoFrame class makes use of a QAbstractVideoBuffer internally to reference a buffer of
@@ -150,7 +149,6 @@ QAbstractVideoBuffer::~QAbstractVideoBuffer()
 /*!
     Returns the type of a video buffer's handle.
 
-    \since 1.0
     \sa handle()
 */
 QAbstractVideoBuffer::HandleType QAbstractVideoBuffer::handleType() const
@@ -163,7 +161,6 @@ QAbstractVideoBuffer::HandleType QAbstractVideoBuffer::handleType() const
 
     Returns the mode a video buffer is mapped in.
 
-    \since 1.0
     \sa map()
 */
 
@@ -192,7 +189,6 @@ QAbstractVideoBuffer::HandleType QAbstractVideoBuffer::handleType() const
     \note Writing to memory that is mapped as read-only is undefined, and may result in changes
     to shared data or crashes.
 
-    \since 1.0
     \sa unmap(), mapMode()
 */
 
@@ -204,7 +200,6 @@ QAbstractVideoBuffer::HandleType QAbstractVideoBuffer::handleType() const
     If the \l {QAbstractVideoBuffer::MapMode}{MapMode} included the \c QAbstractVideoBuffer::WriteOnly
     flag this will write the current content of the mapped memory back to the video frame.
 
-    \since 1.0
     \sa map()
 */
 
@@ -213,7 +208,6 @@ QAbstractVideoBuffer::HandleType QAbstractVideoBuffer::handleType() const
 
     The type of the handle is given by handleType() function.
 
-    \since 1.0
     \sa handleType()
 */
 QVariant QAbstractVideoBuffer::handle() const
diff --git a/src/multimedia/video/qabstractvideosurface.cpp b/src/multimedia/video/qabstractvideosurface.cpp
index 63ffc14..fd4465b 100644
--- a/src/multimedia/video/qabstractvideosurface.cpp
+++ b/src/multimedia/video/qabstractvideosurface.cpp
@@ -81,7 +81,6 @@ public:
 /*!
     \class QAbstractVideoSurface
     \brief The QAbstractVideoSurface class is a base class for video presentation surfaces.
-    \since 1.0
     \inmodule QtMultimedia
 
     The QAbstractVideoSurface class defines the standard interface that video producers use to
@@ -160,14 +159,12 @@ QAbstractVideoSurface::~QAbstractVideoSurface()
     that can be mapped in read-only mode.
 
     Types that are first in the list can be assumed to be faster to render.
-    \since 1.0
 */
 
 /*!
     Tests a video surface \a format to determine if a surface can accept it.
 
     Returns true if the format is supported by the surface, and false otherwise.
-    \since 1.0
 */
 bool QAbstractVideoSurface::isFormatSupported(const QVideoSurfaceFormat &format) const
 {
@@ -185,7 +182,6 @@ bool QAbstractVideoSurface::isFormatSupported(const QVideoSurfaceFormat &format)
 
     If the format is already supported it will be returned unchanged, or if there is no similar
     supported format an invalid format will be returned.
-    \since 1.0
 */
 QVideoSurfaceFormat QAbstractVideoSurface::nearestFormat(const QVideoSurfaceFormat &format) const
 {
@@ -199,13 +195,11 @@ QVideoSurfaceFormat QAbstractVideoSurface::nearestFormat(const QVideoSurfaceForm
 
     Signals that the set of formats supported by a video surface has changed.
 
-    \since 1.0
     \sa supportedPixelFormats(), isFormatSupported()
 */
 
 /*!
     Returns the format of a video surface.
-    \since 1.0
 */
 QVideoSurfaceFormat QAbstractVideoSurface::surfaceFormat() const
 {
@@ -218,7 +212,6 @@ QVideoSurfaceFormat QAbstractVideoSurface::surfaceFormat() const
 
     Signals that the configured \a format of a video surface has changed.
 
-    \since 1.0
     \sa surfaceFormat(), start()
 */
 
@@ -228,7 +221,6 @@ QVideoSurfaceFormat QAbstractVideoSurface::surfaceFormat() const
     Returns true if the surface was started, and false if an error occurred.
 
     \note You must call the base class implementation of start() at the end of your implementation.
-    \since 1.0
     \sa isActive(), stop()
 */
 bool QAbstractVideoSurface::start(const QVideoSurfaceFormat &format)
@@ -252,7 +244,6 @@ bool QAbstractVideoSurface::start(const QVideoSurfaceFormat &format)
     Stops a video surface presenting frames and releases any resources acquired in start().
 
     \note You must call the base class implementation of stop() at the start of your implementation.
-    \since 1.0
     \sa isActive(), start()
 */
 void QAbstractVideoSurface::stop()
@@ -271,7 +262,6 @@ void QAbstractVideoSurface::stop()
     Indicates whether a video surface has been started.
 
     Returns true if the surface has been started, and false otherwise.
-    \since 1.0
 */
 bool QAbstractVideoSurface::isActive() const
 {
@@ -284,7 +274,6 @@ bool QAbstractVideoSurface::isActive() const
 
     Signals that the \a active state of a video surface has changed.
 
-    \since 1.0
     \sa isActive(), start(), stop()
 */
 
@@ -306,7 +295,6 @@ bool QAbstractVideoSurface::isActive() const
     A video surface must be in the started state for present() to succeed, and the format of the
     video frame must be compatible with the current video surface format.
 
-    \since 1.0
     \sa error()
 */
 
@@ -315,7 +303,6 @@ bool QAbstractVideoSurface::isActive() const
 
     If a surface fails to start(), or stops unexpectedly this function can be called to discover
     what error occurred.
-    \since 1.0
 */
 
 QAbstractVideoSurface::Error QAbstractVideoSurface::error() const
@@ -329,7 +316,6 @@ QAbstractVideoSurface::Error QAbstractVideoSurface::error() const
 
     This can be called by implementors of this interface to communicate
     what the most recent error was.
-    \since 1.0
 */
 void QAbstractVideoSurface::setError(Error error)
 {
@@ -345,7 +331,6 @@ void QAbstractVideoSurface::setError(Error error)
    can render with optimal quality and/or performance.
 
    The native resolution is not always known and can be changed during playback.
-    \since 1.1
  */
 QSize QAbstractVideoSurface::nativeResolution() const
 {
@@ -358,7 +343,6 @@ QSize QAbstractVideoSurface::nativeResolution() const
 
     This function can be called by implementors of this interface to specify
     to frame producers what the native resolution of this surface is.
-    \since 1.1
  */
 void QAbstractVideoSurface::setNativeResolution(const QSize &resolution)
 {
@@ -374,7 +358,6 @@ void QAbstractVideoSurface::setNativeResolution(const QSize &resolution)
     \fn QAbstractVideoSurface::nativeResolutionChanged(const QSize &resolution);
 
     Signals the native \a resolution of video surface has changed.
-    \since 1.1
 */
 
 #ifndef QT_NO_DEBUG_STREAM
diff --git a/src/multimedia/video/qmemoryvideobuffer.cpp b/src/multimedia/video/qmemoryvideobuffer.cpp
index 668658e..ba56a5a 100644
--- a/src/multimedia/video/qmemoryvideobuffer.cpp
+++ b/src/multimedia/video/qmemoryvideobuffer.cpp
@@ -90,7 +90,6 @@ QMemoryVideoBuffer::~QMemoryVideoBuffer()
 
 /*!
     \reimp
-    \since 1.1
 */
 QAbstractVideoBuffer::MapMode QMemoryVideoBuffer::mapMode() const
 {
@@ -99,7 +98,6 @@ QAbstractVideoBuffer::MapMode QMemoryVideoBuffer::mapMode() const
 
 /*!
     \reimp
-    \since 1.1
 */
 uchar *QMemoryVideoBuffer::map(MapMode mode, int *numBytes, int *bytesPerLine)
 {
@@ -122,7 +120,6 @@ uchar *QMemoryVideoBuffer::map(MapMode mode, int *numBytes, int *bytesPerLine)
 
 /*!
     \reimp
-    \since 1.1
 */
 void QMemoryVideoBuffer::unmap()
 {
diff --git a/src/multimedia/video/qvideoframe.cpp b/src/multimedia/video/qvideoframe.cpp
index c58b6eb..a363790 100644
--- a/src/multimedia/video/qvideoframe.cpp
+++ b/src/multimedia/video/qvideoframe.cpp
@@ -124,7 +124,6 @@ private:
 /*!
     \class QVideoFrame
     \brief The QVideoFrame class represents a frame of video data.
-    \since 1.0
     \inmodule QtMultimedia
 
     A QVideoFrame encapsulates the pixel data of a video frame, and information about the frame.
@@ -309,7 +308,6 @@ QVideoFrame::QVideoFrame()
     Constructs a video frame from a \a buffer with the given pixel \a format and \a size in pixels.
 
     \note This doesn't increment the reference count of the video buffer.
-    \since 1.0
 */
 QVideoFrame::QVideoFrame(
         QAbstractVideoBuffer *buffer, const QSize &size, PixelFormat format)
@@ -323,7 +321,6 @@ QVideoFrame::QVideoFrame(
 
     The \a bytesPerLine (stride) is the length of each scan line in bytes, and \a bytes is the total
     number of bytes that must be allocated for the frame.
-    \since 1.0
 */
 QVideoFrame::QVideoFrame(int bytes, const QSize &size, int bytesPerLine, PixelFormat format)
     : d(new QVideoFramePrivate(size, format))
@@ -344,7 +341,6 @@ QVideoFrame::QVideoFrame(int bytes, const QSize &size, int bytesPerLine, PixelFo
     \note This will construct an invalid video frame if there is no frame type equivalent to the
     image format.
 
-    \since 1.0
     \sa pixelFormatFromImageFormat()
 */
 QVideoFrame::QVideoFrame(const QImage &image)
@@ -359,7 +355,6 @@ QVideoFrame::QVideoFrame(const QImage &image)
     Constructs a shallow copy of \a other.  Since QVideoFrame is
     explicitly shared, these two instances will reflect the same frame.
 
-    \since 1.0
 */
 QVideoFrame::QVideoFrame(const QVideoFrame &other)
     : d(other.d)
@@ -370,7 +365,6 @@ QVideoFrame::QVideoFrame(const QVideoFrame &other)
     Assigns the contents of \a other to this video frame.  Since QVideoFrame is
     explicitly shared, these two instances will reflect the same frame.
 
-    \since 1.0
 */
 QVideoFrame &QVideoFrame::operator =(const QVideoFrame &other)
 {
@@ -392,7 +386,6 @@ QVideoFrame::~QVideoFrame()
     An invalid frame has no video buffer associated with it.
 
     Returns true if the frame is valid, and false if it is not.
-    \since 1.0
 */
 bool QVideoFrame::isValid() const
 {
@@ -401,7 +394,6 @@ bool QVideoFrame::isValid() const
 
 /*!
     Returns the color format of a video frame.
-    \since 1.0
 */
 QVideoFrame::PixelFormat QVideoFrame::pixelFormat() const
 {
@@ -411,7 +403,6 @@ QVideoFrame::PixelFormat QVideoFrame::pixelFormat() const
 /*!
     Returns the type of a video frame's handle.
 
-    \since 1.0
 */
 QAbstractVideoBuffer::HandleType QVideoFrame::handleType() const
 {
@@ -420,7 +411,6 @@ QAbstractVideoBuffer::HandleType QVideoFrame::handleType() const
 
 /*!
     Returns the dimensions of a video frame.
-    \since 1.0
 */
 QSize QVideoFrame::size() const
 {
@@ -429,7 +419,6 @@ QSize QVideoFrame::size() const
 
 /*!
     Returns the width of a video frame.
-    \since 1.0
 */
 int QVideoFrame::width() const
 {
@@ -438,7 +427,6 @@ int QVideoFrame::width() const
 
 /*!
     Returns the height of a video frame.
-    \since 1.0
 */
 int QVideoFrame::height() const
 {
@@ -449,7 +437,6 @@ int QVideoFrame::height() const
     Returns the field an interlaced video frame belongs to.
 
     If the video is not interlaced this will return WholeFrame.
-    \since 1.0
 */
 QVideoFrame::FieldType QVideoFrame::fieldType() const
 {
@@ -458,7 +445,6 @@ QVideoFrame::FieldType QVideoFrame::fieldType() const
 
 /*!
     Sets the \a field an interlaced video frame belongs to.
-    \since 1.0
 */
 void QVideoFrame::setFieldType(QVideoFrame::FieldType field)
 {
@@ -474,7 +460,6 @@ void QVideoFrame::setFieldType(QVideoFrame::FieldType field)
     Returns true if the contents of the video frame are mapped to system memory, and false
     otherwise.
 
-    \since 1.0
     \sa mapMode(), QAbstractVideoBuffer::MapMode
 */
 
@@ -495,7 +480,6 @@ bool QVideoFrame::isMapped() const
     Depending on the buffer implementation the changes may be persisted, or worse alter a shared
     buffer.
 
-    \since 1.0
     \sa mapMode(), QAbstractVideoBuffer::MapMode
 */
 bool QVideoFrame::isWritable() const
@@ -512,7 +496,6 @@ bool QVideoFrame::isWritable() const
     Returns true if the contents of the mapped memory were read from the video frame, and false
     otherwise.
 
-    \since 1.0
     \sa mapMode(), QAbstractVideoBuffer::MapMode
 */
 bool QVideoFrame::isReadable() const
@@ -523,7 +506,6 @@ bool QVideoFrame::isReadable() const
 /*!
     Returns the mode a video frame was mapped to system memory in.
 
-    \since 1.0
     \sa map(), QAbstractVideoBuffer::MapMode
 */
 QAbstractVideoBuffer::MapMode QVideoFrame::mapMode() const
@@ -559,7 +541,6 @@ QAbstractVideoBuffer::MapMode QVideoFrame::mapMode() const
 
     Returns true if the frame was mapped to memory in the given \a mode and false otherwise.
 
-    \since 1.0
     \sa unmap(), mapMode(), bits()
 */
 bool QVideoFrame::map(QAbstractVideoBuffer::MapMode mode)
@@ -605,7 +586,6 @@ bool QVideoFrame::map(QAbstractVideoBuffer::MapMode mode)
 
     unmap() should not be called if map() function failed.
 
-    \since 1.0
     \sa map()
 */
 void QVideoFrame::unmap()
@@ -639,7 +619,6 @@ void QVideoFrame::unmap()
 
     This value is only valid while the frame data is \l {map()}{mapped}.
 
-    \since 1.0
     \sa bits(), map(), mappedBytes()
 */
 int QVideoFrame::bytesPerLine() const
@@ -656,7 +635,6 @@ int QVideoFrame::bytesPerLine() const
     are only guaranteed to have been persisted when unmap() is called and when the
     buffer has been mapped for writing.
 
-    \since 1.0
     \sa map(), mappedBytes(), bytesPerLine()
 */
 uchar *QVideoFrame::bits()
@@ -672,7 +650,6 @@ uchar *QVideoFrame::bits()
     If the buffer was not mapped with read access, the contents of this
     buffer will initially be uninitialized.
 
-    \since 1.0
     \sa map(), mappedBytes(), bytesPerLine()
 */
 const uchar *QVideoFrame::bits() const
@@ -685,7 +662,6 @@ const uchar *QVideoFrame::bits() const
 
     This value is only valid while the frame data is \l {map()}{mapped}.
 
-    \since 1.0
     \sa map()
 */
 int QVideoFrame::mappedBytes() const
@@ -698,7 +674,6 @@ int QVideoFrame::mappedBytes() const
 
     For an OpenGL texture this would be the texture ID.
 
-    \since 1.0
     \sa QAbstractVideoBuffer::handle()
 */
 QVariant QVideoFrame::handle() const
@@ -711,7 +686,6 @@ QVariant QVideoFrame::handle() const
 
     An invalid time is represented as -1.
 
-    \since 1.0
 */
 qint64 QVideoFrame::startTime() const
 {
@@ -723,7 +697,6 @@ qint64 QVideoFrame::startTime() const
 
     An invalid time is represented as -1.
 
-    \since 1.0
 */
 void QVideoFrame::setStartTime(qint64 time)
 {
@@ -735,7 +708,6 @@ void QVideoFrame::setStartTime(qint64 time)
 
     An invalid time is represented as -1.
 
-    \since 1.0
 */
 qint64 QVideoFrame::endTime() const
 {
@@ -747,7 +719,6 @@ qint64 QVideoFrame::endTime() const
 
     An invalid time is represented as -1.
 
-    \since 1.0
 */
 void QVideoFrame::setEndTime(qint64 time)
 {
@@ -799,7 +770,6 @@ void QVideoFrame::setMetaData(const QString &key, const QVariant &value)
 
     \note In general \l QImage does not handle YUV formats.
 
-    \since 1.0
 */
 QVideoFrame::PixelFormat QVideoFrame::pixelFormatFromImageFormat(QImage::Format format)
 {
@@ -829,7 +799,6 @@ QVideoFrame::PixelFormat QVideoFrame::pixelFormatFromImageFormat(QImage::Format
 
     \note In general \l QImage does not handle YUV formats.
 
-    \since 1.0
 */
 QImage::Format QVideoFrame::imageFormatFromPixelFormat(PixelFormat format)
 {
diff --git a/src/multimedia/video/qvideosurfaceformat.cpp b/src/multimedia/video/qvideosurfaceformat.cpp
index e93c4d9..b37e942 100644
--- a/src/multimedia/video/qvideosurfaceformat.cpp
+++ b/src/multimedia/video/qvideosurfaceformat.cpp
@@ -151,7 +151,6 @@ public:
     \class QVideoSurfaceFormat
     \brief The QVideoSurfaceFormat class specifies the stream format of a video presentation
     surface.
-    \since 1.0
     \inmodule QtMultimedia
 
     A video surface presents a stream of video frames.  The surface's format describes the type of
@@ -223,7 +222,6 @@ QVideoSurfaceFormat::QVideoSurfaceFormat()
 /*!
     Contructs a description of stream which receives stream of \a type buffers with given frame
     \a size and pixel \a format.
-    \since 1.0
 */
 QVideoSurfaceFormat::QVideoSurfaceFormat(
         const QSize& size, QVideoFrame::PixelFormat format, QAbstractVideoBuffer::HandleType type)
@@ -233,7 +231,6 @@ QVideoSurfaceFormat::QVideoSurfaceFormat(
 
 /*!
     Constructs a copy of \a other.
-    \since 1.0
 */
 QVideoSurfaceFormat::QVideoSurfaceFormat(const QVideoSurfaceFormat &other)
     : d(other.d)
@@ -242,7 +239,6 @@ QVideoSurfaceFormat::QVideoSurfaceFormat(const QVideoSurfaceFormat &other)
 
 /*!
     Assigns the values of \a other to this object.
-    \since 1.0
 */
 QVideoSurfaceFormat &QVideoSurfaceFormat::operator =(const QVideoSurfaceFormat &other)
 {
@@ -262,7 +258,6 @@ QVideoSurfaceFormat::~QVideoSurfaceFormat()
     Identifies if a video surface format has a valid pixel format and frame size.
 
     Returns true if the format is valid, and false otherwise.
-    \since 1.0
 */
 bool QVideoSurfaceFormat::isValid() const
 {
@@ -271,7 +266,6 @@ bool QVideoSurfaceFormat::isValid() const
 
 /*!
     Returns true if \a other is the same as this video format, and false if they are different.
-    \since 1.0
 */
 bool QVideoSurfaceFormat::operator ==(const QVideoSurfaceFormat &other) const
 {
@@ -280,7 +274,6 @@ bool QVideoSurfaceFormat::operator ==(const QVideoSurfaceFormat &other) const
 
 /*!
     Returns true if \a other is different to this video format, and false if they are the same.
-    \since 1.0
 */
 bool QVideoSurfaceFormat::operator !=(const QVideoSurfaceFormat &other) const
 {
@@ -289,7 +282,6 @@ bool QVideoSurfaceFormat::operator !=(const QVideoSurfaceFormat &other) const
 
 /*!
     Returns the pixel format of frames in a video stream.
-    \since 1.0
 */
 QVideoFrame::PixelFormat QVideoSurfaceFormat::pixelFormat() const
 {
@@ -303,7 +295,6 @@ QVideoFrame::PixelFormat QVideoSurfaceFormat::pixelFormat() const
     provided they can be \l {QAbstractVideoBuffer::map()}{mapped} with the
     QAbstractVideoBuffer::ReadOnly flag.  If the handleType() is not QAbstractVideoBuffer::NoHandle
     then the handle type of the buffer must be the same as that of the surface format.
-    \since 1.0
 */
 QAbstractVideoBuffer::HandleType QVideoSurfaceFormat::handleType() const
 {
@@ -314,7 +305,6 @@ QAbstractVideoBuffer::HandleType QVideoSurfaceFormat::handleType() const
     Returns the dimensions of frames in a video stream.
 
     \sa frameWidth(), frameHeight()
-    \since 1.0
 */
 QSize QVideoSurfaceFormat::frameSize() const
 {
@@ -325,7 +315,6 @@ QSize QVideoSurfaceFormat::frameSize() const
     Returns the width of frames in a video stream.
 
     \sa frameSize(), frameHeight()
-    \since 1.0
 */
 int QVideoSurfaceFormat::frameWidth() const
 {
@@ -334,7 +323,6 @@ int QVideoSurfaceFormat::frameWidth() const
 
 /*!
     Returns the height of frame in a video stream.
-    \since 1.0
 */
 int QVideoSurfaceFormat::frameHeight() const
 {
@@ -345,7 +333,6 @@ int QVideoSurfaceFormat::frameHeight() const
     Sets the size of frames in a video stream to \a size.
 
     This will reset the viewport() to fill the entire frame.
-    \since 1.0
 */
 void QVideoSurfaceFormat::setFrameSize(const QSize &size)
 {
@@ -359,7 +346,6 @@ void QVideoSurfaceFormat::setFrameSize(const QSize &size)
     Sets the \a width and \a height of frames in a video stream.
 
     This will reset the viewport() to fill the entire frame.
-    \since 1.0
 */
 void QVideoSurfaceFormat::setFrameSize(int width, int height)
 {
@@ -373,7 +359,6 @@ void QVideoSurfaceFormat::setFrameSize(int width, int height)
     The viewport is the region of a video frame that is actually displayed.
 
     By default the viewport covers an entire frame.
-    \since 1.0
 */
 QRect QVideoSurfaceFormat::viewport() const
 {
@@ -382,7 +367,6 @@ QRect QVideoSurfaceFormat::viewport() const
 
 /*!
     Sets the viewport of a video stream to \a viewport.
-    \since 1.0
 */
 void QVideoSurfaceFormat::setViewport(const QRect &viewport)
 {
@@ -391,7 +375,6 @@ void QVideoSurfaceFormat::setViewport(const QRect &viewport)
 
 /*!
     Returns the direction of scan lines.
-    \since 1.0
 */
 QVideoSurfaceFormat::Direction QVideoSurfaceFormat::scanLineDirection() const
 {
@@ -400,7 +383,6 @@ QVideoSurfaceFormat::Direction QVideoSurfaceFormat::scanLineDirection() const
 
 /*!
     Sets the \a direction of scan lines.
-    \since 1.0
 */
 void QVideoSurfaceFormat::setScanLineDirection(Direction direction)
 {
@@ -409,7 +391,6 @@ void QVideoSurfaceFormat::setScanLineDirection(Direction direction)
 
 /*!
     Returns the frame rate of a video stream in frames per second.
-    \since 1.0
 */
 qreal QVideoSurfaceFormat::frameRate() const
 {
@@ -418,7 +399,6 @@ qreal QVideoSurfaceFormat::frameRate() const
 
 /*!
     Sets the frame \a rate of a video stream in frames per second.
-    \since 1.0
 */
 void QVideoSurfaceFormat::setFrameRate(qreal rate)
 {
@@ -427,7 +407,6 @@ void QVideoSurfaceFormat::setFrameRate(qreal rate)
 
 /*!
     Returns a video stream's pixel aspect ratio.
-    \since 1.0
 */
 QSize QVideoSurfaceFormat::pixelAspectRatio() const
 {
@@ -436,7 +415,6 @@ QSize QVideoSurfaceFormat::pixelAspectRatio() const
 
 /*!
     Sets a video stream's pixel aspect \a ratio.
-    \since 1.0
 */
 void QVideoSurfaceFormat::setPixelAspectRatio(const QSize &ratio)
 {
@@ -447,7 +425,6 @@ void QVideoSurfaceFormat::setPixelAspectRatio(const QSize &ratio)
     \overload
 
     Sets the \a horizontal and \a vertical elements of a video stream's pixel aspect ratio.
-    \since 1.0
 */
 void QVideoSurfaceFormat::setPixelAspectRatio(int horizontal, int vertical)
 {
@@ -456,7 +433,6 @@ void QVideoSurfaceFormat::setPixelAspectRatio(int horizontal, int vertical)
 
 /*!
     Returns the Y'CbCr color space of a video stream.
-    \since 1.0
 */
 QVideoSurfaceFormat::YCbCrColorSpace QVideoSurfaceFormat::yCbCrColorSpace() const
 {
@@ -466,7 +442,6 @@ QVideoSurfaceFormat::YCbCrColorSpace QVideoSurfaceFormat::yCbCrColorSpace() cons
 /*!
     Sets the Y'CbCr color \a space of a video stream.
     It is only used with raw YUV frame types.
-    \since 1.0
 */
 void QVideoSurfaceFormat::setYCbCrColorSpace(QVideoSurfaceFormat::YCbCrColorSpace space)
 {
@@ -477,7 +452,6 @@ void QVideoSurfaceFormat::setYCbCrColorSpace(QVideoSurfaceFormat::YCbCrColorSpac
     Returns a suggested size in pixels for the video stream.
 
     This is the size of the viewport scaled according to the pixel aspect ratio.
-    \since 1.0
 */
 QSize QVideoSurfaceFormat::sizeHint() const
 {
@@ -491,7 +465,6 @@ QSize QVideoSurfaceFormat::sizeHint() const
 
 /*!
     Returns a list of video format dynamic property names.
-    \since 1.0
 */
 QList<QByteArray> QVideoSurfaceFormat::propertyNames() const
 {
@@ -511,7 +484,6 @@ QList<QByteArray> QVideoSurfaceFormat::propertyNames() const
 
 /*!
     Returns the value of the video format's \a name property.
-    \since 1.0
 */
 QVariant QVideoSurfaceFormat::property(const char *name) const
 {
@@ -552,7 +524,6 @@ QVariant QVideoSurfaceFormat::property(const char *name) const
 
     Trying to set a read only property will be ignored.
 
-    \since 1.0
 */
 void QVideoSurfaceFormat::setProperty(const char *name, const QVariant &value)
 {
diff --git a/src/multimediawidgets/qcameraviewfinder.cpp b/src/multimediawidgets/qcameraviewfinder.cpp
index ca7dc31..8eec20a 100644
--- a/src/multimediawidgets/qcameraviewfinder.cpp
+++ b/src/multimediawidgets/qcameraviewfinder.cpp
@@ -58,7 +58,6 @@ QT_BEGIN_NAMESPACE
 
     \inmodule QtMultimedia
     \ingroup camera
-    \since 1.1
 
     \snippet doc/src/snippets/multimedia-snippets/camera.cpp Camera
 
@@ -94,7 +93,6 @@ QCameraViewfinder::~QCameraViewfinder()
 
 /*!
   \reimp
-  \since 1.1
 */
 QMediaObject *QCameraViewfinder::mediaObject() const
 {
@@ -103,7 +101,6 @@ QMediaObject *QCameraViewfinder::mediaObject() const
 
 /*!
   \reimp
-  \since 1.1
 */
 bool QCameraViewfinder::setMediaObject(QMediaObject *object)
 {
diff --git a/src/multimediawidgets/qeglimagetexturesurface.cpp b/src/multimediawidgets/qeglimagetexturesurface.cpp
index 3d5f35a..67b50c4 100644
--- a/src/multimediawidgets/qeglimagetexturesurface.cpp
+++ b/src/multimediawidgets/qeglimagetexturesurface.cpp
@@ -60,7 +60,6 @@ QAbstractVideoBuffer::HandleType(QAbstractVideoBuffer::UserHandle+3434);
 /*!
     \class QOmapFbVideoSurface
     \internal
-    \since 1.2
 */
 
 /*!
@@ -87,7 +86,6 @@ QEglImageTextureSurface::~QEglImageTextureSurface()
 }
 
 /*!
-    \since 1.2
 */
 QList<QVideoFrame::PixelFormat> QEglImageTextureSurface::supportedPixelFormats(
     QAbstractVideoBuffer::HandleType handleType) const
@@ -129,7 +127,6 @@ static const char* qt_glsl_eglTextureShaderProgram =
 
 
 /*!
-    \since 1.2
 */
 bool QEglImageTextureSurface::start(const QVideoSurfaceFormat &format)
 {
@@ -228,7 +225,6 @@ bool QEglImageTextureSurface::start(const QVideoSurfaceFormat &format)
 }
 
 /*!
-    \since 1.2
 */
 void QEglImageTextureSurface::stop()
 {
@@ -270,7 +266,6 @@ void QEglImageTextureSurface::stop()
 }
 
 /*!
-    \since 1.2
 */
 bool QEglImageTextureSurface::present(const QVideoFrame &frame)
 {
@@ -307,7 +302,6 @@ bool QEglImageTextureSurface::present(const QVideoFrame &frame)
 }
 
 /*!
-    \since 1.2
 */
 int QEglImageTextureSurface::brightness() const
 {
@@ -315,7 +309,6 @@ int QEglImageTextureSurface::brightness() const
 }
 
 /*!
-    \since 1.2
 */
 void QEglImageTextureSurface::setBrightness(int brightness)
 {
@@ -323,7 +316,6 @@ void QEglImageTextureSurface::setBrightness(int brightness)
 }
 
 /*!
-    \since 1.2
 */
 int QEglImageTextureSurface::contrast() const
 {
@@ -331,7 +323,6 @@ int QEglImageTextureSurface::contrast() const
 }
 
 /*!
-    \since 1.2
 */
 void QEglImageTextureSurface::setContrast(int contrast)
 {
@@ -339,7 +330,6 @@ void QEglImageTextureSurface::setContrast(int contrast)
 }
 
 /*!
-    \since 1.2
 */
 int QEglImageTextureSurface::hue() const
 {
@@ -347,7 +337,6 @@ int QEglImageTextureSurface::hue() const
 }
 
 /*!
-    \since 1.2
 */
 void QEglImageTextureSurface::setHue(int hue)
 {
@@ -355,7 +344,6 @@ void QEglImageTextureSurface::setHue(int hue)
 }
 
 /*!
-    \since 1.2
 */
 int QEglImageTextureSurface::saturation() const
 {
@@ -363,7 +351,6 @@ int QEglImageTextureSurface::saturation() const
 }
 
 /*!
-    \since 1.2
 */
 void QEglImageTextureSurface::setSaturation(int saturation)
 {
@@ -371,7 +358,6 @@ void QEglImageTextureSurface::setSaturation(int saturation)
 }
 
 /*!
-    \since 1.2
 */
 bool QEglImageTextureSurface::isReady() const
 {
@@ -379,7 +365,6 @@ bool QEglImageTextureSurface::isReady() const
 }
 
 /*!
-    \since 1.2
 */
 void QEglImageTextureSurface::setReady(bool ready)
 {
@@ -389,7 +374,6 @@ void QEglImageTextureSurface::setReady(bool ready)
 }
 
 /*!
-    \since 1.2
 */
 void QEglImageTextureSurface::paint(QPainter *painter, const QRectF &target, const QRectF &sourceRect)
 {
@@ -508,11 +492,9 @@ void QEglImageTextureSurface::paint(QPainter *painter, const QRectF &target, con
 
 /*!
     \fn QOmapFbVideoSurface::frameChanged()
-    \since 1.2
 */
 
 /*!
-    \since 1.2
 */
 const QGLContext *QEglImageTextureSurface::glContext() const
 {
@@ -520,7 +502,6 @@ const QGLContext *QEglImageTextureSurface::glContext() const
 }
 
 /*!
-    \since 1.2
 */
 void QEglImageTextureSurface::setGLContext(QGLContext *context)
 {
diff --git a/src/multimediawidgets/qgraphicsvideoitem.cpp b/src/multimediawidgets/qgraphicsvideoitem.cpp
index 4687f99..7c8135c 100644
--- a/src/multimediawidgets/qgraphicsvideoitem.cpp
+++ b/src/multimediawidgets/qgraphicsvideoitem.cpp
@@ -175,7 +175,6 @@ void QGraphicsVideoItemPrivate::_q_serviceDestroyed()
 
     \inmodule QtMultimedia
     \ingroup multimedia
-    \since 1.0
 
     Attaching a QGraphicsVideoItem to a QMediaObject allows it to display
     the video or image output of that media object.  A QGraphicsVideoItem
@@ -227,7 +226,6 @@ QGraphicsVideoItem::~QGraphicsVideoItem()
     \property QGraphicsVideoItem::mediaObject
     \brief the media object which provides the video displayed by a graphics
     item.
-    \since 1.0
 */
 
 QMediaObject *QGraphicsVideoItem::mediaObject() const
@@ -237,7 +235,6 @@ QMediaObject *QGraphicsVideoItem::mediaObject() const
 
 /*!
   \internal
-  \since 1.0
 */
 bool QGraphicsVideoItem::setMediaObject(QMediaObject *object)
 {
@@ -283,7 +280,6 @@ bool QGraphicsVideoItem::setMediaObject(QMediaObject *object)
 /*!
     \property QGraphicsVideoItem::aspectRatioMode
     \brief how a video is scaled to fit the graphics item's size.
-    \since 1.0
 */
 
 Qt::AspectRatioMode QGraphicsVideoItem::aspectRatioMode() const
@@ -305,7 +301,6 @@ void QGraphicsVideoItem::setAspectRatioMode(Qt::AspectRatioMode mode)
 
     QGraphicsVideoItem will draw video using the offset for its top left
     corner.
-    \since 1.0
 */
 
 QPointF QGraphicsVideoItem::offset() const
@@ -327,7 +322,6 @@ void QGraphicsVideoItem::setOffset(const QPointF &offset)
 
     QGraphicsVideoItem will draw video scaled to fit size according to its
     fillMode.
-    \since 1.0
 */
 
 QSizeF QGraphicsVideoItem::size() const
@@ -346,7 +340,6 @@ void QGraphicsVideoItem::setSize(const QSizeF &size)
 /*!
     \property QGraphicsVideoItem::nativeSize
     \brief the native size of the video.
-    \since 1.0
 */
 
 QSizeF QGraphicsVideoItem::nativeSize() const
@@ -358,12 +351,10 @@ QSizeF QGraphicsVideoItem::nativeSize() const
     \fn QGraphicsVideoItem::nativeSizeChanged(const QSizeF &size)
 
     Signals that the native \a size of the video has changed.
-    \since 1.0
 */
 
 /*!
     \reimp
-    \since 1.0
 */
 QRectF QGraphicsVideoItem::boundingRect() const
 {
@@ -372,7 +363,6 @@ QRectF QGraphicsVideoItem::boundingRect() const
 
 /*!
     \reimp
-    \since 1.0
 */
 void QGraphicsVideoItem::paint(
         QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget)
@@ -409,7 +399,6 @@ void QGraphicsVideoItem::paint(
     \reimp
 
     \internal
-    \since 1.0
 */
 QVariant QGraphicsVideoItem::itemChange(GraphicsItemChange change, const QVariant &value)
 {
@@ -418,7 +407,6 @@ QVariant QGraphicsVideoItem::itemChange(GraphicsItemChange change, const QVarian
 
 /*!
   \internal
-    \since 1.0
 */
 void QGraphicsVideoItem::timerEvent(QTimerEvent *event)
 {
diff --git a/src/multimediawidgets/qpaintervideosurface.cpp b/src/multimediawidgets/qpaintervideosurface.cpp
index c893c14..6f6eefc 100644
--- a/src/multimediawidgets/qpaintervideosurface.cpp
+++ b/src/multimediawidgets/qpaintervideosurface.cpp
@@ -1303,7 +1303,6 @@ QAbstractVideoSurface::Error QVideoSurfaceGlslPainter::paint(
 
 /*!
     \class QPainterVideoSurface
-    \since 1.0
     \internal
 */
 
@@ -1338,7 +1337,6 @@ QPainterVideoSurface::~QPainterVideoSurface()
 }
 
 /*!
-    \since 1.0
 */
 QList<QVideoFrame::PixelFormat> QPainterVideoSurface::supportedPixelFormats(
         QAbstractVideoBuffer::HandleType handleType) const
@@ -1350,7 +1348,6 @@ QList<QVideoFrame::PixelFormat> QPainterVideoSurface::supportedPixelFormats(
 }
 
 /*!
-    \since 1.0
 */
 bool QPainterVideoSurface::isFormatSupported(
         const QVideoSurfaceFormat &format, QVideoSurfaceFormat *similar) const
@@ -1362,7 +1359,6 @@ bool QPainterVideoSurface::isFormatSupported(
 }
 
 /*!
-    \since 1.0
 */
 bool QPainterVideoSurface::start(const QVideoSurfaceFormat &format)
 {
@@ -1396,7 +1392,6 @@ bool QPainterVideoSurface::start(const QVideoSurfaceFormat &format)
 }
 
 /*!
-    \since 1.0
 */
 void QPainterVideoSurface::stop()
 {
@@ -1409,7 +1404,6 @@ void QPainterVideoSurface::stop()
 }
 
 /*!
-    \since 1.0
 */
 bool QPainterVideoSurface::present(const QVideoFrame &frame)
 {
@@ -1440,7 +1434,6 @@ bool QPainterVideoSurface::present(const QVideoFrame &frame)
 }
 
 /*!
-    \since 1.0
 */
 int QPainterVideoSurface::brightness() const
 {
@@ -1448,7 +1441,6 @@ int QPainterVideoSurface::brightness() const
 }
 
 /*!
-    \since 1.0
 */
 void QPainterVideoSurface::setBrightness(int brightness)
 {
@@ -1458,7 +1450,6 @@ void QPainterVideoSurface::setBrightness(int brightness)
 }
 
 /*!
-    \since 1.0
 */
 int QPainterVideoSurface::contrast() const
 {
@@ -1466,7 +1457,6 @@ int QPainterVideoSurface::contrast() const
 }
 
 /*!
-    \since 1.0
 */
 void QPainterVideoSurface::setContrast(int contrast)
 {
@@ -1476,7 +1466,6 @@ void QPainterVideoSurface::setContrast(int contrast)
 }
 
 /*!
-    \since 1.0
 */
 int QPainterVideoSurface::hue() const
 {
@@ -1484,7 +1473,6 @@ int QPainterVideoSurface::hue() const
 }
 
 /*!
-    \since 1.0
 */
 void QPainterVideoSurface::setHue(int hue)
 {
@@ -1494,7 +1482,6 @@ void QPainterVideoSurface::setHue(int hue)
 }
 
 /*!
-    \since 1.0
 */
 int QPainterVideoSurface::saturation() const
 {
@@ -1502,7 +1489,6 @@ int QPainterVideoSurface::saturation() const
 }
 
 /*!
-    \since 1.0
 */
 void QPainterVideoSurface::setSaturation(int saturation)
 {
@@ -1512,7 +1498,6 @@ void QPainterVideoSurface::setSaturation(int saturation)
 }
 
 /*!
-    \since 1.0
 */
 bool QPainterVideoSurface::isReady() const
 {
@@ -1520,7 +1505,6 @@ bool QPainterVideoSurface::isReady() const
 }
 
 /*!
-    \since 1.0
 */
 void QPainterVideoSurface::setReady(bool ready)
 {
@@ -1528,7 +1512,6 @@ void QPainterVideoSurface::setReady(bool ready)
 }
 
 /*!
-    \since 1.0
 */
 void QPainterVideoSurface::paint(QPainter *painter, const QRectF &target, const QRectF &source)
 {
@@ -1558,7 +1541,6 @@ void QPainterVideoSurface::paint(QPainter *painter, const QRectF &target, const
 
 /*!
     \fn QPainterVideoSurface::frameChanged()
-    \since 1.0
 */
 
 #if !defined(QT_NO_OPENGL) && !defined(QT_OPENGL_ES_1_CL) && !defined(QT_OPENGL_ES_1)
@@ -1631,7 +1613,6 @@ void QPainterVideoSurface::setGLContext(QGLContext *context)
 */
 
 /*!
-    \since 1.0
 */
 QPainterVideoSurface::ShaderTypes QPainterVideoSurface::supportedShaderTypes() const
 {
@@ -1639,7 +1620,6 @@ QPainterVideoSurface::ShaderTypes QPainterVideoSurface::supportedShaderTypes() c
 }
 
 /*!
-    \since 1.0
 */
 QPainterVideoSurface::ShaderType QPainterVideoSurface::shaderType() const
 {
@@ -1647,7 +1627,6 @@ QPainterVideoSurface::ShaderType QPainterVideoSurface::shaderType() const
 }
 
 /*!
-    \since 1.0
 */
 void QPainterVideoSurface::setShaderType(ShaderType type)
 {
diff --git a/src/multimediawidgets/qvideowidget.cpp b/src/multimediawidgets/qvideowidget.cpp
index 015dcd1..ea787b1 100644
--- a/src/multimediawidgets/qvideowidget.cpp
+++ b/src/multimediawidgets/qvideowidget.cpp
@@ -585,7 +585,6 @@ void QVideoWidgetPrivate::_q_dimensionsChanged()
     produced by a media object.
     \ingroup multimedia
     \inmodule QtMultimedia
-    \since 1.0
 
     \inmodule QtMultimedia
 
@@ -641,7 +640,6 @@ QVideoWidget::~QVideoWidget()
 /*!
     \property QVideoWidget::mediaObject
     \brief the media object which provides the video displayed by a widget.
-    \since 1.0
 */
 
 QMediaObject *QVideoWidget::mediaObject() const
@@ -651,7 +649,6 @@ QMediaObject *QVideoWidget::mediaObject() const
 
 /*!
     \internal
-    \since 1.0
 */
 bool QVideoWidget::setMediaObject(QMediaObject *object)
 {
@@ -697,7 +694,6 @@ bool QVideoWidget::setMediaObject(QMediaObject *object)
 /*!
     \property QVideoWidget::aspectRatioMode
     \brief how video is scaled with respect to its aspect ratio.
-    \since 1.0
 */
 
 Qt::AspectRatioMode QVideoWidget::aspectRatioMode() const
@@ -720,7 +716,6 @@ void QVideoWidget::setAspectRatioMode(Qt::AspectRatioMode mode)
 /*!
     \property QVideoWidget::fullScreen
     \brief whether video display is confined to a window or is fullScreen.
-    \since 1.0
 */
 
 void QVideoWidget::setFullScreen(bool fullScreen)
@@ -746,7 +741,6 @@ void QVideoWidget::setFullScreen(bool fullScreen)
 
     Signals that the \a fullScreen mode of a video widget has changed.
 
-    \since 1.0
     \sa fullScreen
 */
 
@@ -755,7 +749,6 @@ void QVideoWidget::setFullScreen(bool fullScreen)
     \brief an adjustment to the brightness of displayed video.
 
     Valid brightness values range between -100 and 100, the default is 0.
-    \since 1.0
 */
 
 int QVideoWidget::brightness() const
@@ -780,7 +773,6 @@ void QVideoWidget::setBrightness(int brightness)
 
     Signals that a video widgets's \a brightness adjustment has changed.
 
-    \since 1.0
     \sa brightness
 */
 
@@ -790,7 +782,6 @@ void QVideoWidget::setBrightness(int brightness)
 
     Valid contrast values range between -100 and 100, the default is 0.
 
-    \since 1.0
 */
 
 int QVideoWidget::contrast() const
@@ -815,7 +806,6 @@ void QVideoWidget::setContrast(int contrast)
 
     Signals that a video widgets's \a contrast adjustment has changed.
 
-    \since 1.0
     \sa contrast
 */
 
@@ -824,7 +814,6 @@ void QVideoWidget::setContrast(int contrast)
     \brief an adjustment to the hue of displayed video.
 
     Valid hue values range between -100 and 100, the default is 0.
-    \since 1.0
 */
 
 int QVideoWidget::hue() const
@@ -849,7 +838,6 @@ void QVideoWidget::setHue(int hue)
 
     Signals that a video widgets's \a hue has changed.
 
-    \since 1.0
     \sa hue
 */
 
@@ -858,7 +846,6 @@ void QVideoWidget::setHue(int hue)
     \brief an adjustment to the saturation of displayed video.
 
     Valid saturation values range between -100 and 100, the default is 0.
-    \since 1.0
 */
 
 int QVideoWidget::saturation() const
@@ -884,14 +871,12 @@ void QVideoWidget::setSaturation(int saturation)
 
     Signals that a video widgets's \a saturation has changed.
 
-    \since 1.0
     \sa saturation
 */
 
 /*!
   Returns the size hint for the current back end,
   if there is one, or else the size hint from QWidget.
-  \since 1.0
  */
 QSize QVideoWidget::sizeHint() const
 {
@@ -908,7 +893,6 @@ QSize QVideoWidget::sizeHint() const
 /*!
   Current event \a event.
   Returns the value of the baseclass QWidget::event(QEvent *event) function.
-  \since 1.0
 */
 bool QVideoWidget::event(QEvent *event)
 {
@@ -941,7 +925,6 @@ bool QVideoWidget::event(QEvent *event)
 
 /*!
   Handles the show \a event.
-  \since 1.0
  */
 void QVideoWidget::showEvent(QShowEvent *event)
 {
@@ -966,7 +949,6 @@ void QVideoWidget::showEvent(QShowEvent *event)
 /*!
 
   Handles the hide \a event.
-  \since 1.0
 */
 void QVideoWidget::hideEvent(QHideEvent *event)
 {
@@ -980,7 +962,6 @@ void QVideoWidget::hideEvent(QHideEvent *event)
 
 /*!
   Handles the resize \a event.
-  \since 1.0
  */
 void QVideoWidget::resizeEvent(QResizeEvent *event)
 {
@@ -994,7 +975,6 @@ void QVideoWidget::resizeEvent(QResizeEvent *event)
 
 /*!
   Handles the move \a event.
-  \since 1.0
  */
 void QVideoWidget::moveEvent(QMoveEvent *event)
 {
@@ -1006,7 +986,6 @@ void QVideoWidget::moveEvent(QMoveEvent *event)
 
 /*!
   Handles the paint \a event.
-  \since 1.0
  */
 void QVideoWidget::paintEvent(QPaintEvent *event)
 {
@@ -1026,7 +1005,6 @@ void QVideoWidget::paintEvent(QPaintEvent *event)
 /*!
     \reimp
     \internal
-    \since 1.1
 */
 bool QVideoWidget::winEvent(MSG *message, long *result)
 {
diff --git a/src/multimediawidgets/qvideowidgetcontrol.cpp b/src/multimediawidgets/qvideowidgetcontrol.cpp
index eae09cf..804df3f 100644
--- a/src/multimediawidgets/qvideowidgetcontrol.cpp
+++ b/src/multimediawidgets/qvideowidgetcontrol.cpp
@@ -53,7 +53,6 @@ QT_BEGIN_NAMESPACE
 
     \inmodule QtMultimedia
     \ingroup multimedia-serv
-    \since 1.0
 
     The videoWidget() property of QVideoWidgetControl provides a pointer to a
     video widget implemented by the control's media service.  This widget is
@@ -98,28 +97,24 @@ QVideoWidgetControl::~QVideoWidgetControl()
     \fn QVideoWidgetControl::isFullScreen() const
 
     Returns true if the video is shown using the complete screen.
-    \since 1.0
 */
 
 /*!
     \fn QVideoWidgetControl::setFullScreen(bool fullScreen)
 
     Sets whether a video widget is in \a fullScreen mode.
-    \since 1.0
 */
 
 /*!
     \fn QVideoWidgetControl::fullScreenChanged(bool fullScreen)
 
     Signals that the \a fullScreen state of a video widget has changed.
-    \since 1.0
 */
 
 /*!
     \fn QVideoWidgetControl::aspectRatioMode() const
 
     Returns how video is scaled to fit the widget with respect to its aspect ratio.
-    \since 1.0
 */
 
 /*!
@@ -127,7 +122,6 @@ QVideoWidgetControl::~QVideoWidgetControl()
 
     Sets the aspect ratio \a mode which determines how video is scaled to the fit the widget with
     respect to its aspect ratio.
-    \since 1.0
 */
 
 /*!
@@ -136,7 +130,6 @@ QVideoWidgetControl::~QVideoWidgetControl()
     Returns the brightness adjustment applied to a video.
 
     Valid brightness values range between -100 and 100, the default is 0.
-    \since 1.0
 */
 
 /*!
@@ -145,14 +138,12 @@ QVideoWidgetControl::~QVideoWidgetControl()
     Sets a \a brightness adjustment for a video.
 
     Valid brightness values range between -100 and 100, the default is 0.
-    \since 1.0
 */
 
 /*!
     \fn QVideoWidgetControl::brightnessChanged(int brightness)
 
     Signals that a video widget's \a brightness adjustment has changed.
-    \since 1.0
 */
 
 /*!
@@ -161,7 +152,6 @@ QVideoWidgetControl::~QVideoWidgetControl()
     Returns the contrast adjustment applied to a video.
 
     Valid contrast values range between -100 and 100, the default is 0.
-    \since 1.0
 */
 
 /*!
@@ -170,7 +160,6 @@ QVideoWidgetControl::~QVideoWidgetControl()
     Sets the contrast adjustment for a video widget to \a contrast.
 
     Valid contrast values range between -100 and 100, the default is 0.
-    \since 1.0
 */
 
 
@@ -178,7 +167,6 @@ QVideoWidgetControl::~QVideoWidgetControl()
     \fn QVideoWidgetControl::contrastChanged(int contrast)
 
     Signals that a video widget's \a contrast adjustment has changed.
-    \since 1.0
 */
 
 /*!
@@ -187,7 +175,6 @@ QVideoWidgetControl::~QVideoWidgetControl()
     Returns the hue adjustment applied to a video widget.
 
     Value hue values range between -100 and 100, the default is 0.
-    \since 1.0
 */
 
 /*!
@@ -196,7 +183,6 @@ QVideoWidgetControl::~QVideoWidgetControl()
     Sets a \a hue adjustment for a video widget.
 
     Valid hue values range between -100 and 100, the default is 0.
-    \since 1.0
 */
 
 
@@ -204,7 +190,6 @@ QVideoWidgetControl::~QVideoWidgetControl()
     \fn QVideoWidgetControl::hueChanged(int hue)
 
     Signals that a video widget's \a hue adjustment has changed.
-    \since 1.0
 */
 
 /*!
@@ -213,7 +198,6 @@ QVideoWidgetControl::~QVideoWidgetControl()
     Returns the saturation adjustment applied to a video widget.
 
     Value saturation values range between -100 and 100, the default is 0.
-    \since 1.0
 */
 
 
@@ -223,21 +207,18 @@ QVideoWidgetControl::~QVideoWidgetControl()
     Sets a \a saturation adjustment for a video widget.
 
     Valid saturation values range between -100 and 100, the default is 0.
-    \since 1.0
 */
 
 /*!
     \fn QVideoWidgetControl::saturationChanged(int saturation)
 
     Signals that a video widget's \a saturation adjustment has changed.
-    \since 1.0
 */
 
 /*!
     \fn QVideoWidgetControl::videoWidget()
 
     Returns the QWidget.
-    \since 1.0
 */
 
 #include "moc_qvideowidgetcontrol.cpp"
diff --git a/src/multimediawidgets/qvideowindowcontrol.cpp b/src/multimediawidgets/qvideowindowcontrol.cpp
index 72acf98..d299342 100644
--- a/src/multimediawidgets/qvideowindowcontrol.cpp
+++ b/src/multimediawidgets/qvideowindowcontrol.cpp
@@ -49,7 +49,6 @@ QT_BEGIN_NAMESPACE
     \inmodule QtMultimedia
     \ingroup multimedia-serv
     \brief The QVideoWindowControl class provides a media control for rendering video to a window.
-    \since 1.0
 
 
     The winId() property QVideoWindowControl allows a platform specific window
@@ -97,26 +96,22 @@ QVideoWindowControl::~QVideoWindowControl()
     \fn QVideoWindowControl::winId() const
 
     Returns the ID of the window a video overlay end point renders to.
-    \since 1.0
 */
 
 /*!
     \fn QVideoWindowControl::setWinId(WId id)
 
     Sets the \a id of the window a video overlay end point renders to.
-    \since 1.0
 */
 
 /*!
     \fn QVideoWindowControl::displayRect() const
     Returns the sub-rect of a window where video is displayed.
-    \since 1.0
 */
 
 /*!
     \fn QVideoWindowControl::setDisplayRect(const QRect &rect)
     Sets the sub-\a rect of a window where video is displayed.
-    \since 1.0
 */
 
 /*!
@@ -125,28 +120,24 @@ QVideoWindowControl::~QVideoWindowControl()
     Identifies if a video overlay is a fullScreen overlay.
 
     Returns true if the video overlay is fullScreen, and false otherwise.
-    \since 1.0
 */
 
 /*!
     \fn QVideoWindowControl::setFullScreen(bool fullScreen)
 
     Sets whether a video overlay is a \a fullScreen overlay.
-    \since 1.0
 */
 
 /*!
     \fn QVideoWindowControl::fullScreenChanged(bool fullScreen)
 
     Signals that the \a fullScreen state of a video overlay has changed.
-    \since 1.0
 */
 
 /*!
     \fn QVideoWindowControl::repaint()
 
     Repaints the last frame.
-    \since 1.0
 */
 
 /*!
@@ -154,14 +145,12 @@ QVideoWindowControl::~QVideoWindowControl()
 
     Returns a suggested size for the video display based on the resolution and aspect ratio of the
     video.
-    \since 1.0
 */
 
 /*!
     \fn QVideoWindowControl::nativeSizeChanged()
 
     Signals that the native dimensions of the video have changed.
-    \since 1.0
 */
 
 
@@ -169,7 +158,6 @@ QVideoWindowControl::~QVideoWindowControl()
     \fn QVideoWindowControl::aspectRatioMode() const
 
     Returns how video is scaled to fit the display region with respect to its aspect ratio.
-    \since 1.0
 */
 
 /*!
@@ -177,7 +165,6 @@ QVideoWindowControl::~QVideoWindowControl()
 
     Sets the aspect ratio \a mode which determines how video is scaled to the fit the display region
     with respect to its aspect ratio.
-    \since 1.0
 */
 
 /*!
@@ -186,7 +173,6 @@ QVideoWindowControl::~QVideoWindowControl()
     Returns the brightness adjustment applied to a video overlay.
 
     Valid brightness values range between -100 and 100, the default is 0.
-    \since 1.0
 */
 
 /*!
@@ -195,14 +181,12 @@ QVideoWindowControl::~QVideoWindowControl()
     Sets a \a brightness adjustment for a video overlay.
 
     Valid brightness values range between -100 and 100, the default is 0.
-    \since 1.0
 */
 
 /*!
     \fn QVideoWindowControl::brightnessChanged(int brightness)
 
     Signals that a video overlay's \a brightness adjustment has changed.
-    \since 1.0
 */
 
 /*!
@@ -211,7 +195,6 @@ QVideoWindowControl::~QVideoWindowControl()
     Returns the contrast adjustment applied to a video overlay.
 
     Valid contrast values range between -100 and 100, the default is 0.
-    \since 1.0
 */
 
 /*!
@@ -220,14 +203,12 @@ QVideoWindowControl::~QVideoWindowControl()
     Sets the \a contrast adjustment for a video overlay.
 
     Valid contrast values range between -100 and 100, the default is 0.
-    \since 1.0
 */
 
 /*!
     \fn QVideoWindowControl::contrastChanged(int contrast)
 
     Signals that a video overlay's \a contrast adjustment has changed.
-    \since 1.0
 */
 
 /*!
@@ -236,7 +217,6 @@ QVideoWindowControl::~QVideoWindowControl()
     Returns the hue adjustment applied to a video overlay.
 
     Value hue values range between -100 and 100, the default is 0.
-    \since 1.0
 */
 
 /*!
@@ -245,14 +225,12 @@ QVideoWindowControl::~QVideoWindowControl()
     Sets a \a hue adjustment for a video overlay.
 
     Valid hue values range between -100 and 100, the default is 0.
-    \since 1.0
 */
 
 /*!
     \fn QVideoWindowControl::hueChanged(int hue)
 
     Signals that a video overlay's \a hue adjustment has changed.
-    \since 1.0
 */
 
 /*!
@@ -261,7 +239,6 @@ QVideoWindowControl::~QVideoWindowControl()
     Returns the saturation adjustment applied to a video overlay.
 
     Value saturation values range between -100 and 100, the default is 0.
-    \since 1.0
 */
 
 /*!
@@ -269,14 +246,12 @@ QVideoWindowControl::~QVideoWindowControl()
     Sets a \a saturation adjustment for a video overlay.
 
     Valid saturation values range between -100 and 100, the default is 0.
-    \since 1.0
 */
 
 /*!
     \fn QVideoWindowControl::saturationChanged(int saturation)
 
     Signals that a video overlay's \a saturation adjustment has changed.
-    \since 1.0
 */
 
 #include "moc_qvideowindowcontrol.cpp"