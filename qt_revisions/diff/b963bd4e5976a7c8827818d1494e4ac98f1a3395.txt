diff --git a/src/corelib/io/qdir.cpp b/src/corelib/io/qdir.cpp
index 8e231ff..59b93f1 100644
--- a/src/corelib/io/qdir.cpp
+++ b/src/corelib/io/qdir.cpp
@@ -501,7 +501,7 @@ inline void QDirPrivate::initFileEngine()
 
     \snippet qdir-listfiles/main.cpp 0
 
-    \sa QFileInfo, QFile, QFileDialog, QApplication::applicationDirPath(), {Find Files Example}
+    \sa QFileInfo, QFile, QFileDialog, QCoreApplication::applicationDirPath(), {Find Files Example}
 */
 
 /*!
@@ -537,7 +537,7 @@ QDir::QDir(const QString &path) : d_ptr(new QDirPrivate(path))
 
     Note that \a path need not exist.
 
-    \sa exists(), setPath(), setNameFilter(), setFilter(), setSorting()
+    \sa exists(), setPath(), setNameFilters(), setFilter(), setSorting()
 */
 QDir::QDir(const QString &path, const QString &nameFilter,
            SortFlags sort, Filters filters)
diff --git a/src/corelib/io/qdiriterator.cpp b/src/corelib/io/qdiriterator.cpp
index 67ea1c9..ea4dd03 100644
--- a/src/corelib/io/qdiriterator.cpp
+++ b/src/corelib/io/qdiriterator.cpp
@@ -67,10 +67,7 @@
     you cannot iterate directories in reverse order) and does not allow random
     access.
 
-    QDirIterator works with all supported file engines, and is implemented
-    using QAbstractFileEngineIterator.
-
-    \sa QDir, QDir::entryList(), QAbstractFileEngineIterator
+    \sa QDir, QDir::entryList()
 */
 
 /*! \enum QDirIterator::IteratorFlag
diff --git a/src/corelib/io/qfile.cpp b/src/corelib/io/qfile.cpp
index 2c81110..d1b11e1 100644
--- a/src/corelib/io/qfile.cpp
+++ b/src/corelib/io/qfile.cpp
@@ -871,7 +871,7 @@ bool QFile::open(OpenMode mode)
 
     \note For Windows CE you may not be able to call resize().
 
-    \sa close(), {qmake Variable Reference#CONFIG}{qmake Variable Reference}
+    \sa close()
 
     \b{Note for the Windows Platform}
 
diff --git a/src/corelib/io/qfileinfo.cpp b/src/corelib/io/qfileinfo.cpp
index 7d9eb71..b6302f5 100644
--- a/src/corelib/io/qfileinfo.cpp
+++ b/src/corelib/io/qfileinfo.cpp
@@ -699,7 +699,7 @@ QString QFileInfo::filePath() const
     Note that, if this QFileInfo object is given a path ending in a
     slash, the name of the file is considered empty.
 
-    \sa isRelative(), filePath(), baseName(), extension()
+    \sa isRelative(), filePath(), baseName(), suffix()
 */
 QString QFileInfo::fileName() const
 {
@@ -719,7 +719,7 @@ QString QFileInfo::fileName() const
     Example:
     \snippet code/src_corelib_io_qfileinfo.cpp 4
 
-    \sa isBundle(), filePath(), baseName(), extension()
+    \sa isBundle(), filePath(), baseName(), suffix()
 */
 QString QFileInfo::bundleName() const
 {
diff --git a/src/corelib/io/qtemporarydir.cpp b/src/corelib/io/qtemporarydir.cpp
index 86c7ed5..4db8d21 100644
--- a/src/corelib/io/qtemporarydir.cpp
+++ b/src/corelib/io/qtemporarydir.cpp
@@ -286,6 +286,8 @@ void QTemporaryDir::setAutoRemove(bool b)
 
 /*!
     Removes the temporary directory, including all its contents.
+
+    Returns true if removing was successful.
 */
 bool QTemporaryDir::remove()
 {