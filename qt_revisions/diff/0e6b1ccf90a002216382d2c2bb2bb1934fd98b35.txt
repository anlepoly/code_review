diff --git a/Source/JavaScriptCore/DerivedSources.pri b/Source/JavaScriptCore/DerivedSources.pri
index 8bbc29d..a1a04c8 100644
--- a/Source/JavaScriptCore/DerivedSources.pri
+++ b/Source/JavaScriptCore/DerivedSources.pri
@@ -95,21 +95,23 @@ klgen.input = KEYWORDLUT_FILES
 klgen.commands = python $$klgen.script ${QMAKE_FILE_NAME} > ${QMAKE_FILE_OUT}
 GENERATORS += klgen
 
-EXTRACTOR_BINARY = LLIntOffsetsExtractor$$BIN_EXTENSION
-DIRS = $$OUT_PWD $$OUT_PWD/debug $$OUT_PWD/release
-for(dir, DIRS) {
-    file = $$dir/$$EXTRACTOR_BINARY
-    exists($$file): LLINT_FILES += $$file
+!macx{
+    EXTRACTOR_BINARY = LLIntOffsetsExtractor$$BIN_EXTENSION
+    DIRS = $$OUT_PWD $$OUT_PWD/debug $$OUT_PWD/release
+    for(dir, DIRS) {
+        file = $$dir/$$EXTRACTOR_BINARY
+        exists($$file): LLINT_FILES += $$file
+    }
+
+    #GENERATOR: LLInt
+    llint.output = ${QMAKE_FILE_IN_PATH}$${QMAKE_DIR_SEP}LLIntAssembly.h
+    llint.script = $$PWD/offlineasm/asm.rb
+    llint.input = LLINT_FILES
+    llint.depends = $$LLINT_DEPENDENCY
+    llint.commands = ruby $$llint.script $$LLINT_ASSEMBLER ${QMAKE_FILE_IN} ${QMAKE_FILE_OUT}
+    GENERATORS += llint
 }
 
-#GENERATOR: LLInt
-llint.output = ${QMAKE_FILE_IN_PATH}$${QMAKE_DIR_SEP}LLIntAssembly.h
-llint.script = $$PWD/offlineasm/asm.rb
-llint.input = LLINT_FILES
-llint.depends = $$LLINT_DEPENDENCY
-llint.commands = ruby $$llint.script $$LLINT_ASSEMBLER ${QMAKE_FILE_IN} ${QMAKE_FILE_OUT}
-GENERATORS += llint
-
 linux-*:if(isEqual(QT_ARCH, "i386")|isEqual(QT_ARCH, "x86_64")) {
     # GENERATOR: disassembler
     disassembler.output = udis86_itab.c
diff --git a/Source/JavaScriptCore/JavaScriptCore.pro b/Source/JavaScriptCore/JavaScriptCore.pro
index 13130b8..006d615 100644
--- a/Source/JavaScriptCore/JavaScriptCore.pro
+++ b/Source/JavaScriptCore/JavaScriptCore.pro
@@ -7,16 +7,18 @@
 TEMPLATE = subdirs
 CONFIG += ordered
 
-LLIntOffsetsExtractor.file = LLIntOffsetsExtractor.pro
-LLIntOffsetsExtractor.makefile = Makefile.LLIntOffsetsExtractor
-SUBDIRS += LLIntOffsetsExtractor
+!macx {
+    LLIntOffsetsExtractor.file = LLIntOffsetsExtractor.pro
+    LLIntOffsetsExtractor.makefile = Makefile.LLIntOffsetsExtractor
+    SUBDIRS += LLIntOffsetsExtractor
+}
 
 derived_sources.file = DerivedSources.pri
 target.file = Target.pri
 
 SUBDIRS += derived_sources target
 
-addStrictSubdirOrderBetween(LLIntOffsetsExtractor, derived_sources)
+!macx:addStrictSubdirOrderBetween(LLIntOffsetsExtractor, derived_sources)
 addStrictSubdirOrderBetween(derived_sources, target)
 
 jsc.file = jsc.pro
diff --git a/Source/JavaScriptCore/Target.pri b/Source/JavaScriptCore/Target.pri
index f609de1..cf8836e 100644
--- a/Source/JavaScriptCore/Target.pri
+++ b/Source/JavaScriptCore/Target.pri
@@ -170,13 +170,6 @@ SOURCES += \
     jit/JITStubs.cpp \
     jit/JumpReplacementWatchpoint.cpp \
     jit/ThunkGenerators.cpp \
-    llint/LLIntCLoop.cpp \
-    llint/LLIntData.cpp \
-    llint/LLIntEntrypoints.cpp \
-    llint/LLIntExceptions.cpp \
-    llint/LLIntSlowPaths.cpp \
-    llint/LLIntThunks.cpp \
-    llint/LowLevelInterpreter.cpp \
     parser/Lexer.cpp \
     parser/Nodes.cpp \
     parser/ParserArena.cpp \
@@ -285,6 +278,17 @@ SOURCES += \
     tools/CodeProfiling.cpp \
     yarr/YarrJIT.cpp \
 
+!macx {
+    SOURCES += \
+        llint/LLIntCLoop.cpp \
+        llint/LLIntData.cpp \
+        llint/LLIntEntrypoints.cpp \
+        llint/LLIntExceptions.cpp \
+        llint/LLIntSlowPaths.cpp \
+        llint/LLIntThunks.cpp \
+        llint/LowLevelInterpreter.cpp
+}
+
 linux-*:if(isEqual(QT_ARCH, "i386")|isEqual(QT_ARCH, "x86_64")) {
     SOURCES += \
         disassembler/UDis86Disassembler.cpp \
diff --git a/Source/WTF/wtf/Platform.h b/Source/WTF/wtf/Platform.h
index 1603019..c61fb81 100644
--- a/Source/WTF/wtf/Platform.h
+++ b/Source/WTF/wtf/Platform.h
@@ -926,7 +926,7 @@
 #if !defined(ENABLE_LLINT) \
     && ENABLE(JIT) \
     && (OS(DARWIN) || OS(LINUX)) \
-    && (PLATFORM(MAC) || PLATFORM(IOS) || PLATFORM(GTK) || PLATFORM(QT)) \
+    && (PLATFORM(MAC) || PLATFORM(IOS) || PLATFORM(GTK) || (PLATFORM(QT) && !OS(DARWIN)) \
     && (CPU(X86) || CPU(X86_64) || CPU(ARM_THUMB2))
 #define ENABLE_LLINT 1
 #endif