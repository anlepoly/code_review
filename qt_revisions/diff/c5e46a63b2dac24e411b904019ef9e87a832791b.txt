diff --git a/doc/src/examples/examples.qdoc b/doc/src/examples/examples.qdoc
index 039555d..e9bc44a 100644
--- a/doc/src/examples/examples.qdoc
+++ b/doc/src/examples/examples.qdoc
@@ -40,7 +40,7 @@ compound interfaces are grouped as applications as they demonstrate more Qt
 Quick features.
 
 To run the sample applications, open them in Qt Creator or use the included
-\l {Protoyping with qmlscene}{qmlscene} tool.
+\l {Prototyping with qmlscene}{qmlscene} tool.
 
 Some of these code samples have a corresponding \l{qtquick-tutorials}{tutorial}.
 The Qt Quick features are covered in the \l {qtquick-overviews}{main page}.
diff --git a/doc/src/examples/tutorial.qdoc b/doc/src/examples/tutorial.qdoc
index 24dab74..f309865 100644
--- a/doc/src/examples/tutorial.qdoc
+++ b/doc/src/examples/tutorial.qdoc
@@ -104,7 +104,7 @@ The \c font.pointSize and \c font.bold properties are related to fonts and use t
 
 \section2 Viewing the example
 
-To view what you have created, run the \l{Protoyping with qmlscene}{qmlscene} tool (located in the \c bin directory) with your filename as the first argument.
+To view what you have created, run the \l{Prototyping with qmlscene}{qmlscene} tool (located in the \c bin directory) with your filename as the first argument.
 For example, to run the provided completed Tutorial 1 example from the install location, you would type:
 
 \code
diff --git a/src/qml/doc/src/modules/cppplugins.qdoc b/src/qml/doc/src/modules/cppplugins.qdoc
index df4156d..887e7cc 100644
--- a/src/qml/doc/src/modules/cppplugins.qdoc
+++ b/src/qml/doc/src/modules/cppplugins.qdoc
@@ -53,7 +53,7 @@
                 by the plugin
         \endlist
     \li Write a project file for the plugin
-    \li Create a \l{Adding Module Metadata with a qmldir file}{qmldir file} to
+    \li Create a \l{Module Definition qmldir Files}{qmldir file} to
         describe the plugin
     \endlist
 
@@ -105,7 +105,7 @@
     SOURCES += qexampleqmlplugin.cpp
     \endcode
 
-    Finally, a \l{Adding Module Metadata with a qmldir file}{qmldir file} is required
+    Finally, a \l{Module Definition qmldir Files}{qmldir file} is required
     in the \c com/nokia/TimeExample directory to describe the plugin and the types that it
     exports. The plugin includes a \c Clock.qml file along with the \c qmlqtimeexampleplugin
     that is built by the project (as shown above in the \c .pro file) so both of these
diff --git a/src/qml/doc/src/qmltypereference.qdoc b/src/qml/doc/src/qmltypereference.qdoc
index 4e4c2c5..7308350 100644
--- a/src/qml/doc/src/qmltypereference.qdoc
+++ b/src/qml/doc/src/qmltypereference.qdoc
@@ -292,7 +292,7 @@ is automatically converted into a QSizeF value.
 The \c rect type refers to a value with \c x, \c y, \c width and \c height attributes.
 
 For example, to read the \c width and \c height values of the \l Item
-\l {Item::}{childrenRect} rect-type type property:
+\l {Item::childrenRect.x}{childrenRect} rect-type type property:
 
 \qml
 Rectangle {
diff --git a/src/qml/doc/src/qtqml-cpp.qdoc b/src/qml/doc/src/qtqml-cpp.qdoc
index e36ff77..20dcb3a 100644
--- a/src/qml/doc/src/qtqml-cpp.qdoc
+++ b/src/qml/doc/src/qtqml-cpp.qdoc
@@ -26,7 +26,7 @@
 ****************************************************************************/
 /*!
 \module QtQml
-\title Qt QML - C++ Classes
+\title Qt QML Module - C++ Classes
 \brief The C++ API provided by the Qt QML module
 
 To include the definitions of the module's classes, use the
diff --git a/src/qml/doc/src/qtqml.qdoc b/src/qml/doc/src/qtqml.qdoc
index 3566703..8baef1d 100644
--- a/src/qml/doc/src/qtqml.qdoc
+++ b/src/qml/doc/src/qtqml.qdoc
@@ -168,12 +168,21 @@ for an introduction to writing QML applications.
 
 \section1 Reference Documentation
 
+Additional Qt QML information:
 \list
-\li \l{QML Types Provided By The QtQml Module}{Qt QML - QML Type Reference}
-\li \l{Qt QML - C++ Classes}
-\li \l{Qt Quick} module documentation
-\li \l{QML Application Developer Resources} - information for application development with QML and Qt Quick
-\li \l{Qt QML Release Notes}
+\li \l{Qt QML Module - C++ Classes} - the C++ API provided by the
+    Qt QML module
+\li \l{Qt QML Release Notes} - list of changes and
+    additions in the Qt QML module
+\endlist
+
+Further information for writing QML applications:
+\list
+\li \l{QML Application Developer Resources}
+    - essential information for application development with QML and Qt Quick
+\li \l{Qt Quick} - documentation for the Qt Quick module, which provides a
+    visual canvas, an animation framework, model/view components and more for
+    building fluid user interfaces and applications with QML
 \endlist
 */
 
diff --git a/src/qml/doc/src/syntax/imports.qdoc b/src/qml/doc/src/syntax/imports.qdoc
index 51c80ea..e9e7cd0 100644
--- a/src/qml/doc/src/syntax/imports.qdoc
+++ b/src/qml/doc/src/syntax/imports.qdoc
@@ -48,9 +48,9 @@ The most common type of import is a module import.  Clients can import
 types and JavaScript resources into a given namespace.
 
 The generic form of a module import is as follows:
-\qml
+\code
 import <ModuleIdentifier> <Version.Number> [as <Qualifier>]
-\endqml
+\endcode
 
 \list
   \li The \c <ModuleIdentifier> is an identifier specified in dotted URI
@@ -68,9 +68,9 @@ import <ModuleIdentifier> <Version.Number> [as <Qualifier>]
 \endlist
 
 An example of an unqualified module import is as follows:
-\qml
+\code
 import QtQuick 2.0
-\endqml
+\endcode
 
 This import allows the use of all of the types provided by the \c QtQuick
 module without needing to specify a qualifier.  For example, the client code to
@@ -87,9 +87,9 @@ Rectangle {
 \endqml
 
 An example of a qualified module import is as follows:
-\qml
+\code
 import QtQuick 2.0 as Quick
-\endqml
+\endcode
 
 This import allows multiple modules which provide conflicting type names to be
 imported at the same time, however since each usage of a type provided by a
@@ -219,9 +219,9 @@ JavaScript resources may be imported directly in a QML document.  Every
 JavaScript resource must have an identifier by which it is accessed.
 
 The generic form of a JavaScript resource import is as follows:
-\qml
+\code
 import "<JavaScriptFile>" as <Identifier>
-\endqml
+\endcode
 
 Note that the \c <Identifier> must be unique within a QML document, unlike the
 local namespace qualifier which can be applied to module imports.
diff --git a/src/qml/qml/qqmlengine.cpp b/src/qml/qml/qqmlengine.cpp
index b3952a7..be20708 100644
--- a/src/qml/qml/qqmlengine.cpp
+++ b/src/qml/qml/qqmlengine.cpp
@@ -217,7 +217,8 @@ void QQmlEnginePrivate::defineQtQuick2Module()
     \value Pixmap The Image Provider provides QPixmap images.
         The QQuickImageProvider::requestPixmap() method will be called for all image requests.
     \value Texture The Image Provider provides QSGTextureProvider based images.
-        The QQuickImageProvider::requestTexture() method will be called for all image requests. \omitvalue
+        The QQuickImageProvider::requestTexture() method will be called for all image requests.
+    \omitvalue Invalid
 */
 
 /*!
diff --git a/src/qml/qml/qqmlextensionplugin.cpp b/src/qml/qml/qqmlextensionplugin.cpp
index 8ccbb88..f75b2bd 100644
--- a/src/qml/qml/qqmlextensionplugin.cpp
+++ b/src/qml/qml/qqmlextensionplugin.cpp
@@ -61,7 +61,7 @@ QT_BEGIN_NAMESPACE
     \li Subclass QQmlExtensionPlugin, implement registerTypes() method
     to register types using qmlRegisterType(), and export the class using the Q_EXPORT_PLUGIN2() macro
     \li Write an appropriate project file for the plugin
-    \li Create a \l{Adding Module Metadata with a qmldir file}{qmldir file} to describe the plugin
+    \li Create a \l{Module Definition qmldir Files}{qmldir file} to describe the plugin
     \endlist
 
     QML extension plugins can be used to provide either application-specific or
@@ -105,7 +105,7 @@ QT_BEGIN_NAMESPACE
     ...
     \endcode    
 
-    Finally, a \l{Adding Module Metadata with a qmldir file}{qmldir file} is required in the \c com/nokia/TimeExample directory
+    Finally, a \l{Module Definition qmldir Files}{qmldir file} is required in the \c com/nokia/TimeExample directory
     that describes the plugin. This directory includes a \c Clock.qml file that
     should be bundled with the plugin, so it needs to be specified in the \c qmldir
     file:
@@ -119,7 +119,7 @@ QT_BEGIN_NAMESPACE
 
     The full source code is available in the \l {qml/cppextensions/plugins}{plugins example}.
 
-    The \l {Tutorial: Extending QML with C++} also contains a chapter
+    The \l {Writing QML Extensions with C++} tutorial also contains a chapter
     on creating QML plugins.
 
     Note that the QtQuick 1 version is called QDeclarativeExtensionPlugin.
diff --git a/src/quick/doc/src/appdevguide/quickstart/basics.qdoc b/src/quick/doc/src/appdevguide/quickstart/basics.qdoc
index 5f9d5c0..2cb4bdc 100644
--- a/src/quick/doc/src/appdevguide/quickstart/basics.qdoc
+++ b/src/quick/doc/src/appdevguide/quickstart/basics.qdoc
@@ -34,25 +34,25 @@
 A QML document defines a hierarchy of objects with a highly-readable,
 structured layout.  Every QML document consists of two parts: an imports
 section and an object declaration section.  The types and functionality most
-common to user interfaces are provided in the \l{Qt Quick Module}{QtQuick}
+common to user interfaces are provided in the \l{QtQuick}
 import.
 
 \section2 Importing and Using the QtQuick Module
 
-To use the \l{Qt Quick Module}{QtQuick} module, a QML document needs to
+To use the \l{QtQuick} module, a QML document needs to
 import it.  The import syntax looks like this:
 
 \qml
 import QtQuick 2.0
 \endqml
 
-The types and functionality that \l{Qt Quick Module}{QtQuick} provides can now
+The types and functionality that \l{QtQuick} provides can now
 be used in the QML document!
 
 \section2 Defining an Object Hierarchy
 
 The object declaration in a QML document defines what will be displayed in the
-visual scene.  \l{Qt Quick Module}{QtQuick} provides the basic building blocks
+visual scene.  \l{QtQuick} provides the basic building blocks
 for all user interfaces, including objects to display images and text, and to
 handle user input.
 
@@ -80,8 +80,8 @@ added to the \c children property of the \l Rectangle object, by QML.
 \section2 Putting it Together
 
 The \l Rectangle and \l Text types used in the above example are both provided
-by the \l{Qt Quick Module}{QtQuick} import.  To use them, we need to import
-\l{Qt Quick Module}{QtQuick}.  Putting the import and object declaration
+by the \l{QtQuick} import.  To use them, we need to import
+\l{QtQuick}.  Putting the import and object declaration
 together, we get a complete QML document:
 
 \qml
@@ -104,8 +104,8 @@ If we save that document as "HelloWorld.qml" we can load and display it.
 \section1 Loading and Displaying the QML Document
 
 To display the graphical scene defined by the QML document, it may be loaded
-with the \l{Protoyping with qmlscene}{qmlscene} tool.  The
-\l{Protoyping with qmlscene}{qmlscene} tool should be installed into the
+with the \l{Prototyping with qmlscene}{qmlscene} tool.  The
+\l{Prototyping with qmlscene}{qmlscene} tool should be installed into the
 Qt installation directory.  Assuming that the Qt binaries are installed into
 or are available in the system executable path, you can display the QML
 document with the following command:
diff --git a/src/quick/doc/src/concepts/positioning/layouts.qdoc b/src/quick/doc/src/concepts/positioning/layouts.qdoc
index 05b3eb9..f211e79 100644
--- a/src/quick/doc/src/concepts/positioning/layouts.qdoc
+++ b/src/quick/doc/src/concepts/positioning/layouts.qdoc
@@ -28,7 +28,7 @@
 /*!
 \ingroup qtquick-positioners
 \page qtquick-positioning-layouts.html
-\iningroup qml-features
+\ingroup qml-features
 \title Item Layouts
 
 Positioner items are container items that manage the positions and sizes of
diff --git a/src/quick/doc/src/concepts/statesanimations/topic.qdoc b/src/quick/doc/src/concepts/statesanimations/topic.qdoc
index b498a28..c80b239 100644
--- a/src/quick/doc/src/concepts/statesanimations/topic.qdoc
+++ b/src/quick/doc/src/concepts/statesanimations/topic.qdoc
@@ -27,7 +27,7 @@
 
 /*!
 \page qtquick-statesanimations-topic.html
-\title Import Concepts in Qt Quick - States, Transitions and Animations
+\title Important Concepts in Qt Quick - States, Transitions and Animations
 \brief Description of the concepts of states, transitions and animations in Qt Quick
 
 In any modern user-interface, transitioning between states and animating
diff --git a/src/quick/doc/src/qtquick.qdoc b/src/quick/doc/src/qtquick.qdoc
index a70f2de..af978a4 100644
--- a/src/quick/doc/src/qtquick.qdoc
+++ b/src/quick/doc/src/qtquick.qdoc
@@ -108,12 +108,20 @@ To find out more about using the QML language, see the \l{Qt QML Module Document
 
 \section1 Reference Documentation
 
+Additional Qt Quick information:
 \list
-\li \l{QML Types Provided by Qt Quick}
-\li \l{Qt Quick Module - C++ Classes}
-\li \l{Qt QML} module documentation
-\li \l{QML Application Developer Resources} - information for application development with QML and Qt Quick
-\li \l{Qt Quick Release Notes}
+\li \l{Qt Quick Module - C++ Classes} - the C++ API provided by the
+    Qt Quick module
+\li \l{Qt Quick Release Notes} - list of changes and
+    additions in the Qt Quick module
+\endlist
+
+Further information for writing QML applications:
+\list
+\li \l{QML Application Developer Resources}
+    - essential information for application development with QML and Qt Quick
+\li \l{Qt Qml} - documentation for the
+    Qt QML module, which provides the QML engine and language infrastructure
 \endlist
 */
 
diff --git a/src/quick/items/qquickitem.cpp b/src/quick/items/qquickitem.cpp
index 2e494c7..3d55f52 100644
--- a/src/quick/items/qquickitem.cpp
+++ b/src/quick/items/qquickitem.cpp
@@ -412,12 +412,10 @@ void QQuickItemKeyFilter::componentComplete()
     \qmlproperty Item QtQuick2::KeyNavigation::right
     \qmlproperty Item QtQuick2::KeyNavigation::up
     \qmlproperty Item QtQuick2::KeyNavigation::down
-    \qmlproperty Item QtQuick2::KeyNavigation::tab
-    \qmlproperty Item QtQuick2::KeyNavigation::backtab
 
     These properties hold the item to assign focus to
-    when the left, right, up or down cursor keys, or the
-    tab key are pressed.
+    when the left, right, up or down cursor keys
+    are pressed.
 */
 
 /*!
@@ -1686,6 +1684,11 @@ void QQuickItemPrivate::updateSubFocusItem(QQuickItem *scope, bool focus)
 */
 
 /*!
+    \class ItemChangeData
+    \internal
+*/
+
+/*!
     \enum QQuickItem::TransformOrigin
 
     Controls the point about which simple transforms like scale apply.
@@ -4128,7 +4131,8 @@ void QQuickItem::itemChange(ItemChange change, const ItemChangeData &value)
 }
 
 /*!
-    Notify input method on updated query values if needed. \a indicates changed attributes.
+    Notify input method on updated query values if needed. \a queries indicates
+    the changed attributes.
 */
 void QQuickItem::updateInputMethod(Qt::InputMethodQueries queries)
 {
@@ -4305,7 +4309,7 @@ void QQuickItem::setTransformOriginPoint(const QPointF &point)
   \endtable
  */
 /*!
-  \qmlproperty real QtQuick2::Item::z
+  \property QQuickItem::z
 
   Sets the stacking order of sibling items.  By default the stacking order is 0.