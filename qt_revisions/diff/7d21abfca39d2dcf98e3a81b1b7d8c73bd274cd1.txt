diff --git a/src/concurrent/concurrent.pro b/src/concurrent/concurrent.pro
index 20a9356..f30f75e 100644
--- a/src/concurrent/concurrent.pro
+++ b/src/concurrent/concurrent.pro
@@ -12,7 +12,6 @@ load(qt_module)
 PRECOMPILED_HEADER = ../corelib/global/qt_pch.h
 
 SOURCES += \
-        qfuturesynchronizer.cpp \
         qtconcurrentfilter.cpp \
         qtconcurrentmap.cpp \
         qtconcurrentthreadengine.cpp \
@@ -20,7 +19,6 @@ SOURCES += \
 
 HEADERS += \
         qtconcurrent_global.h \
-        qfuturesynchronizer.h \
         qtconcurrentcompilertest.h \
         qtconcurrentexception.h \
         qtconcurrentfilter.h \
diff --git a/src/concurrent/doc/snippets/code/src_concurrent_qfuturesynchronizer.cpp b/src/concurrent/doc/snippets/code/src_concurrent_qfuturesynchronizer.cpp
deleted file mode 100644
index 7b2d3d2..0000000
--- a/src/concurrent/doc/snippets/code/src_concurrent_qfuturesynchronizer.cpp
+++ /dev/null
@@ -1,53 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/legal
-**
-** This file is part of the documentation of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:BSD$
-** You may use this file under the terms of the BSD license as follows:
-**
-** "Redistribution and use in source and binary forms, with or without
-** modification, are permitted provided that the following conditions are
-** met:
-**   * Redistributions of source code must retain the above copyright
-**     notice, this list of conditions and the following disclaimer.
-**   * Redistributions in binary form must reproduce the above copyright
-**     notice, this list of conditions and the following disclaimer in
-**     the documentation and/or other materials provided with the
-**     distribution.
-**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
-**     of its contributors may be used to endorse or promote products derived
-**     from this software without specific prior written permission.
-**
-**
-** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-//! [0]
-void someFunction()
-{
-    QFutureSynchronizer<void> synchronizer;
-
-    ...
-
-    synchronizer.addFuture(QtConcurrent::run(anotherFunction));
-    synchronizer.addFuture(QtConcurrent::map(list, mapFunction));
-
-    return; // QFutureSynchronizer waits for all futures to finish
-}
-//! [0]
diff --git a/src/concurrent/qfuturesynchronizer.cpp b/src/concurrent/qfuturesynchronizer.cpp
deleted file mode 100644
index 69ea325..0000000
--- a/src/concurrent/qfuturesynchronizer.cpp
+++ /dev/null
@@ -1,156 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/legal
-**
-** This file is part of the QtCore module of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:LGPL$
-** Commercial License Usage
-** Licensees holding valid commercial Qt licenses may use this file in
-** accordance with the commercial license agreement provided with the
-** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
-** use the contact form at http://qt.digia.com/contact-us.
-**
-** GNU Lesser General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU Lesser
-** General Public License version 2.1 as published by the Free Software
-** Foundation and appearing in the file LICENSE.LGPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU Lesser General Public License version 2.1 requirements
-** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
-**
-** In addition, as a special exception, Digia gives you certain additional
-** rights.  These rights are described in the Digia Qt LGPL Exception
-** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
-**
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU
-** General Public License version 3.0 as published by the Free Software
-** Foundation and appearing in the file LICENSE.GPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU General Public License version 3.0 requirements will be
-** met: http://www.gnu.org/copyleft/gpl.html.
-**
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-/*! \class QFutureSynchronizer
-    \since 4.4
-
-    \brief The QFutureSynchronizer class is a convenience class that simplifies
-    QFuture synchronization.
-
-    \ingroup thread
-
-    QFutureSynchronizer is a template class that simplifies synchronization of
-    one or more QFuture objects. Futures are added using the addFuture() or
-    setFuture() functions. The futures() function returns a list of futures.
-    Use clearFutures() to remove all futures from the QFutureSynchronizer.
-    
-    The waitForFinished() function waits for all futures to finish.
-    The destructor of QFutureSynchronizer calls waitForFinished(), providing
-    an easy way to ensure that all futures have finished before returning from
-    a function:
-    
-    \snippet code/src_concurrent_qfuturesynchronizer.cpp 0
-    
-    The behavior of waitForFinished() can be changed using the
-    setCancelOnWait() function. Calling setCancelOnWait(true) will cause
-    waitForFinished() to cancel all futures before waiting for them to finish.
-    You can query the status of the cancel-on-wait feature using the
-    cancelOnWait() function.
-    
-    \sa QFuture, QFutureWatcher, {Concurrent Programming}{Qt Concurrent}
-*/
-
-/*!
-    \fn QFutureSynchronizer::QFutureSynchronizer()
-
-    Constructs a QFutureSynchronizer.
-*/
-
-/*!
-    \fn QFutureSynchronizer::QFutureSynchronizer(const QFuture<T> &future)
-
-    Constructs a QFutureSynchronizer and begins watching \a future by calling
-    addFuture().
-    
-    \sa addFuture()
-*/
-
-/*!
-    \fn QFutureSynchronizer::~QFutureSynchronizer()
-    
-    Calls waitForFinished() function to ensure that all futures have finished
-    before destroying this QFutureSynchronizer.
-    
-    \sa waitForFinished()
-*/
-
-/*!
-    \fn void QFutureSynchronizer::setFuture(const QFuture<T> &future)
-    
-    Sets \a future to be the only future managed by this QFutureSynchronizer.
-    This is a convenience function that calls waitForFinished(),
-    then clearFutures(), and finally passes \a future to addFuture().
-    
-    \sa addFuture(), waitForFinished(), clearFutures()
-*/
-
-/*!
-    \fn void QFutureSynchronizer::addFuture(const QFuture<T> &future)
-
-    Adds \a future to the list of managed futures.
-    
-    \sa futures()
-*/
-
-/*!
-    \fn void QFutureSynchronizer::waitForFinished()
-
-    Waits for all futures to finish. If cancelOnWait() returns true, each
-    future is canceled before waiting for them to finish.
-    
-    \sa cancelOnWait(), setCancelOnWait()
-*/
-
-/*!
-    \fn void QFutureSynchronizer::clearFutures()
-
-    Removes all managed futures from this QFutureSynchronizer.
-    
-    \sa addFuture(), setFuture()
-*/
-
-/*!
-    \fn QList<QFuture<T> > QFutureSynchronizer::futures() const
-
-    Returns a list of all managed futures.
-    
-    \sa addFuture(), setFuture()
-*/
-
-/*!
-    \fn void QFutureSynchronizer::setCancelOnWait(bool enabled)
-    
-    Enables or disables the cancel-on-wait feature based on the \a enabled
-    argument. If \a enabled is true, the waitForFinished() function will cancel
-    all futures before waiting for them to finish.
-
-    \sa waitForFinished()
-*/
-
-/*!
-    \fn bool QFutureSynchronizer::cancelOnWait() const
-
-    Returns true if the cancel-on-wait feature is enabled; otherwise returns
-    false. If cancel-on-wait is enabled, the waitForFinished() function will
-    cancel all futures before waiting for them to finish.
-
-    \sa waitForFinished()
-*/
diff --git a/src/concurrent/qfuturesynchronizer.h b/src/concurrent/qfuturesynchronizer.h
deleted file mode 100644
index b82e968..0000000
--- a/src/concurrent/qfuturesynchronizer.h
+++ /dev/null
@@ -1,122 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/legal
-**
-** This file is part of the QtCore module of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:LGPL$
-** Commercial License Usage
-** Licensees holding valid commercial Qt licenses may use this file in
-** accordance with the commercial license agreement provided with the
-** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
-** use the contact form at http://qt.digia.com/contact-us.
-**
-** GNU Lesser General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU Lesser
-** General Public License version 2.1 as published by the Free Software
-** Foundation and appearing in the file LICENSE.LGPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU Lesser General Public License version 2.1 requirements
-** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
-**
-** In addition, as a special exception, Digia gives you certain additional
-** rights.  These rights are described in the Digia Qt LGPL Exception
-** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
-**
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU
-** General Public License version 3.0 as published by the Free Software
-** Foundation and appearing in the file LICENSE.GPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU General Public License version 3.0 requirements will be
-** met: http://www.gnu.org/copyleft/gpl.html.
-**
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-#ifndef QFUTURESYNCHRONIZER_H
-#define QFUTURESYNCHRONIZER_H
-
-#include <QtConcurrent/qtconcurrent_global.h>
-
-#include <QtCore/qfuture.h>
-
-#ifndef QT_NO_CONCURRENT
-
-QT_BEGIN_HEADER
-QT_BEGIN_NAMESPACE
-
-
-template <typename T>
-class QFutureSynchronizer
-{
-    Q_DISABLE_COPY(QFutureSynchronizer)
-
-public:
-    QFutureSynchronizer() : m_cancelOnWait(false) { }
-    explicit QFutureSynchronizer(const QFuture<T> &future)
-        : m_cancelOnWait(false)
-    { addFuture(future); }
-    ~QFutureSynchronizer()  { waitForFinished(); }
-
-    void setFuture(const QFuture<T> &future)
-    {
-        waitForFinished();
-        m_futures.clear();
-        addFuture(future);
-    }
-
-    void addFuture(const QFuture<T> &future)
-    {
-        m_futures.append(future);
-    }
-
-    void waitForFinished()
-    {
-        if (m_cancelOnWait) {
-            for (int i = 0; i < m_futures.count(); ++i) {
-                 m_futures[i].cancel();
-            }
-        }
-        
-        for (int i = 0; i < m_futures.count(); ++i) {
-             m_futures[i].waitForFinished();
-         }
-    }
-
-    void clearFutures()
-    {
-        m_futures.clear();
-    }
-
-    QList<QFuture<T> > futures() const
-    {
-        return m_futures;
-    }
-
-    void setCancelOnWait(bool enabled)
-    {
-        m_cancelOnWait = enabled;
-    }
-
-    bool cancelOnWait() const
-    {
-        return m_cancelOnWait;
-    }
-
-protected:
-    QList<QFuture<T> > m_futures;
-    bool m_cancelOnWait;
-};
-
-QT_END_NAMESPACE
-QT_END_HEADER
-
-#endif // QT_NO_CONCURRENT
-
-#endif // QFUTURESYNCHRONIZER_H
diff --git a/src/corelib/doc/snippets/code/src_corelib_thread_qfuturesynchronizer.cpp b/src/corelib/doc/snippets/code/src_corelib_thread_qfuturesynchronizer.cpp
new file mode 100644
index 0000000..7b2d3d2
--- /dev/null
+++ b/src/corelib/doc/snippets/code/src_corelib_thread_qfuturesynchronizer.cpp
@@ -0,0 +1,53 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/legal
+**
+** This file is part of the documentation of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:BSD$
+** You may use this file under the terms of the BSD license as follows:
+**
+** "Redistribution and use in source and binary forms, with or without
+** modification, are permitted provided that the following conditions are
+** met:
+**   * Redistributions of source code must retain the above copyright
+**     notice, this list of conditions and the following disclaimer.
+**   * Redistributions in binary form must reproduce the above copyright
+**     notice, this list of conditions and the following disclaimer in
+**     the documentation and/or other materials provided with the
+**     distribution.
+**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
+**     of its contributors may be used to endorse or promote products derived
+**     from this software without specific prior written permission.
+**
+**
+** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+//! [0]
+void someFunction()
+{
+    QFutureSynchronizer<void> synchronizer;
+
+    ...
+
+    synchronizer.addFuture(QtConcurrent::run(anotherFunction));
+    synchronizer.addFuture(QtConcurrent::map(list, mapFunction));
+
+    return; // QFutureSynchronizer waits for all futures to finish
+}
+//! [0]
diff --git a/src/corelib/thread/qfuturesynchronizer.h b/src/corelib/thread/qfuturesynchronizer.h
new file mode 100644
index 0000000..12edcfb
--- /dev/null
+++ b/src/corelib/thread/qfuturesynchronizer.h
@@ -0,0 +1,120 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/legal
+**
+** This file is part of the QtCore module of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and Digia.  For licensing terms and
+** conditions see http://qt.digia.com/licensing.  For further information
+** use the contact form at http://qt.digia.com/contact-us.
+**
+** GNU Lesser General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU Lesser
+** General Public License version 2.1 as published by the Free Software
+** Foundation and appearing in the file LICENSE.LGPL included in the
+** packaging of this file.  Please review the following information to
+** ensure the GNU Lesser General Public License version 2.1 requirements
+** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** In addition, as a special exception, Digia gives you certain additional
+** rights.  These rights are described in the Digia Qt LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU
+** General Public License version 3.0 as published by the Free Software
+** Foundation and appearing in the file LICENSE.GPL included in the
+** packaging of this file.  Please review the following information to
+** ensure the GNU General Public License version 3.0 requirements will be
+** met: http://www.gnu.org/copyleft/gpl.html.
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#ifndef QFUTURESYNCHRONIZER_H
+#define QFUTURESYNCHRONIZER_H
+
+#include <QtCore/qfuture.h>
+
+#ifndef QT_NO_QFUTURE
+
+QT_BEGIN_HEADER
+QT_BEGIN_NAMESPACE
+
+
+template <typename T>
+class QFutureSynchronizer
+{
+    Q_DISABLE_COPY(QFutureSynchronizer)
+
+public:
+    QFutureSynchronizer() : m_cancelOnWait(false) { }
+    explicit QFutureSynchronizer(const QFuture<T> &future)
+        : m_cancelOnWait(false)
+    { addFuture(future); }
+    ~QFutureSynchronizer()  { waitForFinished(); }
+
+    void setFuture(const QFuture<T> &future)
+    {
+        waitForFinished();
+        m_futures.clear();
+        addFuture(future);
+    }
+
+    void addFuture(const QFuture<T> &future)
+    {
+        m_futures.append(future);
+    }
+
+    void waitForFinished()
+    {
+        if (m_cancelOnWait) {
+            for (int i = 0; i < m_futures.count(); ++i) {
+                 m_futures[i].cancel();
+            }
+        }
+        
+        for (int i = 0; i < m_futures.count(); ++i) {
+             m_futures[i].waitForFinished();
+         }
+    }
+
+    void clearFutures()
+    {
+        m_futures.clear();
+    }
+
+    QList<QFuture<T> > futures() const
+    {
+        return m_futures;
+    }
+
+    void setCancelOnWait(bool enabled)
+    {
+        m_cancelOnWait = enabled;
+    }
+
+    bool cancelOnWait() const
+    {
+        return m_cancelOnWait;
+    }
+
+protected:
+    QList<QFuture<T> > m_futures;
+    bool m_cancelOnWait;
+};
+
+QT_END_NAMESPACE
+QT_END_HEADER
+
+#endif // QT_NO_QFUTURE
+
+#endif // QFUTURESYNCHRONIZER_H
diff --git a/src/corelib/thread/qfuturesynchronizer.qdoc b/src/corelib/thread/qfuturesynchronizer.qdoc
new file mode 100644
index 0000000..903dc89
--- /dev/null
+++ b/src/corelib/thread/qfuturesynchronizer.qdoc
@@ -0,0 +1,156 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/legal
+**
+** This file is part of the QtCore module of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and Digia.  For licensing terms and
+** conditions see http://qt.digia.com/licensing.  For further information
+** use the contact form at http://qt.digia.com/contact-us.
+**
+** GNU Lesser General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU Lesser
+** General Public License version 2.1 as published by the Free Software
+** Foundation and appearing in the file LICENSE.LGPL included in the
+** packaging of this file.  Please review the following information to
+** ensure the GNU Lesser General Public License version 2.1 requirements
+** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** In addition, as a special exception, Digia gives you certain additional
+** rights.  These rights are described in the Digia Qt LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU
+** General Public License version 3.0 as published by the Free Software
+** Foundation and appearing in the file LICENSE.GPL included in the
+** packaging of this file.  Please review the following information to
+** ensure the GNU General Public License version 3.0 requirements will be
+** met: http://www.gnu.org/copyleft/gpl.html.
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+/*! \class QFutureSynchronizer
+    \since 4.4
+
+    \brief The QFutureSynchronizer class is a convenience class that simplifies
+    QFuture synchronization.
+
+    \ingroup thread
+
+    QFutureSynchronizer is a template class that simplifies synchronization of
+    one or more QFuture objects. Futures are added using the addFuture() or
+    setFuture() functions. The futures() function returns a list of futures.
+    Use clearFutures() to remove all futures from the QFutureSynchronizer.
+    
+    The waitForFinished() function waits for all futures to finish.
+    The destructor of QFutureSynchronizer calls waitForFinished(), providing
+    an easy way to ensure that all futures have finished before returning from
+    a function:
+    
+    \snippet code/src_corelib_thread_qfuturesynchronizer.cpp 0
+    
+    The behavior of waitForFinished() can be changed using the
+    setCancelOnWait() function. Calling setCancelOnWait(true) will cause
+    waitForFinished() to cancel all futures before waiting for them to finish.
+    You can query the status of the cancel-on-wait feature using the
+    cancelOnWait() function.
+    
+    \sa QFuture, QFutureWatcher, {Concurrent Programming}{Qt Concurrent}
+*/
+
+/*!
+    \fn QFutureSynchronizer::QFutureSynchronizer()
+
+    Constructs a QFutureSynchronizer.
+*/
+
+/*!
+    \fn QFutureSynchronizer::QFutureSynchronizer(const QFuture<T> &future)
+
+    Constructs a QFutureSynchronizer and begins watching \a future by calling
+    addFuture().
+    
+    \sa addFuture()
+*/
+
+/*!
+    \fn QFutureSynchronizer::~QFutureSynchronizer()
+    
+    Calls waitForFinished() function to ensure that all futures have finished
+    before destroying this QFutureSynchronizer.
+    
+    \sa waitForFinished()
+*/
+
+/*!
+    \fn void QFutureSynchronizer::setFuture(const QFuture<T> &future)
+    
+    Sets \a future to be the only future managed by this QFutureSynchronizer.
+    This is a convenience function that calls waitForFinished(),
+    then clearFutures(), and finally passes \a future to addFuture().
+    
+    \sa addFuture(), waitForFinished(), clearFutures()
+*/
+
+/*!
+    \fn void QFutureSynchronizer::addFuture(const QFuture<T> &future)
+
+    Adds \a future to the list of managed futures.
+    
+    \sa futures()
+*/
+
+/*!
+    \fn void QFutureSynchronizer::waitForFinished()
+
+    Waits for all futures to finish. If cancelOnWait() returns true, each
+    future is canceled before waiting for them to finish.
+    
+    \sa cancelOnWait(), setCancelOnWait()
+*/
+
+/*!
+    \fn void QFutureSynchronizer::clearFutures()
+
+    Removes all managed futures from this QFutureSynchronizer.
+    
+    \sa addFuture(), setFuture()
+*/
+
+/*!
+    \fn QList<QFuture<T> > QFutureSynchronizer::futures() const
+
+    Returns a list of all managed futures.
+    
+    \sa addFuture(), setFuture()
+*/
+
+/*!
+    \fn void QFutureSynchronizer::setCancelOnWait(bool enabled)
+    
+    Enables or disables the cancel-on-wait feature based on the \a enabled
+    argument. If \a enabled is true, the waitForFinished() function will cancel
+    all futures before waiting for them to finish.
+
+    \sa waitForFinished()
+*/
+
+/*!
+    \fn bool QFutureSynchronizer::cancelOnWait() const
+
+    Returns true if the cancel-on-wait feature is enabled; otherwise returns
+    false. If cancel-on-wait is enabled, the waitForFinished() function will
+    cancel all futures before waiting for them to finish.
+
+    \sa waitForFinished()
+*/
diff --git a/src/corelib/thread/thread.pri b/src/corelib/thread/thread.pri
index 6e341be..7247f29 100644
--- a/src/corelib/thread/thread.pri
+++ b/src/corelib/thread/thread.pri
@@ -14,6 +14,7 @@ HEADERS += thread/qmutex.h \
            thread/qresultstore.h \
            thread/qfuture.h \
            thread/qfutureinterface.h \
+           thread/qfuturesynchronizer.h \
            thread/qfuturewatcher.h \
            thread/qbasicatomic.h \
            thread/qgenericatomic.h \
diff --git a/tests/auto/concurrent/concurrent.pro b/tests/auto/concurrent/concurrent.pro
index 14aff5d..20bad24 100644
--- a/tests/auto/concurrent/concurrent.pro
+++ b/tests/auto/concurrent/concurrent.pro
@@ -1,6 +1,5 @@
 TEMPLATE=subdirs
 SUBDIRS=\
-   qfuturesynchronizer \
    qtconcurrentfilter \
    qtconcurrentiteratekernel \
    qtconcurrentmap \
diff --git a/tests/auto/concurrent/qfuturesynchronizer/qfuturesynchronizer.pro b/tests/auto/concurrent/qfuturesynchronizer/qfuturesynchronizer.pro
deleted file mode 100644
index a828213..0000000
--- a/tests/auto/concurrent/qfuturesynchronizer/qfuturesynchronizer.pro
+++ /dev/null
@@ -1,5 +0,0 @@
-CONFIG += testcase parallel_test
-TARGET = tst_qfuturesynchronizer
-QT = core testlib concurrent
-SOURCES = tst_qfuturesynchronizer.cpp
-DEFINES += QT_DISABLE_DEPRECATED_BEFORE=0
diff --git a/tests/auto/concurrent/qfuturesynchronizer/tst_qfuturesynchronizer.cpp b/tests/auto/concurrent/qfuturesynchronizer/tst_qfuturesynchronizer.cpp
deleted file mode 100644
index 5d643a4..0000000
--- a/tests/auto/concurrent/qfuturesynchronizer/tst_qfuturesynchronizer.cpp
+++ /dev/null
@@ -1,158 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/legal
-**
-** This file is part of the test suite of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:LGPL$
-** Commercial License Usage
-** Licensees holding valid commercial Qt licenses may use this file in
-** accordance with the commercial license agreement provided with the
-** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
-** use the contact form at http://qt.digia.com/contact-us.
-**
-** GNU Lesser General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU Lesser
-** General Public License version 2.1 as published by the Free Software
-** Foundation and appearing in the file LICENSE.LGPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU Lesser General Public License version 2.1 requirements
-** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
-**
-** In addition, as a special exception, Digia gives you certain additional
-** rights.  These rights are described in the Digia Qt LGPL Exception
-** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
-**
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU
-** General Public License version 3.0 as published by the Free Software
-** Foundation and appearing in the file LICENSE.GPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU General Public License version 3.0 requirements will be
-** met: http://www.gnu.org/copyleft/gpl.html.
-**
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-#include <QtTest>
-
-#include <QtConcurrent/qfuturesynchronizer.h>
-#include <QtCore/qfuture.h>
-
-class tst_QFutureSynchronizer : public QObject
-{
-    Q_OBJECT
-
-
-private Q_SLOTS:
-    void construction();
-    void addFuture();
-    void cancelOnWait();
-    void clearFutures();
-    void futures();
-    void setFuture();
-    void waitForFinished();
-};
-
-
-void tst_QFutureSynchronizer::construction()
-{
-
-    QFuture<void> future;
-    QFutureSynchronizer<void> synchronizer;
-    QFutureSynchronizer<void> synchronizerWithFuture(future);
-
-    QCOMPARE(synchronizer.futures().size(), 0);
-    QCOMPARE(synchronizerWithFuture.futures().size(), 1);
-}
-
-void tst_QFutureSynchronizer::addFuture()
-{
-    QFutureSynchronizer<void> synchronizer;
-
-    synchronizer.addFuture(QFuture<void>());
-    QFuture<void> future;
-    synchronizer.addFuture(future);
-    synchronizer.addFuture(future);
-
-    QCOMPARE(synchronizer.futures().size(), 3);
-}
-
-void tst_QFutureSynchronizer::cancelOnWait()
-{
-    QFutureSynchronizer<void> synchronizer;
-    QVERIFY(!synchronizer.cancelOnWait());
-    synchronizer.setCancelOnWait(true);
-    QVERIFY(synchronizer.cancelOnWait());
-    synchronizer.setCancelOnWait(false);
-    QVERIFY(!synchronizer.cancelOnWait());
-    synchronizer.setCancelOnWait(true);
-    QVERIFY(synchronizer.cancelOnWait());
-}
-
-void tst_QFutureSynchronizer::clearFutures()
-{
-    QFutureSynchronizer<void> synchronizer;
-    synchronizer.clearFutures();
-    QVERIFY(synchronizer.futures().isEmpty());
-
-    synchronizer.addFuture(QFuture<void>());
-    QFuture<void> future;
-    synchronizer.addFuture(future);
-    synchronizer.addFuture(future);
-    synchronizer.clearFutures();
-    QVERIFY(synchronizer.futures().isEmpty());
-}
-
-void tst_QFutureSynchronizer::futures()
-{
-    QFutureSynchronizer<void> synchronizer;
-
-    QList<QFuture<void> > futures;
-    for (int i=0; i<100; i++) {
-        QFuture<void> future;
-        futures.append(future);
-        synchronizer.addFuture(future);
-    }
-
-    QCOMPARE(futures, synchronizer.futures());
-}
-
-void tst_QFutureSynchronizer::setFuture()
-{
-    QFutureSynchronizer<void> synchronizer;
-
-    for (int i=0; i<100; i++) {
-        synchronizer.addFuture(QFuture<void>());
-    }
-    QCOMPARE(synchronizer.futures().size(), 100);
-
-    QFuture<void> future;
-    synchronizer.setFuture(future);
-    QCOMPARE(synchronizer.futures().size(), 1);
-    QCOMPARE(synchronizer.futures().first(), future);
-}
-
-void tst_QFutureSynchronizer::waitForFinished()
-{
-    QFutureSynchronizer<void> synchronizer;
-
-    for (int i=0; i<100; i++) {
-        synchronizer.addFuture(QFuture<void>());
-    }
-    synchronizer.waitForFinished();
-    const QList<QFuture<void> > futures = synchronizer.futures();
-
-    for (int i=0; i<100; i++) {
-        QVERIFY(futures.at(i).isFinished());
-    }
-}
-
-QTEST_MAIN(tst_QFutureSynchronizer)
-
-#include "tst_qfuturesynchronizer.moc"
diff --git a/tests/auto/corelib/thread/qfuturesynchronizer/qfuturesynchronizer.pro b/tests/auto/corelib/thread/qfuturesynchronizer/qfuturesynchronizer.pro
new file mode 100644
index 0000000..a828213
--- /dev/null
+++ b/tests/auto/corelib/thread/qfuturesynchronizer/qfuturesynchronizer.pro
@@ -0,0 +1,5 @@
+CONFIG += testcase parallel_test
+TARGET = tst_qfuturesynchronizer
+QT = core testlib concurrent
+SOURCES = tst_qfuturesynchronizer.cpp
+DEFINES += QT_DISABLE_DEPRECATED_BEFORE=0
diff --git a/tests/auto/corelib/thread/qfuturesynchronizer/tst_qfuturesynchronizer.cpp b/tests/auto/corelib/thread/qfuturesynchronizer/tst_qfuturesynchronizer.cpp
new file mode 100644
index 0000000..6b48c96
--- /dev/null
+++ b/tests/auto/corelib/thread/qfuturesynchronizer/tst_qfuturesynchronizer.cpp
@@ -0,0 +1,158 @@
+/****************************************************************************
+**
+** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/legal
+**
+** This file is part of the test suite of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and Digia.  For licensing terms and
+** conditions see http://qt.digia.com/licensing.  For further information
+** use the contact form at http://qt.digia.com/contact-us.
+**
+** GNU Lesser General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU Lesser
+** General Public License version 2.1 as published by the Free Software
+** Foundation and appearing in the file LICENSE.LGPL included in the
+** packaging of this file.  Please review the following information to
+** ensure the GNU Lesser General Public License version 2.1 requirements
+** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** In addition, as a special exception, Digia gives you certain additional
+** rights.  These rights are described in the Digia Qt LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU
+** General Public License version 3.0 as published by the Free Software
+** Foundation and appearing in the file LICENSE.GPL included in the
+** packaging of this file.  Please review the following information to
+** ensure the GNU General Public License version 3.0 requirements will be
+** met: http://www.gnu.org/copyleft/gpl.html.
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#include <QtTest>
+
+#include <QtCore/qfuturesynchronizer.h>
+#include <QtCore/qfuture.h>
+
+class tst_QFutureSynchronizer : public QObject
+{
+    Q_OBJECT
+
+
+private Q_SLOTS:
+    void construction();
+    void addFuture();
+    void cancelOnWait();
+    void clearFutures();
+    void futures();
+    void setFuture();
+    void waitForFinished();
+};
+
+
+void tst_QFutureSynchronizer::construction()
+{
+
+    QFuture<void> future;
+    QFutureSynchronizer<void> synchronizer;
+    QFutureSynchronizer<void> synchronizerWithFuture(future);
+
+    QCOMPARE(synchronizer.futures().size(), 0);
+    QCOMPARE(synchronizerWithFuture.futures().size(), 1);
+}
+
+void tst_QFutureSynchronizer::addFuture()
+{
+    QFutureSynchronizer<void> synchronizer;
+
+    synchronizer.addFuture(QFuture<void>());
+    QFuture<void> future;
+    synchronizer.addFuture(future);
+    synchronizer.addFuture(future);
+
+    QCOMPARE(synchronizer.futures().size(), 3);
+}
+
+void tst_QFutureSynchronizer::cancelOnWait()
+{
+    QFutureSynchronizer<void> synchronizer;
+    QVERIFY(!synchronizer.cancelOnWait());
+    synchronizer.setCancelOnWait(true);
+    QVERIFY(synchronizer.cancelOnWait());
+    synchronizer.setCancelOnWait(false);
+    QVERIFY(!synchronizer.cancelOnWait());
+    synchronizer.setCancelOnWait(true);
+    QVERIFY(synchronizer.cancelOnWait());
+}
+
+void tst_QFutureSynchronizer::clearFutures()
+{
+    QFutureSynchronizer<void> synchronizer;
+    synchronizer.clearFutures();
+    QVERIFY(synchronizer.futures().isEmpty());
+
+    synchronizer.addFuture(QFuture<void>());
+    QFuture<void> future;
+    synchronizer.addFuture(future);
+    synchronizer.addFuture(future);
+    synchronizer.clearFutures();
+    QVERIFY(synchronizer.futures().isEmpty());
+}
+
+void tst_QFutureSynchronizer::futures()
+{
+    QFutureSynchronizer<void> synchronizer;
+
+    QList<QFuture<void> > futures;
+    for (int i=0; i<100; i++) {
+        QFuture<void> future;
+        futures.append(future);
+        synchronizer.addFuture(future);
+    }
+
+    QCOMPARE(futures, synchronizer.futures());
+}
+
+void tst_QFutureSynchronizer::setFuture()
+{
+    QFutureSynchronizer<void> synchronizer;
+
+    for (int i=0; i<100; i++) {
+        synchronizer.addFuture(QFuture<void>());
+    }
+    QCOMPARE(synchronizer.futures().size(), 100);
+
+    QFuture<void> future;
+    synchronizer.setFuture(future);
+    QCOMPARE(synchronizer.futures().size(), 1);
+    QCOMPARE(synchronizer.futures().first(), future);
+}
+
+void tst_QFutureSynchronizer::waitForFinished()
+{
+    QFutureSynchronizer<void> synchronizer;
+
+    for (int i=0; i<100; i++) {
+        synchronizer.addFuture(QFuture<void>());
+    }
+    synchronizer.waitForFinished();
+    const QList<QFuture<void> > futures = synchronizer.futures();
+
+    for (int i=0; i<100; i++) {
+        QVERIFY(futures.at(i).isFinished());
+    }
+}
+
+QTEST_MAIN(tst_QFutureSynchronizer)
+
+#include "tst_qfuturesynchronizer.moc"
diff --git a/tests/auto/corelib/thread/thread.pro b/tests/auto/corelib/thread/thread.pro
index ee64aea..f529bd8 100644
--- a/tests/auto/corelib/thread/thread.pro
+++ b/tests/auto/corelib/thread/thread.pro
@@ -4,6 +4,7 @@ SUBDIRS=\
     qatomicpointer \
     qresultstore \
     qfuture \
+    qfuturesynchronizer \
     qfuturewatcher \
     qmutex \
     qmutexlocker \