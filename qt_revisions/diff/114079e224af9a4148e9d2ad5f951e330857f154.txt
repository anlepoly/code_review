diff --git a/src/plugins/platforms/windows/qwindowsscreen.cpp b/src/plugins/platforms/windows/qwindowsscreen.cpp
index c8966f2..aadc6ec 100644
--- a/src/plugins/platforms/windows/qwindowsscreen.cpp
+++ b/src/plugins/platforms/windows/qwindowsscreen.cpp
@@ -108,6 +108,7 @@ BOOL QT_WIN_CALLBACK monitorEnumCallback(HMONITOR hMonitor, HDC, LPRECT, LPARAM
     data.geometry = QRect(QPoint(info.rcMonitor.left, info.rcMonitor.top), QPoint(info.rcMonitor.right - 1, info.rcMonitor.bottom - 1));
     data.availableGeometry = QRect(QPoint(info.rcWork.left, info.rcWork.top), QPoint(info.rcWork.right - 1, info.rcWork.bottom - 1));
     data.primary = (info.dwFlags & MONITORINFOF_PRIMARY) != 0;
+    data.name = QString::fromWCharArray(info.szDevice);
     result->append(data);
     return TRUE;
 }
diff --git a/src/plugins/platforms/windows/qwindowsscreen.h b/src/plugins/platforms/windows/qwindowsscreen.h
index dc1c823..a7b9ba7 100644
--- a/src/plugins/platforms/windows/qwindowsscreen.h
+++ b/src/plugins/platforms/windows/qwindowsscreen.h
@@ -61,6 +61,7 @@ struct QWindowsScreenData
     int depth;
     QImage::Format format;
     bool primary;
+    QString name;
 };
 
 class QWindowsScreen : public QPlatformScreen
@@ -76,6 +77,7 @@ public:
     virtual QImage::Format format() const { return m_data.format; }
     virtual QSizeF physicalSize() const { return m_data.physicalSizeMM; }
     virtual QDpi logicalDpi() const { return m_data.dpi; }
+    virtual QString name() const { return m_data.name; }
 
     virtual QWindow *topLevelAt(const QPoint &point) const
         {  return QWindowsScreen::findTopLevelAt(point, CWP_SKIPINVISIBLE);  }