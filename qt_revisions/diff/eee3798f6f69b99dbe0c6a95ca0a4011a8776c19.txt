diff --git a/src/network/access/qnetworkcookie.cpp b/src/network/access/qnetworkcookie.cpp
index 7299633..b3324a1 100644
--- a/src/network/access/qnetworkcookie.cpp
+++ b/src/network/access/qnetworkcookie.cpp
@@ -1059,6 +1059,7 @@ QList<QNetworkCookie> QNetworkCookiePrivate::parseSetCookieHeaderLine(const QByt
 /*!
     \since 5.0
     This functions normalizes the path and domain of the cookie if they were previously empty.
+    The \a url parameter is used to determine the correct domain and path.
 */
 void QNetworkCookie::normalize(const QUrl &url)
 {
diff --git a/src/network/access/qnetworkcookiejar.cpp b/src/network/access/qnetworkcookiejar.cpp
index 980b02e..9e5dfe0 100644
--- a/src/network/access/qnetworkcookiejar.cpp
+++ b/src/network/access/qnetworkcookiejar.cpp
@@ -316,6 +316,8 @@ bool QNetworkCookieJar::deleteCookie(const QNetworkCookie &cookie)
 /*!
     \since 5.0
     Returns true if the domain and path of \a cookie are valid, false otherwise.
+    The \a url parameter is used to determine if the domain specified in the cookie
+    is allowed.
 */
 bool QNetworkCookieJar::validateCookie(const QNetworkCookie &cookie, const QUrl &url) const
 {
diff --git a/src/network/socket/qabstractsocket.cpp b/src/network/socket/qabstractsocket.cpp
index a6eb362..9d95d3a 100644
--- a/src/network/socket/qabstractsocket.cpp
+++ b/src/network/socket/qabstractsocket.cpp
@@ -252,6 +252,7 @@
 
     \value IPv4Protocol IPv4
     \value IPv6Protocol IPv6
+    \value AnyIPProtocol Either IPv4 or IPv6
     \value UnknownNetworkLayerProtocol Other than IPv4 and IPv6
 
     \sa QHostAddress::protocol()
@@ -339,12 +340,6 @@
     \value ClosingState The socket is about to close (data may still
     be waiting to be written).
     \value ListeningState For internal use only.
-    \omitvalue Idle
-    \omitvalue HostLookup
-    \omitvalue Connecting
-    \omitvalue Connected
-    \omitvalue Closing
-    \omitvalue Connection
 
     \sa QAbstractSocket::state()
 */
@@ -1403,7 +1398,8 @@ QAbstractSocket::PauseModes QAbstractSocket::pauseMode() const
 /*!
     \since 5.0
 
-    Controls whether to pause upon receiving a notification. The only notification
+    Controls whether to pause upon receiving a notification. The \pauseMode parameter
+    specifies the conditions in which the socket should be paused. The only notification
     currently supported is QSslSocket::sslErrors(). If set to PauseOnSslErrors,
     data transfer on the socket will be paused and needs to be enabled explicitly
     again by calling resume().
@@ -1524,6 +1520,8 @@ bool QAbstractSocket::isValid() const
 
 /*!
     Attempts to make a connection to \a hostName on the given \a port.
+    The \a protocol parameter can be used to specify which network
+    protocol to use (eg. IPv4 or IPv6).
 
     The socket is opened in the given \a openMode and first enters
     HostLookupState, then performs a host name lookup of \a hostName.
diff --git a/src/network/ssl/qssl.cpp b/src/network/ssl/qssl.cpp
index 9a00b2a..60679a2 100644
--- a/src/network/ssl/qssl.cpp
+++ b/src/network/ssl/qssl.cpp
@@ -70,6 +70,10 @@ QT_BEGIN_NAMESPACE
 
     \value Rsa The RSA algorithm.
     \value Dsa The DSA algorithm.
+    \value Opaque A key that should be treated as a 'black box' by QSslKey.
+
+    The opaque key facility allows applications to add support for facilities
+    such as PKCS#11 that Qt does not currently offer natively.
 */
 
 /*!
diff --git a/src/network/ssl/qsslcertificateextension.cpp b/src/network/ssl/qsslcertificateextension.cpp
index 8a4e740..fae261a 100644
--- a/src/network/ssl/qsslcertificateextension.cpp
+++ b/src/network/ssl/qsslcertificateextension.cpp
@@ -133,6 +133,9 @@
 
 QT_BEGIN_NAMESPACE
 
+/*!
+    Constructs a QSslCertificateExtension.
+ */
 QSslCertificateExtension::QSslCertificateExtension()
     : d(new QSslCertificateExtensionPrivate)
 {
diff --git a/src/network/ssl/qsslsocket.cpp b/src/network/ssl/qsslsocket.cpp
index 3445f13..6f031f2 100644
--- a/src/network/ssl/qsslsocket.cpp
+++ b/src/network/ssl/qsslsocket.cpp
@@ -377,7 +377,8 @@ void QSslSocket::resume()
     Starts an encrypted connection to the device \a hostName on \a
     port, using \a mode as the \l OpenMode. This is equivalent to
     calling connectToHost() to establish the connection, followed by a
-    call to startClientEncryption().
+    call to startClientEncryption(). The \a protocol parameter can be
+    used to specify which network protocol to use (eg. IPv4 or IPv6).
 
     QSslSocket first enters the HostLookupState. Then, after entering
     either the event loop or one of the waitFor...() functions, it