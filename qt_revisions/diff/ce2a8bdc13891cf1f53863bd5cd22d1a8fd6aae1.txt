diff --git a/src/gui/image/qpixmap.cpp b/src/gui/image/qpixmap.cpp
index 95b8df2..a082cf4 100644
--- a/src/gui/image/qpixmap.cpp
+++ b/src/gui/image/qpixmap.cpp
@@ -832,25 +832,28 @@ bool QPixmap::doImageIO(QImageWriter *writer, int quality) const
     return writer->write(toImage());
 }
 
-/*!
-    \fn void QPixmap::fill(const QPaintDevice *device, int x, int y)
-    \overload
 
+/*!
     \obsolete
 
-    Fills the pixmap with the \a device's background color or pixmap.
-    The given point, (\a x, \a y), defines an offset in widget
-    coordinates to which the pixmap's top-left pixel will be mapped
-    to.
+    Use QPainter or the fill(QColor) overload instead.
 */
 
-void QPixmap::fill(const QPaintDevice *, const QPoint &)
+void QPixmap::fill(const QPaintDevice *device, const QPoint &p)
 {
     qWarning() << "QPixmap::fill(const QPaintDevice *device, const QPoint &offset) is deprecated, ignored";
 }
 
 
 /*!
+    \fn void QPixmap::fill(const QPaintDevice *device, int x, int y)
+    \obsolete
+
+    Use QPainter or the fill(QColor) overload instead.
+*/
+
+
+/*!
     Fills the pixmap with the given \a color.
 
     The effect of this function is undefined when the pixmap is
@@ -931,6 +934,11 @@ static void sendResizeEvents(QWidget *target)
 }
 #endif
 
+/*!
+    \obsolete
+
+    Use QWidget::grab() instead.
+*/
 QPixmap QPixmap::grabWidget(QObject *widget, const QRect &rectangle)
 {
     QPixmap pixmap;
@@ -943,6 +951,13 @@ QPixmap QPixmap::grabWidget(QObject *widget, const QRect &rectangle)
     return pixmap;
 }
 
+/*!
+    \fn QPixmap QPixmap::grabWidget(QObject *widget, int x, int y, int w, int h)
+    \obsolete
+
+    Use QWidget::grab() instead.
+*/
+
 /*****************************************************************************
   QPixmap stream functions
  *****************************************************************************/
@@ -1215,11 +1230,6 @@ QPixmap QPixmap::transformed(const QMatrix &matrix, Qt::TransformationMode mode)
     QToolButton). QLabel has a pixmap property, whereas
     QAbstractButton has an icon property.
 
-    In addition to the ordinary constructors, a QPixmap can be
-    constructed using the static grabWidget() and grabWindow()
-    functions which creates a QPixmap and paints the given widget, or
-    window, into it.
-
     QPixmap objects can be passed around by value since the QPixmap
     class uses implicit data sharing. For more information, see the \l
     {Implicit Data Sharing} documentation. QPixmap objects can also be
@@ -1634,13 +1644,13 @@ QDebug operator<<(QDebug dbg, const QPixmap &r)
 /*!
     \fn QPixmap QPixmap::alphaChannel() const
 
-    Use QImage::alphaChannel() instead.
+    Most use cases for this can be achieved using a QPainter and QPainter::CompositionMode instead.
 */
 
 /*!
     \fn void QPixmap::setAlphaChannel(const QPixmap &p)
 
-    Use QImage::setAlphaChannel() for \a p instead.
+    Most use cases for this can be achieved using \a p with QPainter and QPainter::CompositionMode instead.
 */
 
 QT_END_NAMESPACE
diff --git a/src/gui/kernel/qplatformsystemtrayicon_qpa.cpp b/src/gui/kernel/qplatformsystemtrayicon_qpa.cpp
index 425fbda..e3179b4 100644
--- a/src/gui/kernel/qplatformsystemtrayicon_qpa.cpp
+++ b/src/gui/kernel/qplatformsystemtrayicon_qpa.cpp
@@ -52,6 +52,33 @@ QT_BEGIN_NAMESPACE
 */
 
 /*!
+    \enum QPlatformSystemTrayIcon::MessageIcon
+
+    This enum describes the icon that is shown when a balloon message is displayed.
+
+    \value NoIcon      No icon is shown.
+    \value Information An information icon is shown.
+    \value Warning     A standard warning icon is shown.
+    \value Critical    A critical warning icon is shown.
+
+    \sa updateIcon(), showMessage(), QMessageBox
+*/
+
+/*!
+    \enum QPlatformSystemTrayIcon::ActivationReason
+
+     This enum describes the reason the system tray was activated.
+
+     \value Unknown     Unknown reason
+     \value Context     The context menu for the system tray entry was requested
+     \value DoubleClick The system tray entry was double clicked
+     \value Trigger     The system tray entry was clicked
+     \value MiddleClick The system tray entry was clicked with the middle mouse button
+
+     \sa activated()
+*/
+
+/*!
     \internal
  */
 QPlatformSystemTrayIcon::QPlatformSystemTrayIcon()
@@ -120,6 +147,15 @@ QPlatformSystemTrayIcon::~QPlatformSystemTrayIcon()
     \sa QSystemTrayIcon::ActivationReason
 */
 
+/*!
+    \fn void QPlatformSystemTrayIcon::messageClicked()
+
+    This signal is emitted when the message displayed using showMessage()
+    was clicked by the user.
+
+    \sa activated()
+*/
+
 QT_END_NAMESPACE
 
 #include "moc_qplatformsystemtrayicon.cpp"
diff --git a/src/gui/painting/qpagedpaintdevice.cpp b/src/gui/painting/qpagedpaintdevice.cpp
index dc05bc3..1d71fe1 100644
--- a/src/gui/painting/qpagedpaintdevice.cpp
+++ b/src/gui/painting/qpagedpaintdevice.cpp
@@ -155,7 +155,7 @@ QPagedPaintDevice::~QPagedPaintDevice()
 /*!
   \fn bool QPagedPaintDevice::newPage()
 
-  Starts a new page.
+  Starts a new page. Returns \c true on success.
 */
 
 
diff --git a/src/gui/painting/qpaintdevice.cpp b/src/gui/painting/qpaintdevice.cpp
index 7952ee0..47cc3fb 100644
--- a/src/gui/painting/qpaintdevice.cpp
+++ b/src/gui/painting/qpaintdevice.cpp
@@ -57,16 +57,24 @@ QPaintDevice::~QPaintDevice()
 }
 
 
-
+/*!
+    \internal
+*/
 void QPaintDevice::init(QPainter *) const
 {
 }
 
+/*!
+    \internal
+*/
 QPaintDevice *QPaintDevice::redirected(QPoint *) const
 {
     return 0;
 }
 
+/*!
+    \internal
+*/
 QPainter *QPaintDevice::sharedPainter() const
 {
     return 0;
diff --git a/src/gui/painting/qpaintengine_raster.cpp b/src/gui/painting/qpaintengine_raster.cpp
index 1ad8320..d93b127 100644
--- a/src/gui/painting/qpaintengine_raster.cpp
+++ b/src/gui/painting/qpaintengine_raster.cpp
@@ -166,6 +166,9 @@ static inline bool winClearTypeFontsEnabled()
     return result == FE_FONTSMOOTHINGCLEARTYPE;
 }
 
+/*!
+    \internal
+ */
 bool QRasterPaintEngine::clearTypeFontsEnabled()
 {
     static const bool result = winClearTypeFontsEnabled();
@@ -1369,6 +1372,13 @@ void QRasterPaintEngine::clip(const QRegion &region, Qt::ClipOperation op)
 }
 
 /*!
+ \fn const QClipData *QRasterPaintEngine::clipData() const
+
+ \internal
+*/
+
+
+/*!
     \internal
 */
 void QRasterPaintEngine::fillPath(const QPainterPath &path, QSpanData *fillData)
@@ -2737,6 +2747,9 @@ void QRasterPaintEngine::alphaPenBlt(const void* src, int bpl, int depth, int rx
         blend(current, spans, &s->penData);
 }
 
+/*!
+    \internal
+*/
 bool QRasterPaintEngine::drawCachedGlyphs(int numGlyphs, const glyph_t *glyphs,
                                           const QFixedPoint *positions, QFontEngine *fontEngine)
 {
@@ -3250,12 +3263,18 @@ void QRasterPaintEngine::releaseDC(HDC) const
 
 #endif
 
+/*!
+    \internal
+*/
 bool QRasterPaintEngine::supportsTransformations(QFontEngine *fontEngine) const
 {
     const QTransform &m = state()->matrix;
     return supportsTransformations(fontEngine, m);
 }
 
+/*!
+    \internal
+*/
 bool QRasterPaintEngine::supportsTransformations(QFontEngine *fontEngine, const QTransform &m) const
 {
     if (m.type() >= QTransform::TxProject)