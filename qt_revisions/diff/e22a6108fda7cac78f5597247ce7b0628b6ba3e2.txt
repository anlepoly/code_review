diff --git a/src/dbus/qdbusabstractadaptor.cpp b/src/dbus/qdbusabstractadaptor.cpp
index 7bdd947..e8c56eb 100644
--- a/src/dbus/qdbusabstractadaptor.cpp
+++ b/src/dbus/qdbusabstractadaptor.cpp
@@ -296,7 +296,7 @@ void QDBusAdaptorConnector::relay(QObject *senderObj, int lastSignalIdx, void **
         realObject = realObject->parent();
 
     // break down the parameter list
-    QList<int> types;
+    QVector<int> types;
     int inputCount = qDBusParametersForMethod(mm, types);
     if (inputCount == -1)
         // invalid signal signature
diff --git a/src/dbus/qdbusconnection_p.h b/src/dbus/qdbusconnection_p.h
index 41a1341..5f58b2c 100644
--- a/src/dbus/qdbusconnection_p.h
+++ b/src/dbus/qdbusconnection_p.h
@@ -124,7 +124,7 @@ public:
         QString service, path, signature;
         QObject* obj;
         int midx;
-        QList<int> params;
+        QVector<int> params;
         QStringList argumentMatch;
         QByteArray matchRule;
     };
@@ -241,7 +241,7 @@ private:
 
     void sendError(const QDBusMessage &msg, QDBusError::ErrorType code);
     void deliverCall(QObject *object, int flags, const QDBusMessage &msg,
-                     const QList<int> &metaTypes, int slotIdx);
+                     const QVector<int> &metaTypes, int slotIdx);
 
     bool isServiceRegisteredByThread(const QString &serviceName) const;
 
@@ -309,7 +309,7 @@ public:
 
 public:
     // static methods
-    static int findSlot(QObject *obj, const QByteArray &normalizedName, QList<int>& params);
+    static int findSlot(QObject *obj, const QByteArray &normalizedName, QVector<int> &params);
     static bool prepareHook(QDBusConnectionPrivate::SignalHook &hook, QString &key,
                             const QString &service,
                             const QString &path, const QString &interface, const QString &name,
@@ -321,7 +321,7 @@ public:
                                       int idx, const QList<int> &metaTypes,
                                       const QDBusMessage &msg);
     static QDBusCallDeliveryEvent *prepareReply(QDBusConnectionPrivate *target, QObject *object,
-                                                int idx, const QList<int> &metaTypes,
+                                                int idx, const QVector<int> &metaTypes,
                                                 const QDBusMessage &msg);
     static void processFinishedCall(QDBusPendingCallPrivate *call);
 
@@ -335,7 +335,7 @@ public:
 };
 
 // in qdbusmisc.cpp
-extern int qDBusParametersForMethod(const QMetaMethod &mm, QList<int>& metaTypes);
+extern int qDBusParametersForMethod(const QMetaMethod &mm, QVector<int> &metaTypes);
 extern bool qDBusCheckAsyncTag(const char *tag);
 extern bool qDBusInterfaceInObject(QObject *obj, const QString &interface_name);
 extern QString qDBusInterfaceFromMetaObject(const QMetaObject *mo);
diff --git a/src/dbus/qdbusintegrator.cpp b/src/dbus/qdbusintegrator.cpp
index f0c8224..cb91601 100644
--- a/src/dbus/qdbusintegrator.cpp
+++ b/src/dbus/qdbusintegrator.cpp
@@ -624,7 +624,7 @@ static void huntAndEmit(DBusConnection *connection, DBusMessage *msg,
 }
 
 static int findSlot(const QMetaObject *mo, const QByteArray &name, int flags,
-                    const QString &signature_, QList<int>& metaTypes)
+                    const QString &signature_, QVector<int> &metaTypes)
 {
     QByteArray msgSignature = signature_.toLatin1();
 
@@ -724,7 +724,7 @@ static QDBusCallDeliveryEvent * const DIRECT_DELIVERY = (QDBusCallDeliveryEvent
 
 QDBusCallDeliveryEvent* QDBusConnectionPrivate::prepareReply(QDBusConnectionPrivate *target,
                                                              QObject *object, int idx,
-                                                             const QList<int> &metaTypes,
+                                                             const QVector<int> &metaTypes,
                                                              const QDBusMessage &msg)
 {
     Q_ASSERT(object);
@@ -862,7 +862,7 @@ bool QDBusConnectionPrivate::activateCall(QObject* object, int flags, const QDBu
 }
 
 void QDBusConnectionPrivate::deliverCall(QObject *object, int /*flags*/, const QDBusMessage &msg,
-                                         const QList<int> &metaTypes, int slotIdx)
+                                         const QVector<int> &metaTypes, int slotIdx)
 {
     Q_ASSERT_X(!object || QThread::currentThread() == object->thread(),
                "QDBusConnection: internal threading error",
@@ -1238,7 +1238,7 @@ void QDBusConnectionPrivate::serviceOwnerChangedNoLock(const QString &name,
 }
 
 int QDBusConnectionPrivate::findSlot(QObject* obj, const QByteArray &normalizedName,
-                                     QList<int> &params)
+                                     QVector<int> &params)
 {
     int midx = obj->metaObject()->indexOfMethod(normalizedName);
     if (midx == -1)
diff --git a/src/dbus/qdbusintegrator_p.h b/src/dbus/qdbusintegrator_p.h
index c9a2efc..f910d2d 100644
--- a/src/dbus/qdbusintegrator_p.h
+++ b/src/dbus/qdbusintegrator_p.h
@@ -84,7 +84,7 @@ struct QDBusSlotCache
     {
         int flags;
         int slotIdx;
-        QList<int> metaTypes;
+        QVector<int> metaTypes;
     };
     typedef QMultiHash<QString, Data> Hash;
     Hash hash;
@@ -94,7 +94,7 @@ class QDBusCallDeliveryEvent: public QMetaCallEvent
 {
 public:
     QDBusCallDeliveryEvent(const QDBusConnection &c, int id, QObject *sender,
-                           const QDBusMessage &msg, const QList<int> &types, int f = 0)
+                           const QDBusMessage &msg, const QVector<int> &types, int f = 0)
         : QMetaCallEvent(0, id, 0, sender, -1), connection(c), message(msg), metaTypes(types), flags(f)
         { }
 
@@ -106,7 +106,7 @@ public:
 private:
     QDBusConnection connection; // just for refcounting
     QDBusMessage message;
-    QList<int> metaTypes;
+    QVector<int> metaTypes;
     int flags;
 };
 
diff --git a/src/dbus/qdbusmisc.cpp b/src/dbus/qdbusmisc.cpp
index 7d68bf1..8a0778f 100644
--- a/src/dbus/qdbusmisc.cpp
+++ b/src/dbus/qdbusmisc.cpp
@@ -126,7 +126,7 @@ bool qDBusInterfaceInObject(QObject *obj, const QString &interface_name)
 // metaTypes.count() >= retval + 1 in all cases
 //
 // sig must be the normalised signature for the method
-int qDBusParametersForMethod(const QMetaMethod &mm, QList<int>& metaTypes)
+int qDBusParametersForMethod(const QMetaMethod &mm, QVector<int> &metaTypes)
 {
     QDBusMetaTypeId::init();
 
diff --git a/src/dbus/qdbuspendingcall.cpp b/src/dbus/qdbuspendingcall.cpp
index 65d4b55..8e74ecb 100644
--- a/src/dbus/qdbuspendingcall.cpp
+++ b/src/dbus/qdbuspendingcall.cpp
@@ -180,12 +180,7 @@ bool QDBusPendingCallPrivate::setReplyCallback(QObject *target, const char *memb
     if (metaTypes.at(count) == QDBusMetaTypeId::message)
         --count;
 
-    if (count == 0) {
-        setMetaTypes(count, 0);
-    } else {
-        QVector<int> types = QVector<int>::fromList(metaTypes);
-        setMetaTypes(count, types.constData() + 1);
-    }
+    setMetaTypes(count, count ? metaTypes.constData() + 1 : 0);
     return true;
 }
 
diff --git a/src/dbus/qdbuspendingcall_p.h b/src/dbus/qdbuspendingcall_p.h
index 2aaae7b..ca3b782 100644
--- a/src/dbus/qdbuspendingcall_p.h
+++ b/src/dbus/qdbuspendingcall_p.h
@@ -56,7 +56,7 @@
 
 #include <qshareddata.h>
 #include <qpointer.h>
-#include <qlist.h>
+#include <qvector.h>
 #include <qmutex.h>
 #include <qwaitcondition.h>
 
@@ -82,7 +82,7 @@ public:
 
     // for the callback mechanism (see setReplyCallback and QDBusConnectionPrivate::sendWithReplyAsync)
     QPointer<QObject> receiver;
-    QList<int> metaTypes;
+    QVector<int> metaTypes;
     int methodIdx;
 
     bool autoDelete;
diff --git a/src/dbus/qdbusxmlgenerator.cpp b/src/dbus/qdbusxmlgenerator.cpp
index a6572b2..99edf49 100644
--- a/src/dbus/qdbusxmlgenerator.cpp
+++ b/src/dbus/qdbusxmlgenerator.cpp
@@ -168,7 +168,7 @@ static QString generateInterfaceXml(const QMetaObject *mo, int flags, int method
             continue;           // wasn't a valid type
 
         QList<QByteArray> names = mm.parameterNames();
-        QList<int> types;
+        QVector<int> types;
         int inputCount = qDBusParametersForMethod(mm, types);
         if (inputCount == -1)
             continue;           // invalid form