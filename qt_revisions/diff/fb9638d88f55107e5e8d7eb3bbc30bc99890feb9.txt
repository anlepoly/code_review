diff --git a/examples/sensors/grue/import/import.pro b/examples/sensors/grue/import/import.pro
index 37d2544..e681636 100644
--- a/examples/sensors/grue/import/import.pro
+++ b/examples/sensors/grue/import/import.pro
@@ -4,7 +4,7 @@ CONFIG += plugin
 TARGET = $$qtLibraryTarget(declarative_grue)
 TARGETPATH = Grue
 
-QT = core gui declarative sensors
+QT = core gui qml sensors
 
 INCLUDEPATH += $$PWD/../lib
 LIBS += -L$$OUT_PWD/../lib -lgruesensor
diff --git a/examples/sensors/grue/import/main.cpp b/examples/sensors/grue/import/main.cpp
index 9cc5bb3..9b14fdd 100644
--- a/examples/sensors/grue/import/main.cpp
+++ b/examples/sensors/grue/import/main.cpp
@@ -38,14 +38,14 @@
 **
 ****************************************************************************/
 
-#include <QtDeclarative/qdeclarativeextensionplugin.h>
-#include <QtDeclarative/qdeclarative.h>
+#include <QtQml/qqmlextensionplugin.h>
+#include <QtQml/qqml.h>
 
 #include <gruesensor.h>
 
 QT_BEGIN_NAMESPACE
 
-class GrueSensorQmlImport : public QDeclarativeExtensionPlugin
+class GrueSensorQmlImport : public QQmlExtensionPlugin
 {
     Q_OBJECT
 public:
diff --git a/examples/sensors/sensor_explorer/import/explorer.cpp b/examples/sensors/sensor_explorer/import/explorer.cpp
index fa11850..0c29619 100644
--- a/examples/sensors/sensor_explorer/import/explorer.cpp
+++ b/examples/sensors/sensor_explorer/import/explorer.cpp
@@ -106,9 +106,9 @@ void QSensorExplorer::loadSensors()
     \property QSensorExplorer::availableSensors
     Returns a list of all available sensor.
 */
-QDeclarativeListProperty<QSensorItem> QSensorExplorer::availableSensors()
+QQmlListProperty<QSensorItem> QSensorExplorer::availableSensors()
 {
-    return QDeclarativeListProperty<QSensorItem>(this,_availableSensors);
+    return QQmlListProperty<QSensorItem>(this,_availableSensors);
 }
 
 /*
diff --git a/examples/sensors/sensor_explorer/import/explorer.h b/examples/sensors/sensor_explorer/import/explorer.h
index cf46058..f8806b6 100644
--- a/examples/sensors/sensor_explorer/import/explorer.h
+++ b/examples/sensors/sensor_explorer/import/explorer.h
@@ -42,8 +42,8 @@
 #ifndef QSEONSOREXPLORER_H
 #define QSEONSOREXPLORER_H
 
-#include <QtDeclarative/qdeclarative.h>
-#include <QtDeclarative/QDeclarativeListProperty>
+#include <QtQml/qqml.h>
+#include <QtQml/QQmlListProperty>
 #include "sensoritem.h"
 
 QT_BEGIN_NAMESPACE
@@ -51,14 +51,14 @@ QT_BEGIN_NAMESPACE
 class QSensorExplorer : public QObject
 {
     Q_OBJECT
-    Q_PROPERTY(QDeclarativeListProperty<QSensorItem> availableSensors READ availableSensors NOTIFY availableSensorsChanged)
+    Q_PROPERTY(QQmlListProperty<QSensorItem> availableSensors READ availableSensors NOTIFY availableSensorsChanged)
     Q_PROPERTY(QSensorItem* selectedSensorItem READ selectedSensorItem WRITE setSelectedSensorItem NOTIFY selectedSensorItemChanged)
 public:
     QSensorExplorer(QObject* parent = 0);
     virtual ~QSensorExplorer();
 
 private:
-    QDeclarativeListProperty<QSensorItem> availableSensors();
+    QQmlListProperty<QSensorItem> availableSensors();
     void loadSensors();
     void setSelectedSensorItem(QSensorItem* selitem);
     QSensorItem* selectedSensorItem();
diff --git a/examples/sensors/sensor_explorer/import/import.pro b/examples/sensors/sensor_explorer/import/import.pro
index f852e58..e84ede0 100644
--- a/examples/sensors/sensor_explorer/import/import.pro
+++ b/examples/sensors/sensor_explorer/import/import.pro
@@ -4,7 +4,7 @@ CONFIG += plugin
 TARGET = $$qtLibraryTarget(declarative_explorer)
 TARGETPATH = Explorer
 
-QT += declarative sensors
+QT += qml sensors
 
 SOURCES = main.cpp explorer.cpp sensoritem.cpp propertyinfo.cpp
 HEADERS = explorer.h sensoritem.h propertyinfo.h
diff --git a/examples/sensors/sensor_explorer/import/main.cpp b/examples/sensors/sensor_explorer/import/main.cpp
index 57e33fd..4291486 100644
--- a/examples/sensors/sensor_explorer/import/main.cpp
+++ b/examples/sensors/sensor_explorer/import/main.cpp
@@ -38,14 +38,14 @@
 **
 ****************************************************************************/
 
-#include <QtDeclarative/qdeclarativeextensionplugin.h>
-#include <QtDeclarative/qdeclarative.h>
+#include <QtQml/qqmlextensionplugin.h>
+#include <QtQml/qqml.h>
 #include "explorer.h"
 #include <QtCore/QDebug>
 
 QT_BEGIN_NAMESPACE
 
-class SensorExplorerDeclarativeModule : public QDeclarativeExtensionPlugin
+class SensorExplorerDeclarativeModule : public QQmlExtensionPlugin
 {
     Q_OBJECT
 public:
diff --git a/examples/sensors/sensor_explorer/import/propertyinfo.h b/examples/sensors/sensor_explorer/import/propertyinfo.h
index 907e0ad..dd8eecf 100644
--- a/examples/sensors/sensor_explorer/import/propertyinfo.h
+++ b/examples/sensors/sensor_explorer/import/propertyinfo.h
@@ -42,7 +42,7 @@
 #ifndef QPROPERTYINFO_H
 #define QPROPERTYINFO_H
 
-#include <QtDeclarative/qdeclarative.h>
+#include <QtQml/qqml.h>
 #include <QtCore/QString>
 
 QT_BEGIN_NAMESPACE
diff --git a/examples/sensors/sensor_explorer/import/sensoritem.cpp b/examples/sensors/sensor_explorer/import/sensoritem.cpp
index a7e9f33..68dccf4 100644
--- a/examples/sensors/sensor_explorer/import/sensoritem.cpp
+++ b/examples/sensors/sensor_explorer/import/sensoritem.cpp
@@ -311,12 +311,12 @@ QString QSensorItem::convertValue(const QString& type, const QVariant& val)
     \property QSensorItem::properties
     Returns a list of all properties from the sensor
 */
-QDeclarativeListProperty<QPropertyInfo> QSensorItem::properties()
+QQmlListProperty<QPropertyInfo> QSensorItem::properties()
 {
     _properties.clear();
     _properties.append(_sensorProperties);
     _properties.append(_readerProperties);
-    return QDeclarativeListProperty<QPropertyInfo> (this, _properties);
+    return QQmlListProperty<QPropertyInfo> (this, _properties);
 }
 
 QT_END_NAMESPACE
diff --git a/examples/sensors/sensor_explorer/import/sensoritem.h b/examples/sensors/sensor_explorer/import/sensoritem.h
index e2c5cdf..0931367 100644
--- a/examples/sensors/sensor_explorer/import/sensoritem.h
+++ b/examples/sensors/sensor_explorer/import/sensoritem.h
@@ -42,7 +42,7 @@
 #ifndef QSENSORITEM_H
 #define QSENSORITEM_H
 
-#include <QtDeclarative/qdeclarative.h>
+#include <QtQml/qqml.h>
 #include <QtCore/QString>
 #include "propertyinfo.h"
 
@@ -54,7 +54,7 @@ class QSensorItem : public QObject
     Q_OBJECT
     Q_PROPERTY(bool start READ start WRITE setStart NOTIFY startChanged)
     Q_PROPERTY(QString id READ id CONSTANT)
-    Q_PROPERTY(QDeclarativeListProperty<QPropertyInfo> properties READ properties NOTIFY propertiesChanged)
+    Q_PROPERTY(QQmlListProperty<QPropertyInfo> properties READ properties NOTIFY propertiesChanged)
 public:
     QSensorItem(QObject* parent = 0);
     QSensorItem(QSensor* sensor, QObject* parent = 0);
@@ -72,7 +72,7 @@ private:
     QString id();
     bool start();
     void setStart(bool run);
-    QDeclarativeListProperty<QPropertyInfo> properties();
+    QQmlListProperty<QPropertyInfo> properties();
     QString convertValue(const QString& type, const QVariant& val);
     bool isWriteable(const QString& propertyname);
     bool ignoreProperty(const QString& propertyname);
diff --git a/src/imports/sensors/sensors.cpp b/src/imports/sensors/sensors.cpp
index 1b517d5..36b7d94 100644
--- a/src/imports/sensors/sensors.cpp
+++ b/src/imports/sensors/sensors.cpp
@@ -39,8 +39,8 @@
 **
 ****************************************************************************/
 
-#include <QtDeclarative/qdeclarativeextensionplugin.h>
-#include <QtDeclarative/qdeclarative.h>
+#include <QtQml/qqmlextensionplugin.h>
+#include <QtQml/qqml.h>
 
 #include <qaccelerometer.h>
 #include <qambientlightsensor.h>
@@ -56,7 +56,7 @@
 
 QT_BEGIN_NAMESPACE
 
-// QtDeclarative doesn't have this for some reason. It has qmlRegisterRevision<T,int>
+// QtQml doesn't have this for some reason. It has qmlRegisterRevision<T,int>
 // and qmlRegisterUncreatableType<T> but they both only do half the job. This one
 // registers an uncreatable type and sets the revision so that derived classes will
 // pick up new properties.
@@ -66,24 +66,24 @@ int qmlRegisterUncreatableType(const char *uri, int versionMajor, int versionMin
     QByteArray name(T::staticMetaObject.className());
 
     QByteArray pointerName(name + '*');
-    QByteArray listName("QDeclarativeListProperty<" + name + ">");
+    QByteArray listName("QQmlListProperty<" + name + ">");
 
-    QDeclarativePrivate::RegisterType type = {
+    QQmlPrivate::RegisterType type = {
         1,
 
         qRegisterMetaType<T *>(pointerName.constData()),
-        qRegisterMetaType<QDeclarativeListProperty<T> >(listName.constData()),
+        qRegisterMetaType<QQmlListProperty<T> >(listName.constData()),
         0, 0,
         reason,
 
         uri, versionMajor, versionMinor, qmlName, &T::staticMetaObject,
 
-        QDeclarativePrivate::attachedPropertiesFunc<T>(),
-        QDeclarativePrivate::attachedPropertiesMetaObject<T>(),
+        QQmlPrivate::attachedPropertiesFunc<T>(),
+        QQmlPrivate::attachedPropertiesMetaObject<T>(),
 
-        QDeclarativePrivate::StaticCastSelector<T,QDeclarativeParserStatus>::cast(),
-        QDeclarativePrivate::StaticCastSelector<T,QDeclarativePropertyValueSource>::cast(),
-        QDeclarativePrivate::StaticCastSelector<T,QDeclarativePropertyValueInterceptor>::cast(),
+        QQmlPrivate::StaticCastSelector<T,QQmlParserStatus>::cast(),
+        QQmlPrivate::StaticCastSelector<T,QQmlPropertyValueSource>::cast(),
+        QQmlPrivate::StaticCastSelector<T,QQmlPropertyValueInterceptor>::cast(),
 
         0, 0,
 
@@ -91,10 +91,10 @@ int qmlRegisterUncreatableType(const char *uri, int versionMajor, int versionMin
         metaObjectRevision
     };
 
-    return QDeclarativePrivate::qmlregister(QDeclarativePrivate::TypeRegistration, &type);
+    return QQmlPrivate::qmlregister(QQmlPrivate::TypeRegistration, &type);
 }
 
-class QSensorsDeclarativeModule : public QDeclarativeExtensionPlugin
+class QSensorsDeclarativeModule : public QQmlExtensionPlugin
 {
     Q_OBJECT
 public:
diff --git a/src/imports/sensors/sensors.pro b/src/imports/sensors/sensors.pro
index de212fe..35aa3c5 100644
--- a/src/imports/sensors/sensors.pro
+++ b/src/imports/sensors/sensors.pro
@@ -3,7 +3,7 @@ TARGETPATH = QtMobility/sensors
 
 include(qsensorsimport.pri)
 
-QT += declarative sensors
+QT += qml sensors
 
 SOURCES += sensors.cpp
 
diff --git a/src/imports/sensors2/qsensor2ambientlight.h b/src/imports/sensors2/qsensor2ambientlight.h
index 11a9b48..573475e 100644
--- a/src/imports/sensors2/qsensor2ambientlight.h
+++ b/src/imports/sensors2/qsensor2ambientlight.h
@@ -42,8 +42,8 @@
 #ifndef QSENSOR2AMBIENTLIGHT_H
 #define QSENSOR2AMBIENTLIGHT_H
 
-#include <QtDeclarative/qdeclarativeextensionplugin.h>
-#include <QtDeclarative/qdeclarative.h>
+#include <QtQml/qqmlextensionplugin.h>
+#include <QtQml/qqml.h>
 #include <qambientlightsensor.h>
 #include "qsensor2common.h"
 
diff --git a/src/imports/sensors2/qsensor2gesture.cpp b/src/imports/sensors2/qsensor2gesture.cpp
index a1cc39c..ef17c3f 100644
--- a/src/imports/sensors2/qsensor2gesture.cpp
+++ b/src/imports/sensors2/qsensor2gesture.cpp
@@ -97,7 +97,7 @@ QSensor2Gesture::~QSensor2Gesture()
 }
 
 /*
-  QDeclarativeParserStatus interface implementation
+  QQmlParserStatus interface implementation
 */
 void QSensor2Gesture::classBegin()
 {
@@ -112,7 +112,7 @@ void QSensor2Gesture::componentComplete()
     setEnabled(_enabled);
 }
 /*
-  End of QDeclarativeParserStatus interface implementation
+  End of QQmlParserStatus interface implementation
 */
 
 /*!
diff --git a/src/imports/sensors2/qsensor2gesture.h b/src/imports/sensors2/qsensor2gesture.h
index 38e3c5d..324e658 100644
--- a/src/imports/sensors2/qsensor2gesture.h
+++ b/src/imports/sensors2/qsensor2gesture.h
@@ -42,8 +42,8 @@
 #ifndef QSENSOR2GESTURE_H
 #define QSENSOR2GESTURE_H
 
-#include <QtDeclarative/QDeclarativeParserStatus>
-#include <QtDeclarative/qdeclarative.h>
+#include <QtQml/QQmlParserStatus>
+#include <QtQml/qqml.h>
 #include <QtCore/QStringList>
 #include <QtCore/QMap>
 
@@ -51,7 +51,7 @@ QT_BEGIN_NAMESPACE
 
 class QSensorGesture;
 class QSensorGestureManager;
-class QSensor2Gesture : public QObject, public QDeclarativeParserStatus
+class QSensor2Gesture : public QObject, public QQmlParserStatus
 {
     Q_OBJECT
     Q_PROPERTY(QStringList availableGestures READ availableGestures NOTIFY availableGesturesChanged)
@@ -59,7 +59,7 @@ class QSensor2Gesture : public QObject, public QDeclarativeParserStatus
     Q_PROPERTY(QStringList validGestures READ validGestures NOTIFY validGesturesChanged)
     Q_PROPERTY(QStringList invalidGestures READ invalidGestures NOTIFY invalidGesturesChanged)
     Q_PROPERTY(bool enabled READ enabled WRITE setEnabled NOTIFY enabledChanged)
-    Q_INTERFACES(QDeclarativeParserStatus)
+    Q_INTERFACES(QQmlParserStatus)
 
 public:
     QSensor2Gesture(QObject* parent = 0);
diff --git a/src/imports/sensors2/qsensor2proximity.h b/src/imports/sensors2/qsensor2proximity.h
index 824c16b..11daf1f 100644
--- a/src/imports/sensors2/qsensor2proximity.h
+++ b/src/imports/sensors2/qsensor2proximity.h
@@ -42,8 +42,8 @@
 #ifndef QSENSOR2PROXIMITY_H
 #define QSENSOR2PROXIMITY_H
 
-#include <QtDeclarative/qdeclarativeextensionplugin.h>
-#include <QtDeclarative/qdeclarative.h>
+#include <QtQml/qqmlextensionplugin.h>
+#include <QtQml/qqml.h>
 #include <qproximitysensor.h>
 #include "qsensor2common.h"
 
diff --git a/src/imports/sensors2/qsensor2tilt.h b/src/imports/sensors2/qsensor2tilt.h
index ae52901..5b0ea29 100644
--- a/src/imports/sensors2/qsensor2tilt.h
+++ b/src/imports/sensors2/qsensor2tilt.h
@@ -42,8 +42,8 @@
 #ifndef QSEONSOR2TILT_H
 #define QSEONSOR2TILT_H
 
-#include <QtDeclarative/qdeclarativeextensionplugin.h>
-#include <QtDeclarative/qdeclarative.h>
+#include <QtQml/qqmlextensionplugin.h>
+#include <QtQml/qqml.h>
 #include <qaccelerometer.h>
 #include "qsensor2common.h"
 
diff --git a/src/imports/sensors2/sensors2.cpp b/src/imports/sensors2/sensors2.cpp
index 3be8c20..5570aaa 100644
--- a/src/imports/sensors2/sensors2.cpp
+++ b/src/imports/sensors2/sensors2.cpp
@@ -39,8 +39,8 @@
 **
 ****************************************************************************/
 
-#include <QtDeclarative/qdeclarativeextensionplugin.h>
-#include <QtDeclarative/qdeclarative.h>
+#include <QtQml/qqmlextensionplugin.h>
+#include <QtQml/qqml.h>
 #include "qsensor2ambientlight.h"
 #include "qsensor2proximity.h"
 #include "qsensor2tilt.h"
@@ -49,7 +49,7 @@
 
 QT_BEGIN_NAMESPACE
 
-class QSensors2DeclarativeModule : public QDeclarativeExtensionPlugin
+class QSensors2DeclarativeModule : public QQmlExtensionPlugin
 {
     Q_OBJECT
 public:
diff --git a/src/imports/sensors2/sensors2.pro b/src/imports/sensors2/sensors2.pro
index 884c336..49f704c 100644
--- a/src/imports/sensors2/sensors2.pro
+++ b/src/imports/sensors2/sensors2.pro
@@ -3,7 +3,7 @@ TARGETPATH = QtSensors
 
 include(qsensors2import.pri)
 
-QT += declarative sensors
+QT += qml sensors
 
 SOURCES += sensors2.cpp \
            qsensor2ambientlight.cpp \
diff --git a/tests/auto/legacy_sensors/legacy_sensors.pro b/tests/auto/legacy_sensors/legacy_sensors.pro
index a9b1531..ef2e869 100644
--- a/tests/auto/legacy_sensors/legacy_sensors.pro
+++ b/tests/auto/legacy_sensors/legacy_sensors.pro
@@ -1,6 +1,6 @@
 TEMPLATE=app
 TARGET=tst_legacy_sensors
 !no_system_tests:CONFIG += testcase
-QT = core testlib gui declarative sensors
+QT = core testlib gui qml sensors
 SOURCES += tst_legacy_sensors.cpp
 
diff --git a/tests/auto/legacy_sensors/tst_legacy_sensors.cpp b/tests/auto/legacy_sensors/tst_legacy_sensors.cpp
index 05f2d05..2e0f194 100644
--- a/tests/auto/legacy_sensors/tst_legacy_sensors.cpp
+++ b/tests/auto/legacy_sensors/tst_legacy_sensors.cpp
@@ -40,8 +40,8 @@
 ****************************************************************************/
 
 #include <QtTest/QtTest>
-#include <QDeclarativeEngine>
-#include <QDeclarativeComponent>
+#include <QQmlEngine>
+#include <QQmlComponent>
 #include <QSensor>
 
 class tst_legacy_sensors : public QObject
@@ -78,16 +78,16 @@ private slots:
         QFETCH(QString, version);
         QFETCH(bool, exists);
 
-        QDeclarativeEngine engine;
+        QQmlEngine engine;
         QString qml = QString("import QtQuick 2.0\nimport QtMobility.sensors %1\nItem {}").arg(version);
-        QDeclarativeComponent c(&engine);
+        QQmlComponent c(&engine);
         c.setData(qml.toLocal8Bit(), QUrl::fromLocalFile(QDir::currentPath()));
         if (!exists)
-            QTest::ignoreMessage(QtWarningMsg, "QDeclarativeComponent: Component is not ready");
+            QTest::ignoreMessage(QtWarningMsg, "QQmlComponent: Component is not ready");
         QObject *obj = c.create();
         QCOMPARE(exists, (obj != 0));
         delete obj;
-        QList<QDeclarativeError> errors = c.errors();
+        QList<QQmlError> errors = c.errors();
         if (exists) {
             QCOMPARE(errors.count(), 0);
         } else {
@@ -175,16 +175,16 @@ private slots:
         QFETCH(QString, element);
         QFETCH(bool, exists);
 
-        QDeclarativeEngine engine;
+        QQmlEngine engine;
         QString qml = QString("import QtQuick 2.0\nimport QtMobility.sensors %1\n%2 {}").arg(version).arg(element);
-        QDeclarativeComponent c(&engine);
+        QQmlComponent c(&engine);
         c.setData(qml.toLocal8Bit(), QUrl::fromLocalFile(QDir::currentPath()));
         if (!exists)
-            QTest::ignoreMessage(QtWarningMsg, "QDeclarativeComponent: Component is not ready");
+            QTest::ignoreMessage(QtWarningMsg, "QQmlComponent: Component is not ready");
         QObject *obj = c.create();
         QCOMPARE(exists, (obj != 0));
         delete obj;
-        QList<QDeclarativeError> errors = c.errors();
+        QList<QQmlError> errors = c.errors();
         if (exists) {
             QCOMPARE(errors.count(), 0);
         } else {
@@ -240,11 +240,11 @@ private slots:
         QFETCH(QString, element);
         QFETCH(bool, validSyntax);
 
-        QDeclarativeEngine engine;
+        QQmlEngine engine;
         QString qml = QString("import QtQuick 2.0\nimport QtMobility.sensors %1\n%2 {\nalwaysOn: true\n}").arg(version).arg(element);
-        QDeclarativeComponent c(&engine);
+        QQmlComponent c(&engine);
         if (!validSyntax)
-            QTest::ignoreMessage(QtWarningMsg, "QDeclarativeComponent: Component is not ready");
+            QTest::ignoreMessage(QtWarningMsg, "QQmlComponent: Component is not ready");
         c.setData(qml.toLocal8Bit(), QUrl::fromLocalFile(QDir::currentPath()));
         QObject *obj = c.create();
         if (validSyntax) {
diff --git a/tests/auto/qtsensors5/qtsensors5.pro b/tests/auto/qtsensors5/qtsensors5.pro
index 38b89ff..45c2b68 100644
--- a/tests/auto/qtsensors5/qtsensors5.pro
+++ b/tests/auto/qtsensors5/qtsensors5.pro
@@ -1,6 +1,6 @@
 TEMPLATE=app
 TARGET=tst_qtsensors5
 !no_system_tests:CONFIG += testcase
-QT = core testlib gui declarative
+QT = core testlib gui qml
 SOURCES += tst_qtsensors5.cpp
 
diff --git a/tests/auto/qtsensors5/tst_qtsensors5.cpp b/tests/auto/qtsensors5/tst_qtsensors5.cpp
index 383a476..31f0f85 100644
--- a/tests/auto/qtsensors5/tst_qtsensors5.cpp
+++ b/tests/auto/qtsensors5/tst_qtsensors5.cpp
@@ -40,8 +40,8 @@
 ****************************************************************************/
 
 #include <QtTest/QtTest>
-#include <QDeclarativeEngine>
-#include <QDeclarativeComponent>
+#include <QQmlEngine>
+#include <QQmlComponent>
 
 class tst_qtsensors5 : public QObject
 {
@@ -74,16 +74,16 @@ private slots:
         QFETCH(QString, version);
         QFETCH(bool, exists);
 
-        QDeclarativeEngine engine;
+        QQmlEngine engine;
         QString qml = QString("import QtQuick 2.0\nimport QtSensors %1\nItem {}").arg(version);
-        QDeclarativeComponent c(&engine);
+        QQmlComponent c(&engine);
         c.setData(qml.toLocal8Bit(), QUrl::fromLocalFile(QDir::currentPath()));
         if (!exists)
-            QTest::ignoreMessage(QtWarningMsg, "QDeclarativeComponent: Component is not ready");
+            QTest::ignoreMessage(QtWarningMsg, "QQmlComponent: Component is not ready");
         QObject *obj = c.create();
         QCOMPARE(exists, (obj != 0));
         delete obj;
-        QList<QDeclarativeError> errors = c.errors();
+        QList<QQmlError> errors = c.errors();
         if (exists) {
             QCOMPARE(errors.count(), 0);
         } else {
@@ -112,16 +112,16 @@ private slots:
         QFETCH(QString, element);
         QFETCH(bool, exists);
 
-        QDeclarativeEngine engine;
+        QQmlEngine engine;
         QString qml = QString("import QtQuick 2.0\nimport QtSensors %1\n%2 {}").arg(version).arg(element);
-        QDeclarativeComponent c(&engine);
+        QQmlComponent c(&engine);
         c.setData(qml.toLocal8Bit(), QUrl::fromLocalFile(QDir::currentPath()));
         if (!exists)
-            QTest::ignoreMessage(QtWarningMsg, "QDeclarativeComponent: Component is not ready");
+            QTest::ignoreMessage(QtWarningMsg, "QQmlComponent: Component is not ready");
         QObject *obj = c.create();
         QCOMPARE(exists, (obj != 0));
         delete obj;
-        QList<QDeclarativeError> errors = c.errors();
+        QList<QQmlError> errors = c.errors();
         QCOMPARE(errors.count(), 0);
     }
 
@@ -138,15 +138,15 @@ private slots:
         QFETCH(QString, version);
         QFETCH(QString, element);
 
-        QDeclarativeEngine engine;
+        QQmlEngine engine;
         QString qml = QString("import QtQuick 2.0\nimport QtSensors %1\n%2 {}").arg(version).arg(element);
-        QDeclarativeComponent c(&engine);
+        QQmlComponent c(&engine);
         c.setData(qml.toLocal8Bit(), QUrl::fromLocalFile(QDir::currentPath()));
-        //QTest::ignoreMessage(QtWarningMsg, "QDeclarativeComponent: Component is not ready");
+        //QTest::ignoreMessage(QtWarningMsg, "QQmlComponent: Component is not ready");
         QObject *obj = c.create();
         QCOMPARE(obj, static_cast<QObject*>(0));
         delete obj;
-        QList<QDeclarativeError> errors = c.errors();
+        QList<QQmlError> errors = c.errors();
         QCOMPARE(errors.count(), 1);
         QString expected = QString("Cannot create %1").arg(element);
         QString actual = errors.first().description();
diff --git a/tests/auto/sensors2qmlapi/sensors2qmlapi.pro b/tests/auto/sensors2qmlapi/sensors2qmlapi.pro
index 836cce0..2804360 100644
--- a/tests/auto/sensors2qmlapi/sensors2qmlapi.pro
+++ b/tests/auto/sensors2qmlapi/sensors2qmlapi.pro
@@ -2,7 +2,7 @@ TEMPLATE = app
 TARGET = tst_sensors2qmlapi
 
 CONFIG += testcase
-QT = core testlib sensors-private declarative
+QT = core testlib sensors-private qml
 INCLUDEPATH += ./
 DEPENDPATH += ./