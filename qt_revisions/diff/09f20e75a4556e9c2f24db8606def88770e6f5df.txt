diff --git a/src/corelib/io/qdebug.cpp b/src/corelib/io/qdebug.cpp
index a9d0fd4..8c17a61 100644
--- a/src/corelib/io/qdebug.cpp
+++ b/src/corelib/io/qdebug.cpp
@@ -269,7 +269,7 @@
 */
 
 /*!
-    \fn QDebug &QDebug::operator<<(const QLatin1String &s)
+    \fn QDebug &QDebug::operator<<(QLatin1String s)
 
     Writes the Latin1-encoded string, \a s, to the stream and returns a reference
     to the stream.
diff --git a/src/corelib/io/qdebug.h b/src/corelib/io/qdebug.h
index e3ecc36..6b0eaef 100644
--- a/src/corelib/io/qdebug.h
+++ b/src/corelib/io/qdebug.h
@@ -113,7 +113,7 @@ public:
     inline QDebug &operator<<(const char* t) { stream->ts << QString::fromUtf8(t); return maybeSpace(); }
     inline QDebug &operator<<(const QString & t) { stream->ts << '\"' << t  << '\"'; return maybeSpace(); }
     inline QDebug &operator<<(const QStringRef & t) { return operator<<(t.toString()); }
-    inline QDebug &operator<<(const QLatin1String &t) { stream->ts << '\"'  << t << '\"'; return maybeSpace(); }
+    inline QDebug &operator<<(QLatin1String t) { stream->ts << '\"'  << t << '\"'; return maybeSpace(); }
     inline QDebug &operator<<(const QByteArray & t) { stream->ts  << '\"' << t << '\"'; return maybeSpace(); }
     inline QDebug &operator<<(const void * t) { stream->ts << t; return maybeSpace(); }
     inline QDebug &operator<<(QTextStreamFunction f) {
diff --git a/src/corelib/io/qtextstream.cpp b/src/corelib/io/qtextstream.cpp
index 829eae0..89b2226 100644
--- a/src/corelib/io/qtextstream.cpp
+++ b/src/corelib/io/qtextstream.cpp
@@ -2532,7 +2532,7 @@ QTextStream &QTextStream::operator<<(const QString &string)
     QTextStream. The contents of \a string are converted with the
     QString constructor that takes a QLatin1String as argument.
 */
-QTextStream &QTextStream::operator<<(const QLatin1String &string)
+QTextStream &QTextStream::operator<<(QLatin1String string)
 {
     Q_D(QTextStream);
     CHECK_VALID_STREAM(*this);
diff --git a/src/corelib/io/qtextstream.h b/src/corelib/io/qtextstream.h
index 011d43e..42b2904 100644
--- a/src/corelib/io/qtextstream.h
+++ b/src/corelib/io/qtextstream.h
@@ -187,7 +187,7 @@ public:
     QTextStream &operator<<(float f);
     QTextStream &operator<<(double f);
     QTextStream &operator<<(const QString &s);
-    QTextStream &operator<<(const QLatin1String &s);
+    QTextStream &operator<<(QLatin1String s);
     QTextStream &operator<<(const QByteArray &array);
     QTextStream &operator<<(const char *c);
     QTextStream &operator<<(const void *ptr);
diff --git a/src/corelib/json/qjsonvalue.cpp b/src/corelib/json/qjsonvalue.cpp
index 7459524..4098651 100644
--- a/src/corelib/json/qjsonvalue.cpp
+++ b/src/corelib/json/qjsonvalue.cpp
@@ -168,7 +168,7 @@ QJsonValue::QJsonValue(const QString &s)
 /*!
     Creates a value of type String, with value \a s.
  */
-QJsonValue::QJsonValue(const QLatin1String &s)
+QJsonValue::QJsonValue(QLatin1String s)
     : d(0), t(String)
 {
     // ### FIXME: Avoid creating the temp QString below
diff --git a/src/corelib/json/qjsonvalue.h b/src/corelib/json/qjsonvalue.h
index 9d4ad1d..9683896 100644
--- a/src/corelib/json/qjsonvalue.h
+++ b/src/corelib/json/qjsonvalue.h
@@ -82,7 +82,7 @@ public:
     QJsonValue(double n);
     QJsonValue(int n);
     QJsonValue(const QString &s);
-    QJsonValue(const QLatin1String &s);
+    QJsonValue(QLatin1String s);
     QJsonValue(const QJsonArray &a);
     QJsonValue(const QJsonObject &o);
 
diff --git a/src/corelib/kernel/qvariant.cpp b/src/corelib/kernel/qvariant.cpp
index 3d3183a..cd946d8 100644
--- a/src/corelib/kernel/qvariant.cpp
+++ b/src/corelib/kernel/qvariant.cpp
@@ -1155,7 +1155,7 @@ QVariant::QVariant(QDataStream &s)
 */
 
 /*!
-  \fn QVariant::QVariant(const QLatin1String &val)
+  \fn QVariant::QVariant(QLatin1String val)
 
     Constructs a new variant with a string value, \a val.
 */
@@ -1408,7 +1408,7 @@ QVariant::QVariant(const QString &val)
 { d.is_null = false; d.type = String; v_construct<QString>(&d, val);  }
 QVariant::QVariant(QChar val)
 { d.is_null = false; d.type = Char; v_construct<QChar>(&d, val);  }
-QVariant::QVariant(const QLatin1String &val)
+QVariant::QVariant(QLatin1String val)
 { QString str(val); d.is_null = false; d.type = String; v_construct<QString>(&d, str); }
 QVariant::QVariant(const QStringList &val)
 { d.is_null = false; d.type = StringList; v_construct<QStringList>(&d, val); }
diff --git a/src/corelib/kernel/qvariant.h b/src/corelib/kernel/qvariant.h
index 15fbfc9..a415b0e 100644
--- a/src/corelib/kernel/qvariant.h
+++ b/src/corelib/kernel/qvariant.h
@@ -218,7 +218,7 @@ class Q_CORE_EXPORT QVariant
     QVariant(const QByteArray &bytearray);
     QVariant(const QBitArray &bitarray);
     QVariant(const QString &string);
-    QVariant(const QLatin1String &string);
+    QVariant(QLatin1String string);
     QVariant(const QStringList &stringlist);
     QVariant(QChar qchar);
     QVariant(const QDate &date);
diff --git a/src/corelib/tools/qhash.cpp b/src/corelib/tools/qhash.cpp
index cc8f5be..fb56633 100644
--- a/src/corelib/tools/qhash.cpp
+++ b/src/corelib/tools/qhash.cpp
@@ -140,7 +140,7 @@ uint qHash(const QBitArray &bitArray, uint seed)
     return result;
 }
 
-uint qHash(const QLatin1String &key, uint seed)
+uint qHash(QLatin1String key, uint seed)
 {
     return hash(reinterpret_cast<const uchar *>(key.data()), key.size(), seed);
 }
@@ -655,7 +655,7 @@ void QHashData::checkSanity()
     \fn uint qHash(const QBitArray &key, uint seed = 0)
     \fn uint qHash(const QString &key, uint seed = 0)
     \fn uint qHash(const QStringRef &key, uint seed = 0)
-    \fn uint qHash(const QLatin1String &key, uint seed = 0)
+    \fn uint qHash(QLatin1String key, uint seed = 0)
 
     \relates QHash
     \since 5.0
diff --git a/src/corelib/tools/qhash.h b/src/corelib/tools/qhash.h
index 3936e36..93af8f6 100644
--- a/src/corelib/tools/qhash.h
+++ b/src/corelib/tools/qhash.h
@@ -88,7 +88,7 @@ Q_CORE_EXPORT uint qHash(const QByteArray &key, uint seed = 0);
 Q_CORE_EXPORT uint qHash(const QString &key, uint seed = 0);
 Q_CORE_EXPORT uint qHash(const QStringRef &key, uint seed = 0);
 Q_CORE_EXPORT uint qHash(const QBitArray &key, uint seed = 0);
-Q_CORE_EXPORT uint qHash(const QLatin1String &key, uint seed = 0);
+Q_CORE_EXPORT uint qHash(QLatin1String key, uint seed = 0);
 Q_CORE_EXPORT uint qt_hash(const QString &key);
 
 #if defined(Q_CC_MSVC)
diff --git a/src/corelib/tools/qstring.cpp b/src/corelib/tools/qstring.cpp
index 39e1046..a0a3a28 100644
--- a/src/corelib/tools/qstring.cpp
+++ b/src/corelib/tools/qstring.cpp
@@ -117,7 +117,7 @@ static inline int qt_string_count(const QChar *haystack, int haystackLen,
                                   Qt::CaseSensitivity cs);
 static inline int qt_string_count(const QChar *haystack, int haystackLen,
                                   QChar needle, Qt::CaseSensitivity cs);
-static inline int qt_find_latin1_string(const QChar *hay, int size, const QLatin1String &needle,
+static inline int qt_find_latin1_string(const QChar *hay, int size, QLatin1String needle,
                                         int from, Qt::CaseSensitivity cs);
 static inline bool qt_starts_with(const QChar *haystack, int haystackLen,
                                   const QChar *needle, int needleLen, Qt::CaseSensitivity cs);
@@ -1091,7 +1091,7 @@ QString::QString(int size, Qt::Initialization)
     d->data()[size] = '\0';
 }
 
-/*! \fn QString::QString(const QLatin1String &str)
+/*! \fn QString::QString(QLatin1String str)
 
     Constructs a copy of the Latin-1 string \a str.
 
@@ -1328,7 +1328,7 @@ QString &QString::operator=(const QString &other)
 }
 
 
-/*! \fn QString &QString::operator=(const QLatin1String &str)
+/*! \fn QString &QString::operator=(QLatin1String str)
 
     \overload operator=()
 
@@ -1404,12 +1404,12 @@ QString &QString::operator=(QChar ch)
 
 
 /*!
-    \fn QString &QString::insert(int position, const QLatin1String &str)
+    \fn QString &QString::insert(int position, QLatin1String str)
     \overload insert()
 
     Inserts the Latin-1 string \a str at the given index \a position.
 */
-QString &QString::insert(int i, const QLatin1String &str)
+QString &QString::insert(int i, QLatin1String str)
 {
     const uchar *s = (const uchar *)str.latin1();
     if (i < 0 || !s || !(*s))
@@ -1512,7 +1512,7 @@ QString &QString::append(const QString &str)
 
   Appends the Latin-1 string \a str to this string.
 */
-QString &QString::append(const QLatin1String &str)
+QString &QString::append(QLatin1String str)
 {
     const uchar *s = (const uchar *)str.latin1();
     if (s) {
@@ -1579,7 +1579,7 @@ QString &QString::append(QChar ch)
     \sa append(), insert()
 */
 
-/*! \fn QString &QString::prepend(const QLatin1String &str)
+/*! \fn QString &QString::prepend(QLatin1String str)
 
     \overload prepend()
 
@@ -2021,9 +2021,7 @@ QString& QString::replace(QChar before, QChar after, Qt::CaseSensitivity cs)
 
   \note The text is not rescanned after a replacement.
 */
-QString &QString::replace(const QLatin1String &before,
-                          const QLatin1String &after,
-                          Qt::CaseSensitivity cs)
+QString &QString::replace(QLatin1String before, QLatin1String after, Qt::CaseSensitivity cs)
 {
     int alen = after.size();
     QVarLengthArray<ushort> a(alen);
@@ -2048,9 +2046,7 @@ QString &QString::replace(const QLatin1String &before,
 
   \note The text is not rescanned after a replacement.
 */
-QString &QString::replace(const QLatin1String &before,
-                          const QString &after,
-                          Qt::CaseSensitivity cs)
+QString &QString::replace(QLatin1String before, const QString &after, Qt::CaseSensitivity cs)
 {
     int blen = before.size();
     QVarLengthArray<ushort> b(blen);
@@ -2071,9 +2067,7 @@ QString &QString::replace(const QLatin1String &before,
 
   \note The text is not rescanned after a replacement.
 */
-QString &QString::replace(const QString &before,
-                          const QLatin1String &after,
-                          Qt::CaseSensitivity cs)
+QString &QString::replace(const QString &before, QLatin1String after, Qt::CaseSensitivity cs)
 {
     int alen = after.size();
     QVarLengthArray<ushort> a(alen);
@@ -2094,7 +2088,7 @@ QString &QString::replace(const QString &before,
 
   \note The text is not rescanned after a replacement.
 */
-QString &QString::replace(QChar c, const QLatin1String &after, Qt::CaseSensitivity cs)
+QString &QString::replace(QChar c, QLatin1String after, Qt::CaseSensitivity cs)
 {
     int alen = after.size();
     QVarLengthArray<ushort> a(alen);
@@ -2125,7 +2119,7 @@ bool operator==(const QString &s1, const QString &s2)
 /*!
     \overload operator==()
 */
-bool QString::operator==(const QLatin1String &other) const
+bool QString::operator==(QLatin1String other) const
 {
     if (d->size != other.size())
         return false;
@@ -2191,7 +2185,7 @@ bool operator<(const QString &s1, const QString &s2)
 /*!
     \overload operator<()
 */
-bool QString::operator<(const QLatin1String &other) const
+bool QString::operator<(QLatin1String other) const
 {
     const uchar *c = (uchar *) other.latin1();
     if (!c || *c == 0)
@@ -2247,7 +2241,7 @@ bool QString::operator<(const QLatin1String &other) const
     localeAwareCompare().
 */
 
-/*! \fn bool QString::operator<=(const QLatin1String &other) const
+/*! \fn bool QString::operator<=(QLatin1String other) const
 
     \overload operator<=()
 */
@@ -2293,7 +2287,7 @@ bool QString::operator<(const QLatin1String &other) const
 /*!
     \overload operator>()
 */
-bool QString::operator>(const QLatin1String &other) const
+bool QString::operator>(QLatin1String other) const
 {
     const uchar *c = (uchar *) other.latin1();
     if (!c || *c == '\0')
@@ -2350,7 +2344,7 @@ bool QString::operator>(const QLatin1String &other) const
     localeAwareCompare().
 */
 
-/*! \fn bool QString::operator>=(const QLatin1String &other) const
+/*! \fn bool QString::operator>=(QLatin1String other) const
 
     \overload operator>=()
 */
@@ -2394,7 +2388,7 @@ bool QString::operator>(const QLatin1String &other) const
     localeAwareCompare().
 */
 
-/*! \fn bool QString::operator!=(const QLatin1String &other) const
+/*! \fn bool QString::operator!=(QLatin1String other) const
 
     \overload operator!=()
 */
@@ -2467,7 +2461,7 @@ int QString::indexOf(const QString &str, int from, Qt::CaseSensitivity cs) const
   \sa lastIndexOf(), contains(), count()
 */
 
-int QString::indexOf(const QLatin1String &str, int from, Qt::CaseSensitivity cs) const
+int QString::indexOf(QLatin1String str, int from, Qt::CaseSensitivity cs) const
 {
     return qt_find_latin1_string(unicode(), size(), str, from, cs);
 }
@@ -2677,7 +2671,7 @@ int QString::lastIndexOf(const QString &str, int from, Qt::CaseSensitivity cs) c
 
   \sa indexOf(), contains(), count()
 */
-int QString::lastIndexOf(const QLatin1String &str, int from, Qt::CaseSensitivity cs) const
+int QString::lastIndexOf(QLatin1String str, int from, Qt::CaseSensitivity cs) const
 {
     const int sl = str.size();
     if (sl == 1)
@@ -3701,7 +3695,7 @@ bool QString::startsWith(const QString& s, Qt::CaseSensitivity cs) const
 /*!
   \overload startsWith()
  */
-bool QString::startsWith(const QLatin1String& s, Qt::CaseSensitivity cs) const
+bool QString::startsWith(QLatin1String s, Qt::CaseSensitivity cs) const
 {
     return qt_starts_with(isNull() ? 0 : unicode(), size(), s, cs);
 }
@@ -3775,7 +3769,7 @@ bool QString::endsWith(const QStringRef &s, Qt::CaseSensitivity cs) const
 /*!
     \overload endsWith()
 */
-bool QString::endsWith(const QLatin1String& s, Qt::CaseSensitivity cs) const
+bool QString::endsWith(QLatin1String s, Qt::CaseSensitivity cs) const
 {
     return qt_ends_with(isNull() ? 0 : unicode(), size(), s, cs);
 }
@@ -4554,7 +4548,7 @@ QString& QString::fill(QChar ch, int size)
     \sa append(), prepend()
 */
 
-/*! \fn QString &QString::operator+=(const QLatin1String &str)
+/*! \fn QString &QString::operator+=(QLatin1String str)
 
     \overload operator+=()
 
@@ -4780,7 +4774,7 @@ QString& QString::fill(QChar ch, int size)
 */
 
 /*!
-    \fn int QString::compare(const QString &s1, const QLatin1String &s2, Qt::CaseSensitivity cs)
+    \fn int QString::compare(const QString &s1, QLatin1String s2, Qt::CaseSensitivity cs)
     \since 4.2
     \overload compare()
 
@@ -4789,7 +4783,7 @@ QString& QString::fill(QChar ch, int size)
 */
 
 /*!
-    \fn int QString::compare(const QLatin1String &s1, const QString &s2, Qt::CaseSensitivity cs = Qt::CaseSensitive)
+    \fn int QString::compare(QLatin1String s1, const QString &s2, Qt::CaseSensitivity cs = Qt::CaseSensitive)
 
     \since 4.2
     \overload compare()
@@ -4837,7 +4831,7 @@ int QString::compare_helper(const QChar *data1, int length1, const QChar *data2,
 
     Same as compare(*this, \a other, \a cs).
 */
-int QString::compare(const QLatin1String &other, Qt::CaseSensitivity cs) const
+int QString::compare(QLatin1String other, Qt::CaseSensitivity cs) const
 {
     return compare_helper(unicode(), length(), other, cs);
 }
@@ -7494,7 +7488,7 @@ QString &QString::setRawData(const QChar *unicode, int size)
     benefits as the first version of the code, and is faster than
     converting the Latin-1 strings using QString::fromLatin1().
 
-    Thanks to the QString(const QLatin1String &) constructor,
+    Thanks to the QString(QLatin1String) constructor,
     QLatin1String can be used everywhere a QString is expected. For
     example:
 
@@ -7705,37 +7699,37 @@ QString &QString::setRawData(const QChar *unicode, int size)
 
 
 
-/*! \fn bool operator==(const QLatin1String &s1, const QLatin1String &s2)
+/*! \fn bool operator==(QLatin1String s1, QLatin1String s2)
    \relates QLatin1String
 
    Returns true if string \a s1 is lexically equal to string \a s2; otherwise
    returns false.
 */
-/*! \fn bool operator!=(const QLatin1String &s1, const QLatin1String &s2)
+/*! \fn bool operator!=(QLatin1String s1, QLatin1String s2)
    \relates QLatin1String
 
    Returns true if string \a s1 is lexically unequal to string \a s2; otherwise
    returns false.
 */
-/*! \fn bool operator<(const QLatin1String &s1, const QLatin1String &s2)
+/*! \fn bool operator<(QLatin1String s1, QLatin1String s2)
    \relates QLatin1String
 
    Returns true if string \a s1 is lexically smaller than string \a s2; otherwise
    returns false.
 */
-/*! \fn bool operator<=(const QLatin1String &s1, const QLatin1String &s2)
+/*! \fn bool operator<=(QLatin1String s1, QLatin1String s2)
    \relates QLatin1String
 
    Returns true if string \a s1 is lexically smaller than or equal to string \a s2; otherwise
    returns false.
 */
-/*! \fn bool operator>(const QLatin1String &s1, const QLatin1String &s2)
+/*! \fn bool operator>(QLatin1String s1, QLatin1String s2)
    \relates QLatin1String
 
    Returns true if string \a s1 is lexically greater than string \a s2; otherwise
    returns false.
 */
-/*! \fn bool operator>=(const QLatin1String &s1, const QLatin1String &s2)
+/*! \fn bool operator>=(QLatin1String s1, QLatin1String s2)
    \relates QLatin1String
 
    Returns true if string \a s1 is lexically greater than or equal to
@@ -8057,7 +8051,7 @@ bool operator==(const QString &s1,const QStringRef &s2)
    Returns true if string  \a s1 is lexically equal to string reference \a s2; otherwise
    returns false.
 */
-bool operator==(const QLatin1String &s1, const QStringRef &s2)
+bool operator==(QLatin1String s1, const QStringRef &s2)
 {
     if (s1.size() != s2.size())
         return false;
@@ -8924,7 +8918,7 @@ static inline int qt_string_count(const QChar *unicode, int size, QChar ch,
 }
 
 static inline int qt_find_latin1_string(const QChar *haystack, int size,
-                                        const QLatin1String &needle,
+                                        QLatin1String needle,
                                         int from, Qt::CaseSensitivity cs)
 {
     const char *latin1 = needle.latin1();
diff --git a/src/corelib/tools/qstring.h b/src/corelib/tools/qstring.h
index cc4ed75..34e3dbd 100644
--- a/src/corelib/tools/qstring.h
+++ b/src/corelib/tools/qstring.h
@@ -226,12 +226,12 @@ public:
     explicit QString(const QChar *unicode, int size = -1);
     QString(QChar c);
     QString(int size, QChar c);
-    inline QString(const QLatin1String &latin1);
+    inline QString(QLatin1String latin1);
     inline QString(const QString &);
     inline ~QString();
     QString &operator=(QChar c);
     QString &operator=(const QString &);
-    inline QString &operator=(const QLatin1String &);
+    inline QString &operator=(QLatin1String latin1);
 #ifdef Q_COMPILER_RVALUE_REFS
     inline QString(QString && other) : d(other.d) { other.d = Data::sharedNull(); }
     inline QString &operator=(QString &&other)
@@ -323,11 +323,11 @@ public:
 
     int indexOf(QChar c, int from = 0, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
     int indexOf(const QString &s, int from = 0, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
-    int indexOf(const QLatin1String &s, int from = 0, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
+    int indexOf(QLatin1String s, int from = 0, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
     int indexOf(const QStringRef &s, int from = 0, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
     int lastIndexOf(QChar c, int from = -1, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
     int lastIndexOf(const QString &s, int from = -1, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
-    int lastIndexOf(const QLatin1String &s, int from = -1, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
+    int lastIndexOf(QLatin1String s, int from = -1, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
     int lastIndexOf(const QStringRef &s, int from = -1, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
 
     inline bool contains(QChar c, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
@@ -381,11 +381,11 @@ public:
 
     bool startsWith(const QString &s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
     bool startsWith(const QStringRef &s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
-    bool startsWith(const QLatin1String &s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
+    bool startsWith(QLatin1String s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
     bool startsWith(QChar c, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
     bool endsWith(const QString &s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
     bool endsWith(const QStringRef &s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
-    bool endsWith(const QLatin1String &s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
+    bool endsWith(QLatin1String s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
     bool endsWith(QChar c, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
 
     QString leftJustified(int width, QChar fill = QLatin1Char(' '), bool trunc = false) const Q_REQUIRED_RESULT;
@@ -402,14 +402,14 @@ public:
     QString &insert(int i, QChar c);
     QString &insert(int i, const QChar *uc, int len);
     inline QString &insert(int i, const QString &s) { return insert(i, s.constData(), s.length()); }
-    QString &insert(int i, const QLatin1String &s);
+    QString &insert(int i, QLatin1String s);
     QString &append(QChar c);
     QString &append(const QString &s);
     QString &append(const QStringRef &s);
-    QString &append(const QLatin1String &s);
+    QString &append(QLatin1String s);
     inline QString &prepend(QChar c) { return insert(0, c); }
     inline QString &prepend(const QString &s) { return insert(0, s); }
-    inline QString &prepend(const QLatin1String &s) { return insert(0, s); }
+    inline QString &prepend(QLatin1String s) { return insert(0, s); }
 
     inline QString &operator+=(QChar c) {
         if (d->ref.isShared() || uint(d->size) + 2u > d->alloc)
@@ -422,7 +422,7 @@ public:
     inline QString &operator+=(QChar::SpecialCharacter c) { return append(QChar(c)); }
     inline QString &operator+=(const QString &s) { return append(s); }
     inline QString &operator+=(const QStringRef &s) { return append(s); }
-    inline QString &operator+=(const QLatin1String &s) { return append(s); }
+    inline QString &operator+=(QLatin1String s) { return append(s); }
 
     QString &remove(int i, int len);
     QString &remove(QChar c, Qt::CaseSensitivity cs = Qt::CaseSensitive);
@@ -432,13 +432,13 @@ public:
     QString &replace(int i, int len, const QString &after);
     QString &replace(QChar before, QChar after, Qt::CaseSensitivity cs = Qt::CaseSensitive);
     QString &replace(const QChar *before, int blen, const QChar *after, int alen, Qt::CaseSensitivity cs = Qt::CaseSensitive);
-    QString &replace(const QLatin1String &before, const QLatin1String &after, Qt::CaseSensitivity cs = Qt::CaseSensitive);
-    QString &replace(const QLatin1String &before, const QString &after, Qt::CaseSensitivity cs = Qt::CaseSensitive);
-    QString &replace(const QString &before, const QLatin1String &after, Qt::CaseSensitivity cs = Qt::CaseSensitive);
+    QString &replace(QLatin1String before, QLatin1String after, Qt::CaseSensitivity cs = Qt::CaseSensitive);
+    QString &replace(QLatin1String before, const QString &after, Qt::CaseSensitivity cs = Qt::CaseSensitive);
+    QString &replace(const QString &before, QLatin1String after, Qt::CaseSensitivity cs = Qt::CaseSensitive);
     QString &replace(const QString &before, const QString &after,
                      Qt::CaseSensitivity cs = Qt::CaseSensitive);
     QString &replace(QChar c, const QString &after, Qt::CaseSensitivity cs = Qt::CaseSensitive);
-    QString &replace(QChar c, const QLatin1String &after, Qt::CaseSensitivity cs = Qt::CaseSensitive);
+    QString &replace(QChar c, QLatin1String after, Qt::CaseSensitivity cs = Qt::CaseSensitive);
 #ifndef QT_NO_REGEXP
     QString &replace(const QRegExp &rx, const QString &after);
     inline QString &remove(const QRegExp &rx)
@@ -520,15 +520,15 @@ public:
     inline QString &setUtf16(const ushort *utf16, int size);
 
     int compare(const QString &s, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
-    int compare(const QLatin1String &other, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
+    int compare(QLatin1String other, Qt::CaseSensitivity cs = Qt::CaseSensitive) const;
 
     static inline int compare(const QString &s1, const QString &s2, Qt::CaseSensitivity cs = Qt::CaseSensitive)
     { return s1.compare(s2, cs); }
 
-    static inline int compare(const QString& s1, const QLatin1String &s2,
+    static inline int compare(const QString &s1, QLatin1String s2,
                               Qt::CaseSensitivity cs = Qt::CaseSensitive)
     { return s1.compare(s2, cs); }
-    static inline int compare(const QLatin1String& s1, const QString &s2,
+    static inline int compare(QLatin1String s1, const QString &s2,
                               Qt::CaseSensitivity cs = Qt::CaseSensitive)
     { return -s2.compare(s1, cs); }
 
@@ -580,12 +580,12 @@ public:
     friend inline bool operator<=(const QString &s1, const QString &s2) { return !(s1 > s2); }
     friend inline bool operator>=(const QString &s1, const QString &s2) { return !(s1 < s2); }
 
-    bool operator==(const QLatin1String &s) const;
-    bool operator<(const QLatin1String &s) const;
-    bool operator>(const QLatin1String &s) const;
-    inline bool operator!=(const QLatin1String &s) const { return !operator==(s); }
-    inline bool operator<=(const QLatin1String &s) const { return !operator>(s); }
-    inline bool operator>=(const QLatin1String &s) const { return !operator<(s); }
+    bool operator==(QLatin1String s) const;
+    bool operator<(QLatin1String s) const;
+    bool operator>(QLatin1String s) const;
+    inline bool operator!=(QLatin1String s) const { return !operator==(s); }
+    inline bool operator<=(QLatin1String s) const { return !operator>(s); }
+    inline bool operator>=(QLatin1String s) const { return !operator<(s); }
 
     // ASCII compatibility
 #ifndef QT_NO_CAST_FROM_ASCII
@@ -732,7 +732,7 @@ public:
     inline DataPtr &data_ptr() { return d; }
 };
 
-inline QString::QString(const QLatin1String &aLatin1) : d(fromLatin1_helper(aLatin1.latin1(), aLatin1.size()))
+inline QString::QString(QLatin1String aLatin1) : d(fromLatin1_helper(aLatin1.latin1(), aLatin1.size()))
 { }
 inline int QString::length() const
 { return d->size; }
@@ -756,7 +756,7 @@ inline void QString::detach()
 { if (d->ref.isShared() || (d->offset != sizeof(QStringData))) reallocData(uint(d->size) + 1u); }
 inline bool QString::isDetached() const
 { return !d->ref.isShared(); }
-inline QString &QString::operator=(const QLatin1String &s)
+inline QString &QString::operator=(QLatin1String s)
 {
     *this = fromLatin1(s.latin1(), s.size());
     return *this;
@@ -1018,33 +1018,33 @@ inline QT_ASCII_CAST_WARN bool operator<=(const char *s1, const QString &s2)
 inline QT_ASCII_CAST_WARN bool operator>=(const char *s1, const QString &s2)
 { return QString::compare_helper(s2.constData(), s2.size(), s1, -1) >= 0; }
 
-inline QT_ASCII_CAST_WARN bool operator==(const char *s1, const QLatin1String &s2)
+inline QT_ASCII_CAST_WARN bool operator==(const char *s1, QLatin1String s2)
 { return QString::fromUtf8(s1) == s2; }
-inline QT_ASCII_CAST_WARN bool operator!=(const char *s1, const QLatin1String &s2)
+inline QT_ASCII_CAST_WARN bool operator!=(const char *s1, QLatin1String s2)
 { return QString::fromUtf8(s1) != s2; }
-inline QT_ASCII_CAST_WARN bool operator<(const char *s1, const QLatin1String &s2)
+inline QT_ASCII_CAST_WARN bool operator<(const char *s1, QLatin1String s2)
 { return (QString::fromUtf8(s1) < s2); }
-inline QT_ASCII_CAST_WARN bool operator>(const char *s1, const QLatin1String &s2)
+inline QT_ASCII_CAST_WARN bool operator>(const char *s1, QLatin1String s2)
 { return (QString::fromUtf8(s1) > s2); }
-inline QT_ASCII_CAST_WARN bool operator<=(const char *s1, const QLatin1String &s2)
+inline QT_ASCII_CAST_WARN bool operator<=(const char *s1, QLatin1String s2)
 { return (QString::fromUtf8(s1) <= s2); }
-inline QT_ASCII_CAST_WARN bool operator>=(const char *s1, const QLatin1String &s2)
+inline QT_ASCII_CAST_WARN bool operator>=(const char *s1, QLatin1String s2)
 { return (QString::fromUtf8(s1) >= s2); }
 
-inline bool operator==(const QLatin1String &s1, const QLatin1String &s2)
+inline bool operator==(QLatin1String s1, QLatin1String s2)
 { return (s1.size() == s2.size() && !memcmp(s1.latin1(), s2.latin1(), s1.size())); }
-inline bool operator!=(const QLatin1String &s1, const QLatin1String &s2)
+inline bool operator!=(QLatin1String s1, QLatin1String s2)
 { return (s1.size() != s2.size() || memcmp(s1.latin1(), s2.latin1(), s1.size())); }
-inline bool operator<(const QLatin1String &s1, const QLatin1String &s2)
+inline bool operator<(QLatin1String s1, QLatin1String s2)
 { int r = memcmp(s1.latin1(), s2.latin1(), qMin(s1.size(), s2.size()));
   return (r < 0) || (r == 0 && s1.size() < s2.size()); }
-inline bool operator<=(const QLatin1String &s1, const QLatin1String &s2)
+inline bool operator<=(QLatin1String s1, QLatin1String s2)
 { int r = memcmp(s1.latin1(), s2.latin1(), qMin(s1.size(), s2.size()));
   return (r < 0) || (r == 0 && s1.size() <= s2.size()); }
-inline bool operator>(const QLatin1String &s1, const QLatin1String &s2)
+inline bool operator>(QLatin1String s1, QLatin1String s2)
 { int r = memcmp(s1.latin1(), s2.latin1(), qMin(s1.size(), s2.size()));
   return (r > 0) || (r == 0 && s1.size() > s2.size()); }
-inline bool operator>=(const QLatin1String &s1, const QLatin1String &s2)
+inline bool operator>=(QLatin1String s1, QLatin1String s2)
 { int r = memcmp(s1.latin1(), s2.latin1(), qMin(s1.size(), s2.size()));
   return (r > 0) || (r == 0 && s1.size() >= s2.size()); }
 #endif // QT_NO_CAST_FROM_ASCII
@@ -1305,12 +1305,12 @@ inline bool operator==(const QStringRef &s1,const QString &s2)
 { return s2 == s1; }
 inline bool operator!=(const QStringRef &s1,const QString &s2)
 { return s2 != s1; }
-Q_CORE_EXPORT bool operator==(const QLatin1String &s1, const QStringRef &s2);
-inline bool operator!=(const QLatin1String &s1,const QStringRef &s2)
+Q_CORE_EXPORT bool operator==(QLatin1String s1, const QStringRef &s2);
+inline bool operator!=(QLatin1String s1, const QStringRef &s2)
 { return !(s1 == s2); }
-inline bool operator==(const QStringRef &s1,const QLatin1String &s2)
+inline bool operator==(const QStringRef &s1, QLatin1String s2)
 { return s2 == s1; }
-inline bool operator!=(const QStringRef &s1,const QLatin1String &s2)
+inline bool operator!=(const QStringRef &s1, QLatin1String s2)
 { return s2 != s1; }
 
 Q_CORE_EXPORT bool operator<(const QStringRef &s1,const QStringRef &s2);
diff --git a/src/corelib/tools/qstringbuilder.h b/src/corelib/tools/qstringbuilder.h
index 461430a..2a083c9 100644
--- a/src/corelib/tools/qstringbuilder.h
+++ b/src/corelib/tools/qstringbuilder.h
@@ -227,13 +227,13 @@ template <> struct QConcatenable<QLatin1String>
     typedef QLatin1String type;
     typedef QString ConvertTo;
     enum { ExactSize = true };
-    static int size(const QLatin1String &a) { return a.size(); }
-    static inline void appendTo(const QLatin1String &a, QChar *&out)
+    static int size(const QLatin1String a) { return a.size(); }
+    static inline void appendTo(const QLatin1String a, QChar *&out)
     {
         for (const char *s = a.data(); *s; )
             *out++ = QLatin1Char(*s++);
     }
-    static inline void appendTo(const QLatin1String &a, char *&out)
+    static inline void appendTo(const QLatin1String a, char *&out)
     {
         for (const char *s = a.data(); *s; )
             *out++ = *s++;
diff --git a/src/corelib/xml/qxmlstream.cpp b/src/corelib/xml/qxmlstream.cpp
index b37675f..fc9b2c4 100644
--- a/src/corelib/xml/qxmlstream.cpp
+++ b/src/corelib/xml/qxmlstream.cpp
@@ -2677,7 +2677,7 @@ QStringRef QXmlStreamAttributes::value(const QString &namespaceUri, const QStrin
   described with \a namespaceUri, or an empty string reference if the
   attribute is not defined. The \a namespaceUri can be empty.
  */
-QStringRef QXmlStreamAttributes::value(const QString &namespaceUri, const QLatin1String &name) const
+QStringRef QXmlStreamAttributes::value(const QString &namespaceUri, QLatin1String name) const
 {
     for (int i = 0; i < size(); ++i) {
         const QXmlStreamAttribute &attribute = at(i);
@@ -2692,7 +2692,7 @@ QStringRef QXmlStreamAttributes::value(const QString &namespaceUri, const QLatin
   described with \a namespaceUri, or an empty string reference if the
   attribute is not defined. The \a namespaceUri can be empty.
  */
-QStringRef QXmlStreamAttributes::value(const QLatin1String &namespaceUri, const QLatin1String &name) const
+QStringRef QXmlStreamAttributes::value(QLatin1String namespaceUri, QLatin1String name) const
 {
     for (int i = 0; i < size(); ++i) {
         const QXmlStreamAttribute &attribute = at(i);
@@ -2736,7 +2736,7 @@ QStringRef QXmlStreamAttributes::value(const QString &qualifiedName) const
   use qualified names, but a resolved namespaceUri and the attribute's
   local name.
  */
-QStringRef QXmlStreamAttributes::value(const QLatin1String &qualifiedName) const
+QStringRef QXmlStreamAttributes::value(QLatin1String qualifiedName) const
 {
     for (int i = 0; i < size(); ++i) {
         const QXmlStreamAttribute &attribute = at(i);
@@ -3919,7 +3919,7 @@ void QXmlStreamWriter::writeCurrentToken(const QXmlStreamReader &reader)
 */
 
 /*!
- \fn bool QXmlStreamAttributes::hasAttribute(const QLatin1String &qualifiedName) const
+ \fn bool QXmlStreamAttributes::hasAttribute(QLatin1String qualifiedName) const
  \overload
  \since 4.5
 */
diff --git a/src/corelib/xml/qxmlstream.h b/src/corelib/xml/qxmlstream.h
index ae6dd23..c3e2c4e 100644
--- a/src/corelib/xml/qxmlstream.h
+++ b/src/corelib/xml/qxmlstream.h
@@ -113,10 +113,10 @@ class Q_CORE_EXPORT QXmlStreamAttributes : public QVector<QXmlStreamAttribute>
 public:
     inline QXmlStreamAttributes() {}
     QStringRef value(const QString &namespaceUri, const QString &name) const;
-    QStringRef value(const QString &namespaceUri, const QLatin1String &name) const;
-    QStringRef value(const QLatin1String &namespaceUri, const QLatin1String &name) const;
+    QStringRef value(const QString &namespaceUri, QLatin1String name) const;
+    QStringRef value(QLatin1String namespaceUri, QLatin1String name) const;
     QStringRef value(const QString &qualifiedName) const;
-    QStringRef value(const QLatin1String &qualifiedName) const;
+    QStringRef value(QLatin1String qualifiedName) const;
     void append(const QString &namespaceUri, const QString &name, const QString &value);
     void append(const QString &qualifiedName, const QString &value);
 
@@ -125,7 +125,7 @@ public:
         return !value(qualifiedName).isNull();
     }
 
-    inline bool hasAttribute(const QLatin1String &qualifiedName) const
+    inline bool hasAttribute(QLatin1String qualifiedName) const
     {
         return !value(qualifiedName).isNull();
     }
diff --git a/src/dbus/qdbusextratypes.cpp b/src/dbus/qdbusextratypes.cpp
index 4b2730c..468fa36 100644
--- a/src/dbus/qdbusextratypes.cpp
+++ b/src/dbus/qdbusextratypes.cpp
@@ -141,7 +141,7 @@ void QDBusSignature::doCheck()
 */
 
 /*!
-    \fn QDBusObjectPath::QDBusObjectPath(const QLatin1String &path)
+    \fn QDBusObjectPath::QDBusObjectPath(QLatin1String path)
 
     Constructs a new object path from the given \a path.
 */
@@ -203,7 +203,7 @@ void QDBusSignature::doCheck()
 */
 
 /*!
-    \fn QDBusSignature::QDBusSignature(const QLatin1String &signature)
+    \fn QDBusSignature::QDBusSignature(QLatin1String signature)
 
     Constructs a new signature from the given \a signature.
 */
diff --git a/src/dbus/qdbusextratypes.h b/src/dbus/qdbusextratypes.h
index 51b3da5..07b07fe 100644
--- a/src/dbus/qdbusextratypes.h
+++ b/src/dbus/qdbusextratypes.h
@@ -63,7 +63,7 @@ public:
     inline QDBusObjectPath() { }
 
     inline explicit QDBusObjectPath(const char *path);
-    inline explicit QDBusObjectPath(const QLatin1String &path);
+    inline explicit QDBusObjectPath(QLatin1String path);
     inline explicit QDBusObjectPath(const QString &path);
 
     inline void setPath(const QString &path);
@@ -79,7 +79,7 @@ inline QDBusObjectPath::QDBusObjectPath(const char *objectPath)
     : m_path(QString::fromLatin1(objectPath))
 { doCheck(); }
 
-inline QDBusObjectPath::QDBusObjectPath(const QLatin1String &objectPath)
+inline QDBusObjectPath::QDBusObjectPath(QLatin1String objectPath)
     : m_path(objectPath)
 { doCheck(); }
 
@@ -110,7 +110,7 @@ public:
     inline QDBusSignature() { }
 
     inline explicit QDBusSignature(const char *signature);
-    inline explicit QDBusSignature(const QLatin1String &signature);
+    inline explicit QDBusSignature(QLatin1String signature);
     inline explicit QDBusSignature(const QString &signature);
 
     inline void setSignature(const QString &signature);
@@ -126,7 +126,7 @@ inline QDBusSignature::QDBusSignature(const char *dBusSignature)
     : m_signature(QString::fromLatin1(dBusSignature))
 { doCheck(); }
 
-inline QDBusSignature::QDBusSignature(const QLatin1String &dBusSignature)
+inline QDBusSignature::QDBusSignature(QLatin1String dBusSignature)
     : m_signature(dBusSignature)
 { doCheck(); }
 
diff --git a/src/gui/text/qcssparser.cpp b/src/gui/text/qcssparser.cpp
index c1838be..0f90a52 100644
--- a/src/gui/text/qcssparser.cpp
+++ b/src/gui/text/qcssparser.cpp
@@ -2755,7 +2755,7 @@ bool Parser::until(QCss::TokenType target, QCss::TokenType target2)
     return false;
 }
 
-bool Parser::testTokenAndEndsWith(QCss::TokenType t, const QLatin1String &str)
+bool Parser::testTokenAndEndsWith(QCss::TokenType t, QLatin1String str)
 {
     if (!test(t)) return false;
     if (!lexem().endsWith(str, Qt::CaseInsensitive)) {
diff --git a/src/gui/text/qcssparser_p.h b/src/gui/text/qcssparser_p.h
index a5601fe..0dc4438 100644
--- a/src/gui/text/qcssparser_p.h
+++ b/src/gui/text/qcssparser_p.h
@@ -824,7 +824,7 @@ public:
         return (index - 1) < symbols.count() ? symbols.at(index - 1).token : NONE;
     }
 
-    bool testTokenAndEndsWith(TokenType t, const QLatin1String &str);
+    bool testTokenAndEndsWith(TokenType t, QLatin1String str);
 
     inline bool recordError() { errorIndex = index; return false; }
 
diff --git a/src/printsupport/dialogs/qprintpreviewdialog.cpp b/src/printsupport/dialogs/qprintpreviewdialog.cpp
index 6864b24..991efbf 100644
--- a/src/printsupport/dialogs/qprintpreviewdialog.cpp
+++ b/src/printsupport/dialogs/qprintpreviewdialog.cpp
@@ -339,7 +339,7 @@ void QPrintPreviewDialogPrivate::init(QPrinter *_printer)
     preview->setFocus();
 }
 
-static inline void qt_setupActionIcon(QAction *action, const QLatin1String &name)
+static inline void qt_setupActionIcon(QAction *action, QLatin1String name)
 {
     QLatin1String imagePrefix(":/qt-project.org/dialogs/qprintpreviewdialog/images/");
     QIcon icon;
diff --git a/src/testlib/qtestcase.cpp b/src/testlib/qtestcase.cpp
index 21468f0..cf1d0be 100644
--- a/src/testlib/qtestcase.cpp
+++ b/src/testlib/qtestcase.cpp
@@ -782,7 +782,7 @@ QT_BEGIN_NAMESPACE
 */
 
 /*!
-    \fn char *QTest::toString(QChar character)
+    \fn char *QTest::toString(const QChar &character)
     \overload
 
     Returns a textual representation of the given \a character.
diff --git a/src/tools/uic/cpp/cppwriteinitialization.cpp b/src/tools/uic/cpp/cppwriteinitialization.cpp
index e5eda78..402295d 100644
--- a/src/tools/uic/cpp/cppwriteinitialization.cpp
+++ b/src/tools/uic/cpp/cppwriteinitialization.cpp
@@ -2419,7 +2419,7 @@ DomImage *WriteInitialization::findImage(const QString &name) const
     return m_registeredImages.value(name);
 }
 
-DomWidget *WriteInitialization::findWidget(const QLatin1String &widgetClass)
+DomWidget *WriteInitialization::findWidget(QLatin1String widgetClass)
 {
     for (int i = m_widgetChain.count() - 1; i >= 0; --i) {
         DomWidget *widget = m_widgetChain.at(i);
diff --git a/src/tools/uic/cpp/cppwriteinitialization.h b/src/tools/uic/cpp/cppwriteinitialization.h
index a0f6c3a..e82998e 100644
--- a/src/tools/uic/cpp/cppwriteinitialization.h
+++ b/src/tools/uic/cpp/cppwriteinitialization.h
@@ -253,7 +253,7 @@ private:
     void enableSorting(DomWidget *w, const QString &varName, const QString &tempName);
 
     QString findDeclaration(const QString &name);
-    DomWidget *findWidget(const QLatin1String &widgetClass);
+    DomWidget *findWidget(QLatin1String widgetClass);
     DomImage *findImage(const QString &name) const;
 
     bool isValidObject(const QString &name) const;
diff --git a/src/tools/uic/customwidgetsinfo.cpp b/src/tools/uic/customwidgetsinfo.cpp
index 0dc932d..6bb1367 100644
--- a/src/tools/uic/customwidgetsinfo.cpp
+++ b/src/tools/uic/customwidgetsinfo.cpp
@@ -71,7 +71,7 @@ void CustomWidgetsInfo::acceptCustomWidget(DomCustomWidget *node)
     m_customWidgets.insert(node->elementClass(), node);
 }
 
-bool CustomWidgetsInfo::extends(const QString &classNameIn, const QLatin1String &baseClassName) const
+bool CustomWidgetsInfo::extends(const QString &classNameIn, QLatin1String baseClassName) const
 {
     if (classNameIn == baseClassName)
         return true;
diff --git a/src/tools/uic/customwidgetsinfo.h b/src/tools/uic/customwidgetsinfo.h
index 80d9349..7cc0e28 100644
--- a/src/tools/uic/customwidgetsinfo.h
+++ b/src/tools/uic/customwidgetsinfo.h
@@ -76,7 +76,7 @@ public:
 
     QString realClassName(const QString &className) const;
 
-    bool extends(const QString &className, const QLatin1String &baseClassName) const;
+    bool extends(const QString &className, QLatin1String baseClassName) const;
 
     bool isCustomWidgetContainer(const QString &className) const;
 
diff --git a/src/xml/sax/qxml.cpp b/src/xml/sax/qxml.cpp
index b841deb..4a99681 100644
--- a/src/xml/sax/qxml.cpp
+++ b/src/xml/sax/qxml.cpp
@@ -1010,7 +1010,7 @@ int QXmlAttributes::index(const QString& qName) const
 
 /*! \overload
   */
-int QXmlAttributes::index(const QLatin1String& qName) const
+int QXmlAttributes::index(QLatin1String qName) const
 {
     for (int i = 0; i < attList.size(); ++i) {
         if (attList.at(i).qname == qName)
@@ -1167,7 +1167,7 @@ QString QXmlAttributes::value(const QString& qName) const
 
     \sa {Namespace Support via Features}
 */
-QString QXmlAttributes::value(const QLatin1String& qName) const
+QString QXmlAttributes::value(QLatin1String qName) const
 {
     int i = index(qName);
     if (i == -1)
diff --git a/src/xml/sax/qxml.h b/src/xml/sax/qxml.h
index 4c7daff..62102c2 100644
--- a/src/xml/sax/qxml.h
+++ b/src/xml/sax/qxml.h
@@ -122,7 +122,7 @@ public:
     virtual ~QXmlAttributes() {}
 
     int index(const QString& qName) const;
-    int index(const QLatin1String& qName) const;
+    int index(QLatin1String qName) const;
     int index(const QString& uri, const QString& localPart) const;
     int length() const;
     int count() const;
@@ -134,7 +134,7 @@ public:
     QString type(const QString& uri, const QString& localName) const;
     QString value(int index) const;
     QString value(const QString& qName) const;
-    QString value(const QLatin1String& qName) const;
+    QString value(QLatin1String qName) const;
     QString value(const QString& uri, const QString& localName) const;
 
     void clear();