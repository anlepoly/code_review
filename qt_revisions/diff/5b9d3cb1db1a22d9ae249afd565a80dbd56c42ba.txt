diff --git a/examples/particles/emitters/doc/src/emitters.qdoc b/examples/particles/emitters/doc/src/emitters.qdoc
index 58a01dc..0138a57 100644
--- a/examples/particles/emitters/doc/src/emitters.qdoc
+++ b/examples/particles/emitters/doc/src/emitters.qdoc
@@ -55,6 +55,6 @@
     This sends the particles towards the center of the ellipse with proportional speed, keeping the ellipse outline as they move to the center.
 
     TrailEmitter uses that element to add smoke particles to trail the fire particles in the scene.
-    \snippet examples/particles/emitters/content/trailemitter.qml 0
+    \snippet examples/particles/emitters/content/customemitter.qml 0
 
 */
diff --git a/examples/particles/imageparticle/doc/src/imageparticle.qdoc b/examples/particles/imageparticle/doc/src/imageparticle.qdoc
index 903e318..c12de1d 100644
--- a/examples/particles/imageparticle/doc/src/imageparticle.qdoc
+++ b/examples/particles/imageparticle/doc/src/imageparticle.qdoc
@@ -44,8 +44,8 @@
     \snippet examples/particles/imageparticle/content/colortable.qml 0
 
     Deformation spins and squishes a starfish particle.
-    \snippet examples/particles/imageparticle/content/colortable.qml spin
-    \snippet examples/particles/imageparticle/content/colortable.qml deform
+    \snippet examples/particles/imageparticle/content/deformation.qml spin
+    \snippet examples/particles/imageparticle/content/deformation.qml deform
 
     Rotation demonstrates the autoRotate property, so that particles rotate in the direction that they travel.
 
diff --git a/src/qml/doc/qtqml.qdocconf b/src/qml/doc/qtqml.qdocconf
index a97802f..301b6be 100644
--- a/src/qml/doc/qtqml.qdocconf
+++ b/src/qml/doc/qtqml.qdocconf
@@ -37,6 +37,7 @@ headerdirs  += ..
 sourcedirs  += ..
 
 exampledirs += ../../../examples/qml \
+               ../../.. \
                ../ \
                snippets
 
diff --git a/src/qml/doc/src/cppintegration/extending-tutorial.qdoc b/src/qml/doc/src/cppintegration/extending-tutorial.qdoc
index 5787977..d59a8cd 100644
--- a/src/qml/doc/src/cppintegration/extending-tutorial.qdoc
+++ b/src/qml/doc/src/cppintegration/extending-tutorial.qdoc
@@ -422,7 +422,7 @@ Finally, we add a \l{qtqml-modules-qmldir.html}{qmldir} file that is
 parsed by the QML engine.  In this file, we specify that a plugin named
 "chapter6-plugin" (the name of the example project) can be found in the "lib" subdirectory:
 
-\quotefile examples/tutorials/extending/chapter6-plugins/ChartsPlugin/qmldir
+\quotefile examples/tutorials/extending/chapter6-plugins/Charts/qmldir
 
 Now we have a plugin, and instead of having a main.cpp and an executable, we can build
 the project and then load the QML file using the \l{Prototyping with qmlscene}{qmlscene tool},
diff --git a/src/qml/qml/qquicklistmodel.cpp b/src/qml/qml/qquicklistmodel.cpp
index 8e44130..021b9cf 100644
--- a/src/qml/qml/qquicklistmodel.cpp
+++ b/src/qml/qml/qquicklistmodel.cpp
@@ -1497,11 +1497,11 @@ QQuickListModelParser::ListInstruction *QQuickListModelParser::ListModelData::in
     Here is an example that uses WorkerScript to periodically append the
     current time to a list model:
 
-    \snippet examples/quick/threading/threadedlistmodel/timedisplay.qml 0
+    \snippet quick/threading/threadedlistmodel/timedisplay.qml 0
 
     The included file, \tt dataloader.js, looks like this:
 
-    \snippet examples/quick/threading/threadedlistmodel/dataloader.js 0
+    \snippet quick/threading/threadedlistmodel/dataloader.js 0
 
     The timer in the main example sends messages to the worker script by calling
     \l WorkerScript::sendMessage(). When this message is received,
diff --git a/src/qml/qml/v8/qjsengine.cpp b/src/qml/qml/v8/qjsengine.cpp
index edee4d8..5bb6db1 100644
--- a/src/qml/qml/v8/qjsengine.cpp
+++ b/src/qml/qml/v8/qjsengine.cpp
@@ -79,6 +79,7 @@ Q_DECLARE_METATYPE(QList<int>)
   \brief The QJSEngine class provides an environment for evaluating JavaScript code.
 
   \ingroup qtjavascript
+  \inmodule QtQml
   \mainclass
 
   \section1 Evaluating Scripts
@@ -184,6 +185,9 @@ QJSEngine::QJSEngine(QObject *parent)
 {
 }
 
+/*!
+    \internal
+*/
 QJSEngine::QJSEngine(QJSEnginePrivate &dd, QObject *parent)
     : QObject(dd, parent)
     , d(new QV8Engine(this))
@@ -288,8 +292,7 @@ QJSValue QJSEngine::newArray(uint length)
 
 /*!
   Creates a JavaScript object that wraps the given QObject \a
-  object, using JavaScriptOwnership. The given \a options control
-  various aspects of the interaction with the resulting script object.
+  object, using JavaScriptOwnership.
 
   Signals and slots, properties and children of \a object are
   available as properties of the created QJSValue.
diff --git a/src/qml/qml/v8/qjsvalue.cpp b/src/qml/qml/v8/qjsvalue.cpp
index e23752f..6746b46 100644
--- a/src/qml/qml/v8/qjsvalue.cpp
+++ b/src/qml/qml/v8/qjsvalue.cpp
@@ -55,6 +55,7 @@
   \brief The QJSValue class acts as a container for Qt/JavaScript data types.
 
   \ingroup qtjavascript
+  \inmodule QtQml
   \mainclass
 
   QJSValue supports the types defined in the \l{ECMA-262}
diff --git a/src/qml/qml/v8/qjsvalueiterator.cpp b/src/qml/qml/v8/qjsvalueiterator.cpp
index 1b0e280..d6ac859 100644
--- a/src/qml/qml/v8/qjsvalueiterator.cpp
+++ b/src/qml/qml/v8/qjsvalueiterator.cpp
@@ -55,6 +55,7 @@ QT_BEGIN_NAMESPACE
     \brief The QJSValueIterator class provides a Java-style iterator for QJSValue.
 
     \ingroup qtjavascript
+    \inmodule QtQml
 
 
     The QJSValueIterator constructor takes a QJSValue as
diff --git a/src/qml/qml/v8/qqmlbuiltinfunctions.cpp b/src/qml/qml/v8/qqmlbuiltinfunctions.cpp
index 8e8e320..e89749f 100644
--- a/src/qml/qml/v8/qqmlbuiltinfunctions.cpp
+++ b/src/qml/qml/v8/qqmlbuiltinfunctions.cpp
@@ -1330,7 +1330,7 @@ v8::Handle<v8::Value> createComponent(const v8::Arguments &args)
 
 #ifndef QT_NO_TRANSLATION
 /*!
-    \qmlmethod string qsTranslate(string context, string sourceText, string disambiguation, int n)
+    \qmlmethod string Qt::qsTranslate(string context, string sourceText, string disambiguation, int n)
 
     Returns a translated version of \a sourceText within the given \a context, optionally based on a
     \a disambiguation string and value of \a n for strings containing plurals;
@@ -1382,7 +1382,7 @@ v8::Handle<v8::Value> qsTranslate(const v8::Arguments &args)
 }
 
 /*!
-    \qmlmethod string QT_TRANSLATE_NOOP(string context, string sourceText, string disambiguation)
+    \qmlmethod string Qt::qsTranslateNoOp(string context, string sourceText, string disambiguation)
 
     Marks \a sourceText for dynamic translation in the given \a context; i.e, the stored \a sourceText
     will not be altered.
@@ -1411,7 +1411,7 @@ v8::Handle<v8::Value> qsTranslateNoOp(const v8::Arguments &args)
 }
 
 /*!
-    \qmlmethod string qsTr(string sourceText, string disambiguation, int n)
+    \qmlmethod string Qt::qsTr(string sourceText, string disambiguation, int n)
 
     Returns a translated version of \a sourceText, optionally based on a
     \a disambiguation string and value of \a n for strings containing plurals;
@@ -1460,7 +1460,7 @@ v8::Handle<v8::Value> qsTr(const v8::Arguments &args)
 }
 
 /*!
-    \qmlmethod string QT_TR_NOOP(string sourceText, string disambiguation)
+    \qmlmethod string Qt::qsTrNoOp(string sourceText, string disambiguation)
 
     Marks \a sourceText for dynamic translation; i.e, the stored \a sourceText
     will not be altered.
@@ -1489,7 +1489,7 @@ v8::Handle<v8::Value> qsTrNoOp(const v8::Arguments &args)
 }
 
 /*!
-    \qmlmethod string qsTrId(string id, int n)
+    \qmlmethod string Qt::qsTrId(string id, int n)
 
     Returns a translated string identified by \a id.
     If no matching string is found, the id itself is returned. This
@@ -1536,7 +1536,7 @@ v8::Handle<v8::Value> qsTrId(const v8::Arguments &args)
 }
 
 /*!
-    \qmlmethod string QT_TRID_NOOP(string id)
+    \qmlmethod string Qt::qsTrIdNoOp(string id)
 
     Marks \a id for dynamic translation.