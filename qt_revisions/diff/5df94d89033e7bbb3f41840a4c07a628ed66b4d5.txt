diff --git a/examples/demos/samegame/content/BoomBlock.qml b/examples/demos/samegame/content/BoomBlock.qml
index 0e3fff6..b853341 100644
--- a/examples/demos/samegame/content/BoomBlock.qml
+++ b/examples/demos/samegame/content/BoomBlock.qml
@@ -85,7 +85,7 @@ Item {
         }
         anchors.fill: parent
 
-        speed: TargetDirection{targetX: block.width/2; targetY: block.height/2; magnitude: -60; magnitudeVariation: 60}
+        velocity: TargetDirection{targetX: block.width/2; targetY: block.height/2; magnitude: -60; magnitudeVariation: 60}
         shape: EllipseShape{fill:true}
         enabled: false;
         lifeSpan: 700; lifeSpanVariation: 100
diff --git a/examples/particles/affectors/content/age.qml b/examples/particles/affectors/content/age.qml
index ba52ce2..bcc35a3 100644
--- a/examples/particles/affectors/content/age.qml
+++ b/examples/particles/affectors/content/age.qml
@@ -64,7 +64,7 @@ Rectangle {
         system: particles
         emitRate: 20
         lifeSpan: 8000
-        speed: PointDirection { y:80; yVariation: 40; }
+        velocity: PointDirection { y:80; yVariation: 40; }
         acceleration: PointDirection { y: 4 }
         size: 36
         endSize: 12
diff --git a/examples/particles/affectors/content/attractor.qml b/examples/particles/affectors/content/attractor.qml
index 16a553f..71e66a0 100644
--- a/examples/particles/affectors/content/attractor.qml
+++ b/examples/particles/affectors/content/attractor.qml
@@ -58,7 +58,7 @@ Rectangle {
         enabled: true
         size: 30
         sizeVariation: 10
-        speed: PointDirection { x: 220; xVariation: 40 }
+        velocity: PointDirection { x: 220; xVariation: 40 }
         height: parent.height
     }
     Emitter {
@@ -69,7 +69,7 @@ Rectangle {
         enabled: true
         size: 30
         sizeVariation: 10
-        speed: PointDirection { x: 220; xVariation: 40 }
+        velocity: PointDirection { x: 220; xVariation: 40 }
         height: parent.height
     }
     ParticleSystem {
@@ -178,7 +178,7 @@ Rectangle {
         size: 10
         endSize: 4
         sizeVariation: 4
-        speed: PointDirection { x: -128; xVariation: 32 }
+        velocity: PointDirection { x: -128; xVariation: 32 }
         height: ship.height
         y: ship.y
         x: ship.x
@@ -191,7 +191,7 @@ Rectangle {
         lifeSpan: 1000
         enabled: true
         size: 40
-        speed: PointDirection { x: 256; }
+        velocity: PointDirection { x: 256; }
         x: ship.x + ship.width
         y: ship.y + ship.height/2
     }
diff --git a/examples/particles/affectors/content/customaffector.qml b/examples/particles/affectors/content/customaffector.qml
index 2abb72d..8f634fb 100644
--- a/examples/particles/affectors/content/customaffector.qml
+++ b/examples/particles/affectors/content/customaffector.qml
@@ -58,7 +58,7 @@ Item {
         emitRate: 4
         lifeSpan: 14000
         size: 80
-        speed: PointDirection { y: 60 }
+        velocity: PointDirection { y: 60 }
     }
     Wander {
         system: sys
@@ -72,7 +72,7 @@ Item {
     Affector {
         system: sys
         property real coefficient: 0.1
-        property real speed: 1.5
+        property real velocity: 1.5
         width: parent.width
         height: parent.height - 100
         onAffectParticles: {
@@ -80,11 +80,11 @@ Item {
             if (particle.r == 0) {
                 particle.r = Math.random() > 0.5 ? -1 : 1;
             }else if (particle.r == 1) {
-                particle.rotation += speed * dt;
+                particle.rotation += velocity * dt;
                 if(particle.rotation >= maxAngle)
                     particle.r = -1;
             }else if (particle.r == -1) {
-                particle.rotation -= speed * dt;
+                particle.rotation -= velocity * dt;
                 if(particle.rotation <= -1 * maxAngle)
                     particle.r = 1;
             }
@@ -95,7 +95,7 @@ Item {
                 if (particle.r == 0.0) {
                     particle.r = Math.random() + 0.01;
                 }
-                particle.rotation += speed * particle.r * dt;
+                particle.rotation += velocity * particle.r * dt;
                 particle.r -= particle.rotation * coefficient;
                 if (particle.r == 0.0)
                     particle.r -= particle.rotation * 0.000001;
diff --git a/examples/particles/affectors/content/friction.qml b/examples/particles/affectors/content/friction.qml
index 951ffae..bed1cf2 100644
--- a/examples/particles/affectors/content/friction.qml
+++ b/examples/particles/affectors/content/friction.qml
@@ -56,7 +56,7 @@ Item {
         emitRate: 4
         lifeSpan: 14000
         size: 80
-        speed: PointDirection { y: 160; yVariation: 80; xVariation: 20 }
+        velocity: PointDirection { y: 160; yVariation: 80; xVariation: 20 }
     }
 
     ImageParticle {
diff --git a/examples/particles/affectors/content/groupgoal.qml b/examples/particles/affectors/content/groupgoal.qml
index e874c78..977097d 100644
--- a/examples/particles/affectors/content/groupgoal.qml
+++ b/examples/particles/affectors/content/groupgoal.qml
@@ -111,7 +111,7 @@ Rectangle {
                 emitWidth: 16
                 emitHeight: 16
 
-                speed: PointDirection {yVariation: 16; xVariation: 16}
+                velocity: PointDirection {yVariation: 16; xVariation: 16}
                 acceleration: PointDirection {y: -16}
 
                 size: 24
@@ -152,7 +152,7 @@ Rectangle {
             lifeSpan: 4000//TODO: Infinite & kill zone
             size: 24
             sizeVariation: 4
-            speed: PointDirection {x:120; xVariation: 80; yVariation: 50}
+            velocity: PointDirection {x:120; xVariation: 80; yVariation: 50}
             acceleration: PointDirection {y:120}
             group: "unlit"
         }
@@ -167,7 +167,7 @@ Rectangle {
             size: 24
             sizeVariation: 2
             endSize: 0
-            speed: PointDirection { y:-100; yVariation: 4; xVariation: 4 }
+            velocity: PointDirection { y:-100; yVariation: 4; xVariation: 4 }
             // ![groupgoal-pilot]
             GroupGoal {
                 groups: ["unlit"]
diff --git a/examples/particles/affectors/content/move.qml b/examples/particles/affectors/content/move.qml
index 8ffe8e2..d50def5 100644
--- a/examples/particles/affectors/content/move.qml
+++ b/examples/particles/affectors/content/move.qml
@@ -61,7 +61,7 @@ Rectangle {
             lifeSpan: 2800
             size: 32
             sizeVariation: 8
-            speed: PointDirection{ x: 66; xVariation: 20 }
+            velocity: PointDirection{ x: 66; xVariation: 20 }
             width: 80
             height: 80
         }
@@ -91,7 +91,7 @@ Rectangle {
             lifeSpan: 2800
             size: 32
             sizeVariation: 8
-            speed: PointDirection{ x: 240; xVariation: 60 }
+            velocity: PointDirection{ x: 240; xVariation: 60 }
             y: 260
             width: 10
             height: 10
@@ -105,7 +105,7 @@ Rectangle {
             width: 80
             height: 80
             once: true
-            speed: AngleDirection { angleVariation:360; magnitude: 72 }
+            velocity: AngleDirection { angleVariation:360; magnitude: 72 }
         }
         //! [B]
 
@@ -124,7 +124,7 @@ Rectangle {
             lifeSpan: 2800
             size: 32
             sizeVariation: 8
-            speed: PointDirection{ x: 80; xVariation: 10 }
+            velocity: PointDirection{ x: 80; xVariation: 10 }
             acceleration: PointDirection { y: 10; x: 20; }
             width: 80
             height: 80
diff --git a/examples/particles/affectors/content/spritegoal.qml b/examples/particles/affectors/content/spritegoal.qml
index 21aa859..0e5d94c 100644
--- a/examples/particles/affectors/content/spritegoal.qml
+++ b/examples/particles/affectors/content/spritegoal.qml
@@ -81,7 +81,7 @@ Item {
 
         anchors.centerIn: parent
 
-        //acceleration: AngledDirection {angleVariation: 360; magnitude: 200}//Is this a better effect, more consistent speed?
+        //acceleration: AngledDirection {angleVariation: 360; magnitude: 200}//Is this a better effect, more consistent velocity?
         acceleration: PointDirection { xVariation: 200; yVariation: 200; }
 
         size: 0
@@ -203,8 +203,8 @@ Item {
         y: holder.y
         x: holder.x 
 
-        speed: PointDirection { xVariation: 40; yVariation: 40; }
-        speedFromMovement: 16
+        velocity: PointDirection { xVariation: 40; yVariation: 40; }
+        velocityFromMovement: 16
 
         acceleration: PointDirection { xVariation: 10; yVariation: 10; }
 
diff --git a/examples/particles/affectors/content/turbulence.qml b/examples/particles/affectors/content/turbulence.qml
index 823a37e..62231e1 100644
--- a/examples/particles/affectors/content/turbulence.qml
+++ b/examples/particles/affectors/content/turbulence.qml
@@ -100,7 +100,7 @@ Rectangle {
         endSize: 10
         sizeVariation: 10
         acceleration: PointDirection { y: -40 }
-        speed: AngleDirection { angle: 270; magnitude: 20; angleVariation: 22; magnitudeVariation: 5 }
+        velocity: AngleDirection { angle: 270; magnitude: 20; angleVariation: 22; magnitudeVariation: 5 }
     }
     TrailEmitter {
         id: smoke1
@@ -117,7 +117,7 @@ Rectangle {
         endSize: 8
         sizeVariation: 8
         acceleration: PointDirection { y: -40 }
-        speed: AngleDirection { angle: 270; magnitude: 40; angleVariation: 22; magnitudeVariation: 5 }
+        velocity: AngleDirection { angle: 270; magnitude: 40; angleVariation: 22; magnitudeVariation: 5 }
     }
     TrailEmitter {
         id: smoke2
@@ -133,6 +133,6 @@ Rectangle {
         endSize: 24
         sizeVariation: 12
         acceleration: PointDirection { y: -40 }
-        speed: AngleDirection { angle: 270; magnitude: 40; angleVariation: 22; magnitudeVariation: 5 }
+        velocity: AngleDirection { angle: 270; magnitude: 40; angleVariation: 22; magnitudeVariation: 5 }
     }
 }
diff --git a/examples/particles/affectors/content/wander.qml b/examples/particles/affectors/content/wander.qml
index 649bfc0..931f3ab 100644
--- a/examples/particles/affectors/content/wander.qml
+++ b/examples/particles/affectors/content/wander.qml
@@ -71,7 +71,7 @@ Rectangle {
         system: particles
         emitRate: 20
         lifeSpan: 7000
-        speed: PointDirection { y:80; yVariation: 40; }
+        velocity: PointDirection { y:80; yVariation: 40; }
         acceleration: PointDirection { y: 4 }
         size: 20
         sizeVariation: 10
diff --git a/examples/particles/customparticle/blurparticles.qml b/examples/particles/customparticle/blurparticles.qml
index 3d72425..9b432e0 100644
--- a/examples/particles/customparticle/blurparticles.qml
+++ b/examples/particles/customparticle/blurparticles.qml
@@ -53,7 +53,7 @@ Rectangle {
         height: parent.height
         emitRate: 1
         lifeSpan: 12000
-        speed: PointDirection {x:20;}
+        velocity: PointDirection {x:20;}
         size: 128
     }
     ShaderEffectSource {
diff --git a/examples/particles/customparticle/fragmentshader.qml b/examples/particles/customparticle/fragmentshader.qml
index 34acb1b..367cc99 100644
--- a/examples/particles/customparticle/fragmentshader.qml
+++ b/examples/particles/customparticle/fragmentshader.qml
@@ -63,7 +63,7 @@ ParticleSystem {
         lifeSpan: 8000
         size: 24
         sizeVariation: 16
-        speed: PointDirection {x: root.width/10; y: root.height/10;}
+        velocity: PointDirection {x: root.width/10; y: root.height/10;}
         //acceleration: AngledDirection {angle:225; magnitude: root.width/36; angleVariation: 45; magnitudeVariation: 80}
         acceleration: PointDirection {x: -root.width/40; y: -root.height/40; xVariation: -root.width/20; yVariation: -root.width/20}
     }
@@ -88,7 +88,7 @@ ParticleSystem {
 
                 highp vec2 pos = qt_ParticlePos
                 - currentSize / 2. + currentSize * qt_ParticleTex          // adjust size
-                + qt_ParticleVec.xy * t * qt_ParticleData.y         // apply speed vector..
+                + qt_ParticleVec.xy * t * qt_ParticleData.y         // apply velocity vector..
                 + 0.5 * qt_ParticleVec.zw * pow(t * qt_ParticleData.y, 2.);
 
                 gl_Position = qt_Matrix * vec4(pos.x, pos.y, 0, 1);
diff --git a/examples/particles/emitters/burstandpulse.qml b/examples/particles/emitters/burstandpulse.qml
index 1b1c2a6..c6d39b5 100644
--- a/examples/particles/emitters/burstandpulse.qml
+++ b/examples/particles/emitters/burstandpulse.qml
@@ -77,7 +77,7 @@ Rectangle {
         emitRate: 2000
         lifeSpan: 2000
         enabled: false
-        speed: AngleDirection{magnitude: 64; angleVariation: 360}
+        velocity: AngleDirection{magnitude: 64; angleVariation: 360}
         size: 24
         sizeVariation: 8
     }
diff --git a/examples/particles/emitters/shapeanddirection.qml b/examples/particles/emitters/shapeanddirection.qml
index 4362342..3d378b8 100644
--- a/examples/particles/emitters/shapeanddirection.qml
+++ b/examples/particles/emitters/shapeanddirection.qml
@@ -74,7 +74,7 @@ Rectangle {
         sizeVariation: 2
         endSize: 0
         shape: EllipseShape {fill: false}
-        speed: TargetDirection {
+        velocity: TargetDirection {
             targetX: root.width/2 
             targetY: root.height/2
             proportionalMagnitude: true
@@ -93,7 +93,7 @@ Rectangle {
         sizeVariation: 2
         endSize: 16
         shape: EllipseShape {fill: false}
-        speed: TargetDirection {
+        velocity: TargetDirection {
             targetX: root.width/2 
             targetY: root.height/2
             proportionalMagnitude: true
diff --git a/examples/particles/emitters/timedgroupchanges.qml b/examples/particles/emitters/timedgroupchanges.qml
index 699e7eb..84e8cc0 100644
--- a/examples/particles/emitters/timedgroupchanges.qml
+++ b/examples/particles/emitters/timedgroupchanges.qml
@@ -64,7 +64,7 @@ Rectangle {
                 lifeSpan: 1000
                 maximumEmitted: 1200
                 size: 8
-                speed: AngleDirection {angle: 270; angleVariation: 45; magnitude: 20; magnitudeVariation: 20;}
+                velocity: AngleDirection {angle: 270; angleVariation: 45; magnitude: 20; magnitudeVariation: 20;}
                 acceleration: PointDirection {y:100; yVariation: 20}
             }
         }
@@ -92,7 +92,7 @@ Rectangle {
             enabled: false
             emitRate: 80
             lifeSpan: 6000
-            speed: PointDirection {y:-100;}
+            velocity: PointDirection {y:-100;}
             size: 32
         }
 
@@ -104,7 +104,7 @@ Rectangle {
             lifeSpan: 1600
             maximumEmitted: 6400
             size: 8
-            speed: CumulativeDirection {
+            velocity: CumulativeDirection {
                 PointDirection {y:-100}
                 AngleDirection {angleVariation: 360; magnitudeVariation: 80;}
             }
diff --git a/examples/particles/emitters/trailemitter.qml b/examples/particles/emitters/trailemitter.qml
index e896329..83b46e2 100644
--- a/examples/particles/emitters/trailemitter.qml
+++ b/examples/particles/emitters/trailemitter.qml
@@ -82,7 +82,7 @@ Rectangle {
         lifeSpan: 3500
 
         acceleration: PointDirection { y: -17; xVariation: 3 }
-        speed: PointDirection {xVariation: 3}
+        velocity: PointDirection {xVariation: 3}
 
         size: 24
         sizeVariation: 8
@@ -100,7 +100,7 @@ Rectangle {
         emitRatePerParticle: 1
         lifeSpan: 2000
 
-        speed: PointDirection {y:-17*6; yVariation: -17; xVariation: 3}
+        velocity: PointDirection {y:-17*6; yVariation: -17; xVariation: 3}
         acceleration: PointDirection {xVariation: 3}
 
         size: 36
@@ -139,7 +139,7 @@ Rectangle {
         emitHeight: TrailEmitter.ParticleSize
         emitShape: EllipseShape{}
 
-        speed: PointDirection {yVariation: 16; xVariation: 16}
+        velocity: PointDirection {yVariation: 16; xVariation: 16}
         acceleration: PointDirection {y: -16}
 
         size: 24
@@ -158,7 +158,7 @@ Rectangle {
         emitRate: 2
         lifeSpan: 7000
 
-        speed: PointDirection {y:-17*4*2; xVariation: 6*6}
+        velocity: PointDirection {y:-17*4*2; xVariation: 6*6}
         acceleration: PointDirection {y: 17*2; xVariation: 6*6}
 
         size: 8
diff --git a/examples/particles/emitters/velocityfrommotion.qml b/examples/particles/emitters/velocityfrommotion.qml
index 7ad2b4d..ffca3c1 100644
--- a/examples/particles/emitters/velocityfrommotion.qml
+++ b/examples/particles/emitters/velocityfrommotion.qml
@@ -100,9 +100,9 @@ Rectangle {
         y: mouseArea.pressed ? mouseArea.mouseY : circle.cy
         x: mouseArea.pressed ? mouseArea.mouseX : circle.cx
 
-        speed: PointDirection {xVariation: 4; yVariation: 4;}
+        velocity: PointDirection {xVariation: 4; yVariation: 4;}
         acceleration: PointDirection {xVariation: 10; yVariation: 10;}
-        speedFromMovement: 8
+        velocityFromMovement: 8
 
         size: 8
         sizeVariation: 4
@@ -139,9 +139,9 @@ Rectangle {
         y: mouseArea.pressed ? mouseArea.mouseY : circle.cy
         x: mouseArea.pressed ? mouseArea.mouseX : circle.cx
 
-        speed: PointDirection {xVariation: 4; yVariation: 4;}
+        velocity: PointDirection {xVariation: 4; yVariation: 4;}
         acceleration: PointDirection {xVariation: 10; yVariation: 10;}
-        speedFromMovement: 8
+        velocityFromMovement: 8
 
         size: 22
         sizeVariation: 4
@@ -179,9 +179,9 @@ Rectangle {
         y: mouseArea.pressed ? mouseArea.mouseY : circle2.cy
         x: mouseArea.pressed ? mouseArea.mouseX : circle2.cx
 
-        speedFromMovement: 16
+        velocityFromMovement: 16
 
-        speed: PointDirection {xVariation: 4; yVariation: 4;}
+        velocity: PointDirection {xVariation: 4; yVariation: 4;}
         acceleration: PointDirection {xVariation: 10; yVariation: 10;}
 
         size: 12
@@ -220,8 +220,8 @@ Rectangle {
         y: mouseArea.pressed ? mouseArea.mouseY : circle2.cy
         x: mouseArea.pressed ? mouseArea.mouseX : circle2.cx
 
-        speedFromMovement: 16
-        speed: PointDirection {xVariation: 2; yVariation: 2;}
+        velocityFromMovement: 16
+        velocity: PointDirection {xVariation: 2; yVariation: 2;}
         acceleration: PointDirection {xVariation: 10; yVariation: 10;}
 
         size: 22
diff --git a/examples/particles/imageparticle/allatonce.qml b/examples/particles/imageparticle/allatonce.qml
index b62735d..cedc17d 100644
--- a/examples/particles/imageparticle/allatonce.qml
+++ b/examples/particles/imageparticle/allatonce.qml
@@ -59,7 +59,7 @@ Rectangle {
             }
         ]
         colorVariation: 0.5
-        rotationSpeedVariation: 360
+        rotationVelocityVariation: 360
         system: sys
         colorTable: "../trails/../images/colortable.png"
     }
@@ -75,7 +75,7 @@ Rectangle {
         id: particles
         emitRate: 200
         lifeSpan: 6000
-        speed: AngleDirection {angleVariation: 360; magnitude: 80; magnitudeVariation: 40}
+        velocity: AngleDirection {angleVariation: 360; magnitude: 80; magnitudeVariation: 40}
         size: 60
         endSize: 120
     }
diff --git a/examples/particles/imageparticle/colored.qml b/examples/particles/imageparticle/colored.qml
index ac760b6..8ae9a8e 100644
--- a/examples/particles/imageparticle/colored.qml
+++ b/examples/particles/imageparticle/colored.qml
@@ -75,7 +75,7 @@ Rectangle {
             lifeSpan: 2400
             size: 48
             sizeVariation: 8
-            speed: AngleDirection {angleVariation: 180; magnitude: 60}
+            velocity: AngleDirection {angleVariation: 180; magnitude: 60}
         }
 
         Turbulence {
diff --git a/examples/particles/imageparticle/colortable.qml b/examples/particles/imageparticle/colortable.qml
index 623029d..e7c9b5c 100644
--- a/examples/particles/imageparticle/colortable.qml
+++ b/examples/particles/imageparticle/colortable.qml
@@ -72,9 +72,9 @@ Rectangle {
             from: 0; to: Math.PI * 2; duration: 10000; loops: Animation.Infinite
         }
 
-        speedFromMovement: 20
+        velocityFromMovement: 20
 
-        speed: PointDirection { xVariation: 5; yVariation: 5;}
+        velocity: PointDirection { xVariation: 5; yVariation: 5;}
         acceleration: PointDirection { xVariation: 5; yVariation: 5;}
 
         size: 16
diff --git a/examples/particles/imageparticle/deformation.qml b/examples/particles/imageparticle/deformation.qml
index e282927..0fca37e 100644
--- a/examples/particles/imageparticle/deformation.qml
+++ b/examples/particles/imageparticle/deformation.qml
@@ -52,7 +52,7 @@ Rectangle {
         groups: ["goingLeft", "goingRight"]
         source: "../images/starfish_4.png"
         rotation: 90
-        rotationSpeed: 90
+        rotationVelocity: 90
         autoRotation: true
     }
     ImageParticle {
@@ -89,7 +89,7 @@ Rectangle {
         system: sys
         enabled: false
         group: "goingRight"
-        speed: PointDirection { x: 100 }
+        velocity: PointDirection { x: 100 }
         lifeSpan: 4000
         emitRate: 1
         size: 128
@@ -101,7 +101,7 @@ Rectangle {
         system: sys
         enabled: false
         group: "goingLeft"
-        speed: PointDirection { x: -100 }
+        velocity: PointDirection { x: -100 }
         lifeSpan: 4000
         emitRate: 1
         size: 128
@@ -113,7 +113,7 @@ Rectangle {
         system: sys
         enabled: false
         group: "goingDown"
-        speed: PointDirection { x: 100 }
+        velocity: PointDirection { x: 100 }
         lifeSpan: 4000
         emitRate: 1
         size: 128
diff --git a/examples/particles/imageparticle/rotation.qml b/examples/particles/imageparticle/rotation.qml
index 3a75c37..34e063b 100644
--- a/examples/particles/imageparticle/rotation.qml
+++ b/examples/particles/imageparticle/rotation.qml
@@ -58,7 +58,7 @@ Rectangle {
         emitRate: 10
         size: 200
         lifeSpan: 10000
-        speed: AngleDirection {angleVariation: 360; magnitudeVariation: 100;}
+        velocity: AngleDirection {angleVariation: 360; magnitudeVariation: 100;}
     }
 
     MouseArea {
diff --git a/examples/particles/imageparticle/sharing.qml b/examples/particles/imageparticle/sharing.qml
index 27e0832..d1a516f 100644
--- a/examples/particles/imageparticle/sharing.qml
+++ b/examples/particles/imageparticle/sharing.qml
@@ -122,7 +122,7 @@ Rectangle {
             lifeSpan: 10000
             size: 24
             sizeVariation: 8
-            speed: AngleDirection { angleVariation: 360; magnitude: 3 }
+            velocity: AngleDirection { angleVariation: 360; magnitude: 3 }
             maximumEmitted: 10
             startTime: 5000
         }
diff --git a/examples/particles/imageparticle/sprites.qml b/examples/particles/imageparticle/sprites.qml
index 45ff2eb..1e5aaa0 100644
--- a/examples/particles/imageparticle/sprites.qml
+++ b/examples/particles/imageparticle/sprites.qml
@@ -98,7 +98,7 @@ Rectangle {
         system: sys
         emitRate: 2
         lifeSpan: 10000
-        speed: AngleDirection {angle: 90; magnitude: 60; angleVariation: 5}
+        velocity: AngleDirection {angle: 90; magnitude: 60; angleVariation: 5}
         acceleration: PointDirection { y: 10 }
         size: 160
         sizeVariation: 40
diff --git a/examples/particles/itemparticle/delegates.qml b/examples/particles/itemparticle/delegates.qml
index 58734d3..6df9539 100644
--- a/examples/particles/itemparticle/delegates.qml
+++ b/examples/particles/itemparticle/delegates.qml
@@ -77,7 +77,7 @@ Rectangle {
             emitRate: 1
             lifeSpan: 4800
             lifeSpanVariation: 1600
-            speed: AngleDirection {angleVariation: 360; magnitude: 40; magnitudeVariation: 20}
+            velocity: AngleDirection {angleVariation: 360; magnitude: 40; magnitudeVariation: 20}
         }
         ItemParticle {
             delegate: Text {
diff --git a/examples/particles/itemparticle/particleview.qml b/examples/particles/itemparticle/particleview.qml
index 774539a..1679c01 100644
--- a/examples/particles/itemparticle/particleview.qml
+++ b/examples/particles/itemparticle/particleview.qml
@@ -72,7 +72,7 @@ Item {
         height: parent.height - 132/2
         x: -132/2
         y: 132/2
-        speed: PointDirection { x: 32; xVariation: 8 }
+        velocity: PointDirection { x: 32; xVariation: 8 }
         emitRate: 0.5
         lifeSpan: Emitter.InfiniteLife
         group: "photos"
@@ -160,7 +160,7 @@ Item {
     }
     Emitter {
         id: centerEmitter
-        speed: PointDirection { x: 32; xVariation: 8;}
+        velocity: PointDirection { x: 32; xVariation: 8;}
         emitRate: 0.5
         lifeSpan: 12000 //TODO: A -1 or something which does 'infinite'? (but need disable fade first)
         maximumEmitted: 20
@@ -185,7 +185,7 @@ Item {
         enabled: false
         size: 32
         endSize: 8
-        speed: AngleDirection { magnitude: 160; magnitudeVariation: 120; angleVariation: 90; angle: 270 }
+        velocity: AngleDirection { magnitude: 160; magnitudeVariation: 120; angleVariation: 90; angle: 270 }
         acceleration: PointDirection { y: 160 }
     }
     Item { x: -1000; y: -1000 //offscreen
diff --git a/examples/particles/simple/dynamiccomparison.qml b/examples/particles/simple/dynamiccomparison.qml
index a7cdb9b..d244e0e 100644
--- a/examples/particles/simple/dynamiccomparison.qml
+++ b/examples/particles/simple/dynamiccomparison.qml
@@ -63,7 +63,7 @@ Rectangle {
         id: emitter
         system: sys
         width: parent.width/2
-        speed: PointDirection {y: 72; yVariation: 24}
+        velocity: PointDirection {y: 72; yVariation: 24}
         lifeSpan: 10000
         emitRate: 1000
         enabled: false
diff --git a/examples/particles/simple/dynamicemitters.qml b/examples/particles/simple/dynamicemitters.qml
index 4431ebe..8f007f3 100644
--- a/examples/particles/simple/dynamicemitters.qml
+++ b/examples/particles/simple/dynamicemitters.qml
@@ -68,7 +68,7 @@ Rectangle {
                 lifeSpan: 600
                 size: 16
                 endSize: 8
-                speed: AngleDirection {angleVariation:360; magnitude: 60}
+                velocity: AngleDirection {angleVariation:360; magnitude: 60}
             }
 
             property int life: 2600
diff --git a/examples/particles/simple/multiplepainters.qml b/examples/particles/simple/multiplepainters.qml
index c1b85ca..62a2548 100644
--- a/examples/particles/simple/multiplepainters.qml
+++ b/examples/particles/simple/multiplepainters.qml
@@ -61,7 +61,7 @@ Rectangle {
         emitRate: 200
         lifeSpan: 4000
         startTime: 4000
-        speed: PointDirection { y: -120; }
+        velocity: PointDirection { y: -120; }
     }
 
     ImageParticle {
diff --git a/examples/quick/touchinteraction/multipointtouch/content/BearWhackParticleSystem.qml b/examples/quick/touchinteraction/multipointtouch/content/BearWhackParticleSystem.qml
index bed03e9..e6bd7bf 100644
--- a/examples/quick/touchinteraction/multipointtouch/content/BearWhackParticleSystem.qml
+++ b/examples/quick/touchinteraction/multipointtouch/content/BearWhackParticleSystem.qml
@@ -63,7 +63,7 @@ ParticleSystem {
         lifeSpan: 4000 + 800*(16-emitRate)
         maximumEmitted: 128
         size: 64
-        speed: PointDirection{ y: 40 + 10 * emitter.emitRate }
+        velocity: PointDirection{ y: 40 + 10 * emitter.emitRate }
     }
 
     Emitter {
@@ -74,7 +74,7 @@ ParticleSystem {
         emitRate: 1000
         size: 16
         endSize: 8
-        speed: CumulativeDirection { AngleDirection {angleVariation: 180; magnitudeVariation: 120;} PointDirection { y: -60 }}
+        velocity: CumulativeDirection { AngleDirection {angleVariation: 180; magnitudeVariation: 120;} PointDirection { y: -60 }}
         lifeSpan: 400
     }
     Emitter {
@@ -85,7 +85,7 @@ ParticleSystem {
         emitRate: 1000
         size: 16
         endSize: 8
-        speed: AngleDirection {angleVariation: 180; magnitudeVariation: 180;}
+        velocity: AngleDirection {angleVariation: 180; magnitudeVariation: 180;}
         lifeSpan: 600
     }
     Emitter {
@@ -96,7 +96,7 @@ ParticleSystem {
         emitRate: 1000
         size: 16
         endSize: 8
-        speed: CumulativeDirection { AngleDirection {angleVariation: 180; magnitudeVariation: 80;} PointDirection { y: 40 }}
+        velocity: CumulativeDirection { AngleDirection {angleVariation: 180; magnitudeVariation: 80;} PointDirection { y: 40 }}
         lifeSpan: 600
     }
 
diff --git a/examples/quick/touchinteraction/multipointtouch/content/ParticleFlame.qml b/examples/quick/touchinteraction/multipointtouch/content/ParticleFlame.qml
index 9788c5c..7b32aa6 100644
--- a/examples/quick/touchinteraction/multipointtouch/content/ParticleFlame.qml
+++ b/examples/quick/touchinteraction/multipointtouch/content/ParticleFlame.qml
@@ -53,10 +53,10 @@ ParticleSystem {
     }
     Emitter {
         id: emitter
-        speedFromMovement: 20
+        velocityFromMovement: 20
         emitRate: 80
         lifeSpan: 1500
-        speed: PointDirection{ y: -90; yVariation: 50; }
+        velocity: PointDirection{ y: -90; yVariation: 50; }
         acceleration: PointDirection{ xVariation: 100; yVariation: 90; }
         size: 51
         sizeVariation: 53
diff --git a/src/particles/qquickcustomaffector.cpp b/src/particles/qquickcustomaffector.cpp
index 819dd12..219da82 100644
--- a/src/particles/qquickcustomaffector.cpp
+++ b/src/particles/qquickcustomaffector.cpp
@@ -71,9 +71,9 @@ QT_BEGIN_NAMESPACE
 */
 
 /*!
-    \qmlproperty StochasticDirection QtQuick.Particles2::Affector::speed
+    \qmlproperty StochasticDirection QtQuick.Particles2::Affector::velocity
 
-    Affected particles will have their speed set to this direction.
+    Affected particles will have their velocity set to this direction.
 */
 
 
@@ -87,7 +87,7 @@ QT_BEGIN_NAMESPACE
 /*!
     \qmlproperty bool QtQuick.Particles2::Affector::relative
 
-    Whether the affected particles have their existing position/speed/acceleration added
+    Whether the affected particles have their existing position/velocity/acceleration added
     to the new one.
 
     Default is true.
@@ -95,7 +95,7 @@ QT_BEGIN_NAMESPACE
 QQuickCustomAffector::QQuickCustomAffector(QQuickItem *parent) :
     QQuickParticleAffector(parent)
     , m_position(&m_nullVector)
-    , m_speed(&m_nullVector)
+    , m_velocity(&m_nullVector)
     , m_acceleration(&m_nullVector)
     , m_relative(true)
 {
@@ -110,7 +110,7 @@ void QQuickCustomAffector::affectSystem(qreal dt)
 {
     //Acts a bit differently, just emits affected for everyone it might affect, when the only thing is connecting to affected(x,y)
     bool justAffected = (m_acceleration == &m_nullVector
-        && m_speed == &m_nullVector
+        && m_velocity == &m_nullVector
         && m_position == &m_nullVector
         && isAffectedConnected());
     if (!isAffectConnected() && !justAffected) {
@@ -193,8 +193,8 @@ bool QQuickCustomAffector::affectParticle(QQuickParticleData *d, qreal dt)
         }
     }
 
-    if (m_speed != &m_nullVector){
-        QPointF pos = m_speed->sample(curPos);
+    if (m_velocity != &m_nullVector){
+        QPointF pos = m_velocity->sample(curPos);
         QPointF curVel = QPointF(d->curVX(), d->curVY());
         if (m_relative) {
             pos *= dt;
diff --git a/src/particles/qquickcustomaffector_p.h b/src/particles/qquickcustomaffector_p.h
index 1266830..7412190 100644
--- a/src/particles/qquickcustomaffector_p.h
+++ b/src/particles/qquickcustomaffector_p.h
@@ -57,7 +57,7 @@ class QQuickCustomAffector : public QQuickParticleAffector
     Q_OBJECT
     Q_PROPERTY(bool relative READ relative WRITE setRelative NOTIFY relativeChanged)
     Q_PROPERTY(QQuickDirection *position READ position WRITE setPosition NOTIFY positionChanged RESET positionReset)
-    Q_PROPERTY(QQuickDirection *speed READ speed WRITE setSpeed NOTIFY speedChanged RESET speedReset)
+    Q_PROPERTY(QQuickDirection *velocity READ velocity WRITE setVelocity NOTIFY velocityChanged RESET velocityReset)
     Q_PROPERTY(QQuickDirection *acceleration READ acceleration WRITE setAcceleration NOTIFY accelerationChanged RESET accelerationReset)
 
 public:
@@ -69,9 +69,9 @@ public:
         return m_position;
     }
 
-    QQuickDirection * speed() const
+    QQuickDirection * velocity() const
     {
-        return m_speed;
+        return m_velocity;
     }
 
     QQuickDirection * acceleration() const
@@ -84,9 +84,9 @@ public:
         m_position = &m_nullVector;
     }
 
-    void speedReset()
+    void velocityReset()
     {
-        m_speed = &m_nullVector;
+        m_velocity = &m_nullVector;
     }
 
     void accelerationReset()
@@ -105,7 +105,7 @@ signals:
 
     void positionChanged(QQuickDirection * arg);
 
-    void speedChanged(QQuickDirection * arg);
+    void velocityChanged(QQuickDirection * arg);
 
     void accelerationChanged(QQuickDirection * arg);
 
@@ -120,11 +120,11 @@ public slots:
         }
     }
 
-    void setSpeed(QQuickDirection * arg)
+    void setVelocity(QQuickDirection * arg)
     {
-        if (m_speed != arg) {
-            m_speed = arg;
-            emit speedChanged(arg);
+        if (m_velocity != arg) {
+            m_velocity = arg;
+            emit velocityChanged(arg);
         }
     }
 
@@ -150,7 +150,7 @@ protected:
 private:
     void affectProperties(const QList<QQuickParticleData*> particles, qreal dt);
     QQuickDirection * m_position;
-    QQuickDirection * m_speed;
+    QQuickDirection * m_velocity;
     QQuickDirection * m_acceleration;
 
     QQuickDirection m_nullVector;
diff --git a/src/particles/qquickcustomparticle.cpp b/src/particles/qquickcustomparticle.cpp
index eeb830c..777237a 100644
--- a/src/particles/qquickcustomparticle.cpp
+++ b/src/particles/qquickcustomparticle.cpp
@@ -50,7 +50,7 @@ static const char qt_particles_template_vertex_code[] =
         "attribute highp vec2 qt_ParticlePos;\n"
         "attribute highp vec2 qt_ParticleTex;\n"
         "attribute highp vec4 qt_ParticleData; //  x = time,  y = lifeSpan, z = size,  w = endSize\n"
-        "attribute highp vec4 qt_ParticleVec; // x,y = constant speed,  z,w = acceleration\n"
+        "attribute highp vec4 qt_ParticleVec; // x,y = constant velocity,  z,w = acceleration\n"
         "attribute highp float qt_ParticleR;\n"
         "uniform highp mat4 qt_Matrix;\n"
         "uniform highp float qt_Timestamp;\n"
@@ -65,7 +65,7 @@ static const char qt_particles_template_vertex_code[] =
         "        currentSize = 0.;\n"
         "    highp vec2 pos = qt_ParticlePos\n"
         "                   - currentSize / 2. + currentSize * qt_ParticleTex   // adjust size\n"
-        "                   + qt_ParticleVec.xy * t * qt_ParticleData.y         // apply speed vector..\n"
+        "                   + qt_ParticleVec.xy * t * qt_ParticleData.y         // apply velocity vector..\n"
         "                   + 0.5 * qt_ParticleVec.zw * pow(t * qt_ParticleData.y, 2.);\n"
         "    gl_Position = qt_Matrix * vec4(pos.x, pos.y, 0, 1);\n"
         "}";
@@ -194,7 +194,7 @@ void QQuickCustomParticle::setFragmentShader(const QByteArray &code)
         attribute highp vec2 qt_ParticlePos;
         attribute highp vec2 qt_ParticleTex;
         attribute highp vec4 qt_ParticleData; //  x = time,  y = lifeSpan, z = size,  w = endSize
-        attribute highp vec4 qt_ParticleVec; // x,y = constant speed,  z,w = acceleration
+        attribute highp vec4 qt_ParticleVec; // x,y = constant velocity,  z,w = acceleration
         attribute highp float qt_ParticleR;
         uniform highp mat4 qt_Matrix;
         uniform highp float qt_Timestamp;
@@ -209,7 +209,7 @@ void QQuickCustomParticle::setFragmentShader(const QByteArray &code)
                 currentSize = 0.;
             highp vec2 pos = qt_ParticlePos
                            - currentSize / 2. + currentSize * qt_ParticleTex   // adjust size
-                           + qt_ParticleVec.xy * t * qt_ParticleData.y         // apply speed vector..
+                           + qt_ParticleVec.xy * t * qt_ParticleData.y         // apply velocity vector..
                            + 0.5 * qt_ParticleVec.zw * pow(t * qt_ParticleData.y, 2.);
             gl_Position = qt_Matrix * vec4(pos.x, pos.y, 0, 1);
         }
diff --git a/src/particles/qquickfriction.cpp b/src/particles/qquickfriction.cpp
index ca12cbe..6a54ea7 100644
--- a/src/particles/qquickfriction.cpp
+++ b/src/particles/qquickfriction.cpp
@@ -46,7 +46,7 @@ QT_BEGIN_NAMESPACE
     \inqmlmodule QtQuick.Particles 2
     \ingroup qtquick-particles
     \inherits Affector
-    \brief For applying friction proportional to the particle's current speed
+    \brief For applying friction proportional to the particle's current velocity
 
 */
 
diff --git a/src/particles/qquickimageparticle.cpp b/src/particles/qquickimageparticle.cpp
index 06e5c75..5803c4b 100644
--- a/src/particles/qquickimageparticle.cpp
+++ b/src/particles/qquickimageparticle.cpp
@@ -74,14 +74,14 @@ static const char vertexShaderCode[] =
     "attribute highp vec2 vPos;\n"
     "#endif\n"
     "attribute highp vec4 vData; //  x = time,  y = lifeSpan, z = size,  w = endSize\n"
-    "attribute highp vec4 vVec; // x,y = constant speed,  z,w = acceleration\n"
+    "attribute highp vec4 vVec; // x,y = constant velocity,  z,w = acceleration\n"
     "uniform highp float entry;\n"
     "#if defined(COLOR)\n"
     "attribute highp vec4 vColor;\n"
     "#endif\n"
     "#if defined(DEFORM)\n"
     "attribute highp vec4 vDeformVec; //x,y x unit vector; z,w = y unit vector\n"
-    "attribute highp vec3 vRotation; //x = radians of rotation, y=rotation speed, z= bool autoRotate\n"
+    "attribute highp vec3 vRotation; //x = radians of rotation, y=rotation velocity, z= bool autoRotate\n"
     "#endif\n"
     "#if defined(SPRITE)\n"
     "attribute highp vec3 vAnimData;// w,h(premultiplied of anim), interpolation progress\n"
@@ -177,11 +177,11 @@ static const char vertexShaderCode[] =
     "            pos = vPosTex.xy\n"
     "                  + rotatedDeform.xy\n"
     "                  + rotatedDeform.zw\n"
-    "                  + vVec.xy * t * vData.y         // apply speed\n"
+    "                  + vVec.xy * t * vData.y         // apply velocity\n"
     "                  + 0.5 * vVec.zw * pow(t * vData.y, 2.); // apply acceleration\n"
     "#else\n"
     "            pos = vPos\n"
-    "                  + vVec.xy * t * vData.y         // apply speed vector..\n"
+    "                  + vVec.xy * t * vData.y         // apply velocity vector..\n"
     "                  + 0.5 * vVec.zw * pow(t * vData.y, 2.);\n"
     "            gl_PointSize = currentSize;\n"
     "#endif\n"
@@ -731,14 +731,14 @@ void fillUniformArrayFromImage(float* array, const QImage& img, int size)
 
 */
 /*!
-    \qmlproperty real QtQuick.Particles2::ImageParticle::rotationSpeed
+    \qmlproperty real QtQuick.Particles2::ImageParticle::rotationVelocity
 
-    If set particles will rotate at this speed in degrees/second.
+    If set particles will rotate at this velocity in degrees/second.
 */
 /*!
-    \qmlproperty real QtQuick.Particles2::ImageParticle::rotationSpeedVariation
+    \qmlproperty real QtQuick.Particles2::ImageParticle::rotationVelocityVariation
 
-    If set the rotationSpeed of individual particles will vary by up to this much
+    If set the rotationVelocity of individual particles will vary by up to this much
     between particles.
 
 */
@@ -812,8 +812,8 @@ QQuickImageParticle::QQuickImageParticle(QQuickItem* parent)
     , m_blueVariation(0.0)
     , m_rotation(0)
     , m_rotationVariation(0)
-    , m_rotationSpeed(0)
-    , m_rotationSpeedVariation(0)
+    , m_rotationVelocity(0)
+    , m_rotationVelocityVariation(0)
     , m_autoRotation(false)
     , m_xVector(0)
     , m_yVector(0)
@@ -1025,22 +1025,22 @@ void QQuickImageParticle::setRotationVariation(qreal arg)
         reset();
 }
 
-void QQuickImageParticle::setRotationSpeed(qreal arg)
+void QQuickImageParticle::setRotationVelocity(qreal arg)
 {
-    if (m_rotationSpeed != arg) {
-        m_rotationSpeed = arg;
-        emit rotationSpeedChanged(arg);
+    if (m_rotationVelocity != arg) {
+        m_rotationVelocity = arg;
+        emit rotationVelocityChanged(arg);
     }
     m_explicitRotation = true;
     if (perfLevel < Deformable)
         reset();
 }
 
-void QQuickImageParticle::setRotationSpeedVariation(qreal arg)
+void QQuickImageParticle::setRotationVelocityVariation(qreal arg)
 {
-    if (m_rotationSpeedVariation != arg) {
-        m_rotationSpeedVariation = arg;
-        emit rotationSpeedVariationChanged(arg);
+    if (m_rotationVelocityVariation != arg) {
+        m_rotationVelocityVariation = arg;
+        emit rotationVelocityVariationChanged(arg);
     }
     m_explicitRotation = true;
     if (perfLevel < Deformable)
@@ -1133,8 +1133,8 @@ void QQuickImageParticle::resetRotation()
                 d->rotationOwner = 0;
     m_rotation = 0;
     m_rotationVariation = 0;
-    m_rotationSpeed = 0;
-    m_rotationSpeedVariation = 0;
+    m_rotationVelocity = 0;
+    m_rotationVelocityVariation = 0;
     m_autoRotation = false;
 }
 
@@ -1324,7 +1324,7 @@ void QQuickImageParticle::finishBuildParticleNodes()
     } else if (m_colorTable || m_sizeTable || m_opacityTable) {
         perfLevel = Tabled;
     } else if (m_autoRotation || m_rotation || m_rotationVariation
-               || m_rotationSpeed || m_rotationSpeedVariation
+               || m_rotationVelocity || m_rotationVelocityVariation
                || m_xVector || m_yVector) {
         perfLevel = Deformable;
     } else if (m_alphaVariation || m_alpha != 1.0 || m_color.isValid() || m_color_variation
@@ -1713,7 +1713,7 @@ void QQuickImageParticle::initialize(int gIdx, int pIdx)
     }
 
     float rotation;
-    float rotationSpeed;
+    float rotationVelocity;
     float autoRotate;
     switch (perfLevel){//Fall-through is intended on all of them
         case Sprites:
@@ -1780,16 +1780,16 @@ void QQuickImageParticle::initialize(int gIdx, int pIdx)
                     datum->rotationOwner = this;
                 rotation =
                         (m_rotation + (m_rotationVariation - 2*((qreal)rand()/RAND_MAX)*m_rotationVariation) ) * CONV;
-                rotationSpeed =
-                        (m_rotationSpeed + (m_rotationSpeedVariation - 2*((qreal)rand()/RAND_MAX)*m_rotationSpeedVariation) ) * CONV;
+                rotationVelocity =
+                        (m_rotationVelocity + (m_rotationVelocityVariation - 2*((qreal)rand()/RAND_MAX)*m_rotationVelocityVariation) ) * CONV;
                 autoRotate = m_autoRotation?1.0:0.0;
                 if (datum->rotationOwner == this) {
                     datum->rotation = rotation;
-                    datum->rotationSpeed = rotationSpeed;
+                    datum->rotationVelocity = rotationVelocity;
                     datum->autoRotate = autoRotate;
                 } else {
                     getShadowDatum(datum)->rotation = rotation;
-                    getShadowDatum(datum)->rotationSpeed = rotationSpeed;
+                    getShadowDatum(datum)->rotationVelocity = rotationVelocity;
                     getShadowDatum(datum)->autoRotate = autoRotate;
                 }
             }
@@ -1855,11 +1855,11 @@ void QQuickImageParticle::commit(int gIdx, int pIdx)
             if (m_explicitRotation && datum->rotationOwner != this) {
                 QQuickParticleData* shadow = getShadowDatum(datum);
                 spriteVertices[i].rotation = shadow->rotation;
-                spriteVertices[i].rotationSpeed = shadow->rotationSpeed;
+                spriteVertices[i].rotationVelocity = shadow->rotationVelocity;
                 spriteVertices[i].autoRotate = shadow->autoRotate;
             } else {
                 spriteVertices[i].rotation = datum->rotation;
-                spriteVertices[i].rotationSpeed = datum->rotationSpeed;
+                spriteVertices[i].rotationVelocity = datum->rotationVelocity;
                 spriteVertices[i].autoRotate = datum->autoRotate;
             }
             //Sprite-related vertices updated per-frame in spritesUpdate(), not on demand
@@ -1906,11 +1906,11 @@ void QQuickImageParticle::commit(int gIdx, int pIdx)
             if (m_explicitRotation && datum->rotationOwner != this) {
                 QQuickParticleData* shadow = getShadowDatum(datum);
                 deformableVertices[i].rotation = shadow->rotation;
-                deformableVertices[i].rotationSpeed = shadow->rotationSpeed;
+                deformableVertices[i].rotationVelocity = shadow->rotationVelocity;
                 deformableVertices[i].autoRotate = shadow->autoRotate;
             } else {
                 deformableVertices[i].rotation = datum->rotation;
-                deformableVertices[i].rotationSpeed = datum->rotationSpeed;
+                deformableVertices[i].rotationVelocity = datum->rotationVelocity;
                 deformableVertices[i].autoRotate = datum->autoRotate;
             }
             if (m_explicitColor && datum->colorOwner != this) {
diff --git a/src/particles/qquickimageparticle_p.h b/src/particles/qquickimageparticle_p.h
index 4db2c98..4a8fc5f 100644
--- a/src/particles/qquickimageparticle_p.h
+++ b/src/particles/qquickimageparticle_p.h
@@ -104,7 +104,7 @@ struct DeformableVertex {
     float yx;
     float yy;
     float rotation;
-    float rotationSpeed;
+    float rotationVelocity;
     float autoRotate;//Assumed that GPUs prefer floats to bools
 };
 
@@ -127,7 +127,7 @@ struct SpriteVertex {
     float yx;
     float yy;
     float rotation;
-    float rotationSpeed;
+    float rotationVelocity;
     float autoRotate;//Assumed that GPUs prefer floats to bools
     float animW;
     float animH;
@@ -172,8 +172,8 @@ class QQuickImageParticle : public QQuickParticlePainter
 
     Q_PROPERTY(qreal rotation READ rotation WRITE setRotation NOTIFY rotationChanged RESET resetRotation)
     Q_PROPERTY(qreal rotationVariation READ rotationVariation WRITE setRotationVariation NOTIFY rotationVariationChanged RESET resetRotation)
-    Q_PROPERTY(qreal rotationSpeed READ rotationSpeed WRITE setRotationSpeed NOTIFY rotationSpeedChanged RESET resetRotation)
-    Q_PROPERTY(qreal rotationSpeedVariation READ rotationSpeedVariation WRITE setRotationSpeedVariation NOTIFY rotationSpeedVariationChanged RESET resetRotation)
+    Q_PROPERTY(qreal rotationVelocity READ rotationVelocity WRITE setRotationVelocity NOTIFY rotationVelocityChanged RESET resetRotation)
+    Q_PROPERTY(qreal rotationVelocityVariation READ rotationVelocityVariation WRITE setRotationVelocityVariation NOTIFY rotationVelocityVariationChanged RESET resetRotation)
     //If true, then will face the direction of motion. Stacks with rotation, e.g. setting rotation
     //to 180 will lead to facing away from the direction of motion
     Q_PROPERTY(bool autoRotation READ autoRotation WRITE setAutoRotation NOTIFY autoRotationChanged RESET resetRotation)
@@ -243,9 +243,9 @@ public:
 
     qreal rotationVariation() const { return m_rotationVariation; }
 
-    qreal rotationSpeed() const { return m_rotationSpeed; }
+    qreal rotationVelocity() const { return m_rotationVelocity; }
 
-    qreal rotationSpeedVariation() const { return m_rotationSpeedVariation; }
+    qreal rotationVelocityVariation() const { return m_rotationVelocityVariation; }
 
     bool autoRotation() const { return m_autoRotation; }
 
@@ -289,9 +289,9 @@ signals:
 
     void rotationVariationChanged(qreal arg);
 
-    void rotationSpeedChanged(qreal arg);
+    void rotationVelocityChanged(qreal arg);
 
-    void rotationSpeedVariationChanged(qreal arg);
+    void rotationVelocityVariationChanged(qreal arg);
 
     void autoRotationChanged(bool arg);
 
@@ -323,9 +323,9 @@ public slots:
 
     void setRotationVariation(qreal arg);
 
-    void setRotationSpeed(qreal arg);
+    void setRotationVelocity(qreal arg);
 
-    void setRotationSpeedVariation(qreal arg);
+    void setRotationVelocityVariation(qreal arg);
 
     void setAutoRotation(bool arg);
 
@@ -388,8 +388,8 @@ private:
     qreal m_blueVariation;
     qreal m_rotation;
     qreal m_rotationVariation;
-    qreal m_rotationSpeed;
-    qreal m_rotationSpeedVariation;
+    qreal m_rotationVelocity;
+    qreal m_rotationVelocityVariation;
     bool m_autoRotation;
     QQuickDirection* m_xVector;
     QQuickDirection* m_yVector;
diff --git a/src/particles/qquickparticleemitter.cpp b/src/particles/qquickparticleemitter.cpp
index 7db1707..72aa0a6 100644
--- a/src/particles/qquickparticleemitter.cpp
+++ b/src/particles/qquickparticleemitter.cpp
@@ -167,9 +167,9 @@ QT_BEGIN_NAMESPACE
     Default value is 0.
 */
 /*!
-    \qmlproperty StochasticDirection QtQuick.Particles2::Emitter::speed
+    \qmlproperty StochasticDirection QtQuick.Particles2::Emitter::velocity
 
-    The starting speed of the particles emitted.
+    The starting velocity of the particles emitted.
 */
 /*!
     \qmlproperty StochasticDirection QtQuick.Particles2::Emitter::acceleration
@@ -177,12 +177,12 @@ QT_BEGIN_NAMESPACE
     The starting acceleraton of the particles emitted.
 */
 /*!
-    \qmlproperty qreal QtQuick.Particles2::Emitter::speedFromMovement
+    \qmlproperty qreal QtQuick.Particles2::Emitter::velocityFromMovement
 
     If this value is non-zero, then any movement of the emitter will provide additional
     starting velocity to the particles based on the movement. The additional vector will be the
     same angle as the emitter's movement, with a magnitude that is the magnitude of the emitters
-    movement multiplied by speedFromMovement.
+    movement multiplied by velocityFromMovement.
 
     Default value is 0.
 */
@@ -223,7 +223,7 @@ QQuickParticleEmitter::QQuickParticleEmitter(QQuickItem *parent) :
   , m_system(0)
   , m_extruder(0)
   , m_defaultExtruder(0)
-  , m_speed(&m_nullVector)
+  , m_velocity(&m_nullVector)
   , m_acceleration(&m_nullVector)
   , m_particleSize(16)
   , m_particleEndSize(-1)
@@ -232,13 +232,13 @@ QQuickParticleEmitter::QQuickParticleEmitter(QQuickItem *parent) :
   , m_overwrite(true)
   , m_pulseLeft(0)
   , m_maxParticleCount(-1)
-  , m_speed_from_movement(0)
+  , m_velocity_from_movement(0)
   , m_reset_last(true)
   , m_last_timestamp(-1)
   , m_last_emission(0)
 
 {
-    //TODO: Reset speed/acc back to null vector? Or allow null pointer?
+    //TODO: Reset velocity/acc back to null vector? Or allow null pointer?
     connect(this, SIGNAL(maximumEmittedChanged(int)),
             this, SIGNAL(particleCountChanged()));
     connect(this, SIGNAL(particlesPerSecondChanged(qreal)),
@@ -326,12 +326,12 @@ int QQuickParticleEmitter::particleCount() const
     return m_particlesPerSecond*((m_particleDuration+m_particleDurationVariation)/1000.0);
 }
 
-void QQuickParticleEmitter::setSpeedFromMovement(qreal t)
+void QQuickParticleEmitter::setVelocityFromMovement(qreal t)
 {
-    if (t == m_speed_from_movement)
+    if (t == m_velocity_from_movement)
         return;
-    m_speed_from_movement = t;
-    emit speedFromMovementChanged();
+    m_velocity_from_movement = t;
+    emit velocityFromMovementChanged();
 }
 
 void QQuickParticleEmitter::reset()
@@ -439,12 +439,12 @@ void QQuickParticleEmitter::emitWindow(int timeStamp)
             datum->x = newPos.x();
             datum->y = newPos.y();
 
-            // Particle speed
-            const QPointF &speed = m_speed->sample(newPos);
-            datum->vx = speed.x()
-                    + m_speed_from_movement * vx;
-            datum->vy = speed.y()
-                    + m_speed_from_movement * vy;
+            // Particle velocity
+            const QPointF &velocity = m_velocity->sample(newPos);
+            datum->vx = velocity.x()
+                    + m_velocity_from_movement * vx;
+            datum->vy = velocity.y()
+                    + m_velocity_from_movement * vy;
 
             // Particle acceleration
             const QPointF &accel = m_acceleration->sample(newPos);
diff --git a/src/particles/qquickparticleemitter_p.h b/src/particles/qquickparticleemitter_p.h
index eb9e1fd..6829798 100644
--- a/src/particles/qquickparticleemitter_p.h
+++ b/src/particles/qquickparticleemitter_p.h
@@ -73,9 +73,9 @@ class QQuickParticleEmitter : public QQuickItem
     Q_PROPERTY(qreal endSize READ particleEndSize WRITE setParticleEndSize NOTIFY particleEndSizeChanged)
     Q_PROPERTY(qreal sizeVariation READ particleSizeVariation WRITE setParticleSizeVariation NOTIFY particleSizeVariationChanged)
 
-    Q_PROPERTY(QQuickDirection *speed READ speed WRITE setSpeed NOTIFY speedChanged)
+    Q_PROPERTY(QQuickDirection *velocity READ velocity WRITE setVelocity NOTIFY velocityChanged)
     Q_PROPERTY(QQuickDirection *acceleration READ acceleration WRITE setAcceleration NOTIFY accelerationChanged)
-    Q_PROPERTY(qreal speedFromMovement READ speedFromMovement WRITE setSpeedFromMovement NOTIFY speedFromMovementChanged)
+    Q_PROPERTY(qreal velocityFromMovement READ velocityFromMovement WRITE setVelocityFromMovement NOTIFY velocityFromMovementChanged)
 
     Q_ENUMS(Lifetime)
 public:
@@ -117,8 +117,8 @@ public:
         return m_particleDurationVariation;
     }
 
-    qreal speedFromMovement() const { return m_speed_from_movement; }
-    void setSpeedFromMovement(qreal s);
+    qreal velocityFromMovement() const { return m_velocity_from_movement; }
+    void setVelocityFromMovement(qreal s);
     virtual void componentComplete();
 signals:
     void emitParticles(QQmlV8Handle particles);
@@ -140,14 +140,14 @@ signals:
 
     void particleSizeVariationChanged(qreal arg);
 
-    void speedChanged(QQuickDirection * arg);
+    void velocityChanged(QQuickDirection * arg);
 
     void accelerationChanged(QQuickDirection * arg);
 
     void maximumEmittedChanged(int arg);
     void particleCountChanged();
 
-    void speedFromMovementChanged();
+    void velocityFromMovementChanged();
 
     void startTimeChanged(int arg);
 
@@ -231,11 +231,11 @@ public slots:
         }
     }
 
-    void setSpeed(QQuickDirection * arg)
+    void setVelocity(QQuickDirection * arg)
     {
-        if (m_speed != arg) {
-            m_speed = arg;
-            emit speedChanged(arg);
+        if (m_velocity != arg) {
+            m_velocity = arg;
+            emit velocityChanged(arg);
         }
     }
 
@@ -281,9 +281,9 @@ public:
            return m_particleSizeVariation;
        }
 
-       QQuickDirection * speed() const
+       QQuickDirection * velocity() const
        {
-           return m_speed;
+           return m_velocity;
        }
 
        QQuickDirection * acceleration() const
@@ -311,13 +311,13 @@ protected:
        QQuickParticleExtruder* m_extruder;
        QQuickParticleExtruder* m_defaultExtruder;
        QQuickParticleExtruder* effectiveExtruder();
-       QQuickDirection * m_speed;
+       QQuickDirection * m_velocity;
        QQuickDirection * m_acceleration;
        qreal m_particleSize;
        qreal m_particleEndSize;
        qreal m_particleSizeVariation;
 
-       qreal m_speedFromMovement;
+       qreal m_velocityFromMovement;
        int m_startTime;
        bool m_overwrite;
 
@@ -326,7 +326,7 @@ protected:
        int m_maxParticleCount;
 
        //Used in default implementation, but might be useful
-       qreal m_speed_from_movement;
+       qreal m_velocity_from_movement;
 
        int m_emitCap;
        bool m_reset_last;
diff --git a/src/particles/qquickparticlesystem.cpp b/src/particles/qquickparticlesystem.cpp
index 6b5fbfa..1cbc337 100644
--- a/src/particles/qquickparticlesystem.cpp
+++ b/src/particles/qquickparticlesystem.cpp
@@ -460,7 +460,7 @@ QQuickParticleData::QQuickParticleData(QQuickParticleSystem* sys)
     yx = 0;
     yy = 1;
     rotation = 0;
-    rotationSpeed = 0;
+    rotationVelocity = 0;
     autoRotate = 0;
     animIdx = 0;
     frameDuration = 1;
@@ -502,7 +502,7 @@ void QQuickParticleData::clone(const QQuickParticleData& other)
     yx = other.yx;
     yy = other.yy;
     rotation = other.rotation;
-    rotationSpeed = other.rotationSpeed;
+    rotationVelocity = other.rotationVelocity;
     autoRotate = other.autoRotate;
     animIdx = other.animIdx;
     frameDuration = other.frameDuration;
diff --git a/src/particles/qquickparticlesystem_p.h b/src/particles/qquickparticlesystem_p.h
index 2058db6..3c2324a 100644
--- a/src/particles/qquickparticlesystem_p.h
+++ b/src/particles/qquickparticlesystem_p.h
@@ -198,7 +198,7 @@ public:
     float yx;
     float yy;
     float rotation;
-    float rotationSpeed;
+    float rotationVelocity;
     float autoRotate;//Assume that GPUs prefer floats to bools
     //Used by ImageParticle Sprite mode
     float animIdx;
diff --git a/src/particles/qquicktrailemitter.cpp b/src/particles/qquicktrailemitter.cpp
index 5f09410..86d0c16 100644
--- a/src/particles/qquicktrailemitter.cpp
+++ b/src/particles/qquicktrailemitter.cpp
@@ -80,12 +80,12 @@ QQuickTrailEmitter::QQuickTrailEmitter(QQuickItem *parent) :
     The type of logical particle which this is emitting from.
 */
 /*!
-    \qmlproperty qreal QtQuick.Particles2::TrailEmitter::speedFromMovement
+    \qmlproperty qreal QtQuick.Particles2::TrailEmitter::velocityFromMovement
 
     If this value is non-zero, then any movement of the emitter will provide additional
     starting velocity to the particles based on the movement. The additional vector will be the
     same angle as the emitter's movement, with a magnitude that is the magnitude of the emitters
-    movement multiplied by speedFromMovement.
+    movement multiplied by velocityFromMovement.
 
     Default value is 0.
 */
@@ -170,7 +170,7 @@ void QQuickTrailEmitter::emitWindow(int timeStamp)
         }
     }
 
-    //TODO: Implement startTime and speedFromMovement
+    //TODO: Implement startTime and velocityFromMovement
     qreal time = timeStamp / 1000.;
     qreal particleRatio = 1. / m_particlesPerParticlePerSecond;
     qreal pt;
@@ -229,12 +229,12 @@ void QQuickTrailEmitter::emitWindow(int timeStamp)
                 datum->x = newPos.x();
                 datum->y = newPos.y();
 
-                // Particle speed
-                const QPointF &speed = m_speed->sample(newPos);
-                datum->vx = speed.x()
-                    + m_speed_from_movement * d->vx;
-                datum->vy = speed.y()
-                    + m_speed_from_movement * d->vy;
+                // Particle velocity
+                const QPointF &velocity = m_velocity->sample(newPos);
+                datum->vx = velocity.x()
+                    + m_velocity_from_movement * d->vx;
+                datum->vy = velocity.y()
+                    + m_velocity_from_movement * d->vy;
 
                 // Particle acceleration
                 const QPointF &accel = m_acceleration->sample(newPos);
diff --git a/src/particles/qquickv8particledata.cpp b/src/particles/qquickv8particledata.cpp
index eb9881e..296797f 100644
--- a/src/particles/qquickv8particledata.cpp
+++ b/src/particles/qquickv8particledata.cpp
@@ -172,14 +172,14 @@ QT_BEGIN_NAMESPACE
 */
 
 /*!
-    \qmlproperty real QtQuick.Particles2::Particle::rotationSpeed
+    \qmlproperty real QtQuick.Particles2::Particle::rotationVelocity
     Degrees clockwise per second that the particle image is rotated at while alive.
 */
 /*!
     \qmlproperty bool QtQuick.Particles2::Particle::autoRotate
     If autoRotate is true, then the particle's rotation will be
     set so that it faces the direction of travel, plus any
-    rotation from the rotation or rotationSpeed properties.
+    rotation from the rotation or rotationVelocity properties.
 */
 
 /*!
@@ -409,7 +409,7 @@ FLOAT_GETTER_AND_SETTER(xy)
 FLOAT_GETTER_AND_SETTER(yx)
 FLOAT_GETTER_AND_SETTER(yy)
 FLOAT_GETTER_AND_SETTER(rotation)
-FLOAT_GETTER_AND_SETTER(rotationSpeed)
+FLOAT_GETTER_AND_SETTER(rotationVelocity)
 FLOAT_GETTER_AND_SETTER(animIdx)
 FLOAT_GETTER_AND_SETTER(frameDuration)
 FLOAT_GETTER_AND_SETTER(frameAt)
@@ -448,7 +448,7 @@ QV8ParticleDataDeletable::QV8ParticleDataDeletable(QV8Engine *engine)
     REGISTER_ACCESSOR(ft, engine, yx, yDeformationVectorX);
     REGISTER_ACCESSOR(ft, engine, yy, yDeformationVectorY);
     REGISTER_ACCESSOR(ft, engine, rotation, rotation);
-    REGISTER_ACCESSOR(ft, engine, rotationSpeed, rotationSpeed);
+    REGISTER_ACCESSOR(ft, engine, rotationVelocity, rotationVelocity);
     REGISTER_ACCESSOR(ft, engine, autoRotate, autoRotate);
     REGISTER_ACCESSOR(ft, engine, animIdx, animationIndex);
     REGISTER_ACCESSOR(ft, engine, frameDuration, frameDuration);
diff --git a/src/particles/qquickwander.cpp b/src/particles/qquickwander.cpp
index 9def03a..a7e6c8d 100644
--- a/src/particles/qquickwander.cpp
+++ b/src/particles/qquickwander.cpp
@@ -120,7 +120,7 @@ WanderData* QQuickWanderAffector::getData(int idx)
 
 bool QQuickWanderAffector::affectParticle(QQuickParticleData* data, qreal dt)
 {
-    /*TODO: Add a mode which does basically this - picking a direction, going in it (random speed) and then going back
+    /*TODO: Add a mode which does basically this - picking a direction, going in it (random velocity) and then going back
     WanderData* d = getData(data->systemIndex);
     if (m_xVariance != 0.) {
         if ((d->x_vel > d->x_peak && d->x_var > 0.0) || (d->x_vel < -d->x_peak && d->x_var < 0.0)) {
diff --git a/tests/auto/particles/qquickage/data/jump.qml b/tests/auto/particles/qquickage/data/jump.qml
index 909e903..29a06e0 100644
--- a/tests/auto/particles/qquickage/data/jump.qml
+++ b/tests/auto/particles/qquickage/data/jump.qml
@@ -64,7 +64,7 @@ Rectangle {
             size: 32
             emitRate: 1000
             lifeSpan: 500
-            speed: PointDirection{ x: 500; y: 500 }
+            velocity: PointDirection{ x: 500; y: 500 }
         }
     }
 }
diff --git a/tests/auto/particles/qquickage/data/kill.qml b/tests/auto/particles/qquickage/data/kill.qml
index 2223498..d60468e 100644
--- a/tests/auto/particles/qquickage/data/kill.qml
+++ b/tests/auto/particles/qquickage/data/kill.qml
@@ -60,7 +60,7 @@ Rectangle {
             size: 32
             emitRate: 1000
             lifeSpan: 500
-            speed: PointDirection{ x: 1000; y: 1000 }
+            velocity: PointDirection{ x: 1000; y: 1000 }
         }
     }
 }
diff --git a/tests/auto/particles/qquickage/data/onceoff.qml b/tests/auto/particles/qquickage/data/onceoff.qml
index 2a29476..14a0a2c 100644
--- a/tests/auto/particles/qquickage/data/onceoff.qml
+++ b/tests/auto/particles/qquickage/data/onceoff.qml
@@ -63,7 +63,7 @@ Rectangle {
             size: 32
             emitRate: 1000
             lifeSpan: 500
-            speed: PointDirection{ x: 500; y: 500 }
+            velocity: PointDirection{ x: 500; y: 500 }
         }
     }
 }
diff --git a/tests/auto/particles/qquickage/data/sustained.qml b/tests/auto/particles/qquickage/data/sustained.qml
index 31c4c37..8c6e2c4 100644
--- a/tests/auto/particles/qquickage/data/sustained.qml
+++ b/tests/auto/particles/qquickage/data/sustained.qml
@@ -63,7 +63,7 @@ Rectangle {
             size: 32
             emitRate: 1000
             lifeSpan: 500
-            speed: PointDirection{ x: 500; y: 500 }
+            velocity: PointDirection{ x: 500; y: 500 }
         }
     }
 }
diff --git a/tests/auto/particles/qquickangleddirection/data/basic.qml b/tests/auto/particles/qquickangleddirection/data/basic.qml
index 93406c4..90e9697 100644
--- a/tests/auto/particles/qquickangleddirection/data/basic.qml
+++ b/tests/auto/particles/qquickangleddirection/data/basic.qml
@@ -61,7 +61,7 @@ Rectangle {
             size: 32
             emitRate: 1000
             lifeSpan: 500
-            speed: AngleDirection { angle: 45; magnitude: 500 }
+            velocity: AngleDirection { angle: 45; magnitude: 500 }
             acceleration: AngleDirection { angle: 45; angleVariation: 22; magnitude: 250; magnitudeVariation: 249}
         }
     }
diff --git a/tests/auto/particles/qquickcumulativedirection/data/basic.qml b/tests/auto/particles/qquickcumulativedirection/data/basic.qml
index a2957b7..4bf5565 100644
--- a/tests/auto/particles/qquickcumulativedirection/data/basic.qml
+++ b/tests/auto/particles/qquickcumulativedirection/data/basic.qml
@@ -61,7 +61,7 @@ Rectangle {
             size: 32
             emitRate: 1000
             lifeSpan: 500
-            speed: CumulativeDirection {
+            velocity: CumulativeDirection {
                 PointDirection { x: 100; y: -100 }
                 PointDirection { x: -100; y: 100 }
             }
diff --git a/tests/auto/particles/qquickcustomaffector/data/move.qml b/tests/auto/particles/qquickcustomaffector/data/move.qml
index 3b259f5..19e578d 100644
--- a/tests/auto/particles/qquickcustomaffector/data/move.qml
+++ b/tests/auto/particles/qquickcustomaffector/data/move.qml
@@ -67,7 +67,7 @@ Rectangle {
             once: false
             relative: false
             position: PointDirection { x: 50; y: 50; }
-            speed: PointDirection { x: 50; y: 50; }
+            velocity: PointDirection { x: 50; y: 50; }
             acceleration: PointDirection { x: 50; y: 50; }
         }
     }
diff --git a/tests/auto/particles/qquickfriction/data/basic.qml b/tests/auto/particles/qquickfriction/data/basic.qml
index 5d27f2a..59d8939 100644
--- a/tests/auto/particles/qquickfriction/data/basic.qml
+++ b/tests/auto/particles/qquickfriction/data/basic.qml
@@ -63,7 +63,7 @@ Rectangle {
 
         Emitter{
             //0,0 position
-            speed: PointDirection{x:100}
+            velocity: PointDirection{x:100}
             size: 32
             emitRate: 1000
             lifeSpan: 500
@@ -78,7 +78,7 @@ Rectangle {
             //0,0 position
             group: "notdefault"
             y:200
-            speed: PointDirection{x:100}
+            velocity: PointDirection{x:100}
             size: 32
             emitRate: 1000
             lifeSpan: 500
diff --git a/tests/auto/particles/qquickfriction/data/threshold.qml b/tests/auto/particles/qquickfriction/data/threshold.qml
index 60386f9..01320f3 100644
--- a/tests/auto/particles/qquickfriction/data/threshold.qml
+++ b/tests/auto/particles/qquickfriction/data/threshold.qml
@@ -58,13 +58,13 @@ Rectangle {
         }
 
         Friction {
-            factor: 1000 //speed limit 50
+            factor: 1000 //velocity limit 50
             threshold: 50
         }
 
         Emitter{
             //0,0 position
-            speed: PointDirection{x:1000}
+            velocity: PointDirection{x:1000}
             size: 32
             emitRate: 1000
             lifeSpan: 500
diff --git a/tests/auto/particles/qquickfriction/tst_qquickfriction.cpp b/tests/auto/particles/qquickfriction/tst_qquickfriction.cpp
index c3559fa..2beccd7 100644
--- a/tests/auto/particles/qquickfriction/tst_qquickfriction.cpp
+++ b/tests/auto/particles/qquickfriction/tst_qquickfriction.cpp
@@ -114,7 +114,7 @@ void tst_qquickfriction::test_threshold()
     QQuickParticleSystem* system = view->rootObject()->findChild<QQuickParticleSystem*>("system");
     ensureAnimTime(600, system->m_animation);
 
-    //Speed capped at 50, but it might take a frame or two to get there
+    //Velocity capped at 50, but it might take a frame or two to get there
     QVERIFY(extremelyFuzzyCompare(system->groupData[0]->size(), 500, 10));
     foreach (QQuickParticleData *d, system->groupData[0]->data) {
         if (d->t == -1.0f)
diff --git a/tests/auto/particles/qquickimageparticle/data/deformed.qml b/tests/auto/particles/qquickimageparticle/data/deformed.qml
index c4ad331..51cae4d 100644
--- a/tests/auto/particles/qquickimageparticle/data/deformed.qml
+++ b/tests/auto/particles/qquickimageparticle/data/deformed.qml
@@ -55,7 +55,7 @@ Rectangle {
         ImageParticle {
             source: "../../shared/star.png"
             rotation: 90
-            rotationSpeed: 90
+            rotationVelocity: 90
             autoRotation: true
             yVector: PointDirection{x: 0.5; y: 0.5}
             xVector: PointDirection{x: 0.5; y: 0.5}
diff --git a/tests/auto/particles/qquickimageparticle/tst_qquickimageparticle.cpp b/tests/auto/particles/qquickimageparticle/tst_qquickimageparticle.cpp
index cbc09fd..52a3075 100644
--- a/tests/auto/particles/qquickimageparticle/tst_qquickimageparticle.cpp
+++ b/tests/auto/particles/qquickimageparticle/tst_qquickimageparticle.cpp
@@ -108,7 +108,7 @@ void tst_qquickimageparticle::test_basic()
         QCOMPARE(d->yy, 1.0f);
         QCOMPARE(d->yx, 0.0f);
         QCOMPARE(d->rotation, 0.0f);
-        QCOMPARE(d->rotationSpeed, 0.0f);
+        QCOMPARE(d->rotationVelocity, 0.0f);
         QCOMPARE(d->autoRotate, 0.0f);
         QCOMPARE(d->animX, 0.0f);
         QCOMPARE(d->animY, 0.0f);
@@ -152,7 +152,7 @@ void tst_qquickimageparticle::test_colored()
         QCOMPARE(d->yy, 1.0f);
         QCOMPARE(d->yx, 0.0f);
         QCOMPARE(d->rotation, 0.0f);
-        QCOMPARE(d->rotationSpeed, 0.0f);
+        QCOMPARE(d->rotationVelocity, 0.0f);
         QCOMPARE(d->autoRotate, 0.0f);
         QCOMPARE(d->animX, 0.0f);
         QCOMPARE(d->animY, 0.0f);
@@ -197,7 +197,7 @@ void tst_qquickimageparticle::test_colorVariance()
         QCOMPARE(d->yy, 1.0f);
         QCOMPARE(d->yx, 0.0f);
         QCOMPARE(d->rotation, 0.0f);
-        QCOMPARE(d->rotationSpeed, 0.0f);
+        QCOMPARE(d->rotationVelocity, 0.0f);
         QCOMPARE(d->autoRotate, 0.0f);
         QCOMPARE(d->animX, 0.0f);
         QCOMPARE(d->animY, 0.0f);
@@ -241,7 +241,7 @@ void tst_qquickimageparticle::test_deformed()
         QCOMPARE(d->yy, 0.5f);
         QCOMPARE(d->yx, 0.5f);
         QCOMPARE(d->rotation, 90.0f * (float)CONV_FACTOR);
-        QCOMPARE(d->rotationSpeed, 90.0f * (float)CONV_FACTOR);
+        QCOMPARE(d->rotationVelocity, 90.0f * (float)CONV_FACTOR);
         QCOMPARE(d->autoRotate, 1.0f);
         QCOMPARE(d->animX, 0.0f);
         QCOMPARE(d->animY, 0.0f);
@@ -285,7 +285,7 @@ void tst_qquickimageparticle::test_tabled()
         QCOMPARE(d->yy, 1.0f);
         QCOMPARE(d->yx, 0.0f);
         QCOMPARE(d->rotation, 0.0f);
-        QCOMPARE(d->rotationSpeed, 0.0f);
+        QCOMPARE(d->rotationVelocity, 0.0f);
         QCOMPARE(d->autoRotate, 0.0f);
         QCOMPARE(d->animX, 0.0f);
         QCOMPARE(d->animY, 0.0f);
@@ -330,7 +330,7 @@ void tst_qquickimageparticle::test_sprite()
         QCOMPARE(d->yy, 1.0f);
         QCOMPARE(d->yx, 0.0f);
         QCOMPARE(d->rotation, 0.0f);
-        QCOMPARE(d->rotationSpeed, 0.0f);
+        QCOMPARE(d->rotationVelocity, 0.0f);
         QCOMPARE(d->autoRotate, 0.0f);
         QVERIFY(myFuzzyCompare(d->frameDuration, 120.f));
         QCOMPARE(d->frameCount, 6.0f);
diff --git a/tests/auto/particles/qquickpointdirection/data/basic.qml b/tests/auto/particles/qquickpointdirection/data/basic.qml
index 930ba1d..298f33d 100644
--- a/tests/auto/particles/qquickpointdirection/data/basic.qml
+++ b/tests/auto/particles/qquickpointdirection/data/basic.qml
@@ -59,7 +59,7 @@ Rectangle {
         Emitter{
             //0,0 position
             size: 32
-            speed: PointDirection{ x: 100; y: 100 }
+            velocity: PointDirection{ x: 100; y: 100 }
             acceleration: PointDirection{ x: 100; xVariation: 100; y: 100; yVariation: 100 }
             emitRate: 1000
             lifeSpan: 500
diff --git a/tests/auto/particles/qquicktargetdirection/data/basic.qml b/tests/auto/particles/qquicktargetdirection/data/basic.qml
index 97ce724..f5c53e4 100644
--- a/tests/auto/particles/qquicktargetdirection/data/basic.qml
+++ b/tests/auto/particles/qquicktargetdirection/data/basic.qml
@@ -58,7 +58,7 @@ Rectangle {
 
         Emitter{
             //0,0 position
-            speed: TargetDirection{ targetItem: sys; proportionalMagnitude: true; magnitude: 1 }
+            velocity: TargetDirection{ targetItem: sys; proportionalMagnitude: true; magnitude: 1 }
             size: 32
             emitRate: 1000
             lifeSpan: 500
diff --git a/tests/auto/particles/qquicktrailemitter/data/basic.qml b/tests/auto/particles/qquicktrailemitter/data/basic.qml
index 77058f0..5ffd0ab 100644
--- a/tests/auto/particles/qquicktrailemitter/data/basic.qml
+++ b/tests/auto/particles/qquicktrailemitter/data/basic.qml
@@ -64,7 +64,7 @@ Rectangle {
             size: 32
             emitRatePerParticle: 2
             lifeSpan: 500
-            speed: PointDirection{ x: 500; y: 500 }
+            velocity: PointDirection{ x: 500; y: 500 }
         }
         Emitter{
             x: 4
diff --git a/tests/benchmarks/qml/qqmlcomponent/data/samegame/BoomBlock.qml b/tests/benchmarks/qml/qqmlcomponent/data/samegame/BoomBlock.qml
index 5678fa4..25aa794 100644
--- a/tests/benchmarks/qml/qqmlcomponent/data/samegame/BoomBlock.qml
+++ b/tests/benchmarks/qml/qqmlcomponent/data/samegame/BoomBlock.qml
@@ -86,7 +86,7 @@ Item {
         }
         anchors.fill: parent
 
-        speed: TargetDirection{targetX: block.width/2; targetY: block.height/2; magnitude: -60; magnitudeVariation: 60}
+        velocity: TargetDirection{targetX: block.width/2; targetY: block.height/2; magnitude: -60; magnitudeVariation: 60}
         shape: EllipseShape{fill:true}
         enabled: false;
         lifeSpan: 700; lifeSpanVariation: 100
diff --git a/tests/testapplications/elements/content/AffectorElement.qml b/tests/testapplications/elements/content/AffectorElement.qml
index f5507a6..5e4b0a7 100644
--- a/tests/testapplications/elements/content/AffectorElement.qml
+++ b/tests/testapplications/elements/content/AffectorElement.qml
@@ -91,7 +91,7 @@ Item {
             height: 5
             emitRate: 100
             lifeSpan: 10000
-            speed: AngleDirection { angle: 0; magnitude: 30 }
+            velocity: AngleDirection { angle: 0; magnitude: 30 }
         }
 
         // Affectors
diff --git a/tests/testapplications/elements/content/DirectionElement.qml b/tests/testapplications/elements/content/DirectionElement.qml
index c6c1dbc..42a24a28 100644
--- a/tests/testapplications/elements/content/DirectionElement.qml
+++ b/tests/testapplications/elements/content/DirectionElement.qml
@@ -77,7 +77,7 @@ Item {
             emitRate: 50
             lifeSpan: 4000
             size: 20
-            speed: angledirectionelement
+            velocity: angledirectionelement
             AngleDirection { id: angledirectionelement; angle: -75; angleVariation: 5; magnitude: 150 }
             TargetDirection { id: targetdirectionelement; targetItem: targetbox; targetVariation: 10; magnitude: 150 }
             PointDirection { id: pointdirectionelement; y: -100; xVariation: 10; yVariation: 10; }
@@ -103,20 +103,20 @@ Item {
                 "Next, let's change the Emitter to target an item." }
         },
         State { name: "ontarget"; when: statenum == 2
-            PropertyChanges { target: emitter; speed: targetdirectionelement }
+            PropertyChanges { target: emitter; velocity: targetdirectionelement }
             PropertyChanges { target: targeticon; height: 50; width: 50 }
             PropertyChanges { target: directionelementtest
                 testtext: "The particles should be directed at the rectangle.\n"+
                 "Next, let's set an arbritary point to direct the particles to." }
         },
         State { name: "onpoint"; when: statenum == 3
-            PropertyChanges { target: emitter; speed: pointdirectionelement }
+            PropertyChanges { target: emitter; velocity: pointdirectionelement }
             PropertyChanges { target: directionelementtest
                 testtext: "The particles should be directed upwards with a small amount of spread.\n"+
                 "Next, let's create a fountain with CumulativeDirection and a downward PointDirection" }
         },
         State { name: "cumulative"; when: statenum == 4
-            PropertyChanges { target: emitter; emitRate: 200; speed: cumulativedirectionelement
+            PropertyChanges { target: emitter; emitRate: 200; velocity: cumulativedirectionelement
                 acceleration: pointdirectionelementdownward }
             PropertyChanges { target: imgparticle; color: "aqua"; colorVariation: .2 }
             PropertyChanges { target: directionelementtest
diff --git a/tests/testapplications/elements/content/EmitterElement.qml b/tests/testapplications/elements/content/EmitterElement.qml
index 617a934..87f5b31 100644
--- a/tests/testapplications/elements/content/EmitterElement.qml
+++ b/tests/testapplications/elements/content/EmitterElement.qml
@@ -59,10 +59,10 @@ Item {
         Emitter {
             id: emitterelement
             anchors.centerIn: parent
-            property int emitspeed: 10
+            property int emitvelocity: 10
             emitRate: 5
             lifeSpan: 1000
-            speed: AngleDirection { angle: 0; angleVariation: 360; magnitude: emitterelement.emitspeed }
+            velocity: AngleDirection { angle: 0; angleVariation: 360; magnitude: emitterelement.emitvelocity }
         }
     }
 
@@ -77,28 +77,28 @@ Item {
             PropertyChanges { target: emitterelementtest
                 testtext: "This is an Emitter element, visualized by an ImageParticle. It should be emitting particles "+
                 "slowly from the center of the display.\n"+
-                "Next, let's change the emission speed of the particles." }
+                "Next, let's change the emission velocity of the particles." }
         },
         State { name: "fast"; when: statenum == 2
-            PropertyChanges { target: emitterelement; emitspeed: 50 }
+            PropertyChanges { target: emitterelement; emitvelocity: 50 }
             PropertyChanges { target: emitterelementtest
                 testtext: "The particles emitted should be moving more quickly.\n"+
                 "Next, let's increase the number of particles emitted." }
         },
         State { name: "many"; when: statenum == 3
-            PropertyChanges { target: emitterelement; emitspeed: 50; emitRate: 100 }
+            PropertyChanges { target: emitterelement; emitvelocity: 50; emitRate: 100 }
             PropertyChanges { target: emitterelementtest
             testtext: "The particles should now be quick and numerous.\n"+
                 "Next, let's allow them to survive longer." }
         },
         State { name: "enduring"; when: statenum == 4
-            PropertyChanges { target: emitterelement; emitspeed: 50; emitRate: 100; lifeSpan: 3000 }
+            PropertyChanges { target: emitterelement; emitvelocity: 50; emitRate: 100; lifeSpan: 3000 }
             PropertyChanges { target: emitterelementtest
                 testtext: "The particles should now be enduring to the edges of the display.\n"+
                 "Next, let's have them changing their size." }
         },
         State { name: "sized"; when: statenum == 5
-            PropertyChanges { target: emitterelement; emitspeed: 50; emitRate: 100; lifeSpan: 3000; size: 20; endSize: 5 }
+            PropertyChanges { target: emitterelement; emitvelocity: 50; emitRate: 100; lifeSpan: 3000; size: 20; endSize: 5 }
             PropertyChanges { target: emitterelementtest
                 testtext: "The particles should now be starting large and ending small.\n"+
                 "Advance to restart the test." }
diff --git a/tests/testapplications/elements/content/ImageParticleElement.qml b/tests/testapplications/elements/content/ImageParticleElement.qml
index cf98e15..75daa38 100644
--- a/tests/testapplications/elements/content/ImageParticleElement.qml
+++ b/tests/testapplications/elements/content/ImageParticleElement.qml
@@ -61,7 +61,7 @@ Item {
             anchors.centerIn: parent
             emitRate: 50
             lifeSpan: 3000
-            speed: AngleDirection { angle: 0; angleVariation: 360; magnitude: 60 }
+            velocity: AngleDirection { angle: 0; angleVariation: 360; magnitude: 60 }
         }
     }
 
@@ -85,13 +85,13 @@ Item {
                 "Next, let's get them spinning." }
         },
         State { name: "spinning"; when: statenum == 3
-            PropertyChanges { target: imageparticle; color: "lightgreen"; rotation: 360; rotationSpeed: 100 }
+            PropertyChanges { target: imageparticle; color: "lightgreen"; rotation: 360; rotationVelocity: 100 }
             PropertyChanges { target: imageparticleelementtest
                 testtext: "The particles should now be green and spinning.\n"+
                 "Next, let's get them popping in and out." }
         },
         State { name: "scaling"; when: statenum == 4
-            PropertyChanges { target: imageparticle; color: "lightgreen"; rotation: 360; rotationSpeed: 100; entryEffect: ImageParticle.Scale }
+            PropertyChanges { target: imageparticle; color: "lightgreen"; rotation: 360; rotationVelocity: 100; entryEffect: ImageParticle.Scale }
             PropertyChanges { target: imageparticleelementtest
                 testtext: "The particles should now be scaling in and out.\n"+
                 "Advance to restart the test." }
diff --git a/tests/testapplications/elements/content/ParticleSystemElement.qml b/tests/testapplications/elements/content/ParticleSystemElement.qml
index ba3892f..5bc8b29 100644
--- a/tests/testapplications/elements/content/ParticleSystemElement.qml
+++ b/tests/testapplications/elements/content/ParticleSystemElement.qml
@@ -55,7 +55,7 @@ Item {
             id: particleemitter
             x: 50; y: 200
             emitRate: 100
-            speed: AngleDirection { angle: 0; angleVariation: 360; magnitude: 100 }
+            velocity: AngleDirection { angle: 0; angleVariation: 360; magnitude: 100 }
             Rectangle { anchors.centerIn: parent; height: 1; width: 1; color: "black" }
             SequentialAnimation {
                 running: true; paused: particlesystemelement.paused; loops: Animation.Infinite
diff --git a/tests/testapplications/elements/content/ShapeElement.qml b/tests/testapplications/elements/content/ShapeElement.qml
index c0ccd91..6225a3d 100644
--- a/tests/testapplications/elements/content/ShapeElement.qml
+++ b/tests/testapplications/elements/content/ShapeElement.qml
@@ -67,7 +67,7 @@ Item {
             anchors.fill: parent
             emitRate: 500
             lifeSpan: 2000
-            speed: TargetDirection {
+            velocity: TargetDirection {
                 targetX: particlesystem.width/2
                 targetY: particlesystem.height/2
                 proportionalMagnitude: true
@@ -82,7 +82,7 @@ Item {
             anchors.fill: parent
             emitRate: 200
             lifeSpan: 1000
-            speed: TargetDirection {
+            velocity: TargetDirection {
                 targetX: particlesystem.width/2
                 targetY: particlesystem.height/2
                 proportionalMagnitude: true
diff --git a/tests/testapplications/elements/content/TrailEmitterElement.qml b/tests/testapplications/elements/content/TrailEmitterElement.qml
index a151237..9d3168b 100644
--- a/tests/testapplications/elements/content/TrailEmitterElement.qml
+++ b/tests/testapplications/elements/content/TrailEmitterElement.qml
@@ -87,7 +87,7 @@ Item {
             emitRate: 1
             lifeSpan: 3000
             size: 20
-            speed: AngleDirection { angle: 270; angleVariation: 25; magnitude: 150 }
+            velocity: AngleDirection { angle: 270; angleVariation: 25; magnitude: 150 }
             group: "orangemissile"
         }
         Emitter {
@@ -98,7 +98,7 @@ Item {
             emitRate: 1
             lifeSpan: 3000
             size: 20
-            speed: AngleDirection { angle: 270; angleVariation: 25; magnitude: 150 }
+            velocity: AngleDirection { angle: 270; angleVariation: 25; magnitude: 150 }
             group: "greenmissile"
         }
         Gravity {
@@ -113,8 +113,8 @@ Item {
             anchors.fill: parent
             emitRatePerParticle: 50
             lifeSpan: 1000
-            speedFromMovement: .2
-            speed: AngleDirection { angle: 0; angleVariation: 360; magnitude: 5 }
+            velocityFromMovement: .2
+            velocity: AngleDirection { angle: 0; angleVariation: 360; magnitude: 5 }
             maximumEmitted: 500
             shape: basicshape
         }
diff --git a/tests/testapplications/listview/onRemove.qml b/tests/testapplications/listview/onRemove.qml
index 2c1d52a..87ef9f6 100644
--- a/tests/testapplications/listview/onRemove.qml
+++ b/tests/testapplications/listview/onRemove.qml
@@ -68,7 +68,7 @@ Item {
                 system: ps
                 anchors.fill: parent
                 enabled: false
-                speed: AngleDirection {
+                velocity: AngleDirection {
                     angle: 0
                     angleVariation: 360
                     magnitude: 50
diff --git a/tests/testapplications/listview/viewTransitions.qml b/tests/testapplications/listview/viewTransitions.qml
index 6ed7cc1..92a9c6f 100644
--- a/tests/testapplications/listview/viewTransitions.qml
+++ b/tests/testapplications/listview/viewTransitions.qml
@@ -68,7 +68,7 @@ Item {
                 system: ps
                 anchors.fill: parent
                 enabled: false
-                speed: AngleDirection {
+                velocity: AngleDirection {
                     angle: 0
                     angleVariation: 360
                     magnitude: 50
@@ -81,7 +81,7 @@ Item {
                 anchors.fill: parent
                 enabled: item.movn
                 emitRate: parts
-                speed: AngleDirection {
+                velocity: AngleDirection {
                     angle: 0
                     angleVariation: 360
                     magnitude: 2